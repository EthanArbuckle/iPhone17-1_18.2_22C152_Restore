uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 48);
  uint64_t v4 = *v5;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 4);
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B204488C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  unint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *a3;
  v9 = 0;
  uint64_t v10 = 0;
  __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::SetFinal(v6, a2, (uint64_t)&v7);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_1B20449B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  v5 = *(void **)(v4[8] + 8 * a2);
  v5[4] = 0;
  v5[5] = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v5 + 6);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48);
  return std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::InitMutableArcIterator()
{
}

void sub_1B2044F48(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FC00;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A330;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B2045048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D130;
  uint64_t v2 = (void *)a1[9];
  if (v2 != (void *)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void *)a1[8];
    do
    {
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FC00;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B204535C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2045458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B204555C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B2045628(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FC00;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A330;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v21 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v19);
  while (1)
  {
    if (!v19)
    {
      if ((int)v21 >= v20) {
        goto LABEL_33;
      }
LABEL_11:
      uint64_t v9 = v21;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 16))(v19)) {
      break;
    }
    if (!v19) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v19 + 24))();
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState((void *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v16, a2, v9);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::SetFinal(a1, v9, &v16);
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 48), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __p.__r_.__value_.__r.__words[2]) {
          goto LABEL_26;
        }
LABEL_20:
        v11 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 48 * v15);
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_20;
      }
      v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_21:
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__p.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_28;
    }
LABEL_26:
    if (v14) {
      --*v14;
    }
LABEL_28:
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 32))(v19);
    }
    else {
      ++v21;
    }
  }
  if (v19) {
    (*(void (**)(void))(*(void *)v19 + 8))();
  }
LABEL_33:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B2045B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFstBaseImpl(v21);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B2045DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>();
  }
  _Unwind_Resume(exception_object);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8 * a2);
  uint64_t v4 = *a3;
  int v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  *(void *)uint64_t v3 = v4;
  if ((uint64_t *)v3 != &v4) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 + 8), (char *)__p, (uint64_t)v6, (v6 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_1B2045E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B2045EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  char v17 = 0;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = a3;
    do
    {
      uint64_t v11 = *(void *)(v10 - 48);
      v10 -= 48;
      *(void *)(v7 - 48) = v11;
      uint64_t v12 = *(void *)(v10 + 8);
      *(void *)(v7 - 32) = 0;
      uint64_t v13 = v7 - 32;
      *(void *)(v7 - 40) = v12;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(v7 - 32), *(const void **)(v10 + 16), *(void *)(v10 + 24), (uint64_t)(*(void *)(v10 + 24) - *(void *)(v10 + 16)) >> 2);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      uint64_t v7 = *((void *)&v19 + 1) - 48;
      *((void *)&v19 + 1) -= 48;
      uint64_t v9 = v10;
    }
    while (v10 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

void sub_1B204605C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[4];
  }
  if (!a2[1]) {
    ++a1[5];
  }
  uint64_t v3 = a1 + 6;
  unint64_t v4 = a1[7];
  if (v4 >= a1[8])
  {
    uint64_t result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const&>((uint64_t)v3, (uint64_t)a2);
    uint64_t result = v4 + 48;
  }
  a1[7] = result;
  return result;
}

void *std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  *(void *)(v4 + 8) = *(void *)(a2 + 8);
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 16) = 0;
  uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(v4 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1B2046184(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[12 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  char v17 = (char *)&v10[12 * v9];
  void *v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  v11[2] = 0;
  v11 += 2;
  *(v11 - 1) = v12;
  v11[1] = 0;
  v11[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  v10[12 * v4 + 10] = *(_DWORD *)(a2 + 40);
  v16 += 6;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B20462B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      unint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, a2, a3, 1);
  }
}

void sub_1B20463FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7 = a1;
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v9 = v8;
  if (!a4
    || (uint64_t v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    unint64_t v9 = v8 & 7;
    unint64_t v78 = v9;
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      v74 = 0;
      v75 = &v78;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(v7, (uint64_t)&v72);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      uint64_t v12 = a2 & 0xC0000;
      uint64_t v13 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0) {
        uint64_t v13 = 0x10425A850000;
      }
      unint64_t v14 = v9 | v13;
      uint64_t v15 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0) {
        v14 |= 0x100000uLL;
      }
      unint64_t v78 = v14;
      memset(&v71, 0, sizeof(v71));
      memset(&v70, 0, sizeof(v70));
      unsigned int v69 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 128))(v7, &v67);
      int v16 = 0;
      uint64_t v61 = v7;
LABEL_12:
      if (v67)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v67 + 16))(v67))
        {
          if (v67)
          {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v67 + 24))();
LABEL_18:
            std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v17);
            v74 = 0;
            v75 = 0;
            uint64_t v76 = 0;
            v71.__end_ = v71.__begin_;
            v70.__end_ = v70.__begin_;
            if (v12) {
              std::vector<int>::reserve(&v71, v18);
            }
            if (v15) {
              std::vector<int>::reserve(&v70, v18);
            }
            unint64_t v66 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v7 + 136))(v7, v17, &v62);
            char v19 = 1;
            while (1)
            {
              if (v62)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v62 + 24))(v62))
                {
                  if (v62)
                  {
                    (*(void (**)(void))(*(void *)v62 + 8))();
                  }
                  else
                  {
LABEL_94:
                    if (v65) {
                      --*v65;
                    }
                  }
                  uint64_t v7 = v61;
                  if (v12
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v71.__end_ - (char *)v71.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    unint64_t v47 = v71.__end_ - v71.__begin_;
                    if (v47 <= 2) {
                      unint64_t v47 = 2;
                    }
                    std::vector<unsigned int>::pointer v48 = v71.__begin_ + 1;
                    unsigned int v49 = *v71.__begin_;
                    unint64_t v50 = v47 - 1;
                    while (1)
                    {
                      unsigned int v52 = *v48++;
                      unsigned int v51 = v52;
                      if (v52 == v49) {
                        break;
                      }
                      unsigned int v49 = v51;
                      if (!--v50) {
                        goto LABEL_103;
                      }
                    }
                    unint64_t v78 = v78 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v15)
                    {
LABEL_114:
                      if (v16 >= 1) {
                        unint64_t v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v61 + 32))(&v62, v61, v17);
                      float v81 = *((float *)&v62 + 1);
                      float v82 = *(float *)&v62;
                      int v80 = 2139095040;
                      float v79 = INFINITY;
                      if (*(float *)&v62 == INFINITY && v81 == v79)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v61 + 40))(v61, v17) != 1) {
                          unint64_t v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                        }
                      }
                      else
                      {
                        float v81 = *((float *)&v62 + 1);
                        float v82 = *(float *)&v62;
                        int v80 = 0;
                        float v79 = 0.0;
                        v59.n128_u32[0] = v62;
                        if (*(float *)&v62 != 0.0 || (v59.n128_f32[0] = v81, v81 != v79)) {
                          unint64_t v78 = v78 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        }
                        ++v16;
                      }
                      if (__p)
                      {
                        v64 = __p;
                        operator delete(__p);
                      }
                      if (v74)
                      {
                        v75 = (unint64_t *)v74;
                        operator delete(v74);
                      }
                      if (v67) {
                        (*(void (**)(uint64_t, __n128))(*(void *)v67 + 32))(v67, v59);
                      }
                      else {
                        ++v69;
                      }
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_103:
                    if (!v15) {
                      goto LABEL_114;
                    }
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v70.__end_ - (char *)v70.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    unint64_t v53 = v70.__end_ - v70.__begin_;
                    if (v53 <= 2) {
                      unint64_t v53 = 2;
                    }
                    std::vector<unsigned int>::pointer v54 = v70.__begin_ + 1;
                    unsigned int v55 = *v70.__begin_;
                    unint64_t v56 = v53 - 1;
                    while (1)
                    {
                      unsigned int v58 = *v54++;
                      unsigned int v57 = v58;
                      if (v58 == v55) {
                        break;
                      }
                      unsigned int v55 = v57;
                      if (!--v56) {
                        goto LABEL_114;
                      }
                    }
                    unint64_t v78 = v78 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_114;
                }
                if (v62)
                {
                  int v20 = (char *)(*(uint64_t (**)(void))(*(void *)v62 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v66 >= (unint64_t)v64)
              {
                goto LABEL_94;
              }
              int v20 = (char *)__p + 48 * v66;
LABEL_29:
              int v21 = *(_DWORD *)v20;
              int v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *((_DWORD *)v20 + 1))
              {
                unint64_t v78 = v78 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                int v22 = *((_DWORD *)v20 + 1);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (v22) {
                    goto LABEL_35;
                  }
                  goto LABEL_39;
                }
                unint64_t v23 = v78;
              }
              else
              {
                unint64_t v23 = v78 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              unint64_t v78 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (v22)
              {
LABEL_35:
                if (v19) {
                  goto LABEL_44;
                }
                goto LABEL_40;
              }
LABEL_39:
              unint64_t v78 = v78 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
              if (v19) {
                goto LABEL_44;
              }
LABEL_40:
              if (v21 < (int)v72) {
                unint64_t v78 = v78 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              }
              if (v22 < SHIDWORD(v72)) {
                unint64_t v78 = v78 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
              }
LABEL_44:
              float v25 = *((float *)v20 + 2);
              float v24 = *((float *)v20 + 3);
              float v82 = v25;
              float v81 = v24;
              int v80 = 0;
              float v79 = 0.0;
              if (v25 != 0.0 || v81 != v79)
              {
                float v82 = v25;
                float v81 = v24;
                int v80 = 2139095040;
                float v79 = INFINITY;
                if (v25 != INFINITY || v81 != v79) {
                  unint64_t v78 = v78 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                }
              }
              int v26 = *((_DWORD *)v20 + 10);
              if (v26 <= (int)v17) {
                unint64_t v78 = v78 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              }
              if (v26 != v17 + 1) {
                unint64_t v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              uint64_t v72 = *(void *)v20;
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v73, (uint64_t)(v20 + 8));
              int v77 = *((_DWORD *)v20 + 10);
              if (v12)
              {
                std::vector<unsigned int>::pointer end = v71.__end_;
                if (v71.__end_ >= v71.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer begin = v71.__begin_;
                  int64_t v30 = v71.__end_ - v71.__begin_;
                  unint64_t v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 62) {
                    goto LABEL_143;
                  }
                  int64_t v32 = (char *)v71.__end_cap_.__value_ - (char *)v71.__begin_;
                  if (((char *)v71.__end_cap_.__value_ - (char *)v71.__begin_) >> 1 > v31) {
                    unint64_t v31 = v32 >> 1;
                  }
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v33 = v31;
                  }
                  if (v33)
                  {
                    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v71.__end_cap_, v33);
                    std::vector<unsigned int>::pointer begin = v71.__begin_;
                    std::vector<unsigned int>::pointer end = v71.__end_;
                  }
                  else
                  {
                    v34 = 0;
                  }
                  v35 = (unsigned int *)&v34[4 * v30];
                  unsigned int *v35 = *(_DWORD *)v20;
                  v28 = v35 + 1;
                  while (end != begin)
                  {
                    unsigned int v36 = *--end;
                    *--v35 = v36;
                  }
                  v71.__begin_ = v35;
                  v71.__end_ = v28;
                  v71.__end_cap_.__value_ = (unsigned int *)&v34[4 * v33];
                  if (begin) {
                    operator delete(begin);
                  }
                }
                else
                {
                  *v71.__end_ = *(_DWORD *)v20;
                  v28 = end + 1;
                }
                v71.__end_ = v28;
              }
              if (v15)
              {
                std::vector<unsigned int>::pointer v37 = v70.__end_;
                if (v70.__end_ >= v70.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer v39 = v70.__begin_;
                  int64_t v40 = v70.__end_ - v70.__begin_;
                  unint64_t v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 62) {
LABEL_143:
                  }
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  int64_t v42 = (char *)v70.__end_cap_.__value_ - (char *)v70.__begin_;
                  if (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 1 > v41) {
                    unint64_t v41 = v42 >> 1;
                  }
                  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v43 = v41;
                  }
                  if (v43)
                  {
                    v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v70.__end_cap_, v43);
                    std::vector<unsigned int>::pointer v39 = v70.__begin_;
                    std::vector<unsigned int>::pointer v37 = v70.__end_;
                  }
                  else
                  {
                    v44 = 0;
                  }
                  v45 = (unsigned int *)&v44[4 * v40];
                  unsigned int *v45 = *((_DWORD *)v20 + 1);
                  v38 = v45 + 1;
                  while (v37 != v39)
                  {
                    unsigned int v46 = *--v37;
                    *--v45 = v46;
                  }
                  v70.__begin_ = v45;
                  v70.__end_ = v38;
                  v70.__end_cap_.__value_ = (unsigned int *)&v44[4 * v43];
                  if (v39) {
                    operator delete(v39);
                  }
                }
                else
                {
                  *v70.__end_ = *((_DWORD *)v20 + 1);
                  v38 = v37 + 1;
                }
                v70.__end_ = v38;
              }
              if (v62)
              {
                (*(void (**)(uint64_t))(*(void *)v62 + 40))(v62);
                char v19 = 0;
              }
              else
              {
                char v19 = 0;
                ++v66;
              }
            }
          }
LABEL_17:
          uint64_t v17 = v69;
          goto LABEL_18;
        }
        if (v67) {
          (*(void (**)(void))(*(void *)v67 + 8))();
        }
      }
      else if ((int)v69 < v68)
      {
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7) != -1
        && (*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7))
      {
        unint64_t v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v70.__begin_)
      {
        v70.__end_ = v70.__begin_;
        operator delete(v70.__begin_);
      }
      if (v71.__begin_)
      {
        v71.__end_ = v71.__begin_;
        operator delete(v71.__begin_);
      }
      unint64_t v9 = v78;
    }
    uint64_t v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1B2046E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B20477D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + 52) = 0;
    **(void **)(a1 + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v22);
  float v27 = *((float *)&v22 + 1);
  int v28 = v22;
  int v26 = 2139095040;
  float v25 = INFINITY;
  BOOL v6 = *(float *)&v22 != INFINITY || v27 != v25;
  if (__p)
  {
    float v24 = __p;
    operator delete(__p);
  }
  if (v6) {
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * a2) != *(_DWORD *)(v7 + 4 * a2)) {
    goto LABEL_21;
  }
  char v8 = 0;
  uint64_t v9 = *(void **)(a1 + 80);
  uint64_t v10 = v9[1];
  uint64_t v11 = **(void **)(a1 + 16);
  uint64_t v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    unint64_t v13 = *v12--;
    v8 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while (v13 != a2);
  uint64_t v14 = *(void **)a1;
  uint64_t v15 = **(void **)(a1 + 72);
  for (i = (int *)(v10 - 4); ; --i)
  {
    unint64_t v17 = *i;
    if (v14) {
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    }
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = 1 << v17;
    if ((v8 & 1) == 0) {
      break;
    }
    *(void *)(v11 + 8 * v18) |= v19;
    *(void *)(v15 + 8 * v18) &= ~v19;
    if (v17 == a2)
    {
      v9[1] = i;
      goto LABEL_20;
    }
LABEL_18:
    ;
  }
  *(void *)(v15 + 8 * v18) &= ~v19;
  if (v17 != a2) {
    goto LABEL_18;
  }
  v9[1] = i;
  **(void **)(a1 + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_20:
  ++*(_DWORD *)(a1 + 48);
LABEL_21:
  if (a3 != -1)
  {
    uint64_t v20 = **(void **)(a1 + 16);
    if ((*(void *)(v20 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2)) {
      *(void *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v21 = *(_DWORD *)(v7 + 4 * a2);
    if (v21 < *(_DWORD *)(v7 + 4 * a3)) {
      *(_DWORD *)(v7 + 4 * a3) = v21;
    }
  }
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36D38;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36D38;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36D38;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B2047CC4(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37CF0;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B2047DDC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37CF0;
  uint64_t v2 = a1 + 3;
  for (i = (void *)a1[4]; i != v2; i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      std::vector<unsigned int>::pointer v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      std::vector<unsigned int>::pointer v37 = &v34[8 * v47];
      std::vector<unsigned int>::pointer v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unsigned int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unsigned int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B2048224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    uint64_t v10 = v26 + 48 * v27;
    *(void *)(a1 + 16) = v26;
    *(void *)(a1 + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v24 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v24 = v13;
    }
    *(void *)(a1 + 8) = v24;
    uint64_t v15 = malloc_type_malloc(48 * v24, 0x108004053AFDD15uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(void **)(a1 + 16);
    uint64_t v15 = *(void **)a1;
  }
  *(void *)(a1 + 24) = &v14[6 * v13];
  uint64_t v16 = v25;
  uint64_t v17 = v26;
  unint64_t v19 = v27;
  uint64_t v18 = v28;
  if (v28) {
    ++*v28;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 6;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(v15 - 6) = *(void *)v23;
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v15 - 5), v23 + 8);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 40);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 6;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 48 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B2048500(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v38 = 0u;
  long long v37 = 0u;
  *(_OWORD *)uint64_t v36 = 0u;
  *(_OWORD *)v35 = 0u;
  uint64_t v6 = -1;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = -1;
  uint64_t v39 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v40 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v40 = (int)fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>((uint64_t)a1);
    goto LABEL_6;
  }
  unint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v44;
    if (v44 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v9, (uint64_t)v34);
  uint64_t v31 = v9;
  uint64_t v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v10 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    int v33 = v7;
    uint64_t v12 = 0;
    uint64_t v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*a1 + 32))(__p, a1, v12);
      int data = (int)__p[0].__r_.__value_.__l.__data_;
      std::ostream::write();
      int data = HIDWORD(__p[0].__r_.__value_.__r.__words[0]);
      std::ostream::write();
      if (__p[0].__r_.__value_.__l.__size_)
      {
        __p[0].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__l.__size_;
        operator delete((void *)__p[0].__r_.__value_.__l.__size_);
      }
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      uint64_t v14 = *(void *)(*(void *)(a1[1] + 64) + 8 * v12);
      uint64_t v16 = *(void *)(v14 + 48);
      uint64_t v15 = *(void *)(v14 + 56);
      if (v15 == v16) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *(_DWORD **)(v14 + 48);
      }
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 48) <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = (v15 - v16) / 48;
        }
        unint64_t v19 = v17;
        do
        {
          int v20 = *v19;
          v19 += 12;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::LatticeWeightTpl<float>::Write((uint64_t)(v17 + 2), (uint64_t)a2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[10];
          std::ostream::write();
          uint64_t v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
    int v7 = v33;
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    int v21 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    uint64_t v22 = (void *)fst::cerr(v21);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_32:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&data);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_35;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      uint64_t updated = 1;
      goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v29 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    long long v30 = (void *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_32;
  }
  uint64_t v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_35:
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[1]);
  }
  if (SHIBYTE(v36[0]) < 0) {
    operator delete(v35[0]);
  }
  return updated;
}

void sub_1B2048A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a13);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      int v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      unint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B2049080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::Type()
{
  {
    operator new();
  }
  return fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::Type(void)::type;
}

void sub_1B2049174(_Unwind_Exception *a1)
{
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        uint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B20494C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::SetFinal(void *a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)(a1[8] + 8 * a2);
  uint64_t v20 = *v6;
  char v22 = 0;
  uint64_t v23 = 0;
  __int16 v21 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v21, (const void *)v6[1], v6[2], (v6[2] - v6[1]) >> 2);
  uint64_t v16 = *(void *)a3;
  char v18 = 0;
  uint64_t v19 = 0;
  std::string __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::SetFinal((uint64_t)a1, a2, &v16);
  if (__p)
  {
    char v18 = __p;
    operator delete(__p);
  }
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v12 = v20;
  BOOL v14 = 0;
  uint64_t v15 = 0;
  char v13 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v13, v21, (uint64_t)v22, (v22 - (unsigned char *)v21) >> 2);
  uint64_t v8 = *(void *)a3;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v9, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v7, (float *)&v12, (float *)&v8);
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  if (v13)
  {
    BOOL v14 = v13;
    operator delete(v13);
  }
  if (v21)
  {
    char v22 = v21;
    operator delete(v21);
  }
}

void sub_1B20496BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  __int16 v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(void *)(v19 - 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 56);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 48)) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (_DWORD *)(v6 - 48);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);
  return fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::AddArc(v9, a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v33.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(*(void *)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(int64x2_t **)(v14 + 8 * v15);
      int64x2_t v17 = v16[2];
      uint64_t v18 = v16[3].i64[1] - v16[3].i64[0];
      if (v18) {
        uint64_t v19 = v16[3].i64[0];
      }
      else {
        uint64_t v19 = 0;
      }
      if (v18)
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        char v22 = (int *)(v19 + 40);
        do
        {
          int v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            uint64_t v25 = *((void *)v22 - 5);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            int64x2_t v17 = vaddq_s64(v17, vceqzq_s64(v26));
          }
          else
          {
            *char v22 = v23;
            if (v20 != v21)
            {
              int64x2_t v30 = v17;
              int v24 = (void *)(v19 + 48 * v21);
              *int v24 = *((void *)v22 - 5);
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v24 + 1), (uint64_t)(v22 - 8));
              *(_DWORD *)(v19 + 48 * v21 + 40) = *v22;
              uint64_t v14 = *v4;
              int64x2_t v17 = v30;
            }
            ++v21;
          }
          ++v20;
          uint64_t v16 = *(int64x2_t **)(v14 + 8 * v15);
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v16[3].i64[1] - v16[3].i64[0]) >> 4);
          v22 += 12;
        }
        while (v20 < v27);
        int64x2_t v31 = v17;
      }
      else
      {
        int64x2_t v31 = v16[2];
        uint64_t v21 = 0;
        unint64_t v27 = 0;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(v16, v27 - v21);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 32) = v31;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v28 = *(int *)(a1 + 88);
  if (v28 == -1)
  {
    v29 = v33.__begin_;
    if (!v33.__begin_) {
      return;
    }
  }
  else
  {
    v29 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v28];
  }
  v33.__end_ = v29;
  operator delete(v29);
}

void sub_1B2049A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= 0xAAAAAAAAAAAAAAABLL
                               * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 56)
                                          - *(void *)(*(void *)(a1 + 8) + 48)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48) + 48 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::Flags_()
{
  return 15;
}

void *std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>> const&>(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(void **)(a1 + 8);
  *BOOL v3 = *(void *)a2;
  v3[2] = 0;
  v3[3] = 0;
  v3[1] = 0;
  uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  *(void *)(a1 + 8) = v3 + 4;
  return result;
}

void sub_1B2049B24(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v6 = result;
  uint64_t v7 = *(char **)(result + 8);
  uint64_t v8 = v7 - a4;
  unint64_t v9 = a2 + v7 - a4;
  uint64_t v10 = v7;
  if (v9 < a3)
  {
    unint64_t v12 = v7 + 8;
    do
    {
      *(v12 - 1) = *(void *)v9;
      v12[1] = 0;
      v12[2] = 0;
      *unint64_t v12 = 0;
      uint64_t result = (uint64_t)std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v12, *(const void **)(v9 + 8), *(void *)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 2);
      v12 += 4;
      v9 += 32;
    }
    while (v9 < a3);
    uint64_t v10 = (char *)(v12 - 1);
  }
  *(void *)(v6 + 8) = v10;
  if (v7 != a4)
  {
    uint64_t v13 = (uint64_t)(v7 - 32);
    uint64_t v14 = 32 * (v8 >> 5);
    uint64_t v15 = a2 - 32;
    do
    {
      uint64_t result = fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v13, v15 + v14);
      v13 -= 32;
      v14 -= 32;
    }
    while (v14);
  }
  return result;
}

void sub_1B2049BF8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2 - 8;
  _Unwind_Resume(a1);
}

void *std::__split_buffer<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::push_back[abi:ne180100](void *a1, uint64_t a2)
{
  unint64_t v4 = (void *)a1[2];
  if (v4 == (void *)a1[3])
  {
    unint64_t v5 = a1[1];
    uint64_t v6 = v5 - *a1;
    if (v5 <= *a1)
    {
      if (v4 == (void *)*a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = ((uint64_t)v4 - *a1) >> 4;
      }
      uint64_t v14 = a1[4];
      uint64_t v22 = a1[4];
      *(void *)&long long v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v14, v13);
      *((void *)&v20 + 1) = v20 + 32 * (v13 >> 2);
      *(void *)&long long v21 = *((void *)&v20 + 1);
      *((void *)&v21 + 1) = v20 + 32 * v15;
      std::__split_buffer<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_at_end_with_size<std::move_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>(&v20, a1[1], (uint64_t)(a1[2] - a1[1]) >> 5);
      long long v16 = v21;
      long long v17 = *(_OWORD *)a1;
      long long v18 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v20;
      *((_OWORD *)a1 + 1) = v16;
      long long v20 = v17;
      long long v21 = v18;
      std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)&v20);
      unint64_t v4 = (void *)a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 5;
      BOOL v8 = v6 >> 5 < -1;
      uint64_t v9 = (v6 >> 5) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      if ((void *)v5 == v4)
      {
        unint64_t v12 = (void *)(v5 - 32 * (v10 >> 1));
      }
      else
      {
        do
        {
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v5 + 32 * v11, v5);
          v5 += 32;
        }
        while ((void *)v5 != v4);
        unint64_t v4 = (void *)a1[1];
        unint64_t v12 = (void *)(v5 + 32 * v11);
      }
      a1[1] = &v4[4 * v11];
      a1[2] = v12;
      unint64_t v4 = v12;
    }
  }
  *unint64_t v4 = *(void *)a2;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  a1[2] += 32;
  return result;
}

void sub_1B2049D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>(v7, a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__split_buffer<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_at_end_with_size<std::move_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>(void *result, uint64_t a2, uint64_t a3)
{
  BOOL v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v6 = (void *)(v4 + 8);
    uint64_t v7 = 32 * a3;
    v4 += 32 * a3;
    do
    {
      *(v6 - 1) = *(void *)a2;
      v6[1] = 0;
      v6[2] = 0;
      *uint64_t v6 = 0;
      uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
      v6 += 4;
      a2 += 32;
      v7 -= 32;
    }
    while (v7);
  }
  v3[2] = v4;
  return result;
}

void sub_1B2049E8C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2 - 8;
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = *(void *)v6;
      v4[2] = 0;
      v4[3] = 0;
      v4[1] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4 + 1, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 2);
      uint64_t v4 = v11 + 4;
      v11 += 4;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B2049F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void fst::Connect<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1)
{
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  uint64_t v2 = 0;
  v1[0] = 0;
  v1[1] = v4;
  v1[2] = v3;
  v1[3] = &v2;
  fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, (uint64_t)v1);
}

void sub_1B204A194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  unint64_t v13 = *(void **)(v11 - 112);
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(v11 - 88);
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
  *(void *)(v3 + 8) = *(void *)(a2 + 8);
  *(void *)(v3 + ++*(void *)(result + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(v3 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  *(void *)(a1 + 8) = v3 + 40;
  return result;
}

void sub_1B204A234(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  long long v16 = &v10[40 * v9];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  *((void *)v11 + 1) = *(void *)(a2 + 8);
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v11 + 2, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  v15 += 40;
  std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B204A350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  void v15[2] = &v18;
  char v16 = 0;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      int v10 = *(_DWORD *)(v9 - 40);
      v9 -= 40;
      uint64_t v11 = *(void *)(v9 + 8);
      *(void *)(v7 - ++*(void *)(result + 24) = 0;
      uint64_t v12 = (void *)(v7 - 24);
      *((_DWORD *)v12 - 4) = v10;
      *(v12 - 1) = v11;
      v12[1] = 0;
      v12[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v12, *(const void **)(v9 + 16), *(void *)(v9 + 24), (uint64_t)(*(void *)(v9 + 24) - *(void *)(v9 + 16)) >> 2);
      uint64_t v7 = *((void *)&v18 + 1) - 40;
      *((void *)&v18 + 1) -= 40;
    }
    while (v9 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_1B204A4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>> &,std::__wrap_iter<int *>>(int *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::operator()(a2, *v9, a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>> &,std::__wrap_iter<int *>>(BOOL result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (int *)(result + 4 * (v4 >> 1));
    uint64_t v9 = (int *)(a2 - 4);
    uint64_t result = fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::operator()(a3, *v8, *(_DWORD *)(a2 - 4));
    if (result)
    {
      int v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        int *v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (int *)(v6 + 4 * v7);
        uint64_t result = fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::operator()(a3, *v8, v10);
        uint64_t v9 = v11;
      }
      while (result);
      int *v11 = v10;
    }
  }
  return result;
}

BOOL fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v6 = **a1;
  unint64_t v7 = (int *)(v6 + 40 * a2);
  uint64_t v8 = (int *)(v6 + 40 * a3);
  int v9 = *v7;
  int v10 = *((_DWORD *)a1 + 4);
  if (*v7 == v10)
  {
    *(_OWORD *)long long v36 = 0u;
    long long v37 = 0u;
  }
  else
  {
    uint64_t v11 = *a1[1];
    if (v9 >= (unint64_t)((a1[1][1] - v11) >> 5))
    {
      v36[0] = (void *)vdup_n_s32(0x7F800000u);
      long long v37 = 0uLL;
      v36[1] = 0;
      int v9 = v10;
    }
    else
    {
      uint64_t v12 = v11 + 32 * v9;
      v36[0] = *(void **)v12;
      long long v37 = 0uLL;
      v36[1] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v36[1], *(const void **)(v12 + 8), *(void *)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 2);
      int v9 = *((_DWORD *)a1 + 4);
    }
  }
  int v13 = *v8;
  if (*v8 == v9)
  {
    *(_OWORD *)std::string __p = 0u;
    long long v35 = 0u;
    float v14 = 0.0;
    int v13 = v9;
    float v15 = 0.0;
  }
  else
  {
    uint64_t v16 = *a1[1];
    if (v13 >= (unint64_t)((a1[1][1] - v16) >> 5))
    {
      long long v35 = 0uLL;
      __p[1] = 0;
      float v14 = INFINITY;
      float v15 = INFINITY;
    }
    else
    {
      uint64_t v17 = v16 + 32 * v13;
      __p[0] = *(void **)v17;
      long long v35 = 0uLL;
      __p[1] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[1], *(const void **)(v17 + 8), *(void *)(v17 + 16), (uint64_t)(*(void *)(v17 + 16) - *(void *)(v17 + 8)) >> 2);
      float v14 = *((float *)__p + 1);
      float v15 = *(float *)__p;
      int v9 = *((_DWORD *)a1 + 4);
      int v13 = *v8;
    }
  }
  uint64_t v18 = v6 + 40 * a2;
  float v19 = *(float *)v36 + *(float *)(v18 + 8);
  float v20 = *((float *)v36 + 1) + *(float *)(v18 + 12);
  uint64_t v21 = v6 + 40 * a3;
  float v22 = v15 + *(float *)(v21 + 8);
  float v23 = v14 + *(float *)(v21 + 12);
  float v24 = v22 + v23;
  float v25 = v19 + v20;
  if (*v7 == v9 && v13 != v9)
  {
    if (v24 >= v25 && (v22 >= v19 || v24 > v25) && (v19 != v22 || v20 != v23))
    {
      BOOL v30 = vabds_f32(v25, v24) <= *((float *)a1 + 5);
      goto LABEL_47;
    }
    goto LABEL_34;
  }
  if (*v7 != v9 && v13 == v9)
  {
    if (v24 < v25 || (v22 < v19 ? (BOOL v31 = v24 <= v25) : (BOOL v31 = 0), v31))
    {
      if (v19 != v22 || v20 != v23)
      {
        BOOL v30 = vabds_f32(v25, v24) > *((float *)a1 + 5);
        goto LABEL_47;
      }
    }
  }
  else if (v24 < v25 || v24 <= v25 && v22 < v19)
  {
LABEL_34:
    BOOL v30 = 1;
    goto LABEL_47;
  }
  BOOL v30 = 0;
LABEL_47:
  if (__p[1])
  {
    *(void **)&long long v35 = __p[1];
    operator delete(__p[1]);
  }
  if (v36[1])
  {
    *(void **)&long long v37 = v36[1];
    operator delete(v36[1]);
  }
  return v30;
}

void sub_1B204A8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A3B2D8;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
    unint64_t v4 = (void *)fst::cerr(v3);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1[1] + 8) |= 4uLL;
  }
  operator new();
}

void sub_1B204AA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~ImplToFst(v18);
  _Unwind_Resume(a1);
}

_DWORD *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetImpl(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    ++*(_DWORD *)(a2 + 56);
  }
  uint64_t result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    int v6 = result[14] - 1;
    result[14] = v6;
    if (!v6) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
  }
  *(void *)(a1 + 8) = a2;
  return result;
}

void *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A449D8;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~DeterminizeFst(void *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Start(*(void *)(a1 + 8));
}

void *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Final(*(void *)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    char v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Copy()
{
}

void sub_1B204AD70(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::InitStateIterator()
{
}

void sub_1B204AE64(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1B204B07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B204B298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~DeterminizeFstImplBase(void *a1)
{
  *a1 = &unk_1F0A3F420;
  uint64_t v2 = a1[17];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheBaseImpl(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::Copy()
{
}

void sub_1B204B46C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::Expand(void *a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = (uint64_t *)v9;
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  unint64_t v4 = v8;
  if (v8 != (uint64_t *)v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, (uint64_t)(v4 + 5));
      unint64_t v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          int v6 = v5;
          unint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (uint64_t *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          unint64_t v4 = v6;
        }
        while (!v7);
      }
      unint64_t v4 = v6;
    }
    while (v6 != (uint64_t *)v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1B204B548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136)) != -1)
  {
    *(_OWORD *)std::string __p = 0u;
    long long v3 = 0u;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[1], 0, 0, 0);
    operator new();
  }
  return 0xFFFFFFFFLL;
}

void sub_1B204B648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4 = *(float ***)(*(void *)(*(void *)(result + 184) + 88) + 8 * a2);
  *(int32x2_t *)a3 = vdup_n_s32(0x7F800000u);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + ++*(void *)(result + 24) = 0;
  unint64_t v5 = *v4;
  if (*v4)
  {
    uint64_t v6 = result;
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + 136) + 32))(&v18);
      float v7 = v5[4] + *(float *)&v18;
      float v8 = v5[5] + *((float *)&v18 + 1);
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v22 = 0;
      float v10 = *(float *)a3;
      float v9 = *(float *)(a3 + 4);
      float v11 = *(float *)a3 + v9;
      if (v11 >= (float)(v7 + v8))
      {
        if (v11 > (float)(v7 + v8) || (v10 >= v7 ? (v13 = v10 <= v7) : (v13 = 1), uint64_t v12 = (char *)a3, !v13))
        {
          uint64_t v12 = &v21;
          float v9 = v8;
          float v10 = v7;
        }
      }
      else
      {
        uint64_t v12 = (char *)a3;
      }
      unint64_t v25 = __PAIR64__(LODWORD(v9), LODWORD(v10));
      unint64_t v27 = 0;
      uint64_t v28 = 0;
      std::string __p = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *((const void **)v12 + 1), *((void *)v12 + 2), (uint64_t)(*((void *)v12 + 2) - *((void *)v12 + 1)) >> 2);
      *(void *)a3 = v25;
      if (&v25 != (unint64_t *)a3) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 8), (char *)__p, (uint64_t)v27, (v27 - (unsigned char *)__p) >> 2);
      }
      if (__p)
      {
        unint64_t v27 = __p;
        operator delete(__p);
      }
      if (v19)
      {
        float v20 = v19;
        operator delete(v19);
      }
      unint64_t v14 = *(void *)a3;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      float v15 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v15, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
      unint64_t v25 = v14;
      unint64_t v27 = 0;
      uint64_t v28 = 0;
      std::string __p = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v15, (uint64_t)v16, (v16 - (unsigned char *)v15) >> 2);
      *(void *)a3 = v25;
      if (&v25 != (unint64_t *)a3) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 8), (char *)__p, (uint64_t)v27, (v27 - (unsigned char *)__p) >> 2);
      }
      if (__p)
      {
        unint64_t v27 = __p;
        operator delete(__p);
      }
      if (v15)
      {
        uint64_t v16 = v15;
        operator delete(v15);
      }
      uint64_t result = fst::LatticeWeightTpl<float>::Member((float *)a3);
      if ((result & 1) == 0) {
        *(void *)(v6 + 8) |= 4uLL;
      }
      unint64_t v5 = *(float **)v5;
    }
    while (v5);
  }
  return result;
}

void sub_1B204B880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  int64x2_t v26 = *v24;
  if (*v24)
  {
    *(void *)(v23 + 16) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FC00;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38BD8;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  operator new();
}

{
  *(void *)a1 = &unk_1F0A3FC00;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38BD8;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_1B204BA14(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  unint64_t v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorCacheStore(void *a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1B204BAE8(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;
  std::__list_imp<char *>::clear(v2);
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheBaseImpl(void *a1)
{
  *a1 = &unk_1F0A38BD8;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    long long v3 = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorCacheStore(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  }
  unint64_t v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~FstImpl((uint64_t)a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorCacheStore(void *a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(void *)(a1 + 8) = a1;
  *(void *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (void *)(a1 + 8), (void *)(a1 + 16));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  if (a2) {
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  }
  return a1;
}

void sub_1B204BC34(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, void *a3, void *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B204BCA0(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  *a1 = &unk_1F0A3DE28;
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x20C4093837F09);
  }
  uint64_t v3 = a1[23];
  if (v3)
  {
    uint64_t v4 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1B3EA8670](v4, 0x10E0C400200E20DLL);
  }
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~DeterminizeFstImplBase(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(uint64_t a1)
{
  uint64_t v4 = a1 + 88;
  uint64_t v2 = *(void **)(a1 + 88);
  uint64_t v3 = *(void *)(v4 + 8);
  if ((int)((unint64_t)(v3 - (void)v2) >> 3) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::clear((void **)v2[v5]);
        MEMORY[0x1B3EA8670](v6, 0x1020C405F07FB98);
        uint64_t v2 = *(void **)(a1 + 88);
        uint64_t v3 = *(void *)(a1 + 96);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (void)v2) >> 3));
  }
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 32);
  return a1;
}

void std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::clear(void **a1)
{
  for (i = *a1; i; i = v3)
  {
    uint64_t v3 = (void *)*i;
    std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__delete_node[abi:ne180100]<>((int)a1, i);
  }
  *a1 = 0;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B204BFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~DeterminizeFstImplBase(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_1B204C164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void sub_1B204C328(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1) {
      MutableState = 0;
    }
    else {
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Clear(a1);
  uint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        float v8 = operator new(0x50uLL);
        fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::CacheState((uint64_t)v8, v7);
        if (*(unsigned char *)a1)
        {
          float v9 = operator new(0x18uLL);
          v9[4] = v6;
          uint64_t v10 = a1[4];
          *(void *)float v9 = v10;
          *((void *)v9 + 1) = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        float v8 = 0;
      }
      uint64_t v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        float v19 = &v18[8 * v14];
        *(void *)float v19 = v8;
        BOOL v13 = v19 + 8;
        char v21 = (char *)a1[1];
        float v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          float v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v8;
        BOOL v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::CacheState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  long long v4 = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*>>((void *)(a1 + 48), v5, v6, 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 4));
  *(void *)(a1 + 72) = *(unsigned int *)(a2 + 72);
  return a1;
}

void sub_1B204C608(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B204C68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = *(void *)v6;
      uint64_t v7 = *(void *)(v6 + 8);
      *(void *)(v4 + 16) = 0;
      *(void *)(v4 + 8) = v7;
      *(void *)(v4 + ++*(void *)(result + 24) = 0;
      *(void *)(v4 + 32) = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(v4 + 16), *(const void **)(v6 + 16), *(void *)(v6 + 24), (uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 2);
      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v6 + 40);
      uint64_t v4 = v12 + 48;
      v12 += 48;
      v6 += 48;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B204C764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(void *a1, int a2, uint64_t **a3)
{
  uint64_t v5 = **(float32x2_t ***)(*(void *)(a1[23] + 88) + 8 * a2);
  if (!v5) {
    goto LABEL_19;
  }
  do
  {
    uint64_t v6 = v5[1].u32[0];
    uint64_t v7 = a1[17];
    unint64_t v22 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 136))(v7, v6, v20);
    while (1)
    {
      if (!v20[0])
      {
        if (v22 >= v20[2]) {
          goto LABEL_16;
        }
        goto LABEL_8;
      }
      if ((*(unsigned int (**)(void))(*(void *)v20[0] + 24))(v20[0])) {
        break;
      }
      if (v20[0])
      {
        float v8 = (float32x2_t *)(*(uint64_t (**)(void))(*(void *)v20[0] + 32))();
        goto LABEL_9;
      }
LABEL_8:
      float v8 = (float32x2_t *)(v20[1] + 48 * v22);
LABEL_9:
      __int32 v15 = v8[5].i32[0];
      float32x2_t v16 = vadd_f32(v5[2], v8[1]);
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      std::string __p = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, 0, 0, 0);
      fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::FilterArc(a1[22], (int *)v8, (uint64_t)&v5[1], (uint64_t)&v15, a3);
      if (__p)
      {
        uint64_t v18 = __p;
        operator delete(__p);
      }
      if (v20[0]) {
        (*(void (**)(void))(*(void *)v20[0] + 40))(v20[0]);
      }
      else {
        ++v22;
      }
    }
    if (v20[0])
    {
      (*(void (**)(void))(*(void *)v20[0] + 8))();
      goto LABEL_18;
    }
LABEL_16:
    if (v21) {
      --*v21;
    }
LABEL_18:
    uint64_t v5 = (float32x2_t *)*v5;
  }
  while (v5);
LABEL_19:
  uint64_t v11 = *a3;
  uint64_t v9 = a3 + 1;
  char v10 = v11;
  if (v11 != (uint64_t *)v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v10 + 5));
      uint64_t v12 = (uint64_t *)v10[1];
      if (v12)
      {
        do
        {
          BOOL v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          BOOL v13 = (uint64_t *)v10[2];
          BOOL v14 = *v13 == (void)v10;
          char v10 = v13;
        }
        while (!v14);
      }
      char v10 = v13;
    }
    while (v13 != (uint64_t *)v9);
  }
}

void sub_1B204CA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  else if (a17)
  {
    --*a17;
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  std::string __p = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  v7[0] = *(_DWORD *)a3;
  v7[1] = v7[0];
  fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v8, a3 + 8);
  int State = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::FindState(a1, *(float ***)(a3 + 40));
  Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::PushArc(MutableState, (uint64_t)v7);
  if (__p)
  {
    char v10 = __p;
    operator delete(__p);
  }
}

void sub_1B204CB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetArcs(uint64_t a1, int a2)
{
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = *((void *)MutableState + 6);
  uint64_t v6 = *((void *)MutableState + 7) - v5;
  if (v6)
  {
    unint64_t v7 = v6 / 48;
    int v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    uint64_t v9 = (int *)(v5 + 40);
    do
    {
      int v11 = *v9;
      v9 += 12;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 18) |= 0xAu;
}

uint64_t fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::FilterArc(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  int v10 = a2;
  unint64_t v7 = std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v10);
  if (*((_DWORD *)v7 + 10) == -1) {
    fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeArc((int32x2_t *)&v10, a2);
  }
  int v8 = v7[10];
  *int v8 = (uint64_t)std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> const&>((uint64_t)v8, *v8, a4);
  return 1;
}

void sub_1B204CCA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t ***)(a2 + 40);
  std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v3);
  unint64_t v22 = v3;
  uint64_t v4 = *v3;
  if (!v4) {
    return;
  }
  uint64_t v5 = (int32x2_t *)(a2 + 8);
  uint64_t v6 = v4;
  do
  {
    fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::operator()((float *)(a2 + 8), (float *)v6 + 4, (uint64_t)&v24);
    int32x2_t *v5 = v24;
    if (v5 != &v24) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 + 16), (char *)__p, (uint64_t)v26, (v26 - (unsigned char *)__p) >> 2);
    }
    if (__p)
    {
      int64x2_t v26 = __p;
      operator delete(__p);
    }
    if (v4 == v6 || *((_DWORD *)v6 + 2) != *((_DWORD *)v4 + 2))
    {
      uint64_t v13 = *v6;
      uint64_t v4 = v6;
      goto LABEL_21;
    }
    float v9 = *((float *)v4 + 4);
    float v8 = *((float *)v4 + 5);
    unint64_t v7 = (int32x2_t *)(v4 + 2);
    float v10 = *((float *)v6 + 4);
    float v11 = *((float *)v6 + 5);
    if ((float)(v9 + v8) >= (float)(v10 + v11))
    {
      if ((float)(v9 + v8) > (float)(v10 + v11)) {
        goto LABEL_13;
      }
      if (v9 >= v10)
      {
        uint64_t v12 = v4 + 2;
        if (v9 <= v10) {
          goto LABEL_14;
        }
LABEL_13:
        float v8 = *((float *)v6 + 5);
        float v9 = *((float *)v6 + 4);
        uint64_t v12 = v6 + 2;
        goto LABEL_14;
      }
    }
    uint64_t v12 = v4 + 2;
LABEL_14:
    int32x2_t v24 = (int32x2_t)__PAIR64__(LODWORD(v8), LODWORD(v9));
    int64x2_t v26 = 0;
    uint64_t v27 = 0;
    std::string __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, (const void *)v12[1], v12[2], (v12[2] - v12[1]) >> 2);
    *unint64_t v7 = v24;
    if (v7 != &v24) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v4 + 24, (char *)__p, (uint64_t)v26, (v26 - (unsigned char *)__p) >> 2);
    }
    if (__p)
    {
      int64x2_t v26 = __p;
      operator delete(__p);
    }
    if (!fst::LatticeWeightTpl<float>::Member((float *)v4 + 4)) {
      *(void *)(a1 + 8) |= 4uLL;
    }
    uint64_t v13 = *v6;
    BOOL v14 = (void *)*v4;
    *uint64_t v4 = *(void *)*v4;
    std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__delete_node[abi:ne180100]<>((int)v22, v14);
LABEL_21:
    uint64_t v6 = (uint64_t *)v13;
  }
  while (v13);
  for (i = *v22; i; i = (uint64_t *)*i)
  {
    float v16 = *((float *)i + 4) - *(float *)(a2 + 8);
    float v17 = *((float *)i + 5) - *(float *)(a2 + 12);
    if (v16 == -INFINITY || v17 == -INFINITY)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
        uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v24);
      }
      float v16 = INFINITY;
      float v17 = INFINITY;
    }
    else
    {
      BOOL v20 = v16 == INFINITY;
      if (v17 == INFINITY) {
        BOOL v20 = 1;
      }
      if (v20)
      {
        float v16 = INFINITY;
        float v17 = INFINITY;
      }
    }
    *((float *)i + 4) = v16;
    *((float *)i + 5) = v17;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)i + 24, 0, 0, 0);
    LODWORD(v21) = *(_DWORD *)(a1 + 144);
    fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Quantize((uint64_t)(i + 2), &v24, v21);
    i[2] = (uint64_t)v24;
    if (i + 2 != (uint64_t *)&v24) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)i + 24, (char *)__p, (uint64_t)v26, (v26 - (unsigned char *)__p) >> 2);
    }
    if (__p)
    {
      int64x2_t v26 = __p;
      operator delete(__p);
    }
  }
}

void sub_1B204CFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(int32x2_t *a1, __int32 *a2)
{
  a1->i32[0] = *a2;
  a1[1] = vdup_n_s32(0x7F800000u);
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  operator new();
}

void sub_1B204D05C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + ++*(void *)(result + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = operator new(0x30uLL);
  *(void *)uint64_t v5 = a2;
  v5[2] = *(_DWORD *)a3;
  *((void *)v5 + 2) = *(void *)(a3 + 8);
  *((void *)v5 + 4) = 0;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 3) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v5 + 3, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
  return v5;
}

void sub_1B204D0E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::operator()@<X0>(float *a1@<X1>, float *a2@<X2>, uint64_t a3@<X8>)
{
  float v4 = *a1;
  float v3 = a1[1];
  float v5 = *a2;
  float v6 = *a1 + v3;
  float v7 = *a2 + a2[1];
  if (v6 >= v7)
  {
    if (v6 > v7 || (v4 >= v5 ? (BOOL v8 = v4 <= v5) : (BOOL v8 = 1), !v8))
    {
      float v3 = a2[1];
      float v4 = *a2;
      a1 = a2;
    }
  }
  *(float *)a3 = v4;
  *(float *)(a3 + 4) = v3;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + ++*(void *)(result + 24) = 0;
  *(void *)(a3 + 8) = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a3 + 8), *((const void **)a1 + 1), *((void *)a1 + 2), (uint64_t)(*((void *)a1 + 2) - *((void *)a1 + 1)) >> 2);
}

void fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Quantize(uint64_t a1@<X0>, int32x2_t *a2@<X8>, double a3@<D0>)
{
  float v4 = vaddv_f32(*(float32x2_t *)a1);
  int32x2_t v5 = (int32x2_t)0x7F0000007FLL;
  if (v4 != -INFINITY)
  {
    if (v4 == INFINITY) {
      int32x2_t v5 = vdup_n_s32(0x7F800000u);
    }
    else {
      int32x2_t v5 = (int32x2_t)vmul_n_f32(vrndm_f32(vadd_f32(vdiv_f32(*(float32x2_t *)a1, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0)), (float32x2_t)0x3F0000003F000000)), *(float *)&a3);
    }
  }
  std::string __p = 0;
  float v7 = 0;
  uint64_t v8 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
  *a2 = v5;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&a2[1], __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    float v7 = __p;
    operator delete(__p);
  }
}

void sub_1B204D230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, float **a2)
{
  uint64_t State = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::FindState(*(void **)(a1 + 184), (uint64_t)a2);
  uint64_t v5 = State;
  if (*(void *)(a1 + 152))
  {
    float v6 = *(uint64_t **)(a1 + 160);
    if ((int)State >= (unint64_t)((v6[1] - *v6) >> 5))
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, (uint64_t)&v10);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v8 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v6, (uint64_t)&v10);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)v6, (uint64_t)&v10);
        uint64_t v8 = v7 + 32;
      }
      v6[1] = v8;
      if (__p)
      {
        uint64_t v12 = __p;
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_1B204D300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::FindState(void *a1, uint64_t a2)
{
  *(void *)float v6 = a2;
  uint64_t v2 = (a1[12] - a1[11]) >> 3;
  uint64_t Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, v6, 1);
  if (Id != v2)
  {
    uint64_t v4 = *(void *)v6;
    if (*(void *)v6)
    {
      std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::clear(*(void ***)v6);
      MEMORY[0x1B3EA8670](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(uint64_t a1@<X0>, float **a2@<X1>, uint64_t a3@<X8>)
{
  *(int32x2_t *)a3 = vdup_n_s32(0x7F800000u);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + ++*(void *)(result + 24) = 0;
  for (i = *a2; i; i = *(float **)i)
  {
    unint64_t v6 = *((int *)i + 2);
    uint64_t v7 = **(void **)(a1 + 152);
    if (v6 >= (*(void *)(*(void *)(a1 + 152) + 8) - v7) >> 5)
    {
      int32x2_t v23 = vdup_n_s32(0x7F800000u);
      unint64_t v25 = 0;
      uint64_t v26 = 0;
      int32x2_t v24 = 0;
      float v9 = INFINITY;
      float v10 = INFINITY;
    }
    else
    {
      uint64_t v8 = v7 + 32 * v6;
      int32x2_t v23 = *(int32x2_t *)v8;
      unint64_t v25 = 0;
      uint64_t v26 = 0;
      int32x2_t v24 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v24, *(const void **)(v8 + 8), *(void *)(v8 + 16), (uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 2);
      float v9 = *(float *)&v23.i32[1];
      float v10 = *(float *)v23.i32;
    }
    float v11 = i[4] + v10;
    float v12 = i[5] + v9;
    memset(&v18[8], 0, 24);
    float v14 = *(float *)a3;
    float v13 = *(float *)(a3 + 4);
    float v15 = *(float *)a3 + v13;
    if (v15 >= (float)(v11 + v12))
    {
      if (v15 > (float)(v11 + v12) || (v14 >= v11 ? (v17 = v14 <= v11) : (v17 = 1), float v16 = (unsigned char *)a3, !v17))
      {
        float v16 = v18;
        float v13 = v12;
        float v14 = v11;
      }
    }
    else
    {
      float v16 = (unsigned char *)a3;
    }
    unint64_t v19 = __PAIR64__(LODWORD(v13), LODWORD(v14));
    double v21 = 0;
    uint64_t v22 = 0;
    std::string __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *((const void **)v16 + 1), *((void *)v16 + 2), (uint64_t)(*((void *)v16 + 2) - *((void *)v16 + 1)) >> 2);
    *(void *)a3 = v19;
    if (&v19 != (unint64_t *)a3) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 8), (char *)__p, (uint64_t)v21, (v21 - (unsigned char *)__p) >> 2);
    }
    if (__p)
    {
      double v21 = __p;
      operator delete(__p);
    }
    if (v24)
    {
      unint64_t v25 = v24;
      operator delete(v24);
    }
  }
}

void sub_1B204D538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v22 = *v20;
  if (*v20)
  {
    *(void *)(v19 + 16) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(void *a1, void *a2, int a3)
{
  a1[13] = a2;
  uint64_t v6 = (uint64_t)(a1 + 3);
  uint64_t v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, (int *)&fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7) {
    return *((unsigned int *)v7 + 4);
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a1[10];
  float v10 = (void *)a1[11];
  uint64_t v11 = ((uint64_t)v10 - v9) >> 3;
  unsigned int v23 = v11;
  unint64_t v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v12 - v9;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v15 = v11 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      BOOL v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    }
    else {
      BOOL v17 = 0;
    }
    uint64_t v18 = &v17[8 * v11];
    uint64_t v19 = &v17[8 * v16];
    *(void *)uint64_t v18 = *a2;
    float v13 = v18 + 8;
    double v21 = (char *)a1[10];
    BOOL v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      BOOL v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *float v10 = *a2;
    float v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(void *a1, int *a2)
{
  uint64_t v4 = *a2;
  if ((int)v4 < -1)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v5 = a1[4];
    if (v4 == -1) {
      uint64_t v6 = *(uint64_t ****)(v5 + 104);
    }
    else {
      uint64_t v6 = (uint64_t ***)(*(void *)(v5 + 80) + 8 * v4);
    }
    unint64_t v7 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v5, *v6);
  }
  int8x8_t v8 = (int8x8_t)a1[1];
  if (!*(void *)&v8) {
    return 0;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v11 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v8 - 1) & v7;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  float v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = a1 + 6;
    do
    {
      unint64_t v15 = v13[1];
      if (v15 == v7)
      {
        if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v14, *((_DWORD *)v13 + 4), *a2))return v13; {
      }
        }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(void *)&v8) {
            v15 %= *(void *)&v8;
          }
        }
        else
        {
          v15 &= *(void *)&v8 - 1;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      float v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 < -1 || a3 < -1) {
    return a2 == a3;
  }
  uint64_t v3 = *a1;
  if (a2 == -1) {
    uint64_t v4 = *(uint64_t **)(v3 + 104);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(v3 + 80) + 8 * a2);
  }
  if (a3 == -1) {
    uint64_t v6 = *(uint64_t **)(v3 + 104);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(v3 + 80) + 8 * a3);
  }
  return fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::operator==(*v4, *v6);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t result = *((char *)a2 + 8);
  for (i = *a2; i; i = (uint64_t *)*i)
  {
    int v4 = *((_DWORD *)i + 4);
    int v5 = *((_DWORD *)i + 5);
    BOOL v6 = __CFADD__(v5, v4);
    uint64_t v7 = (v5 + v4);
    if (v6) {
      uint64_t v8 = 0x100000000;
    }
    else {
      uint64_t v8 = 0;
    }
    result ^= (2 * result) ^ (32 * *((int *)i + 2)) ^ ((unint64_t)*((int *)i + 2) >> 59) ^ (v8 | v7);
  }
  return result;
}

uint64_t fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 8) != *(unsigned __int8 *)(a1 + 8)) {
    return 0;
  }
  uint64_t v2 = (void *)a2;
  uint64_t v3 = (void *)a1;
  while (1)
  {
    uint64_t v2 = (void *)*v2;
    uint64_t v3 = (void *)*v3;
    if (!v2 || v3 == 0) {
      break;
    }
    if (!fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::operator==((uint64_t)(v2 + 1), (uint64_t)(v3 + 1)))return 0; {
  }
    }
  return (v2 != 0) ^ (v3 == 0);
}

BOOL fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12);
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v7 = *a2;
  if ((int)v7 < -1)
  {
    unint64_t v10 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v7 == -1) {
      uint8x8_t v9 = *(uint64_t ****)(v8 + 104);
    }
    else {
      uint8x8_t v9 = (uint64_t ***)(*(void *)(v8 + 80) + 8 * v7);
    }
    unint64_t v10 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v8, *v9);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *(void *)i = 0;
  *((void *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  int32x2_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)i = *v24;
LABEL_44:
    *int32x2_t v24 = i;
    goto LABEL_45;
  }
  *(void *)i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    int32x2_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B204DBD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::GetMutableState(a1, a2);
  int v4 = MutableState;
  if (*(unsigned char *)(a1 + 88))
  {
    int v5 = *((_DWORD *)MutableState + 18);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 18) = v5 | 4;
      unint64_t v6 = *((void *)MutableState + 7) - *((void *)MutableState + 6) + *(void *)(a1 + 112) + 80;
      *(void *)(a1 + 112) = v6;
      *(unsigned char *)(a1 + 104) = 1;
      if (v6 > *(void *)(a1 + 96)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1 + 6;
  unint64_t v4 = a1[7];
  if (v4 >= a1[8])
  {
    uint64_t result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const&>(v3, a2);
  }
  else
  {
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 48;
  }
  a1[7] = result;
  return result;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2) {
    return *(char **)(a1 + 80);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 76) = a2;
      Mutableuint64_t State = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 80) = MutableState;
      *((_DWORD *)MutableState + 18) |= 4u;
      std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::reserve((uint64_t *)MutableState + 6, 0x80uLL);
      return *(char **)(a1 + 80);
    }
    uint64_t v5 = *(void *)(a1 + 80);
    if (!*(_DWORD *)(v5 + 76))
    {
      *(_DWORD *)(a1 + 76) = a2;
      fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Reset(v5);
      uint64_t result = *(char **)(a1 + 80);
      *((_DWORD *)result + 18) |= 4u;
      return result;
    }
    *(_DWORD *)(v5 + 72) &= ~4u;
    *(unsigned char *)(a1 + 72) = 0;
  }
  int v6 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      uint64_t v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      uint8x8_t v9 = (void *)fst::cerr(v8);
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      unint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      uint8x8_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      unint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      uint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      unint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    uint64_t v17 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      int v18 = *(_DWORD *)(v17 + 16);
      if (v18) {
        int v19 = v18 - 1;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 76);
      }
      Mutableuint64_t State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::GetMutableState(a1, v19);
      unint64_t v21 = *(void *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 19))
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v22 = *((_DWORD *)MutableState + 18);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              unint64_t v23 = *((void *)MutableState + 7) - *((void *)MutableState + 6) + 80;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Delete((void *)a1);
            uint64_t v17 = *(void *)(a1 + 56);
            continue;
          }
        }
        else
        {
          int v22 = *((_DWORD *)MutableState + 18);
          if ((v22 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      *((_DWORD *)MutableState + 18) &= ~8u;
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
      *(void *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 112) <= v16)
    {
      unint64_t v24 = *(void *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          uint64_t v25 = *(void *)(a1 + 96);
          do
          {
            v25 *= 2;
            BOOL v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(void *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        uint64_t v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        uint64_t v28 = (void *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      BOOL v30 = (void *)fst::cerr(v29);
      BOOL v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      uint64_t v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      std::vector<int> v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      long long v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      long long v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
    }
  }
}

void sub_1B204E16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 104))
  {
    if ((*(unsigned char *)(a2 + 72) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 56) - *(void *)(a2 + 48) + *(void *)(a1 + 112);
      *(void *)(a1 + 112) = v4;
      if (v4 > *(void *)(a1 + 96))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GC(a1, (char *)a2, 0, 0.666);
      }
    }
  }
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(unsigned char *)(a1 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3) {
          *(_DWORD *)(a1 + 68) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

void *fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasFinal(a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 64))(&v11, a1, a2);
    uint64_t v7 = v11;
    uint8x8_t v9 = 0;
    uint64_t v10 = 0;
    std::string __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v12, (uint64_t)v13, (v13 - (unsigned char *)v12) >> 2);
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal(a1, a2, &v7);
    if (__p)
    {
      uint8x8_t v9 = __p;
      operator delete(__p);
    }
    if (v12)
    {
      unint64_t v13 = v12;
      operator delete(v12);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Final(a1, a2, a3);
}

void sub_1B204E400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  uint64_t v5 = *a3;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::string __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  *(void *)Mutableuint64_t State = v5;
  if (MutableState != (char *)&v5) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(MutableState + 8, (char *)__p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  *((_DWORD *)MutableState + 18) |= 9u;
}

void sub_1B204E4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v5 + 76) == a2) {
    int v6 = (uint64_t *)(v5 + 80);
  }
  else {
    int v6 = (uint64_t *)(*(void *)(v5 + 8) + 8 * (a2 + 1));
  }
  uint64_t v7 = *v6;
  *a3 = *(void *)v7;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3 + 1, *(const void **)(v7 + 8), *(void *)(v7 + 16), (uint64_t)(*(void *)(v7 + 16) - *(void *)(v7 + 8)) >> 2);
}

unint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::NumArcs(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)v5 + 56) - *(void *)(*(void *)v5 + 48)) >> 4);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::NumInputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 32);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::NumOutputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 40);
}

void *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeterminizeFst(void *a1, uint64_t a2, int a3)
{
  *a1 = &unk_1F0A3B2D8;
  a1[1] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    int v6 = (_DWORD *)a1[1];
    if (v6)
    {
      int v7 = v6[14] - 1;
      v6[14] = v7;
      if (!v7) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
    }
    a1[1] = v5;
  }
  else
  {
    fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetImpl((uint64_t)a1, v4, 0);
  }
  return a1;
}

void sub_1B204E7A8(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  uint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::ArcIterator(&v19, *(void *)(a1 + 8), v6);
    unint64_t v7 = v20;
    uint64_t v8 = *((void *)v19 + 6);
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v19 + 7) - v8) >> 4);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v20 < v9)
    {
      int v11 = *(_DWORD *)(v10 + 68);
      uint8x8_t v12 = (int *)(v8 + 48 * v20 + 40);
      do
      {
        int v14 = *v12;
        v12 += 12;
        int v13 = v14;
        if (v11 <= v14)
        {
          int v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      unint64_t v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 19);
    BOOL v4 = v15 >= v17;
    if (v15 < v17) {
      break;
    }
    uint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B204E93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableuint64_t State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 19);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)(*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 48))(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B204E9E4(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 76);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::InitArcIterator(a1, a2, a3);
  }
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A424A0;
  int v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorFst();
  }
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>((uint64_t)v3, a1);
}

void sub_1B204ED0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *a22)
{
  if (__p) {
    operator delete(__p);
  }
  fst::AutoQueue<int>::~AutoQueue(&a22);
  a22 = &a17;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~ImplToFst(&a20);
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistance<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v10[0] = a1;
  v10[1] = (uint64_t)a2;
  v10[2] = *(void *)a3;
  int v11 = *(_DWORD *)(a3 + 16);
  char v12 = *(unsigned char *)(a3 + 20);
  char v13 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  memset(v17, 0, 29);
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
  fst::ShortestDistanceState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::ShortestDistance(v10, *(_DWORD *)(a3 + 12));
  if (BYTE12(v17[1]))
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
    int32x2_t v6 = vdup_n_s32(0x7FC00000u);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    std::string __p = 0;
    std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::resize(a2, 1uLL, (uint64_t)&v6);
    if (__p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
  }
  return fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState((uint64_t)v10);
}

void sub_1B204EE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v6 = 0;
        v5[0] = v3;
        v5[1] = 0;
        v5[2] = 0;
        v5[3] = &v6;
        fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(a2, (uint64_t)v5);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B204F6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  BOOL v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  BOOL v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v12 = *(void *)(a3 + 8) - *(void *)a3;
  if (v12)
  {
    unint64_t v13 = v12 >> 2;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    bzero(*(void **)a3, 4 * v13);
  }
  unsigned int v30 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v28);
  while (1)
  {
    uint64_t result = v28;
    if (!v28)
    {
      if ((int)v30 >= v29) {
        return result;
      }
LABEL_11:
      uint64_t v16 = v30;
      goto LABEL_12;
    }
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 16))(v28);
    uint64_t result = v28;
    if (v15) {
      break;
    }
    if (!v28) {
      goto LABEL_11;
    }
    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v28 + 24))();
LABEL_12:
    unint64_t v27 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v16, v25);
    while (1)
    {
      if (!v25[0])
      {
        if (v27 >= v25[2]) {
          goto LABEL_44;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v25[0] + 24))(v25[0])) {
        break;
      }
      if (v25[0])
      {
        uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v25[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v18 = v25[1] + 48 * v27;
LABEL_19:
      uint64_t v19 = *(int *)(*a2 + 4 * (int)v16);
      if (v19 == *(_DWORD *)(*a2 + 4 * *(int *)(v18 + 40)))
      {
        unint64_t v20 = *(_DWORD **)a3;
        if (!a4
          || (v22 = *(float *)(v18 + 8), float v21 = *(float *)(v18 + 12), (float)(v22 + v21) < 0.0)
          || v22 < 0.0 && (float)(v22 + v21) <= 0.0)
        {
          int v23 = 1;
          goto LABEL_25;
        }
        if ((v20[v19] | 2) == 2)
        {
          float v34 = *(float *)(v18 + 8);
          float v33 = v21;
          int v32 = 2139095040;
          float v31 = INFINITY;
          if (v22 == INFINITY && v33 == v31 || (v34 = v22, v33 = v21, v32 = 0, float v31 = 0.0, v22 == 0.0) && v33 == v31) {
            int v23 = 2;
          }
          else {
            int v23 = 3;
          }
LABEL_25:
          v20[v19] = v23;
        }
        *a5 = 0;
      }
      float v24 = *(float *)(v18 + 8);
      v17.n128_u32[0] = *(_DWORD *)(v18 + 12);
      float v34 = v24;
      float v33 = v17.n128_f32[0];
      int v32 = 2139095040;
      float v31 = INFINITY;
      if (v24 != INFINITY || v33 != v31)
      {
        float v34 = v24;
        float v33 = v17.n128_f32[0];
        int v32 = 0;
        float v31 = 0.0;
        v17.n128_f32[0] = v24;
        if (v24 != 0.0 || (v17.n128_f32[0] = v33, v33 != v31)) {
          *a6 = 0;
        }
      }
      if (v25[0]) {
        (*(void (**)(void, __n128))(*(void *)v25[0] + 40))(v25[0], v17);
      }
      else {
        ++v27;
      }
    }
    if (v25[0])
    {
      (*(void (**)(void))(*(void *)v25[0] + 8))();
      goto LABEL_46;
    }
LABEL_44:
    if (v26) {
      --*v26;
    }
LABEL_46:
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 32))(v28);
    }
    else {
      ++v30;
    }
  }
  if (v28) {
    return (*(uint64_t (**)(void))(*(void *)v28 + 8))();
  }
  return result;
}

void sub_1B204FC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  int v2 = &v3;
  fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>();
}

void sub_1B204FE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  float v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  int v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>()
{
}

void sub_1B2050738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::ShortestDistanceState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::ShortestDistance(uint64_t *a1, int a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
      return;
    }
    v101 = (char *)a1 + 116;
    goto LABEL_178;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100]((uint64_t *)a1[1]);
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a1 + 5);
    a1[9] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  unint64_t v4 = a2;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v6 = v5 + 1;
  uint64_t v7 = *v5;
  if (a2 >= (unint64_t)((v5[1] - *v5) >> 5))
  {
    int32x2_t v8 = vdup_n_s32(0x7F800000u);
    do
    {
      int32x2_t v111 = v8;
      v113 = 0;
      v114 = 0;
      std::string __p = 0;
      unint64_t v9 = v5[1];
      if (v9 >= v5[2])
      {
        uint64_t v10 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v5, (uint64_t)&v111);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)v5, (uint64_t)&v111);
        uint64_t v10 = v9 + 32;
      }
      *uint64_t v6 = v10;
      if (__p)
      {
        v113 = __p;
        operator delete(__p);
      }
      int32x2_t v111 = v8;
      v113 = 0;
      v114 = 0;
      std::string __p = 0;
      int v11 = (void *)a1[6];
      if ((unint64_t)v11 >= a1[7])
      {
        uint64_t v12 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a1 + 5, (uint64_t)&v111);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)(a1 + 5), (uint64_t)&v111);
        uint64_t v12 = (uint64_t)(v11 + 4);
      }
      a1[6] = v12;
      if (__p)
      {
        v113 = __p;
        operator delete(__p);
      }
      v111.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v111);
      uint64_t v5 = (uint64_t *)a1[1];
      uint64_t v6 = v5 + 1;
      uint64_t v7 = *v5;
    }
    while (a2 >= (unint64_t)((v5[1] - *v5) >> 5));
  }
  if (*((unsigned char *)a1 + 33))
  {
    unint64_t v13 = (char *)a1[11];
    uint64_t v14 = (char *)a1[12];
    unint64_t v15 = (v14 - v13) >> 2;
    if (v15 <= a2)
    {
      uint64_t v16 = a1 + 13;
      do
      {
        if ((unint64_t)v14 >= *v16)
        {
          unint64_t v18 = v15 + 1;
          if ((v15 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = *v16 - (void)v13;
          if (v19 >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            float v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v20);
            unint64_t v13 = (char *)a1[11];
            uint64_t v14 = (char *)a1[12];
          }
          else
          {
            float v21 = 0;
          }
          float v22 = &v21[4 * v15];
          *(_DWORD *)float v22 = -1;
          uint64_t v17 = v22 + 4;
          while (v14 != v13)
          {
            int v23 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            v22 -= 4;
          }
          a1[11] = (uint64_t)v22;
          a1[12] = (uint64_t)v17;
          a1[13] = (uint64_t)&v21[4 * v20];
          if (v13)
          {
            operator delete(v13);
            unint64_t v13 = (char *)a1[11];
          }
          else
          {
            unint64_t v13 = v22;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v14 = -1;
          uint64_t v17 = v14 + 4;
        }
        a1[12] = (uint64_t)v17;
        unint64_t v15 = (v17 - v13) >> 2;
        uint64_t v14 = v17;
      }
      while (v15 <= a2);
      uint64_t v7 = *(void *)a1[1];
    }
    *(_DWORD *)&v13[4 * a2] = *((_DWORD *)a1 + 28);
  }
  uint64_t v24 = v7 + 32 * a2;
  *(void *)uint64_t v24 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v24 + 8), 0, 0, 0);
  uint64_t v25 = a1 + 5;
  uint64_t v26 = a1[5] + 32 * v4;
  *(void *)uint64_t v26 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v26 + 8), 0, 0, 0);
  unint64_t v27 = a1 + 8;
  uint64_t v28 = *(uint64_t **)(a1[2] + 16);
  uint64_t v29 = *v28;
  *(void *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(uint64_t *, unint64_t))(v29 + 24))(v28, v4);
  unsigned int v30 = (void **)(a1 + 11);
  float v31 = a1 + 13;
  v101 = (char *)a1 + 116;
  int32x2_t v32 = vdup_n_s32(0x7F800000u);
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_174;
    }
    int v33 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    while (1)
    {
      float v34 = (uint64_t *)a1[1];
      long long v35 = v34 + 1;
      if (v33 < (unint64_t)((v34[1] - *v34) >> 5)) {
        break;
      }
      int32x2_t v111 = v32;
      v113 = 0;
      v114 = 0;
      std::string __p = 0;
      unint64_t v36 = v34[1];
      if (v36 >= v34[2])
      {
        uint64_t v37 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v34, (uint64_t)&v111);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)v34, (uint64_t)&v111);
        uint64_t v37 = v36 + 32;
      }
      uint64_t *v35 = v37;
      if (__p)
      {
        v113 = __p;
        operator delete(__p);
      }
      int32x2_t v111 = v32;
      v113 = 0;
      v114 = 0;
      std::string __p = 0;
      char v38 = (void *)a1[6];
      if ((unint64_t)v38 >= a1[7])
      {
        uint64_t v39 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a1 + 5, (uint64_t)&v111);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)(a1 + 5), (uint64_t)&v111);
        uint64_t v39 = (uint64_t)(v38 + 4);
      }
      a1[6] = v39;
      if (__p)
      {
        v113 = __p;
        operator delete(__p);
      }
      v111.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v111);
    }
    if (*((unsigned char *)a1 + 32))
    {
      (*(void (**)(int32x2_t *__return_ptr))(*(void *)*a1 + 32))(&v111);
      v107.i32[0] = v111.i32[1];
      v116.i32[0] = v111.i32[0];
      LODWORD(v103) = 2139095040;
      float v120 = INFINITY;
      BOOL v40 = *(float *)v111.i32 != INFINITY || *(float *)v107.i32 != v120;
      if (__p)
      {
        v113 = __p;
        operator delete(__p);
      }
      if (v40)
      {
LABEL_174:
        ++*((_DWORD *)a1 + 28);
        if (!(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
          return;
        }
LABEL_178:
        unsigned char *v101 = 1;
        return;
      }
    }
    *(void *)(*v27 + (((unint64_t)v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v33);
    uint64_t v41 = *v25 + 32 * v33;
    float32x2_t v116 = *(float32x2_t *)v41;
    v118 = 0;
    uint64_t v119 = 0;
    v117 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v117, *(const void **)(v41 + 8), *(void *)(v41 + 16), (uint64_t)(*(void *)(v41 + 16) - *(void *)(v41 + 8)) >> 2);
    uint64_t v42 = *v25 + 32 * v33;
    *(int32x2_t *)uint64_t v42 = v32;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v42 + 8), 0, 0, 0);
    uint64_t v43 = *a1;
    uint64_t v44 = *(void *)*a1;
    unint64_t v115 = 0;
    (*(void (**)(uint64_t, void, int32x2_t *))(v44 + 136))(v43, v33, &v111);
    while (1)
    {
      if (!*(void *)&v111)
      {
        if (v115 >= (unint64_t)v113)
        {
          int v87 = 10;
          goto LABEL_166;
        }
LABEL_70:
        uint64_t v49 = (float32x2_t *)((char *)__p + 48 * v115);
        goto LABEL_71;
      }
      char v45 = (*(uint64_t (**)(int32x2_t))(**(void **)&v111 + 24))(v111);
      int32x2_t v48 = v111;
      if (v45) {
        break;
      }
      if (!*(void *)&v111) {
        goto LABEL_70;
      }
      uint64_t v49 = (float32x2_t *)(*(uint64_t (**)(void))(**(void **)&v111 + 32))();
LABEL_71:
      uint64_t v50 = (uint64_t *)a1[1];
      unsigned int v51 = v50 + 1;
      for (unint64_t i = v49[5].i32[0]; i >= (v50[1] - *v50) >> 5; unint64_t i = v49[5].i32[0])
      {
        int32x2_t v107 = v32;
        v109 = 0;
        uint64_t v110 = 0;
        v108 = 0;
        unint64_t v53 = v50[1];
        if (v53 >= v50[2])
        {
          uint64_t v54 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v50, (uint64_t)&v107);
        }
        else
        {
          std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)v50, (uint64_t)&v107);
          uint64_t v54 = v53 + 32;
        }
        *unsigned int v51 = v54;
        if (v108)
        {
          v109 = v108;
          operator delete(v108);
        }
        int32x2_t v107 = v32;
        v109 = 0;
        uint64_t v110 = 0;
        v108 = 0;
        long long v55 = (void *)a1[6];
        if ((unint64_t)v55 >= a1[7])
        {
          uint64_t v56 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a1 + 5, (uint64_t)&v107);
        }
        else
        {
          std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)(a1 + 5), (uint64_t)&v107);
          uint64_t v56 = (uint64_t)(v55 + 4);
        }
        a1[6] = v56;
        if (v108)
        {
          v109 = v108;
          operator delete(v108);
        }
        v107.i8[0] = 0;
        std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v107);
        uint64_t v50 = (uint64_t *)a1[1];
        unsigned int v51 = v50 + 1;
      }
      if (*((unsigned char *)a1 + 33))
      {
        unsigned int v57 = (char *)a1[11];
        unsigned int v58 = (char *)a1[12];
        unint64_t v59 = (v58 - v57) >> 2;
        if (v59 <= (int)i)
        {
          do
          {
            if ((unint64_t)v58 >= *v31)
            {
              unint64_t v62 = v59 + 1;
              if ((v59 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v63 = *v31 - (void)v57;
              if (v63 >> 1 > v62) {
                unint64_t v62 = v63 >> 1;
              }
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v62;
              }
              if (v64)
              {
                v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v31, v64);
                unsigned int v57 = (char *)a1[11];
                unsigned int v58 = (char *)a1[12];
              }
              else
              {
                v65 = 0;
              }
              unint64_t v66 = &v65[4 * v59];
              *(_DWORD *)unint64_t v66 = -1;
              uint64_t v61 = v66 + 4;
              while (v58 != v57)
              {
                int v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              a1[11] = (uint64_t)v66;
              a1[12] = (uint64_t)v61;
              a1[13] = (uint64_t)&v65[4 * v64];
              if (v57)
              {
                operator delete(v57);
                unsigned int v57 = (char *)*v30;
              }
              else
              {
                unsigned int v57 = v66;
              }
            }
            else
            {
              *(_DWORD *)unsigned int v58 = -1;
              uint64_t v61 = v58 + 4;
            }
            a1[12] = (uint64_t)v61;
            unint64_t v59 = (v61 - v57) >> 2;
            LODWORD(i) = v49[5].i32[0];
            unsigned int v58 = v61;
          }
          while (v59 <= (int)i);
          uint64_t v60 = (int)i;
          uint64_t v50 = (uint64_t *)a1[1];
        }
        else
        {
          uint64_t v60 = (int)i;
        }
        if (*(_DWORD *)&v57[4 * v60] != *((_DWORD *)a1 + 28))
        {
          uint64_t v68 = *v50 + 32 * v60;
          *(int32x2_t *)uint64_t v68 = v32;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v68 + 8), 0, 0, 0);
          uint64_t v69 = *v25 + 32 * v49[5].i32[0];
          *(int32x2_t *)uint64_t v69 = v32;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v69 + 8), 0, 0, 0);
          uint64_t v50 = (uint64_t *)a1[1];
          std::vector<unsigned int> v70 = (void *)a1[11];
          LODWORD(i) = *((_DWORD *)a1 + 28);
          unint64_t v71 = v49[5].i32[0];
          *(void *)(a1[8] + ((v71 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v71);
          *((_DWORD *)v70 + v71) = i;
          LODWORD(i) = v49[5].i32[0];
        }
      }
      uint64_t v72 = (int)i;
      uint64_t v73 = *v50;
      uint64_t v74 = *v50 + 32 * (int)i;
      uint64_t v75 = *v25;
      int32x2_t v76 = (int32x2_t)vadd_f32(v116, v49[1]);
      int32x2_t v107 = v76;
      v109 = 0;
      uint64_t v110 = 0;
      v108 = 0;
      float v78 = *(float *)v74;
      __int32 v77 = *(_DWORD *)(v74 + 4);
      float32x2_t v79 = (float32x2_t)vdup_lane_s32(v76, 0);
      v79.i32[0] = *(_DWORD *)v74;
      int32x2_t v102 = v76;
      v76.i32[0] = v77;
      float32x2_t v80 = vadd_f32(v79, (float32x2_t)v76);
      float v81 = v80.f32[1];
      if (v80.f32[0] >= v80.f32[1])
      {
        if (v80.f32[0] > v80.f32[1]
          || (v78 >= *(float *)v102.i32 ? (v83 = v78 <= *(float *)v102.i32) : (v83 = 1), float v82 = (void *)v74, !v83))
        {
          __int32 v77 = v102.i32[1];
          float v78 = *(float *)v102.i32;
          float v82 = &v107;
        }
      }
      else
      {
        float v82 = (void *)v74;
      }
      unint64_t v103 = __PAIR64__(v77, LODWORD(v78));
      v105 = 0;
      uint64_t v106 = 0;
      v104 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v104, (const void *)v82[1], v82[2], (uint64_t)(v82[2] - v82[1]) >> 2);
      v46.n128_u32[0] = *(_DWORD *)v74;
      v47.n128_u32[0] = *(_DWORD *)(v74 + 4);
      if (*(float *)v74 == *(float *)&v103 && v47.n128_f32[0] == *((float *)&v103 + 1))
      {
        BOOL v86 = 1;
      }
      else
      {
        float v85 = v46.n128_f32[0] + v47.n128_f32[0];
        v47.n128_f32[0] = *(float *)&v103 + *((float *)&v103 + 1);
        v46.n128_f32[0] = vabds_f32(v85, *(float *)&v103 + *((float *)&v103 + 1));
        BOOL v86 = v46.n128_f32[0] <= *((float *)a1 + 7);
      }
      if (v104)
      {
        v105 = v104;
        operator delete(v104);
      }
      if (v86)
      {
        int v87 = 0;
        int v88 = 1;
        unsigned int v30 = (void **)(a1 + 11);
        float v31 = a1 + 13;
        goto LABEL_152;
      }
      float v90 = *(float *)v74;
      float v89 = *(float *)(v74 + 4);
      float v91 = *(float *)v74 + v89;
      if (v91 >= v81)
      {
        if (v91 > v81
          || (v90 >= *(float *)v102.i32 ? (BOOL v93 = v90 <= *(float *)v102.i32) : (BOOL v93 = 1), v92 = (void *)v74, !v93))
        {
          float v89 = *(float *)&v102.i32[1];
          float v90 = *(float *)v102.i32;
          v92 = &v107;
        }
      }
      else
      {
        v92 = (void *)v74;
      }
      unint64_t v103 = __PAIR64__(LODWORD(v89), LODWORD(v90));
      v105 = 0;
      uint64_t v106 = 0;
      v104 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v104, (const void *)v92[1], v92[2], (uint64_t)(v92[2] - v92[1]) >> 2);
      *(void *)uint64_t v74 = v103;
      if ((unint64_t *)v74 != &v103) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v73 + 32 * v72 + 8), (char *)v104, (uint64_t)v105, (v105 - (unsigned char *)v104) >> 2);
      }
      if (v104)
      {
        v105 = v104;
        operator delete(v104);
      }
      v94 = (float *)(v75 + 32 * v72);
      float v96 = *v94;
      float v95 = v94[1];
      float v97 = *v94 + v95;
      if (v97 >= v81)
      {
        if (v97 > v81) {
          goto LABEL_142;
        }
        if (v96 >= *(float *)v102.i32)
        {
          v98 = (int32x2_t *)(v75 + 32 * v72);
          if (v96 <= *(float *)v102.i32) {
            goto LABEL_143;
          }
LABEL_142:
          float v95 = *(float *)&v102.i32[1];
          float v96 = *(float *)v102.i32;
          v98 = &v107;
          goto LABEL_143;
        }
      }
      v98 = (int32x2_t *)(v75 + 32 * v72);
LABEL_143:
      unint64_t v103 = __PAIR64__(LODWORD(v95), LODWORD(v96));
      v105 = 0;
      uint64_t v106 = 0;
      v104 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v104, *(const void **)&v98[1], *(void *)&v98[2], (uint64_t)(*(void *)&v98[2] - *(void *)&v98[1]) >> 2);
      *(void *)v94 = v103;
      if (v94 != (float *)&v103) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v75 + 32 * v72 + 8), (char *)v104, (uint64_t)v105, (v105 - (unsigned char *)v104) >> 2);
      }
      if (v104)
      {
        v105 = v104;
        operator delete(v104);
      }
      float v31 = a1 + 13;
      if (fst::LatticeWeightTpl<float>::Member((float *)v74) && fst::LatticeWeightTpl<float>::Member(v94))
      {
        uint64_t v99 = **(void **)(a1[2] + 16);
        if ((*(void *)(a1[8] + (((unint64_t)v49[5].i32[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v49[5].i32[0]))
        {
          (*(void (**)(void))(v99 + 40))();
          unsigned int v30 = (void **)(a1 + 11);
          int v87 = 0;
          int v88 = 1;
        }
        else
        {
          (*(void (**)(void))(v99 + 24))();
          unsigned int v30 = (void **)(a1 + 11);
          int v87 = 0;
          unint64_t v100 = v49[5].i32[0];
          int v88 = 1;
          *(void *)(*v27 + ((v100 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v100;
        }
      }
      else
      {
        int v88 = 0;
        int v87 = 1;
        unsigned char *v101 = 1;
        unsigned int v30 = (void **)(a1 + 11);
      }
LABEL_152:
      if (v108) {
        operator delete(v108);
      }
      int32x2_t v48 = v111;
      if (!v88) {
        goto LABEL_163;
      }
      if (v111) {
        (*(void (**)(__n128, __n128))(**(void **)&v111 + 40))(v46, v47);
      }
      else {
        ++v115;
      }
    }
    int v87 = 10;
LABEL_163:
    if (v48)
    {
      (*(void (**)(int32x2_t, __n128, __n128))(**(void **)&v48 + 8))(v48, v46, v47);
      goto LABEL_168;
    }
LABEL_166:
    if (v114) {
      --*v114;
    }
LABEL_168:
    if (v87 == 10) {
      int v87 = 0;
    }
    if (v117)
    {
      v118 = v117;
      operator delete(v117);
    }
  }
  while (!v87);
}

void sub_1B2051564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  float v31 = *(void **)(v29 - 136);
  if (v31)
  {
    *(void *)(v29 - 128) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B20516DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::resize(void *result, unint64_t a2)
{
  int v2 = result;
  uint64_t v3 = result[1];
  unint64_t v4 = (v3 - *result) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *result + 16 * a2;
      if (v3 != v6)
      {
        uint64_t v7 = v3 - 16;
        int32x2_t v8 = (uint64_t (***)(void))(v3 - 16);
        unint64_t v9 = (uint64_t (***)(void))(v3 - 16);
        do
        {
          uint64_t v10 = *v9;
          v9 -= 2;
          uint64_t result = (void *)(*v10)(v8);
          v7 -= 16;
          BOOL v11 = v8 == (uint64_t (***)(void))v6;
          int32x2_t v8 = v9;
        }
        while (!v11);
      }
      v2[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    return (void *)std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::__append(result, v5);
  }
  return result;
}

uint64_t *std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 != *result)
  {
    uint64_t v5 = v4 - 16;
    do
    {
      *(void *)(v4 - 16) = &unk_1F0A46290;
      v4 -= 16;
      uint64_t v6 = *(void *)(v3 - 8);
      *(void *)(v4 + 8) = v6;
      ++*(_DWORD *)(v6 + 56);
      v5 -= 16;
      v3 -= 16;
    }
    while (v3 != v2);
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 16);
    *(void *)(a1 + 16) = i - 16;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::__append(void *a1, unint64_t a2)
{
  uint64_t v5 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v4 = v5;
  uint64_t v6 = *(void *)(result - 8);
  if (a2 > (v5 - v6) >> 4)
  {
    unint64_t v7 = a2 + ((v6 - *a1) >> 4);
    if (!(v7 >> 60))
    {
      uint64_t v8 = v4 - *a1;
      if (v8 >> 3 > v7) {
        unint64_t v7 = v8 >> 3;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v7;
      }
      if (v9) {
        std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, v9);
      }
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst();
    }
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (a2) {
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst();
  }
  a1[1] = v6;
  return result;
}

void sub_1B20519C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<kaldi::quasar::TranslationUtil::PathElement>::__vdeallocate((void **)a1);
    if (a4 > 0x111111111111111) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x88888888888888) {
      unint64_t v11 = 0x111111111111111;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<kaldi::quasar::TranslationUtil::PathElement>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    uint64_t v13 = a2 + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,0>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
      kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(v16 - 240));
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B2051B50(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B2051B58(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::TranslationUtil::PathElement>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(v3 - 240));
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::PathElement::operator=(a3, v4);
      v4 += 240;
      a3 += 240;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t kaldi::quasar::TranslationUtil::PathElement::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 32), *(std::string **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
    std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 88), *(char **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 112), *(char **)(a2 + 112), *(void *)(a2 + 120), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 136), *(char **)(a2 + 136), *(void *)(a2 + 144), (uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 160), *(char **)(a2 + 160), *(void *)(a2 + 168), (uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 184), *(char **)(a2 + 184), *(void *)(a2 + 192), (uint64_t)(*(void *)(a2 + 192) - *(void *)(a2 + 184)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 208), *(char **)(a2 + 208), *(void *)(a2 + 216), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 2);
  }
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  return a1;
}

uint64_t std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::NbestElement const&>(uint64_t *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xF0F0F0F0F0F0F0) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x78787878787878) {
    unint64_t v9 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (kaldi::quasar::TranslationUtil::NbestElement *)&v10[272 * v4];
  uint64_t v16 = &v10[272 * v9];
  kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v14, a2);
  uint64_t v15 = (char *)v14 + 272;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B2051E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 272;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (kaldi::quasar::TranslationUtil::NbestElement *)(v11 + v10);
    v10 -= 272;
    kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v12, (const kaldi::quasar::TranslationUtil::NbestElement *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 272;
    kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(i - 272));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 16;
      uint64_t v7 = v4 - 16;
      uint64_t v8 = v4 - 16;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 16;
        (*v9)(v7);
        v6 -= 16;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DecodeOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)a2[2], a2[3]);
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), (const std::string::value_type *)a2[5], a2[6]);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 5);
    *(void *)(a1 + 56) = a2[7];
    *(_OWORD *)(a1 + 40) = v6;
  }
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), (const std::string::value_type *)a2[8], a2[9]);
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 4);
    *(void *)(a1 + 80) = a2[10];
    *(_OWORD *)(a1 + 64) = v7;
  }
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), (const std::string::value_type *)a2[11], a2[12]);
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 11);
    *(void *)(a1 + 104) = a2[13];
    *(_OWORD *)(a1 + 88) = v8;
  }
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 112), (const std::string::value_type *)a2[14], a2[15]);
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 7);
    *(void *)(a1 + 128) = a2[16];
    *(_OWORD *)(a1 + 112) = v9;
  }
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 136), (const std::string::value_type *)a2[17], a2[18]);
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 17);
    *(void *)(a1 + 152) = a2[19];
    *(_OWORD *)(a1 + 136) = v10;
  }
  long long v11 = *((_OWORD *)a2 + 12);
  long long v12 = *((_OWORD *)a2 + 13);
  long long v13 = *((_OWORD *)a2 + 14);
  long long v15 = *((_OWORD *)a2 + 10);
  long long v14 = *((_OWORD *)a2 + 11);
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 2++*(_DWORD *)(result + 24) = v13;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 76) = v14;
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 160) = v15;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>((void *)(a1 + 240), (void *)a2[30], (void *)a2[31], (a2[31] - a2[30]) >> 4);
  if (*((char *)a2 + 287) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 264), (const std::string::value_type *)a2[33], a2[34]);
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 33);
    *(void *)(a1 + 280) = a2[35];
    *(_OWORD *)(a1 + 264) = v16;
  }
  long long v17 = *((_OWORD *)a2 + 18);
  long long v18 = *((_OWORD *)a2 + 19);
  *(_DWORD *)(a1 + 320) = *((_DWORD *)a2 + 80);
  *(_OWORD *)(a1 + 288) = v17;
  *(_OWORD *)(a1 + 304) = v18;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 328), (long long *)a2[41], (long long *)a2[42], 0xAAAAAAAAAAAAAAABLL * ((a2[42] - a2[41]) >> 3));
  return a1;
}

void sub_1B205226C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v2[159] < 0) {
    operator delete(*v8);
  }
  if (v2[135] < 0) {
    operator delete(*v7);
  }
  if (v2[111] < 0) {
    operator delete(*v6);
  }
  if (v2[87] < 0) {
    operator delete(*v5);
  }
  if (v2[63] < 0) {
    operator delete(*v4);
  }
  if (v2[39] < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::PhraseBook>>,std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B2052394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::PhraseBook>>,std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  _DWORD v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::PhraseBook>>,std::shared_ptr<kaldi::quasar::PhraseBook>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::PhraseBook>>,std::shared_ptr<kaldi::quasar::PhraseBook>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::__tree<std::pair<float,int>>::__emplace_multi<float,int &>(uint64_t **a1, _DWORD *a2, _DWORD *a3)
{
  long long v6 = (uint64_t *)operator new(0x28uLL);
  *((_DWORD *)v6 + 7) = *a2;
  *((_DWORD *)v6 + 8) = *a3;
  leaf_high = (uint64_t **)std::__tree<std::pair<float,int>>::__find_leaf_high((uint64_t)a1, &v9, (uint64_t)v6 + 28);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, leaf_high, v6);
  return v6;
}

void sub_1B20524F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::pair<float,int>>::__find_leaf_high(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    float v6 = *(float *)a3;
    do
    {
      while (1)
      {
        uint64_t v3 = v4;
        float v7 = *((float *)v4 + 7);
        if (v6 >= v7 && (v7 < v6 || *(_DWORD *)(a3 + 4) >= *((_DWORD *)v4 + 8))) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        char v8 = v3;
        if (!*v3) {
          goto LABEL_11;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    char v8 = v3 + 1;
  }
  else
  {
    char v8 = v3;
  }
LABEL_11:
  *a2 = v3;
  return v8;
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare::NbestCompare(uint64_t a1, int a2, float a3, float a4)
{
  *(_DWORD *)a1 = a2;
  *(float *)(a1 + 4) = a3;
  *(float *)(a1 + 8) = a4;
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v7, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Initializing NbestCompare. alpha: ", 34);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", sigma: ", 9);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v7);
  }
  return a1;
}

void sub_1B2052600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::AddInitialHypToCurrent<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (****)(void))(a2 + 200);
  if (v3) {
    (**v3)(v3);
  }
  if (*(_DWORD *)(a2 + 184) == 2) {
    (*(void (**)(void))(**(void **)(a2 + 208) + 24))(*(void *)(a2 + 208));
  }
  operator new();
}

void std::priority_queue<float>::push(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  float v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    char v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
      char v8 = *(_DWORD **)a1;
      float v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      long long v13 = 0;
    }
    long long v14 = &v13[4 * v9];
    long long v15 = &v13[4 * v12];
    *(_DWORD *)long long v14 = *a2;
    float v7 = (float *)(v14 + 4);
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *float v6 = *a2;
    float v7 = (float *)(v6 + 1);
  }
  *(void *)(a1 + 8) = v7;
  long long v17 = *(_DWORD **)a1;
  uint64_t v18 = (uint64_t)v7 - *(void *)a1;
  if (v18 >= 5)
  {
    unint64_t v19 = (((unint64_t)v18 >> 2) - 2) >> 1;
    unint64_t v20 = (float *)&v17[v19];
    float v22 = *(v7 - 1);
    float v21 = v7 - 1;
    float v23 = v22;
    float v24 = *v20;
    if (*v20 < v22)
    {
      do
      {
        *float v21 = v24;
        float v21 = v20;
        if (!v19) {
          break;
        }
        unint64_t v19 = (v19 - 1) >> 1;
        unint64_t v20 = (float *)&v17[v19];
        float v24 = *v20;
      }
      while (*v20 < v23);
      *float v21 = v23;
    }
  }
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,0>(a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        char v8 = *(void **)(v7 - 40);
        if (v8)
        {
          *(void *)(v7 - 32) = v8;
          operator delete(v8);
        }
        v7 -= 48;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56)
  {
    uint64_t v4 = *(void **)(i - 40);
    if (v4)
    {
      *(void *)(i - 32) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v19 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[48 * v4];
  v16[0] = v10;
  v16[1] = v11;
  long long v17 = v11;
  uint64_t v18 = &v10[48 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 1) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v11 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  unint64_t v12 = &v10[48 * v4];
  uint64_t v13 = *(void *)(a2 + 32);
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((void *)v12 + 4) = v13;
  v17 += 48;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1B2052B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 48);
      a3 -= 48;
      *(void *)(v7 - 48) = v8;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
      uint64_t v9 = *(void *)(a3 + 32);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 40);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 48;
      *((void *)&v15 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 48;
  }
}

uint64_t std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 48;
    uint64_t v5 = *(void **)(v2 - 40);
    if (v5)
    {
      *(void *)(v2 - 32) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 48;
    }
  }
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = a1 + 48 * (v4 >> 1);
    uint64_t v8 = a2 - 48;
    float v9 = *(float *)(a2 - 48);
    if (*(float *)v7 > v9)
    {
      int v10 = *(_DWORD *)(a2 - 44);
      long long v17 = *(_OWORD *)(a2 - 40);
      uint64_t v12 = *(void *)(a2 - 24);
      uint64_t v11 = *(void *)(a2 - 16);
      *(void *)(a2 - 32) = 0;
      *(void *)(a2 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a2 - 40) = 0;
      uint64_t v18 = v11;
      int v19 = *(_DWORD *)(a2 - 8);
      do
      {
        uint64_t v13 = v8;
        uint64_t v8 = v7;
        long long v14 = (void *)(v7 + 8);
        *(void *)uint64_t v13 = *(void *)v7;
        std::vector<int>::__move_assign(v13 + 8, (__n128 *)(v7 + 8));
        uint64_t v15 = *(void *)(v8 + 32);
        *(_DWORD *)(v13 + 40) = *(_DWORD *)(v8 + 40);
        *(void *)(v13 + 32) = v15;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = a1 + 48 * v6;
      }
      while (*(float *)v7 > v9);
      *(float *)uint64_t v8 = v9;
      *(_DWORD *)(v8 + 4) = v10;
      int v16 = *(void **)(v8 + 8);
      if (v16)
      {
        *(void *)(v8 + 16) = v16;
        operator delete(v16);
        *long long v14 = 0;
        v14[1] = 0;
        void v14[2] = 0;
      }
      *(_OWORD *)(v8 + 8) = v17;
      *(void *)(v8 + ++*(_DWORD *)(result + 24) = v12;
      *(void *)(v8 + 32) = v18;
      *(_DWORD *)(v8 + 40) = v19;
    }
  }
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  void v15[3] = &v10[48 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = 0;
  uint64_t v12 = *(void *)(a2 + 32);
  *((_DWORD *)v11 + 10) = *(_DWORD *)(a2 + 40);
  *((void *)v11 + 4) = v12;
  void v15[2] = v11 + 48;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B205302C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *(void *)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v18 = *(void *)(a1 + 32);
    int v19 = *(_DWORD *)(a1 + 40);
    uint64_t v11 = (void *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, a3, a4);
    uint64_t v12 = v11;
    if ((void *)(a2 - 48) == v11)
    {
      void *v11 = v8;
      long long v17 = v11 + 1;
      int v16 = (void *)v11[1];
      if (v16)
      {
        v12[2] = v16;
        operator delete(v16);
        void *v17 = 0;
        v12[2] = 0;
        void v12[3] = 0;
      }
      v12[1] = v7;
      v12[2] = v10;
      void v12[3] = v9;
      v12[4] = v18;
      *((_DWORD *)v12 + 10) = v19;
    }
    else
    {
      void *v11 = *(void *)(a2 - 48);
      std::vector<int>::__move_assign((uint64_t)(v11 + 1), (__n128 *)(a2 - 40));
      uint64_t v13 = *(void *)(a2 - 16);
      *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 - 8);
      v12[4] = v13;
      uint64_t v14 = (uint64_t)(v12 + 6);
      *(void *)(a2 - 48) = v8;
      uint64_t v15 = *(void **)(a2 - 40);
      if (v15)
      {
        *(void *)(a2 - 32) = v15;
        operator delete(v15);
        *(void *)(a2 - 40) = 0;
        *(void *)(a2 - 32) = 0;
        *(void *)(a2 - ++*(_DWORD *)(result + 24) = 0;
      }
      *(void *)(a2 - 40) = v7;
      *(void *)(a2 - 32) = v10;
      *(void *)(a2 - ++*(_DWORD *)(result + 24) = v9;
      *(void *)(a2 - 16) = v18;
      *(_DWORD *)(a2 - 8) = v19;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, v14, a3, 0xAAAAAAAAAAAAAAABLL * ((v14 - a1) >> 4));
    }
  }
}

void sub_1B2053194(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1;
    a1 += 48 * v5 + 48;
    uint64_t v9 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v10 = v9 + 2;
    if (v10 < a3 && *(float *)a1 > *(float *)(a1 + 48))
    {
      a1 += 48;
      uint64_t v5 = v10;
    }
    *(void *)uint64_t v8 = *(void *)a1;
    std::vector<int>::__move_assign(v8 + 8, (__n128 *)(a1 + 8));
    uint64_t v11 = *(void *)(a1 + 32);
    *(_DWORD *)(v8 + 40) = *(_DWORD *)(a1 + 40);
    *(void *)(v8 + 32) = v11;
  }
  while (v5 <= v7);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,false>(std::vector<int> *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = (uint64_t *)a1;
  uint64_t v25 = a2;
  uint64_t v26 = a1;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = (char *)v9 - (char *)v10;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v10) >> 4);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v23 = *((float *)v9 - 12);
          uint64_t v25 = v9 - 6;
          if (v23 > *(float *)v10) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v26, &v25);
          }
          break;
        case 3uLL:
          uint64_t v25 = v9 - 6;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v10, v10 + 6, v9 - 6);
          break;
        case 4uLL:
          uint64_t v25 = v9 - 6;
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v10, v10 + 6, v10 + 12, v9 - 6);
          break;
        case 5uLL:
          uint64_t v25 = v9 - 6;
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v10, v10 + 6, v10 + 12, v10 + 18, v9 - 6);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 1151)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v10, (uint64_t)v9);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v10, (uint64_t)v9);
      }
      return;
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 6;
    if ((unint64_t)v12 >= 0x1801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v10, &v10[6 * (v13 >> 1)], v15);
      int v16 = v25;
      uint64_t v17 = 3 * v14;
      uint64_t v18 = 2 * v14;
      uint64_t v19 = 48 * v14 - 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)&v26[2], (uint64_t *)((char *)v26 + v19), v25 - 12);
      v18 += 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)&v26[4], (uint64_t *)&v26[v18], v16 - 18);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)((char *)v26 + v19), (uint64_t *)&v26[(unint64_t)(16 * v17) / 0x18], (uint64_t *)&v26[v18]);
      float v24 = &v26[(unint64_t)(16 * v17) / 0x18];
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v26, (uint64_t **)&v24);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)&v10[6 * (v13 >> 1)], v10, v15);
    }
    if (a5)
    {
      uint64_t v9 = v25;
    }
    else
    {
      uint64_t v9 = v25;
      if (*(float *)&v26[-2].__begin_ <= *(float *)&v26->__begin_)
      {
        uint64_t v10 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &>(v26, v25);
        goto LABEL_22;
      }
    }
    unint64_t v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &>(v26, v9);
    if ((v21 & 1) == 0) {
      goto LABEL_20;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v26, (uint64_t *)v20);
    uint64_t v10 = (uint64_t *)&v20[2];
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)&v20[2], v9))
    {
      if (v22) {
        return;
      }
      uint64_t v25 = (uint64_t *)v20;
      uint64_t v10 = (uint64_t *)v26;
      uint64_t v9 = (uint64_t *)v20;
    }
    else
    {
      if (!v22)
      {
LABEL_20:
        std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,false>(v26, v20, a3, -i, a5 & 1);
        uint64_t v10 = (uint64_t *)&v20[2];
LABEL_22:
        a5 = 0;
        uint64_t v26 = (std::vector<int> *)v10;
        a4 = -i;
        goto LABEL_2;
      }
      uint64_t v26 = v20 + 2;
    }
  }
  if (v10 != v9) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(v10, v9, (float *)v9, a3);
  }
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (uint64_t *)*a1;
  __n128 v5 = *(__n128 *)(*a1 + 8);
  unint64_t v4 = (void *)(*a1 + 8);
  __n128 v12 = v5;
  uint64_t v6 = *v2;
  *unint64_t v4 = 0;
  uint64_t v8 = v2[3];
  uint64_t v7 = v2[4];
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v13 = v7;
  int v14 = *((_DWORD *)v2 + 10);
  *uint64_t v2 = *v3;
  std::vector<int>::__move_assign((uint64_t)v4, (__n128 *)(v3 + 1));
  uint64_t v9 = v3[4];
  *((_DWORD *)v2 + 10) = *((_DWORD *)v3 + 10);
  v2[4] = v9;
  *uint64_t v3 = v6;
  uint64_t v10 = (void *)v3[1];
  if (v10)
  {
    v3[2] = (uint64_t)v10;
    operator delete(v10);
  }
  __n128 result = v12;
  *(__n128 *)(v3 + 1) = v12;
  void v3[3] = v8;
  v3[4] = v13;
  *((_DWORD *)v3 + 10) = v14;
  return result;
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 48;
    if (a1 + 48 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = a1;
      do
      {
        uint64_t v7 = v4;
        float v8 = *(float *)(v6 + 48);
        if (v8 > *(float *)v6)
        {
          int v9 = *(_DWORD *)(v6 + 52);
          uint64_t v10 = *(void *)(v6 + 56);
          long long v17 = *(_OWORD *)(v6 + 64);
          *(void *)(v6 + 64) = 0;
          *(void *)(v6 + 72) = 0;
          *(void *)(v6 + 56) = 0;
          uint64_t v18 = *(void *)(v6 + 80);
          int v19 = *(_DWORD *)(v6 + 88);
          uint64_t v11 = v5;
          while (1)
          {
            uint64_t v12 = v11;
            uint64_t v13 = a1 + v11;
            *(void *)(a1 + v11 + 48) = *(void *)(a1 + v11);
            std::vector<int>::__move_assign(a1 + v11 + 56, (__n128 *)(a1 + v11 + 8));
            *(void *)(v13 + 80) = *(void *)(v13 + 32);
            *(_DWORD *)(v13 + 88) = *(_DWORD *)(v13 + 40);
            if (!v12) {
              break;
            }
            uint64_t v11 = v12 - 48;
            if (*(float *)(v13 - 48) >= v8)
            {
              uint64_t v14 = a1 + v12;
              goto LABEL_10;
            }
          }
          uint64_t v14 = a1;
LABEL_10:
          *(float *)uint64_t v14 = v8;
          *(_DWORD *)(v14 + 4) = v9;
          uint64_t v15 = *(void **)(v13 + 8);
          if (v15)
          {
            *(void *)(v14 + 16) = v15;
            operator delete(v15);
            uint64_t v16 = a1 + v12;
            *(void *)(v16 + 16) = 0;
            *(void *)(v16 + ++*(_DWORD *)(result + 24) = 0;
          }
          *(void *)(v13 + 8) = v10;
          *(_OWORD *)(v14 + 16) = v17;
          *(void *)(v13 + 32) = v18;
          *(_DWORD *)(v13 + 40) = v19;
        }
        uint64_t v4 = v7 + 48;
        v5 += 48;
        uint64_t v6 = v7;
      }
      while (v7 + 48 != a2);
    }
  }
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result + 48;
    if (result + 48 != a2)
    {
      uint64_t v4 = result - 48;
      do
      {
        uint64_t v5 = v3;
        float v6 = *(float *)(result + 48);
        if (v6 > *(float *)result)
        {
          int v7 = *(_DWORD *)(result + 52);
          long long v13 = *(_OWORD *)(result + 56);
          uint64_t v9 = *(void *)(result + 72);
          uint64_t v8 = *(void *)(result + 80);
          *(void *)(result + 64) = 0;
          *(void *)(result + 72) = 0;
          *(void *)(result + 56) = 0;
          uint64_t v14 = v8;
          int v15 = *(_DWORD *)(result + 88);
          uint64_t v10 = v4;
          do
          {
            *(void *)(v10 + 96) = *(void *)(v10 + 48);
            std::vector<int>::__move_assign(v10 + 104, (__n128 *)(v10 + 56));
            *(void *)(v10 + 128) = *(void *)(v10 + 80);
            *(_DWORD *)(v10 + 136) = *(_DWORD *)(v10 + 88);
            float v11 = *(float *)v10;
            v10 -= 48;
          }
          while (v11 < v6);
          *(float *)(v10 + 96) = v6;
          *(_DWORD *)(v10 + 100) = v7;
          uint64_t v12 = *(void **)(v10 + 104);
          if (v12)
          {
            *(void *)(v10 + 112) = v12;
            operator delete(v12);
          }
          *(_OWORD *)(v10 + 104) = v13;
          *(void *)(v10 + 120) = v9;
          *(void *)(v10 + 128) = v14;
          *(_DWORD *)(v10 + 136) = v15;
        }
        uint64_t v3 = v5 + 48;
        v4 += 48;
        __n128 result = v5;
      }
      while (v5 + 48 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(float *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v10 = a1;
  uint64_t v8 = (float *)a3;
  uint64_t v9 = (float *)a2;
  float v3 = *(float *)a2;
  float v4 = *(float *)a3;
  if (*(float *)a2 > *a1)
  {
    if (v4 > v3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v10, (uint64_t **)&v8);
      return 1;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v10, (uint64_t **)&v9);
    if (*v8 <= *v9) {
      return 1;
    }
    uint64_t v5 = &v9;
    float v6 = &v8;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)v5, (uint64_t **)v6);
    return 2;
  }
  if (v4 > v3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v9, (uint64_t **)&v8);
    if (*v9 <= *v10) {
      return 1;
    }
    uint64_t v5 = &v10;
    float v6 = &v9;
    goto LABEL_9;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &>(std::vector<int> *this, uint64_t *a2)
{
  float v23 = a2;
  std::vector<int>::pointer begin = this->__begin_;
  p_std::vector<int>::pointer end = &this->__end_;
  long long v5 = *(_OWORD *)&this->__end_;
  std::vector<int>::pointer v6 = this[1].__begin_;
  this->__end_ = 0;
  uint64_t v8 = (float *)&this[1].__end_;
  std::vector<int>::pointer end = this[1].__end_;
  this->__end_cap_.__value_ = 0;
  this[1].__begin_ = 0;
  std::vector<int>::pointer v21 = end;
  int value = (int)this[1].__end_cap_.__value_;
  if (*((float *)a2 - 12) >= *(float *)&begin)
  {
    float v11 = this + 2;
    do
    {
      uint64_t v9 = (float *)v11;
      if (v11 >= (std::vector<int> *)a2) {
        break;
      }
      v11 += 2;
    }
    while (*v9 >= *(float *)&begin);
  }
  else
  {
    uint64_t v9 = (float *)this;
    do
    {
      float v10 = v9[12];
      v9 += 12;
    }
    while (v10 >= *(float *)&begin);
  }
  float v24 = v9;
  long long v19 = v5;
  if (v9 < (float *)a2)
  {
    do
    {
      float v12 = *((float *)a2 - 12);
      a2 -= 6;
    }
    while (v12 < *(float *)&begin);
    float v23 = a2;
  }
  unint64_t v20 = begin;
  if (v9 < (float *)a2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v24, &v23);
      std::vector<int>::pointer begin = v20;
      uint64_t v9 = v24;
      do
      {
        float v13 = v9[12];
        v9 += 12;
      }
      while (v13 >= *(float *)&v20);
      float v24 = v9;
      uint64_t v14 = v23;
      do
      {
        float v15 = *((float *)v14 - 12);
        v14 -= 6;
      }
      while (v15 < *(float *)&v20);
      float v23 = v14;
    }
    while (v9 < (float *)v14);
  }
  if (v9 - 12 != (float *)this)
  {
    this->__begin_ = (std::vector<int>::pointer)*((void *)v9 - 6);
    std::vector<int>::__move_assign((uint64_t)p_end, (__n128 *)(v9 - 10));
    std::vector<int>::pointer begin = v20;
    uint64_t v16 = *((void *)v9 - 2);
    v8[2] = *(v9 - 2);
    *(void *)uint64_t v8 = v16;
  }
  *((void *)v9 - 6) = begin;
  long long v17 = (void *)*((void *)v9 - 5);
  if (v17)
  {
    *((void *)v9 - 4) = v17;
    operator delete(v17);
  }
  *(_OWORD *)(v9 - 10) = v19;
  *((void *)v9 - 3) = v6;
  *((void *)v9 - 2) = v21;
  *((_DWORD *)v9 - 2) = value;
  return v24;
}

std::vector<int> *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &>(std::vector<int> *this, uint64_t *a2)
{
  uint64_t v4 = 0;
  std::vector<int>::pointer begin = this->__begin_;
  p_std::vector<int>::pointer end = &this->__end_;
  long long v20 = *(_OWORD *)&this->__end_;
  int v7 = &this[1].__end_;
  std::vector<int>::pointer end = this[1].__end_;
  int value = (int)this[1].__end_cap_.__value_;
  std::vector<int>::pointer v8 = this[1].__begin_;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  this[1].__begin_ = 0;
  do
  {
    float v9 = *(float *)&this[v4 + 2].__begin_;
    v4 += 2;
  }
  while (v9 > *(float *)&begin);
  float v10 = &this[v4];
  uint64_t v25 = &this[v4];
  if (v4 == 2)
  {
    do
    {
      if (v10 >= (std::vector<int> *)a2) {
        break;
      }
      float v12 = *((float *)a2 - 12);
      a2 -= 6;
    }
    while (v12 <= *(float *)&begin);
  }
  else
  {
    do
    {
      float v11 = *((float *)a2 - 12);
      a2 -= 6;
    }
    while (v11 <= *(float *)&begin);
  }
  float v24 = a2;
  float v13 = &this[v4];
  std::vector<int>::pointer v21 = begin;
  if (v10 < (std::vector<int> *)a2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v25, &v24);
      std::vector<int>::pointer begin = v21;
      float v13 = v25;
      do
      {
        float v14 = *(float *)&v13[2].__begin_;
        v13 += 2;
      }
      while (v14 > *(float *)&v21);
      uint64_t v25 = v13;
      float v15 = v24;
      do
      {
        float v16 = *((float *)v15 - 12);
        v15 -= 6;
      }
      while (v16 <= *(float *)&v21);
      float v24 = v15;
    }
    while (v13 < (std::vector<int> *)v15);
  }
  if (&v13[-2] != this)
  {
    this->__begin_ = v13[-2].__begin_;
    std::vector<int>::__move_assign((uint64_t)p_end, (__n128 *)&v13[-2].__end_);
    std::vector<int>::pointer begin = v21;
    std::vector<int>::pointer v17 = v13[-1].__end_;
    *((_DWORD *)v7 + 2) = v13[-1].__end_cap_.__value_;
    *int v7 = v17;
  }
  v13[-2].__begin_ = begin;
  uint64_t v18 = v13[-2].__end_;
  if (v18)
  {
    v13[-2].__end_cap_.__value_ = v18;
    operator delete(v18);
  }
  *(_OWORD *)&v13[-2].__end_ = v20;
  v13[-1].__begin_ = v8;
  LODWORD(v13[-1].__end_cap_.__value_) = value;
  v13[-1].__end_ = end;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  long long v19 = a2;
  uint64_t v20 = a1;
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v6 = *((float *)a2 - 12);
      long long v19 = a2 - 6;
      if (v6 > *(float *)a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>(&v20, &v19);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), a2 - 6);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 96), a2 - 6);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 144), a2 - 6);
      return 1;
    default:
      uint64_t v7 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 96));
      uint64_t v8 = a1 + 144;
      if ((uint64_t *)v8 == v2) {
        return 1;
      }
      int v9 = 0;
      break;
  }
  while (1)
  {
    float v10 = *(float *)v8;
    if (*(float *)v8 > *(float *)v7) {
      break;
    }
LABEL_14:
    uint64_t v7 = v8;
    v8 += 48;
    if ((uint64_t *)v8 == v2) {
      return 1;
    }
  }
  int v11 = *(_DWORD *)(v8 + 4);
  long long v16 = *(_OWORD *)(v8 + 8);
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t v12 = *(void *)(v8 + 32);
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(v8 + 8) = 0;
  uint64_t v17 = v12;
  int v18 = *(_DWORD *)(v8 + 40);
  do
  {
    uint64_t v14 = v7;
    *(void *)(v7 + 48) = *(void *)v7;
    std::vector<int>::__move_assign(v7 + 56, (__n128 *)(v7 + 8));
    *(void *)(v7 + 80) = *(void *)(v7 + 32);
    *(_DWORD *)(v7 + 88) = *(_DWORD *)(v7 + 40);
    if (v7 == v20) {
      break;
    }
    v7 -= 48;
  }
  while (*(float *)(v14 - 48) < v10);
  *(float *)uint64_t v14 = v10;
  *(_DWORD *)(v14 + 4) = v11;
  float v15 = *(void **)(v14 + 8);
  if (v15)
  {
    *(void *)(v14 + 16) = v15;
    operator delete(v15);
  }
  *(_OWORD *)(v14 + 8) = v16;
  *(void *)(v14 + ++*(_DWORD *)(result + 24) = v13;
  *(_DWORD *)(v14 + 40) = v18;
  *(void *)(v14 + 32) = v17;
  if (++v9 != 8)
  {
    uint64_t v2 = v19;
    goto LABEL_14;
  }
  return v8 + 48 == (void)v19;
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(float *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  float v10 = a4;
  int v11 = a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(a1, a2, a3);
  v8.n128_u32[0] = *(_DWORD *)a4;
  if (*(float *)a4 > *(float *)a3)
  {
    __n128 v8 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v11, &v10);
    v8.n128_u32[0] = *(_DWORD *)v11;
    if (*(float *)v11 > *(float *)a2)
    {
      __n128 v8 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v12, &v11);
      v8.n128_u32[0] = *(_DWORD *)v12;
      if (*(float *)v12 > *a1) {
        v8.n128_u64[0] = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v13, &v12).n128_u64[0];
      }
    }
  }
  return v8.n128_f64[0];
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(float *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  float v15 = a2;
  long long v16 = a1;
  uint64_t v13 = a4;
  uint64_t v14 = a3;
  uint64_t v12 = a5;
  v10.n128_f64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(a1, a2, a3, a4);
  v10.n128_u32[0] = *(_DWORD *)a5;
  if (*(float *)a5 > *(float *)a4)
  {
    __n128 v10 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v13, &v12);
    v10.n128_u32[0] = *(_DWORD *)v13;
    if (*(float *)v13 > *(float *)a3)
    {
      __n128 v10 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v14, &v13);
      v10.n128_u32[0] = *(_DWORD *)v14;
      if (*(float *)v14 > *(float *)a2)
      {
        __n128 v10 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v15, &v14);
        v10.n128_u32[0] = *(_DWORD *)v15;
        if (*(float *)v15 > *a1) {
          v10.n128_u64[0] = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v16, &v15).n128_u64[0];
        }
      }
    }
  }
  return v10.n128_f64[0];
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(uint64_t *a1, uint64_t *a2, float *a3, uint64_t a4)
{
  int v18 = (float *)a1;
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v7 = a1;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 48;
    if ((char *)a2 - (char *)a1 >= 49)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t)&a1[6 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v7, a4, v9, v12);
        v12 -= 48;
        --v11;
      }
      while (v11);
    }
    uint64_t v17 = (float *)v6;
    if ((float *)v6 == a3)
    {
      a3 = (float *)v6;
    }
    else
    {
      uint64_t v13 = (float *)v6;
      do
      {
        if (*v13 > *v18)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v17, (uint64_t **)&v18);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v18, a4, v9, (uint64_t)v18);
          uint64_t v13 = v17;
        }
        v13 += 12;
        uint64_t v17 = v13;
      }
      while (v13 != a3);
      uint64_t v7 = (uint64_t *)v18;
      uint64_t v8 = v6 - (void)v18;
    }
    if (v8 >= 49)
    {
      unint64_t v14 = v8 / 0x30uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v7, v6, a4, v14);
        v6 -= 48;
      }
      while (v14-- > 2);
      return (uint64_t)v17;
    }
  }
  return (uint64_t)a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 4)))
    {
      uint64_t v9 = (0x5555555555555556 * ((a4 - a1) >> 4)) | 1;
      uint64_t v10 = a1 + 48 * v9;
      if (0x5555555555555556 * ((a4 - a1) >> 4) + 2 < a3 && *(float *)v10 > *(float *)(v10 + 48))
      {
        v10 += 48;
        uint64_t v9 = 0x5555555555555556 * ((a4 - a1) >> 4) + 2;
      }
      float v11 = *(float *)a4;
      if (*(float *)v10 <= *(float *)a4)
      {
        int v12 = *(_DWORD *)(a4 + 4);
        long long v21 = *(_OWORD *)(a4 + 8);
        uint64_t v20 = *(void *)(a4 + 24);
        uint64_t v13 = *(void *)(a4 + 32);
        *(void *)(a4 + 16) = 0;
        *(void *)(a4 + ++*(_DWORD *)(result + 24) = 0;
        *(void *)(a4 + 8) = 0;
        uint64_t v22 = v13;
        int v23 = *(_DWORD *)(a4 + 40);
        do
        {
          uint64_t v14 = v5;
          uint64_t v5 = v10;
          float v15 = (void *)(v10 + 8);
          *(void *)uint64_t v14 = *(void *)v10;
          std::vector<int>::__move_assign(v14 + 8, (__n128 *)(v10 + 8));
          uint64_t v16 = *(void *)(v5 + 32);
          *(_DWORD *)(v14 + 40) = *(_DWORD *)(v5 + 40);
          *(void *)(v14 + 32) = v16;
          if (v7 < v9) {
            break;
          }
          uint64_t v17 = 2 * v9;
          uint64_t v9 = (2 * v9) | 1;
          uint64_t v10 = a1 + 48 * v9;
          uint64_t v18 = v17 + 2;
          if (v18 < a3 && *(float *)v10 > *(float *)(v10 + 48))
          {
            v10 += 48;
            uint64_t v9 = v18;
          }
        }
        while (*(float *)v10 <= v11);
        *(float *)uint64_t v5 = v11;
        *(_DWORD *)(v5 + 4) = v12;
        long long v19 = *(void **)(v5 + 8);
        if (v19)
        {
          *(void *)(v5 + 16) = v19;
          operator delete(v19);
          void *v15 = 0;
          v15[1] = 0;
          void v15[2] = 0;
        }
        *(_OWORD *)(v5 + 8) = v21;
        *(void *)(v5 + ++*(_DWORD *)(result + 24) = v20;
        *(void *)(v5 + 32) = v22;
        *(_DWORD *)(v5 + 40) = v23;
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *(void *)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v18 = *(void *)(a1 + 32);
    int v19 = *(_DWORD *)(a1 + 40);
    float v11 = (void *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, a3, a4);
    int v12 = v11;
    if (v11 == (void *)(a2 - 48))
    {
      void *v11 = v8;
      uint64_t v17 = v11 + 1;
      uint64_t v16 = (void *)v11[1];
      if (v16)
      {
        v12[2] = v16;
        operator delete(v16);
        void *v17 = 0;
        v12[2] = 0;
        void v12[3] = 0;
      }
      v12[1] = v7;
      v12[2] = v10;
      void v12[3] = v9;
      v12[4] = v18;
      *((_DWORD *)v12 + 10) = v19;
    }
    else
    {
      void *v11 = *(void *)(a2 - 48);
      std::vector<int>::__move_assign((uint64_t)(v11 + 1), (__n128 *)(a2 - 40));
      uint64_t v13 = *(void *)(a2 - 16);
      *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 - 8);
      v12[4] = v13;
      uint64_t v14 = (uint64_t)(v12 + 6);
      *(void *)(a2 - 48) = v8;
      float v15 = *(void **)(a2 - 40);
      if (v15)
      {
        *(void *)(a2 - 32) = v15;
        operator delete(v15);
        *(void *)(a2 - 40) = 0;
        *(void *)(a2 - 32) = 0;
        *(void *)(a2 - ++*(_DWORD *)(result + 24) = 0;
      }
      *(void *)(a2 - 40) = v7;
      *(void *)(a2 - 32) = v10;
      *(void *)(a2 - ++*(_DWORD *)(result + 24) = v9;
      *(void *)(a2 - 16) = v18;
      *(_DWORD *)(a2 - 8) = v19;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, v14, a3, 0xAAAAAAAAAAAAAAABLL * ((v14 - a1) >> 4));
    }
  }
}

void sub_1B2054474(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    *(void *)a3 = *(void *)v4;
    std::vector<int>::__move_assign(a3 + 8, (__n128 *)(v4 + 8));
    uint64_t v6 = *(void *)(v4 + 32);
    *(_DWORD *)(a3 + 40) = *(_DWORD *)(v4 + 40);
    *(void *)(a3 + 32) = v6;
    a3 += 48;
    v4 += 48;
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  float v11 = &v10[56 * v4];
  v14[0] = v10;
  v14[1] = v11;
  float v15 = v11;
  uint64_t v16 = &v10[56 * v9];
  *(_OWORD *)float v11 = *(_OWORD *)a2;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v11 + 2, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  *(_OWORD *)&v10[56 * v4 + 40] = *(_OWORD *)(a2 + 40);
  v15 += 56;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B205463C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    uint64_t v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 40) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      uint64_t v7 = *((void *)&v13 + 1) - 56;
      *((void *)&v13 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    uint64_t v8 = v13;
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(void *)(v1 + ++*(_DWORD *)(result + 24) = v3;
      operator delete(v3);
    }
    v1 += 56;
  }
}

uint64_t std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 56;
    uint64_t v5 = *(void **)(v2 - 40);
    if (v5)
    {
      *(void *)(v2 - 32) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 56;
    }
  }
}

void std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    uint64_t v4 = *(void **)(i - 40);
    if (v4)
    {
      *(void *)(i - 32) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,false>(std::vector<int> *a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9 = (long long *)a2;
  uint64_t v10 = (long long *)a1;
  unint64_t v24 = a2;
  uint64_t v25 = a1;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = (char *)v9 - (char *)v10;
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * (((char *)v9 - (char *)v10) >> 3);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v22 = *((float *)v9 - 14);
          unint64_t v24 = (unint64_t)v9 - 56;
          if (v22 < *(float *)v10) {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((long long **)&v25, (uint64_t *)&v24);
          }
          break;
        case 3uLL:
          unint64_t v24 = (unint64_t)v9 - 56;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v10, (long long *)((char *)v10 + 56), (float *)v9 - 14);
          break;
        case 4uLL:
          unint64_t v24 = (unint64_t)v9 - 56;
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v10, (long long *)((char *)v10 + 56), v10 + 7, (unsigned __int32 *)v9 - 14);
          break;
        case 5uLL:
          unint64_t v24 = (unint64_t)v9 - 56;
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v10, (long long *)((char *)v10 + 56), v10 + 7, (long long *)((char *)v10 + 168), (unsigned __int32 *)v9 - 14);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 1343)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v10, (uint64_t)v9);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v10, (uint64_t)v9);
      }
      return;
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    float v15 = (float *)v9 - 14;
    if ((unint64_t)v12 >= 0x1C01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v10, (long long *)((char *)v10 + 56 * (v13 >> 1)), v15);
      uint64_t v16 = 56 * v14;
      uint64_t v17 = 56 * v14 - 56;
      unint64_t v18 = v24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((long long *)&v25[2].__end_, (long long *)((char *)v25 + v17), (float *)(v24 - 112));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((long long *)&v25[4].__end_cap_, (long long *)((char *)&v25[2].__end_ + v16), (float *)(v18 - 168));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((long long *)((char *)v25 + v17), (long long *)((char *)v25 + v16), (float *)((char *)&v25[2].__end_ + v16));
      uint64_t v23 = (uint64_t)v25 + v16;
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((long long **)&v25, &v23);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((long long *)((char *)v10 + 56 * (v13 >> 1)), v10, v15);
    }
    if (a5)
    {
      unint64_t v9 = (long long *)v24;
    }
    else
    {
      unint64_t v9 = (long long *)v24;
      if (*(float *)&v25[-3].__end_cap_.__value_ >= *(float *)&v25->__begin_)
      {
        uint64_t v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,std::__less<void,void> &>(v25, v24);
        goto LABEL_22;
      }
    }
    unint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,std::__less<void,void> &>(v25, (unint64_t)v9);
    if ((v20 & 1) == 0) {
      goto LABEL_20;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((long long *)v25, v19);
    uint64_t v10 = (long long *)(v19 + 56);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((long long *)(v19 + 56), (uint64_t)v9))
    {
      if (v21) {
        return;
      }
      unint64_t v24 = v19;
      uint64_t v10 = (long long *)v25;
      unint64_t v9 = (long long *)v19;
    }
    else
    {
      if (!v21)
      {
LABEL_20:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,false>(v25, v19, a3, -i, a5 & 1);
        uint64_t v10 = (long long *)(v19 + 56);
LABEL_22:
        a5 = 0;
        uint64_t v25 = (std::vector<int> *)v10;
        a4 = -i;
        goto LABEL_2;
      }
      uint64_t v25 = (std::vector<int> *)(v19 + 56);
    }
  }
  if (v10 != v9) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((float *)v10, v9, v9, a3);
  }
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(long long **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = **a1;
  uint64_t v2 = *a1;
  long long v6 = (*a1)[1];
  char v5 = *a1 + 1;
  long long v10 = v6;
  uint64_t v7 = *((void *)v2 + 4);
  void *v5 = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  __n128 v11 = *(__n128 *)((char *)v2 + 40);
  long long v12 = v4;
  *uint64_t v2 = *(_OWORD *)v3;
  std::vector<int>::__move_assign((uint64_t)v5, (__n128 *)(v3 + 16));
  *(long long *)((char *)v2 + 40) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)uint64_t v3 = v12;
  uint64_t v8 = *(void **)(v3 + 16);
  if (v8)
  {
    *(void *)(v3 + ++*(_DWORD *)(result + 24) = v8;
    operator delete(v8);
  }
  *(_OWORD *)(v3 + 16) = v10;
  *(void *)(v3 + 32) = v7;
  __n128 result = v11;
  *(__n128 *)(v3 + 40) = v11;
  return result;
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 56;
    if (a1 + 56 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = a1;
      do
      {
        uint64_t v7 = v4;
        float v8 = *(float *)(v6 + 56);
        if (v8 < *(float *)v6)
        {
          uint64_t v20 = *(void *)(v6 + 60);
          int v21 = *(_DWORD *)(v6 + 68);
          uint64_t v9 = *(void *)(v6 + 72);
          long long v10 = *(_OWORD *)(v6 + 80);
          long long v11 = *(_OWORD *)(v6 + 96);
          *(void *)(v6 + 72) = 0;
          *(void *)(v6 + 80) = 0;
          *(void *)(v6 + 88) = 0;
          uint64_t v12 = v5;
          long long v18 = v10;
          long long v19 = v11;
          while (1)
          {
            uint64_t v13 = v12;
            uint64_t v14 = a1 + v12;
            *(_OWORD *)(a1 + v12 + 56) = *(_OWORD *)(a1 + v12);
            std::vector<int>::__move_assign(a1 + v12 + 72, (__n128 *)(a1 + v12 + 16));
            *(_OWORD *)(v14 + 96) = *(_OWORD *)(v14 + 40);
            if (!v13) {
              break;
            }
            uint64_t v12 = v13 - 56;
            if (v8 >= *(float *)(v14 - 56))
            {
              uint64_t v15 = a1 + v13;
              goto LABEL_10;
            }
          }
          uint64_t v15 = a1;
LABEL_10:
          *(float *)uint64_t v15 = v8;
          *(void *)(v15 + 4) = v20;
          *(_DWORD *)(v15 + 12) = v21;
          uint64_t v16 = *(void **)(v14 + 16);
          if (v16)
          {
            *(void *)(v15 + ++*(_DWORD *)(result + 24) = v16;
            operator delete(v16);
            uint64_t v17 = a1 + v13;
            *(void *)(v17 + ++*(_DWORD *)(result + 24) = 0;
            *(void *)(v17 + 32) = 0;
          }
          *(void *)(v14 + 16) = v9;
          *(_OWORD *)(v15 + ++*(_DWORD *)(result + 24) = v18;
          *(_OWORD *)(v14 + 40) = v19;
        }
        uint64_t v4 = v7 + 56;
        v5 += 56;
        uint64_t v6 = v7;
      }
      while (v7 + 56 != a2);
    }
  }
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result + 56;
    if (result + 56 != a2)
    {
      uint64_t v4 = result - 56;
      do
      {
        uint64_t v5 = v3;
        float v6 = *(float *)(result + 56);
        if (v6 < *(float *)result)
        {
          uint64_t v14 = *(void *)(result + 60);
          int v15 = *(_DWORD *)(result + 68);
          long long v7 = *(_OWORD *)(result + 72);
          uint64_t v8 = *(void *)(result + 88);
          *(void *)(result + 72) = 0;
          *(void *)(result + 80) = 0;
          *(void *)(result + 88) = 0;
          uint64_t v9 = v4;
          long long v12 = v7;
          long long v13 = *(_OWORD *)(result + 96);
          do
          {
            *(_OWORD *)(v9 + 112) = *(_OWORD *)(v9 + 56);
            std::vector<int>::__move_assign(v9 + 128, (__n128 *)(v9 + 72));
            *(_OWORD *)(v9 + 152) = *(_OWORD *)(v9 + 96);
            float v10 = *(float *)v9;
            v9 -= 56;
          }
          while (v6 < v10);
          *(float *)(v9 + 112) = v6;
          *(void *)(v9 + 116) = v14;
          *(_DWORD *)(v9 + 1++*(_DWORD *)(result + 24) = v15;
          long long v11 = *(void **)(v9 + 128);
          if (v11)
          {
            *(void *)(v9 + 136) = v11;
            operator delete(v11);
          }
          *(_OWORD *)(v9 + 128) = v12;
          *(void *)(v9 + 144) = v8;
          *(_OWORD *)(v9 + 152) = v13;
        }
        uint64_t v3 = v5 + 56;
        v4 += 56;
        __n128 result = v5;
      }
      while (v5 + 56 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(long long *a1, long long *a2, float *a3)
{
  float v10 = (float *)a1;
  uint64_t v8 = a3;
  uint64_t v9 = (float *)a2;
  float v3 = *(float *)a2;
  float v4 = *a3;
  if (*(float *)a2 < *(float *)a1)
  {
    if (v4 < v3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((long long **)&v10, (uint64_t *)&v8);
      return 1;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((long long **)&v10, (uint64_t *)&v9);
    if (*v8 >= *v9) {
      return 1;
    }
    uint64_t v5 = &v9;
    float v6 = &v8;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((long long **)v5, (uint64_t *)v6);
    return 2;
  }
  if (v4 < v3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((long long **)&v9, (uint64_t *)&v8);
    if (*v9 >= *v10) {
      return 1;
    }
    uint64_t v5 = &v10;
    float v6 = &v9;
    goto LABEL_9;
  }
  return 0;
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,std::__less<void,void> &>(std::vector<int> *this, unint64_t a2)
{
  unint64_t v20 = a2;
  float v3 = *(float *)&this->__begin_;
  long long v18 = *(std::vector<int>::pointer *)((char *)&this->__begin_ + 4);
  int end_high = HIDWORD(this->__end_);
  p_end_cap = &this->__end_cap_;
  long long v5 = *(_OWORD *)&this->__end_cap_.__value_;
  std::vector<int>::pointer end = this[1].__end_;
  this->__end_cap_.__value_ = 0;
  this[1].__begin_ = 0;
  this[1].__end_ = 0;
  long long v17 = *(_OWORD *)&this[1].__end_cap_.__value_;
  if (v3 >= *(float *)(a2 - 56))
  {
    uint64_t v9 = (std::vector<int> *)((char *)this + 56);
    do
    {
      long long v7 = v9;
      if ((unint64_t)v9 >= a2) {
        break;
      }
      uint64_t v9 = (std::vector<int> *)((char *)v9 + 56);
    }
    while (v3 >= *(float *)&v7->__begin_);
  }
  else
  {
    long long v7 = this;
    do
    {
      float v8 = *(float *)&v7[2].__end_;
      long long v7 = (std::vector<int> *)((char *)v7 + 56);
    }
    while (v3 >= v8);
  }
  int v21 = v7;
  long long v16 = v5;
  if ((unint64_t)v7 < a2)
  {
    do
    {
      float v10 = *(float *)(a2 - 56);
      a2 -= 56;
    }
    while (v3 < v10);
    unint64_t v20 = a2;
  }
  if ((unint64_t)v7 < a2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((long long **)&v21, (uint64_t *)&v20);
      long long v7 = v21;
      do
      {
        float v11 = *(float *)&v7[2].__end_;
        long long v7 = (std::vector<int> *)((char *)v7 + 56);
      }
      while (v3 >= v11);
      int v21 = v7;
      unint64_t v12 = v20;
      do
      {
        float v13 = *(float *)(v12 - 56);
        v12 -= 56;
      }
      while (v3 < v13);
      unint64_t v20 = v12;
    }
    while ((unint64_t)v7 < v12);
  }
  if (&v7[-3].__end_cap_ != (std::__compressed_pair<int *> *)this)
  {
    *(_OWORD *)&this->__begin_ = *(_OWORD *)&v7[-3].__end_cap_.__value_;
    std::vector<int>::__move_assign((uint64_t)p_end_cap, (__n128 *)&v7[-2].__end_);
    *(_OWORD *)&this[1].__end_cap_.__value_ = *(_OWORD *)&v7[-1].__end_;
  }
  *(float *)&v7[-3].__end_cap_.__value_ = v3;
  HIDWORD(v7[-2].__begin_) = end_high;
  *(int **)((char *)&v7[-3].__end_cap_.__value_ + 4) = v18;
  uint64_t v14 = v7[-2].__end_;
  if (v14)
  {
    v7[-2].__end_cap_.__value_ = v14;
    operator delete(v14);
  }
  *(_OWORD *)&v7[-2].__end_ = v16;
  v7[-1].__begin_ = end;
  *(_OWORD *)&v7[-1].__end_ = v17;
  return (long long *)v21;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,std::__less<void,void> &>(std::vector<int> *this, unint64_t a2)
{
  uint64_t v4 = 0;
  float v5 = *(float *)&this->__begin_;
  uint64_t v22 = *(uint64_t *)((char *)&this->__begin_ + 4);
  int end_high = HIDWORD(this->__end_);
  p_end_cap = &this->__end_cap_;
  long long v7 = *(_OWORD *)&this->__end_cap_.__value_;
  std::vector<int>::pointer end = this[1].__end_;
  this->__end_cap_.__value_ = 0;
  this[1].__begin_ = 0;
  this[1].__end_ = 0;
  uint64_t v9 = &this[1].__end_cap_;
  long long v20 = v7;
  long long v21 = *(_OWORD *)&this[1].__end_cap_.__value_;
  do
  {
    float v10 = *(float *)((char *)&this[2].__end_ + v4);
    v4 += 56;
  }
  while (v10 < v5);
  float v11 = (char *)this + v4;
  uint64_t v25 = (long long *)((char *)this + v4);
  if (v4 == 56)
  {
    do
    {
      if ((unint64_t)v11 >= a2) {
        break;
      }
      float v13 = *(float *)(a2 - 56);
      a2 -= 56;
    }
    while (v13 >= v5);
  }
  else
  {
    do
    {
      float v12 = *(float *)(a2 - 56);
      a2 -= 56;
    }
    while (v12 >= v5);
  }
  unint64_t v24 = a2;
  uint64_t v14 = (long long *)((char *)this + v4);
  if ((unint64_t)v11 < a2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v25, (uint64_t *)&v24);
      uint64_t v14 = v25;
      do
      {
        float v15 = *((float *)v14 + 14);
        uint64_t v14 = (long long *)((char *)v14 + 56);
      }
      while (v15 < v5);
      uint64_t v25 = v14;
      unint64_t v16 = v24;
      do
      {
        float v17 = *(float *)(v16 - 56);
        v16 -= 56;
      }
      while (v17 >= v5);
      unint64_t v24 = v16;
    }
    while ((unint64_t)v14 < v16);
  }
  if ((std::vector<int> *)((char *)v14 - 56) != this)
  {
    *(_OWORD *)&this->__begin_ = *(long long *)((char *)v14 - 56);
    std::vector<int>::__move_assign((uint64_t)p_end_cap, (__n128 *)((char *)v14 - 40));
    *(_OWORD *)&v9->__value_ = *(v14 - 1);
  }
  *((float *)v14 - 14) = v5;
  *((_DWORD *)v14 - 11) = end_high;
  *(void *)((char *)v14 - 52) = v22;
  long long v18 = (void *)*((void *)v14 - 5);
  if (v18)
  {
    *((void *)v14 - 4) = v18;
    operator delete(v18);
  }
  *(long long *)((char *)v14 - 40) = v20;
  *((void *)v14 - 3) = end;
  *(v14 - 1) = v21;
  return (uint64_t)v14 - 56;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(long long *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v23 = (char *)a2;
  unint64_t v24 = a1;
  uint64_t v4 = (a2 - (uint64_t)a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(float *)(a2 - 56);
      uint64_t v23 = (char *)(a2 - 56);
      if (v6 < *(float *)a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v24, (uint64_t *)&v23);
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (long long *)((char *)a1 + 56), (float *)(a2 - 56));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (long long *)((char *)a1 + 56), a1 + 7, (unsigned __int32 *)(a2 - 56));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (long long *)((char *)a1 + 56), a1 + 7, (long long *)((char *)a1 + 168), (unsigned __int32 *)(a2 - 56));
      return 1;
    default:
      long long v7 = (float *)(a1 + 7);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (long long *)((char *)a1 + 56), (float *)a1 + 28);
      float v8 = (char *)a1 + 168;
      if ((long long *)((char *)a1 + 168) == (long long *)v2) {
        return 1;
      }
      int v9 = 0;
      float v10 = a1 + 13;
      break;
  }
  while (1)
  {
    float v11 = *(float *)v8;
    if (*(float *)v8 < *v7) {
      break;
    }
LABEL_15:
    long long v7 = (float *)v8;
    float v10 = (long long *)((char *)v10 + 56);
    v8 += 56;
    if (v8 == (char *)v2) {
      return 1;
    }
  }
  uint64_t v21 = *(void *)(v8 + 4);
  int v22 = *((_DWORD *)v8 + 3);
  uint64_t v12 = *((void *)v8 + 2);
  long long v13 = *(_OWORD *)(v8 + 24);
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = 0;
  *((void *)v8 + 4) = 0;
  long long v19 = v13;
  long long v20 = *(_OWORD *)(v8 + 40);
  uint64_t v14 = (__n128 *)v10;
  float v15 = v24;
  while (1)
  {
    unint64_t v16 = (float *)v14;
    float v17 = (long long *)&v14[-6];
    *(__n128 *)((char *)v14 - 40) = v14[-6];
    std::vector<int>::__move_assign((uint64_t)&v14[-2].n128_i64[1], v14 - 5);
    *(_OWORD *)unint64_t v16 = *(_OWORD *)(v16 - 14);
    if (v17 == v15) {
      break;
    }
    uint64_t v14 = (__n128 *)(v16 - 14);
    if (v11 >= *(v16 - 38))
    {
      float v15 = (long long *)(v16 - 24);
      break;
    }
  }
  *(float *)float v15 = v11;
  *(void *)((char *)v15 + 4) = v21;
  *((_DWORD *)v15 + 3) = v22;
  long long v18 = (void *)*((void *)v16 - 10);
  if (v18)
  {
    *((void *)v15 + 3) = v18;
    operator delete(v18);
    *((void *)v16 - 9) = 0;
    *((void *)v16 - 8) = 0;
  }
  *((void *)v16 - 10) = v12;
  *(long long *)((char *)v15 + ++*(_DWORD *)(result + 24) = v19;
  *(_OWORD *)(v16 - 14) = v20;
  if (++v9 != 8)
  {
    uint64_t v2 = (uint64_t)v23;
    goto LABEL_15;
  }
  return v8 + 56 == v23;
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(long long *a1, long long *a2, long long *a3, unsigned __int32 *a4)
{
  uint64_t v12 = a2;
  long long v13 = a1;
  float v10 = a4;
  float v11 = a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, a2, (float *)a3);
  v8.n128_u32[0] = *a4;
  if (*(float *)a4 < *(float *)a3)
  {
    __n128 v8 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v11, (uint64_t *)&v10);
    v8.n128_u32[0] = *(_DWORD *)v11;
    if (*(float *)v11 < *(float *)a2)
    {
      __n128 v8 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v12, (uint64_t *)&v11);
      v8.n128_u32[0] = *(_DWORD *)v12;
      if (*(float *)v12 < *(float *)a1) {
        v8.n128_u64[0] = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v13, (uint64_t *)&v12).n128_u64[0];
      }
    }
  }
  return v8.n128_f64[0];
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(long long *a1, long long *a2, long long *a3, long long *a4, unsigned __int32 *a5)
{
  float v15 = a2;
  unint64_t v16 = a1;
  long long v13 = a4;
  uint64_t v14 = a3;
  uint64_t v12 = a5;
  v10.n128_f64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, a2, a3, (unsigned __int32 *)a4);
  v10.n128_u32[0] = *a5;
  if (*(float *)a5 < *(float *)a4)
  {
    __n128 v10 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v13, (uint64_t *)&v12);
    v10.n128_u32[0] = *(_DWORD *)v13;
    if (*(float *)v13 < *(float *)a3)
    {
      __n128 v10 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v14, (uint64_t *)&v13);
      v10.n128_u32[0] = *(_DWORD *)v14;
      if (*(float *)v14 < *(float *)a2)
      {
        __n128 v10 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v15, (uint64_t *)&v14);
        v10.n128_u32[0] = *(_DWORD *)v15;
        if (*(float *)v15 < *(float *)a1) {
          v10.n128_u64[0] = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v16, (uint64_t *)&v15).n128_u64[0];
        }
      }
    }
  }
  return v10.n128_f64[0];
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(float *a1, long long *a2, long long *a3, uint64_t a4)
{
  long long v18 = a1;
  if (a1 != (float *)a2)
  {
    float v6 = a2;
    long long v7 = a1;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 56;
    if ((char *)a2 - (char *)a1 >= 57)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t)&a1[14 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v7, a4, v9, v12);
        v12 -= 56;
        --v11;
      }
      while (v11);
    }
    float v17 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      long long v13 = v6;
      do
      {
        if (*(float *)v13 < *v18)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v17, (uint64_t *)&v18);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v18, a4, v9, (uint64_t)v18);
          long long v13 = v17;
        }
        long long v13 = (long long *)((char *)v13 + 56);
        float v17 = v13;
      }
      while (v13 != a3);
      long long v7 = v18;
      uint64_t v8 = (char *)v6 - (char *)v18;
    }
    if (v8 >= 57)
    {
      unint64_t v14 = v8 / 0x38uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v7, (uint64_t)v6, a4, v14);
        float v6 = (long long *)((char *)v6 - 56);
      }
      while (v14-- > 2);
      return v17;
    }
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    float v5 = (__n128 *)a4;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * ((a4 - a1) >> 3))
    {
      int64_t v9 = (0xDB6DB6DB6DB6DB6ELL * ((a4 - a1) >> 3)) | 1;
      unint64_t v10 = (__n128 *)(a1 + 56 * v9);
      if ((uint64_t)(0xDB6DB6DB6DB6DB6ELL * ((a4 - a1) >> 3) + 2) < a3 && v10->n128_f32[0] < v10[3].n128_f32[2])
      {
        unint64_t v10 = (__n128 *)((char *)v10 + 56);
        int64_t v9 = 0xDB6DB6DB6DB6DB6ELL * ((a4 - a1) >> 3) + 2;
      }
      float v11 = *(float *)a4;
      if (v10->n128_f32[0] >= *(float *)a4)
      {
        unint64_t v21 = *(void *)(a4 + 4);
        unsigned __int32 v22 = *(_DWORD *)(a4 + 12);
        __n128 v12 = *(__n128 *)(a4 + 16);
        unint64_t v13 = *(void *)(a4 + 32);
        *(void *)(a4 + 16) = 0;
        *(void *)(a4 + ++*(_DWORD *)(result + 24) = 0;
        *(void *)(a4 + 32) = 0;
        __n128 v19 = v12;
        __n128 v20 = *(__n128 *)(a4 + 40);
        do
        {
          unint64_t v14 = v5;
          float v5 = v10;
          *unint64_t v14 = *v10;
          float v15 = v10 + 1;
          std::vector<int>::__move_assign((uint64_t)&v14[1], v10 + 1);
          *(__n128 *)((char *)v14 + 40) = *(__n128 *)((char *)v5 + 40);
          if (v7 < v9) {
            break;
          }
          uint64_t v16 = 2 * v9;
          int64_t v9 = (2 * v9) | 1;
          unint64_t v10 = (__n128 *)(a1 + 56 * v9);
          int64_t v17 = v16 + 2;
          if (v17 < a3 && v10->n128_f32[0] < v10[3].n128_f32[2])
          {
            unint64_t v10 = (__n128 *)((char *)v10 + 56);
            int64_t v9 = v17;
          }
        }
        while (v10->n128_f32[0] >= v11);
        v5->n128_f32[0] = v11;
        v5->n128_u32[3] = v22;
        *(unint64_t *)((char *)v5->n128_u64 + 4) = v21;
        long long v18 = (void *)v5[1].n128_u64[0];
        if (v18)
        {
          v5[1].n128_u64[1] = (unint64_t)v18;
          operator delete(v18);
          v15->n128_u64[0] = 0;
          v15->n128_u64[1] = 0;
          v15[1].n128_u64[0] = 0;
        }
        v5[1] = v19;
        v5[2].n128_u64[0] = v13;
        *(__n128 *)((char *)v5 + 40) = v20;
      }
    }
  }
}

__n128 std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    long long v7 = *(_OWORD *)a1;
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
    *(void *)(a1 + 32) = 0;
    __n128 v19 = *(__n128 *)(a1 + 40);
    long long v20 = v7;
    uint64_t v11 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, a3, a4);
    uint64_t v12 = v11;
    unint64_t v13 = (_OWORD *)(a2 - 56);
    unint64_t v14 = (void *)(v11 + 16);
    if (v11 == a2 - 56)
    {
      *(_OWORD *)uint64_t v11 = v20;
      long long v18 = *(void **)(v11 + 16);
      if (v18)
      {
        *(void *)(v12 + ++*(_DWORD *)(result + 24) = v18;
        operator delete(v18);
        *unint64_t v14 = 0;
        v14[1] = 0;
        void v14[2] = 0;
      }
      *(void *)(v12 + 16) = v8;
      *(void *)(v12 + ++*(_DWORD *)(result + 24) = v9;
      *(void *)(v12 + 32) = v10;
      __n128 result = v19;
      *(__n128 *)(v12 + 40) = v19;
    }
    else
    {
      *(_OWORD *)uint64_t v11 = *v13;
      std::vector<int>::__move_assign(v11 + 16, (__n128 *)(a2 - 40));
      *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 - 16);
      uint64_t v15 = v12 + 56;
      *unint64_t v13 = v20;
      uint64_t v16 = *(void **)(a2 - 40);
      if (v16)
      {
        *(void *)(a2 - 32) = v16;
        operator delete(v16);
        *(void *)(a2 - 40) = 0;
        *(void *)(a2 - 32) = 0;
        *(void *)(a2 - ++*(_DWORD *)(result + 24) = 0;
      }
      *(void *)(a2 - 40) = v8;
      *(void *)(a2 - 32) = v9;
      *(void *)(a2 - ++*(_DWORD *)(result + 24) = v10;
      *(__n128 *)(a2 - 16) = v19;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, v15, a3, 0x6DB6DB6DB6DB6DB7 * ((v15 - a1) >> 3));
    }
  }
  return result;
}

void sub_1B2055B58(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = (_OWORD *)a1;
    a1 += 56 * v5 + 56;
    uint64_t v9 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v10 = v9 + 2;
    if (v10 < a3 && *(float *)a1 < *(float *)(a1 + 56))
    {
      a1 += 56;
      uint64_t v5 = v10;
    }
    *uint64_t v8 = *(_OWORD *)a1;
    std::vector<int>::__move_assign((uint64_t)(v8 + 1), (__n128 *)(a1 + 16));
    *(_OWORD *)((char *)v8 + 40) = *(_OWORD *)(a1 + 40);
  }
  while (v5 <= v7);
  return a1;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = a1 + 56 * (v4 >> 1);
    uint64_t v8 = a2 - 56;
    float v9 = *(float *)(a2 - 56);
    if (*(float *)v7 < v9)
    {
      uint64_t v17 = *(void *)(a2 - 52);
      int v18 = *(_DWORD *)(a2 - 44);
      long long v10 = *(_OWORD *)(a2 - 40);
      uint64_t v11 = *(void *)(a2 - 24);
      *(void *)(a2 - 40) = 0;
      *(void *)(a2 - 32) = 0;
      *(void *)(a2 - ++*(_DWORD *)(result + 24) = 0;
      long long v15 = v10;
      long long v16 = *(_OWORD *)(a2 - 16);
      do
      {
        uint64_t v12 = (_OWORD *)v8;
        uint64_t v8 = v7;
        *uint64_t v12 = *(_OWORD *)v7;
        unint64_t v13 = (void *)(v7 + 16);
        std::vector<int>::__move_assign((uint64_t)(v12 + 1), (__n128 *)(v7 + 16));
        *(_OWORD *)((char *)v12 + 40) = *(_OWORD *)(v8 + 40);
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = a1 + 56 * v6;
      }
      while (*(float *)v7 < v9);
      *(float *)uint64_t v8 = v9;
      *(void *)(v8 + 4) = v17;
      *(_DWORD *)(v8 + 12) = v18;
      unint64_t v14 = *(void **)(v8 + 16);
      if (v14)
      {
        *(void *)(v8 + ++*(_DWORD *)(result + 24) = v14;
        operator delete(v14);
        *unint64_t v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
      }
      *(_OWORD *)(v8 + 16) = v15;
      *(void *)(v8 + 32) = v11;
      *(_OWORD *)(v8 + 40) = v16;
    }
  }
}

void *std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    long long v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  long long v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    *long long v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    long long v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B2055F5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Hyp::Hyp(uint64_t a1, int a2, int a3, int a4, char a5, uint64_t a6, float a7, float a8)
{
  *(_DWORD *)a1 = *(_DWORD *)a6;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>((void *)(a1 + 8), *(void **)(a6 + 8), *(void **)(a6 + 16), (uint64_t)(*(void *)(a6 + 16) - *(void *)(a6 + 8)) >> 4);
  float v16 = *(float *)(a6 + 44);
  float v17 = *(float *)(a6 + 48);
  *(void *)(a1 + 56) = 0;
  size_t v18 = (void **)(a1 + 56);
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_DWORD *)(a1 + 40) = a4;
  *(float *)(a1 + 44) = v16 + a7;
  *(float *)(a1 + 48) = v17 + a8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::unordered_map<int,std::vector<int>>::unordered_map(a1 + 80, a6 + 80);
  std::unordered_map<int,int>::unordered_map(a1 + 120, a6 + 120);
  std::unordered_map<int,int>::unordered_map(a1 + 160, a6 + 160);
  *(void *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 200) = a5;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 2++*(_DWORD *)(result + 24) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 232) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 272) = 0;
  uint64_t v19 = *(void *)(a6 + 56);
  if ((unint64_t)(*(void *)(a6 + 64) - v19) <= 4)
  {
    uint64_t v23 = *(_DWORD **)(a1 + 64);
  }
  else
  {
    long long v20 = (void *)(a1 + 72);
    unint64_t v21 = *(_DWORD **)(a1 + 64);
    unint64_t v22 = 1;
    do
    {
      if ((unint64_t)v21 >= *v20)
      {
        unint64_t v24 = *v18;
        uint64_t v25 = ((char *)v21 - (unsigned char *)*v18) >> 2;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = *v20 - (void)v24;
        if (v27 >> 1 > v26) {
          unint64_t v26 = v27 >> 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v28);
          unint64_t v24 = *(_DWORD **)(a1 + 56);
          unint64_t v21 = *(_DWORD **)(a1 + 64);
        }
        else
        {
          uint64_t v29 = 0;
        }
        unsigned int v30 = &v29[4 * v25];
        *(_DWORD *)unsigned int v30 = *(_DWORD *)(v19 + 4 * v22);
        uint64_t v23 = v30 + 4;
        while (v21 != v24)
        {
          int v31 = *--v21;
          *((_DWORD *)v30 - 1) = v31;
          v30 -= 4;
        }
        *(void *)(a1 + 56) = v30;
        *(void *)(a1 + 64) = v23;
        *(void *)(a1 + 72) = &v29[4 * v28];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *unint64_t v21 = *(_DWORD *)(v19 + 4 * v22);
        uint64_t v23 = v21 + 1;
      }
      *(void *)(a1 + 64) = v23;
      ++v22;
      uint64_t v19 = *(void *)(a6 + 56);
      unint64_t v21 = v23;
    }
    while (v22 < (*(void *)(a6 + 64) - v19) >> 2);
  }
  unint64_t v32 = *(void *)(a1 + 72);
  if ((unint64_t)v23 >= v32)
  {
    float v34 = *v18;
    uint64_t v35 = ((char *)v23 - (unsigned char *)*v18) >> 2;
    unint64_t v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v37 = v32 - (void)v34;
    if (v37 >> 1 > v36) {
      unint64_t v36 = v37 >> 1;
    }
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v38 = v36;
    }
    if (v38)
    {
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v38);
      float v34 = *(_DWORD **)(a1 + 56);
      uint64_t v23 = *(_DWORD **)(a1 + 64);
    }
    else
    {
      uint64_t v39 = 0;
    }
    BOOL v40 = &v39[4 * v35];
    uint64_t v41 = &v39[4 * v38];
    *(_DWORD *)BOOL v40 = a4;
    int v33 = v40 + 4;
    while (v23 != v34)
    {
      int v42 = *--v23;
      *((_DWORD *)v40 - 1) = v42;
      v40 -= 4;
    }
    *(void *)(a1 + 56) = v40;
    *(void *)(a1 + 64) = v33;
    *(void *)(a1 + 72) = v41;
    if (v34) {
      operator delete(v34);
    }
  }
  else
  {
    *uint64_t v23 = a4;
    int v33 = v23 + 1;
  }
  *(void *)(a1 + 64) = v33;
  return a1;
}

void sub_1B2056258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, void **a16)
{
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a11);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(a13);
  uint64_t v19 = *v17;
  if (*v17)
  {
    *(void *)(v16 + 64) = v19;
    operator delete(v19);
  }
  a16 = a14;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B2056338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<int,std::vector<int>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    std::__hash_table<std::__hash_value_type<int,std::vector<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::pair<int const,std::vector<int>> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_1B20563B8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::vector<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::pair<int const,std::vector<int>> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    unint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      for (__n128 result = *v8; result; __n128 result = (uint64_t *)*result)
      {
        unint64_t v10 = result[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)result + 4) == v5) {
            return result;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<int,std::vector<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<int>>>>::__construct_node_hash<std::pair<int const,std::vector<int>> const&>(a1, *a2, a3, (uint64_t)v19);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  float v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v19[0] = *v17;
    void *v17 = v19[0];
  }
  else
  {
    *(void *)v19[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v19[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v19[0])
    {
      unint64_t v18 = *(void *)(*(void *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18) = v19[0];
    }
  }
  __n128 result = (uint64_t *)v19[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1B20565E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<int,std::vector<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<int>>>>::__construct_node_hash<std::pair<int const,std::vector<int>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *(_DWORD *)a3;
  v8[4] = 0;
  v8[5] = 0;
  void v8[3] = 0;
  __n128 result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 3, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B205668C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Hyp::~Hyp(uint64_t a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 232);
  unint64_t v4 = (void **)(a1 + 208);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 160);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 120);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(a1 + 80);
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  unint64_t v4 = (void **)(a1 + 8);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

TFileObject *compileAlt(const TFileObject *a1, TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a1 + 10))
  {
    if (TLexicon::checkName((uint64_t)a3, *((int **)a1 + 3), 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      loggableFileObject((uint64_t *)a1);
      int v43 = v58.i8[15];
      uint64_t v44 = v57.__vftable;
      loggableUnicode(*((unsigned int **)a1 + 3), __p);
      __n128 v46 = &v57;
      if (v43 < 0) {
        __n128 v46 = (std::exception *)v44;
      }
      if (v55 >= 0) {
        __n128 v47 = __p;
      }
      else {
        __n128 v47 = (void **)__p[0];
      }
      tknPrintf("Error: %s'%s' is an invalid token name.\n", v45, v46, v47);
      if (v55 < 0) {
        operator delete(__p[0]);
      }
      if (v58.i8[15] < 0) {
        operator delete(v57.__vftable);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(&v57, (long long *)__p);
      v57.__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
      if (v59 >= 0) {
        int32x2_t v48 = &v58;
      }
      else {
        int32x2_t v48 = (int64x2_t *)v58.i64[0];
      }
      conditionalAssert(v48->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 155);
      TException::~TException(&v57);
      if (v55 < 0) {
        operator delete(__p[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v57, "");
      TException::TException(exception, (long long *)&v57);
      void *exception = &unk_1F0A33B90;
    }
    if (*(unsigned char *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone(a3, *((__int32 **)a1 + 3)))
    {
      loggableFileObject((uint64_t *)a1);
      int v8 = v58.i8[15];
      uint64_t v9 = v57.__vftable;
      loggableUnicode(*((unsigned int **)a1 + 3), __p);
      float v11 = &v57;
      if (v8 < 0) {
        float v11 = (std::exception *)v9;
      }
      if (v55 >= 0) {
        float v12 = __p;
      }
      else {
        float v12 = (void **)__p[0];
      }
      tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v10, v11, v12);
      if (v55 < 0) {
        operator delete(__p[0]);
      }
      if (v58.i8[15] < 0) {
        operator delete(v57.__vftable);
      }
    }
    unint64_t v14 = (const __int32 *)*((void *)a1 + 3);
    BOOL v13 = (const __int32 **)((char *)a1 + 24);
    size_t v15 = wcslen(v14);
    if ((v15 + 1) >> 62) {
      uint64_t v16 = -1;
    }
    else {
      uint64_t v16 = 4 * (v15 + 1);
    }
    float v17 = (__int32 *)TAllocator::allocate(a4, v16);
    wcscpy(v17, *v13);
    uint64_t v18 = TAllocator::allocate(a4, 48);
    *(_DWORD *)(v18 + 40) = 1;
    *(void *)(v18 + ++*(_DWORD *)(result + 24) = v17;
    *(void *)(v18 + 32) = 0;
    *(void *)uint64_t v18 = 0;
    *(void *)(v18 + 8) = dword_1B258B7E4;
    *(void *)(v18 + 16) = 0;
    goto LABEL_64;
  }
  v57.__vftable = (std::exception_vtbl *)&unk_1B258BEB8;
  int64x2_t v58 = vdupq_n_s64(1uLL);
  uint64_t v59 = -1;
  if (TFileObject::verify((uint64_t)a1, (uint64_t)&v57, 1uLL, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v52, "");
    TException::TException(__p, (long long *)v52);
    __p[0] = &unk_1F0A33B90;
    if (v56 >= 0) {
      uint64_t v50 = (const char *)&__p[1];
    }
    else {
      uint64_t v50 = (const char *)__p[1];
    }
    conditionalAssert(v50, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 88);
    TException::~TException((std::exception *)__p);
    if (v53 < 0) {
      operator delete(v52[0]);
    }
    unsigned int v51 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v51, (long long *)__p);
    *unsigned int v51 = &unk_1F0A33B90;
  }
  uint64_t v19 = *((void *)a1 + 3);
  if (!v19)
  {
    uint64_t v18 = 0;
    goto LABEL_62;
  }
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  char v21 = 0;
  do
  {
    if (TFileObject::verify((TFileObject *)v19, 0, 0)) {
      goto LABEL_32;
    }
    if (TLexicon::checkName((uint64_t)a3, *(int **)(v19 + 24), 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      loggableFileObject((uint64_t *)v19);
      int v22 = v55;
      uint64_t v23 = (void **)__p[0];
      loggableUnicode(*(unsigned int **)(v19 + 24), v52);
      uint64_t v25 = __p;
      if (v22 < 0) {
        uint64_t v25 = v23;
      }
      if (v53 >= 0) {
        unint64_t v26 = v52;
      }
      else {
        unint64_t v26 = (void **)v52[0];
      }
      tknPrintf("Error: %s'%s' is an invalid token name.\n", v24, v25, v26);
      if (v53 < 0) {
        operator delete(v52[0]);
      }
      if (v55 < 0) {
        operator delete(__p[0]);
      }
LABEL_32:
      char v21 = 1;
      goto LABEL_33;
    }
    if (*(unsigned char *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone(a3, *(__int32 **)(v19 + 24)))
    {
      loggableFileObject((uint64_t *)v19);
      int v27 = v55;
      unint64_t v28 = (void **)__p[0];
      loggableUnicode(*(unsigned int **)(v19 + 24), v52);
      unsigned int v30 = __p;
      if (v27 < 0) {
        unsigned int v30 = v28;
      }
      if (v53 >= 0) {
        int v31 = v52;
      }
      else {
        int v31 = (void **)v52[0];
      }
      tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v29, v30, v31);
      if (v53 < 0) {
        operator delete(v52[0]);
      }
      if (v55 < 0) {
        operator delete(__p[0]);
      }
    }
    size_t v32 = wcslen(*(const __int32 **)(v19 + 24));
    if ((v32 + 1) >> 62) {
      uint64_t v33 = -1;
    }
    else {
      uint64_t v33 = 4 * (v32 + 1);
    }
    float v34 = (__int32 *)TAllocator::allocate(a4, v33);
    wcscpy(v34, *(const __int32 **)(v19 + 24));
    uint64_t v35 = TAllocator::allocate(a4, 48);
    *(_DWORD *)(v35 + 40) = 1;
    *(void *)(v35 + ++*(_DWORD *)(result + 24) = v34;
    *(void *)(v35 + 32) = 0;
    *(void *)uint64_t v35 = 0;
    *(void *)(v35 + 8) = dword_1B258B7E4;
    *(void *)(v35 + 16) = 0;
    if (v20) {
      *(void *)(v20 + 16) = v35;
    }
    if (!v18) {
      uint64_t v18 = v35;
    }
    uint64_t v20 = v35;
LABEL_33:
    uint64_t v19 = *(void *)(v19 + 16);
  }
  while (v19);
  if (v21)
  {
    std::string::basic_string[abi:ne180100]<0>(v52, "");
    TException::TException(__p, (long long *)v52);
    __p[0] = &unk_1F0A33B90;
    if (v56 >= 0) {
      unint64_t v36 = (const char *)&__p[1];
    }
    else {
      unint64_t v36 = (const char *)__p[1];
    }
    conditionalAssert(v36, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 130);
    TException::~TException((std::exception *)__p);
    if (v53 < 0) {
      operator delete(v52[0]);
    }
    uint64_t v37 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v37, (long long *)__p);
    *uint64_t v37 = &unk_1F0A33B90;
  }
LABEL_62:
  if (*(void *)(v18 + 16))
  {
    uint64_t v38 = TAllocator::allocate(a4, 48);
    *(_DWORD *)(v38 + 40) = 0;
    *(void *)(v38 + ++*(_DWORD *)(result + 24) = v18;
    *(void *)(v38 + 32) = 0;
    *(void *)uint64_t v38 = 0;
    *(void *)(v38 + 8) = dword_1B258BC2C;
    *(void *)(v38 + 16) = 0;
    uint64_t v18 = v38;
  }
LABEL_64:
  if (!a2) {
    return (TFileObject *)v18;
  }
  if (!wcscmp(*((const __int32 **)a2 + 1), dword_1B258B7FC))
  {
    uint64_t v40 = *((void *)a2 + 3);
    do
    {
      uint64_t v41 = v40;
      uint64_t v40 = *(void *)(v40 + 16);
    }
    while (v40);
    *(void *)(v41 + 16) = v18;
  }
  else
  {
    *((void *)a2 + 2) = v18;
    uint64_t v39 = TAllocator::allocate(a4, 48);
    *(_DWORD *)(v39 + 40) = 0;
    *(void *)(v39 + ++*(_DWORD *)(result + 24) = a2;
    *(void *)(v39 + 32) = 0;
    *(void *)(v39 + 8) = dword_1B258B7FC;
    *(void *)(v39 + 16) = 0;
    a2 = (TFileObject *)v39;
    *(void *)uint64_t v39 = 0;
  }
  return a2;
}

void sub_1B2056EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::exception a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
  {
    operator delete(__p);
    if ((v30 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

void TArrayObject::TArrayObject(TArrayObject *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  *((void *)this + 1) = 0;
  int v22 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  unint64_t v5 = (void **)((char *)this + 32);
  *(void *)this = &unk_1F0A33690;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  char v28 = 0;
  uint64_t v6 = *((void *)a2 + 3);
  if (!v6) {
    return;
  }
  do
  {
    if (!wcscmp(*(const __int32 **)(v6 + 8), dword_1B258B80C))
    {
      if (*((char *)this + 31) < 0)
      {
        if (!*((void *)this + 2))
        {
LABEL_25:
          MEMORY[0x1B3EA7C30](v22, *(void *)(v6 + 24));
          goto LABEL_33;
        }
      }
      else if (!*((unsigned char *)this + 31))
      {
        goto LABEL_25;
      }
      loggableFileObject((uint64_t *)v6);
      if (v26 >= 0) {
        size_t v15 = __p;
      }
      else {
        size_t v15 = (void **)__p[0];
      }
      tknPrintf("Error: %sRedefinition\n", v14, v15);
    }
    else
    {
      unsigned int v7 = **(_DWORD **)(v6 + 8);
      {
        operator new();
      }
      if ((int)v7 < 48
        || v7 >= 0x3A
        && (v7 < 0x660
         || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7) == -1))
      {
        loggableFileObject((uint64_t *)v6);
        if (v26 >= 0) {
          BOOL v13 = __p;
        }
        else {
          BOOL v13 = (void **)__p[0];
        }
        tknPrintf("Error: %sInvalid attribute\n", v12, v13);
      }
      else
      {
        int v8 = *(unsigned int **)(v6 + 8);
        {
          operator new();
        }
        unsigned int v9 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v8, (BOOL *)&v28);
        if (!v28 && v9 >> 4 < 0x271)
        {
          uint64_t v10 = v9;
          float v11 = (TFileObject **)*((void *)this + 4);
          if (v9 >= (unint64_t)((uint64_t)(*((void *)this + 5) - (void)v11) >> 3))
          {
            std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v5, 2 * (v9 + 1));
            __p[0] = 0;
            std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)v5, v10 + 1, __p);
            float v11 = (TFileObject **)*v5;
          }
          *((void *)*v5 + v10) = compileAlt((const TFileObject *)v6, v11[v10], a3, a4);
          goto LABEL_33;
        }
        loggableFileObject((uint64_t *)v6);
        if (v26 >= 0) {
          float v17 = __p;
        }
        else {
          float v17 = (void **)__p[0];
        }
        tknPrintf("Error: %sBad index (not an integer or greater than 10000)\n", v16, v17);
      }
    }
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    char v28 = 1;
LABEL_33:
    uint64_t v6 = *(void *)(v6 + 16);
  }
  while (v6);
  if (v28)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "");
    TException::TException(__p, (long long *)v23);
    __p[0] = &unk_1F0A33B90;
    if (v27 >= 0) {
      uint64_t v18 = (const char *)&__p[1];
    }
    else {
      uint64_t v18 = (const char *)__p[1];
    }
    conditionalAssert(v18, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 286);
    TException::~TException((std::exception *)__p);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(exception, (long long *)__p);
    void *exception = &unk_1F0A33B90;
  }
}

void sub_1B20573B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  MEMORY[0x1B3EA8670](v27, 0x1070C40ADD13FEBLL);
  int v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 40) = v30;
    operator delete(v30);
  }
  *(void *)uint64_t v26 = a11;
  if (*(char *)(v26 + 31) < 0) {
    operator delete(*a14);
  }
  _Unwind_Resume(a1);
}

uint64_t TArrayObject::checkNoGap(TArrayObject *this, unint64_t a2, unint64_t a3)
{
  if (a2 >= a3)
  {
    char v6 = 0;
  }
  else
  {
    unint64_t v4 = a2;
    char v6 = 0;
    unsigned int v7 = (unsigned int **)((char *)this + 8);
    do
    {
      uint64_t v8 = *((void *)this + 4);
      if (v4 >= (*((void *)this + 5) - v8) >> 3 || !*(void *)(v8 + 8 * v4))
      {
        unsigned int v9 = (unsigned int *)v7;
        if (*((char *)this + 31) < 0) {
          unsigned int v9 = *v7;
        }
        loggableUnicode(v9, __p);
        if (v14 >= 0) {
          float v11 = __p;
        }
        else {
          float v11 = (void **)__p[0];
        }
        tknPrintf("Error: Array '%s' : Attribute '%llu' : Missing declaration\n", v10, v11, v4);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        char v6 = 1;
      }
      ++v4;
    }
    while (a3 != v4);
  }
  return v6 & 1;
}

void sub_1B205758C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TDigitObject::TDigitObject(TDigitObject *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  *((void *)this + 1) = 0;
  float v17 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  uint64_t v8 = (void *)((char *)this + 32);
  *(void *)this = &unk_1F0A33728;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  uint64_t v23 = &unk_1B258B820;
  int64x2_t v24 = vdupq_n_s64(1uLL);
  uint64_t v25 = -1;
  uint64_t v26 = &unk_1B258B828;
  int64x2_t v27 = v24;
  uint64_t v28 = -1;
  uint64_t v29 = &unk_1B258B830;
  int64x2_t v30 = v24;
  uint64_t v31 = -1;
  size_t v32 = &unk_1B258B838;
  int64x2_t v33 = v24;
  uint64_t v34 = -1;
  uint64_t v35 = &unk_1B258B840;
  int64x2_t v36 = v24;
  uint64_t v37 = -1;
  uint64_t v38 = &unk_1B258B848;
  int64x2_t v39 = v24;
  uint64_t v40 = -1;
  uint64_t v41 = &unk_1B258B850;
  int64x2_t v42 = v24;
  uint64_t v43 = -1;
  uint64_t v44 = &unk_1B258B858;
  int64x2_t v45 = v24;
  uint64_t v46 = -1;
  __n128 v47 = &unk_1B258B860;
  uint64_t v48 = 1;
  long long v49 = xmmword_1B255E5F0;
  uint64_t v50 = &unk_1B258B868;
  uint64_t v51 = 1;
  long long v52 = xmmword_1B255E5F0;
  char v53 = dword_1B258B870;
  uint64_t v54 = 3;
  long long v55 = xmmword_1B255E5F0;
  char v56 = dword_1B258B88C;
  uint64_t v57 = 3;
  long long v58 = xmmword_1B255E5F0;
  uint64_t v59 = dword_1B258B80C;
  uint64_t v60 = 0;
  long long v61 = xmmword_1B255E5F0;
  int v9 = TFileObject::verify((uint64_t)a2, (uint64_t)&v23, 0xDuLL, 1);
  BOOL v22 = v9;
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v20, (long long *)__p);
    v20[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
    if (v21 >= 0) {
      BOOL v13 = (std::exception_vtbl *)&v20[1];
    }
    else {
      BOOL v13 = v20[1].__vftable;
    }
    conditionalAssert((const char *)v13, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 422);
    TException::~TException(v20);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v20, "");
    TException::TException(exception, (long long *)v20);
    void *exception = &unk_1F0A33B90;
  }
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  v20[0].__vftable = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)v8, 0xAuLL, v20);
  for (uint64_t i = *((void *)a2 + 3); i; uint64_t i = *(void *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), dword_1B258B80C))
    {
      BOOL v22 = TFileObject::verify((TFileObject *)i, 0, 0);
      MEMORY[0x1B3EA7C30](v17, *(void *)(i + 24));
    }
    else if (!wcscmp(*(const __int32 **)(i + 8), dword_1B258B870))
    {
      *((void *)this + 7) = compileAlt((const TFileObject *)i, *((TFileObject **)this + 7), a3, a4);
    }
    else if (!wcscmp(*(const __int32 **)(i + 8), dword_1B258B88C))
    {
      *((void *)this + 8) = compileAlt((const TFileObject *)i, *((TFileObject **)this + 8), a3, a4);
    }
    else
    {
      float v11 = *(unsigned int **)(i + 8);
      {
        operator new();
      }
      unsigned int v12 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11, &v22);
      *(void *)(*v8 + 8 * v12) = compileAlt((const TFileObject *)i, *(TFileObject **)(*v8 + 8 * v12), a3, a4);
    }
  }
  if (v22)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v20, (long long *)__p);
    v20[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
    if (v21 >= 0) {
      size_t v15 = (std::exception_vtbl *)&v20[1];
    }
    else {
      size_t v15 = v20[1].__vftable;
    }
    conditionalAssert((const char *)v15, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 453);
    TException::~TException(v20);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v16 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v20, "");
    TException::TException(v16, (long long *)v20);
    *uint64_t v16 = &unk_1F0A33B90;
  }
}

void sub_1B2057ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  MEMORY[0x1B3EA8670](a10, 0x1070C40ADD13FEBLL);
  int64x2_t v27 = *v25;
  if (*v25)
  {
    *(void *)(v24 + 40) = v27;
    operator delete(v27);
  }
  *(void *)uint64_t v24 = a11;
  if (*(char *)(v24 + 31) < 0) {
    operator delete(*a12);
  }
  _Unwind_Resume(a1);
}

const char *TDigitObject::build(const char *result, unsigned int *a2, TVertex *a3, TVertex *a4, TGraph *this, TLexicon *a6)
{
  uint64_t v30 = (uint64_t)result;
  unsigned int v6 = *a2;
  if (*a2)
  {
    uint64_t v10 = a2;
    do
    {
      {
        operator new();
      }
      int DigitExtended = v6 - 48;
      if ((int)v6 < 48) {
        goto LABEL_8;
      }
      if (v6 <= 0x39) {
        goto LABEL_9;
      }
      if (v6 < 0x660) {
LABEL_8:
      }
        int DigitExtended = -1;
      else {
        int DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6);
      }
LABEL_9:
      unsigned int v12 = *v10;
      if (*v10)
      {
        unint64_t v13 = 0;
        char v14 = v10;
        size_t v15 = v10 + 1;
        while (1)
        {
          {
            operator new();
          }
          int v16 = v12 - 48;
          if ((int)v12 < 48) {
            goto LABEL_16;
          }
          if (v12 <= 0x39) {
            goto LABEL_17;
          }
          if (v12 < 0x660) {
LABEL_16:
          }
            int v16 = -1;
          else {
            int v16 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v12);
          }
LABEL_17:
          if (v16 != DigitExtended)
          {
            unint64_t v17 = v13;
            goto LABEL_24;
          }
          unint64_t v17 = v13 + 1;
          unsigned int v12 = v15[v13++];
          if (!v12) {
            goto LABEL_24;
          }
        }
      }
      char v14 = v10;
      unint64_t v17 = 0;
LABEL_24:
      uint64_t v18 = *(void *)(*(void *)(v30 + 32) + 8 * DigitExtended);
      if (*(void *)(v30 + 64) && (v17 > 4 || v17 == 3))
      {
        char v19 = (TVertex *)TGraph::addVertex(this, 0);
        addSequence(*(const __int32 ***)(v30 + 64), a3, v19, this, a6, 0, 0, 0);
        uint64_t v10 = v14 + 3;
        unsigned int v20 = v14[3];
        goto LABEL_44;
      }
      if (v17 >= 2 && *(void *)(v30 + 56))
      {
        char v19 = (TVertex *)TGraph::addVertex(this, 0);
        addSequence(*(const __int32 ***)(v30 + 56), a3, v19, this, a6, 0, 0, 0);
        uint64_t v10 = v14 + 2;
        unsigned int v20 = v14[2];
LABEL_44:
        char v21 = a4;
        if (v20) {
          char v21 = (TVertex *)TGraph::addVertex(this, 0);
        }
LABEL_48:
        __n128 result = addSequence((const __int32 **)v18, v19, v21, this, a6, 0, 0, 0);
        goto LABEL_49;
      }
      uint64_t v28 = &v14[v17];
      char v21 = a4;
      if (*v28) {
        char v21 = (TVertex *)TGraph::addVertex(this, 0);
      }
      __n128 result = (const char *)wcscmp(*(const __int32 **)(v18 + 8), dword_1B258B7FC);
      if (result)
      {
        if (v17)
        {
          unint64_t v22 = v17 - 1;
          if (v17 == 1)
          {
            char v19 = a3;
            uint64_t v10 = &v14[v17];
          }
          else
          {
            uint64_t v10 = &v14[v17];
            do
            {
              char v19 = (TVertex *)TGraph::addVertex(this, 0);
              addSequence((const __int32 **)v18, a3, v19, this, a6, 0, 0, 0);
              a3 = v19;
              --v22;
            }
            while (v22);
          }
          goto LABEL_48;
        }
      }
      else
      {
        for (uint64_t i = *(long long **)(v18 + 24); i; uint64_t i = (long long *)*((void *)i + 2))
        {
          unint64_t v24 = v17;
          for (j = a3; v24; --v24)
          {
            uint64_t v26 = v21;
            if (v24 != 1) {
              uint64_t v26 = (TVertex *)TGraph::addVertex(this, 0);
            }
            long long v27 = i[1];
            long long v31 = *i;
            long long v32 = v27;
            long long v33 = i[2];
            *(void *)&long long v32 = 0;
            __n128 result = addSequence((const __int32 **)&v31, j, v26, this, a6, 0, 0, 0);
            j = v26;
          }
        }
      }
      uint64_t v10 = v28;
LABEL_49:
      unsigned int v6 = *v10;
      a3 = v21;
    }
    while (*v10);
  }
  return result;
}

void sub_1B2057F88(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

const char *addSequence(const __int32 **a1, TVertex *a2, TVertex *a3, TGraph *a4, TLexicon *a5, const char *a6, const char *a7, const char *a8)
{
  unint64_t v13 = (const TFileObject *)a1;
  if (wcscmp(a1[1], dword_1B258BC2C) || (unint64_t v13 = (const TFileObject *)*((void *)v13 + 3)) != 0)
  {
    while (!wcscmp(*((const __int32 **)v13 + 1), dword_1B258BC3C))
    {
LABEL_37:
      unint64_t v13 = (const TFileObject *)*((void *)v13 + 2);
      if (!v13) {
        return a7;
      }
    }
    uint64_t v14 = *((void *)v13 + 2);
    size_t v15 = a3;
    int v16 = a7;
    if (v14)
    {
      if (!wcscmp(*(const __int32 **)(v14 + 8), dword_1B258BC3C))
      {
        do
        {
          uint64_t v18 = v14;
          uint64_t v14 = *(void *)(v14 + 16);
          if (!v14)
          {
            size_t v15 = a3;
            goto LABEL_7;
          }
        }
        while (!wcscmp(*(const __int32 **)(v14 + 8), dword_1B258BC3C));
        if (a6)
        {
          BOOL v27 = 0;
          char v19 = *(unsigned int **)(v18 + 24);
          {
            operator new();
          }
          unsigned int v20 = &a6[TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v19, &v27)];
          while (v20 > a7)
          {
            int v21 = *--v20;
            uint64_t v22 = v21;
            if (v21 < 0)
            {
              if (!__maskrune(v22, 0x4000uLL))
              {
LABEL_22:
                int v16 = v20 + 1;
                if (v20 + 1 >= a8) {
                  break;
                }
                size_t v15 = (TVertex *)TGraph::addVertex(a4, (char *)v20 + 1);
                if (a8) {
                  goto LABEL_9;
                }
                goto LABEL_24;
              }
            }
            else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v22 + 60) & 0x4000) == 0)
            {
              goto LABEL_22;
            }
          }
        }
      }
      size_t v15 = (TVertex *)TGraph::addVertex(a4, 0);
LABEL_7:
      int v16 = a7;
    }
    if (a8)
    {
LABEL_9:
      if (*((void *)v15 + 3)) {
        unint64_t v17 = (const char *)*((void *)v15 + 3);
      }
      else {
        unint64_t v17 = a8;
      }
    }
    else
    {
LABEL_24:
      unint64_t v17 = 0;
    }
    if (!wcscmp(*((const __int32 **)v13 + 1), dword_1B258B7E4))
    {
      addToken((__int32 **)v13, a2, v15, a4, a5);
    }
    else
    {
      if (!wcscmp(*((const __int32 **)v13 + 1), dword_1B258B7FC))
      {
        uint64_t v23 = addAlt(v13, a2, v15, a4, a5, a6, a7, v17);
        goto LABEL_32;
      }
      if (!wcscmp(*((const __int32 **)v13 + 1), dword_1B258BDC8))
      {
        addPattern((uint64_t)v13, (uint64_t)a2, (uint64_t)v15, (uint64_t)a4, (uint64_t)a5);
        goto LABEL_34;
      }
      if (!wcscmp(*((const __int32 **)v13 + 1), dword_1B258BC2C))
      {
        uint64_t v23 = (const char *)addSequence(v13, a2, v15, a4, a5, a6, a7, v17);
LABEL_32:
        a7 = v23;
      }
    }
LABEL_34:
    if (v16 > a7) {
      a7 = v16;
    }
    a2 = v15;
    goto LABEL_37;
  }
  return a7;
}

void sub_1B20582A0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TRomanObject::TRomanObject(TRomanObject *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  *((void *)this + 1) = 0;
  unsigned int v7 = (char *)this + 8;
  *((void *)this + 4) = 0;
  uint64_t v8 = (void *)((char *)this + 32);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1F0A33780;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  unint64_t v17 = &unk_1B258B8A8;
  int64x2_t v18 = vdupq_n_s64(1uLL);
  uint64_t v19 = -1;
  unsigned int v20 = &unk_1B258B8B0;
  int64x2_t v21 = v18;
  uint64_t v22 = -1;
  uint64_t v23 = &unk_1B258B8B8;
  int64x2_t v24 = v18;
  uint64_t v25 = -1;
  uint64_t v26 = &unk_1B258B8C0;
  int64x2_t v27 = v18;
  uint64_t v28 = -1;
  uint64_t v29 = &unk_1B258B8C8;
  int64x2_t v30 = v18;
  uint64_t v31 = -1;
  long long v32 = &unk_1B258B8D0;
  int64x2_t v33 = v18;
  uint64_t v34 = -1;
  uint64_t v35 = &unk_1B258B8D8;
  int64x2_t v36 = v18;
  uint64_t v37 = -1;
  uint64_t v38 = dword_1B258B80C;
  long long v39 = xmmword_1B255FA20;
  uint64_t v40 = -1;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v17, 8uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v15, (long long *)__p);
    v15[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
    if (v16 >= 0) {
      float v11 = (std::exception_vtbl *)&v15[1];
    }
    else {
      float v11 = v15[1].__vftable;
    }
    conditionalAssert((const char *)v11, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 594);
    TException::~TException(v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "");
    TException::TException(exception, (long long *)v15);
    void *exception = &unk_1F0A33B90;
  }
  v15[0].__vftable = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)v8, 7uLL, v15);
  for (uint64_t i = *((void *)a2 + 3); i; uint64_t i = *(void *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), dword_1B258B80C))
    {
      MEMORY[0x1B3EA7C30](v7, *(void *)(i + 24));
    }
    else
    {
      int64_t v10 = (char *)wcschr(TRomanObject::TRomanObject(TFileObject const*,TLexicon *,TAllocator *)::pszLetters, **(_DWORD **)(i + 8))- (char *)TRomanObject::TRomanObject(TFileObject const*,TLexicon *,TAllocator *)::pszLetters;
      *(void *)(*v8 + 8 * (v10 >> 2)) = compileAlt((const TFileObject *)i, *(TFileObject **)(*v8 + 2 * v10), a3, a4);
    }
  }
}

void sub_1B20585D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      uint64_t v28 = *v24;
      if (*v24)
      {
        *(void *)(v21 + 40) = v28;
        operator delete(v28);
      }
      *(void *)uint64_t v21 = v23;
      if (*(char *)(v21 + 31) < 0) {
        operator delete(*v22);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t TRomanObject::build(uint64_t a1, unsigned int *a2, TVertex *a3, TVertex *a4, TGraph *a5, TLexicon *a6)
{
  BOOL v24 = 0;
  {
    operator new();
  }
  unsigned int v12 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, &v24);
  unsigned int v20 = v22;
  long long v21 = xmmword_1B25607E0;
  char v23 = 1;
  uint64_t result = arabicToRoman(v12, (uint64_t)&v20);
  if (*((void *)&v21 + 1) >= (unint64_t)v21)
  {
    if (v23)
    {
      v25[0] = 0;
      uint64_t result = TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), v25, 1uLL);
      char v14 = v20;
      --*((void *)&v21 + 1);
    }
    else
    {
      char v14 = v20;
      if ((void)v21) {
        *(_DWORD *)&v20[4 * v21 - 4] = 0;
      }
    }
  }
  else
  {
    char v14 = v20;
    *(_DWORD *)&v20[4 * *((void *)&v21 + 1)] = 0;
  }
  for (uint64_t i = v14 + 4; ; ++i)
  {
    __int32 v16 = *(i - 1);
    if (!v16) {
      break;
    }
    unint64_t v17 = wcschr(TRomanObject::build(wchar_t const*,TVertex *,TVertex *,TGraph *,TLexicon *)const::pszRoman, v16);
    int64x2_t v18 = a4;
    if (*i) {
      int64x2_t v18 = (TVertex *)TGraph::addVertex(a5, 0);
    }
    uint64_t result = (uint64_t)addSequence(*(const __int32 ***)(*(void *)(a1 + 32)+ 2* ((char *)v17- (char *)TRomanObject::build(wchar_t const*,TVertex *,TVertex *,TGraph *,TLexicon *)const::pszRoman)), a3, v18, a5, a6, 0, 0, 0);
    a3 = v18;
  }
  if (v23)
  {
    uint64_t result = (uint64_t)v20;
    if (v20 != v22 && v20 != 0) {
      return MEMORY[0x1B3EA8630]();
    }
  }
  return result;
}

void sub_1B2058864(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TCountingObject::TCountingObject(uint64_t a1, uint64_t a2, uint64_t *a3, TLexicon *a4, TAllocator *a5)
{
  unsigned int v7 = (uint64_t *)a2;
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = 0;
  uint64_t v55 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)a1 = &unk_1F0A33CD8;
  uint64_t v62 = dword_1B258B920;
  long long v63 = xmmword_1B257E4D0;
  uint64_t v64 = -1;
  v65 = dword_1B258B93C;
  long long v66 = xmmword_1B257E4D0;
  uint64_t v67 = -1;
  uint64_t v68 = dword_1B258B958;
  long long v69 = xmmword_1B257E4D0;
  uint64_t v70 = -1;
  unint64_t v71 = dword_1B258B974;
  long long v72 = xmmword_1B257E4D0;
  uint64_t v73 = -1;
  uint64_t v74 = dword_1B258B994;
  long long v75 = xmmword_1B255FA20;
  uint64_t v76 = -1;
  __int32 v77 = dword_1B258B9CC;
  long long v78 = xmmword_1B255FA20;
  uint64_t v79 = -1;
  float32x2_t v80 = dword_1B258B9E4;
  long long v81 = xmmword_1B255FA20;
  uint64_t v82 = -1;
  BOOL v83 = dword_1B258BA20;
  long long v84 = xmmword_1B2563B40;
  uint64_t v85 = -1;
  BOOL v86 = dword_1B258BA40;
  uint64_t v87 = 2;
  long long v88 = xmmword_1B255E5F0;
  float v89 = dword_1B258BA84;
  uint64_t v90 = 2;
  long long v91 = xmmword_1B255E5F0;
  v92 = dword_1B258BAA0;
  uint64_t v93 = 2;
  long long v94 = xmmword_1B255E5F0;
  float v95 = dword_1B258BAE0;
  uint64_t v96 = 2;
  long long v97 = xmmword_1B255E5F0;
  v98 = dword_1B258B80C;
  uint64_t v99 = 0;
  long long v100 = xmmword_1B255E5F0;
  int v9 = TFileObject::verify(a2, (uint64_t)&v62, 0xDuLL, 1);
  char v61 = v9;
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v56, "");
    TException::TException(__p, (long long *)v56);
    __p[0] = &unk_1F0A33B90;
    if (v60 >= 0) {
      __n128 v47 = (const char *)&__p[1];
    }
    else {
      __n128 v47 = (const char *)__p[1];
    }
    conditionalAssert(v47, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 740);
    TException::~TException((std::exception *)__p);
    if (v57 < 0) {
      operator delete(v56[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(exception, (long long *)__p);
    void *exception = &unk_1F0A33B90;
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  int64_t v10 = (TFileObject **)(a1 + 96);
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 3;
  *(unsigned char *)(a1 + 136) = 0;
  uint64_t v11 = v7[3];
  if (v11)
  {
    char v53 = v7;
    int v12 = 0;
    while (1)
    {
      if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1B258B80C))
      {
        MEMORY[0x1B3EA7C30](v55, *(void *)(v11 + 24));
      }
      else
      {
        if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1B258B920))
        {
          char v14 = *v10;
          size_t v15 = compileAlt((const TFileObject *)v11, *v10, a4, a5);
          if (!v14) {
            ++v12;
          }
          *int64_t v10 = v15;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1B258B93C))
        {
          __int32 v16 = *(TFileObject **)(a1 + 104);
          unint64_t v17 = compileAlt((const TFileObject *)v11, v16, a4, a5);
          if (!v16) {
            ++v12;
          }
          *(void *)(a1 + 104) = v17;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1B258B958))
        {
          int64x2_t v18 = *(TFileObject **)(a1 + 112);
          uint64_t v19 = compileAlt((const TFileObject *)v11, v18, a4, a5);
          if (!v18) {
            ++v12;
          }
          *(void *)(a1 + 112) = v19;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1B258B974))
        {
          unsigned int v20 = *(TFileObject **)(a1 + 120);
          long long v21 = compileAlt((const TFileObject *)v11, v20, a4, a5);
          if (!v20) {
            ++v12;
          }
          *(void *)(a1 + 120) = v21;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1B258B994))
        {
          if (TFileObject::verify((TFileObject *)v11, 0, 0))
          {
            std::string::basic_string[abi:ne180100]<0>(v56, "");
            TException::TException(__p, (long long *)v56);
            __p[0] = &unk_1F0A33B90;
            if (v60 >= 0) {
              uint64_t v51 = (const char *)&__p[1];
            }
            else {
              uint64_t v51 = (const char *)__p[1];
            }
            conditionalAssert(v51, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 787);
            TException::~TException((std::exception *)__p);
            if (v57 < 0) {
              operator delete(v56[0]);
            }
            long long v52 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            TException::TException(v52, (long long *)__p);
            *long long v52 = &unk_1F0A33B90;
          }
          if (wcscmp(*(const __int32 **)(v11 + 24), (const __int32 *)&unk_1B258B8A8))
          {
            uint64_t v22 = *(unsigned int **)(v11 + 24);
            {
              operator new();
            }
            unsigned int v23 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v22, (BOOL *)&v61);
            *(void *)(a1 + 128) = v23;
            if (v23 - 2 <= 2 && !v61) {
              goto LABEL_50;
            }
            loggableFileObject((uint64_t *)v11);
            uint64_t v25 = __p;
            if (v59 < 0) {
              uint64_t v25 = (void **)__p[0];
            }
            tknPrintf("Error: %sValue is out of range, must be 2, 3, 4, or I\n", v24, v25);
            if (v59 < 0) {
              operator delete(__p[0]);
            }
            BOOL v26 = 1;
            goto LABEL_49;
          }
          *(void *)(a1 + 128) = 7;
          *(unsigned char *)(a1 + 136) = 1;
        }
        else
        {
          if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1B258B9CC))
          {
            uint64_t Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(void *)(a1 + 32) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1B258B9E4))
          {
            uint64_t Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(void *)(a1 + 40) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1B258BA20))
          {
            uint64_t Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(void *)(a1 + 48) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1B258BA40))
          {
            uint64_t Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(void *)(a1 + 56) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1B258BA84))
          {
            uint64_t Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(void *)(a1 + 64) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1B258BAA0))
          {
            uint64_t Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(void *)(a1 + 72) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1B258BAE0))
          {
            uint64_t Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(void *)(a1 + 80) = Array;
LABEL_48:
            BOOL v26 = v61 | (Array == 0);
LABEL_49:
            char v61 = v26;
          }
        }
      }
LABEL_50:
      uint64_t v11 = *(void *)(v11 + 16);
      if (!v11)
      {
        BOOL v27 = v12 < 2;
        unsigned int v7 = v53;
        if (!v27)
        {
          loggableFileObject(v53);
          if (v59 >= 0) {
            uint64_t v29 = __p;
          }
          else {
            uint64_t v29 = (void **)__p[0];
          }
          tknPrintf("Error: %sAttributes EnxAnd, ItaAnd, NldAnd, and ZhoZero are exclusive\n", v28, v29);
          if (v59 < 0) {
            operator delete(__p[0]);
          }
          char v61 = 1;
        }
        break;
      }
    }
  }
  *(void *)(a1 + 88) = 0;
  int64x2_t v30 = *(const TArrayObject **)(a1 + 32);
  if (v30)
  {
    uint64_t v31 = *(const TArrayObject **)(a1 + 40);
    if (v31)
    {
      unint64_t v32 = (((uint64_t)(*((void *)v31 + 5) - *((void *)v31 + 4)) >> 3)
           / (unint64_t)(10 * *(void *)(a1 + 128))
           + 2)
          * *(void *)(a1 + 128);
      *(void *)(a1 + 88) = v32;
      if (*(unsigned char *)(a1 + 136)) {
        *(void *)(a1 + 88) = v32 - 2;
      }
      char v33 = TCountingObject::checkChunk((TCountingObject *)a1, (const TFileObject *)v7, v30, v31);
      v61 |= v33;
      char v34 = TCountingObject::checkMagnitude((TCountingObject *)a1, (const TFileObject *)v7, *(const TArrayObject **)(a1 + 40));
      v61 |= v34;
    }
  }
  uint64_t v35 = *(const TArrayObject **)(a1 + 48);
  if (v35)
  {
    int64x2_t v36 = *(const TArrayObject **)(a1 + 56);
    if (v36)
    {
      unint64_t v37 = (((uint64_t)(*((void *)v36 + 5) - *((void *)v36 + 4)) >> 3)
           / (unint64_t)(10 * *(void *)(a1 + 128))
           + 2)
          * *(void *)(a1 + 128);
      if (*(unsigned char *)(a1 + 136)) {
        v37 -= 2;
      }
      if (v37 >= *(void *)(a1 + 88)) {
        unint64_t v37 = *(void *)(a1 + 88);
      }
      *(void *)(a1 + 88) = v37;
      char v38 = TCountingObject::checkChunk((TCountingObject *)a1, (const TFileObject *)v7, v35, v36);
      v61 |= v38;
      char v39 = TCountingObject::checkMagnitude((TCountingObject *)a1, (const TFileObject *)v7, *(const TArrayObject **)(a1 + 56));
      v61 |= v39;
    }
  }
  uint64_t v40 = *(const TArrayObject **)(a1 + 64);
  if (v40 && (uint64_t v41 = *(const TArrayObject **)(a1 + 72)) != 0)
  {
    unint64_t v42 = (((uint64_t)(*((void *)v41 + 5) - *((void *)v41 + 4)) >> 3)
         / (unint64_t)(10 * *(void *)(a1 + 128))
         + 2)
        * *(void *)(a1 + 128);
    if (*(unsigned char *)(a1 + 136)) {
      v42 -= 2;
    }
    if (v42 >= *(void *)(a1 + 88)) {
      unint64_t v42 = *(void *)(a1 + 88);
    }
    *(void *)(a1 + 88) = v42;
    char v43 = TCountingObject::checkChunk((TCountingObject *)a1, (const TFileObject *)v7, v40, v41);
    v61 |= v43;
    char v44 = TCountingObject::checkMagnitude((TCountingObject *)a1, (const TFileObject *)v7, *(const TArrayObject **)(a1 + 72));
    char v45 = v61 | v44;
    v61 |= v44;
  }
  else
  {
    char v45 = v61;
  }
  if (v45)
  {
    std::string::basic_string[abi:ne180100]<0>(v56, "");
    TException::TException(__p, (long long *)v56);
    __p[0] = &unk_1F0A33B90;
    if (v60 >= 0) {
      long long v49 = (const char *)&__p[1];
    }
    else {
      long long v49 = (const char *)__p[1];
    }
    conditionalAssert(v49, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 897);
    TException::~TException((std::exception *)__p);
    if (v57 < 0) {
      operator delete(v56[0]);
    }
    uint64_t v50 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v50, (long long *)__p);
    *uint64_t v50 = &unk_1F0A33B90;
  }
  return a1;
}

void sub_1B2059330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  MEMORY[0x1B3EA8670](a10, 0x1070C40ADD13FEBLL);
  *(void *)uint64_t v26 = a11;
  if (*(char *)(v26 + 31) < 0) {
    operator delete(*a14);
  }
  _Unwind_Resume(a1);
}

uint64_t TCountingObject::getArray(int a1, const __int32 **this, uint64_t *a3)
{
  if (TFileObject::verify((TFileObject *)this, 0, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    TException::TException(__p, (long long *)v14);
    __p[0] = &unk_1F0A33B90;
    if (v18 >= 0) {
      int v12 = (const char *)&__p[1];
    }
    else {
      int v12 = (const char *)__p[1];
    }
    conditionalAssert(v12, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 905);
    TException::~TException((std::exception *)__p);
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(exception, (long long *)__p);
    void *exception = &unk_1F0A33B90;
  }
  uint64_t v5 = *a3;
  if (a3[1] == *a3)
  {
LABEL_8:
    loggableFileObject((uint64_t *)this);
    if (v17 >= 0) {
      int64_t v10 = __p;
    }
    else {
      int64_t v10 = (void **)__p[0];
    }
    tknPrintf("Error: %sArray name does not exist\n", v9, v10);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  else
  {
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      uint64_t v8 = (const __int32 *)(v7 + 8);
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v8 = *(const __int32 **)v8;
      }
      if (!wcscmp(this[3], v8)) {
        return *(void *)(*a3 + 8 * v6);
      }
      ++v6;
      uint64_t v5 = *a3;
      if (v6 >= (a3[1] - *a3) >> 3) {
        goto LABEL_8;
      }
    }
  }
}

void sub_1B2059608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

uint64_t TCountingObject::checkChunk(TCountingObject *this, const TFileObject *a2, const TArrayObject *a3, const TArrayObject *a4)
{
  char v8 = TArrayObject::checkNoGap(a3, 0, 0xAuLL);
  unint64_t v9 = *((void *)this + 16);
  if (v9 >= 2)
  {
    unint64_t v10 = 100;
    unint64_t v11 = 1;
    unint64_t v12 = 10;
    do
    {
      uint64_t v13 = *((void *)a4 + 4);
      if (10 * v11 >= (*((void *)a4 + 5) - v13) >> 3 || !*(void *)(v13 + 80 * v11))
      {
        BOOL v14 = *((unsigned char *)this + 136) && (v11 & 0xFFFFFFFFFFFFFFFDLL) == 4;
        if (!v14 && v12 < v10)
        {
          do
          {
            uint64_t v16 = *((void *)a3 + 4);
            if (v12 >= (*((void *)a3 + 5) - v16) >> 3 || !*(void *)(v16 + 8 * v12))
            {
              loggableFileObject((uint64_t *)a2);
              if (v21 >= 0) {
                p_p = &__p;
              }
              else {
                p_p = __p;
              }
              tknPrintf("Error: %sCannot make spoken form for '%llu'\n", v17, p_p, v12);
              if (v21 < 0) {
                operator delete(__p);
              }
              char v8 = 1;
            }
            ++v12;
          }
          while (v10 != v12);
          unint64_t v9 = *((void *)this + 16);
        }
      }
      unint64_t v12 = v10;
      v10 *= 10;
      v11 += 2;
    }
    while (v11 < v9);
  }
  return v8 & 1;
}

void sub_1B20597BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TCountingObject::checkMagnitude(TCountingObject *this, const TFileObject *a2, const TArrayObject *a3)
{
  if (*(void *)a2) {
    unint64_t v6 = *(void *)(*(void *)a2 + 72);
  }
  else {
    unint64_t v6 = 3;
  }
  uint64_t v7 = *((void *)a3 + 4);
  unint64_t v8 = (*((void *)a3 + 5) - v7) >> 3;
  if (v8 > 10 * *((void *)this + 16)
    && (uint64_t v9 = 10 * *((void *)this + 16), *(void *)(v7 + 80 * *((void *)this + 16))))
  {
    char v10 = 0;
  }
  else
  {
    loggableFileObject((uint64_t *)a2);
    if (v23 >= 0) {
      unint64_t v12 = __p;
    }
    else {
      unint64_t v12 = (void **)__p[0];
    }
    tknPrintf("Error: %sMagnitude '%llu' hasn't been specified and is needed\n", v11, v12, 10 * *((void *)this + 16));
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = *((void *)a3 + 4);
    uint64_t v9 = 10 * *((void *)this + 16);
    unint64_t v8 = (*((void *)a3 + 5) - v7) >> 3;
    char v10 = 1;
  }
  for (unint64_t i = v9 + 10; i < v8; ++i)
  {
    unint64_t v14 = *((void *)this + 16);
    if (i % (10 * v14))
    {
      if (i / 0xA % v14 && *(void *)(v7 + 8 * i))
      {
        if (v6 < 3)
        {
          loggableFileObject((uint64_t *)a2);
          if (v23 >= 0) {
            unsigned int v20 = __p;
          }
          else {
            unsigned int v20 = (void **)__p[0];
          }
          tknPrintf("Warning: %sMagnitude '%llu' is not supported\n", v19, v20, i);
          if (v23 < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_38;
        }
        loggableFileObject((uint64_t *)a2);
        if (v23 >= 0) {
          uint64_t v16 = __p;
        }
        else {
          uint64_t v16 = (void **)__p[0];
        }
        tknPrintf("Error: %sMagnitude '%llu' is not supported\n", v15, v16, i);
        goto LABEL_30;
      }
    }
    else if (!*(void *)(v7 + 8 * i) {
           && (v8 <= i + 10 * v14 || !*(void *)(v7 + 80 * v14 + 8 * i) || *((unsigned char *)this + 136)))
    }
    {
      loggableFileObject((uint64_t *)a2);
      if (v23 >= 0) {
        char v18 = __p;
      }
      else {
        char v18 = (void **)__p[0];
      }
      tknPrintf("Error: %sMagnitude '%llu' hasn't been specified and is needed\n", v17, v18, i);
LABEL_30:
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      char v10 = 1;
    }
LABEL_38:
    uint64_t v7 = *((void *)a3 + 4);
    unint64_t v8 = (*((void *)a3 + 5) - v7) >> 3;
  }
  return v10 & 1;
}

void sub_1B2059A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TCountingObject::getChunk(TCountingObject *this, int a2, int a3, unint64_t a4)
{
  if ((!a3 || (uint64_t v4 = *((void *)this + 8)) == 0) && (!a2 || (uint64_t v4 = *((void *)this + 6)) == 0)) {
    uint64_t v4 = *((void *)this + 4);
  }
  uint64_t v6 = v4 + 32;
  uint64_t v5 = *(void *)(v4 + 32);
  if (a4 >= (*(void *)(v6 + 8) - v5) >> 3) {
    return 0;
  }
  else {
    return *(void *)(v5 + 8 * a4);
  }
}

uint64_t TCountingObject::getMagnitude(TCountingObject *this, int a2, int a3, uint64_t a4, unint64_t a5)
{
  if (a5 > 9) {
    return 0;
  }
  unint64_t v5 = a5 + 10 * a4;
  if ((!a3 || (uint64_t v6 = *((void *)this + 9)) == 0) && (!a2 || (uint64_t v6 = *((void *)this + 7)) == 0)) {
    uint64_t v6 = *((void *)this + 5);
  }
  uint64_t v8 = v6 + 32;
  uint64_t v7 = *(void *)(v6 + 32);
  if (v5 >= (*(void *)(v8 + 8) - v7) >> 3) {
    return 0;
  }
  else {
    return *(void *)(v7 + 8 * v5);
  }
}

const __int32 **TCountingObject::addHundredChunk(TCountingObject *this, unint64_t a2, int a3, int a4, int a5, int a6, TVertex *a7, TVertex *a8, TGraph *a9, TLexicon *a10)
{
  BOOL v16 = 0;
  if (a2 && a3) {
    BOOL v16 = a2 <= 0x63 && *((void *)this + 12) || a2 < 0xD && *((void *)this + 14) != 0;
  }
  BOOL v18 = 0;
  if (a2 && a4) {
    BOOL v18 = *((void *)this + 15) != 0;
  }
  BOOL v74 = v18;
  uint64_t v19 = (const __int32 **)*((void *)this + 12);
  if (!v19) {
    uint64_t v19 = (const __int32 **)*((void *)this + 14);
  }
  uint64_t v73 = v19;
  char v21 = a9;
  unsigned int v20 = a10;
  long long v72 = (const __int32 **)*((void *)this + 15);
  uint64_t result = (const __int32 **)TCountingObject::getChunk(this, a5, a6, a2);
  if (result)
  {
    char v23 = result;
    uint64_t result = (const __int32 **)addSequence(result, a7, a8, a9, a10, 0, 0, 0);
    if (!v16 && !v74) {
      return result;
    }
    if (v16) {
      uint64_t v24 = v73;
    }
    else {
      uint64_t v24 = v72;
    }
    uint64_t v25 = (TVertex *)TGraph::addVertex(a9, 0);
    addSequence(v24, a7, v25, a9, a10, 0, 0, 0);
    uint64_t v26 = v23;
    BOOL v27 = v25;
    goto LABEL_59;
  }
  BOOL v69 = v16;
  BOOL v70 = a6;
  uint64_t v68 = a7;
  if (a2 < 0xA)
  {
    uint64_t v28 = 0;
    unint64_t v29 = 1;
    unint64_t v30 = a2;
    int v31 = a5;
    goto LABEL_42;
  }
  uint64_t v28 = 1;
  unint64_t v29 = 1;
  unint64_t v30 = a2;
  int v31 = a5;
  while (v30 > 0x63 || !*((unsigned char *)this + 136))
  {
    v29 *= 10;
    unint64_t v32 = v30 / 0xA;
    ++v28;
    BOOL v33 = v30 > 0x63;
    v30 /= 0xAuLL;
    if (!v33)
    {
      --v28;
      unint64_t v30 = v32;
      goto LABEL_42;
    }
  }
  if (v28 != 6)
  {
    if (v28 == 4)
    {
      unint64_t v34 = v30 / 0xAu + 40;
      uint64_t v35 = *(void *)(*((void *)this + 5) + 32);
      uint64_t v36 = *(void *)(*((void *)this + 5) + 40) - v35;
      if ((v34 >= v36 >> 3 || !*(void *)(v35 + 8 * v34))
        && ((unint64_t)v36 < 0x141 || !*(void *)(v35 + 320)))
      {
        uint64_t v28 = 3;
        goto LABEL_42;
      }
    }
    goto LABEL_41;
  }
  unint64_t v37 = v30 / 0xAu + 60;
  uint64_t v38 = *(void *)(*((void *)this + 5) + 32);
  uint64_t v39 = *(void *)(*((void *)this + 5) + 40) - v38;
  if (v37 < v39 >> 3 && *(void *)(v38 + 8 * v37) || (unint64_t)v39 >= 0x1E1 && *(void *)(v38 + 480))
  {
LABEL_41:
    v29 *= 10;
    unint64_t v30 = v30 / 0xAu;
    goto LABEL_42;
  }
  uint64_t v28 = 5;
LABEL_42:
  if (a2 == v29 * v30)
  {
    uint64_t v40 = a8;
  }
  else
  {
    uint64_t v41 = (TVertex *)TGraph::addVertex(a9, 0);
    uint64_t result = (const __int32 **)TCountingObject::addHundredChunk(this, a2 - v29 * v30, v28 == 2, 0, 0, v70, v41, a8, a9, a10);
    if (*((void *)this + 15) && a2 - v29 * v30 < v29 / 0xA)
    {
      uint64_t v40 = (TVertex *)TGraph::addVertex(a9, 0);
      uint64_t result = (const __int32 **)addSequence(*((const __int32 ***)this + 15), v40, v41, a9, a10, 0, 0, 0);
    }
    else
    {
      uint64_t v40 = v41;
    }
  }
  if (v30)
  {
    unint64_t v71 = v40;
    int v42 = a2 == v29 * v30 && v70;
    uint64_t Magnitude = TCountingObject::getMagnitude(this, v31, v42, v28, v30);
    int v44 = v69 || v74;
    if (!Magnitude)
    {
      if (v44)
      {
        if (v69) {
          uint64_t v51 = v73;
        }
        else {
          uint64_t v51 = v72;
        }
        long long v52 = (TVertex *)TGraph::addVertex(a9, 0);
        addSequence(v51, v68, v52, a9, a10, 0, 0, 0);
        char v53 = (TVertex *)TGraph::addVertex(a9, 0);
        uint64_t v54 = 0;
        uint64_t v55 = *(void *)(*((void *)this + 4) + 32);
        if (v30 < (*(void *)(*((void *)this + 4) + 40) - v55) >> 3) {
          uint64_t v54 = *(const __int32 ***)(v55 + 8 * v30);
        }
        addSequence(v54, v52, v53, a9, a10, 0, 0, 0);
        if (!v42 || (uint64_t v56 = *((void *)this + 9)) == 0) {
          uint64_t v56 = *((void *)this + 5);
        }
        uint64_t v58 = v56 + 32;
        uint64_t v57 = *(void *)(v56 + 32);
        if (10 * v28 >= (unint64_t)((*(void *)(v58 + 8) - v57) >> 3)) {
          char v59 = 0;
        }
        else {
          char v59 = *(const __int32 ***)(v57 + 80 * v28);
        }
        addSequence(v59, v53, v71, a9, a10, 0, 0, 0);
      }
      char v60 = (TVertex *)TGraph::addVertex(a9, 0);
      if (!v31 || (uint64_t v61 = *((void *)this + 6)) == 0) {
        uint64_t v61 = *((void *)this + 4);
      }
      uint64_t v63 = v61 + 32;
      uint64_t v62 = *(void *)(v61 + 32);
      if (v30 >= (*(void *)(v63 + 8) - v62) >> 3) {
        uint64_t v64 = 0;
      }
      else {
        uint64_t v64 = *(const __int32 ***)(v62 + 8 * v30);
      }
      addSequence(v64, v68, v60, a9, a10, 0, 0, 0);
      if (!v42 || (uint64_t v65 = *((void *)this + 9)) == 0) {
        uint64_t v65 = *((void *)this + 5);
      }
      uint64_t v67 = v65 + 32;
      uint64_t v66 = *(void *)(v65 + 32);
      if (10 * v28 >= (unint64_t)((*(void *)(v67 + 8) - v66) >> 3)) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = *(const __int32 ***)(v66 + 80 * v28);
      }
      long long v49 = a9;
      uint64_t v48 = v71;
      uint64_t v50 = a10;
      BOOL v27 = v60;
      goto LABEL_60;
    }
    char v45 = (const __int32 **)Magnitude;
    char v21 = a9;
    a8 = v40;
    unsigned int v20 = a10;
    if (v44)
    {
      if (v69) {
        uint64_t v46 = v73;
      }
      else {
        uint64_t v46 = v72;
      }
      __n128 v47 = (TVertex *)TGraph::addVertex(a9, 0);
      addSequence(v46, v68, v47, a9, a10, 0, 0, 0);
      addSequence(v45, v47, v71, a9, a10, 0, 0, 0);
    }
    uint64_t v26 = v45;
    BOOL v27 = v68;
LABEL_59:
    uint64_t v48 = a8;
    long long v49 = v21;
    uint64_t v50 = v20;
LABEL_60:
    return (const __int32 **)addSequence(v26, v27, v48, v49, v50, 0, 0, 0);
  }
  return result;
}

unint64_t TCountingObject::build(uint64_t a1, __int32 *a2, TVertex *a3, TVertex *a4, TGraph *a5, TLexicon *a6)
{
  uint64_t v6 = a5;
  do
  {
    uint64_t v9 = a2;
    __int32 v10 = a2[1];
    ++a2;
    if (!v10) {
      break;
    }
    unsigned int v11 = *v9;
    {
      operator new();
    }
    unsigned int DigitExtended = v11 - 48;
    if ((int)v11 < 48) {
      break;
    }
    if (v11 > 0x39)
    {
      if (v11 < 0x660) {
        break;
      }
      unsigned int DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11);
    }
  }
  while (!DigitExtended);
  unint64_t result = wcslen(v9);
  unint64_t v14 = result;
  size_t v15 = *(void *)(a1 + 128);
  size_t v65 = v15;
  if (result <= v15)
  {
    uint64_t v16 = *(void *)(a1 + 80);
    if (v16)
    {
      LOBYTE(v69) = 0;
      {
        operator new();
      }
      unint64_t result = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (unsigned int *)v9, (BOOL *)&v69);
      uint64_t v17 = *(void *)(v16 + 32);
      if (result < (unint64_t)((*(void *)(v16 + 40) - v17) >> 3))
      {
        unint64_t result = *(void *)(v17 + 8 * result);
        if (result) {
          return (unint64_t)addSequence((const __int32 **)result, a3, a4, v6, a6, 0, 0, 0);
        }
      }
    }
  }
  BOOL v69 = v71;
  long long v70 = xmmword_1B25607E0;
  char v72 = 1;
  unint64_t v18 = v14 / v15;
  unint64_t v19 = v14 % v15;
  if (v14 % v15)
  {
    TBuffer<wchar_t>::insert((uint64_t)&v69, 0, dword_1B258BAF8, v15 - v19);
    TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v9, v14 % v15);
    v73[0] = v18 + 48;
    unint64_t result = TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v73, 1uLL);
    v9 += v19;
  }
  uint64_t v20 = 4 * v15;
  if (v15 <= v14)
  {
    int v21 = 0;
    int v22 = v18 + 48;
    if (v18 <= 1) {
      unint64_t v18 = 1;
    }
    do
    {
      unint64_t result = wcsncmp(v9, dword_1B258BB14, v15);
      if (result)
      {
        TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v9, v15);
        v73[0] = v22 + ~v21;
        unint64_t result = TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v73, 1uLL);
      }
      ++v21;
      uint64_t v9 = (__int32 *)((char *)v9 + v20);
      --v18;
    }
    while (v18);
  }
  if (*((void *)&v70 + 1) >= (unint64_t)v70)
  {
    if (v72)
    {
      v73[0] = 0;
      unint64_t result = TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v73, 1uLL);
      char v23 = v69;
      --*((void *)&v70 + 1);
    }
    else
    {
      char v23 = v69;
      if ((void)v70) {
        *(_DWORD *)&v69[4 * v70 - 4] = 0;
      }
    }
  }
  else
  {
    char v23 = v69;
    *(_DWORD *)&v69[4 * *((void *)&v70 + 1)] = 0;
  }
  if (*v23)
  {
    uint64_t v24 = 0;
    BOOL v25 = 0;
    BOOL v63 = 0;
    unint64_t v56 = 10 * v15;
    uint64_t v57 = v20 + 4;
    uint64_t v55 = (uint64_t)&v23[2 * v15 + 1];
    char v26 = 1;
    uint64_t v64 = &v23[v15];
    uint64_t v58 = v23;
    do
    {
      unsigned int v27 = *(_DWORD *)((char *)v64 + v24);
      {
        operator new();
      }
      int v28 = v27 - 48;
      if ((int)v27 < 48) {
        goto LABEL_39;
      }
      if (v27 <= 0x39) {
        goto LABEL_40;
      }
      if (v27 < 0x660) {
LABEL_39:
      }
        int v28 = -1;
      else {
        int v28 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v27);
      }
LABEL_40:
      if (*((void *)&v70 + 1) >= (unint64_t)v70)
      {
        if (v72)
        {
          v73[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v73, 1uLL);
          unint64_t v29 = v69;
          --*((void *)&v70 + 1);
        }
        else
        {
          unint64_t v29 = v69;
          if ((void)v70) {
            *(_DWORD *)&v69[4 * v70 - 4] = 0;
          }
        }
      }
      else
      {
        unint64_t v29 = v69;
        *(_DWORD *)&v69[4 * *((void *)&v70 + 1)] = 0;
      }
      *(_DWORD *)&v29[4 * v15 + 4 * ((unint64_t)((char *)v23 + v24 - v29) >> 2)] = 0;
      LOBYTE(v73[0]) = 0;
      {
        operator new();
      }
      unsigned int v30 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (_DWORD *)((char *)v23 + v24), (BOOL *)v73);
      BOOL v60 = v25;
      if (!(v26 & 1 | (*(void *)(a1 + 120) == 0)))
      {
        unsigned int v31 = *(_DWORD *)((char *)v23 + v24);
        {
          operator new();
        }
        unsigned int v32 = v31 - 48;
        if ((int)v31 >= 48)
        {
          if (v31 > 0x39)
          {
            if (v31 < 0x660) {
              goto LABEL_57;
            }
            unsigned int v32 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v31);
          }
          if (!v32 && v30)
          {
            BOOL v33 = (TVertex *)TGraph::addVertex(v6, 0);
            addSequence(*(const __int32 ***)(a1 + 120), a3, v33, v6, a6, 0, 0, 0);
            BOOL v60 = 0;
            if (!v63) {
              goto LABEL_62;
            }
            goto LABEL_58;
          }
        }
      }
LABEL_57:
      BOOL v33 = a3;
      if (!v63) {
        goto LABEL_62;
      }
LABEL_58:
      if (*(void *)(a1 + 104) && (v30 < 0x64 || !(v30 % 0x64)))
      {
        unint64_t v34 = (TVertex *)TGraph::addVertex(v6, 0);
        addSequence(*(const __int32 ***)(a1 + 104), v33, v34, v6, a6, 0, 0, 0);
        BOOL v33 = v34;
      }
LABEL_62:
      unint64_t v35 = v28;
      if (!v28)
      {
        unint64_t result = (unint64_t)TCountingObject::addHundredChunk((TCountingObject *)a1, v30, (v26 & 1) == 0, v60, v26 & 1, 1, v33, a4, v6, a6);
        break;
      }
      BOOL v63 = v28 == 1;
      uint64_t v66 = (char *)v64 + v24;
      int v36 = *(_DWORD *)((char *)v64 + v24 + 4);
      a3 = a4;
      if (v36) {
        a3 = (TVertex *)TGraph::addVertex(a5, 0);
      }
      uint64_t v37 = v65 * v28;
      uint64_t Magnitude = TCountingObject::getMagnitude((TCountingObject *)a1, v26 & 1, v36 == 0, v37, v30);
      if (!Magnitude)
      {
        if (v36 || (uint64_t v41 = *(void *)(a1 + 72)) == 0) {
          uint64_t v41 = *(void *)(a1 + 40);
        }
        uint64_t v43 = v41 + 32;
        uint64_t v42 = *(void *)(v41 + 32);
        if (10 * v37 < (unint64_t)((*(void *)(v43 + 8) - v42) >> 3))
        {
          uint64_t v39 = *(const __int32 ***)(v42 + 80 * v37);
          if (v39)
          {
            uint64_t v6 = a5;
            int v44 = (TVertex *)TGraph::addVertex(a5, 0);
            TCountingObject::addHundredChunk((TCountingObject *)a1, v30, 0, v60, v26 & 1, 0, v33, v44, a5, a6);
            BOOL v33 = v44;
            goto LABEL_68;
          }
        }
        if (v30 <= 9
          && (uint64_t v45 = *(void *)(*(void *)(a1 + 40) + 32),
              v56 + v30 < (*(void *)(*(void *)(a1 + 40) + 40) - v45) >> 3)
          && (uint64_t v39 = *(const __int32 ***)(v45 + 8 * (v56 + v30))) != 0)
        {
          uint64_t v46 = v33;
        }
        else
        {
          uint64_t v46 = (TVertex *)TGraph::addVertex(a5, 0);
          TCountingObject::addHundredChunk((TCountingObject *)a1, v30, 0, v60, v26 & 1, 0, v33, v46, a5, a6);
          uint64_t v47 = *(void *)(*(void *)(a1 + 40) + 32);
          if (v56 >= (*(void *)(*(void *)(a1 + 40) + 40) - v47) >> 3) {
            uint64_t v39 = 0;
          }
          else {
            uint64_t v39 = *(const __int32 ***)(v47 + 8 * v56);
          }
        }
        if (*((_DWORD *)v66 + 1))
        {
          unsigned int v48 = *(_DWORD *)(v55 + v24);
          {
            operator new();
          }
          int v49 = v48 - 48;
          if ((int)v48 < 48) {
            goto LABEL_89;
          }
          if (v48 <= 0x39) {
            goto LABEL_90;
          }
          if (v48 < 0x660) {
LABEL_89:
          }
            int v49 = -1;
          else {
            int v49 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v48);
          }
LABEL_90:
          uint64_t v50 = v49;
        }
        else
        {
          uint64_t v50 = 0;
        }
        if (v50 + 1 >= v35)
        {
          BOOL v33 = v46;
        }
        else
        {
          BOOL v33 = (TVertex *)TGraph::addVertex(a5, 0);
          addSequence(v39, v46, v33, a5, a6, 0, 0, 0);
          unint64_t v51 = v56 * (v35 - 1);
          if (v36 || (uint64_t v52 = *(void *)(a1 + 72)) == 0) {
            uint64_t v52 = *(void *)(a1 + 40);
          }
          uint64_t v54 = v52 + 32;
          uint64_t v53 = *(void *)(v52 + 32);
          if (v51 >= (*(void *)(v54 + 8) - v53) >> 3) {
            uint64_t v39 = 0;
          }
          else {
            uint64_t v39 = *(const __int32 ***)(v53 + 8 * v51);
          }
        }
        goto LABEL_67;
      }
      uint64_t v39 = (const __int32 **)Magnitude;
LABEL_67:
      uint64_t v6 = a5;
LABEL_68:
      unint64_t result = (unint64_t)addSequence(v39, v33, a3, v6, a6, 0, 0, 0);
      char v26 = 0;
      char v23 = v58;
      v24 += v57;
      HIDWORD(v40) = -858993459 * v30;
      LODWORD(v40) = -858993459 * v30;
      BOOL v25 = (v40 >> 1) < 0x1999999A;
      size_t v15 = v65;
    }
    while (*((_DWORD *)v66 + 1));
  }
  if (v72)
  {
    unint64_t result = (unint64_t)v69;
    if (v69 != v71)
    {
      if (v69) {
        return MEMORY[0x1B3EA8630]();
      }
    }
  }
  return result;
}

void sub_1B205AAA8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TChartSeeder::makeTerminals(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, TAllocator *a6)
{
  uint64_t v6 = (char *)(*(void *)(a1 + 8) + a2);
  if (*v6 && *(void *)(a1 + 32) > a2)
  {
    uint64_t v41 = (__int32 *)v43;
    long long v42 = xmmword_1B25607E0;
    char v44 = 1;
    BOOL Terminals = 1;
    unsigned int v11 = v6;
    while (Terminals)
    {
      uint64_t Segment = TSegmenter::getSegment(*(TSegmenter **)(a1 + 16), v11);
      uint64_t v13 = Segment;
      if (!Segment) {
        break;
      }
      int v14 = *(_DWORD *)(Segment + 24);
      if (v14 == 5) {
        break;
      }
      size_t v15 = *(int **)Segment;
      if (wcslen(*(const __int32 **)Segment) + *((void *)&v42 + 1) > *(void *)(a1 + 32)) {
        break;
      }
      if (!v14)
      {
        int v22 = 0;
        while (1)
        {
          if (!v13) {
            goto LABEL_68;
          }
          if (*(_DWORD *)(v13 + 24)) {
            goto LABEL_12;
          }
          char v23 = *(int **)v13;
          unsigned int v11 = *(char **)(v13 + 8);
          int v24 = **(_DWORD **)v13;
          if (v24 == 9)
          {
LABEL_52:
            if (*(_DWORD *)(v13 + 24)) {
              goto LABEL_12;
            }
            goto LABEL_68;
          }
          if (!*((void *)&v42 + 1) || v41[*((void *)&v42 + 1) - 1] != 32)
          {
            {
              operator new();
            }
            if (v24 <= 8202)
            {
              if (v24 != 32 && v24 != 160) {
                goto LABEL_47;
              }
            }
            else if (v24 != 8203 && v24 != 12288 && v24 != 65279)
            {
LABEL_47:
              char v23 = *(int **)v13;
              goto LABEL_33;
            }
            char v23 = *(int **)v13;
            if (wcslen(*(const __int32 **)v13) > 2) {
              goto LABEL_52;
            }
          }
LABEL_33:
          int v26 = *v23;
          {
            operator new();
          }
          BOOL v27 = v26 == 10 || v26 == 13;
          int v28 = !v27;
          if (v27 && ((v22 ^ 1) & 1) == 0) {
            goto LABEL_52;
          }
          if (!*((void *)&v42 + 1) || v41[*((void *)&v42 + 1) - 1] != 32) {
            TBuffer<wchar_t>::insert((uint64_t)&v41, *((unint64_t *)&v42 + 1), (int *)&unk_1B258BB34, 1uLL);
          }
          v22 |= v28 ^ 1;
          uint64_t v13 = TSegmenter::getSegment(*(TSegmenter **)(a1 + 16), v11);
        }
      }
      uint64_t v16 = 0;
      unsigned int v11 = *(char **)(v13 + 8);
      while (v15[v16++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v41, *((unint64_t *)&v42 + 1), v15, v16 - 1);
LABEL_12:
      unint64_t v19 = *(char **)a3;
      uint64_t v18 = *(void *)(a3 + 8);
      uint64_t v20 = *(void *)(a1 + 24);
      if (*((void *)&v42 + 1) >= (unint64_t)v42)
      {
        if (v44)
        {
          LODWORD(v39) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v41, *((unint64_t *)&v42 + 1), (int *)&v39, 1uLL);
          int v21 = v41;
          --*((void *)&v42 + 1);
        }
        else
        {
          int v21 = v41;
          if ((void)v42) {
            v41[(void)v42 - 1] = 0;
          }
        }
      }
      else
      {
        int v21 = v41;
        v41[*((void *)&v42 + 1)] = 0;
      }
      BOOL Terminals = TGrammar::getTerminals(v20, (unsigned int *)v21, (char **)a3);
      uint64_t v29 = *(void *)(a3 + 8) - *(void *)a3;
      if ((v18 - (uint64_t)v19) >> 3 != v29 >> 3)
      {
        *(void *)&long long v39 = v11 - v6;
        std::vector<unsigned long>::resize(a4, v29 >> 3, &v39);
        unint64_t v40 = &unk_1B258BB3C;
        if ((unint64_t)(*((void *)&v42 + 1) + 1) >> 62) {
          uint64_t v30 = -1;
        }
        else {
          uint64_t v30 = 4 * (*((void *)&v42 + 1) + 1);
        }
        unsigned int v31 = (__int32 *)TAllocator::allocate(a6, v30);
        if (*((void *)&v42 + 1) >= (unint64_t)v42)
        {
          if (v44)
          {
            LODWORD(v39) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v41, *((unint64_t *)&v42 + 1), (int *)&v39, 1uLL);
            unsigned int v32 = v41;
            --*((void *)&v42 + 1);
          }
          else
          {
            unsigned int v32 = v41;
            if ((void)v42) {
              v41[(void)v42 - 1] = 0;
            }
          }
        }
        else
        {
          unsigned int v32 = v41;
          v41[*((void *)&v42 + 1)] = 0;
        }
        wcscpy(v31, v32);
        *(void *)&long long v39 = 1;
        *((void *)&v39 + 1) = v31;
        unint64_t v34 = *(char **)a3;
        uint64_t v33 = *(void *)(a3 + 8);
        uint64_t ClientData = TGrammarCompiler::makeClientData((uint64_t *)&v40, &v39, 1, a6);
        std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(a5, (v33 - (uint64_t)v34) >> 3, &ClientData);
      }
    }
LABEL_68:
    if (v44)
    {
      if (v41 != (__int32 *)v43 && v41 != 0) {
        MEMORY[0x1B3EA8630]();
      }
    }
  }
}

void sub_1B205B010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  MEMORY[0x1B3EA8670](v16, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x450]) && a16 != a9)
  {
    if (a16) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

void TPatternManager::TPatternManager(TPatternManager *this, TInputStream *a2, TInputStream *a3, TLexicon *a4, TTokenizerParamManager *a5)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  TAllocator::TAllocator((TPatternManager *)((char *)this + 40), 2048);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 1) = a4;
  *((void *)this + 2) = a5;
  *(void *)this = -1;
  *((void *)this + 22) = 0;
  operator new();
}

void sub_1B205BC84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v33);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    TPatternManager::freeMemory(v30);
    __cxa_rethrow();
  }
  JUMPOUT(0x1B205BE44);
}

void sub_1B205BDB0()
{
  MEMORY[0x1B3EA8670](v0, 0x10F0C4009B12AA1);
  JUMPOUT(0x1B205BE74);
}

void sub_1B205BDEC()
{
}

void sub_1B205BE14()
{
  __cxa_end_catch();
  if (v10)
  {
    if (v9 != v1 && v9 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  uint64_t v3 = (void *)v0[19];
  if (v3)
  {
    v0[20] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)v0[16];
  if (v4)
  {
    v0[17] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)v0[13];
  if (v5)
  {
    v0[14] = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v7;
  if (*v7)
  {
    v0[11] = v6;
    operator delete(v6);
  }
  TAllocator::clear(v8);
  JUMPOUT(0x1B205BEC8);
}

void sub_1B205BE24()
{
}

void sub_1B205BEC0(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1B205BEC8);
  }
  __clang_call_terminate(a1);
}

uint64_t callBackSeqAlt(uint64_t a1, unint64_t a2, __int32 *a3, uint64_t a4, TAllocator *a5)
{
  size_t v10 = callBackSeqAltHelper(a1, a2, a3, a4, 0);
  if (v10 >= 2)
  {
    if (v10 >> 62) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = 4 * v10;
    }
    unint64_t v12 = (__int32 *)TAllocator::allocate(a5, v11);
    callBackSeqAltHelper(a1, a2, a3, a4, v12);
  }
  return 1;
}

uint64_t callBackSync(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 <= 1 && *(void *)a1 > 1uLL) {
    return 0;
  }
  uint64_t v7 = *(int **)(a1 + 8);
  if (*v7)
  {
    size_t v8 = wcslen(*(const __int32 **)(a1 + 8));
    unint64_t v9 = v8 + 10;
    if ((v8 + 10) >> 62) {
      uint64_t v10 = -1;
    }
    else {
      uint64_t v10 = 4 * (v8 + 10);
    }
    uint64_t v13 = (uint64_t *)TAllocator::allocate(a5, v10);
    unint64_t v14 = v9;
    unint64_t v15 = 0;
    char v17 = 0;
    TBuffer<wchar_t>::assign((uint64_t)&v13, (int *)"S");
    uint64_t v11 = 0;
    while (v7[v11++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v13, v15, v7, v11 - 1);
    int v18 = 34;
    TBuffer<wchar_t>::insert((uint64_t)&v13, v15, &v18, 1uLL);
    if (v15 < v14)
    {
      *((_DWORD *)v13 + v15) = 0;
LABEL_17:
      if (v17 && v13 != &v16)
      {
        if (v13) {
          MEMORY[0x1B3EA8630]();
        }
      }
      return 1;
    }
    if (v17)
    {
      int v18 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v13, v15--, &v18, 1uLL);
      goto LABEL_17;
    }
    if (v14)
    {
      *((_DWORD *)v13 + v14 - 1) = 0;
      goto LABEL_17;
    }
  }
  return 1;
}

void sub_1B205C0E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (LOBYTE(STACK[0x420])) {
    callBackSync(va);
  }
  _Unwind_Resume(a1);
}

uint64_t callBackLookup(void *a1, unint64_t a2, void *a3, uint64_t a4, TAllocator *a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a2 <= 1 && *a1 > 1uLL) {
    return 0;
  }
  size_t v8 = (unsigned int *)a1[1];
  if (!*v8) {
    return 1;
  }
  if (TLexicon::checkName((uint64_t)a3, (int *)v8, 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    loggableUnicode(v8, &__p);
    if (v29 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    tknPrintf("Error: '%s' : Lookup requested for an invalid word name.\n", v9, p_p);
    if (v29 < 0) {
      operator delete(__p);
    }
    return 0;
  }
  BOOL v25 = 0;
  int v26 = 0;
  uint64_t v27 = 0;
  unint64_t v12 = TStringParam::get((TStringParam *)(a4 + 10736));
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(a4 + 16456));
  size_t v14 = *(int *)(a4 + 4 * TParam::getValidConfig((TParam *)(a4 + 16456), ActiveConfigHandle) + 16616);
  uint64_t v15 = TParam::getActiveConfigHandle((TParam *)(a4 + 16104));
  uint64_t ValidConfig = TParam::getValidConfig((TParam *)(a4 + 16104), v15);
  TLexicon::findHeadClonesCollated(a3, (__int32 *)v8, v12, v14, *(int *)(a4 + 4 * ValidConfig + 16264), &v25);
  for (uint64_t i = 0; i != 1600; i += 16)
    *(void **)((char *)&__p + i) = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  uint64_t v20 = (v26 - (unsigned char *)v25) >> 5;
  int v21 = (char *)v25 + 16;
  do
  {
    if (v20 == v18) {
      break;
    }
    if ((*v21 & 0x35) == 0)
    {
      int v22 = (void *)**((void **)v21 - 2);
      char v23 = &__p + 2 * v19;
      *char v23 = (void *)1;
      v23[1] = v22;
      ++v19;
    }
    ++v18;
    v21 += 32;
  }
  while (v18 != 100);
  std::vector<TLexiconMatch>::resize((uint64_t)&v25, 0);
  if (v19)
  {
    if (v19 == 1) {
      uint64_t v11 = (uint64_t)__p;
    }
    else {
      uint64_t v11 = callBackSeqAlt((uint64_t)&__p, v19, dword_1B258B7FC, (uint64_t)a3, a5);
    }
  }
  else
  {
    uint64_t v11 = 1;
  }
  if (v25)
  {
    int v26 = v25;
    operator delete(v25);
  }
  return v11;
}

void sub_1B205C364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TPatternManager::addArrayObject(TPatternManager *this, const TFileObject *a2)
{
}

void sub_1B205C780(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1093C40918A3909);
  _Unwind_Resume(a1);
}

void TPatternManager::addCountingObject(TPatternManager *this, const TFileObject *a2)
{
}

void sub_1B205CBEC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      if (a2 == 1)
      {
        __cxa_begin_catch(a1);
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        __cxa_rethrow();
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_1B205CD00()
{
}

void TPatternManager::addDigitObject(TPatternManager *this, const TFileObject *a2)
{
}

void sub_1B205D0F4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40CE74B16CLL);
  _Unwind_Resume(a1);
}

void TPatternManager::addRomanObject(TPatternManager *this, const TFileObject *a2)
{
}

void sub_1B205D584(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1093C40918A3909);
  _Unwind_Resume(a1);
}

uint64_t TPatternManager::freeMemory(TPatternManager *this)
{
  uint64_t v2 = (TParser *)*((void *)this + 4);
  if (v2)
  {
    TParser::~TParser(v2);
    MEMORY[0x1B3EA8670]();
  }
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  uint64_t v5 = *((void *)this + 19);
  uint64_t v4 = *((void *)this + 20);
  if (v4 != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t result = *(void *)(v5 + 8 * v6);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        uint64_t v5 = *((void *)this + 19);
        uint64_t v4 = *((void *)this + 20);
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 3);
  }
  uint64_t v8 = *((void *)this + 16);
  uint64_t v7 = *((void *)this + 17);
  if (v7 != v8)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t result = *(void *)(v8 + 8 * v9);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        uint64_t v8 = *((void *)this + 16);
        uint64_t v7 = *((void *)this + 17);
      }
      ++v9;
    }
    while (v9 < (v7 - v8) >> 3);
  }
  uint64_t v11 = *((void *)this + 13);
  uint64_t v10 = *((void *)this + 14);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    do
    {
      uint64_t result = *(void *)(v11 + 8 * v12);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        uint64_t v11 = *((void *)this + 13);
        uint64_t v10 = *((void *)this + 14);
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  uint64_t v14 = *((void *)this + 10);
  uint64_t v13 = *((void *)this + 11);
  if (v13 != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t result = *(void *)(v14 + 8 * v15);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        uint64_t v14 = *((void *)this + 10);
        uint64_t v13 = *((void *)this + 11);
      }
      ++v15;
    }
    while (v15 < (v13 - v14) >> 3);
  }
  return result;
}

void TPatternManager::~TPatternManager(TPatternManager *this)
{
  TPatternManager::freeMemory(this);
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 10);
  if (v5)
  {
    *((void *)this + 11) = v5;
    operator delete(v5);
  }
  TAllocator::clear((TPatternManager *)((char *)this + 40));
}

uint64_t callBackObject(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 <= 1 && *(void *)a1 > 1uLL) {
    return 0;
  }
  uint64_t v8 = *(unsigned int **)(a1 + 8);
  unsigned int v9 = *v8;
  if (*v8)
  {
    uint64_t v10 = v8 + 1;
    do
    {
      {
        operator new();
      }
      if ((int)v9 < 48
        || v9 >= 0x3A
        && (v9 < 0x660
         || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9) == -1))
      {
        loggableUnicode(*(unsigned int **)(a1 + 8), &__p);
        if (v24 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        tknPrintf("Error: ${Counting, Array, Roman}...() : the argument (%s) must be a number\n", v12, p_p);
        if (SHIBYTE(v24) < 0) {
          operator delete(__p);
        }
        return 0;
      }
      unsigned int v11 = *v10++;
      unsigned int v9 = v11;
    }
    while (v11);
    unint64_t v15 = *(__int32 **)(a1 + 8);
    if ((*(unsigned int (**)(unint64_t, __int32 *))(*(void *)a3 + 16))(a3, v15))
    {
      size_t v17 = wcslen(v15);
      unint64_t v18 = v17 + 54;
      if ((v17 + 54) >> 62) {
        uint64_t v19 = -1;
      }
      else {
        uint64_t v19 = 4 * (v17 + 54);
      }
      std::string __p = (void *)TAllocator::allocate(a5, v19);
      unint64_t v23 = v18;
      int64_t v24 = 0;
      char v26 = 0;
      TBuffer<wchar_t>::assign((uint64_t)&__p, (int *)"P");
      {
        operator new();
      }
      TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, (uint64_t)&__p, 1);
      TBuffer<wchar_t>::insert((uint64_t)&__p, v24, (int *)"\"", 0xBuLL);
      uint64_t v20 = 0;
      while (v15[v20++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&__p, v24, v15, v20 - 1);
      TBuffer<wchar_t>::insert((uint64_t)&__p, v24, (int *)"\"", 3uLL);
      if (v24 >= v23)
      {
        if (v26)
        {
          int v27 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&__p, v24--, &v27, 1uLL);
        }
        else
        {
          if (!v23) {
            return 1;
          }
          *((_DWORD *)__p + v23 - 1) = 0;
        }
      }
      else
      {
        *((_DWORD *)__p + v++*(_DWORD *)(result + 24) = 0;
      }
      if (v26 && __p != &v25)
      {
        if (__p) {
          MEMORY[0x1B3EA8630]();
        }
      }
    }
  }
  return 1;
}

void sub_1B205DB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  MEMORY[0x1B3EA8670](v13, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x420]))
  {
    if (__p != &a13 && __p != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

TAllocator *TPatternManager::clear(TPatternManager *this)
{
  uint64_t v2 = *((void *)this + 4);
  unint64_t v4 = *(void *)(v2 + 48);
  uint64_t result = (TAllocator *)(v2 + 48);
  if (v4 >= 0x801) {
    uint64_t result = (TAllocator *)TAllocator::clear(result);
  }
  *((void *)this + 22) = 0;
  return result;
}

uint64_t TPatternManager::addWords(TPatternManager *this, TVertex *a2, TGraph *a3, TSegmenter *a4, uint64_t a5)
{
  *(void *)this = a5;
  unsigned int v9 = (char *)*((void *)a2 + 2);
  uint64_t result = TSegmenter::getSegment(a4, v9);
  if (!result) {
    return result;
  }
  uint64_t v11 = result;
  if (*(_DWORD *)(result + 24) == 5) {
    return result;
  }
  int v12 = **(_DWORD **)result;
  {
    if (result) {
      operator new();
    }
  }
  if (v12 > 159)
  {
    BOOL v14 = v12 == 12288;
    if (v12 >= 12288)
    {
      int v15 = 65279;
    }
    else
    {
      BOOL v14 = v12 == 160;
      int v15 = 8203;
    }
    if (v14 || v12 == v15) {
      return result;
    }
  }
  else if (v12 <= 0x20 && ((1 << v12) & 0x100002600) != 0)
  {
    return result;
  }
  BOOL v17 = *(void *)(v11 + 8) - (void)v9 >= 0x32uLL || (unint64_t)v9 >= *((void *)this + 22);
  uint64_t v18 = 50;
  unint64_t v78 = *(void *)(v11 + 8) - (void)v9;
  if (!v17) {
    uint64_t v18 = *(void *)(v11 + 8) - (void)v9;
  }
  uint64_t v19 = *((void *)this + 2);
  uint64_t v20 = *(void *)(*((void *)this + 3) + 56);
  v90[0] = &unk_1F0A336C0;
  v90[1] = v9;
  v90[2] = a4;
  v90[3] = v20;
  v90[4] = v18;
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v19 + 21152));
  uint64_t v22 = *(int *)(v19 + 4 * TParam::getValidConfig((TParam *)(v19 + 21152), ActiveConfigHandle) + 21312);
  uint64_t v23 = *((void *)this + 4);
  uint64_t v24 = *(void *)(v23 + 16);
  *(void *)(v23 + ++*(_DWORD *)(result + 24) = v22;
  (*(void (**)(void))(v24 + 16))();
  AllProductions = (void *)TParser::getAllProductions(*((void **)this + 4), (uint64_t)v90);
  TAllocator::TAllocator((TAllocator *)v89, 2048);
  if (!AllProductions)
  {
    unint64_t v77 = 0;
    goto LABEL_103;
  }
  unint64_t v77 = 0;
  char v26 = AllProductions;
  do
  {
    int v27 = **(_DWORD **)TSegmenter::getPreviousSegment(a4, &v9[v26[2]]);
    {
      operator new();
    }
    if (v27 > 159)
    {
      BOOL v29 = v27 == 12288;
      if (v27 >= 12288)
      {
        int v30 = 65279;
      }
      else
      {
        BOOL v29 = v27 == 160;
        int v30 = 8203;
      }
      if (v29 || v27 == v30) {
        goto LABEL_43;
      }
    }
    else if (v27 <= 0x20 && ((1 << v27) & 0x100002600) != 0)
    {
      goto LABEL_43;
    }
    if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)v26, dword_1B258BD0C, (TAllocator *)v89, 0) <= 1)
    {
      if (*v32)
      {
        if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)v26, dword_1B258BD28, (TAllocator *)v89, 0) <= 1)
        {
          unint64_t v34 = v33;
          if (!*v33) {
            goto LABEL_91;
          }
          uint64_t v82 = (unsigned int *)v84;
          long long v83 = xmmword_1B25607E0;
          char v88 = 1;
          Previousuint64_t Segment = TSegmenter::getPreviousSegment(a4, v9);
          uint64_t v37 = v36;
          while (PreviousSegment && *(_DWORD *)(PreviousSegment + 24) != 5)
          {
            if (*((void *)&v83 + 1) > 0x31uLL) {
              goto LABEL_59;
            }
            uint64_t v38 = 0;
            long long v39 = *(int **)PreviousSegment;
            while (v39[v38++])
              ;
            TBuffer<wchar_t>::insert((uint64_t)&v82, 0, v39, v38 - 1);
            Previousuint64_t Segment = TSegmenter::getPreviousSegment(a4, v37);
            uint64_t v37 = v41;
          }
          if (!*((void *)&v83 + 1)) {
            TBuffer<wchar_t>::assign((uint64_t)&v82, (int *)&unk_1B258BD58);
          }
LABEL_59:
          TRegExp::TRegExp((TRegExp *)&__p, v34, *((void *)this + 1) + 224);
          if (*((void *)&v83 + 1) >= (unint64_t)v83)
          {
            if (v88)
            {
              v91[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v91, 1uLL);
              long long v42 = v82;
              --*((void *)&v83 + 1);
            }
            else
            {
              long long v42 = v82;
              if ((void)v83) {
                v82[(void)v83 - 1] = 0;
              }
            }
          }
          else
          {
            long long v42 = v82;
            v82[*((void *)&v83 + 1)] = 0;
          }
          BOOL v43 = TRegExp::match(&__p, v42, 1);
          TRegExp::~TRegExp((TRegExp *)&__p);
          if (v88 && v82 != (unsigned int *)v84 && v82) {
            MEMORY[0x1B3EA8630]();
          }
          if (v43)
          {
LABEL_91:
            if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)v26, dword_1B258BD60, (TAllocator *)v89, 0) <= 1)
            {
              uint64_t v45 = v44;
              if (!*v44) {
                goto LABEL_92;
              }
              uint64_t v82 = (unsigned int *)v84;
              long long v83 = xmmword_1B25607E0;
              char v88 = 1;
              for (uint64_t i = TSegmenter::getSegment(a4, &v9[v26[2]]);
                    i && *(_DWORD *)(i + 24) != 5;
                    uint64_t i = TSegmenter::getSegment(a4, *(char **)(i + 8)))
              {
                if (*((void *)&v83 + 1) > 0x31uLL) {
                  goto LABEL_81;
                }
                uint64_t v47 = 0;
                unsigned int v48 = *(int **)i;
                while (v48[v47++])
                  ;
                TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v48, v47 - 1);
              }
              if (!*((void *)&v83 + 1)) {
                TBuffer<wchar_t>::assign((uint64_t)&v82, (int *)&unk_1B258BD58);
              }
LABEL_81:
              TRegExp::TRegExp((TRegExp *)&__p, v45, *((void *)this + 1) + 224);
              if (*((void *)&v83 + 1) >= (unint64_t)v83)
              {
                if (v88)
                {
                  v91[0] = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v91, 1uLL);
                  uint64_t v50 = v82;
                  --*((void *)&v83 + 1);
                }
                else
                {
                  uint64_t v50 = v82;
                  if ((void)v83) {
                    v82[(void)v83 - 1] = 0;
                  }
                }
              }
              else
              {
                uint64_t v50 = v82;
                v82[*((void *)&v83 + 1)] = 0;
              }
              BOOL v51 = TRegExp::match(&__p, v50, 2);
              TRegExp::~TRegExp((TRegExp *)&__p);
              if (v88 && v82 != (unsigned int *)v84 && v82) {
                MEMORY[0x1B3EA8630]();
              }
              if (v51)
              {
LABEL_92:
                unint64_t v52 = v77;
                if (v26[2] > v77) {
                  unint64_t v52 = v26[2];
                }
                unint64_t v77 = v52;
              }
            }
          }
        }
      }
      else
      {
        tknPrintString("Error: Top production 'spoken' attribute is an empty string\n");
      }
    }
LABEL_43:
    char v26 = (void *)*v26;
  }
  while (v26);
  if (v77)
  {
    if ((unint64_t)&v9[v77] <= *((void *)this + 22)) {
      unint64_t v77 = v78;
    }
    else {
      *((void *)this + 22) = &v9[v77];
    }
  }
  else
  {
    unint64_t v77 = 0;
    AllProductions = 0;
  }
LABEL_103:
  uint64_t v53 = *((void *)this + 2);
  uint64_t v54 = TParam::getActiveConfigHandle((TParam *)(v53 + 21504));
  uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v53 + 21504), v54);
  unint64_t v56 = (unsigned int **)MEMORY[0x1E4FBA418];
  if (*(unsigned char *)(v53 + ValidConfig + 21656))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v82);
    TParser::logChart(*((uint64_t **)this + 4), &v82);
    std::stringbuf::str();
    if (v81 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    tknPrintString(p_p);
    if (v81 < 0) {
      operator delete(__p);
    }
    uint64_t v82 = *v56;
    *(unsigned int **)((char *)&v82 + *((void *)v82 - 3)) = v56[3];
    *(void *)&long long v83 = MEMORY[0x1E4FBA470] + 16;
    if (v86 < 0) {
      operator delete(v85);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B3EA8520](v87);
  }
  unint64_t v58 = v77;
  if (AllProductions)
  {
    uint64_t v76 = (unsigned int *)*MEMORY[0x1E4FBA418];
    long long v75 = *(unsigned int **)(MEMORY[0x1E4FBA418] + 24);
    do
    {
      uint64_t v59 = AllProductions[2];
      if (v59 == v58 || v59 == v78)
      {
        uint64_t v61 = *((void *)this + 2);
        uint64_t v62 = TParam::getActiveConfigHandle((TParam *)(v61 + 21752));
        unint64_t v58 = v77;
        if (*(unsigned char *)(v61 + TParam::getValidConfig((TParam *)(v61 + 21752), v62) + 21904))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v82);
          TParser::logTree(*((void *)this + 4), AllProductions, &v82);
          std::stringbuf::str();
          if (v81 >= 0) {
            BOOL v63 = (const char *)&__p;
          }
          else {
            BOOL v63 = (const char *)__p;
          }
          tknPrintString(v63);
          if (v81 < 0) {
            operator delete(__p);
          }
          uint64_t v82 = v76;
          *(unsigned int **)((char *)&v82 + *((void *)v76 - 3)) = v75;
          *(void *)&long long v83 = MEMORY[0x1E4FBA470] + 16;
          if (v86 < 0) {
            operator delete(v85);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1B3EA8520](v87);
        }
        std::string __p = (void *)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_1B258BD0C, (TAllocator *)v89, 0);
        float32x2_t v80 = v64;
        if ((unint64_t)__p <= 1)
        {
          if (*v64)
          {
            size_t v65 = (void *)callBackSeqAlt((uint64_t)&__p, 1uLL, dword_1B258BC2C, *((void *)this + 1), (TAllocator *)v89);
            uint64_t v67 = v66;
            std::string __p = v65;
            float32x2_t v80 = v66;
            if ((unint64_t)v65 <= 1
              && v66
              && (unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_1B258BD94, (TAllocator *)v89, 0) <= 1)
            {
              BOOL v69 = v68;
              long long v70 = (uint64_t *)TGraph::addVertex(a3, &v9[AllProductions[2]]);
              unint64_t v71 = TLexicon::addTempWord(*((TAllocator **)this + 1), v69, dword_1B258BDA8, 0, v67);
              LODWORD(v82) = 5;
              long long v83 = (unint64_t)v71;
              v84[0] = 0;
              TGraph::addEdge(a3, (uint64_t)a2, v70, (uint64_t)&v82);
              unint64_t v58 = v77;
            }
          }
        }
      }
      AllProductions = (void *)*AllProductions;
    }
    while (AllProductions);
  }
  uint64_t v72 = *((void *)this + 4);
  unint64_t v74 = *(void *)(v72 + 48);
  uint64_t v73 = (TAllocator *)(v72 + 48);
  if (v74 >= 0x801) {
    TAllocator::clear(v73);
  }
  return (uint64_t)TAllocator::clear((TAllocator *)v89);
}

void sub_1B205E694(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t addToken(__int32 **a1, TVertex *a2, TVertex *a3, TGraph *a4, TLexicon *a5)
{
  uint64_t HeadClone = TLexicon::findHeadClone(a5, a1[3]);
  if (HeadClone)
  {
    int v11 = 1;
  }
  else
  {
    uint64_t HeadClone = (uint64_t)TLexicon::addTempWord(a5, a1[3], 0, 0, 0);
    int v11 = 4;
  }
  int v13 = v11;
  uint64_t v14 = HeadClone;
  uint64_t v15 = 0;
  char v16 = 0;
  return TGraph::addEdge(a4, (uint64_t)a2, (uint64_t *)a3, (uint64_t)&v13);
}

const char *addAlt(const TFileObject *a1, TVertex *a2, TVertex *a3, TGraph *a4, TLexicon *a5, const char *a6, const char *a7, const char *a8)
{
  uint64_t v9 = *((void *)a1 + 3);
  if (v9)
  {
    char v16 = a7;
    while (1)
    {
      if (!wcscmp(*(const __int32 **)(v9 + 8), dword_1B258B7E4))
      {
        addToken((__int32 **)v9, a2, a3, a4, a5);
      }
      else
      {
        if (!wcscmp(*(const __int32 **)(v9 + 8), dword_1B258B7FC))
        {
          unint64_t v17 = addAlt((const TFileObject *)v9, a2, a3, a4, a5, a6, a7, a8);
LABEL_10:
          if (v17 > (unint64_t)a7) {
            char v16 = (const char *)v17;
          }
          goto LABEL_14;
        }
        if (!wcscmp(*(const __int32 **)(v9 + 8), dword_1B258BDC8))
        {
          addPattern(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
        }
        else if (!wcscmp(*(const __int32 **)(v9 + 8), dword_1B258BC2C))
        {
          unint64_t v17 = addSequence((const TFileObject *)v9, a2, a3, a4, a5, a6, a7, a8);
          goto LABEL_10;
        }
      }
LABEL_14:
      uint64_t v9 = *(void *)(v9 + 16);
      if (!v9) {
        return v16;
      }
    }
  }
  return a7;
}

uint64_t addPattern(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = *(void *)(a1 + 24);
  do
  {
    if (!wcscmp(*(const __int32 **)(v10 + 8), (const __int32 *)"A"))
    {
      BOOL v14 = 0;
      uint64_t v11 = *(void *)(v10 + 24);
      {
        operator new();
      }
      uint64_t v8 = TLocaleInfo::stringToULong(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11, &v14, 1);
    }
    else if (!wcscmp(*(const __int32 **)(v10 + 8), (const __int32 *)"V"))
    {
      uint64_t v9 = *(void *)(v10 + 24);
    }
    uint64_t v10 = *(void *)(v10 + 16);
  }
  while (v10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 24))(v8, v9, a2, a3, a4, a5);
}

void sub_1B205EB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void TPatternManager::expandWord(uint64_t a1, TGraph *a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(uint64_t **)(a3 + 24);
  if (a4)
  {
    char v26 = (const __int32 ***)v28;
    long long v27 = xmmword_1B25607E0;
    char v29 = 1;
    TWord::getWrittenForm(*(__int32 ***)(a3 + 56), (uint64_t)&v26);
    uint64_t v22 = (int *)v24;
    long long v23 = xmmword_1B25607E0;
    char v25 = 1;
    TBuffer<wchar_t>::assign((uint64_t)&v22, dword_1B258BDE8);
    TBuffer<wchar_t>::operator+=((uint64_t)&v22, (uint64_t)&v26);
    uint64_t v9 = *(TAllocator **)(a1 + 8);
    if (*((void *)&v23 + 1) >= (unint64_t)v23)
    {
      if (v25)
      {
        int v18 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v22, *((unint64_t *)&v23 + 1), &v18, 1uLL);
        uint64_t v10 = v22;
        --*((void *)&v23 + 1);
      }
      else
      {
        uint64_t v10 = v22;
        if ((void)v23) {
          v22[(void)v23 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v10 = v22;
      v22[*((void *)&v23 + 1)] = 0;
    }
    int v13 = TLexicon::addTempWord(v9, 0, v10, 0, 0);
    uint64_t v12 = TGraph::addVertex(a2, 0);
    int v18 = 6;
    uint64_t v19 = v13;
    uint64_t v20 = 0;
    char v21 = 0;
    TGraph::addEdge(a2, v8, (uint64_t *)v12, (uint64_t)&v18);
    TBuffer<wchar_t>::assign((uint64_t)&v22, dword_1B258BE1C);
    TBuffer<wchar_t>::operator+=((uint64_t)&v22, (uint64_t)&v26);
    BOOL v14 = *(TAllocator **)(a1 + 8);
    if (*((void *)&v23 + 1) >= (unint64_t)v23)
    {
      if (v25)
      {
        int v18 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v22, *((unint64_t *)&v23 + 1), &v18, 1uLL);
        uint64_t v15 = v22;
        --*((void *)&v23 + 1);
      }
      else
      {
        uint64_t v15 = v22;
        if ((void)v23) {
          v22[(void)v23 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v15 = v22;
      v22[*((void *)&v23 + 1)] = 0;
    }
    char v16 = TLexicon::addTempWord(v14, 0, v15, 0, 0);
    uint64_t v11 = (const char **)TGraph::addVertex(a2, 0);
    int v18 = 6;
    uint64_t v19 = v16;
    uint64_t v20 = 0;
    char v21 = 0;
    TGraph::addEdge(a2, (uint64_t)v11, v7, (uint64_t)&v18);
    if (v25 && v22 != (int *)v24 && v22) {
      MEMORY[0x1B3EA8630]();
    }
    if (v29 && v26 != (const __int32 ***)v28 && v26) {
      MEMORY[0x1B3EA8630]();
    }
  }
  else
  {
    uint64_t v11 = *(const char ***)(a3 + 24);
    uint64_t v12 = *(void *)(a3 + 16);
  }
  size_t v17 = wcslen(**(const __int32 ***)(a3 + 56));
  TFileObjectParser::TFileObjectParser(&v26, **(void **)(a3 + 56) + 4 * v17 + 4, 1, *(void *)(a1 + 8) + 224);
  addSequence(v26[3], (TVertex *)v12, (TVertex *)v11, a2, *(TLexicon **)(a1 + 8), *(const char **)(v12 + 16), *(const char **)(v12 + 16), v11[3]);
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v26);
  TGraph::deleteEdge((uint64_t)a2, a3);
}

void sub_1B205EE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (LOBYTE(STACK[0x448]) && a15 != v16 && a15) {
    MEMORY[0x1B3EA8630]();
  }
  if (LOBYTE(STACK[0x868]))
  {
    unint64_t v18 = STACK[0x450];
    if (STACK[0x450] != v15)
    {
      if (v18) {
        MEMORY[0x1B3EA8630](v18, 0x1000C8052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

void TDigitObject::~TDigitObject(TDigitObject *this)
{
  TDigitObject::~TDigitObject(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;

  *(void *)this = &unk_1F0A33728;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F0A33BB8;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t TDigitObject::isBuildable()
{
  return 1;
}

void TRomanObject::~TRomanObject(TRomanObject *this)
{
  TRomanObject::~TRomanObject(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;

  *(void *)this = &unk_1F0A33780;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F0A33BB8;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

BOOL TRomanObject::isBuildable(uint64_t a1, unsigned int *a2)
{
  BOOL v6 = 0;
  {
    operator new();
  }
  unsigned int v3 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, &v6);
  return !v6 && v3 < 0xBB8;
}

void sub_1B205F05C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TCountingObject::~TCountingObject(void **this)
{
  *this = &unk_1F0A33BB8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A33BB8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

BOOL TCountingObject::isBuildable(uint64_t a1, __int32 *a2)
{
  do
  {
    unint64_t v4 = a2;
    __int32 v5 = a2[1];
    ++a2;
    if (!v5) {
      break;
    }
    unsigned int v6 = *v4;
    {
      operator new();
    }
    unsigned int DigitExtended = v6 - 48;
    if ((int)v6 < 48) {
      break;
    }
    if (v6 > 0x39)
    {
      if (v6 < 0x660) {
        return wcslen(v4) <= *(void *)(a1 + 88);
      }
      unsigned int DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6);
    }
  }
  while (!DigitExtended);
  return wcslen(v4) <= *(void *)(a1 + 88);
}

void sub_1B205F230(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TChartSeeder::~TChartSeeder(TChartSeeder *this)
{
}

void TArrayObject::~TArrayObject(TArrayObject *this)
{
  TArrayObject::~TArrayObject(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;

  *(void *)this = &unk_1F0A33690;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F0A33BB8;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

BOOL TArrayObject::isBuildable(uint64_t a1, __int32 *a2)
{
  do
  {
    unint64_t v4 = a2;
    __int32 v5 = a2[1];
    ++a2;
    if (!v5) {
      break;
    }
    unsigned int v6 = *v4;
    {
      operator new();
    }
    unsigned int DigitExtended = v6 - 48;
    if ((int)v6 < 48) {
      break;
    }
    if (v6 > 0x39)
    {
      if (v6 < 0x660) {
        break;
      }
      unsigned int DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6);
    }
  }
  while (!DigitExtended);
  if (wcslen(v4) > 5) {
    return 0;
  }
  BOOL v11 = 0;
  {
    operator new();
  }
  unsigned int v8 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (unsigned int *)v4, &v11);
  if (v11) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 32);
  return v8 < (unint64_t)((*(void *)(a1 + 40) - v9) >> 3) && *(void *)(v9 + 8 * v8) != 0;
}

void sub_1B205F428(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

const char *TArrayObject::build(uint64_t a1, unsigned int *a2, TVertex *a3, TVertex *a4, TGraph *a5, TLexicon *a6)
{
  BOOL v14 = 0;
  {
    operator new();
  }
  unsigned int v12 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, &v14);
  return addSequence(*(const __int32 ***)(*(void *)(a1 + 32) + 8 * v12), a3, a4, a5, a6, 0, 0, 0);
}

void sub_1B205F558(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

size_t callBackSeqAltHelper(uint64_t a1, unint64_t a2, __int32 *a3, uint64_t a4, __int32 *a5)
{
  __int32 v5 = a5;
  if (a5)
  {
    wcscpy(a5, a3);
    unsigned int v8 = (char *)&v5[wcslen(v5)];
    strcpy(v8, " ");
    __int32 v5 = (__int32 *)&v8[4 * wcslen((const __int32 *)v8)];
  }
  if (a2)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 1;
    char v12 = 1;
    while (1)
    {
      if (a2 <= v11) {
        unint64_t v13 = v11;
      }
      else {
        unint64_t v13 = a2;
      }
      if (*(void *)(a1 + 16 * v9) > 1uLL) {
        return 0;
      }
      uint64_t v14 = a1 + 16 * v9;
      size_t v17 = *(__int32 **)(v14 + 8);
      uint64_t v15 = (const __int32 **)(v14 + 8);
      uint64_t v16 = v17;
      if (*v17)
      {
        int v18 = wcsncmp(v16, (const __int32 *)"S", 8uLL);
        BOOL v31 = v18 == 0;
        if (v18) {
          goto LABEL_11;
        }
        if (v10)
        {
          int v22 = wcscmp(a3, dword_1B258B7FC);
          if (!((v22 != 0) | v12 & 1))
          {
            unint64_t v23 = v9;
            while (++v23 < a2)
            {
              if (wcsncmp(*v15, (const __int32 *)"S", 8uLL)) {
                goto LABEL_29;
              }
            }
            unint64_t v23 = v13;
LABEL_29:
            if (v23 == a2) {
              goto LABEL_57;
            }
LABEL_11:
            if (!wcsncmp(v16, (const __int32 *)"S", 6uLL)
              || !wcsncmp(v16, (const __int32 *)"A", 6uLL)
              || !wcsncmp(v16, (const __int32 *)"P", 0xAuLL)
              || !wcsncmp(v16, (const __int32 *)"S", 7uLL))
            {
              size_t v21 = wcslen(v16);
              if (v5)
              {
                wcscpy(v5, v16);
                v5 += wcslen(v5);
              }
            }
            else
            {
              if (TLexicon::checkName(a4, v16, 0, 0xFFFFFFFFFFFFFFFFLL))
              {
                loggableUnicode((unsigned int *)v16, &__p);
                if (v38 >= 0) {
                  p_p = &__p;
                }
                else {
                  p_p = __p;
                }
                tknPrintf("Warning: '%s' : The tokenizer grammar constructed an invalid word name.\n", v27, p_p);
                if (SHIBYTE(v38) < 0) {
                  operator delete(__p);
                }
                return 0;
              }
              std::string __p = v39;
              long long v38 = xmmword_1B25607E0;
              char v40 = 1;
              slashEscape((uint64_t)v16, (uint64_t)&__p);
              uint64_t v19 = *((void *)&v38 + 1);
              if (v5)
              {
                unsigned int v32 = v5;
                unint64_t v33 = *((void *)&v38 + 1) + 11;
                unint64_t v34 = 0;
                char v36 = 0;
                TBuffer<wchar_t>::assign((uint64_t)&v32, (int *)"T");
                if (*((void *)&v38 + 1) >= (unint64_t)v38)
                {
                  if (v40)
                  {
                    v41[0] = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v38 + 1), v41, 1uLL);
                    uint64_t v20 = (int *)__p;
                    --*((void *)&v38 + 1);
                  }
                  else
                  {
                    uint64_t v20 = (int *)__p;
                    if ((void)v38) {
                      *((_DWORD *)__p + v38 - 1) = 0;
                    }
                  }
                }
                else
                {
                  uint64_t v20 = (int *)__p;
                  *((_DWORD *)__p + *((void *)&v38 + 1)) = 0;
                }
                uint64_t v24 = 0;
                while (v20[v24++])
                  ;
                TBuffer<wchar_t>::insert((uint64_t)&v32, v34, v20, v24 - 1);
                v41[0] = 34;
                TBuffer<wchar_t>::insert((uint64_t)&v32, v34, v41, 1uLL);
                if (v34 < v33)
                {
                  v32[v34] = 0;
                  goto LABEL_43;
                }
                if (v36)
                {
                  v41[0] = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v32, v34--, v41, 1uLL);
                  goto LABEL_43;
                }
                if (v33)
                {
                  v32[v33 - 1] = 0;
LABEL_43:
                  v5 += wcslen(v5);
                  if (v36 && v32 != (__int32 *)&v35 && v32) {
                    MEMORY[0x1B3EA8630]();
                  }
                }
                else
                {
                  v5 += wcslen(v5);
                }
              }
              if (v40 && __p != v39 && __p) {
                MEMORY[0x1B3EA8630]();
              }
              size_t v21 = v19 + 10;
            }
            v10 += v21;
            char v12 = v31;
            goto LABEL_53;
          }
          v12 |= v22 == 0;
        }
      }
LABEL_53:
      ++v9;
      ++v11;
      if (v9 == a2) {
        goto LABEL_57;
      }
    }
  }
  uint64_t v10 = 0;
LABEL_57:
  if (v5) {
    strcpy((char *)v5, "}");
  }
  if (v10) {
    return v10 + wcslen(a3) + 6;
  }
  else {
    return 0;
  }
}

void sub_1B205F9FC(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x477]) < 0) {
    operator delete((void *)STACK[0x460]);
  }
  _Unwind_Resume(a1);
}

void *quasar::filesystem::Path::Path(void *this)
{
  *this = &unk_1F0A51998;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *quasar::filesystem::Path::Path(void *a1, long long *a2)
{
  *a1 = &unk_1F0A51998;
  unsigned int v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void quasar::filesystem::Path::normalize(quasar::filesystem::Path *this@<X0>, void *a2@<X8>)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)this + 8);
  std::__fs::filesystem::__absolute(&v5, (const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(v5.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, v5.__pn_.__r_.__value_.__l.__data_, v5.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = v5.__pn_;
  }
  *a2 = &unk_1F0A51998;
  unsigned int v3 = (std::string *)(a2 + 1);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(pn.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *unsigned int v3 = pn;
  }
  if (SHIBYTE(v5.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B205FD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void quasar::filesystem::Path::parent_path(quasar::filesystem::Path *this@<X0>, void *a2@<X8>)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v4, (char *)this + 8);
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v4, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v6 = __p;
  }
  *a2 = &unk_1F0A51998;
  unsigned int v3 = (std::string *)(a2 + 1);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *unsigned int v3 = v6;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_1B205FE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

double std::__fs::filesystem::path::parent_path[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

double std::__fs::filesystem::path::stem[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__stem(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

void quasar::filesystem::Path::filename(quasar::filesystem::Path *this@<X0>, void *a2@<X8>)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v4, (char *)this + 8);
  std::__fs::filesystem::path::filename[abi:ne180100]((const std::__fs::filesystem::path *)&v4, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v6 = __p;
  }
  *a2 = &unk_1F0A51998;
  std::__fs::filesystem::path::__string_view v3 = (std::string *)(a2 + 1);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *std::__fs::filesystem::path::__string_view v3 = v6;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_1B2060134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

double std::__fs::filesystem::path::filename[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

void quasar::filesystem::Path::operator/(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v8, (char *)(a1 + 8));
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string v6 = *(std::string *)(a2 + 8);
  }
  __p.__pn_ = v6;
  memset(&v6, 0, sizeof(v6));
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)&v8, &v9);
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, v9.__pn_.__r_.__value_.__l.__data_, v9.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = v9.__pn_;
  }
  *a3 = &unk_1F0A51998;
  std::basic_string_view<_CharT, _Traits>::size_type v5 = (std::string *)(a3 + 1);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(pn.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string *v5 = pn;
  }
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_1B2060390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void quasar::filesystem::Path::operator/(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  quasar::filesystem::Path::Path(v5, a2);
  quasar::filesystem::Path::operator/(a1, (uint64_t)v5, a3);
  v5[0] = &unk_1F0A51998;
  if (v6 < 0) {
    operator delete((void *)v5[1]);
  }
}

void sub_1B2060480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::filesystem::Path::makeAbsolute(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a2 + 23))
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
      return;
    }
    goto LABEL_5;
  }
  if (*(void *)(a2 + 8))
  {
LABEL_5:
    char v6 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v11.__pn_, (char *)a2);
    if (std::__fs::filesystem::path::__root_directory(v6).__size_)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
      }
    }
    else
    {
      std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)(a1 + 8));
      std::__fs::filesystem::operator/[abi:ne180100](&v11, (uint64_t)&__p, &v9);
      std::__fs::filesystem::__absolute(&v10, &v9, 0);
      if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(a3, v10.__pn_.__r_.__value_.__l.__data_, v10.__pn_.__r_.__value_.__l.__size_);
        if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v10.__pn_.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        *(std::__fs::filesystem::path *)a3 = v10;
      }
      if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__pn_.__r_.__value_.__l.__data_);
    }
    return;
  }
  uint64_t v7 = *(const std::string::value_type **)a2;
  std::string::__init_copy_ctor_external(a3, v7, 0);
}

void sub_1B2060624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }
  _Unwind_Resume(exception_object);
}

char *quasar::filesystem::CreateTemporaryDirectory@<X0>(uint64_t a1@<X8>)
{
  std::__fs::filesystem::__temp_directory_path(&v6, 0);
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>(&__p, "tmpdir.XXXXXX");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v6, &v7);
  if (SHIBYTE(v7.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1, v7.__pn_.__r_.__value_.__l.__data_, v7.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(v7.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__pn_.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::__fs::filesystem::path *)a1 = v7;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__pn_.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 23) >= 0) {
    std::__fs::filesystem::path::__string_view v3 = (char *)a1;
  }
  else {
    std::__fs::filesystem::path::__string_view v3 = *(char **)a1;
  }
  return mkdtemp(v3);
}

void sub_1B2060750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

quasar::filesystem::TemporaryDirectoryPath *quasar::filesystem::TemporaryDirectoryPath::TemporaryDirectoryPath(quasar::filesystem::TemporaryDirectoryPath *this)
{
  quasar::filesystem::CreateTemporaryDirectory((uint64_t)__p);
  *(void *)this = &unk_1F0A51998;
  uint64_t v2 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v5) < 0)
  {
    std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v5) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void *)this + 3) = v5;
  }
  *(void *)this = &unk_1F0A51978;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  return this;
}

void sub_1B206085C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::filesystem::TemporaryDirectoryPath::~TemporaryDirectoryPath(quasar::filesystem::TemporaryDirectoryPath *this)
{
  *(void *)this = &unk_1F0A51978;
  uint64_t v2 = (int *)*((void *)this + 4);
  std::__fs::filesystem::path::__string_view v3 = (int *)*((void *)this + 5);
  while (v2 != v3)
    close(*v2++);
  std::string v4 = (void **)((char *)this + 8);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    __p.__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
  quasar::filesystem::remove_all((char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
  *(void *)this = &unk_1F0A51998;
  if (*((char *)this + 31) < 0) {
    operator delete(*v4);
  }
}

{
  uint64_t vars8;

  quasar::filesystem::TemporaryDirectoryPath::~TemporaryDirectoryPath(this);
  JUMPOUT(0x1B3EA8670);
}

uintmax_t quasar::filesystem::remove_all(char *a1)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v3.__pn_, a1);
  uintmax_t v1 = std::__fs::filesystem::__remove_all(&v3, 0);
  if (SHIBYTE(v3.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__pn_.__r_.__value_.__l.__data_);
  }
  return v1;
}

void sub_1B20609C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::filesystem::system_complete(quasar::filesystem *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&pn, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&pn.__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    pn.__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
  v11.__pn_ = pn;
  if (std::__fs::filesystem::path::__root_directory(&v11).__size_)
  {
    *a2 = &unk_1F0A51998;
    std::__fs::filesystem::path v6 = (std::string *)(a2 + 1);
    if (*((char *)this + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else
    {
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v6->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
    }
  }
  else
  {
    std::__fs::filesystem::__current_path(&v8, 0);
    std::__fs::filesystem::operator/[abi:ne180100](&v11, (uint64_t)&v8, &__p);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::string pn = __p.__pn_;
    }
    *a2 = &unk_1F0A51998;
    std::__fs::filesystem::path v7 = (std::string *)(a2 + 1);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v7, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(pn.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      *std::__fs::filesystem::path v7 = pn;
    }
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__pn_.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_1B2060BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::filesystem::exists(char *a1)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a1);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  uint64_t v1 = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v1) {
    BOOL v2 = v1 == 255;
  }
  else {
    BOOL v2 = 1;
  }
  return !v2;
}

void sub_1B2060C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::filesystem::is_directory(char *a1)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a1);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  int v1 = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v1 == 2;
}

void sub_1B2060CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::filesystem::remove(char *a1)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v3.__pn_, a1);
  BOOL v1 = std::__fs::filesystem::__remove(&v3, 0);
  if (SHIBYTE(v3.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__pn_.__r_.__value_.__l.__data_);
  }
  return v1;
}

void sub_1B2060D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::filesystem::create_directories(char *a1)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v3.__pn_, a1);
  BOOL v1 = std::__fs::filesystem::__create_directories(&v3, 0);
  if (SHIBYTE(v3.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__pn_.__r_.__value_.__l.__data_);
  }
  return v1;
}

void sub_1B2060DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::filesystem::rename(char *a1, char *a2)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__from.__pn_, a1);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a2);
  std::__fs::filesystem::__rename(&__from, (const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__from.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_1B2060E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::filesystem::last_write_time(char *a1)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v2.__pn_, a1);
  std::__fs::filesystem::__last_write_time(&v2, 0);
  if (SHIBYTE(v2.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v2.__pn_.__r_.__value_.__l.__data_);
  }
  return __divti3();
}

void sub_1B2060F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::filesystem::operator<<(void *a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    std::string __p = *(std::string *)(a2 + 8);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unsigned __int8 v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1B2060FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::filesystem::writeFileAlmostDurable(void *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (!v4)
  {
    if (quasar::gLogLevel >= 5)
    {
      memset(&v32, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Bad path", 8);
      goto LABEL_51;
    }
    return -1;
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    if (quasar::gLogLevel >= 5)
    {
      memset(&v32, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Bad stream", 10);
LABEL_51:
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
      return -1;
    }
    return -1;
  }
  if (v5 >= 0) {
    std::__fs::filesystem::path v9 = (const char *)a2;
  }
  else {
    std::__fs::filesystem::path v9 = *(const char **)a2;
  }
  if (a4 != -1)
  {
    int v10 = open_dprotected_np(v9, a3, a4, 0, 438);
    int v11 = *__error();
    if (v10 != -1 || v11 != 45)
    {
      *__error() = v11;
      if (v10 < 0) {
        goto LABEL_49;
      }
      goto LABEL_21;
    }
    if (!statfs(v9, &v32) && (v32.f_flags & 0x80) != 0)
    {
      *__error() = 45;
      goto LABEL_49;
    }
    *__error() = 45;
  }
  int v10 = open(v9, a3, 438);
  if (v10 < 0)
  {
LABEL_49:
    if (quasar::gLogLevel >= 5)
    {
      memset(&v32, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"openProtected() failed: ", 24);
      uint64_t v27 = __error();
      uint64_t v28 = strerror(*v27);
      size_t v29 = strlen(v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v28, v29);
      goto LABEL_51;
    }
    return -1;
  }
LABEL_21:
  LOBYTE(v32.f_bsize) = 0;
  std::vector<char>::vector(&v31, 0x400uLL, (const std::vector<char>::value_type *)&v32);
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 2) != 0)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      std::istream::read();
      unint64_t v13 = a1[1];
      if (v13)
      {
        unint64_t v14 = 0;
        std::vector<char>::pointer begin = v31.__begin_;
        do
        {
          while (1)
          {
            ssize_t v16 = write(v10, &begin[v14], v13 - v14);
            if (v16 < 0) {
              break;
            }
            v14 += v16;
            if (v14 >= v13) {
              goto LABEL_32;
            }
          }
        }
        while (*__error() == 4 || *__error() == 35);
        unint64_t v14 = -1;
      }
      else
      {
        unint64_t v14 = 0;
      }
LABEL_32:
      v12 += v14;
    }
    while ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 2) == 0);
  }
  if (fsync(v10))
  {
    if (quasar::gLogLevel >= 5)
    {
      memset(&v32, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      size_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"fsync() failed: ", 16);
      int v18 = __error();
      uint64_t v19 = strerror(*v18);
      size_t v20 = strlen(v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
    }
    close(v10);
LABEL_39:
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v21 = (const char *)a2;
    }
    else {
      uint64_t v21 = *(const char **)a2;
    }
    unlink(v21);
    uint64_t v12 = -1;
    goto LABEL_43;
  }
  if (close(v10))
  {
    if (quasar::gLogLevel >= 5)
    {
      memset(&v32, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"close() failed: ", 16);
      unint64_t v23 = __error();
      uint64_t v24 = strerror(*v23);
      size_t v25 = strlen(v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v24, v25);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
    }
    goto LABEL_39;
  }
LABEL_43:
  if (v31.__begin_)
  {
    v31.__end_ = v31.__begin_;
    operator delete(v31.__begin_);
  }
  return v12;
}

void sub_1B20614D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::filesystem::writeFileAlmostAtomic(void *a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  int v4 = (char)a3[23];
  uint64_t v5 = *((void *)a3 + 1);
  if (v4 >= 0) {
    uint64_t v5 = a3[23];
  }
  if (!v5) {
    goto LABEL_32;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  size_t v11 = *(void *)(a2 + 8);
  if ((v10 & 0x80u) == 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  if (v12 != v5) {
    goto LABEL_18;
  }
  if (v4 >= 0) {
    unint64_t v13 = a3;
  }
  else {
    unint64_t v13 = *(unsigned __int8 **)a3;
  }
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v13, v11)) {
      goto LABEL_18;
    }
LABEL_32:
    if (quasar::gLogLevel >= 5)
    {
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Bad path", 8);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v26);
    }
    return -1;
  }
  if (!v10) {
    goto LABEL_32;
  }
  unint64_t v14 = (unsigned __int8 *)a2;
  while (*v14 == *v13)
  {
    ++v14;
    ++v13;
    if (!--v10) {
      goto LABEL_32;
    }
  }
LABEL_18:
  uint64_t v16 = quasar::filesystem::writeFileAlmostDurable(a1, a2, 2561, a4);
  if ((v16 & 0x8000000000000000) == 0)
  {
    size_t v17 = *(char *)(a2 + 23) >= 0 ? (const std::__fs::filesystem::path *)a2 : *(const std::__fs::filesystem::path **)a2;
    int v18 = (a3[23] & 0x80u) == 0 ? (const std::__fs::filesystem::path *)a3 : *(const std::__fs::filesystem::path **)a3;
    rename(v17, v18, v15);
    if (v19)
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
        size_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"rename() failed: ", 17);
        uint64_t v21 = __error();
        int v22 = strerror(*v21);
        size_t v23 = strlen(v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v22, v23);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v26);
      }
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v24 = (const char *)a2;
      }
      else {
        uint64_t v24 = *(const char **)a2;
      }
      unlink(v24);
      return -1;
    }
  }
  return v16;
}

void sub_1B2061740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::LatticeLmeFtmDecoder::LatticeLmeFtmDecoder(uint64_t a1, long long *a2)
{
}

uint64_t quasar::LatticeLmeFtmDecoder::runImpl(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  v69[4] = *MEMORY[0x1E4F143B8];
  *(_WORD *)uint64_t v68 = 0;
  std::allocate_shared[abi:ne180100]<quasar::DecoderPassData,std::allocator<quasar::DecoderPassData>,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatureMatrix> const&,std::shared_ptr<kaldi::DecodableInterface> const&,std::shared_ptr<quasar::Decodable> const&,std::shared_ptr<kaldi::SnrTracker> const&,BOOL,BOOL,void>(a2 + 67, a2 + 65, a2, a2 + 2, a2 + 4, a2 + 6, &v68[1], &v48, v68);
  uint64_t v10 = (uint64_t *)(a1 + 3368);
  long long v11 = v48;
  long long v48 = 0uLL;
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 3392);
  *(_OWORD *)(a1 + 3384) = v11;
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    if (*((void *)&v48 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v48 + 1));
    }
  }
  unint64_t v13 = *(const quasar::DecoderChainOutput **)a3;
  unint64_t v14 = *(std::__shared_weak_count **)(a3 + 8);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,quasar::DecoderChainOutput&,void>(v13, &v48);
  long long v15 = v48;
  long long v48 = 0uLL;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 3376);
  *(_OWORD *)uint64_t v10 = v15;
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    if (*((void *)&v48 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v48 + 1));
    }
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  size_t v17 = *(std::__shared_weak_count **)(a1 + 3408);
  if (!v17)
  {
    int v18 = 0;
    goto LABEL_15;
  }
  int v18 = std::__shared_weak_count::lock(v17);
  if (!v18)
  {
LABEL_15:
    uint64_t v19 = 0;
    goto LABEL_16;
  }
  uint64_t v19 = *(void *)(a1 + 3400);
LABEL_16:
  uint64_t v47 = v18;
  (*(void (**)(uint64_t))(*(void *)a1 + 216))(a1);
  (*(void (**)(uint64_t))(*(void *)v19 + 216))(v19);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, a2, a3, a4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t *))(*(void *)v19 + 184))(v19, *(void *)(a1 + 3384), a1 + 3368, a4);
  for (uint64_t i = 3;
        i == 3;
        uint64_t i = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 200))(a1, a2, a3, a4, a5))
  {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t *, uint64_t))(*(void *)v19 + 200))(v19, *(void *)(a1 + 3384), a1 + 3368, a4, a5);
  }
  uint64_t v45 = a5;
  uint64_t v46 = (uint64_t *)a3;
  if (i == 4)
  {
    uint64_t i = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t *))(*(void *)a1 + 208))(a1, a2, a3, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t *))(*(void *)v19 + 208))(v19, *(void *)(a1 + 3384), a1 + 3368, a4);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 216))(a1);
  (*(void (**)(uint64_t))(*(void *)v19 + 216))(v19);
  size_t v65 = 0;
  uint64_t v66 = 0;
  unint64_t v67 = 0;
  uint64_t v21 = *(uint64_t **)(a1 + 3416);
  for (j = *(uint64_t **)(a1 + 3424); v21 != j; v21 += 2)
  {
    size_t v23 = (std::__shared_weak_count *)v21[1];
    if (v23)
    {
      uint64_t v24 = std::__shared_weak_count::lock(v23);
      if (v24) {
        uint64_t v25 = *v21;
      }
      else {
        uint64_t v25 = 0;
      }
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v24 = 0;
    }
    long long v26 = v66;
    if ((unint64_t)v66 >= v67)
    {
      uint64_t v28 = (v66 - v65) >> 4;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v30 = v67 - (void)v65;
      if ((uint64_t)(v67 - (void)v65) >> 3 > v29) {
        unint64_t v29 = v30 >> 3;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      *(void *)&long long v50 = &v67;
      long long v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v67, v31);
      long long v33 = &v32[16 * v28];
      *(void *)&long long v48 = v32;
      *((void *)&v48 + 1) = v33;
      *((void *)&v49 + 1) = &v32[16 * v34];
      *(void *)long long v33 = v25;
      *((void *)v33 + 1) = v24;
      *(void *)&long long v49 = v33 + 16;
      std::vector<std::shared_ptr<quasar::Decoder>>::__swap_out_circular_buffer((uint64_t *)&v65, &v48);
      long long v27 = v66;
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v48);
    }
    else
    {
      *(void *)uint64_t v66 = v25;
      *((void *)v26 + 1) = v24;
      long long v27 = v26 + 16;
    }
    uint64_t v66 = v27;
  }
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v69, v45);
  int v35 = quasar::Decoder::runChain((uint64_t **)&v65, (uint64_t)v69, *(void *)(a1 + 3384), a1 + 3368, a4);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v69);
  if (v35 && quasar::gLogLevel >= 4)
  {
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"FTM second pass decoder chain failed", 36);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v48);
  }
  uint64_t v36 = *v10;
  uint64_t v37 = *v46;
  *(unsigned char *)(v37 + 928) = *(unsigned char *)(*v10 + 872);
  std::string::operator=((std::string *)(v37 + 936), (const std::string *)(v36 + 880));
  long long v38 = *(_OWORD *)(v36 + 904);
  *(void *)(v37 + 9--*(_DWORD *)(a9 + 76) = *(void *)(v36 + 920);
  *(_OWORD *)(v37 + 960) = v38;
  if (*(unsigned char *)(a1 + 3360))
  {
    uint64_t v39 = *v10;
    uint64_t v40 = *v46;
    *(unsigned char *)(v40 + 872) = *(unsigned char *)(*v10 + 872);
    std::string::operator=((std::string *)(v40 + 880), (const std::string *)(v39 + 880));
    long long v41 = *(_OWORD *)(v39 + 904);
    *(void *)(v40 + 920) = *(void *)(v39 + 920);
    *(_OWORD *)(v40 + 904) = v41;
  }
  long long v42 = *(std::__shared_weak_count **)(a1 + 3376);
  *uint64_t v10 = 0;
  *(void *)(a1 + 33--*(_DWORD *)(a9 + 76) = 0;
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  BOOL v43 = *(std::__shared_weak_count **)(a1 + 3392);
  *(void *)(a1 + 3384) = 0;
  *(void *)(a1 + 3392) = 0;
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  *(void *)&long long v48 = &v65;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  return i;
}

void sub_1B2061D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va, a5);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  *(void *)(v5 - 136) = v5 - 168;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v5 - 136));
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  _Unwind_Resume(a1);
}

void quasar::LatticeLmeFtmDecoder::doEagerTasks(uint64_t a1)
{
  std::__fs::filesystem::path v2 = *(std::__shared_weak_count **)(a1 + 3408);
  if (v2)
  {
    if (std::__shared_weak_count::lock(v2)) {
      uint64_t v3 = *(void *)(a1 + 3400);
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokensFinal(*(void *)(v3 + 2424), *(_DWORD *)(*(void *)(v3 + 2424) + 808), 1);
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
}

void sub_1B2061FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LatticeLmeFtmDecoder::runAsyncTasks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  quasar::SpeechRecognizerModelLoader::getDecoderChain(*a8, (const void **)(a1 + 3336), 0, &v46);
  std::__fs::filesystem::path v9 = v46;
  if ((unint64_t)(v47 - (char *)v46) <= 0x1F)
  {
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v29 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"FTM chain must have at least two elements", 41);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v29);
  }
  if (!*v46
  {
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v29 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"FTM Decoder must be derived from OnlineLatticeBiglmFasterDecoder", 64);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v29);
  }
  long long v11 = (std::__shared_weak_count *)v9[1];
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 3400) = v10;
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 3408);
  *(void *)(a1 + 3408) = v11;
  if (v12)
  {
    std::__shared_weak_count::__release_weak(v12);
    std::__fs::filesystem::path v9 = v46;
  }
  unint64_t v13 = (char *)(v9 + 2);
  if (v9 + 2 != (const void **)v47)
  {
    unint64_t v14 = (void *)(a1 + 3416);
    do
    {
      if (((*(uint64_t (**)(void))(**(void **)v13 + 80))() & 1) == 0)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v29 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Second pass decoders must support eager", 39);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v29);
      }
      long long v15 = *(_OWORD *)v13;
      uint64_t v16 = *((void *)v13 + 1);
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
      }
      size_t v17 = *(void **)(a1 + 3424);
      unint64_t v18 = *(void *)(a1 + 3432);
      if ((unint64_t)v17 >= v18)
      {
        long long v28 = v15;
        uint64_t v20 = ((uint64_t)v17 - *v14) >> 4;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v18 - *v14;
        if (v22 >> 3 > v21) {
          unint64_t v21 = v22 >> 3;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        *(void *)&long long v31 = a1 + 3432;
        uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 3432, v23);
        uint64_t v25 = &v24[16 * v20];
        *(void *)&long long v29 = v24;
        *((void *)&v29 + 1) = v25;
        *((void *)&v30 + 1) = &v24[16 * v26];
        *(_OWORD *)uint64_t v25 = v28;
        *(void *)&long long v30 = v25 + 16;
        std::vector<std::weak_ptr<quasar::Decoder>>::__swap_out_circular_buffer((uint64_t *)(a1 + 3416), &v29);
        uint64_t v19 = *(void **)(a1 + 3424);
        std::__split_buffer<std::weak_ptr<quasar::Decoder>>::~__split_buffer((void **)&v29);
      }
      else
      {
        void *v17 = v15;
        v17[1] = v16;
        uint64_t v19 = v17 + 2;
        *(void *)(a1 + 34++*(_DWORD *)(result + 24) = v17 + 2;
      }
      *(void *)(a1 + 34++*(_DWORD *)(result + 24) = v19;
      v13 += 16;
    }
    while (v13 != v47);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  *(void *)&long long v29 = &v46;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  return 0;
}

void sub_1B2062340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__split_buffer<std::weak_ptr<quasar::Decoder>>::~__split_buffer((void **)va);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)(v4 - 96) = v4 - 120;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 96));
  _Unwind_Resume(a1);
}

void quasar::LatticeLmeFtmDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
}

void sub_1B20624D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::LatticeLmeFtmDecoder::~LatticeLmeFtmDecoder(quasar::LatticeLmeFtmDecoder *this)
{
  *(void *)this = &unk_1F0A55058;
  uint64_t v5 = (void **)((char *)this + 3416);
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__fs::filesystem::path v2 = (std::__shared_weak_count *)*((void *)this + 426);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 424);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 422);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 3359) < 0) {
    operator delete(*((void **)this + 417));
  }
  quasar::OnlineLatticeBiglmLmeFasterDecoder::~OnlineLatticeBiglmLmeFasterDecoder(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void **v5;

  *(void *)this = &unk_1F0A55058;
  uint64_t v5 = (void **)((char *)this + 3416);
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__fs::filesystem::path v2 = (std::__shared_weak_count *)*((void *)this + 426);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 424);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 422);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 3359) < 0) {
    operator delete(*((void **)this + 417));
  }
  quasar::OnlineLatticeBiglmLmeFasterDecoder::~OnlineLatticeBiglmLmeFasterDecoder(this);
  MEMORY[0x1B3EA8670]();
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::~OnlineLatticeBiglmLmeFasterDecoder(quasar::OnlineLatticeBiglmLmeFasterDecoder *this)
{
  *(void *)this = &unk_1F0A58658;
  std::__fs::filesystem::path v2 = (std::__shared_weak_count *)*((void *)this + 413);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<int>::destroy((uint64_t)this + 3272, *((void **)this + 410));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 3248, *((void **)this + 407));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 3208);
  if (*((char *)this + 3207) < 0) {
    operator delete(*((void **)this + 398));
  }
  if (*((char *)this + 3183) < 0) {
    operator delete(*((void **)this + 395));
  }
  if (*((char *)this + 3159) < 0) {
    operator delete(*((void **)this + 392));
  }
  if (*((char *)this + 3135) < 0) {
    operator delete(*((void **)this + 389));
  }
  if (*((char *)this + 3111) < 0) {
    operator delete(*((void **)this + 386));
  }
  if (*((char *)this + 3087) < 0) {
    operator delete(*((void **)this + 383));
  }
  if (*((char *)this + 3063) < 0) {
    operator delete(*((void **)this + 380));
  }
  std::__tree<std::string>::destroy((uint64_t)this + 3016, *((char **)this + 378));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 2976);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2936);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 366);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 2919) < 0) {
    operator delete(*((void **)this + 362));
  }
  quasar::OnlineLatticeBiglmFasterDecoder::~OnlineLatticeBiglmFasterDecoder(this);
}

{
  uint64_t vars8;

  quasar::OnlineLatticeBiglmLmeFasterDecoder::~OnlineLatticeBiglmLmeFasterDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void *std::allocate_shared[abi:ne180100]<quasar::DecoderPassData,std::allocator<quasar::DecoderPassData>,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatureMatrix> const&,std::shared_ptr<kaldi::DecodableInterface> const&,std::shared_ptr<quasar::Decodable> const&,std::shared_ptr<kaldi::SnrTracker> const&,BOOL,BOOL,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, unsigned __int8 *a7@<X7>, void *a8@<X8>, unsigned __int8 *a9)
{
  size_t v17 = operator new(0x370uLL);
  double result = std::__shared_ptr_emplace<quasar::DecoderPassData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatureMatrix> const&,std::shared_ptr<kaldi::DecodableInterface> const&,std::shared_ptr<quasar::Decodable> const&,std::shared_ptr<kaldi::SnrTracker> const&,BOOL,BOOL,std::allocator<quasar::DecoderPassData>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1B2062808(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::DecoderPassData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatureMatrix> const&,std::shared_ptr<kaldi::DecodableInterface> const&,std::shared_ptr<quasar::Decodable> const&,std::shared_ptr<kaldi::SnrTracker> const&,BOOL,BOOL,std::allocator<quasar::DecoderPassData>,0>(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, unsigned __int8 *a8, unsigned __int8 *a9)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FFB0;
  std::allocator<quasar::DecoderPassData>::construct[abi:ne180100]<quasar::DecoderPassData,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatureMatrix> const&,std::shared_ptr<kaldi::DecodableInterface> const&,std::shared_ptr<quasar::Decodable> const&,std::shared_ptr<kaldi::SnrTracker> const&,BOOL,BOOL>((uint64_t)&v11, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

void sub_1B2062898(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::DecoderPassData>::construct[abi:ne180100]<quasar::DecoderPassData,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatureMatrix> const&,std::shared_ptr<kaldi::DecodableInterface> const&,std::shared_ptr<quasar::Decodable> const&,std::shared_ptr<kaldi::SnrTracker> const&,BOOL,BOOL>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, unsigned __int8 *a9, unsigned __int8 *a10)
{
  char v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v42 = *a3;
  long long v43 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)a4[1];
  uint64_t v40 = *a4;
  long long v41 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = (std::__shared_weak_count *)a5[1];
  uint64_t v38 = *a5;
  long long v39 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = (std::__shared_weak_count *)a6[1];
  uint64_t v36 = *a6;
  long long v37 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v15 = (std::__shared_weak_count *)a7[1];
  uint64_t v34 = *a7;
  long long v35 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)a8[1];
  uint64_t v32 = *a8;
  long long v33 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v17 = *a9;
  int v18 = *a10;
  memset(v31, 0, sizeof(v31));
  uint64_t v29 = 0;
  long long v30 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  memset(v22, 0, sizeof(v22));
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  quasar::DecoderPassData::DecoderPassData(a2, &v42, &v40, &v38, &v36, &v34, &v32, v17 != 0, v18 != 0, v31, &v29, (uint64_t)__p, &v25, &v23, 4, 0, v22, v21, v20,
    0,
    0,
    (uint64_t **)v19);
  long long v44 = v19;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  v19[0] = (void **)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v19);
  v19[0] = (void **)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v19);
  v19[0] = (void **)v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v19);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  __p[0] = v31;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
}

void sub_1B2062AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,std::__shared_weak_count *a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  *(void *)(v44 - 72) = v43;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 72));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  if (a43 < 0) {
    operator delete(__p);
  }
  uint64_t v46 = *(std::__shared_weak_count **)(v44 - 200);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  std::string __p = (void *)(v44 - 192);
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v47 = *(std::__shared_weak_count **)(v44 - 160);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  long long v48 = *(std::__shared_weak_count **)(v44 - 144);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  long long v49 = *(std::__shared_weak_count **)(v44 - 128);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  long long v50 = *(std::__shared_weak_count **)(v44 - 112);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  long long v51 = *(std::__shared_weak_count **)(v44 - 96);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  long long v52 = *(std::__shared_weak_count **)(v44 - 80);
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::weak_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  std::__fs::filesystem::path v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::weak_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100]((void *)a1, v12);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    long long v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<quasar::Decoder> *,std::weak_ptr<quasar::Decoder> *,std::weak_ptr<quasar::Decoder> *>((uint64_t)&v20, a2, v15, v9);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<quasar::Decoder> *,std::weak_ptr<quasar::Decoder> *,std::weak_ptr<quasar::Decoder> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_weak(v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1B2062D10(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B2062D18(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<quasar::Decoder> *,std::weak_ptr<quasar::Decoder> *,std::weak_ptr<quasar::Decoder> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  std::__fs::filesystem::path v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
    }
    std::__fs::filesystem::path v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void *quasar::SpeechRecognizerModelLoader::SpeechRecognizerModelLoader(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *a3;
  *a3 = 0;
  a1[2] = v5;
  quasar::SpeechRecognizerActiveConfiguration::none((uint64_t)(a1 + 3));
  a1[35] = a1 + 36;
  a1[36] = 0;
  a1[39] = 0;
  a1[40] = 0;
  a1[37] = 0;
  a1[38] = a1 + 39;
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = 0;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  return a1;
}

void sub_1B2062E24(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    quasar::SpeechRecognizerModelLoader::SpeechRecognizerModelLoader(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizerModelLoader::SpeechRecognizerModelLoader()
{
}

void sub_1B2062EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    quasar::SpeechRecognizerModelLoader::SpeechRecognizerModelLoader(a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizerModelLoader::~SpeechRecognizerModelLoader(quasar::SpeechRecognizerModelLoader *this)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 400, *((void **)this + 51));
  uint64_t v4 = (void **)((char *)this + 376);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::string>::destroy((uint64_t)this + 352, *((char **)this + 45));
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>>>::destroy((uint64_t)this + 328, *((void **)this + 42));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 304, *((void **)this + 39));
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>>>::destroy((uint64_t)this + 280, *((void **)this + 36));
  quasar::SpeechRecognizerActiveConfiguration::~SpeechRecognizerActiveConfiguration((char **)this + 3);
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *quasar::SpeechRecognizerModelLoader::getFrontend@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
  if (v6)
  {
    uint64_t v7 = *(quasar::SystemConfig **)a1;
    std::operator+<char>();
    Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v7, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unint64_t v9 = quasar::PTree::size(Ptree);
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::reserve(v5 + 7, v9);
    uint64_t v10 = quasar::PTree::begin(Ptree);
    if (v10 != quasar::PTree::end(Ptree))
    {
      std::operator+<char>();
      uint64_t v11 = std::string::append(&v19, ".");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      int v13 = *(char *)(v10 + 23);
      if (v13 >= 0) {
        unint64_t v14 = (const std::string::value_type *)v10;
      }
      else {
        unint64_t v14 = *(const std::string::value_type **)v10;
      }
      if (v13 >= 0) {
        std::string::size_type v15 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        std::string::size_type v15 = *(void *)(v10 + 8);
      }
      uint64_t v16 = std::string::append(&v20, v14, v15);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      quasar::FeatureExtractorSimpleFactory::createFeatureExtractor(&__p, &v21);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      quasar::FeatureExtractor::init(v21, v7);
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return std::vector<std::shared_ptr<quasar::FeatureExtractor>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::FeatureExtractor>*,std::shared_ptr<quasar::FeatureExtractor>*>(a3, (void *)v5[7], (void *)v5[8], (v5[8] - v5[7]) >> 4);
}

void sub_1B20631B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<quasar::FeatureExtractor>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  double result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _DWORD v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B20632AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *quasar::SpeechRecognizerModelLoader::getDecodable@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  std::string __p = a2;
  double result = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 304), (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
  if (v7)
  {
    uint64_t v8 = *(std::string **)a1;
    std::operator+<char>();
    Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v8, (uint64_t)&__p);
    if (v14 < 0) {
      operator delete(__p);
    }
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = quasar::PTree::begin(Ptree);
    (*(void (**)(void **__return_ptr, uint64_t, void *, uint64_t))(*(void *)v10 + 24))(&__p, v10, a2, v11);
    quasar::Decodable::init((quasar::Decodable *)__p, v8);
  }
  uint64_t v12 = result[8];
  *a3 = result[7];
  a3[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1B20633F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::SpeechRecognizerModelLoader::getOrConstructDecoderChain@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v5 = *(quasar::SystemConfig **)a1;
  __p[0] = a2;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 328), (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)__p);
  if (v7)
  {
    std::operator+<char>();
    Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v5, (uint64_t)__p);
    if (SHIBYTE(v34) < 0) {
      operator delete(__p[0]);
    }
    unint64_t v9 = v6 + 7;
    unint64_t v10 = quasar::PTree::size(Ptree);
    std::vector<std::shared_ptr<quasar::Decoder>>::reserve(v6 + 7, v10);
    uint64_t v11 = quasar::PTree::begin(Ptree);
    uint64_t v12 = quasar::PTree::end(Ptree);
    if (v11 != v12)
    {
      uint64_t v13 = v12;
      do
      {
        (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 16))(&v32);
        std::string::size_type v15 = (_OWORD *)v6[8];
        unint64_t v14 = v6[9];
        if ((unint64_t)v15 >= v14)
        {
          uint64_t v16 = ((uint64_t)v15 - *v9) >> 4;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = v14 - *v9;
          if (v18 >> 3 > v17) {
            unint64_t v17 = v18 >> 3;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          uint64_t v36 = v6 + 9;
          std::string v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v6 + 9), v19);
          char v21 = &v20[16 * v16];
          __p[0] = v20;
          __p[1] = v21;
          long long v35 = &v20[16 * v22];
          *(_OWORD *)char v21 = v32;
          long long v32 = 0uLL;
          uint64_t v34 = v21 + 16;
          std::vector<std::shared_ptr<quasar::Decoder>>::__swap_out_circular_buffer(v6 + 7, __p);
          uint64_t v23 = v6[8];
          std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(__p);
          uint64_t v24 = (std::__shared_weak_count *)*((void *)&v32 + 1);
          v6[8] = v23;
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
        }
        else
        {
          _OWORD *v15 = v32;
          v6[8] = (uint64_t)(v15 + 1);
        }
        v11 += 88;
      }
      while (v11 != v13);
    }
  }
  if ((a3 & 1) == 0)
  {
    uint64_t v25 = v6[7];
    for (uint64_t i = v6[8]; v25 != i; v25 += 16)
    {
      long long v27 = *(quasar::Decoder **)v25;
      char v28 = *(std::__shared_weak_count **)(v25 + 8);
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::SpeechRecognizerModelLoader::initDecoderIfNeeded((quasar::SystemConfig **)a1, v27);
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return std::vector<std::shared_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>(a4, (void *)v6[7], (void *)v6[8], (v6[8] - v6[7]) >> 4);
}

void sub_1B206366C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<quasar::Decoder>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  double result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _DWORD v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<quasar::Decoder>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B2063740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

BOOL quasar::SpeechRecognizerModelLoader::initDecoderIfNeeded(quasar::SystemConfig **this, quasar::Decoder *a2)
{
  BOOL result = quasar::Decoder::isInitialized(a2);
  if (!result)
  {
    uint64_t v5 = *this;
    uint64_t v6 = *((void *)*this + 198);
    char v7 = *this;
    if (v6)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      char v7 = *this;
    }
    uint64_t v8 = *((void *)v7 + 200);
    if (v8)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      char v7 = *this;
    }
    uint64_t v9 = *((void *)v7 + 196);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    quasar::Decoder::init((uint64_t)a2, v5);
  }
  return result;
}

void sub_1B2063848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  quasar::SpeechRecognizerModelLoader::initDecoderIfNeeded(v11, v10);
  _Unwind_Resume(a1);
}

void *quasar::SpeechRecognizerModelLoader::getDecoderChain@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 352), a2, (uint64_t)a2);
  return quasar::SpeechRecognizerModelLoader::getOrConstructDecoderChain(a1, a2, a3, a4);
}

uint64_t anonymous namespace'::checkActiveConfigurationFilter<unsigned int>(uint64_t result, unsigned int *a2)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v2 = *(uint64_t **)(result + 8);
    if (v2)
    {
      unsigned int v3 = *a2;
      do
      {
        unsigned int v4 = *((_DWORD *)v2 + 7);
        if (v3 >= v4)
        {
          if (v4 >= v3) {
            return result;
          }
          ++v2;
        }
        uint64_t v2 = (uint64_t *)*v2;
      }
      while (v2);
    }
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Value ", 6);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, " not found in active configuration.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
  }
  return result;
}

void sub_1B206398C(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

uint64_t anonymous namespace'::checkActiveConfigurationFilter<std::string>(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 24))
  {
    BOOL result = std::__tree<std::string>::__count_unique<std::string>(result, (const void **)a2);
    if (!result)
    {
      memset(v8, 0, sizeof(v8));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      unsigned int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Value ", 6);
      int v4 = *(char *)(a2 + 23);
      if (v4 >= 0) {
        uint64_t v5 = (const void *)a2;
      }
      else {
        uint64_t v5 = *(const void **)a2;
      }
      if (v4 >= 0) {
        uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v6 = *(void *)(a2 + 8);
      }
      char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " not found in active configuration.");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
    }
  }
  return result;
}

uint64_t anonymous namespace'::checkActiveConfigurationFilter<BOOL>(uint64_t result, unsigned __int8 *a2)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v2 = *(uint64_t ***)(result + 8);
    if (v2)
    {
      unsigned int v3 = *a2;
      do
      {
        unsigned int v4 = *((unsigned __int8 *)v2 + 25);
        if (v3 >= v4)
        {
          if (v4 >= v3) {
            return result;
          }
          ++v2;
        }
        uint64_t v2 = (uint64_t **)*v2;
      }
      while (v2);
    }
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Value ", 6);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, " not found in active configuration.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
  }
  return result;
}

void sub_1B2063B18(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

void quasar::SpeechRecognizerModelLoader::lookupRecognizers(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 **a3@<X2>, std::string *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::string *a7@<X6>, std::string *a8@<X7>, uint64_t *a9@<X8>, std::string *a10)
{
  unsigned int v21 = a2;
  unsigned __int8 v20 = a5;
  unsigned __int8 v19 = a6;
  quasar::lookupRecognizers<quasar::Decoder>(a10, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t ***)(a1 + 376));
}

void quasar::lookupRecognizers<quasar::Decoder>(std::string *__str@<X7>, uint64_t a2@<X0>, unsigned __int8 **a3@<X1>, std::string *a4@<X2>, uint64_t a5@<X3>, uint64_t a6@<X4>, std::string *a7@<X5>, std::string *a8@<X6>, uint64_t *a9@<X8>, uint64_t ***a10)
{
  long long v59 = 0;
  long long v60 = 0;
  uint64_t v61 = 0;
  memset(&v58, 0, sizeof(v58));
  unsigned __int8 v19 = *a10;
  uint64_t v18 = a10[1];
  if (*a10 == v18) {
    goto LABEL_44;
  }
  do
  {
    if (!quasar::RecogRequestFilter::isMatch(**v19, a2, a3, a4, a5, a6, a7, a8, __str)) {
      goto LABEL_20;
    }
    if (v59 == v60) {
      goto LABEL_19;
    }
    unsigned __int8 v20 = (unsigned __int8 *)**v19;
    uint64_t v21 = v20[23];
    if ((v21 & 0x80u) == 0) {
      uint64_t v22 = v20[23];
    }
    else {
      uint64_t v22 = *((void *)v20 + 1);
    }
    std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v58.__r_.__value_.__l.__size_;
    }
    if (v22 == size)
    {
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v24 = &v58;
      }
      else {
        uint64_t v24 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      if ((v21 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v20, v24, *((void *)v20 + 1))) {
          goto LABEL_20;
        }
LABEL_19:
        std::vector<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>>::push_back[abi:ne180100]((uint64_t *)&v59, (long long *)v19);
        std::string::operator=(&v58, (const std::string *)**v19);
        goto LABEL_20;
      }
      if (!v20[23]) {
        goto LABEL_19;
      }
      while (*v20 == v24->__r_.__value_.__s.__data_[0])
      {
        ++v20;
        uint64_t v24 = (std::string *)((char *)v24 + 1);
        if (!--v21) {
          goto LABEL_19;
        }
      }
    }
LABEL_20:
    v19 += 2;
  }
  while (v19 != v18);
  uint64_t v26 = v59;
  uint64_t v25 = v60;
  if (v59 == v60)
  {
LABEL_44:
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    quasar::RecogRequestFilter::noMatchingComponentErrorMessage(a2, (uint64_t)a3, (uint64_t)a4, a5, a6, (uint64_t)a7, (uint64_t)a8, (uint64_t)__str);
    if ((v40 & 0x80u) == 0) {
      uint64_t v36 = __p;
    }
    else {
      uint64_t v36 = (void **)__p[0];
    }
    if ((v40 & 0x80u) == 0) {
      uint64_t v37 = v40;
    }
    else {
      uint64_t v37 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v36, v37);
    if ((char)v40 < 0) {
      operator delete(__p[0]);
    }
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v41);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  do
  {
    uint64_t v27 = *v26;
    if (*v26)
    {
      (*(void (**)(long long *__return_ptr))(***(void ***)(v27 + 80) + 112))(&v41);
      if (SBYTE7(v42) < 0)
      {
        BOOL v28 = *((void *)&v41 + 1) != 0;
        operator delete((void *)v41);
      }
      else
      {
        BOOL v28 = SBYTE7(v42) != 0;
      }
      uint64_t v30 = *(void *)(*v26 + 80);
      uint64_t v31 = *(void *)(*v26 + 88);
      if (v30 == v31)
      {
        char v33 = 0;
        char v32 = 0;
      }
      else
      {
        char v32 = 0;
        char v33 = 0;
        do
        {
          int v34 = (*(uint64_t (**)(void))(**(void **)v30 + 96))();
          int v35 = (*(uint64_t (**)(void))(**(void **)v30 + 104))();
          if (v34) {
            char v32 = 1;
          }
          if (v35) {
            char v33 = 1;
          }
          v30 += 16;
        }
        while (v30 != v31);
      }
      LOBYTE(v27) = v33 & 1;
      char v29 = v32 & 1;
    }
    else
    {
      char v29 = 0;
      BOOL v28 = 0;
    }
    if ((char *)v60 - (char *)v59 == 16) {
      LOBYTE(v27) = 1;
    }
    LOBYTE(v41) = v27;
    BYTE1(v41) = v29;
    BYTE2(v41) = v28;
    std::vector<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>>::emplace_back<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>> const&,quasar::RecognizerProperties>(a9, v26, (__int16 *)&v41);
    v26 += 2;
  }
  while (v26 != v25);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v41 = &v59;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
}

void sub_1B2063FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  if (*(char *)(v15 - 121) < 0) {
    operator delete(*(void **)(v15 - 144));
  }
  a15 = (void **)(v15 - 120);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRecognizerModelLoader::getSpgConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 400, (const void **)a2);
  if (a1 + 408 == result)
  {
    memset(v13, 0, sizeof(v13));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Invalid SilencePosteriorGeneratorConfig name \"", 46);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      unint64_t v10 = (const void *)a2;
    }
    else {
      unint64_t v10 = *(const void **)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "\"");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v13);
  }
  uint64_t v7 = *(void *)(result + 64);
  *a3 = *(void *)(result + 56);
  a3[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void quasar::SpeechRecognizerModelLoader::DefaultFactory::createDecoder(uint64_t a1@<X2>, void *a2@<X8>)
{
  std::operator+<char>();
  unsigned int v4 = std::string::append(&v11, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a1 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a1;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a1 + 8);
  }
  int v9 = std::string::append(&v12, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  quasar::Decoder::createDecoder(&v13, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B20641E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizerModelLoader::DefaultFactory::createDecodable(uint64_t a1@<X2>, void *a2@<X8>)
{
  std::operator+<char>();
  unsigned int v4 = std::string::append(&v11, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a1 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a1;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a1 + 8);
  }
  int v9 = std::string::append(&v12, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  quasar::Decodable::createDecodable(&v13, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B206430C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizerModelLoader::setActiveConfiguration(uint64_t a1, uint64_t a2)
{
  std::__optional_storage_base<std::set<unsigned int>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<unsigned int>,false> const&>(a1 + 24, a2);
  std::__optional_storage_base<std::set<std::string>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<std::string>,false> const&>(a1 + 56, a2 + 32);
  std::__optional_storage_base<std::set<std::string>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<std::string>,false> const&>(a1 + 88, a2 + 64);
  std::__optional_storage_base<std::set<BOOL>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<BOOL>,false> const&>(a1 + 120, a2 + 96);
  std::__optional_storage_base<std::set<BOOL>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<BOOL>,false> const&>(a1 + 152, a2 + 128);
  std::__optional_storage_base<std::set<std::string>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<std::string>,false> const&>(a1 + 184, a2 + 160);
  std::__optional_storage_base<std::set<std::string>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<std::string>,false> const&>(a1 + 216, a2 + 192);
  std::__optional_storage_base<std::set<std::string>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<std::string>,false> const&>(a1 + 248, a2 + 224);
  unsigned int v4 = *(quasar **)a1;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__clear[abi:ne180100]((uint64_t *)(a1 + 376));
  v8[0] = 0;
  v8[1] = 0;
  v7[1] = 0;
  _DWORD v7[2] = v8;
  v6[3] = (uint64_t)v7;
  v7[0] = 0;
  std::set<std::string>::set[abi:ne180100](v6, (const void ***)(a1 + 352));
  quasar::collectRecogInfoFromSysConfigHelper(v4, &v5);
}

void sub_1B206506C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void ****a17, std::__shared_weak_count *a18, void ***a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  a17 = &a19;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  a19 = &a24;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a24 = (void **)&a63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a24);
  JUMPOUT(0x1B206513CLL);
}

void sub_1B20650A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a71 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)&STACK[0x208]);
  JUMPOUT(0x1B206516CLL);
}

void sub_1B20650B8()
{
}

void sub_1B20650C0()
{
}

void sub_1B20650C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  quasar::PTree::~PTree((quasar::PTree *)&STACK[0x208]);
  quasar::RecogRequestFilter::~RecogRequestFilter((quasar::RecogRequestFilter *)&a29);
  a29 = (void **)(v29 - 192);
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100](&a29);
  std::__tree<std::string>::destroy(v29 - 168, *(char **)(v29 - 160));
  std::__tree<std::string>::destroy(v29 - 144, *(char **)(v29 - 136));
  std::__tree<std::string>::destroy(v29 - 120, *(char **)(v29 - 112));
  _Unwind_Resume(a1);
}

void sub_1B20650D0()
{
}

void sub_1B20650D8()
{
}

void sub_1B20650E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)&v34);
  JUMPOUT(0x1B206516CLL);
}

void sub_1B206514C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  a29 = (void **)&a63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a29);
  JUMPOUT(0x1B2065160);
}

void quasar::eraseMapKeysNotInSet<std::vector<std::shared_ptr<quasar::FeatureExtractor>>>(uint64_t **a1, uint64_t a2)
{
  unsigned int v3 = (uint64_t *)(a1 + 1);
  uint64_t v2 = *a1;
  if (*a1 != (uint64_t *)(a1 + 1))
  {
    uint64_t v6 = a2 + 8;
    do
    {
      if (v6 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a2, (const void **)v2 + 4))
      {
        std::string::size_type v8 = std::__tree<std::string>::__remove_node_pointer(a1, v2);
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,0>((uint64_t)(v2 + 4));
        operator delete(v2);
      }
      else
      {
        uint64_t v7 = (uint64_t *)v2[1];
        if (v7)
        {
          do
          {
            std::string::size_type v8 = v7;
            uint64_t v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            std::string::size_type v8 = (uint64_t *)v2[2];
            BOOL v9 = *v8 == (void)v2;
            uint64_t v2 = v8;
          }
          while (!v9);
        }
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
}

void quasar::eraseMapKeysNotInSet<std::shared_ptr<quasar::Decodable>>(uint64_t **a1, uint64_t a2)
{
  unsigned int v3 = (uint64_t *)(a1 + 1);
  uint64_t v2 = *a1;
  if (*a1 != (uint64_t *)(a1 + 1))
  {
    uint64_t v6 = a2 + 8;
    do
    {
      if (v6 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a2, (const void **)v2 + 4))
      {
        std::string::size_type v8 = std::__tree<std::string>::__remove_node_pointer(a1, v2);
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)(v2 + 4));
        operator delete(v2);
      }
      else
      {
        uint64_t v7 = (uint64_t *)v2[1];
        if (v7)
        {
          do
          {
            std::string::size_type v8 = v7;
            uint64_t v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            std::string::size_type v8 = (uint64_t *)v2[2];
            BOOL v9 = *v8 == (void)v2;
            uint64_t v2 = v8;
          }
          while (!v9);
        }
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
}

void quasar::SpeechRecognizerModelLoader::DefaultFactory::~DefaultFactory(quasar::SpeechRecognizerModelLoader::DefaultFactory *this)
{
}

void std::__optional_storage_base<std::set<unsigned int>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<unsigned int>,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2 && *(unsigned char *)(a1 + 24))
    {
      unsigned int v4 = (unsigned int *)(a2 + 8);
      unsigned int v3 = *(unsigned int **)a2;
      std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t **)a1, v3, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    std::__tree<int>::destroy(a1, *(void **)(a1 + 8));
    *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  else
  {
    std::set<unsigned int>::set[abi:ne180100]((uint64_t *)a1, a2);
    *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 1;
  }
}

void std::__optional_storage_base<std::set<std::string>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<std::string>,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2 && *(unsigned char *)(a1 + 24))
    {
      unsigned int v4 = (void *)(a2 + 8);
      unsigned int v3 = *(const void ***)a2;
      std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)a1, v3, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
    *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  else
  {
    std::set<std::string>::set[abi:ne180100]((uint64_t *)a1, (const void ***)a2);
    *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 1;
  }
}

void std::__optional_storage_base<std::set<BOOL>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<BOOL>,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2 && *(unsigned char *)(a1 + 24))
    {
      unsigned int v4 = (unsigned __int8 *)(a2 + 8);
      unsigned int v3 = *(unsigned __int8 **)a2;
      std::__tree<BOOL>::__assign_multi<std::__tree_const_iterator<BOOL,std::__tree_node<BOOL,void *> *,long>>((uint64_t **)a1, v3, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    std::__tree<int>::destroy(a1, *(void **)(a1 + 8));
    *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  else
  {
    std::set<BOOL>::set[abi:ne180100]((uint64_t *)a1, a2);
    *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = 1;
  }
}

uint64_t **std::__tree<BOOL>::__assign_multi<std::__tree_const_iterator<BOOL,std::__tree_node<BOOL,void *> *,long>>(uint64_t **result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      std::string::size_type v8 = (uint64_t *)v6[1];
    }
    else {
      std::string::size_type v8 = v6;
    }
    unint64_t v14 = result;
    uint64_t v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      uint64_t v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        BOOL v9 = a2;
        do
        {
          *((unsigned char *)v8 + 25) = v9[25];
          std::__tree<BOOL>::__node_insert_multi(v5, (uint64_t)v8);
          std::string::size_type v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            uint64_t v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          long long v10 = (unsigned __int8 *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              long long v10 = *(unsigned __int8 **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (unsigned __int8 *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              BOOL v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          BOOL v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<BOOL>::__emplace_multi<BOOL const&>(v5, a2 + 25);
      std::string v12 = (unsigned __int8 *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          std::string v13 = v12;
          std::string v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          std::string v13 = (unsigned __int8 *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B206564C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<BOOL>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  unsigned int v3 = a1 + 1;
  unsigned int v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        unsigned int v3 = (uint64_t **)v4;
        if (*(unsigned __int8 *)(a2 + 25) >= *((unsigned __int8 *)v4 + 25)) {
          break;
        }
        unsigned int v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      unsigned int v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t *std::__tree<BOOL>::__emplace_multi<BOOL const&>(uint64_t **a1, unsigned __int8 *a2)
{
  unsigned int v4 = (uint64_t *)operator new(0x20uLL);
  unsigned int v5 = *a2;
  *((unsigned char *)v4 + 25) = v5;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (v5 >= *((unsigned __int8 *)v7 + 25)) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        std::string::size_type v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    std::string::size_type v8 = v6 + 1;
  }
  else
  {
    std::string::size_type v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void **std::vector<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>>::__swap_out_circular_buffer(a1, v18);
    BOOL v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B2065868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>>::emplace_back<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>> const&,quasar::RecognizerProperties>(uint64_t *a1, void *a2, __int16 *a3)
{
  unint64_t v8 = a1[2];
  unint64_t v6 = a1 + 2;
  unint64_t v7 = v8;
  unint64_t v9 = *(v6 - 1);
  if (v9 >= v8)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 3);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v14;
    }
    v23[4] = v6;
    if (v16) {
      long long v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v6, v16);
    }
    else {
      long long v17 = 0;
    }
    uint64_t v18 = &v17[24 * v13];
    v23[0] = v17;
    v23[1] = v18;
    v23[3] = &v17[24 * v16];
    *(void *)uint64_t v18 = *a2;
    uint64_t v19 = a2[1];
    *((void *)v18 + 1) = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned __int8 v20 = &v17[24 * v13];
    __int16 v21 = *a3;
    v20[18] = *((unsigned char *)a3 + 2);
    *((_WORD *)v20 + 8) = v21;
    v23[2] = v18 + 24;
    std::vector<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>>::__swap_out_circular_buffer(a1, v23);
    uint64_t v12 = a1[1];
    std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer(v23);
  }
  else
  {
    *(void *)unint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v9 + 8) = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    __int16 v11 = *a3;
    *(unsigned char *)(v9 + 18) = *((unsigned char *)a3 + 2);
    *(_WORD *)(v9 + 16) = v11;
    uint64_t v12 = v9 + 24;
    a1[1] = v9 + 24;
  }
  a1[1] = v12;
  return v12 - 24;
}

void sub_1B20659E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>*>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>*>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>*>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>*>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>>,std::reverse_iterator<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>>,std::reverse_iterator<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>*>,std::reverse_iterator<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>*>,std::reverse_iterator<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>>,std::reverse_iterator<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>*>,std::reverse_iterator<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>*>,std::reverse_iterator<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 24);
      a3 -= 24;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      __int16 v9 = *(_WORD *)(a3 + 16);
      *(unsigned char *)(v7 - 6) = *(unsigned char *)(a3 + 18);
      *(_WORD *)(v7 - 8) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 24;
      *((void *)&v15 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>>,std::reverse_iterator<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>>,std::reverse_iterator<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>,std::reverse_iterator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<quasar::RecognizerComponents<quasar::Decoder>,std::allocator<quasar::RecognizerComponents<quasar::Decoder>>,quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::Decoder>> &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void **a4@<X4>, uint64_t *a5@<X5>, void **a6@<X6>, void *a7@<X8>)
{
  long long v14 = operator new(0x98uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::Decoder>>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::Decoder>> &,std::allocator<quasar::RecognizerComponents<quasar::Decoder>>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1B2065D0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::Decoder>>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::Decoder>> &,std::allocator<quasar::RecognizerComponents<quasar::Decoder>>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, uint64_t *a6, void **a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60BB8;
  std::allocator<quasar::RecognizerComponents<quasar::Decoder>>::construct[abi:ne180100]<quasar::RecognizerComponents<quasar::Decoder>,quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::Decoder>> &>((uint64_t)&v9, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_1B2065D90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::Decoder>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::Decoder>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::Decoder>>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::RecognizerComponents<quasar::Decoder>>::construct[abi:ne180100]<quasar::RecognizerComponents<quasar::Decoder>,quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::Decoder>> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6, uint64_t *a7, void **a8)
{
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v18 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v17 = *(std::string *)a5;
  }
  long long v14 = (std::__shared_weak_count *)a7[1];
  uint64_t v15 = *a7;
  unint64_t v16 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::RecognizerComponents<quasar::Decoder>::RecognizerComponents(a2, a3, (uint64_t)&v18, (uint64_t)&v17, a6, &v15, a8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1B2065F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::RecognizerComponents<quasar::Decoder>::RecognizerComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, void *a6, void **a7)
{
  std::allocate_shared[abi:ne180100]<quasar::RecogRequestFilter,std::allocator<quasar::RecogRequestFilter>,quasar::SystemConfig::Version const&,std::string const&,void>(&v15);
  *(_OWORD *)a1 = v15;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    long long v12 = *(_OWORD *)a4;
    *(void *)(a1 + 32) = *(void *)(a4 + 16);
    *(_OWORD *)(a1 + 16) = v12;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  std::vector<std::shared_ptr<quasar::FeatureExtractor>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::FeatureExtractor>*,std::shared_ptr<quasar::FeatureExtractor>*>((void *)(a1 + 40), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  *(void *)(a1 + 64) = *a6;
  uint64_t v13 = a6[1];
  *(void *)(a1 + 72) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<std::shared_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>((void *)(a1 + 80), *a7, a7[1], ((char *)a7[1] - (char *)*a7) >> 4);
  quasar::removeSpaces(a4, (std::string *)(a1 + 104));
  return a1;
}

void sub_1B2066084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  __int16 v11 = *(std::__shared_weak_count **)(v9 + 8);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<quasar::SilencePosteriorGeneratorConfig,std::allocator<quasar::SilencePosteriorGeneratorConfig>,quasar::SystemConfig &,std::string,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::SilencePosteriorGeneratorConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,std::allocator<quasar::SilencePosteriorGeneratorConfig>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B2066138(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SilencePosteriorGeneratorConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,std::allocator<quasar::SilencePosteriorGeneratorConfig>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61EC0;
  quasar::SilencePosteriorGeneratorConfig::SilencePosteriorGeneratorConfig(a1 + 3);
  return a1;
}

void sub_1B2066194(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SilencePosteriorGeneratorConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61EC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SilencePosteriorGeneratorConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61EC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::SilencePosteriorGeneratorConfig>::__on_zero_shared(uint64_t a1)
{
  char v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void quasar::RegexEnumerator::RegexEnumerator(uint64_t a1, long long *a2, quasar::PTree *a3)
{
  uint64_t v5 = quasar::NameEnumerator::NameEnumerator((void *)a1, a2);
  void *v5 = &unk_1F0A531C8;
  *((_OWORD *)v5 + 2) = 0u;
  uint64_t v6 = (char *)(v5 + 4);
  void v5[11] = 0;
  v5[10] = v5 + 11;
  v5[12] = 0;
  uint64_t v7 = (std::string *)(v5 + 7);
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  uint64_t v8 = quasar::PTree::begin(a3);
  uint64_t v9 = quasar::PTree::end(a3);
  if (v8 == v9)
  {
LABEL_28:
    if (quasar::filesystem::exists(v6) && !quasar::filesystem::is_directory(v6)) {
      quasar::RegexEnumerator::parseConfigFile((quasar::RegexEnumerator *)a1);
    }
    memset(v23, 0, 272);
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Rule config file does not exist or it is a directory. File path = ", 66);
    int v20 = *(char *)(a1 + 55);
    if (v20 >= 0) {
      uint64_t v21 = (uint64_t)v6;
    }
    else {
      uint64_t v21 = *(void *)(a1 + 32);
    }
    if (v20 >= 0) {
      uint64_t v22 = *(unsigned __int8 *)(a1 + 55);
    }
    else {
      uint64_t v22 = *(void *)(a1 + 40);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v23);
  }
  while (1)
  {
    if (*(char *)(v8 + 23) < 0)
    {
      uint64_t v11 = *(void *)(v8 + 8);
      if (v11 == 9)
      {
        uint64_t v10 = *(uint64_t **)v8;
LABEL_14:
        uint64_t v13 = *v10;
        int v14 = *((unsigned __int8 *)v10 + 8);
        if (v13 != 0x7079742D656C7572 || v14 != 101) {
          goto LABEL_27;
        }
        String = (const std::string *)quasar::PTree::getString((quasar::PTree *)(v8 + 24));
        std::string v17 = v7;
        goto LABEL_26;
      }
      if (v11 != 16) {
        goto LABEL_27;
      }
      if (**(void **)v8 != 0x6E6F632D656C7572 || *(void *)(*(void *)v8 + 8) != 0x656C69662D676966) {
        goto LABEL_27;
      }
    }
    else
    {
      if (*(unsigned char *)(v8 + 23) != 16)
      {
        uint64_t v10 = (uint64_t *)v8;
        if (*(unsigned char *)(v8 + 23) != 9) {
          goto LABEL_27;
        }
        goto LABEL_14;
      }
      if (*(void *)v8 != 0x6E6F632D656C7572 || *(void *)(v8 + 8) != 0x656C69662D676966) {
        goto LABEL_27;
      }
    }
    String = (const std::string *)quasar::PTree::getString((quasar::PTree *)(v8 + 24));
    std::string v17 = (std::string *)v6;
LABEL_26:
    std::string::operator=(v17, String);
LABEL_27:
    v8 += 88;
    if (v8 == v9) {
      goto LABEL_28;
    }
  }
}

void sub_1B2066484(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v3, *(void **)(v1 + 88));
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  quasar::NameEnumerator::~NameEnumerator((void **)v1);
  _Unwind_Resume(a1);
}

void quasar::RegexEnumerator::parseConfigFile(quasar::RegexEnumerator *this)
{
  quasar::PTree::PTree((quasar::PTree *)v23);
  if (quasar::gLogLevel >= 5)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v7 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Read rule config file = ", 24);
    int v3 = *((char *)this + 55);
    if (v3 >= 0) {
      unsigned int v4 = (char *)this + 32;
    }
    else {
      unsigned int v4 = (char *)*((void *)this + 4);
    }
    if (v3 >= 0) {
      uint64_t v5 = *((unsigned __int8 *)this + 55);
    }
    else {
      uint64_t v5 = *((void *)this + 5);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  quasar::PTree::readJsonFromFile();
}

void sub_1B2066774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long __p,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a34 && a33 < 0) {
    operator delete((void *)__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a23);
  quasar::PTree::~PTree((quasar::PTree *)(v34 - 128));
  _Unwind_Resume(a1);
}

void quasar::RegexEnumerator::RegexEnumerator(uint64_t a1, long long *a2, long long *a3, long long *a4)
{
  long long v7 = quasar::NameEnumerator::NameEnumerator((void *)a1, a2);
  *long long v7 = &unk_1F0A531C8;
  long long v8 = (char *)(v7 + 4);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v7 + 4), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    v7[6] = *((void *)a3 + 2);
    *(_OWORD *)long long v8 = v9;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v10 = *a4;
    *(void *)(a1 + 72) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 56) = v10;
  }
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (quasar::filesystem::exists(v8) && !quasar::filesystem::is_directory(v8)) {
    quasar::RegexEnumerator::parseConfigFile((quasar::RegexEnumerator *)a1);
  }
  memset(v15, 0, sizeof(v15));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Rule config file does not exist or it is a directory. File path = ", 66);
  int v12 = *(char *)(a1 + 55);
  if (v12 >= 0) {
    uint64_t v13 = (uint64_t)v8;
  }
  else {
    uint64_t v13 = *(void *)(a1 + 32);
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    uint64_t v14 = *(void *)(a1 + 40);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
}

void sub_1B2066A84(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v4, *(void **)(v1 + 88));
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  quasar::NameEnumerator::~NameEnumerator((void **)v1);
  _Unwind_Resume(a1);
}

void quasar::RegexEnumerator::getStepMap(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a4, a2))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a4, a2, (uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(__p, "rules");
    quasar::PTree::getChild(a3, (uint64_t)__p);
  }
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)std::string __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"clone-from field is invalid. Rule config file path=", 51);
  std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a1 + 32);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void quasar::RegexEnumerator::cloneStep(uint64_t a1, void *a2, uint64_t **a3)
{
  int v3 = (void *)*a2;
  uint64_t v31 = a2 + 1;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v4 = a3;
    uint64_t v30 = a3 + 1;
    while (1)
    {
      if (*((char *)v3 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v34, (const std::string::value_type *)v3[4], v3[5]);
      }
      else {
        std::string v34 = *(std::string *)(v3 + 4);
      }
      uint64_t v5 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v4, (const void **)&v34.__r_.__value_.__l.__data_);
      uint64_t v6 = v5;
      long long v7 = (const void *)v3[7];
      if (v7) {
        break;
      }
      long long v10 = 0;
      if (v30 == (uint64_t **)v5)
      {
        *(_OWORD *)uint64_t v29 = 0u;
        char v32 = 0;
        long long v12 = 0;
        goto LABEL_62;
      }
      long long v12 = 0;
      long long v13 = 0;
      char v32 = 0;
      long long v8 = 0;
      long long v11 = 0;
LABEL_24:
      long long v14 = *(void **)(v6 + 56);
      if (v14)
      {
        uint64_t v27 = v11;
        BOOL v28 = v8;
        if (v15)
        {
          long long v16 = *(std::__shared_weak_count **)(v6 + 64);
          if (v16)
          {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v14 = *(void **)(v6 + 56);
            if (!v14)
            {
              long long v17 = 0;
              long long v18 = 0;
              goto LABEL_41;
            }
          }
        }
        else
        {
          long long v16 = 0;
        }
        if (v18)
        {
          long long v17 = *(std::__shared_weak_count **)(v6 + 64);
          if (v17)
          {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v14 = *(void **)(v6 + 56);
            if (!v14)
            {
LABEL_41:
              long long v19 = 0;
              goto LABEL_42;
            }
          }
        }
        else
        {
          long long v17 = 0;
        }
        if (!v14) {
          goto LABEL_41;
        }
        long long v19 = *(std::__shared_weak_count **)(v6 + 64);
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        }
LABEL_42:
        if (v28 && v15) {
          quasar::ReplaceStep::mergeStep(v15, v28);
        }
        if (v27 && v18) {
          quasar::SplitStep::mergeStep(v18, v27);
        }
        if (v13 && v14) {
          quasar::WholeStringStep::mergeStep((unsigned __int8 *)v14, v13);
        }
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        uint64_t v4 = a3;
LABEL_66:
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
      }
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      long long v23 = (void *)v3[1];
      if (v23)
      {
        do
        {
          long long v24 = v23;
          long long v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          long long v24 = (void *)v3[2];
          BOOL v25 = *v24 == (void)v3;
          int v3 = v24;
        }
        while (!v25);
      }
      int v3 = v24;
      if (v24 == v31) {
        return;
      }
    }
    if (v8)
    {
      long long v9 = (std::__shared_weak_count *)v3[8];
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        long long v7 = (const void *)v3[7];
        if (!v7)
        {
          char v32 = v9;
          long long v10 = 0;
          long long v11 = 0;
LABEL_17:
          long long v13 = 0;
          goto LABEL_22;
        }
      }
    }
    else
    {
      long long v9 = 0;
    }
    char v32 = v9;
    if (v11)
    {
      long long v10 = (std::__shared_weak_count *)v3[8];
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        long long v7 = (const void *)v3[7];
        if (!v7) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      long long v10 = 0;
    }
    if (v13)
    {
      long long v12 = (std::__shared_weak_count *)v3[8];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
LABEL_23:
      if (v30 == (uint64_t **)v6)
      {
        if (v8)
        {
          std::allocate_shared[abi:ne180100]<quasar::ReplaceStep,std::allocator<quasar::ReplaceStep>,quasar::ReplaceStep&,void>((uint64_t)v8, &v33);
          goto LABEL_60;
        }
        if (v11)
        {
          std::allocate_shared[abi:ne180100]<quasar::SplitStep,std::allocator<quasar::SplitStep>,quasar::SplitStep&,void>((uint64_t)v11, &v33);
          goto LABEL_60;
        }
        if (v13)
        {
          std::allocate_shared[abi:ne180100]<quasar::WholeStringStep,std::allocator<quasar::WholeStringStep>,quasar::WholeStringStep&,void>((uint64_t)v13, &v33);
LABEL_60:
          long long v20 = v33;
        }
        else
        {
          long long v20 = 0uLL;
        }
        *(_OWORD *)uint64_t v29 = v20;
LABEL_62:
        *(void *)&long long v33 = &v34;
        long long v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (const void **)&v34.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v33);
        long long v16 = (std::__shared_weak_count *)v29[1];
        if (v29[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v29[1] + 1, 1uLL, memory_order_relaxed);
        }
        long long v22 = (std::__shared_weak_count *)v21[8];
        *(_OWORD *)(v21 + 7) = *(_OWORD *)v29;
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        goto LABEL_66;
      }
      goto LABEL_24;
    }
LABEL_22:
    long long v12 = 0;
    goto LABEL_23;
  }
}

void sub_1B2067294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::RegexEnumerator::insertStep(uint64_t a1, const void **a2, uint64_t a3, uint64_t **a4)
{
  int v6 = *((unsigned __int8 *)a2 + 23);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((unsigned __int8 *)a2 + 23) <= 0xBu)
    {
      if (v6 != 7)
      {
        if (v6 != 11) {
          goto LABEL_63;
        }
        if (*a2 != (const void *)0x2D746C612D657270
          || *(const void **)((char *)a2 + 3) != (const void *)0x6E65672D746C612DLL)
        {
          goto LABEL_63;
        }
        goto LABEL_48;
      }
LABEL_49:
      if (*(_DWORD *)a2 != 762604641 || *(_DWORD *)((char *)a2 + 3) != 1852139309) {
        goto LABEL_63;
      }
      goto LABEL_71;
    }
    if (v6 != 12)
    {
      long long v12 = (uint64_t *)a2;
      if (v6 != 18) {
        goto LABEL_63;
      }
      goto LABEL_56;
    }
    if ((*a2 != (const void *)0x746C612D74736F70 || *((_DWORD *)a2 + 2) != 1852139309)
      && (*a2 != (const void *)0x6D6F632D74736F70 || *((_DWORD *)a2 + 2) != 1701734754))
    {
LABEL_63:
      if (quasar::gLogLevel >= 5)
      {
        long long v71 = 0u;
        long long v72 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v56 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
        long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"We do not support step = ", 25);
        int v23 = *((char *)a2 + 23);
        if (v23 >= 0) {
          uint64_t v24 = (uint64_t)a2;
        }
        else {
          uint64_t v24 = (uint64_t)*a2;
        }
        if (v23 >= 0) {
          uint64_t v25 = *((unsigned __int8 *)a2 + 23);
        }
        else {
          uint64_t v25 = (uint64_t)a2[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v56);
      }
      return;
    }
LABEL_48:
    std::allocate_shared[abi:ne180100]<quasar::ReplaceStep,std::allocator<quasar::ReplaceStep>,std::string const&,quasar::PTree const&,void>(&v56);
    goto LABEL_73;
  }
  long long v8 = a2[1];
  if (v8 == (const void *)11
    && *(void *)*a2 == 0x2D746C612D657270
    && *(void *)((char *)*a2 + 3) == 0x6E65672D746C612DLL)
  {
    goto LABEL_48;
  }
  if (v8 == (const void *)12)
  {
    if (*(void *)*a2 == 0x746C612D74736F70 && *((_DWORD *)*a2 + 2) == 1852139309) {
      goto LABEL_48;
    }
    long long v8 = a2[1];
    if (v8 == (const void *)12)
    {
      if (*(void *)*a2 == 0x6D6F632D74736F70 && *((_DWORD *)*a2 + 2) == 1701734754) {
        goto LABEL_48;
      }
      if ((v6 & 0x80) == 0)
      {
        if (v6 != 7) {
          goto LABEL_63;
        }
        goto LABEL_49;
      }
    }
  }
  if (v8 == (const void *)7)
  {
    if (*(_DWORD *)*a2 == 762604641 && *(_DWORD *)((char *)*a2 + 3) == 1852139309)
    {
LABEL_71:
      std::allocate_shared[abi:ne180100]<quasar::SplitStep,std::allocator<quasar::SplitStep>,std::string const&,quasar::PTree const&,void>(&v56);
      goto LABEL_73;
    }
    long long v8 = a2[1];
  }
  if (v8 != (const void *)18) {
    goto LABEL_63;
  }
  long long v12 = (uint64_t *)*a2;
LABEL_56:
  uint64_t v17 = *v12;
  uint64_t v18 = v12[1];
  int v19 = *((unsigned __int16 *)v12 + 8);
  if (v17 != 0x74732D656C6F6877 || v18 != 0x6C75722D676E6972 || v19 != 29541) {
    goto LABEL_63;
  }
  std::allocate_shared[abi:ne180100]<quasar::WholeStringStep,std::allocator<quasar::WholeStringStep>,std::string const&,quasar::PTree const&,std::string&,void>(&v56);
LABEL_73:
  uint64_t v26 = (const void *)v56;
  long long v54 = v56;
  uint64_t v27 = (std::__shared_weak_count *)*((void *)&v56 + 1);
  if (!(void)v56)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
    long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Please check config file for regex rule, step name = ", 53);
    int v49 = *((char *)a2 + 23);
    if (v49 >= 0) {
      uint64_t v50 = (uint64_t)a2;
    }
    else {
      uint64_t v50 = (uint64_t)*a2;
    }
    if (v49 >= 0) {
      uint64_t v51 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v51 = (uint64_t)a2[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v56);
  }
  uint64_t v28 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a4, a2);
  uint64_t v29 = v28;
  if (a4 + 1 == (uint64_t **)v28)
  {
    *(void *)&long long v56 = a2;
    uint64_t v38 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, a2, (uint64_t)&std::piecewise_construct, (long long **)&v56);
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v39 = (std::__shared_weak_count *)v38[8];
    *(_OWORD *)(v38 + 7) = v54;
    goto LABEL_123;
  }
  uint64_t v30 = *(const void **)(v28 + 56);
  if (v30
  {
    char v32 = *(std::__shared_weak_count **)(v29 + 64);
    long long v52 = v31;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v52 = 0;
    char v32 = 0;
  }
  std::string v34 = 0;
  if (v33 && v27)
  {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string v34 = v27;
  }
  int v35 = *(const void **)(v29 + 56);
  long long v53 = v34;
  long long v55 = v32;
  if (!v35)
  {
    uint64_t v36 = 0;
    goto LABEL_91;
  }
  if (!v36)
  {
LABEL_91:
    uint64_t v37 = 0;
    goto LABEL_92;
  }
  uint64_t v37 = *(std::__shared_weak_count **)(v29 + 64);
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_92:
  long long v41 = 0;
  if (v40 && v27)
  {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v41 = v27;
  }
  long long v42 = *(const void **)(v29 + 56);
  if (!v42)
  {
    long long v43 = 0;
    goto LABEL_100;
  }
  if (!v43)
  {
LABEL_100:
    long long v44 = 0;
    goto LABEL_101;
  }
  long long v44 = *(std::__shared_weak_count **)(v29 + 64);
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_101:
  long long v46 = 0;
  if (v45)
  {
    long long v47 = v52;
    if (v27)
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v46 = v27;
    }
    if (!v52) {
      goto LABEL_107;
    }
    goto LABEL_105;
  }
  long long v47 = v52;
  if (v52)
  {
LABEL_105:
    if (v33) {
      quasar::ReplaceStep::mergeStep(v47, v33);
    }
  }
LABEL_107:
  if (v36 && v40) {
    quasar::SplitStep::mergeStep(v36, v40);
  }
  if (v43 && v45) {
    quasar::WholeStringStep::mergeStep(v43, v45);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  long long v39 = v55;
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
LABEL_123:
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
}

void sub_1B2067A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::RegexEnumerator::getEnumerations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "pre-alt-gen");
    uint64_t v7 = a1 + 80;
    uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 80, (const void **)__p);
    if (SBYTE7(v34) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = a1 + 88;
    if (a1 + 88 == v8)
    {
      uint64_t v31 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v30, (long long *)a2);
    }
    else if ((*(unsigned int (**)(void, uint64_t, long long **))(**(void **)(v8 + 56) + 16))(*(void *)(v8 + 56), a2, &v30) == -1|| v31 - (void)v30 != 24)
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to generate enumeration in step = ", 41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"pre-alt-gen", 11);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      uint64_t v11 = 0xFFFFFFFFLL;
      goto LABEL_48;
    }
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "alt-gen");
    uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v7, (const void **)__p);
    if (SBYTE7(v34) < 0) {
      operator delete(__p[0]);
    }
    if (v9 == v16)
    {
      uint64_t v28 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v27, v30);
    }
    else if ((*(unsigned int (**)(void, long long *, std::string **))(**(void **)(v16 + 56) + 16))(*(void *)(v16 + 56), v30, &v27) == -1)
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to generate enumeration in step = ", 41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"alt-gen", 7);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      uint64_t v11 = 0xFFFFFFFFLL;
      goto LABEL_47;
    }
    memset(&v26, 0, sizeof(v26));
    std::string::basic_string[abi:ne180100]<0>(__p, "post-alt-gen");
    uint64_t v18 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v7, (const void **)__p);
    if (SBYTE7(v34) < 0) {
      operator delete(__p[0]);
    }
    if (v9 == v18)
    {
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v26, v26.__end_, v27, (long long *)v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
    }
    else
    {
      int v19 = v27;
      long long v20 = v28;
      if (v27 != v28)
      {
        uint64_t v21 = 0;
        while ((*(unsigned int (**)(void, std::string *, std::vector<std::string> *))(**(void **)(v18 + 56)
                                                                                                  + 16))(*(void *)(v18 + 56), v19, &v26) != -1)
        {
          if (++v21 != 0xAAAAAAAAAAAAAAABLL * (((char *)v26.__end_ - (char *)v26.__begin_) >> 3)) {
            break;
          }
          if (++v19 == v20) {
            goto LABEL_40;
          }
        }
        if (quasar::gLogLevel >= 5)
        {
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v37 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          *(_OWORD *)std::string __p = 0u;
          long long v34 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to generate enumeration in step = ", 41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"post-alt-gen", 12);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
        uint64_t v11 = 0xFFFFFFFFLL;
        goto LABEL_46;
      }
    }
LABEL_40:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a3, (const void **)a2, a2);
    std::vector<std::string>::pointer begin = v26.__begin_;
    for (std::vector<std::string>::pointer i = v26.__end_; begin != i; ++begin)
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a3, (uint64_t *)(a3 + 8), (const void **)&begin->__r_.__value_.__l.__data_, (uint64_t)begin);
    uint64_t v11 = *(unsigned int *)(a3 + 16);
LABEL_46:
    __p[0] = &v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_47:
    __p[0] = &v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_48:
    __p[0] = &v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    return v11;
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Skip empty input text = ", 24);
    int v13 = *(char *)(a2 + 23);
    if (v13 >= 0) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = *(void *)a2;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v15 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  return 0xFFFFFFFFLL;
}

void sub_1B2068080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::string __p = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::RegexEnumerator::addEnumerations(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) & 1) == 0)
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__v, "Enumeration is calculated already.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
  }
  uint64_t v5 = *a2;
  if (*a2 != a2[1])
  {
    memset(&v20, 0, sizeof(v20));
    std::to_string(&__p, *(_DWORD *)(v5 + 48));
    std::vector<std::string>::pointer end = v20.__end_;
    if (v20.__end_ >= v20.__end_cap_.__value_)
    {
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20.__end_ - (char *)v20.__begin_) >> 3);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v20.__end_cap_.__value_ - (char *)v20.__begin_) >> 3) > v9) {
        unint64_t v9 = 0x5555555555555556 * (((char *)v20.__end_cap_.__value_ - (char *)v20.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v20.__end_cap_.__value_ - (char *)v20.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      *(void *)&__v[32] = &v20.__end_cap_;
      if (v10) {
        uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v20.__end_cap_, v10);
      }
      else {
        uint64_t v11 = 0;
      }
      long long v12 = &v11[24 * v8];
      *(void *)__v = v11;
      *(void *)&__v[8] = v12;
      *(void *)&__v[24] = &v11[24 * v10];
      long long v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v12 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)long long v12 = v13;
      memset(&__p, 0, sizeof(__p));
      *(void *)&__v[16] = v12 + 24;
      std::vector<std::string>::__swap_out_circular_buffer(&v20, (std::__split_buffer<std::string> *)__v);
      uint64_t v14 = v20.__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
      v20.__end_ = v14;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v20.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
      v20.__end_ = end + 1;
    }
    uint64_t v15 = *a2;
    uint64_t v16 = a2[1];
    if (*a2 != v16)
    {
      uint64_t v17 = v20.__end_;
      do
      {
        if (v17 >= v20.__end_cap_.__value_)
        {
          uint64_t v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v20, (long long *)v15);
        }
        else
        {
          if (*(char *)(v15 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v15, *(void *)(v15 + 8));
          }
          else
          {
            long long v18 = *(_OWORD *)v15;
            v17->__r_.__value_.__r.__words[2] = *(void *)(v15 + 16);
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          }
          ++v17;
        }
        v20.__end_ = v17;
        v15 += 80;
      }
      while (v15 != v16);
    }
    std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(a3, &v20, (long long **)&v20);
    *(void *)__v = &v20;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  }
}

void sub_1B20683E8(void *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, char a7, uint64_t a8, void *__pa, std::__split_buffer<std::wstring> *a10)
{
}

void sub_1B2068424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a9 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::RegexEnumerator::~RegexEnumerator(quasar::RegexEnumerator *this)
{
  quasar::RegexEnumerator::~RegexEnumerator(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A531C8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  quasar::NameEnumerator::~NameEnumerator((void **)this);
}

uint64_t quasar::RegexEnumerator::isCalculatedInQuasar(quasar::RegexEnumerator *this)
{
  return 0;
}

void *std::allocate_shared[abi:ne180100]<quasar::ReplaceStep,std::allocator<quasar::ReplaceStep>,quasar::ReplaceStep&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::ReplaceStep>::__shared_ptr_emplace[abi:ne180100]<quasar::ReplaceStep&,std::allocator<quasar::ReplaceStep>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2068558(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::ReplaceStep>::__shared_ptr_emplace[abi:ne180100]<quasar::ReplaceStep&,std::allocator<quasar::ReplaceStep>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F958;
  std::allocator<quasar::ReplaceStep>::construct[abi:ne180100]<quasar::ReplaceStep,quasar::ReplaceStep&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B20685C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ReplaceStep>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ReplaceStep>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::ReplaceStep>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocator<quasar::ReplaceStep>::construct[abi:ne180100]<quasar::ReplaceStep,quasar::ReplaceStep&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_1F0A595E0;
  uint64_t v5 = (std::string *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + ++*(_DWORD *)(result + 24) = *(void *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a2 = &unk_1F0A51F40;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t result = std::vector<std::shared_ptr<quasar::ReplaceStep::RegexRule>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::ReplaceStep::RegexRule>*,std::shared_ptr<quasar::ReplaceStep::RegexRule>*>((void *)(a2 + 32), *(void **)(a3 + 32), *(void **)(a3 + 40), (uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 4);
  *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
  return result;
}

void sub_1B2068724(_Unwind_Exception *a1)
{
  quasar::RegexStep::~RegexStep(v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<quasar::ReplaceStep::RegexRule>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::ReplaceStep::RegexRule>*,std::shared_ptr<quasar::ReplaceStep::RegexRule>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::ReplaceStep::RegexRule>>,std::shared_ptr<quasar::ReplaceStep::RegexRule>*,std::shared_ptr<quasar::ReplaceStep::RegexRule>*,std::shared_ptr<quasar::ReplaceStep::RegexRule>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B20687A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::ReplaceStep::RegexRule>>,std::shared_ptr<quasar::ReplaceStep::RegexRule>*,std::shared_ptr<quasar::ReplaceStep::RegexRule>*,std::shared_ptr<quasar::ReplaceStep::RegexRule>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  char v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  _DWORD v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *char v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::ReplaceStep::RegexRule>>,std::shared_ptr<quasar::ReplaceStep::RegexRule>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::ReplaceStep::RegexRule>>,std::shared_ptr<quasar::ReplaceStep::RegexRule>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>,std::shared_ptr<kaldi::quasar::ComputeEngineItf>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<quasar::SplitStep,std::allocator<quasar::SplitStep>,quasar::SplitStep&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::SplitStep>::__shared_ptr_emplace[abi:ne180100]<quasar::SplitStep&,std::allocator<quasar::SplitStep>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20688D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SplitStep>::__shared_ptr_emplace[abi:ne180100]<quasar::SplitStep&,std::allocator<quasar::SplitStep>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62780;
  std::allocator<quasar::SplitStep>::construct[abi:ne180100]<quasar::SplitStep,quasar::SplitStep&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B2068940(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SplitStep>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SplitStep>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::SplitStep>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

std::string *std::allocator<quasar::SplitStep>::construct[abi:ne180100]<quasar::SplitStep,quasar::SplitStep&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_1F0A595E0;
  uint64_t v5 = (std::string *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + ++*(_DWORD *)(result + 24) = *(void *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)a2 = &unk_1F0A59638;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 32), *(long long **)(a3 + 32), *(long long **)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
  uint64_t v8 = *(void *)(a3 + 56);
  *(_WORD *)(a2 + 64) = *(_WORD *)(a3 + 64);
  *(void *)(a2 + 56) = v8;
  return result;
}

void sub_1B2068AB0(_Unwind_Exception *a1)
{
  quasar::RegexStep::~RegexStep(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::WholeStringStep,std::allocator<quasar::WholeStringStep>,quasar::WholeStringStep&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::WholeStringStep>::__shared_ptr_emplace[abi:ne180100]<quasar::WholeStringStep&,std::allocator<quasar::WholeStringStep>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2068B0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::WholeStringStep>::__shared_ptr_emplace[abi:ne180100]<quasar::WholeStringStep&,std::allocator<quasar::WholeStringStep>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60100;
  std::allocator<quasar::WholeStringStep>::construct[abi:ne180100]<quasar::WholeStringStep,quasar::WholeStringStep&>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_1B2068B7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::WholeStringStep>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WholeStringStep>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60100;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::WholeStringStep>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::allocator<quasar::WholeStringStep>::construct[abi:ne180100]<quasar::WholeStringStep,quasar::WholeStringStep&>(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = &unk_1F0A595E0;
  uint64_t v5 = (std::string *)(a2 + 1);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    a2[3] = *(void *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *a2 = &unk_1F0A53208;
  return std::unordered_map<std::string,std::string>::unordered_map((uint64_t)(a2 + 4), a3 + 32);
}

void sub_1B2068CC0(_Unwind_Exception *a1)
{
  quasar::RegexStep::~RegexStep(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::ReplaceStep,std::allocator<quasar::ReplaceStep>,std::string const&,quasar::PTree const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::ReplaceStep>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::ReplaceStep>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B2068D24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::ReplaceStep>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::ReplaceStep>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F958;
  quasar::ReplaceStep::ReplaceStep(a1 + 3);
  return a1;
}

void sub_1B2068D80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::SplitStep,std::allocator<quasar::SplitStep>,std::string const&,quasar::PTree const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::SplitStep>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::SplitStep>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B2068DE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SplitStep>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::SplitStep>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62780;
  quasar::SplitStep::SplitStep(a1 + 3);
  return a1;
}

void sub_1B2068E40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::WholeStringStep,std::allocator<quasar::WholeStringStep>,std::string const&,quasar::PTree const&,std::string&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::WholeStringStep>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::string&,std::allocator<quasar::WholeStringStep>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B2068EB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::WholeStringStep>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::string&,std::allocator<quasar::WholeStringStep>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60100;
  quasar::WholeStringStep::WholeStringStep(a1 + 3);
  return a1;
}

void sub_1B2068F10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void NBestHyp::NBestHyp(NBestHyp *this)
{
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 28) = 0u;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
}

void NBestWordInfo::~NBestWordInfo(NBestWordInfo *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2) {
    free(v2);
  }
  int v3 = (void *)*((void *)this + 4);
  if (v3) {
    free(v3);
  }
}

uint64_t NBestWordInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    char v4 = *(void **)(a1 + 24);
    if (v4) {
      free(v4);
    }
    uint64_t v5 = *(void **)(a1 + 32);
    if (v5) {
      free(v5);
    }
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
    long long v6 = *(char **)(a2 + 24);
    if (v6) {
      long long v6 = strdup(v6);
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v6;
    long long v7 = *(char **)(a2 + 32);
    if (v7) {
      long long v7 = strdup(v7);
    }
    *(void *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  return a1;
}

void NBestHyp::~NBestHyp(NBestHyp *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    MEMORY[0x1B3EA8630](v2, 0x1000C8052888210);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = v3 - 16;
    uint64_t v5 = *(void *)(v3 - 8);
    if (v5)
    {
      uint64_t v6 = v3 - 56;
      uint64_t v7 = 56 * v5;
      do
      {
        NBestWordInfo::~NBestWordInfo((NBestWordInfo *)(v6 + v7));
        v7 -= 56;
      }
      while (v7);
    }
    MEMORY[0x1B3EA8630](v4, 0x1010C8070205E2DLL);
  }
  uint64_t v8 = *((void *)this + 9);
  if (v8) {
    MEMORY[0x1B3EA8670](v8, 0x1000C4000313F17);
  }
}

uint64_t NBestHyp::parse(NBestHyp *this, Vocab *a2, Vocab *a3, int a4, double a5, const char *a6, int a7)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  long long v13 = (void **)wstringsTLS();
  uint64_t v14 = (const char **)*v13;
  if (!*v13)
  {
    uint64_t v15 = v13;
    uint64_t v14 = (const char **)malloc_type_calloc(0x86474uLL, 8uLL, 0x50040EE9192B6uLL);
    quasar::ReplaceStep *v15 = v14;
  }
  uint64_t v16 = (char ***)justWordsTLS();
  long long v18 = *v16;
  if (!*v16)
  {
    int v19 = v16;
    long long v18 = (char **)malloc_type_calloc(0x86475uLL, 8uLL, 0x50040EE9192B6uLL);
    *int v19 = v18;
  }
  v84[0] = 0;
  v84[1] = 0;
  int v85 = 0;
  int v20 = Vocab::parseWords(a2, (char *)v14, (const char **)0x86474, v17);
  if (v20 != 550004)
  {
    if (a7) {
      long long v24 = 0;
    }
    else {
      long long v24 = a6;
    }
    if (a4 != 2)
    {
      if (a4 == 1 || !a4 && **v14 == 40)
      {
        uint64_t v25 = (v20 - 1);
        if (v25 <= 0xC350)
        {
          *(double *)__s1 = 0.0;
          if (sscanf(*v14, "(%lf)", __s1) != 1)
          {
            long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"bad Decipher score: ", 20);
            size_t v41 = strlen(*v14);
            long long v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)*v14, v41);
            std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(*v42 - 24)));
            long long v43 = std::locale::use_facet(&v96, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
            std::locale::~locale(&v96);
            std::ostream::put();
            std::ostream::flush();
            goto LABEL_31;
          }
          float v27 = *(double *)__s1 * 0.0444695315;
          *((double *)this + 2) = v27;
          *((float *)this + 10) = v27;
          *((void *)this + 3) = 0;
          *((void *)this + 4) = v25;
          Vocab::copy((uint64_t)v18, v14 + 1, v26);
LABEL_17:
          *((double *)this + 2) = *((double *)this + 2) - a5;
          float v28 = *((float *)this + 10) - a5;
          *((float *)this + 10) = v28;
          if (v24)
          {
            long long v29 = *v18;
            if (*v18)
            {
              int v30 = 0;
              int v31 = *v24;
              do
              {
                while (1)
                {
                  long long v32 = strchr(v29, v31);
                  if (!v32) {
                    break;
                  }
                  LODWORD(v25) = v25 + 1;
                  long long v29 = v32 + 1;
                }
                long long v29 = v18[++v30];
              }
              while (v29);
            }
          }
          if (*(void *)this) {
            MEMORY[0x1B3EA8630](*(void *)this, 0x1000C8052888210);
          }
          operator new[]();
        }
      }
      else
      {
        LODWORD(v25) = v20 - 3;
        if ((v20 - 3) < 0xC351)
        {
          if (parseLogP(*v14, (double *)this + 2))
          {
            long long v36 = v14 + 1;
            if (parseLogP(v14[1], (double *)this + 3))
            {
              long long v36 = v14 + 2;
              long long v37 = v14[2];
              if (*v37 != 45 && sscanf(v37, "%lu", (char *)this + 32) == 1)
              {
                float v39 = *((double *)this + 2);
                *((float *)this + 10) = v39;
                Vocab::copy((uint64_t)v18, v14 + 3, v38);
                goto LABEL_17;
              }
              long long v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"bad word count: ", 16);
            }
            else
            {
              long long v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"bad LM score: ", 14);
            }
            long long v45 = v46;
            uint64_t v14 = v36;
          }
          else
          {
            long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"bad acoustic score: ", 20);
          }
          size_t v48 = strlen(*v14);
          long long v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)*v14, v48);
          std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(void *)(*v49 - 24)));
          uint64_t v50 = std::locale::use_facet(&v96, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
          std::locale::~locale(&v96);
          std::ostream::put();
          std::ostream::flush();
          goto LABEL_31;
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"more than ", 10);
      uint64_t v21 = (void *)std::ostream::operator<<();
      long long v22 = " words in hyp\n";
      uint64_t v23 = 14;
      goto LABEL_30;
    }
    unsigned int v33 = v20 - 1;
    unsigned int v34 = (v20 - 1) / 0xBu;
    if ((v20 - 1) % 0xBu)
    {
      long long v22 = "badly formatted hyp\n";
      uint64_t v21 = (void *)MEMORY[0x1E4FBA240];
      uint64_t v23 = 20;
      goto LABEL_30;
    }
    if (v33 > 0x8647A)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"more than ", 10);
      long long v44 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" tokens in hyp\n", 15);
      goto LABEL_31;
    }
    double v83 = 0.0;
    if (sscanf(*v14, "(%lf)", &v83) != 1)
    {
      uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"bad Decipher score: ", 20);
      size_t v52 = strlen(*v14);
      long long v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)*v14, v52);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v53);
      goto LABEL_31;
    }
    if (v33 < 0xB)
    {
      LODWORD(v25) = 0;
      int v80 = 0;
      int v47 = 0;
      uint64_t v81 = 0;
LABEL_78:
      if (a7 && v81 && LOBYTE(v96.__locale_))
      {
        *(void *)(v81 + ++*(_DWORD *)(result + 24) = strdup((const char *)&v96);
        *(void *)(v81 + 32) = strdup(__s1);
      }
      v18[v25] = 0;
      float v75 = v83 * 0.0444695315;
      *((float *)this + 10) = v75;
      float v76 = (double)v80 * 0.0444695315;
      float v77 = (double)v47 * 0.0444695315;
      *((double *)this + 2) = v76;
      *((double *)this + 3) = v77;
      *((void *)this + 4) = v25;
      goto LABEL_17;
    }
    uint64_t v81 = 0;
    int v80 = 0;
    LODWORD(v25) = 0;
    if (v34 <= 1) {
      uint64_t v54 = 1;
    }
    else {
      uint64_t v54 = v34;
    }
    int v47 = 0;
    long long v55 = v14 + 6;
    float v56 = -1.0;
    float v57 = 0.0;
    int v79 = a7;
    while (1)
    {
      long long v58 = (char *)*(v55 - 5);
      double v59 = atof(*(v55 - 2));
      double v60 = atof(*v55);
      long long v61 = strrchr(v58, 45);
      BOOL v62 = v61 && v61[1] - 48 <= 9 && v61[2] == 0;
      float v63 = v59;
      float v64 = v60;
      if (v56 >= v63 || v62)
      {
        if (!v62)
        {
          if (v81)
          {
            int v78 = v47;
            long long v71 = strchr(v58, 91);
            if (v71) {
              long long v72 = v71 + 1;
            }
            else {
              long long v72 = v58;
            }
            uint64_t v73 = strrchr(v72, 93);
            if (v73) {
              *uint64_t v73 = 0;
            }
            unint64_t v74 = strrchr(v72, 95);
            if (v74) {
              char *v74 = 0;
            }
            addPhones((char *)&v96, v72, v57 > v63);
            snprintf(__str, 0x14uLL, "%d", (int)((float)((float)(v64 - v63) / 0.01) + 0.5) + 1);
            addPhones(__s1, __str, v57 > v63);
            float v64 = v56;
            float v57 = v63;
            int v47 = v78;
            a7 = v79;
            goto LABEL_77;
          }
          uint64_t v81 = 0;
        }
        float v64 = v56;
        a7 = v79;
      }
      else
      {
        int v82 = atol(v55[4]);
        int v65 = atol(v55[2]);
        v18[v25] = v58;
        a7 = v79;
        if (v79)
        {
          if (v81 && LOBYTE(v96.__locale_))
          {
            int v66 = v65;
            *(void *)(v81 + ++*(_DWORD *)(result + 24) = strdup((const char *)&v96);
            *(void *)(v81 + 32) = strdup(__s1);
            int v65 = v66;
          }
          uint64_t v93 = 0;
          uint64_t v94 = 0;
          *(_DWORD *)std::string __str = -1;
          float v87 = v63;
          float v88 = (float)(v64 - v63) + 0.01;
          float v67 = (double)v82 * 0.0444695315;
          int v68 = v65;
          float v69 = (double)v65 * 0.0444695315;
          float v89 = v67;
          float v90 = v69;
          uint64_t v91 = 0;
          uint64_t v92 = 0;
          uint64_t v70 = Array<NBestWordInfo>::operator[]((int *)v84, v25);
          NBestWordInfo::operator=(v70, (uint64_t)__str);
          uint64_t v81 = Array<NBestWordInfo>::operator[]((int *)v84, v25);
          __s1[0] = 0;
          LOBYTE(v96.__locale_) = 0;
          NBestWordInfo::~NBestWordInfo((NBestWordInfo *)__str);
          int v65 = v68;
        }
        v80 += v82;
        v47 += v65;
        LODWORD(v25) = v25 + 1;
      }
LABEL_77:
      v55 += 11;
      float v56 = v64;
      if (!--v54) {
        goto LABEL_78;
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"more than ", 10);
  uint64_t v21 = (void *)std::ostream::operator<<();
  long long v22 = " fields per line\n";
  uint64_t v23 = 17;
LABEL_30:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
LABEL_31:
  Array<NBestWordInfo>::~Array((uint64_t)v84);
  return 0;
}

void sub_1B2069D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::locale a42)
{
}

uint64_t addPhones(char *a1, const char *a2, int a3)
{
  int v6 = strlen(a1);
  uint64_t result = strlen(a2);
  int v8 = result;
  size_t v9 = (v6 + 1);
  if ((result + v9 - 101) >= 0xFFFFFF9A)
  {
    if (a3)
    {
      if (v6)
      {
        memmove(&a1[(result + 1)], a1, v9);
        uint64_t result = (uint64_t)strcpy(a1, a2);
        a1[v8] = *phoneSeparator[0];
        return result;
      }
      uint64_t v10 = a1;
    }
    else
    {
      if (v6) {
        a1[v6] = *phoneSeparator[0];
      }
      else {
        size_t v9 = 0;
      }
      uint64_t v10 = &a1[v9];
    }
    return (uint64_t)strcpy(v10, a2);
  }
  return result;
}

void NBestHyp::freeThread(NBestHyp *this)
{
  uint64_t v1 = (void **)wstringsTLS();
  if (*v1)
  {
    free(*v1);
    *uint64_t v1 = 0;
  }
  uint64_t v2 = (void **)justWordsTLS();
  if (*v2)
  {
    free(*v2);
    *uint64_t v2 = 0;
  }
  TimeSentStartFlagTLS = (void **)firstTimeSentStartFlagTLS();
  if (*TimeSentStartFlagTLS)
  {
    free(*TimeSentStartFlagTLS);
    *TimeSentStartFlagTLS = 0;
  }
}

float NBestHyp::rescore(NBestHyp *this, LM *a2, double a3, double a4)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  double v8 = (*(float (**)(LM *, void, long long *))(*(void *)a2 + 80))(a2, *(void *)this, &v17) * a3;
  if (a3 == 0.0) {
    double v8 = 0.0;
  }
  *((double *)this + 3) = v8;
  double v9 = *((double *)&v17 + 1);
  *((void *)this + 4) = (unint64_t)*((double *)&v18 + 1);
  if (v9 > 0.0)
  {
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"warning: hyp contains zero prob words: ", 39);
    (*(void (**)(void))(**((void **)a2 + 3) + 328))();
    uint64_t v11 = operator<<(v10, *(_DWORD **)this);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    long long v12 = std::locale::use_facet(&v24, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v24);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(double *)&v19 > 0.0)
  {
    long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"warning: hyp contains OOV words: ", 33);
    (*(void (**)(void))(**((void **)a2 + 3) + 328))();
    uint64_t v14 = operator<<(v13, *(_DWORD **)this);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
    uint64_t v15 = std::locale::use_facet(&v24, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v24);
    std::ostream::put();
    std::ostream::flush();
  }
  float result = *((double *)this + 2) + *((double *)this + 3) + a4 * (double)*((unint64_t *)this + 4);
  *((float *)this + 10) = result;
  return result;
}

void sub_1B206A1E4(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)(v1 - 56));
  _Unwind_Resume(a1);
}

double NBestHyp::decipherFix(NBestHyp *this, LM *a2, double a3, double a4)
{
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  double v9 = (*(float (**)(LM *, void, long long *))(*(void *)a2 + 80))(a2, *(void *)this, &v19) * a3;
  if (a3 == 0.0) {
    double v9 = 0.0;
  }
  *((double *)this + 3) = v9;
  *((void *)this + 4) = (unint64_t)*((double *)&v20 + 1);
  unsigned int v10 = Vocab::length(*(void *)this, v8);
  if (*((double *)&v19 + 1) > 0.0)
  {
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"warning: hyp contains zero prob words: ", 39);
    (*(void (**)(void))(**((void **)a2 + 3) + 328))();
    long long v12 = operator<<(v11, *(_DWORD **)this);
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
    long long v13 = std::locale::use_facet(&v26, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v26);
    std::ostream::put();
    std::ostream::flush();
    *((double *)this + 3) = -INFINITY;
  }
  if (*(double *)&v21 <= 0.0)
  {
    double v17 = *((double *)this + 3);
  }
  else
  {
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"warning: hyp contains OOV words: ", 33);
    (*(void (**)(void))(**((void **)a2 + 3) + 328))();
    uint64_t v15 = operator<<(v14, *(_DWORD **)this);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    uint64_t v16 = std::locale::use_facet(&v26, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v26);
    std::ostream::put();
    std::ostream::flush();
    double v17 = -INFINITY;
    *((double *)this + 3) = -INFINITY;
  }
  double result = *((float *)this + 10) - v17 - a4 * (double)v10;
  *((double *)this + 2) = result;
  return result;
}

void sub_1B206A4DC(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)(v1 - 72));
  _Unwind_Resume(a1);
}

void Array<NBestWordInfo>::alloc()
{
}

uint64_t Array<NBestWordInfo>::~Array(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = v2 - 16;
    uint64_t v4 = *(void *)(v2 - 8);
    if (v4)
    {
      uint64_t v5 = v2 - 56;
      uint64_t v6 = 56 * v4;
      do
      {
        NBestWordInfo::~NBestWordInfo((NBestWordInfo *)(v5 + v6));
        v6 -= 56;
      }
      while (v6);
    }
    MEMORY[0x1B3EA8630](v3, 0x1010C8070205E2DLL);
  }
  return a1;
}

uint64_t Array<NBestWordInfo>::operator[](int *a1, uint64_t a2)
{
  unint64_t v2 = a2 - *a1;
  if (v2 >= a1[1])
  {
    a1[1] = v2 + 1;
    if (v2 >= a1[4]) {
      Array<NBestWordInfo>::alloc();
    }
  }
  return *((void *)a1 + 1) + 56 * v2;
}

uint64_t quasar::QuasarTextProcImpl::QuasarTextProcImpl(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::string::operator=((std::string *)(a1 + 24), a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc");
  quasar::SystemConfig::enforceMinVersion(a3, 10, 0, (uint64_t)__p);
  if (SBYTE7(v73) < 0) {
    operator delete(__p[0]);
  }
  memset(&v98, 0, sizeof(v98));
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc");
  uint64_t Ptree = quasar::SystemConfig::getPtree(a3, (uint64_t)__p);
  int v91 = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)(Ptree + 8), *(void *)(Ptree + 16));
  }
  else
  {
    long long v9 = *(_OWORD *)(Ptree + 8);
    v92.__r_.__value_.__r.__words[2] = *(void *)(Ptree + 24);
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v9;
  }
  memset(&v93, 0, sizeof(v93));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v93, *(void *)(Ptree + 32), *(void *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(Ptree + 40) - *(void *)(Ptree + 32)) >> 3));
  char v94 = *(unsigned char *)(Ptree + 56);
  if (SBYTE7(v73) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = quasar::PTree::begin((quasar::PTree *)&v91);
  uint64_t v11 = quasar::PTree::end((quasar::PTree *)&v91);
  if (v10 != v11)
  {
    unsigned __int8 v12 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if ((v12 & 0x80u) == 0) {
      size_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = a2->__r_.__value_.__l.__size_;
    }
    if ((v12 & 0x80u) == 0) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    do
    {
      uint64_t v15 = *(unsigned __int8 *)(v10 + 23);
      if ((v15 & 0x80u) == 0) {
        uint64_t v16 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        uint64_t v16 = *(void *)(v10 + 8);
      }
      if (v16 == size)
      {
        if ((v15 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v10, v14, *(void *)(v10 + 8)))
          {
LABEL_28:
            long long v18 = &v90;
            std::string::basic_string[abi:ne180100]((uint64_t)&v90, size + 1);
            if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v18 = (std::string *)v90.__r_.__value_.__r.__words[0];
            }
            if (size)
            {
              if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v19 = a2;
              }
              else {
                long long v19 = (const std::string *)a2->__r_.__value_.__r.__words[0];
              }
              memmove(v18, v19, size);
            }
            *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + size) = 46;
            int v20 = *(char *)(a4 + 23);
            if (v20 >= 0) {
              long long v21 = (const std::string::value_type *)a4;
            }
            else {
              long long v21 = *(const std::string::value_type **)a4;
            }
            if (v20 >= 0) {
              std::string::size_type v22 = *(unsigned __int8 *)(a4 + 23);
            }
            else {
              std::string::size_type v22 = *(void *)(a4 + 8);
            }
            long long v23 = std::string::append(&v90, v21, v22);
            long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            v63.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v24;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            if (*(char *)(a4 + 23) < 0)
            {
              if (!*(void *)(a4 + 8)) {
                goto LABEL_45;
              }
LABEL_43:
              long long v25 = ".";
            }
            else
            {
              if (*(unsigned char *)(a4 + 23)) {
                goto LABEL_43;
              }
LABEL_45:
              long long v25 = "";
            }
            std::locale v26 = std::string::append(&v63, v25);
            long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            v65.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            float v28 = std::string::append(&v65, "rule-fst");
            long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            *(void *)&long long v73 = *((void *)&v28->__r_.__value_.__l + 2);
            *(_OWORD *)std::string __p = v29;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v65.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v63.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v90.__r_.__value_.__l.__data_);
            }
            quasar::PTree::getChild((uint64_t)&v91, (uint64_t)__p);
          }
        }
        else
        {
          if (!*(unsigned char *)(v10 + 23)) {
            goto LABEL_28;
          }
          uint64_t v17 = 0;
          while (*(unsigned __int8 *)(v10 + v17) == v14->__r_.__value_.__s.__data_[v17])
          {
            if (v15 == ++v17) {
              goto LABEL_28;
            }
          }
        }
      }
      v10 += 88;
    }
    while (v10 != v11);
  }
  uint64_t v30 = v95;
  if (v95 != v96)
  {
    int v31 = (kaldi::Input *)kaldi::Input::Input(v89, v95, 0);
    long long v32 = (void *)kaldi::Input::Stream(v31);
    if (*(_DWORD *)((char *)v32 + *(void *)(*v32 - 24) + 32))
    {
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      double v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not open decoding-graph FST ", 34);
      int v60 = *(char *)(v30 + 23);
      if (v60 >= 0) {
        uint64_t v61 = v30;
      }
      else {
        uint64_t v61 = *(void *)v30;
      }
      if (v60 >= 0) {
        uint64_t v62 = *(unsigned __int8 *)(v30 + 23);
      }
      else {
        uint64_t v62 = *(void *)(v30 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    long long __n = 0u;
    long long v68 = 0u;
    *(_OWORD *)&v65.__r_.__value_.__r.__words[1] = 0u;
    long long v66 = 0u;
    uint64_t v69 = -1;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v33 = kaldi::Input::Stream((kaldi::Input *)v89);
    if ((fst::FstHeader::Read((uint64_t)&v65, v33, v30, 0) & 1) == 0)
    {
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      long long v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reading FST: error reading FST header.", 38);
      int v56 = *(char *)(v30 + 23);
      if (v56 >= 0) {
        uint64_t v57 = v30;
      }
      else {
        uint64_t v57 = *(void *)v30;
      }
      if (v56 >= 0) {
        uint64_t v58 = *(unsigned __int8 *)(v30 + 23);
      }
      else {
        uint64_t v58 = *(void *)(v30 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, v57, v58);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    uint64_t v34 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
    uint64_t v35 = HIBYTE(__n);
    if (__n >= 0) {
      uint64_t v36 = HIBYTE(__n);
    }
    else {
      uint64_t v36 = __n;
    }
    uint64_t v37 = *(unsigned __int8 *)(v34 + 23);
    int v38 = (char)v37;
    if ((v37 & 0x80u) != 0) {
      uint64_t v37 = *(void *)(v34 + 8);
    }
    if (v36 != v37) {
      goto LABEL_98;
    }
    if (v38 >= 0) {
      float v39 = (unsigned __int8 *)v34;
    }
    else {
      float v39 = *(unsigned __int8 **)v34;
    }
    if ((HIBYTE(__n) & 0x80) != 0)
    {
      if (memcmp(*((const void **)&v66 + 1), v39, __n)) {
        goto LABEL_98;
      }
    }
    else if (HIBYTE(__n))
    {
      long long v40 = (unsigned __int8 *)&v66 + 8;
      while (*v40 == *v39)
      {
        ++v40;
        ++v39;
        if (!--v35) {
          goto LABEL_72;
        }
      }
LABEL_98:
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      size_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"FST with arc type ", 18);
      if (__n >= 0) {
        long long v49 = (char *)&v66 + 8;
      }
      else {
        long long v49 = (char *)*((void *)&v66 + 1);
      }
      if (__n >= 0) {
        uint64_t v50 = HIBYTE(__n);
      }
      else {
        uint64_t v50 = __n;
      }
      uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" not supported.\n", 16);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
LABEL_72:
    fst::FstReadOptions::FstReadOptions(&v63, v30, &v65, 0, 0);
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = 0uLL;
    if ((BYTE7(v66) & 0x80) != 0)
    {
      if (v65.__r_.__value_.__r.__words[2] != 5)
      {
        if (v65.__r_.__value_.__r.__words[2] == 6
          && *(_DWORD *)v65.__r_.__value_.__l.__size_ == 1952671094
          && *(_WORD *)(v65.__r_.__value_.__l.__size_ + 4) == 29295)
        {
          goto LABEL_80;
        }
LABEL_105:
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        size_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reading FST: unsupported hammer FST type: ", 42);
        if ((SBYTE7(v66) & 0x80u) == 0) {
          p_size_t size = (uint64_t)&v65.__r_.__value_.__l.__size_;
        }
        else {
          p_size_t size = v65.__r_.__value_.__l.__size_;
        }
        if ((SBYTE7(v66) & 0x80u) == 0) {
          uint64_t v54 = BYTE7(v66);
        }
        else {
          uint64_t v54 = v65.__r_.__value_.__r.__words[2];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, p_size, v54);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      std::string::size_type v41 = v65.__r_.__value_.__l.__size_;
    }
    else
    {
      std::string::size_type v41 = (std::string::size_type)&v65.__r_.__value_.__l.__size_;
      if (BYTE7(v66) != 5)
      {
        if (BYTE7(v66) != 6) {
          goto LABEL_105;
        }
        if (LODWORD(v65.__r_.__value_.__r.__words[1]) != 1952671094 || WORD2(v65.__r_.__value_.__r.__words[1]) != 29295) {
          goto LABEL_105;
        }
LABEL_80:
        int v64 = 2;
        kaldi::Input::Stream((kaldi::Input *)v89);
        fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read();
      }
    }
    int v44 = *(_DWORD *)v41;
    int v45 = *(unsigned __int8 *)(v41 + 4);
    if (v44 == 1936617315 && v45 == 116)
    {
      int v64 = 2;
      kaldi::Input::Stream((kaldi::Input *)v89);
      fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::Read();
    }
    goto LABEL_105;
  }
  quasar::PTree::~PTree((quasar::PTree *)&v91);
  __p[0] = &v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  return a1;
}

void std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::reset[abi:ne180100]<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::shared_ptr[abi:ne180100]<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,void>(&v2, a2);
}

void fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::Read()
{
}

uint64_t quasar::QuasarTextProcImpl::run(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v6 = quasar::QuasarTextProcImpl::run(a1, a2, &v51, 1, 0, a4);
  unsigned int v7 = v6;
  if (!v6)
  {
    uint64_t v9 = v51;
    uint64_t v8 = v52;
    if (v52 != v51)
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        uint64_t v12 = *(void *)(v9 + v10);
        if (v12 != *(void *)(v9 + v10 + 8))
        {
          uint64_t v6 = (uint64_t)std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](a3, v12);
          uint64_t v9 = v51;
          uint64_t v8 = v52;
        }
        ++v11;
        v10 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3) > v11);
    }
  }
  unsigned int v32 = v7;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14 - *a2 == a3[1] - *a3 && v14 != v13)
  {
    unint64_t v16 = 0;
    while (1)
    {
      quasar::tokens2Str((uint64_t *)(v13 + 24 * v16), (std::string *)__s1);
      quasar::tokens2Str((uint64_t *)(*a3 + 24 * v16), &v50);
      char v17 = BYTE7(v34);
      if ((SBYTE7(v34) & 0x80u) == 0) {
        long long v18 = (void *)BYTE7(v34);
      }
      else {
        long long v18 = __s1[1];
      }
      std::string::size_type size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      int v20 = SHIBYTE(v50.__r_.__value_.__r.__words[2]);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v50.__r_.__value_.__l.__size_;
      }
      if (v18 != (void *)size)
      {
        BOOL v30 = 0;
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_34;
        }
        goto LABEL_38;
      }
      long long v21 = (v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v50
          : (std::string *)v50.__r_.__value_.__r.__words[0];
      if (SBYTE7(v34) < 0) {
        break;
      }
      if (BYTE7(v34))
      {
        uint64_t v22 = BYTE7(v34) - 1;
        long long v23 = __s1;
        do
        {
          int v25 = *(unsigned __int8 *)v23;
          long long v23 = (void **)((char *)v23 + 1);
          int v24 = v25;
          int v27 = v21->__r_.__value_.__s.__data_[0];
          long long v21 = (std::string *)((char *)v21 + 1);
          int v26 = v27;
          BOOL v29 = v22-- != 0;
          BOOL v30 = v24 == v26;
        }
        while (v24 == v26 && v29);
LABEL_33:
        if ((v20 & 0x80000000) == 0) {
          goto LABEL_34;
        }
        goto LABEL_38;
      }
      BOOL v30 = 1;
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_34:
        if ((v17 & 0x80) == 0) {
          goto LABEL_35;
        }
        goto LABEL_39;
      }
LABEL_38:
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((BYTE7(v34) & 0x80) == 0)
      {
LABEL_35:
        if (v30) {
          goto LABEL_40;
        }
        goto LABEL_44;
      }
LABEL_39:
      operator delete(__s1[0]);
      if (v30)
      {
LABEL_40:
        if (quasar::gLogLevel >= 5)
        {
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          *(_OWORD *)__s1 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Hammer didn't change any text. Therefore returning the original input.", 70);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__s1);
        }
        if (*a3 != *a2) {
          std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(*a3 + 24 * v16, *(void *)(*a2 + 24 * v16), *(void *)(*a2 + 24 * v16 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*a2 + 24 * v16 + 8) - *(void *)(*a2 + 24 * v16)) >> 5));
        }
      }
LABEL_44:
      ++v16;
      uint64_t v13 = *a2;
      if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v16) {
        goto LABEL_45;
      }
    }
    uint64_t v6 = memcmp(__s1[0], v21, (size_t)__s1[1]);
    BOOL v30 = v6 == 0;
    goto LABEL_33;
  }
LABEL_45:
  if (quasar::gLogLevel >= 5) {
    quasar::QuasarTextProcImpl::reportResults(v6, (uint64_t)a2, (uint64_t)a3);
  }
  __s1[0] = &v51;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s1);
  return v32;
}

void sub_1B206B5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::string __p = (void *)(v16 - 112);
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarTextProcImpl::run(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  if ((int)a4 <= 0 && quasar::gLogLevel >= 4)
  {
    memset(v34, 0, sizeof(v34));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Number of outputs (n) cannot be less than 1.", 44);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v34);
  }
  uint64_t v10 = (unsigned __int16 *)(a1 + 24);
  int v11 = *(char *)(a1 + 47);
  if (v11 < 0)
  {
    if (*(void *)(a1 + 32) != 3)
    {
LABEL_15:
      BOOL v15 = 0;
      goto LABEL_16;
    }
    uint64_t v10 = *(unsigned __int16 **)v10;
  }
  else if (v11 != 3)
  {
    goto LABEL_15;
  }
  int v12 = *v10;
  int v13 = *((unsigned __int8 *)v10 + 2);
  BOOL v15 = v12 == 29801 && v13 == 110;
LABEL_16:
  if (*(void *)(a1 + 8) - *(void *)a1 != 16)
  {
    quasar::HammerSeqLat::HammerSeqLat(v34, a2, a1, 1, a4, v15, a5, 1.0);
    int v31 = 0;
    unsigned int v32 = 0;
    uint64_t v33 = 0;
    quasar::HammerSeqLat::hammerSeqLatMapping((uint64_t)v34, a6, (void **)&v31);
  }
  uint64_t v16 = *a2;
  if (*a2 == a2[1]) {
    return 0;
  }
  while (1)
  {
    quasar::Hammer::Hammer(v34, v16, *(void *)a1, 1, a4, v15, a5, 1.0);
    int v31 = 0;
    unsigned int v32 = 0;
    uint64_t v33 = 0;
    if ((quasar::Hammer::hammerMapping((uint64_t)v34, a6, (uint64_t *)&v31) & 1) == 0) {
      break;
    }
    float v28 = 0;
    BOOL v29 = 0;
    unint64_t v30 = 0;
    char v17 = v31;
    if (v32 != v31)
    {
      uint64_t v18 = 0;
      long long v19 = 0;
      unint64_t v20 = 0;
      do
      {
        long long v21 = &v17[v18];
        uint64_t v22 = (uint64_t *)(v21 + 8);
        if ((unint64_t)v19 >= v30)
        {
          long long v19 = (void *)std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v28, v22);
        }
        else
        {
          *long long v19 = 0;
          v19[1] = 0;
          v19[2] = 0;
          std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v19, *v22, *((void *)v21 + 2), 0x6DB6DB6DB6DB6DB7 * ((*((void *)v21 + 2) - *v22) >> 5));
          v19 += 3;
        }
        BOOL v29 = v19;
        ++v20;
        char v17 = v31;
        v18 += 56;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((v32 - v31) >> 3) > v20);
    }
    unint64_t v23 = a3[1];
    if (v23 >= a3[2])
    {
      uint64_t v24 = std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>(a3, (uint64_t **)&v28);
    }
    else
    {
      std::vector<std::vector<std::vector<quasar::Token>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<quasar::Token>> const&>((uint64_t)a3, (uint64_t **)&v28);
      uint64_t v24 = v23 + 24;
    }
    a3[1] = v24;
    long long v35 = &v28;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    float v28 = (void **)&v31;
    std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100](&v28);
    quasar::Hammer::~Hammer((void **)v34);
    v16 += 24;
    if (v16 == a2[1]) {
      return 0;
    }
  }
  float v28 = (void **)&v31;
  std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100](&v28);
  quasar::Hammer::~Hammer((void **)v34);
  return 2;
}

void sub_1B206BA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy((va_list)v4, va1);
  std::vector<std::vector<quasar::Hammer::HammerSausage>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::HammerSeqLat::~HammerSeqLat((void **)va2);
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarTextProcImpl::reportResults(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v100[2] = *MEMORY[0x1E4F143B8];
  memset(v98, 0, 24);
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  unint64_t v97 = 0;
  uint64_t v3 = *(const void ****)a2;
  if (*(void *)a2 == *(void *)(a2 + 8)) {
    goto LABEL_76;
  }
  int v4 = 0;
  do
  {
    int v70 = v4;
    for (std::vector<std::string>::pointer i = *v3; i != v3[1]; i += 28)
    {
      if (*((char *)i + 23) >= 0) {
        size_t v6 = *((unsigned __int8 *)i + 23);
      }
      else {
        size_t v6 = (size_t)i[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v91, v6 + 3);
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v7 = &v91;
      }
      else {
        uint64_t v7 = (std::string *)v91.__r_.__value_.__r.__words[0];
      }
      if (v6)
      {
        if (*((char *)i + 23) >= 0) {
          uint64_t v8 = i;
        }
        else {
          uint64_t v8 = *i;
        }
        memmove(v7, v8, v6);
      }
      *(_DWORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 2112032;
      std::to_string(&v90, *((_DWORD *)i + 7));
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v9 = &v90;
      }
      else {
        uint64_t v9 = (std::string *)v90.__r_.__value_.__r.__words[0];
      }
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v90.__r_.__value_.__l.__size_;
      }
      uint64_t v11 = std::string::append(&v91, (const std::string::value_type *)v9, size);
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      int v13 = std::string::append(&v92, " : ");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v89, *((_DWORD *)i + 8));
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v15 = &v89;
      }
      else {
        BOOL v15 = (std::string *)v89.__r_.__value_.__r.__words[0];
      }
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v16 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v16 = v89.__r_.__value_.__l.__size_;
      }
      char v17 = std::string::append(&v93, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      long long v19 = std::string::append(&v94, ", start silence: ");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      *(void *)&v72[16] = *((void *)&v19->__r_.__value_.__l + 2);
      *(_OWORD *)long long v72 = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v88, *((_DWORD *)i + 9));
      if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v21 = &v88;
      }
      else {
        long long v21 = (std::string *)v88.__r_.__value_.__r.__words[0];
      }
      if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v22 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v22 = v88.__r_.__value_.__l.__size_;
      }
      unint64_t v23 = std::string::append((std::string *)v72, (const std::string::value_type *)v21, v22);
      std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
      v99.__r_.__value_.__r.__words[0] = v23->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v99.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
      char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v98[1]) < 0) {
        operator delete(*(void **)&v98[0]);
      }
      *(void *)&v98[0] = v24;
      *((void *)&v98[0] + 1) = v99.__r_.__value_.__r.__words[0];
      *(void *)((char *)v98 + 15) = *(std::string::size_type *)((char *)v99.__r_.__value_.__r.__words + 7);
      BYTE7(v98[1]) = v25;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if ((v72[23] & 0x80000000) != 0) {
        operator delete(*(void **)v72);
      }
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v92.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v90.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      if (*((char *)i + 23) < 0)
      {
        if (i[1])
        {
LABEL_54:
          int v26 = v96;
          if ((unint64_t)v96 >= v97)
          {
            float v28 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v95, v98);
          }
          else
          {
            if (SBYTE7(v98[1]) < 0)
            {
              std::string::__init_copy_ctor_external(v96, *(const std::string::value_type **)&v98[0], *((std::string::size_type *)&v98[0] + 1));
            }
            else
            {
              long long v27 = v98[0];
              v96->__r_.__value_.__r.__words[2] = *(void *)&v98[1];
              *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
            }
            float v28 = v26 + 1;
          }
          uint64_t v96 = v28;
          continue;
        }
      }
      else if (*((unsigned char *)i + 23))
      {
        goto LABEL_54;
      }
      if (quasar::gLogLevel >= 4)
      {
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v73 = 0u;
        memset(v72, 0, sizeof(v72));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Empty tokenName", 15);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v72);
      }
    }
    v94.__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
    v94.__r_.__value_.__l.__size_ = 1;
    quasar::join<std::vector<std::string>>(&v95, (uint64_t *)&v94);
    if (SBYTE7(v98[1]) < 0) {
      operator delete(*(void **)&v98[0]);
    }
    v98[0] = *(_OWORD *)v72;
    *(void *)&v98[1] = *(void *)&v72[16];
    if (quasar::gLogLevel >= 6)
    {
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      memset(v72, 0, sizeof(v72));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Pre-text-proc Choice[", 21);
      BOOL v29 = (void *)std::ostream::operator<<();
      unint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"]: ", 3);
      if ((SBYTE7(v98[1]) & 0x80u) == 0) {
        int v31 = v98;
      }
      else {
        int v31 = *(long long **)&v98[0];
      }
      if ((SBYTE7(v98[1]) & 0x80u) == 0) {
        uint64_t v32 = BYTE7(v98[1]);
      }
      else {
        uint64_t v32 = *((void *)&v98[0] + 1);
      }
      uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
      std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
      long long v34 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
      std::locale::~locale((std::locale *)&v94);
      std::ostream::put();
      std::ostream::flush();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v72);
    }
    int v4 = v70 + 1;
    v3 += 3;
  }
  while (v3 != *(const void ****)(a2 + 8));
LABEL_76:
  MEMORY[0x1B3EA7B20](v98, "");
  long long v35 = *(const void ****)a3;
  if (*(void *)a3 == *(void *)(a3 + 8)) {
    goto LABEL_151;
  }
  int v36 = 0;
  while (2)
  {
    int v71 = v36;
    memset(&v94, 0, sizeof(v94));
    long long v37 = *v35;
    while (2)
    {
      if (v37 != v35[1])
      {
        if (*((char *)v37 + 23) >= 0) {
          size_t v38 = *((unsigned __int8 *)v37 + 23);
        }
        else {
          size_t v38 = (size_t)v37[1];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v90, v38 + 3);
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v39 = &v90;
        }
        else {
          long long v39 = (std::string *)v90.__r_.__value_.__r.__words[0];
        }
        if (v38)
        {
          if (*((char *)v37 + 23) >= 0) {
            long long v40 = v37;
          }
          else {
            long long v40 = *v37;
          }
          memmove(v39, v40, v38);
        }
        *(_DWORD *)((char *)&v39->__r_.__value_.__l.__data_ + v38) = 2112032;
        std::to_string(&v89, *((_DWORD *)v37 + 7));
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v41 = &v89;
        }
        else {
          long long v41 = (std::string *)v89.__r_.__value_.__r.__words[0];
        }
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v42 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v42 = v89.__r_.__value_.__l.__size_;
        }
        long long v43 = std::string::append(&v90, (const std::string::value_type *)v41, v42);
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        long long v45 = std::string::append(&v91, " : ");
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v88, *((_DWORD *)v37 + 8));
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v47 = &v88;
        }
        else {
          long long v47 = (std::string *)v88.__r_.__value_.__r.__words[0];
        }
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v48 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v48 = v88.__r_.__value_.__l.__size_;
        }
        long long v49 = std::string::append(&v92, (const std::string::value_type *)v47, v48);
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        uint64_t v51 = std::string::append(&v93, ", start silence: ");
        long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        *(void *)&v72[16] = *((void *)&v51->__r_.__value_.__l + 2);
        *(_OWORD *)long long v72 = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v99, *((_DWORD *)v37 + 9));
        if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v53 = &v99;
        }
        else {
          uint64_t v53 = (std::string *)v99.__r_.__value_.__r.__words[0];
        }
        if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v54 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v54 = v99.__r_.__value_.__l.__size_;
        }
        long long v55 = std::string::append((std::string *)v72, (const std::string::value_type *)v53, v54);
        std::string::size_type v56 = v55->__r_.__value_.__r.__words[0];
        v100[0] = v55->__r_.__value_.__l.__size_;
        *(void *)((char *)v100 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SBYTE7(v98[1]) < 0) {
          operator delete(*(void **)&v98[0]);
        }
        *(void *)&v98[0] = v56;
        *((void *)&v98[0] + 1) = v100[0];
        *(void *)((char *)v98 + 15) = *(void *)((char *)v100 + 7);
        BYTE7(v98[1]) = v57;
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        if ((v72[23] & 0x80000000) != 0) {
          operator delete(*(void **)v72);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        if (*((char *)v37 + 23) < 0)
        {
          if (!v37[1]) {
            goto LABEL_133;
          }
LABEL_129:
          uint64_t v58 = (_OWORD *)v94.__r_.__value_.__l.__size_;
          if (v94.__r_.__value_.__l.__size_ >= v94.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v60 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v94, v98);
          }
          else
          {
            if (SBYTE7(v98[1]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v94.__r_.__value_.__l.__size_, *(const std::string::value_type **)&v98[0], *((std::string::size_type *)&v98[0] + 1));
            }
            else
            {
              long long v59 = v98[0];
              *(void *)(v94.__r_.__value_.__l.__size_ + 16) = *(void *)&v98[1];
              *uint64_t v58 = v59;
            }
            std::string::size_type v60 = (std::string::size_type)v58 + 24;
          }
          v94.__r_.__value_.__l.__size_ = v60;
        }
        else
        {
          if (*((unsigned char *)v37 + 23)) {
            goto LABEL_129;
          }
LABEL_133:
          if (quasar::gLogLevel >= 4)
          {
            long long v86 = 0u;
            long long v87 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            long long v82 = 0u;
            long long v83 = 0u;
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            long long v73 = 0u;
            memset(v72, 0, sizeof(v72));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Empty tokenName", 15);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v72);
          }
        }
        v37 += 28;
        continue;
      }
      break;
    }
    v93.__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
    v93.__r_.__value_.__l.__size_ = 1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v94, (uint64_t *)&v93);
    if (SBYTE7(v98[1]) < 0) {
      operator delete(*(void **)&v98[0]);
    }
    v98[0] = *(_OWORD *)v72;
    *(void *)&v98[1] = *(void *)&v72[16];
    if (quasar::gLogLevel >= 6)
    {
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      memset(v72, 0, sizeof(v72));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Post-text-proc Choice[", 22);
      uint64_t v61 = (void *)std::ostream::operator<<();
      uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"]: ", 3);
      if ((SBYTE7(v98[1]) & 0x80u) == 0) {
        std::string v63 = v98;
      }
      else {
        std::string v63 = *(long long **)&v98[0];
      }
      if ((SBYTE7(v98[1]) & 0x80u) == 0) {
        uint64_t v64 = BYTE7(v98[1]);
      }
      else {
        uint64_t v64 = *((void *)&v98[0] + 1);
      }
      std::string v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v63, v64);
      std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(void *)(*v65 - 24)));
      long long v66 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
      std::locale::~locale((std::locale *)&v93);
      std::ostream::put();
      std::ostream::flush();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v72);
    }
    int v36 = v71 + 1;
    *(void *)long long v72 = &v94;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
    v35 += 3;
    if (v35 != *(const void ****)(a3 + 8)) {
      continue;
    }
    break;
  }
LABEL_151:
  *(void *)long long v72 = &v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  if (SBYTE7(v98[1]) < 0) {
    operator delete(*(void **)&v98[0]);
  }
  return 0;
}

void sub_1B206C540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  std::string __p = (void *)(v13 - 200);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v13 - 153) < 0) {
    operator delete(*(void **)(v13 - 176));
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarTextProcImpl::run(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  uint64_t v5 = (unsigned __int16 *)(a1 + 24);
  if (*(void *)(a1 + 8) - *(void *)a1 != 16)
  {
    int v7 = *(char *)(a1 + 47);
    if (v7 < 0)
    {
      if (*(void *)(a1 + 32) != 3)
      {
LABEL_27:
        BOOL v18 = 0;
        goto LABEL_28;
      }
      uint64_t v5 = *(unsigned __int16 **)v5;
    }
    else if (v7 != 3)
    {
      goto LABEL_27;
    }
    int v15 = *v5;
    int v16 = *((unsigned __int8 *)v5 + 2);
    BOOL v18 = v15 == 29801 && v16 == 110;
LABEL_28:
    quasar::HammerSeq::HammerSeq(v20, a2, a1, 1, 1, v18, 0, 1.0);
    int v19 = quasar::HammerSeq::hammerSeqMappingString((uint64_t)v20, (uint64_t)a3);
    std::string::size_type v22 = (void **)&v21;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v22);
    quasar::Hammer::~Hammer(v20);
    if (!v19) {
      return 2;
    }
    goto LABEL_29;
  }
  int v6 = *(char *)(a1 + 47);
  if (v6 < 0)
  {
    if (*(void *)(a1 + 32) != 3)
    {
LABEL_16:
      BOOL v11 = 0;
      goto LABEL_17;
    }
    uint64_t v5 = *(unsigned __int16 **)v5;
  }
  else if (v6 != 3)
  {
    goto LABEL_16;
  }
  int v8 = *v5;
  int v9 = *((unsigned __int8 *)v5 + 2);
  BOOL v11 = v8 == 29801 && v9 == 110;
LABEL_17:
  quasar::Hammer::Hammer((uint64_t)v20, a2, *(void **)a1, 1, 1, 1.0, v11, 0);
  char v12 = quasar::Hammer::hammerMappingString((uint64_t)v20, (uint64_t)a3);
  quasar::Hammer::~Hammer(v20);
  if ((v12 & 1) == 0) {
    return 2;
  }
LABEL_29:
  if (quasar::gLogLevel >= 5) {
    quasar::QuasarTextProcImpl::reportResults(v13, (uint64_t)a2, a3);
  }
  return 0;
}

void sub_1B206C930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::HammerSeq::~HammerSeq((void **)va);
  _Unwind_Resume(a1);
}

void quasar::HammerSeq::~HammerSeq(void **this)
{
  long long v2 = this + 11;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::Hammer::~Hammer(this);
}

uint64_t quasar::QuasarTextProcImpl::reportResults(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v42[0] = 0;
  v42[1] = 0;
  uint64_t v43 = 0;
  memset(v41, 0, sizeof(v41));
  if (quasar::gLogLevel >= 5)
  {
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Pre-sanitization: ", 18);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet(&v44, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v44);
    std::ostream::put();
    std::ostream::flush();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v24);
  }
  MEMORY[0x1B3EA7B20](v42, "");
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  if (*a3 != v11)
  {
    int v13 = 0;
    int v14 = quasar::gLogLevel;
    int v15 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      if (v14 >= 5)
      {
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v24 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Post-sanitization Choice[", 25);
        int v16 = (void *)std::ostream::operator<<();
        char v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"]: ", 3);
        int v18 = *(char *)(v12 + 23);
        if (v18 >= 0) {
          uint64_t v19 = v12;
        }
        else {
          uint64_t v19 = *(void *)v12;
        }
        if (v18 >= 0) {
          uint64_t v20 = *(unsigned __int8 *)(v12 + 23);
        }
        else {
          uint64_t v20 = *(void *)(v12 + 8);
        }
        uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
        std::string::size_type v22 = std::locale::use_facet(&v44, v15);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(&v44);
        std::ostream::put();
        std::ostream::flush();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v24);
        int v14 = quasar::gLogLevel;
        uint64_t v11 = a3[1];
      }
      ++v13;
      v12 += 24;
    }
    while (v12 != v11);
  }
  *(void *)&long long v24 = v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (SHIBYTE(v43) < 0) {
    operator delete(v42[0]);
  }
  return 0;
}

void sub_1B206CC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 - 89) < 0) {
    operator delete(*(void **)(v9 - 112));
  }
  _Unwind_Resume(a1);
}

void quasar::QuasarTextProcImpl::~QuasarTextProcImpl(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  long long v2 = this;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t quasar::QuasarTextProcImpl::modelExist(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (v2 == *a1) {
    return 0;
  }
  do
  {
    if (quasar::filesystem::exists((char *)v1) && !quasar::filesystem::is_directory((char *)v1))
    {
      uint64_t result = 1;
    }
    else
    {
      if (quasar::gLogLevel >= 4)
      {
        memset(v8, 0, sizeof(v8));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
        uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"modelFile doesn't exist, or it's a directory: ", 46);
        int v4 = *(char *)(v1 + 23);
        if (v4 >= 0) {
          uint64_t v5 = v1;
        }
        else {
          uint64_t v5 = *(void *)v1;
        }
        if (v4 >= 0) {
          uint64_t v6 = *(unsigned __int8 *)(v1 + 23);
        }
        else {
          uint64_t v6 = *(void *)(v1 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v8);
      }
      uint64_t result = 0;
    }
    v1 += 24;
  }
  while (v1 != v2);
  return result;
}

void sub_1B206CDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::QuasarTextProcImpl::modelExist(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc");
  quasar::SystemConfig::hasParam(a1, (uint64_t)__p);
}

void sub_1B206D310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  *(void *)(v53 - 1--*(_DWORD *)(a9 + 76) = v52;
  if (*(char *)(v53 - 185) < 0) {
    operator delete(*(void **)(v53 - 208));
  }
  std::string __p = (void *)(v53 - 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v53 - 137) < 0) {
    operator delete(*(void **)(v53 - 160));
  }
  quasar::PTree::~PTree((quasar::PTree *)(v53 - 136));
  _Unwind_Resume(a1);
}

_OWORD *quasar::QuasarTextProcImpl::QuasarTextProcImpl(_OWORD *result, uint64_t *a2)
{
  result[1] = 0u;
  result[2] = 0u;
  *uint64_t result = 0u;
  uint64_t v2 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v3 = (kaldi::Input *)kaldi::Input::Input(v61, v2, 0);
    int v4 = (void *)kaldi::Input::Stream(v3);
    if (*(_DWORD *)((char *)v4 + *(void *)(*v4 - 24) + 32))
    {
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v44 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
      long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Could not open decoding-graph FST ", 34);
      int v31 = *(char *)(v2 + 23);
      if (v31 >= 0) {
        uint64_t v32 = v2;
      }
      else {
        uint64_t v32 = *(void *)v2;
      }
      if (v31 >= 0) {
        uint64_t v33 = *(unsigned __int8 *)(v2 + 23);
      }
      else {
        uint64_t v33 = *(void *)(v2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v44);
    }
    long long __n = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    uint64_t v41 = -1;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v5 = kaldi::Input::Stream((kaldi::Input *)v61);
    if ((fst::FstHeader::Read((uint64_t)&v36, v5, v2, 0) & 1) == 0)
    {
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v44 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
      long long v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Reading FST: error reading FST header.", 38);
      int v27 = *(char *)(v2 + 23);
      if (v27 >= 0) {
        uint64_t v28 = v2;
      }
      else {
        uint64_t v28 = *(void *)v2;
      }
      if (v27 >= 0) {
        uint64_t v29 = *(unsigned __int8 *)(v2 + 23);
      }
      else {
        uint64_t v29 = *(void *)(v2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v44);
    }
    uint64_t v6 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
    uint64_t v7 = HIBYTE(__n);
    if (__n >= 0) {
      uint64_t v8 = HIBYTE(__n);
    }
    else {
      uint64_t v8 = __n;
    }
    uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(v6 + 8);
    }
    if (v8 != v9) {
      goto LABEL_44;
    }
    if (v10 >= 0) {
      uint64_t v11 = (unsigned __int8 *)v6;
    }
    else {
      uint64_t v11 = *(unsigned __int8 **)v6;
    }
    if ((HIBYTE(__n) & 0x80) != 0)
    {
      if (memcmp(*((const void **)&v38 + 1), v11, __n)) {
        goto LABEL_44;
      }
    }
    else if (HIBYTE(__n))
    {
      uint64_t v12 = (unsigned __int8 *)&v38 + 8;
      while (*v12 == *v11)
      {
        ++v12;
        ++v11;
        if (!--v7) {
          goto LABEL_20;
        }
      }
LABEL_44:
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v44 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"FST with arc type ", 18);
      if (__n >= 0) {
        uint64_t v20 = (char *)&v38 + 8;
      }
      else {
        uint64_t v20 = (char *)*((void *)&v38 + 1);
      }
      if (__n >= 0) {
        uint64_t v21 = HIBYTE(__n);
      }
      else {
        uint64_t v21 = __n;
      }
      std::string::size_type v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" not supported.\n", 16);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v44);
    }
LABEL_20:
    fst::FstReadOptions::FstReadOptions(&__p, v2, &v36, 0, 0);
    if ((BYTE7(v38) & 0x80) != 0)
    {
      if (*((void *)&v37 + 1) != 5)
      {
        if (*((void *)&v37 + 1) == 6 && *(_DWORD *)v37 == 1952671094 && *(_WORD *)(v37 + 4) == 29295) {
          goto LABEL_28;
        }
LABEL_51:
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v44 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
        unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Reading FST: unsupported hammer FST type: ", 42);
        if ((SBYTE7(v38) & 0x80u) == 0) {
          long long v24 = &v37;
        }
        else {
          long long v24 = (long long *)v37;
        }
        if ((SBYTE7(v38) & 0x80u) == 0) {
          uint64_t v25 = BYTE7(v38);
        }
        else {
          uint64_t v25 = *((void *)&v37 + 1);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v44);
      }
      int v13 = (long long *)v37;
    }
    else
    {
      int v13 = &v37;
      if (BYTE7(v38) != 5)
      {
        if (BYTE7(v38) != 6) {
          goto LABEL_51;
        }
        if (v37 != 1952671094 || WORD2(v37) != 29295) {
          goto LABEL_51;
        }
LABEL_28:
        int v35 = 2;
        kaldi::Input::Stream((kaldi::Input *)v61);
        fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read();
      }
    }
    int v16 = *(_DWORD *)v13;
    int v17 = *((unsigned __int8 *)v13 + 4);
    if (v16 == 1936617315 && v17 == 116)
    {
      int v35 = 2;
      kaldi::Input::Stream((kaldi::Input *)v61);
      fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::Read();
    }
    goto LABEL_51;
  }
  return result;
}

std::string *quasar::QuasarTextProcImpl::setTextProcType(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

void quasar::QuasarTextProc::readModelFiles(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B206DC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a14 < 0) {
    operator delete(__p);
  }
  std::pair<std::string,quasar::PTree>::~pair((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarTextProc::QuasarTextProc(uint64_t a1, const quasar::SystemConfig *a2, uint64_t *a3, unsigned __int8 *a4)
{
  *(void *)a1 = &unk_1F0A52AB0;
  long long v76 = (quasar::SystemConfig *)(a1 + 8);
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a1 + 8), a2, 1, 1);
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_DWORD *)(a1 + 1616) = 1065353216;
  *(_OWORD *)(a1 + 16++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_DWORD *)(a1 + 1656) = 1065353216;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_DWORD *)(a1 + 1696) = 1065353216;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 1728);
    *(void *)(a1 + 1720) = v8;
    *(void *)(a1 + 1728) = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  else
  {
    *(void *)(a1 + 1720) = v8;
    *(void *)(a1 + 1728) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "text-proc");
  quasar::SystemConfig::enforceMinVersion((uint64_t)v76, 10, 0, (uint64_t)&__p);
  if (SBYTE7(v83) < 0) {
    operator delete((void *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "text-proc");
  uint64_t Ptree = quasar::SystemConfig::getPtree((uint64_t)v76, (uint64_t)&__p);
  int v103 = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(Ptree + 8), *(void *)(Ptree + 16));
  }
  else
  {
    long long v11 = *(_OWORD *)(Ptree + 8);
    v104.__r_.__value_.__r.__words[2] = *(void *)(Ptree + 24);
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v11;
  }
  memset(&v105, 0, sizeof(v105));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v105, *(void *)(Ptree + 32), *(void *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(Ptree + 40) - *(void *)(Ptree + 32)) >> 3));
  char v106 = *(unsigned char *)(Ptree + 56);
  if (SBYTE7(v83) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v12 = (long long *)quasar::PTree::begin((quasar::PTree *)&v103);
  uint64_t v77 = quasar::PTree::end((quasar::PTree *)&v103);
  while (v12 != (long long *)v77)
  {
    std::pair<std::string,quasar::PTree>::pair[abi:ne180100](&v101, v12);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = v101.__r_.__value_.__l.__size_;
      if (v101.__r_.__value_.__l.__size_ == 12)
      {
        if (*(void *)v101.__r_.__value_.__l.__data_ == 0x61682D696A6F6D65
          && *(_DWORD *)(v101.__r_.__value_.__r.__words[0] + 8) == 1919249773)
        {
LABEL_177:
          std::string::basic_string[abi:ne180100]<0>(&__p, "rule-fst");
          quasar::PTree::getChildOptional((uint64_t)v102, (uint64_t)&__p);
        }
        std::string::size_type size = v101.__r_.__value_.__l.__size_;
      }
      else if (v101.__r_.__value_.__l.__size_ == 15 {
             && *(void *)v101.__r_.__value_.__l.__data_ == 0x6E74692D74736F70
      }
             && *(void *)(v101.__r_.__value_.__r.__words[0] + 7) == 0x72656D6D61682D6ELL)
      {
        goto LABEL_177;
      }
      if (size == 9)
      {
        if (*(void *)v101.__r_.__value_.__l.__data_ == 0x657A6974696E6173
          && *(unsigned char *)(v101.__r_.__value_.__r.__words[0] + 8) == 114)
        {
LABEL_149:
          memset(&__s1, 0, sizeof(__s1));
          if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v60 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v60 = v101.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v60 + 1);
          if ((SBYTE7(v83) & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (long long *)__p;
          }
          if (v60)
          {
            if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v62 = &v101;
            }
            else {
              uint64_t v62 = (std::string *)v101.__r_.__value_.__r.__words[0];
            }
            memmove(p_p, v62, v60);
          }
          *(_WORD *)((char *)p_p + v60) = 46;
          std::string v63 = std::string::append((std::string *)&__p, "rule-fst");
          long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          v100.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v64;
          v63->__r_.__value_.__l.__size_ = 0;
          v63->__r_.__value_.__r.__words[2] = 0;
          v63->__r_.__value_.__r.__words[0] = 0;
          if (SBYTE7(v83) < 0) {
            operator delete((void *)__p);
          }
          quasar::QuasarTextProc::readModelFiles((uint64_t)v63, (uint64_t)&v103, (uint64_t)&v100);
        }
        std::string::size_type size = v101.__r_.__value_.__l.__size_;
      }
      if (size == 3)
      {
        if (*(_WORD *)v101.__r_.__value_.__l.__data_ == 29801
          && *(unsigned char *)(v101.__r_.__value_.__r.__words[0] + 2) == 110)
        {
LABEL_163:
          memset(&__s1, 0, sizeof(__s1));
          if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v65 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v65 = v101.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v65 + 1);
          if ((SBYTE7(v83) & 0x80u) == 0) {
            long long v66 = &__p;
          }
          else {
            long long v66 = (long long *)__p;
          }
          if (v65)
          {
            if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              float v67 = &v101;
            }
            else {
              float v67 = (std::string *)v101.__r_.__value_.__r.__words[0];
            }
            memmove(v66, v67, v65);
          }
          *(_WORD *)((char *)v66 + v65) = 46;
          long long v68 = std::string::append((std::string *)&__p, "rule-fst");
          long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
          v100.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v69;
          v68->__r_.__value_.__l.__size_ = 0;
          v68->__r_.__value_.__r.__words[2] = 0;
          v68->__r_.__value_.__r.__words[0] = 0;
          if (SBYTE7(v83) < 0) {
            operator delete((void *)__p);
          }
          quasar::QuasarTextProc::readModelFiles((uint64_t)v68, (uint64_t)&v103, (uint64_t)&v100);
        }
        std::string::size_type size = v101.__r_.__value_.__l.__size_;
      }
      if (size != 4) {
        goto LABEL_48;
      }
      if (*(_DWORD *)v101.__r_.__value_.__l.__data_ != 846099561)
      {
        std::string::size_type size = v101.__r_.__value_.__l.__size_;
LABEL_48:
        if (size == 12)
        {
          uint64_t v19 = (std::string *)v101.__r_.__value_.__r.__words[0];
LABEL_50:
          std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
          int v21 = v19->__r_.__value_.__r.__words[1];
          if (v20 == 0x2D6563697474616CLL && v21 == 1668248176)
          {
            memset(&__s1, 0, sizeof(__s1));
            if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v23 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v23 = v101.__r_.__value_.__l.__size_;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&__p, v23 + 1);
            if ((SBYTE7(v83) & 0x80u) == 0) {
              long long v24 = &__p;
            }
            else {
              long long v24 = (long long *)__p;
            }
            if (v23)
            {
              if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v25 = &v101;
              }
              else {
                uint64_t v25 = (std::string *)v101.__r_.__value_.__r.__words[0];
              }
              memmove(v24, v25, v23);
            }
            *(_WORD *)((char *)v24 + v23) = 46;
            long long v26 = std::string::append((std::string *)&__p, "rule-fst");
            long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            v100.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            if (SBYTE7(v83) < 0) {
              operator delete((void *)__p);
            }
            quasar::QuasarTextProc::readModelFiles((uint64_t)v26, (uint64_t)&v103, (uint64_t)&v100);
          }
        }
LABEL_141:
        if (quasar::gLogLevel >= 4)
        {
          long long v97 = 0u;
          long long v98 = 0u;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          long long __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          long long v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Ignore unknown node text-proc.", 30);
          if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v58 = &v101;
          }
          else {
            long long v58 = (std::string *)v101.__r_.__value_.__r.__words[0];
          }
          if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v59 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v59 = v101.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
        }
        goto LABEL_182;
      }
    }
    else
    {
      switch(*((unsigned char *)&v101.__r_.__value_.__s + 23))
      {
        case 3:
          goto LABEL_15;
        case 4:
          goto LABEL_88;
        case 5:
        case 6:
        case 7:
        case 8:
        case 0xA:
        case 0xB:
          goto LABEL_141;
        case 9:
LABEL_81:
          if (v101.__r_.__value_.__r.__words[0] == 0x657A6974696E6173 && v101.__r_.__value_.__s.__data_[8] == 114) {
            goto LABEL_149;
          }
          if (HIBYTE(v101.__r_.__value_.__r.__words[2]) != 4)
          {
            if (HIBYTE(v101.__r_.__value_.__r.__words[2]) == 3)
            {
LABEL_15:
              if (LOWORD(v101.__r_.__value_.__l.__data_) == 29801 && v101.__r_.__value_.__s.__data_[2] == 110) {
                goto LABEL_163;
              }
            }
            goto LABEL_141;
          }
LABEL_88:
          if (LODWORD(v101.__r_.__value_.__l.__data_) != 846099561) {
            goto LABEL_141;
          }
          break;
        case 0xC:
          if (v101.__r_.__value_.__r.__words[0] != 0x61682D696A6F6D65
            || LODWORD(v101.__r_.__value_.__r.__words[1]) != 1919249773)
          {
            uint64_t v19 = &v101;
            switch(*((unsigned char *)&v101.__r_.__value_.__s + 23))
            {
              case 3:
                goto LABEL_15;
              case 4:
                goto LABEL_88;
              case 9:
                goto LABEL_81;
              case 0xC:
                goto LABEL_50;
              default:
                goto LABEL_141;
            }
          }
          goto LABEL_177;
        default:
          if (HIBYTE(v101.__r_.__value_.__r.__words[2]) != 15) {
            goto LABEL_141;
          }
          if (v101.__r_.__value_.__r.__words[0] != 0x6E74692D74736F70
            || *(std::string::size_type *)((char *)v101.__r_.__value_.__r.__words + 7) != 0x72656D6D61682D6ELL)
          {
            goto LABEL_141;
          }
          goto LABEL_177;
      }
    }
    *(void *)&long long __p = quasar::SystemConfig::getConfigFileVersion(v76);
    quasar::SystemConfig::Version::Version(&__s1, 50, 0);
    if (!quasar::SystemConfig::Version::operator>=(&__p, &__s1))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "itn2");
      quasar::SystemConfig::enforceMinVersion((uint64_t)v76, 33, 0, (uint64_t)&__p);
      if (SBYTE7(v83) < 0) {
        operator delete((void *)__p);
      }
      _ZNSt3__115allocate_sharedB8ne180100IN6quasar21InverseTextNormalizerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v99);
      int v70 = (_DWORD *)v99.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&v100, "text-proc");
      int v71 = std::string::append(&v100, ".");
      long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      __s1.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      long long v73 = std::string::append(&__s1, "itn2");
      long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      *(void *)&long long v83 = *((void *)&v73->__r_.__value_.__l + 2);
      long long __p = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      quasar::InverseTextNormalizer::init(v70, (uint64_t)v76, (uint64_t)&__p);
    }
    int v31 = (long long *)quasar::PTree::begin((quasar::PTree *)v102);
    uint64_t v32 = quasar::PTree::end((quasar::PTree *)v102);
    while (v31 != (long long *)v32)
    {
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100](&__s1, v31);
      if (*(_DWORD *)(a1 + 736) != 2) {
        goto LABEL_123;
      }
      uint64_t v33 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v34 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v34 = __s1.__r_.__value_.__l.__size_;
      }
      uint64_t v35 = a4[23];
      int v36 = (char)v35;
      if ((v35 & 0x80u) != 0) {
        uint64_t v35 = *((void *)a4 + 1);
      }
      if (v34 == v35)
      {
        if (v36 >= 0) {
          long long v37 = a4;
        }
        else {
          long long v37 = *(unsigned __int8 **)a4;
        }
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v37, __s1.__r_.__value_.__l.__size_))
          {
LABEL_123:
            std::string::basic_string[abi:ne180100]<0>(&v78, "text-proc");
            long long v47 = std::string::append(&v78, ".");
            long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
            v79.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v48;
            v47->__r_.__value_.__l.__size_ = 0;
            v47->__r_.__value_.__r.__words[2] = 0;
            v47->__r_.__value_.__r.__words[0] = 0;
            long long v49 = std::string::append(&v79, "itn2");
            long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
            v99.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v50;
            v49->__r_.__value_.__l.__size_ = 0;
            v49->__r_.__value_.__r.__words[2] = 0;
            v49->__r_.__value_.__r.__words[0] = 0;
            long long v51 = std::string::append(&v99, ".");
            long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
            *(void *)&long long v83 = *((void *)&v51->__r_.__value_.__l + 2);
            long long __p = v52;
            v51->__r_.__value_.__l.__size_ = 0;
            v51->__r_.__value_.__r.__words[2] = 0;
            v51->__r_.__value_.__r.__words[0] = 0;
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_s1 = &__s1;
            }
            else {
              p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
            }
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v54 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v54 = __s1.__r_.__value_.__l.__size_;
            }
            long long v55 = std::string::append((std::string *)&__p, (const std::string::value_type *)p_s1, v54);
            long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
            v100.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v56;
            v55->__r_.__value_.__l.__size_ = 0;
            v55->__r_.__value_.__r.__words[2] = 0;
            v55->__r_.__value_.__r.__words[0] = 0;
            if (SBYTE7(v83) < 0) {
              operator delete((void *)__p);
            }
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v99.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v79.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v78.__r_.__value_.__l.__data_);
            }
            _ZNSt3__115allocate_sharedB8ne180100IN6quasar21InverseTextNormalizerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v79);
            quasar::InverseTextNormalizer::init(v79.__r_.__value_.__l.__data_, (uint64_t)v76, (uint64_t)&v100);
          }
        }
        else
        {
          if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
            goto LABEL_123;
          }
          long long v38 = &__s1;
          while (v38->__r_.__value_.__s.__data_[0] == *v37)
          {
            long long v38 = (std::string *)((char *)v38 + 1);
            ++v37;
            if (!--v33) {
              goto LABEL_123;
            }
          }
        }
      }
      if (quasar::gLogLevel >= 4)
      {
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        long long v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"ignore itn2 config of ", 22);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v40 = &__s1;
        }
        else {
          long long v40 = (std::string *)__s1.__r_.__value_.__r.__words[0];
        }
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v41 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v41 = __s1.__r_.__value_.__l.__size_;
        }
        uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
        uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)", what we are looking for is ", 29);
        int v44 = (char)a4[23];
        if (v44 >= 0) {
          uint64_t v45 = (uint64_t)a4;
        }
        else {
          uint64_t v45 = *(void *)a4;
        }
        if (v44 >= 0) {
          uint64_t v46 = a4[23];
        }
        else {
          uint64_t v46 = *((void *)a4 + 1);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
      }
      quasar::PTree::~PTree((quasar::PTree *)&v81);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      int v31 = (long long *)((char *)v31 + 88);
    }
    if (!*(void *)(a1 + 1608))
    {
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to configure itn2", 24);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
    }
LABEL_182:
    quasar::PTree::~PTree((quasar::PTree *)v102);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    uint64_t v12 = (long long *)((char *)v12 + 88);
  }
  quasar::PTree::~PTree((quasar::PTree *)&v103);
  return a1;
}

void sub_1B206F8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, quasar::SystemConfig *a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,std::__shared_weak_count *a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void **a57)
{
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)&a57);
  if (v58 < 0) {
    JUMPOUT(0x1B206F8DCLL);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  a57 = (void **)&a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a57);
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  a57 = (void **)&a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a57);
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  std::pair<std::string,quasar::PTree>::~pair((uint64_t)&a45);
  std::pair<std::string,quasar::PTree>::~pair(v59 - 248);
  quasar::PTree::~PTree((quasar::PTree *)(v59 - 160));
  if (*a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*a9);
  }
  uint64_t v61 = (std::__shared_weak_count *)*((void *)v57 + 214);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a13);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a14);
  uint64_t v62 = (std::__shared_weak_count *)*((void *)v57 + 197);
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  std::string v63 = (std::__shared_weak_count *)*((void *)v57 + 195);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  quasar::SystemConfig::~SystemConfig(a15);
  quasar::Bitmap::~Bitmap(v57);
  _Unwind_Resume(a1);
}

void sub_1B206F8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    JUMPOUT(0x1B206F8FCLL);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  JUMPOUT(0x1B206F920);
}

void sub_1B206F918()
{
}

void sub_1B206F940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, quasar::SystemConfig *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (SHIBYTE(a40) < 0) {
    operator delete(a38);
  }
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  long long __p = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  std::pair<std::string,quasar::PTree>::~pair((uint64_t)&a45);
  std::pair<std::string,quasar::PTree>::~pair(v63 - 248);
  quasar::PTree::~PTree((quasar::PTree *)(v63 - 160));
  if (*a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*a9);
  }
  std::string::size_type v65 = (std::__shared_weak_count *)*((void *)v62 + 214);
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a13);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a14);
  long long v66 = (std::__shared_weak_count *)*((void *)v62 + 197);
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  float v67 = (std::__shared_weak_count *)*((void *)v62 + 195);
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  quasar::SystemConfig::~SystemConfig(a15);
  quasar::Bitmap::~Bitmap(v62);
  _Unwind_Resume(a1);
}

void sub_1B206F9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, quasar::SystemConfig *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a59 < 0) {
    JUMPOUT(0x1B206F9BCLL);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  a54 = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a54);
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  std::pair<std::string,quasar::PTree>::~pair(&a42);
  std::pair<std::string,quasar::PTree>::~pair(v60 - 248);
  quasar::PTree::~PTree((quasar::PTree *)(v60 - 160));
  if (*a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*a9);
  }
  uint64_t v62 = *((void *)v59 + 214);
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a13);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a14);
  uint64_t v63 = *((void *)v59 + 197);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  uint64_t v64 = *((void *)v59 + 195);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  quasar::SystemConfig::~SystemConfig(a15);
  quasar::Bitmap::~Bitmap(v59);
  _Unwind_Resume(a1);
}

void sub_1B206F9D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (*(char *)(v56 - 129) < 0) {
    operator delete(*(void **)(v56 - 152));
  }
  if (a56 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B206FE40);
}

void sub_1B206F9F0()
{
}

void sub_1B206FA00()
{
}

void sub_1B206FA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)&a51);
  if (v52 < 0) {
    operator delete(v51);
  }
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  JUMPOUT(0x1B206FD58);
}

void sub_1B206FA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    JUMPOUT(0x1B206FAD8);
  }
  JUMPOUT(0x1B206FADCLL);
}

void sub_1B206FA34()
{
}

void sub_1B206FA90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51)
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  a51 = (void **)&a39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a51);
  JUMPOUT(0x1B206FD58);
}

void sub_1B206FAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_1B206FB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51)
{
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  a51 = (void **)&a39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a51);
  JUMPOUT(0x1B206FE30);
}

void sub_1B206FB18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  long long __p = &a39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  JUMPOUT(0x1B206FD58);
}

void sub_1B206FB48()
{
}

void sub_1B206FB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  JUMPOUT(0x1B206FBF0);
}

void sub_1B206FB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    JUMPOUT(0x1B206FBE0);
  }
  JUMPOUT(0x1B206FBE4);
}

void sub_1B206FB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t *a51)
{
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  a51 = &a39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a51);
  JUMPOUT(0x1B206FD58);
}

void sub_1B206FB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    JUMPOUT(0x1B206FBFCLL);
  }
  JUMPOUT(0x1B206FC00);
}

void sub_1B206FBA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B206FE30);
}

void sub_1B206FBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_1B206FC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  JUMPOUT(0x1B206FE28);
}

void sub_1B206FC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_1B206FC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, quasar::SystemConfig *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t *a54)
{
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  a54 = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a54);
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  std::pair<std::string,quasar::PTree>::~pair(&a42);
  std::pair<std::string,quasar::PTree>::~pair(v55 - 248);
  quasar::PTree::~PTree((quasar::PTree *)(v55 - 160));
  if (*a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*a9);
  }
  uint64_t v57 = *((void *)v54 + 214);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a13);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a14);
  uint64_t v58 = *((void *)v54 + 197);
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  uint64_t v59 = *((void *)v54 + 195);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  quasar::SystemConfig::~SystemConfig(a15);
  quasar::Bitmap::~Bitmap(v54);
  _Unwind_Resume(a1);
}

void sub_1B206FC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    JUMPOUT(0x1B206FDC0);
  }
  JUMPOUT(0x1B206FE28);
}

void sub_1B206FC4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(a34) < 0) {
    JUMPOUT(0x1B206FDC0);
  }
  JUMPOUT(0x1B206FDC4);
}

void sub_1B206FC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a59 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  JUMPOUT(0x1B206FCB4);
}

void sub_1B206FC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  JUMPOUT(0x1B206FDC4);
}

void sub_1B206FC7C()
{
}

void sub_1B206FC88()
{
}

void sub_1B206FCC4()
{
}

void sub_1B206FCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_1B206FCDC()
{
}

void sub_1B206FCEC()
{
}

void sub_1B206FD18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  JUMPOUT(0x1B206FE18);
}

void sub_1B206FD30()
{
}

void sub_1B206FD38()
{
}

void sub_1B206FD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, quasar::SystemConfig *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void **a54)
{
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)&a54);
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  a54 = (void **)&a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a54);
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  std::pair<std::string,quasar::PTree>::~pair((uint64_t)&a42);
  std::pair<std::string,quasar::PTree>::~pair(v55 - 248);
  quasar::PTree::~PTree((quasar::PTree *)(v55 - 160));
  if (*a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*a9);
  }
  uint64_t v57 = (std::__shared_weak_count *)*((void *)v54 + 214);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a13);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a14);
  uint64_t v58 = (std::__shared_weak_count *)*((void *)v54 + 197);
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  uint64_t v59 = (std::__shared_weak_count *)*((void *)v54 + 195);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  quasar::SystemConfig::~SystemConfig(a15);
  quasar::Bitmap::~Bitmap(v54);
  _Unwind_Resume(a1);
}

void sub_1B206FD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_1B206FDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void quasar::QuasarTextProc::modelKeyFromConfig(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "::");
  quasar::splitAndTrim((std::string *)a1, (char *)__p, (uint64_t *)&v37);
  if (SBYTE7(v19) < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::string>::pointer begin = v37.__begin_;
  std::vector<std::string>::pointer end = v37.__end_;
  if ((std::vector<std::string>::pointer)((char *)v37.__end_ - (char *)v37.__begin_) == (std::vector<std::string>::pointer)24)
  {
    std::string::basic_string[abi:ne180100]<0>(&v35, "*");
    std::vector<std::string>::pointer v6 = v37.__end_;
    if (v37.__end_ >= v37.__end_cap_.__value_)
    {
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37.__end_ - (char *)v37.__begin_) >> 3);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v37.__end_cap_.__value_ - (char *)v37.__begin_) >> 3) > v9) {
        unint64_t v9 = 0x5555555555555556 * (((char *)v37.__end_cap_.__value_ - (char *)v37.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v37.__end_cap_.__value_ - (char *)v37.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      *(void *)&long long v20 = &v37.__end_cap_;
      if (v10) {
        long long v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v37.__end_cap_, v10);
      }
      else {
        long long v11 = 0;
      }
      uint64_t v12 = &v11[24 * v8];
      __p[0] = v11;
      __p[1] = v12;
      *((void *)&v19 + 1) = &v11[24 * v10];
      long long v13 = v35;
      *((void *)v12 + 2) = v36;
      *(_OWORD *)uint64_t v12 = v13;
      std::string::size_type v36 = 0;
      long long v35 = 0uLL;
      *(void *)&long long v19 = v12 + 24;
      std::vector<std::string>::__swap_out_circular_buffer(&v37, (std::__split_buffer<std::string> *)__p);
      std::vector<std::string>::pointer end = v37.__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
      v37.__end_ = end;
      if (SHIBYTE(v36) < 0)
      {
        operator delete((void *)v35);
        std::vector<std::string>::pointer end = v37.__end_;
      }
    }
    else
    {
      long long v7 = v35;
      v37.__end_->__r_.__value_.__r.__words[2] = v36;
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      std::vector<std::string>::pointer end = v6 + 1;
      v37.__end_ = v6 + 1;
    }
    std::vector<std::string>::pointer begin = v37.__begin_;
  }
  if ((char *)end - (char *)begin != 48)
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Key does not match 'locale' or 'locale::keyboard': ", 51);
    int v15 = *(char *)(a1 + 23);
    if (v15 >= 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = *(void *)a1;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  quasar::QuasarTextProc::modelKey((uint64_t)begin, (uint64_t *)&begin[1], a2);
  __p[0] = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B207014C()
{
}

void sub_1B2070170(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B2070168);
}

void quasar::QuasarTextProc::modelKey(uint64_t a1@<X1>, uint64_t *a2@<X2>, std::string *a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v83 = *(std::string *)a1;
  }
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)*a2, a2[1]);
  }
  else {
    std::string v82 = *(std::string *)a2;
  }
  quasar::trim(&v83);
  quasar::trim(&v82);
  uint64_t v6 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
  if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = v83.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  int v9 = (char)v8;
  uint64_t v10 = *(void *)(a1 + 8);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (size != v8) {
    goto LABEL_92;
  }
  std::string::size_type v65 = *(int **)a1;
  if (v9 >= 0) {
    long long v11 = (unsigned __int8 *)a1;
  }
  else {
    long long v11 = *(unsigned __int8 **)a1;
  }
  if ((*((unsigned char *)&v83.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v83.__r_.__value_.__l.__data_, v11, v83.__r_.__value_.__l.__size_)) {
      goto LABEL_92;
    }
  }
  else if (*((unsigned char *)&v83.__r_.__value_.__s + 23))
  {
    uint64_t v12 = &v83;
    long long v13 = v11;
    while (v12->__r_.__value_.__s.__data_[0] == *v13)
    {
      uint64_t v12 = (std::string *)((char *)v12 + 1);
      ++v13;
      if (!--v6) {
        goto LABEL_23;
      }
    }
LABEL_92:
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    memset(v66, 0, sizeof(v66));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Locale cannot include leading/trailing whitespace: ", 51);
    int v41 = *(char *)(a1 + 23);
    if (v41 >= 0) {
      uint64_t v42 = a1;
    }
    else {
      uint64_t v42 = *(void *)a1;
    }
    if (v41 >= 0) {
      uint64_t v43 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v43 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v66);
  }
LABEL_23:
  uint64_t v64 = v10;
  uint64_t v14 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v15 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v15 = v82.__r_.__value_.__l.__size_;
  }
  uint64_t v16 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  int v17 = (char)v16;
  uint64_t v62 = (unsigned __int8 *)a2[1];
  if ((char)v16 < 0) {
    uint64_t v16 = (unsigned __int8 *)a2[1];
  }
  if ((unsigned __int8 *)v15 != v16)
  {
LABEL_99:
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    memset(v66, 0, sizeof(v66));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    int v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Keyboard cannot include leading/trailing whitespace: ", 53);
    int v45 = *((char *)a2 + 23);
    if (v45 >= 0) {
      uint64_t v46 = (uint64_t)a2;
    }
    else {
      uint64_t v46 = *a2;
    }
    if (v45 >= 0) {
      uint64_t v47 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v47 = a2[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, v46, v47);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v66);
  }
  uint64_t v63 = (unsigned __int8 *)*a2;
  if (v17 >= 0) {
    int v18 = (unsigned __int8 *)a2;
  }
  else {
    int v18 = (unsigned __int8 *)*a2;
  }
  if ((*((unsigned char *)&v82.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v82.__r_.__value_.__l.__data_, v18, v82.__r_.__value_.__l.__size_)) {
      goto LABEL_99;
    }
  }
  else if (*((unsigned char *)&v82.__r_.__value_.__s + 23))
  {
    long long v19 = &v82;
    long long v20 = v18;
    while (v19->__r_.__value_.__s.__data_[0] == *v20)
    {
      long long v19 = (std::string *)((char *)v19 + 1);
      ++v20;
      if (!--v14) {
        goto LABEL_39;
      }
    }
    goto LABEL_99;
  }
LABEL_39:
  if (size >= 2)
  {
    long long v21 = (char *)&v11[size];
    int64_t v22 = size;
    long long v23 = v11;
    do
    {
      long long v24 = (char *)memchr(v23, 58, v22 - 1);
      if (!v24) {
        break;
      }
      if (*(_WORD *)v24 == 14906)
      {
        if (v24 != v21 && v24 - (char *)v11 != -1)
        {
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v67 = 0u;
          memset(v66, 0, sizeof(v66));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
          long long v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Locale with separator '", 23);
          long long v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"::", 2);
          char v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"' not supported: ", 17);
          int v53 = *(char *)(a1 + 23);
          if (v53 >= 0) {
            uint64_t v54 = a1;
          }
          else {
            uint64_t v54 = *(void *)a1;
          }
          if (v53 >= 0) {
            uint64_t v55 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            uint64_t v55 = *(void *)(a1 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v66);
        }
        break;
      }
      long long v23 = v24 + 1;
      int64_t v22 = v21 - (unsigned char *)v23;
    }
    while (v21 - (unsigned char *)v23 >= 2);
  }
  if (v15 >= 2)
  {
    long long v25 = (char *)&v18[v15];
    long long v26 = v18;
    do
    {
      long long v27 = (char *)memchr(v26, 58, v15 - 1);
      if (!v27) {
        break;
      }
      if (*(_WORD *)v27 == 14906)
      {
        if (v27 != v25 && v27 - (char *)v18 != -1)
        {
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v67 = 0u;
          memset(v66, 0, sizeof(v66));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
          uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Keyboard with separator '", 25);
          uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"::", 2);
          uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"' not supported: ", 17);
          int v59 = *((char *)a2 + 23);
          if (v59 >= 0) {
            uint64_t v60 = (uint64_t)a2;
          }
          else {
            uint64_t v60 = *a2;
          }
          if (v59 >= 0) {
            uint64_t v61 = *((unsigned __int8 *)a2 + 23);
          }
          else {
            uint64_t v61 = a2[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v60, v61);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v66);
        }
        break;
      }
      long long v26 = v27 + 1;
      int64_t v15 = v25 - (unsigned char *)v26;
    }
    while (v25 - (unsigned char *)v26 >= 2);
  }
  if (v9 < 0)
  {
    long long v28 = v65;
    BOOL v29 = v64 == 7;
  }
  else
  {
    long long v28 = (int *)a1;
    BOOL v29 = v9 == 7;
  }
  if (v29)
  {
    int v30 = *v28;
    int v31 = *(int *)((char *)v28 + 3);
    if (v30 == 1634100580 && v31 == 1953264993)
    {
      if (v17 < 0)
      {
        if (v62 != (unsigned __int8 *)1) {
          goto LABEL_106;
        }
        int v33 = *v63;
      }
      else
      {
        if (v17 != 1) {
          goto LABEL_106;
        }
        int v33 = v63;
      }
      if (v33 == 42) {
        goto LABEL_71;
      }
LABEL_106:
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      memset(v66, 0, sizeof(v66));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
      long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Locale=", 7);
      long long v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"default", 7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" should only be used with keyboard=*", 36);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v66);
    }
  }
LABEL_71:
  std::string::basic_string[abi:ne180100]((uint64_t)v66, size + 2);
  if (v66[23] >= 0) {
    long long v34 = v66;
  }
  else {
    long long v34 = *(unsigned char **)v66;
  }
  if (size)
  {
    if (*(char *)(a1 + 23) >= 0) {
      long long v35 = (const void *)a1;
    }
    else {
      long long v35 = *(const void **)a1;
    }
    memmove(v34, v35, size);
  }
  strcpy(&v34[size], "::");
  int v36 = *((char *)a2 + 23);
  if (v36 >= 0) {
    std::vector<std::string> v37 = (const std::string::value_type *)a2;
  }
  else {
    std::vector<std::string> v37 = (const std::string::value_type *)*a2;
  }
  if (v36 >= 0) {
    std::string::size_type v38 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::string::size_type v38 = a2[1];
  }
  long long v39 = std::string::append((std::string *)v66, v37, v38);
  *a3 = *v39;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if ((v66[23] & 0x80000000) != 0) {
    operator delete(*(void **)v66);
  }
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
}

void sub_1B20707E8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  _Unwind_Resume(a1);
}

std::string *quasar::QuasarTextProc::getItn2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  int v6 = *(char *)(a3 + 23);
  if (v6 < 0)
  {
    if (*(void *)(a3 + 8) != 1) {
      goto LABEL_7;
    }
    long long v7 = *(unsigned char **)a3;
  }
  else
  {
    long long v7 = (unsigned char *)a3;
    if (v6 != 1) {
      goto LABEL_7;
    }
  }
  if (*v7 == 42)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    *(_OWORD *)long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Keyboard=* is reserved for internal use");
    goto LABEL_29;
  }
LABEL_7:
  if (!*(void *)(a1 + 1608))
  {
    uint64_t result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a4, "");
    a4[1].__r_.__value_.__r.__words[0] = 0;
    a4[1].__r_.__value_.__l.__size_ = 0;
    return result;
  }
  uint64_t v8 = (void *)(a1 + 1584);
  quasar::QuasarTextProc::modelKey(a2, (uint64_t *)a3, (std::string *)__p);
  int v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v8, (unsigned __int8 *)__p);
  uint64_t v10 = v9;
  if (SBYTE7(v21) < 0)
  {
    operator delete(__p[0]);
    if (!v10)
    {
LABEL_13:
      std::string::basic_string[abi:ne180100]<0>(v18, "*");
      quasar::QuasarTextProc::modelKey(a2, (uint64_t *)v18, (std::string *)__p);
      uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v8, (unsigned __int8 *)__p);
      if (SBYTE7(v21) < 0) {
        operator delete(__p[0]);
      }
      if (v19 < 0)
      {
        operator delete(v18[0]);
        if (v10) {
          goto LABEL_17;
        }
      }
      else if (v10)
      {
        goto LABEL_17;
      }
      std::string::basic_string[abi:ne180100]<0>(v18, "default");
      std::string::basic_string[abi:ne180100]<0>(v16, "*");
      quasar::QuasarTextProc::modelKey((uint64_t)v18, (uint64_t *)v16, (std::string *)__p);
      uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v8, (unsigned __int8 *)__p);
      if (SBYTE7(v21) < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      if (v14)
      {
        uint64_t v12 = (long long *)(v14 + 16);
        long long v13 = (std::string::size_type *)(v14 + 40);
        return std::pair<std::string,std::shared_ptr<quasar::InverseTextNormalizer>>::pair[abi:ne180100]<true,0>(a4, v12, v13);
      }
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      *(_OWORD *)long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      int64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"There are itn2 models, but cannot find one for locale=", 54);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v15, a2);
LABEL_29:
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
  }
  else if (!v9)
  {
    goto LABEL_13;
  }
LABEL_17:
  uint64_t v12 = (long long *)(v10 + 16);
  long long v13 = (std::string::size_type *)(v10 + 40);
  return std::pair<std::string,std::shared_ptr<quasar::InverseTextNormalizer>>::pair[abi:ne180100]<true,0>(a4, v12, v13);
}

void sub_1B2070A68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void sub_1B2070AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    JUMPOUT(0x1B2070AE8);
  }
  JUMPOUT(0x1B2070AECLL);
}

std::string *quasar::QuasarTextProc::getPostItnHammer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, std::string *a5@<X8>)
{
  int v7 = *(char *)(a3 + 23);
  if (v7 < 0)
  {
    if (*(void *)(a3 + 8) != 1) {
      goto LABEL_7;
    }
    uint64_t v8 = *(unsigned char **)a3;
  }
  else
  {
    uint64_t v8 = (unsigned char *)a3;
    if (v7 != 1) {
      goto LABEL_7;
    }
  }
  if (*v8 == 42)
  {
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    *(_OWORD *)long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Keyboard=* is reserved for internal use");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_7:
  int v9 = *(char *)(a4 + 23);
  if (v9 < 0)
  {
    if (*(void *)(a4 + 8) != 15)
    {
LABEL_15:
      long long v13 = (void *)(a1 + 1624);
      goto LABEL_22;
    }
    a4 = *(void *)a4;
  }
  else if (v9 != 15)
  {
    goto LABEL_15;
  }
  unint64_t v10 = 0x706F73742D69746ELL;
  unint64_t v11 = bswap64(*(void *)a4);
  if (v11 == 0x706F73742D69746ELL
    && (unint64_t v10 = 0x6E2D68616D6D6572, v11 = bswap64(*(void *)(a4 + 7)), v11 == 0x6E2D68616D6D6572))
  {
    int v12 = 0;
  }
  else if (v11 < v10)
  {
    int v12 = -1;
  }
  else
  {
    int v12 = 1;
  }
  if (v12) {
    long long v13 = (void *)(a1 + 1624);
  }
  else {
    long long v13 = (void *)(a1 + 1664);
  }
LABEL_22:
  quasar::QuasarTextProc::modelKey(a2, (uint64_t *)a3, (std::string *)__p);
  uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v13, (unsigned __int8 *)__p);
  int64_t v15 = v14;
  if (SBYTE7(v25) < 0)
  {
    operator delete(__p[0]);
    if (v15) {
      goto LABEL_24;
    }
  }
  else if (v14)
  {
LABEL_24:
    uint64_t v16 = (long long *)(v15 + 16);
    char v17 = (std::string::size_type *)(v15 + 40);
    return std::pair<std::string,std::shared_ptr<quasar::InverseTextNormalizer>>::pair[abi:ne180100]<true,0>(a5, v16, v17);
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "*");
  quasar::QuasarTextProc::modelKey(a2, (uint64_t *)v22, (std::string *)__p);
  int v18 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v13, (unsigned __int8 *)__p);
  if (SBYTE7(v25) < 0) {
    operator delete(__p[0]);
  }
  if (v23 < 0)
  {
    operator delete(v22[0]);
    if (!v18) {
      goto LABEL_32;
    }
LABEL_38:
    uint64_t v16 = (long long *)(v18 + 16);
    char v17 = (std::string::size_type *)(v18 + 40);
    return std::pair<std::string,std::shared_ptr<quasar::InverseTextNormalizer>>::pair[abi:ne180100]<true,0>(a5, v16, v17);
  }
  if (v18) {
    goto LABEL_38;
  }
LABEL_32:
  std::string::basic_string[abi:ne180100]<0>(v22, "default");
  std::string::basic_string[abi:ne180100]<0>(v20, "*");
  quasar::QuasarTextProc::modelKey((uint64_t)v22, (uint64_t *)v20, (std::string *)__p);
  int v18 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v13, (unsigned __int8 *)__p);
  if (SBYTE7(v25) < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v23 < 0)
  {
    operator delete(v22[0]);
    if (v18) {
      goto LABEL_38;
    }
  }
  else if (v18)
  {
    goto LABEL_38;
  }
  uint64_t result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a5, "");
  a5[1].__r_.__value_.__r.__words[0] = 0;
  a5[1].__r_.__value_.__l.__size_ = 0;
  return result;
}

void quasar::QuasarTextProc::formatWords(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, const void **a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, unsigned __int8 a10)
{
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      *(_OWORD *)long long __p = 0u;
      long long v36 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"empty ITN input tokens", 22);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
  }
  else
  {
    quasar::QuasarTextProc::getItn2(a1, a5, a6, (std::string *)__p);
    if (*((void *)&v36 + 1))
    {
      quasar::InverseTextNormalizer::run(*((int **)&v36 + 1), (long long **)a2, a7, a8, a9);
    }
    else if (*(void *)(a1 + 1552))
    {
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      int v19 = quasar::QsrText::SingletonInstance(0);
      quasar::QsrText::qsrToHatTokens(v19, a2, &v32, 0);
      long long v29 = 0;
      long long v30 = 0;
      uint64_t v31 = 0;
      long long v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v20 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v26, &v32);
      uint64_t v21 = *(void *)(a1 + 1552);
      uint64_t v27 = v20;
      long long v22 = (quasar::QsrText *)quasar::QuasarTextProcImpl::run(v21, (uint64_t *)&v26, (uint64_t *)&v29, a10);
      if (v22 || (long long v25 = (uint64_t *)v29, v29 == v30))
      {
        *a9 = 0;
        a9[1] = 0;
        a9[2] = 0;
        uint64_t v23 = quasar::QsrText::SingletonInstance(v22);
        quasar::QsrText::decodeQsrTextTokens(v23, (uint64_t *)a2, a9);
      }
      else
      {
        *a9 = 0;
        a9[1] = 0;
        a9[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a9, *v25, v25[1], 0x6DB6DB6DB6DB6DB7 * ((v25[1] - *v25) >> 5));
      }
      char v52 = (void ***)&v26;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
      long long v26 = &v29;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
      long long v29 = (void **)&v32;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v29);
    }
    else
    {
      uint64_t v24 = *(void *)(a1 + 1720);
      if (v24)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void **, uint64_t, unsigned __int8, uint64_t *))(*(void *)v24 + 16))(v24, a2, a3, a4, a5, a6, a7, a8, a10, &v32);
        long long v29 = (void **)&v32;
        std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&v29);
      }
      else
      {
        *a9 = 0;
        a9[1] = 0;
        a9[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a9, *(void *)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
      }
    }
    if ((void)v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v37);
    }
    if (SBYTE7(v36) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B20710C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void **);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

void quasar::QuasarTextProc::formatWordsLat(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, const void **a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, unsigned __int8 a10)
{
  if (*a2 == a2[1])
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      *(_OWORD *)long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"empty ITN input tokens", 22);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
  }
  else
  {
    quasar::QuasarTextProc::getItn2(a1, a5, a6, (std::string *)__p);
    if (*((void *)&v42 + 1))
    {
      std::vector<std::vector<quasar::Token>>::vector(a9, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
      int v19 = *a2;
      if (a2[1] != *a2)
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        do
        {
          quasar::InverseTextNormalizer::run(*((int **)&v42 + 1), (long long **)&v19[v20], a7, a8, (uint64_t *)&v39);
          uint64_t v22 = *a9 + v20 * 8;
          std::vector<quasar::Token>::__vdeallocate((void **)v22);
          *(_OWORD *)uint64_t v22 = v39;
          *(void *)(v22 + 16) = v40;
          long long v39 = 0uLL;
          unint64_t v40 = 0;
          *(void *)&long long v37 = &v39;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
          ++v21;
          int v19 = *a2;
          v20 += 3;
        }
        while (0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2) > v21);
      }
    }
    else
    {
      uint64_t v23 = *(quasar::QsrText **)(a1 + 1552);
      if (v23)
      {
        long long v39 = 0uLL;
        unint64_t v40 = 0;
        uint64_t v24 = (uint64_t)*a2;
        long long v25 = a2[1];
        if (*a2 != v25)
        {
          do
          {
            long long v37 = 0uLL;
            uint64_t v38 = 0;
            int v26 = quasar::QsrText::SingletonInstance(v23);
            quasar::QsrText::qsrToHatTokens(v26, v24, (uint64_t *)&v37, 0);
            uint64_t v27 = (void *)*((void *)&v39 + 1);
            if (*((void *)&v39 + 1) >= v40)
            {
              uint64_t v28 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v39, (uint64_t *)&v37);
            }
            else
            {
              **((void **)&v39 + 1) = 0;
              v27[1] = 0;
              v27[2] = 0;
              std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v27, v37, *((uint64_t *)&v37 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v37 + 1) - v37) >> 5));
              uint64_t v28 = (uint64_t)(v27 + 3);
            }
            *((void *)&v39 + 1) = v28;
            v36[0] = (void **)&v37;
            std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v36);
            v24 += 24;
          }
          while ((uint64_t *)v24 != v25);
          uint64_t v23 = *(quasar::QsrText **)(a1 + 1552);
        }
        long long v37 = 0uLL;
        uint64_t v38 = 0;
        long long v29 = (quasar::QsrText *)quasar::QuasarTextProcImpl::run((uint64_t)v23, (uint64_t *)&v39, (uint64_t *)&v37, a10);
        if (v29)
        {
          *a9 = 0;
          a9[1] = 0;
          a9[2] = 0;
          uint64_t v31 = *a2;
          for (std::vector<std::string>::pointer i = a2[1]; v31 != i; v31 += 3)
          {
            memset(v36, 0, sizeof(v36));
            uint64_t v32 = quasar::QsrText::SingletonInstance(v29);
            quasar::QsrText::decodeQsrTextTokens(v32, v31, (uint64_t *)v36);
            unint64_t v33 = a9[1];
            if (v33 >= a9[2])
            {
              uint64_t v34 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(a9, (uint64_t *)v36);
            }
            else
            {
              std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)a9, (uint64_t *)v36);
              uint64_t v34 = v33 + 24;
            }
            a9[1] = v34;
            uint64_t v58 = v36;
            std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
          }
        }
        else
        {
          *(_OWORD *)a9 = v37;
          a9[2] = v38;
          uint64_t v38 = 0;
          long long v37 = 0uLL;
        }
        v36[0] = (void **)&v37;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v36);
        *(void *)&long long v37 = &v39;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
      }
      else
      {
        uint64_t v35 = *(void *)(a1 + 1720);
        if (v35)
        {
          long long v39 = 0uLL;
          unint64_t v40 = 0;
          (*(void (**)(uint64_t, uint64_t **, uint64_t, uint64_t, uint64_t, uint64_t, const void **, uint64_t, unsigned __int8, long long *))(*(void *)v35 + 24))(v35, a2, a3, a4, a5, a6, a7, a8, a10, &v39);
          *(void *)&long long v37 = &v39;
          std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
        }
        else
        {
          *a9 = 0;
          a9[1] = 0;
          a9[2] = 0;
          std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a9, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
        }
      }
    }
    if ((void)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v43);
    }
    if (SBYTE7(v42) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B207153C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void **);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

void quasar::QuasarTextProc::applyLatticeProcessor(quasar::QsrText *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  if (*((void *)a1 + 213))
  {
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v8 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v18, a2);
    uint64_t v9 = *((void *)a1 + 213);
    uint64_t v19 = v8;
    int v10 = quasar::QuasarTextProcImpl::run(v9, (uint64_t *)&v18, (uint64_t *)&v21, a3);
    uint64_t v11 = v21;
    if (v21 == v22) {
      uint64_t v11 = a2;
    }
    if (v10) {
      uint64_t v11 = a2;
    }
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a4, *v11, v11[1], 0x6DB6DB6DB6DB6DB7 * ((v11[1] - *v11) >> 5));
    uint64_t v24 = &v18;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
    int v18 = (void **)&v21;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
  else if (*((void *)a1 + 201))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    int v12 = quasar::QsrText::SingletonInstance(a1);
    quasar::QsrText::removeW00(v12, (long long **)a2, a4);
  }
  else
  {
    uint64_t v13 = *((void *)a1 + 215);
    if (v13)
    {
      uint64_t v14 = *(void (**)(void))(*(void *)v13 + 32);
      v14();
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v15 = *a2;
      uint64_t v16 = a2[1];
      unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((v16 - *a2) >> 5);
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a4, v15, v16, v17);
    }
  }
}

void sub_1B20717B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarTextProc::sanitizer(uint64_t a1, uint64_t a2, std::vector<std::string> *this)
{
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8)) {
      goto LABEL_3;
    }
LABEL_6:
    if (quasar::gLogLevel >= 4)
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      memset(__v, 0, sizeof(__v));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"empty sanitizer input tokens", 28);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__v);
    }
    std::vector<std::string>::resize(this, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    int value = this->__end_cap_.__value_;
    std::vector<std::string>::pointer end = this->__end_;
    if (end >= value)
    {
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
      if (2 * v10 > v9) {
        unint64_t v9 = 2 * v10;
      }
      if (v10 >= 0x555555555555555) {
        unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v11 = v9;
      }
      *(void *)&__v[32] = &this->__end_cap_;
      if (v11) {
        int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&this->__end_cap_, v11);
      }
      else {
        int v12 = 0;
      }
      uint64_t v13 = &v12[24 * v8];
      *(void *)__v = v12;
      *(void *)&__v[8] = v13;
      *(void *)&__v[24] = &v12[24 * v11];
      long long v14 = *(_OWORD *)__p;
      *((void *)v13 + 2) = v18;
      *(_OWORD *)uint64_t v13 = v14;
      __p[1] = 0;
      std::string::size_type v18 = 0;
      __p[0] = 0;
      *(void *)&__v[16] = v13 + 24;
      std::vector<std::string>::__swap_out_circular_buffer(this, (std::__split_buffer<std::string> *)__v);
      uint64_t v15 = this->__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
      int v16 = SHIBYTE(v18);
      this->__end_ = v15;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v7 = *(_OWORD *)__p;
      end->__r_.__value_.__r.__words[2] = v18;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
      this->__end_ = end + 1;
    }
    return 1;
  }
  if (!*(unsigned char *)(a2 + 23)) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t result = *(void *)(a1 + 1568);
  if (!result) {
    return result;
  }
  quasar::QuasarTextProcImpl::run(result, (const std::string *)a2, (uint64_t *)this);
  return 1;
}

void sub_1B20719D0(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, std::__split_buffer<std::wstring> *a8, uint64_t a9, void *__pa, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

void quasar::QuasarTextProc::emojiPhraseWithoutKeyword(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a3, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  std::string::basic_string[abi:ne180100]<0>(&p_p, "emoji-keyword-remove-fst-1");
  std::string::basic_string[abi:ne180100]<0>(v8, "*");
  quasar::QuasarTextProc::modelKey((uint64_t)&p_p, (uint64_t *)v8, &__p);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 1624), (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (SHIBYTE(v12) < 0)
  {
    operator delete(p_p);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  uint64_t v6 = *((void *)v5 + 5);
  if (v6)
  {
    long long v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    memset(&__p, 0, sizeof(__p));
    p_p = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v11 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&p_p, a3);
    if (!quasar::QuasarTextProcImpl::run(v6, (uint64_t *)&p_p, (uint64_t *)&__p, 0)
      && (uint64_t *)__p.__r_.__value_.__l.__data_ != a3
      && __p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
    {
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a3, *(void *)__p.__r_.__value_.__l.__data_, *(void *)(__p.__r_.__value_.__r.__words[0] + 8), 0x6DB6DB6DB6DB6DB7* ((uint64_t)(*(void *)(__p.__r_.__value_.__r.__words[0] + 8) - *(void *)__p.__r_.__value_.__l.__data_) >> 5));
    }
    v8[0] = &p_p;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v8);
    p_p = &__p;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1B2071BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **p_p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  p_p = &__p;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::QuasarTextProc::postItnHammer(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (*a2 != a2[1])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "post-itn-hammer");
    quasar::QuasarTextProc::getPostItnHammer(a1, a3, a4, (unint64_t)__p, &v55);
    if (SBYTE7(v59) < 0)
    {
      operator delete(__p[0]);
      if (a6)
      {
LABEL_4:
        std::string::basic_string[abi:ne180100]<0>(__p, "emoji-hammer");
        quasar::QuasarTextProc::getPostItnHammer(a1, a3, a4, (unint64_t)__p, &v53);
        if (SBYTE7(v59) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
    }
    else if (a6)
    {
      goto LABEL_4;
    }
    std::string::basic_string[abi:ne180100]<0>(&v53, "");
    long long v54 = 0uLL;
LABEL_11:
    if ((a5 & 1) == 0 && quasar::gLogLevel >= 4)
    {
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"locale=", 7);
      int v15 = *(char *)(a3 + 23);
      if (v15 >= 0) {
        uint64_t v16 = a3;
      }
      else {
        uint64_t v16 = *(void *)a3;
      }
      if (v15 >= 0) {
        uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v17 = *(void *)(a3 + 8);
      }
      std::string::size_type v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" keyboard=\"", 11);
      int v20 = *(char *)(a4 + 23);
      if (v20 >= 0) {
        uint64_t v21 = a4;
      }
      else {
        uint64_t v21 = *(void *)a4;
      }
      if (v20 >= 0) {
        uint64_t v22 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        uint64_t v22 = *(void *)(a4 + 8);
      }
      long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
      long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\"", 1);
      long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" postItnHammer=\"", 16);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v26 = &v55;
      }
      else {
        long long v26 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v55.__r_.__value_.__l.__size_;
      }
      long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, size);
      long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\"", 1);
      long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" emojiHammer=\"", 14);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v31 = &v53;
      }
      else {
        long long v31 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v32 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v32 = v53.__r_.__value_.__l.__size_;
      }
      long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\"", 1);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a7, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
    __p[0] = v56;
    __p[1] = v57;
    if (v57) {
      atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v59 = v54;
    if (*((void *)&v54 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v54 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v34 = 0;
    uint64_t v35 = __p;
    do
    {
      if (*v35)
      {
        long long v50 = 0;
        long long v51 = 0;
        uint64_t v52 = 0;
        long long v47 = 0;
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        uint64_t v36 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v47, a7);
        uint64_t v37 = (uint64_t)*v35;
        uint64_t v48 = v36;
        if (!quasar::QuasarTextProcImpl::run(v37, (uint64_t *)&v47, (uint64_t *)&v50, a5))
        {
          uint64_t v38 = v50;
          if (v50 != v51)
          {
            uint64_t v39 = *v50;
            uint64_t v40 = v50[1];
            if (*v50 != v40)
            {
              do
              {
                std::string::basic_string[abi:ne180100]<0>(v45, "\x1F");
                std::string::basic_string[abi:ne180100]<0>(v43, "");
                quasar::replaceAll(v39, (uint64_t)v45, (char *)v43);
                if (v44 < 0) {
                  operator delete(v43[0]);
                }
                if (v46 < 0) {
                  operator delete(v45[0]);
                }
                v39 += 224;
              }
              while (v39 != v40);
              uint64_t v38 = v50;
            }
            if (v38 != a7) {
              std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a7, *v38, v38[1], 0x6DB6DB6DB6DB6DB7 * ((v38[1] - *v38) >> 5));
            }
          }
        }
        v45[0] = &v47;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v45);
        long long v47 = (void **)&v50;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v47);
      }
      ++v34;
      uint64_t v35 = &__p[2 * v34];
    }
    while (v34 != 2);
    for (uint64_t i = 3; i != -1; i -= 2)
    {
      long long v42 = (std::__shared_weak_count *)__p[i];
      if (v42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      }
    }
    if (*((void *)&v54 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v54 + 1));
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"empty postItnHammer input tokens", 32);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
}

void sub_1B2072104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
}

BOOL quasar::QuasarTextProc::qsrSanitizerExists(quasar::QuasarTextProc *this)
{
  return *((void *)this + 196) != 0;
}

BOOL quasar::QuasarTextProc::isEmojiSupportedLocale(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "");
  quasar::QuasarTextProc::getItn2(a1, a2, (uint64_t)v6, &__p);
  uint64_t v4 = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  return v4 != 0;
}

void sub_1B20722A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double quasar::QuasarTextProc::getEndsOfSentencePunctuations@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  quasar::QuasarTextProc::getItn2(a1, a2, (uint64_t)v9, &__p);
  char v7 = v12;
  uint64_t v6 = v13;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if (v7)
    {
LABEL_5:
      double result = quasar::InverseTextNormalizer::getEndsOfSentencePunctuations(v7, a3);
      if (!v6) {
        return result;
      }
      goto LABEL_6;
    }
  }
  else if (v7)
  {
    goto LABEL_5;
  }
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (!v6) {
    return result;
  }
LABEL_6:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return result;
}

void sub_1B207237C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void quasar::QuasarTextProc::qsrTextProcExists(quasar::QuasarTextProc *this, const quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc");
  quasar::SystemConfig::enforceMinVersion((uint64_t)this, 10, 0, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc");
  quasar::SystemConfig::hasParam((uint64_t)this, (uint64_t)__p);
}

void sub_1B2072504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
}

void quasar::QuasarTextProc::updateHammeredItnWithEmojiAlternativeName(uint64_t a1, std::string *a2, std::string *a3)
{
  char v4 = (std::string::__raw *)a2;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  quasar::getPreItnTokenToPostItnCharAlignment(a2, a3, &v38, (uint64_t *)&v40);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  uint64_t v5 = v41;
  if (v41 != v40)
  {
    std::string::size_type v6 = a3->__r_.__value_.__r.__words[0];
    if (a3->__r_.__value_.__l.__size_ != a3->__r_.__value_.__r.__words[0])
    {
      uint64_t v7 = 0;
      unsigned int v8 = 0;
      int v33 = 0;
      unint64_t v9 = 0;
      while (1)
      {
        ++v8;
        while (quasar::Token::isAutoPunctuation((quasar::Token *)(v6 + 224 * v7)))
        {
          uint64_t v5 = v40;
          if (v9 < (v41 - v40) >> 4)
          {
            uint64_t v7 = v8;
            std::string::size_type v6 = a3->__r_.__value_.__r.__words[0];
            if (0x6DB6DB6DB6DB6DB7
               * ((uint64_t)(a3->__r_.__value_.__l.__size_ - a3->__r_.__value_.__r.__words[0]) >> 5) > (unint64_t)v8++)
              continue;
          }
          goto LABEL_59;
        }
        uint64_t v11 = a3->__r_.__value_.__r.__words[0] + 224 * v7;
        if (*(char *)(v11 + 23) < 0) {
          uint64_t v12 = *(void *)(v11 + 8);
        }
        else {
          LODWORD(v12) = *(unsigned __int8 *)(v11 + 23);
        }
        int v13 = *(_DWORD *)&v40[16 * v9 + 12] - *(_DWORD *)&v40[16 * v9 + 8];
        if (v13 != v12 && v13 + 1 != v12) {
          goto LABEL_55;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "spokenemoji|");
        BOOL v15 = quasar::startsWith((unsigned __int8 *)v11, (unsigned __int8 *)&__p);
        BOOL v16 = v15;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v16)
          {
LABEL_23:
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            uint64_t v17 = &v40[16 * v9];
            unint64_t v18 = *(unsigned int *)v17;
            LODWORD(v17) = *((_DWORD *)v17 + 1);
            if (v18 < v17)
            {
              uint64_t v19 = 224 * v18;
              uint64_t v34 = v4;
              do
              {
                unint64_t v20 = v9;
                uint64_t v21 = (const void **)(v4->__words[0] + v19);
                size_t v22 = *((unsigned __int8 *)v21 + 44);
                if (*((char *)v21 + 23) >= 0) {
                  size_t v23 = *((unsigned __int8 *)v21 + 23);
                }
                else {
                  size_t v23 = (size_t)v21[1];
                }
                std::string::basic_string[abi:ne180100]((uint64_t)v35, v23 + v22);
                if ((v36 & 0x80u) == 0) {
                  long long v24 = v35;
                }
                else {
                  long long v24 = (void **)v35[0];
                }
                if (v23)
                {
                  if (*((char *)v21 + 23) >= 0) {
                    long long v25 = v21;
                  }
                  else {
                    long long v25 = *v21;
                  }
                  memmove(v24, v25, v23);
                }
                long long v26 = (char *)v24 + v23;
                if (v22) {
                  memcpy(v26, " ", v22);
                }
                v26[v22] = 0;
                if ((v36 & 0x80u) == 0) {
                  long long v27 = v35;
                }
                else {
                  long long v27 = (void **)v35[0];
                }
                if ((v36 & 0x80u) == 0) {
                  std::string::size_type v28 = v36;
                }
                else {
                  std::string::size_type v28 = (std::string::size_type)v35[1];
                }
                std::string::append(&__p, (const std::string::value_type *)v27, v28);
                unint64_t v9 = v20;
                char v4 = v34;
                if ((char)v36 < 0) {
                  operator delete(v35[0]);
                }
                ++v18;
                uint64_t v17 = (char *)*(unsigned int *)&v40[16 * v20 + 4];
                v19 += 224;
              }
              while (v18 < (unint64_t)v17);
            }
            uint64_t v29 = v4->__words[0] + 224 * (int)v17;
            int v30 = *(char *)(v29 + 23);
            if (v30 >= 0) {
              long long v31 = (const std::string::value_type *)v29;
            }
            else {
              long long v31 = *(const std::string::value_type **)v29;
            }
            if (v30 >= 0) {
              std::string::size_type v32 = *(unsigned __int8 *)(v29 + 23);
            }
            else {
              std::string::size_type v32 = *(void *)(v29 + 8);
            }
            std::string::append(&__p, v31, v32);
            std::string::operator=((std::string *)(a3->__r_.__value_.__r.__words[0] + 224 * v7 + 176), &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
        else if (v15)
        {
          goto LABEL_23;
        }
LABEL_55:
        unint64_t v9 = (v33 + 1);
        uint64_t v5 = v40;
        if (v9 < (v41 - v40) >> 4)
        {
          uint64_t v7 = v8;
          std::string::size_type v6 = a3->__r_.__value_.__r.__words[0];
          ++v33;
          if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a3->__r_.__value_.__l.__size_ - a3->__r_.__value_.__r.__words[0]) >> 5) > (unint64_t)v8) {
            continue;
          }
        }
        goto LABEL_59;
      }
    }
    uint64_t v5 = v40;
  }
LABEL_59:
  if (v5)
  {
    long long v41 = v5;
    operator delete(v5);
  }
}

void sub_1B2072894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QuasarTextProc::isEnableAutoPunctuation(uint64_t a1, uint64_t a2, const void **a3, char a4)
{
  std::string::basic_string[abi:ne180100]<0>(v12, "");
  quasar::QuasarTextProc::getItn2(a1, a2, (uint64_t)v12, &__p);
  uint64_t v9 = v15;
  unsigned int v8 = v16;
  uint64_t v15 = 0;
  BOOL v16 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v13 & 0x80000000) == 0)
  {
    if (v9) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t isEnableAutoPunctuation = 0;
    if (!v8) {
      return isEnableAutoPunctuation;
    }
    goto LABEL_6;
  }
  operator delete(v12[0]);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t isEnableAutoPunctuation = quasar::InverseTextNormalizer::isEnableAutoPunctuation(v9, a3, a4);
  if (v8) {
LABEL_6:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  return isEnableAutoPunctuation;
}

void sub_1B20729C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void quasar::QuasarTextProc::~QuasarTextProc(quasar::QuasarTextProc *this)
{
  quasar::QuasarTextProc::~QuasarTextProc(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1F0A52AB0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 216);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 214);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)this + 1664);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)this + 1624);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)this + 1584);
  char v4 = (std::__shared_weak_count *)*((void *)this + 197);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 195);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  quasar::SystemConfig::~SystemConfig((quasar::QuasarTextProc *)((char *)this + 8));
  quasar::Bitmap::~Bitmap(this);
}

void quasar::Hammer::~Hammer(void **this)
{
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  uint64_t v3 = this + 5;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)this[1];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void quasar::HammerSeqLat::~HammerSeqLat(void **this)
{
  uint64_t v2 = this + 14;
  std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 11;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::Hammer::~Hammer(this);
}

std::string *std::pair<std::string,std::shared_ptr<quasar::InverseTextNormalizer>>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::Read()
{
}

void sub_1B2072F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A384E0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 112) = -1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "const");
  std::string::operator=(v2, &__str);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950001;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1B207307C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::~ConstFstImpl(void *a1)
{
  fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::~ConstFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::~ConstFstImpl(void *a1)
{
  *a1 = &unk_1F0A384E0;
  uint64_t v2 = a1[9];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[8];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::~ConstFst(void *a1)
{
  fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 112);
}

float fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return *(float *)(*(void *)(*(void *)(a1 + 8) + 80) + 20 * a2);
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 80) + 20 * a2 + 8);
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 80) + 20 * a2 + 12);
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 80) + 20 * a2 + 16);
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::Copy()
{
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v2 + 96);
  return result;
}

uint64_t fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 8) + 80) + 20 * a2;
  uint64_t v5 = *(unsigned int *)(v3 + 4);
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(void *)(*(void *)(result + 8) + 88) + 16 * v5;
  *a3 = 0;
  a3[1] = v6;
  a3[2] = v4;
  a3[3] = 0;
  return result;
}

BOOL fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::IsMemoryMapped(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  return *(void *)(*(void *)(v1 + 64) + 16) && *(void *)(*(void *)(v1 + 72) + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 96);
}

void *fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A40FD8;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::WriteFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a3 + 27)) {
    int v6 = 1;
  }
  else {
    int v6 = 2;
  }
  uint64_t v7 = a1[1];
  if (v7)
  {
    uint64_t v8 = 0;
    int v42 = 0;
    uint64_t v9 = *(void *)(v7 + 104);
    uint64_t v10 = *(int *)(v7 + 96);
  }
  else
  {
    uint64_t v11 = (char *)a2 + *(void *)(*a2 - 24);
    if ((v11[32] & 5) != 0
      || ((*(void (**)(uint64_t *__return_ptr))(**((void **)v11 + 5) + 32))(&v50), uint64_t v8 = v58, v58 == -1))
    {
      uint64_t v10 = *(unsigned int *)(a1[1] + 96);
      if ((int)v10 < 1)
      {
        uint64_t v10 = 0;
        int v42 = 0;
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v9 = 0;
        for (uint64_t i = 0; i != v10; ++i)
          v9 += (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, i);
        int v42 = 0;
      }
      uint64_t v8 = -1;
    }
    else
    {
      int v42 = 1;
      uint64_t v10 = -1;
      uint64_t v9 = -1;
    }
  }
  long long v53 = 0u;
  long long v54 = 0u;
  *(_OWORD *)long long v51 = 0u;
  *(_OWORD *)uint64_t v52 = 0u;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v55 = -1;
  uint64_t v55 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v56 = v10;
  uint64_t v57 = v9;
  std::string::basic_string[abi:ne180100]<0>(&__str, "const");
  uint64_t v41 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x3FFFFFFF0004, 1) | 1;
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, v6, &__str, v41, (uint64_t)&v50);
  if (*(unsigned char *)(a3 + 27) && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    BOOL v16 = fst::LogMessage::LogMessage((fst *)v44, (uint64_t)__p);
    uint64_t v17 = (void *)fst::cerr(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Could not align file during write after header", 46);
    unint64_t v18 = (fst::LogMessage *)v44;
  }
  else
  {
    uint64_t v39 = v8;
    int v40 = v6;
    uint64_t v46 = 0;
    v44[0] = 2139095040;
    uint64_t v13 = *(unsigned int *)(a1[1] + 96);
    if ((int)v13 < 1)
    {
      uint64_t v15 = 0;
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      do
      {
        v44[0] = (*(float (**)(void *, uint64_t))(*a1 + 32))(a1, v14);
        v44[1] = v15;
        unsigned int v45 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v14);
        LODWORD(v46) = (*(uint64_t (**)(void *, uint64_t))(*a1 + 48))(a1, v14);
        HIDWORD(v46) = (*(uint64_t (**)(void *, uint64_t))(*a1 + 56))(a1, v14);
        std::ostream::write();
        v15 += v45;
        ++v14;
      }
      while (v13 != v14);
    }
    uint64_t v56 = v13;
    uint64_t v57 = v15;
    if (*(unsigned char *)(a3 + 27))
    {
      if (!fst::AlignOutput(a2))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        uint64_t v19 = fst::LogMessage::LogMessage((fst *)&v43, (uint64_t)__p);
        unint64_t v20 = (void *)fst::cerr(v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Could not align file during write after writing states", 54);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v43);
        if (v48 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    uint64_t v21 = *(unsigned int *)(a1[1] + 96);
    if ((int)v21 >= 1)
    {
      for (uint64_t j = 0; j != v21; ++j)
      {
        uint64_t v23 = a1[1];
        uint64_t v24 = *(void *)(v23 + 80) + 20 * j;
        uint64_t v25 = *(unsigned int *)(v24 + 8);
        if (v25)
        {
          uint64_t v26 = *(void *)(v23 + 88) + 16 * *(unsigned int *)(v24 + 4);
          do
          {
            std::ostream::write();
            v26 += 16;
            --v25;
          }
          while (v25);
        }
      }
    }
    std::ostream::flush();
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      long long v27 = fst::LogMessage::LogMessage((fst *)&v43, (uint64_t)__p);
      std::string::size_type v28 = (void *)fst::cerr(v27);
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"ConstFst Write write failed: ", 29);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v31 = a3;
      }
      else {
        uint64_t v31 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v32 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v32 = *(void *)(a3 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
    }
    else
    {
      if (v42)
      {
        uint64_t updated = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::UpdateFstHeader((uint64_t)a1, a2, a3, v40, &__str, v41, (uint64_t)&v50, v39);
        goto LABEL_45;
      }
      if (v56 == v10)
      {
        if (v57 == v9)
        {
          uint64_t updated = 1;
          goto LABEL_45;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        uint64_t v37 = fst::LogMessage::LogMessage((fst *)&v43, (uint64_t)__p);
        uint64_t v38 = (void *)fst::cerr(v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Inconsistent number of arcs observed during write", 49);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        uint64_t v35 = fst::LogMessage::LogMessage((fst *)&v43, (uint64_t)__p);
        unsigned __int8 v36 = (void *)fst::cerr(v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Inconsistent number of states observed during write", 51);
      }
    }
    unint64_t v18 = (fst::LogMessage *)&v43;
  }
  fst::LogMessage::~LogMessage(v18);
  if (v48 < 0) {
    operator delete(__p[0]);
  }
  uint64_t updated = 0;
LABEL_45:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete(v52[1]);
  }
  if (SHIBYTE(v52[0]) < 0) {
    operator delete(v51[0]);
  }
  return updated;
}

void sub_1B2073A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  fst::FstHeader::~FstHeader(&a31);
  _Unwind_Resume(a1);
}

void std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::shared_ptr[abi:ne180100]<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B2073BA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::shared_ptr[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int> *,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,std::allocator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int> *,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,std::allocator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int> *,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,std::allocator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>*>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>*>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>*>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>*>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>>,std::reverse_iterator<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<quasar::Hammer::HammerSausage>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::Hammer::HammerSausage>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  int v3 = (void **)(a2 + 8);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<std::vector<quasar::Hammer::HammerSausage>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  BOOL v16 = (char *)operator new(0x38uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(void *)BOOL v16 = 0;
  *((void *)v16 + 1) = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((void *)v16 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v++*(_DWORD *)(result + 24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B2074198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar21InverseTextNormalizerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x328uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN6quasar21InverseTextNormalizerENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B20741E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar21InverseTextNormalizerENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60DB0;
  quasar::InverseTextNormalizer::InverseTextNormalizer((quasar::InverseTextNormalizer *)(a1 + 3));
  return a1;
}

void sub_1B2074244(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::InverseTextNormalizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::InverseTextNormalizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::InverseTextNormalizer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::vector<std::vector<quasar::Token>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B2074384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t kaldi::SplitStringToFloats<float>(uint64_t a1, const char *a2, int a3, void *a4)
{
  if (*(char *)(a1 + 23) >= 0) {
    size_t v5 = (unsigned char *)a1;
  }
  else {
    size_t v5 = *(unsigned char **)a1;
  }
  if (*v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    kaldi::SplitStringToVector((const std::string *)a1, a2, a3, (uint64_t)&v11);
    std::vector<float>::resize((uint64_t)a4, 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3));
    uint64_t v6 = v11;
    if (v12 == v11)
    {
LABEL_9:
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        LODWORD(v14) = 0;
        if ((kaldi::ConvertStringToReal(v6 + v7, (float *)&v14) & 1) == 0) {
          break;
        }
        *(_DWORD *)(*a4 + 4 * v8++) = v14;
        uint64_t v6 = v11;
        v7 += 24;
        if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3)) {
          goto LABEL_9;
        }
      }
      uint64_t v9 = 0;
    }
    long long v14 = (void **)&v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
  else
  {
    a4[1] = *a4;
    return 1;
  }
  return v9;
}

void sub_1B207449C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void kaldi::SplitStringToVector(const std::string *a1, const char *a2, int a3, uint64_t a4)
{
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  std::string::size_type v32 = size;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a4);
  std::string::size_type v9 = 0;
  do
  {
    int v10 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v10 >= 0) {
      std::string::size_type v11 = (std::string::size_type)a1;
    }
    else {
      std::string::size_type v11 = a1->__r_.__value_.__r.__words[0];
    }
    if (v10 >= 0) {
      std::string::size_type v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v12 = a1->__r_.__value_.__l.__size_;
    }
    size_t v13 = strlen(a2);
    if (v12 <= v9 || v13 == 0)
    {
      uint64_t v15 = -1;
      if (a3) {
        goto LABEL_26;
      }
    }
    else
    {
      BOOL v16 = (unsigned __int8 *)(v11 + v9);
      float v17 = (unsigned __int8 *)(v11 + v12);
LABEL_17:
      size_t v18 = v13;
      BOOL v19 = a2;
      while (*v16 != *(unsigned __int8 *)v19)
      {
        ++v19;
        if (!--v18)
        {
          if (++v16 != v17) {
            goto LABEL_17;
          }
          BOOL v16 = (unsigned __int8 *)(v11 + v12);
          break;
        }
      }
      if (v16 == v17) {
        uint64_t v15 = -1;
      }
      else {
        uint64_t v15 = (uint64_t)&v16[-v11];
      }
      if (a3)
      {
LABEL_26:
        if (v15 == v9 || v9 == v32) {
          goto LABEL_41;
        }
      }
    }
    std::string::basic_string(&v33, a1, v9, v15 - v9, (std::allocator<char> *)&__v);
    unint64_t v21 = *(void *)(a4 + 8);
    unint64_t v20 = *(void *)(a4 + 16);
    if (v21 >= v20)
    {
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(void *)a4) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *(void *)a4) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x555555555555555) {
        unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v26 = v24;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
      if (v26) {
        char v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a4 + 16, v26);
      }
      else {
        char v27 = 0;
      }
      std::string::size_type v28 = v27 + v23;
      __v.__first_ = v27;
      __v.__begin_ = v28;
      __v.__end_cap_.__value_ = &v27[v26];
      long long v29 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
      v28->__r_.__value_.__r.__words[2] = v33.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      memset(&v33, 0, sizeof(v33));
      __v.__end_ = v28 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
      uint64_t v30 = *(void *)(a4 + 8);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      int v31 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      *(void *)(a4 + 8) = v30;
      if (v31 < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v22 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
      *(void *)(v21 + 16) = *((void *)&v33.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v21 = v22;
      *(void *)(a4 + 8) = v21 + 24;
    }
LABEL_41:
    std::string::size_type v9 = v15 + 1;
  }
  while (v15 != -1);
}

void sub_1B20746F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::__split_buffer<std::wstring> *a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::ConvertStringToReal(uint64_t a1, float *a2)
{
  if (*(char *)(a1 + 23) >= 0) {
    unint64_t v3 = (const char *)a1;
  }
  else {
    unint64_t v3 = *(const char **)a1;
  }
  std::string::size_type v12 = 0;
  *__error() = 0;
  double v4 = strtod(v3, &v12);
  size_t v5 = v12;
  if (v12 == v3) {
    return 0;
  }
  double v6 = v4;
  uint64_t v7 = MEMORY[0x1E4F14390];
  while (1)
  {
    unsigned int v8 = *v5;
    if (!((v8 & 0x80000000) != 0 ? __maskrune(v8, 0x4000uLL) : *(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000)) {
      break;
    }
    size_t v5 = ++v12;
  }
  if (v12 == v3 || *v12 || *__error()) {
    return 0;
  }
  float v11 = v6;
  *a2 = v11;
  return 1;
}

uint64_t kaldi::ConvertStringToReal(uint64_t a1, double *a2)
{
  if (*(char *)(a1 + 23) >= 0) {
    unint64_t v3 = (const char *)a1;
  }
  else {
    unint64_t v3 = *(const char **)a1;
  }
  float v11 = 0;
  *__error() = 0;
  double v4 = strtod(v3, &v11);
  size_t v5 = v11;
  if (v11 == v3) {
    return 0;
  }
  double v6 = v4;
  uint64_t v7 = MEMORY[0x1E4F14390];
  while (1)
  {
    unsigned int v8 = *v5;
    if (!((v8 & 0x80000000) != 0 ? __maskrune(v8, 0x4000uLL) : *(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000)) {
      break;
    }
    size_t v5 = ++v11;
  }
  if (v11 == v3 || *v11 || *__error()) {
    return 0;
  }
  *a2 = v6;
  return 1;
}

void kaldi::SplitStringOnString(uint64_t a1, char *a2, uint64_t *a3)
{
  std::vector<std::string>::__clear[abi:ne180100](a3);
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __str = *(std::string *)a1;
  }
  int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  int v8 = a2[23];
  if (v8 >= 0) {
    std::string::size_type v9 = a2;
  }
  else {
    std::string::size_type v9 = *(char **)a2;
  }
  if (v8 >= 0) {
    int64_t v10 = a2[23];
  }
  else {
    int64_t v10 = *((void *)a2 + 1);
  }
  if (!v10)
  {
    std::string::size_type v17 = 0;
    goto LABEL_26;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int64_t size = __str.__r_.__value_.__l.__size_;
  }
  if (size >= v10)
  {
    float v11 = (char *)p_str + size;
    int v12 = *v9;
    size_t v13 = p_str;
    do
    {
      int64_t v14 = size - v10;
      if (v14 == -1) {
        break;
      }
      uint64_t v15 = (char *)memchr(v13, v12, v14 + 1);
      if (!v15) {
        break;
      }
      BOOL v16 = v15;
      if (!memcmp(v15, v9, v10))
      {
        if (v16 != v11)
        {
          std::string::size_type v17 = v16 - (char *)p_str;
          while (v17 != -1)
          {
LABEL_26:
            std::string::basic_string(&v39, &__str, 0, v17, (std::allocator<char> *)&v41);
            kaldi::Trim(&v39);
            unint64_t v18 = a3[1];
            if (v18 >= a3[2])
            {
              uint64_t v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (long long *)&v39);
            }
            else
            {
              if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)a3[1], v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v19 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                *(void *)(v18 + 16) = *((void *)&v39.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v18 = v19;
              }
              uint64_t v20 = v18 + 24;
              a3[1] = v18 + 24;
            }
            a3[1] = v20;
            uint64_t v21 = a2[23];
            if ((v21 & 0x80u) != 0) {
              uint64_t v21 = *((void *)a2 + 1);
            }
            long long v22 = std::string::erase(&__str, 0, v21 + v17);
            std::string::operator=(&__str, v22);
            int64_t v23 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v24 = &__str;
            }
            else {
              unint64_t v24 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            int v25 = a2[23];
            if (v25 >= 0) {
              unint64_t v26 = a2;
            }
            else {
              unint64_t v26 = *(char **)a2;
            }
            if (v25 >= 0) {
              int64_t v27 = a2[23];
            }
            else {
              int64_t v27 = *((void *)a2 + 1);
            }
            if (v27)
            {
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int64_t v23 = __str.__r_.__value_.__l.__size_;
              }
              std::string::size_type v28 = (char *)v24 + v23;
              if (v23 >= v27)
              {
                int v34 = *v26;
                uint64_t v35 = v24;
                do
                {
                  int64_t v36 = v23 - v27;
                  if (v36 == -1) {
                    break;
                  }
                  uint64_t v37 = (char *)memchr(v35, v34, v36 + 1);
                  if (!v37) {
                    break;
                  }
                  long long v29 = v37;
                  if (!memcmp(v37, v26, v27)) {
                    goto LABEL_48;
                  }
                  uint64_t v35 = (std::string *)(v29 + 1);
                  int64_t v23 = v28 - (v29 + 1);
                }
                while (v23 >= v27);
              }
              long long v29 = v28;
LABEL_48:
              if (v29 == v28) {
                std::string::size_type v17 = -1;
              }
              else {
                std::string::size_type v17 = v29 - (char *)v24;
              }
            }
            else
            {
              std::string::size_type v17 = 0;
            }
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v39.__r_.__value_.__l.__data_);
            }
          }
        }
        break;
      }
      size_t v13 = (std::string *)(v16 + 1);
      int64_t size = v11 - (v16 + 1);
    }
    while (size >= v10);
  }
  kaldi::Trim(&__str);
  std::string::size_type v30 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  char v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v30 = __str.__r_.__value_.__l.__size_;
  }
  if (v30)
  {
    unint64_t v32 = a3[1];
    if (v32 >= a3[2])
    {
      uint64_t v38 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (long long *)&__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v33 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(void *)(v32 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v32 = v33;
      }
      uint64_t v38 = v32 + 24;
      a3[1] = v32 + 24;
    }
    a3[1] = v38;
    char v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v31 < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1B2074BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)(v21 + 8) = v22;
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *kaldi::Trim(std::string *this)
{
  uint64_t v2 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t v3 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    unint64_t v3 = this;
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  size_t v5 = (char *)&v3[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size) {
      goto LABEL_11;
    }
  }
  while (memchr(" \t\n\r\f\v", v5[size--], 6uLL));
  if (size == -1)
  {
LABEL_11:
    if ((v2 & 0x80) != 0)
    {
      float v11 = (std::string *)this->__r_.__value_.__r.__words[0];
      int64_t v10 = (char *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
    }
    else
    {
      int64_t v10 = (char *)this + v2;
      float v11 = this;
    }
    std::string::size_type v12 = v10 - (char *)v11;
    size_t v13 = this;
    goto LABEL_15;
  }
  uint64_t result = std::string::erase(this, size + 1, 0xFFFFFFFFFFFFFFFFLL);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v8 = this->__r_.__value_.__l.__size_;
    if (!v8) {
      return result;
    }
  }
  else
  {
    std::string::size_type v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = this;
    if (!*((unsigned char *)&this->__r_.__value_.__s + 23)) {
      return result;
    }
  }
  std::string::size_type v14 = 0;
  while (1)
  {
    uint64_t result = (std::string *)memchr(" \t\n\r\f\v", v9->__r_.__value_.__s.__data_[v14], 6uLL);
    if (!result) {
      break;
    }
    if (v8 == ++v14) {
      return result;
    }
  }
  if (v14 != -1)
  {
    size_t v13 = this;
    std::string::size_type v12 = v14;
LABEL_15:
    return std::string::erase(v13, 0, v12);
  }
  return result;
}

void kaldi::SplitStringToStringPair(const std::string *a1, const char *a2, std::vector<std::pair<std::string, std::string>> *a3)
{
  int64_t v27 = 0;
  std::string::size_type v28 = 0;
  uint64_t v29 = 0;
  kaldi::SplitStringToVector(a1, a2, 1, (uint64_t)&v27);
  std::vector<std::string>::pointer begin = a3->__begin_;
  uint64_t end = (uint64_t)a3->__end_;
  if ((std::vector<std::pair<std::string, std::string>>::pointer)end != a3->__begin_)
  {
    do
    {
      end -= 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&a3->__end_cap_, end);
    }
    while ((std::pair<std::string, std::string> *)end != begin);
  }
  a3->__end_ = begin;
  double v6 = v27;
  uint64_t v7 = v28;
  while (v6 != v7)
  {
    unint64_t v24 = 0;
    int v25 = 0;
    uint64_t v26 = 0;
    kaldi::SplitStringToVector(v6, ",", 1, (uint64_t)&v24);
    std::string::size_type v8 = v24;
    if (v25 == v24)
    {
LABEL_36:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"tensor pair specified size is not 2", 35);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v21);
    }
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      float v11 = (const std::string *)((char *)v8 + v9);
      LODWORD(v12) = *((char *)v8 + v9 + 23);
      if ((v12 & 0x80000000) == 0)
      {
        if (!*((unsigned char *)v8 + v9 + 23)) {
          goto LABEL_35;
        }
        if (v11->__r_.__value_.__s.__data_[0] != 91) {
          goto LABEL_18;
        }
        std::string::size_type size = *((unsigned __int8 *)v8 + v9 + 23);
        goto LABEL_13;
      }
      if (!v11->__r_.__value_.__l.__size_)
      {
LABEL_35:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"tensor specified being empty is not allowed", 43);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v21);
      }
      if (*v11->__r_.__value_.__l.__data_ == 91)
      {
        std::string::size_type size = v11->__r_.__value_.__l.__size_;
LABEL_13:
        std::string::basic_string(&v21, (const std::string *)((char *)v8 + v9), 1uLL, size - 1, (std::allocator<char> *)v30);
        std::string::size_type v14 = (char *)v24 + v9;
        if (*((char *)v24 + v9 + 23) < 0) {
          operator delete(*(void **)v14);
        }
        long long v15 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
        *((void *)v14 + 2) = *((void *)&v21.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v14 = v15;
        std::string::size_type v8 = v24;
        LOBYTE(v12) = *((unsigned char *)v24 + v9 + 23);
      }
      if ((v12 & 0x80) == 0)
      {
        float v11 = (const std::string *)((char *)v8 + 24 * v10);
LABEL_18:
        int v16 = 0;
        uint64_t v17 = v12;
        unint64_t v18 = v11;
        goto LABEL_20;
      }
      float v11 = (const std::string *)((char *)v8 + v9);
      unint64_t v18 = *(const std::string **)((char *)v8 + v9);
      uint64_t v17 = *(void *)((char *)v8 + v9 + 8);
      int v16 = 1;
LABEL_20:
      if (v18->__r_.__value_.__s.__data_[v17 - 1] == 93)
      {
        if (v16) {
          std::string::size_type v12 = v11->__r_.__value_.__l.__size_;
        }
        else {
          std::string::size_type v12 = v12;
        }
        std::string::basic_string(&v21, v11, 0, v12 - 1, (std::allocator<char> *)v30);
        long long v19 = (char *)v24 + v9;
        if (*((char *)v24 + v9 + 23) < 0) {
          operator delete(*(void **)v19);
        }
        long long v20 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
        *((void *)v19 + 2) = *((void *)&v21.__r_.__value_.__l + 2);
        *(_OWORD *)long long v19 = v20;
        std::string::size_type v8 = v24;
      }
      ++v10;
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v8) >> 3));
    if ((char *)v25 - (char *)v8 != 48) {
      goto LABEL_36;
    }
    std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&v21, v8, (long long *)((char *)v8 + 24));
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a3, (long long *)&v21);
    if (v23 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    ++v6;
  }
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
}

void sub_1B2075080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 - 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)(v9 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void kaldi::SplitStringToVector(const std::string *a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  kaldi::SplitStringToVector(a1, a2, 1, (uint64_t)a3);
}

void sub_1B20750E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void kaldi::SplitTensorShapesToIntVector(const std::string *a1, const char *a2, uint64_t *a3)
{
  uint64_t v26 = 0;
  int64_t v27 = 0;
  uint64_t v28 = 0;
  kaldi::SplitStringToVector(a1, a2, 1, (uint64_t)&v26);
  std::vector<std::vector<int>>::__clear[abi:ne180100](a3);
  double v4 = v26;
  size_t v5 = v27;
  if (v26 != v27)
  {
    while (1)
    {
      memset(&v25, 0, sizeof(v25));
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      kaldi::SplitStringToVector(v4, ",", 1, (uint64_t)&v22);
      std::vector<int>::resize(&v25, 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 3));
      uint64_t v6 = v22;
      if (v23 != v22) {
        break;
      }
LABEL_24:
      unint64_t v18 = a3[1];
      if (v18 >= a3[2])
      {
        uint64_t v19 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(a3, (uint64_t)&v25);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)a3, (uint64_t)&v25);
        uint64_t v19 = v18 + 24;
      }
      a3[1] = v19;
      v20[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
      if (v25.__begin_)
      {
        v25.__end_ = v25.__begin_;
        operator delete(v25.__begin_);
      }
      if (++v4 == v5) {
        goto LABEL_30;
      }
    }
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      double v21 = 0.0;
      uint64_t v9 = (const std::string *)(v6 + v7);
      std::string::size_type size = *(unsigned __int8 *)(v6 + v7 + 23);
      if ((*(char *)(v6 + v7 + 23) & 0x80000000) == 0) {
        break;
      }
      if (*v9->__r_.__value_.__l.__data_ == 91)
      {
        std::string::size_type size = *(void *)(v6 + v7 + 8);
LABEL_9:
        std::string::basic_string(v20, v9, 1uLL, size - 1, (std::allocator<char> *)v29);
        uint64_t v12 = v22 + v7;
        if (*(char *)(v22 + v7 + 23) < 0) {
          operator delete(*(void **)v12);
        }
        long long v13 = *(_OWORD *)&v20[0].__r_.__value_.__l.__data_;
        *(void *)(v12 + 16) = *((void *)&v20[0].__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v12 = v13;
        uint64_t v6 = v22;
        std::string::size_type size = *(unsigned __int8 *)(v22 + v7 + 23);
      }
      if ((size & 0x80) != 0)
      {
        uint64_t v9 = (const std::string *)(v6 + v7);
        std::string::size_type v14 = *(const std::string **)(v6 + v7);
        std::string::size_type v15 = *(void *)(v6 + v7 + 8);
        int v11 = 1;
        goto LABEL_16;
      }
      int v11 = 0;
      uint64_t v9 = (const std::string *)(v6 + 24 * v8);
LABEL_14:
      std::string::size_type v14 = v9;
      std::string::size_type v15 = size;
LABEL_16:
      if (v14->__r_.__value_.__s.__data_[v15 - 1] == 93)
      {
        if (v11) {
          std::string::size_type size = v9->__r_.__value_.__l.__size_;
        }
        std::string::basic_string(v20, v9, 0, size - 1, (std::allocator<char> *)v29);
        uint64_t v16 = v22 + v7;
        if (*(char *)(v22 + v7 + 23) < 0) {
          operator delete(*(void **)v16);
        }
        long long v17 = *(_OWORD *)&v20[0].__r_.__value_.__l.__data_;
        *(void *)(v16 + 16) = *((void *)&v20[0].__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v16 = v17;
        uint64_t v6 = v22;
      }
      if ((kaldi::ConvertStringToReal(v6 + v7, &v21) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"invalid character in shapes definition of input", 47);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
      }
      v25.__begin_[v8++] = (int)v21;
      uint64_t v6 = v22;
      v7 += 24;
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 3)) {
        goto LABEL_24;
      }
    }
    if (v9->__r_.__value_.__s.__data_[0] != 91)
    {
      int v11 = 0;
      goto LABEL_14;
    }
    goto LABEL_9;
  }
LABEL_30:
  v20[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
}

void sub_1B20753D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 - 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  int v11 = *(void **)(v9 - 144);
  if (v11)
  {
    *(void *)(v9 - 136) = v11;
    operator delete(v11);
  }
  a9 = (void **)(v9 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void kaldi::JoinVectorToString(uint64_t *a1, const std::string::value_type *a2, int a3, long long *a4)
{
  memset(__p, 0, 24);
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (v5 != *a1)
  {
    uint64_t v10 = 0;
    for (unint64_t i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3); ++i)
    {
      uint64_t v12 = v6 + v10;
      char v13 = *(unsigned char *)(v6 + v10 + 23);
      if (a3)
      {
        if ((*(unsigned char *)(v6 + v10 + 23) & 0x80) != 0)
        {
          if (!*(void *)(v6 + v10 + 8)) {
            goto LABEL_21;
          }
        }
        else if (!*(unsigned char *)(v6 + v10 + 23))
        {
          goto LABEL_21;
        }
      }
      if (v13 >= 0) {
        std::string::size_type v14 = (const std::string::value_type *)(v6 + v10);
      }
      else {
        std::string::size_type v14 = *(const std::string::value_type **)v12;
      }
      if (v13 >= 0) {
        std::string::size_type v15 = *(unsigned __int8 *)(v6 + v10 + 23);
      }
      else {
        std::string::size_type v15 = *(void *)(v12 + 8);
      }
      std::string::append(__p, v14, v15);
      uint64_t v6 = *a1;
      uint64_t v5 = a1[1];
      if (i >= -1 - 0x5555555555555555 * ((v5 - *a1) >> 3)) {
        goto LABEL_21;
      }
      if (!a3) {
        goto LABEL_20;
      }
      if ((*(char *)(v6 + v10 + 47) & 0x80000000) == 0)
      {
        if (!*(unsigned char *)(v6 + v10 + 47)) {
          goto LABEL_21;
        }
LABEL_20:
        std::string::append(__p, a2);
        uint64_t v6 = *a1;
        uint64_t v5 = a1[1];
        goto LABEL_21;
      }
      if (*(void *)(v6 + v10 + 32)) {
        goto LABEL_20;
      }
LABEL_21:
      v10 += 24;
    }
  }
  std::string::size_type v16 = *((void *)a4 + 2);
  long long v17 = *a4;
  *(std::string *)a4 = __p[0];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v17;
  __p[0].__r_.__value_.__r.__words[2] = v16;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
}

void sub_1B2075560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::IsToken(uint64_t *a1)
{
  if (*((char *)a1 + 23) >= 0) {
    unint64_t v1 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v1 = a1[1];
  }
  if (v1)
  {
    BOOL v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = MEMORY[0x1E4F14390];
    while (1)
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v6 = a1;
      }
      else {
        uint64_t v6 = (uint64_t *)*a1;
      }
      __darwin_ct_rune_t v7 = *((char *)v6 + v4);
      if (v7 < 0)
      {
        if (!__maskrune(*((char *)v6 + v4), 0x40000uLL))
        {
          if (v7 == -1) {
            return v3;
          }
          goto LABEL_19;
        }
        int v8 = __maskrune(v7, 0x4000uLL);
      }
      else
      {
        if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x40000) == 0) {
          return v3;
        }
        int v8 = *(_DWORD *)(v5 + 4 * v7 + 60) & 0x4000;
      }
      if (v7 >= -1 && v8 != 0) {
        return v3;
      }
LABEL_19:
      BOOL v3 = ++v4 >= v1;
      if (v1 == v4) {
        return v3;
      }
    }
  }
  return 0;
}

double kaldi::SplitStringOnFirstSpace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(char *)(a1 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)a1;
  }
  if (v5 >= 0) {
    unint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v7 = *(void *)(a1 + 8);
  }
  if (!v7) {
    goto LABEL_20;
  }
  unint64_t v9 = 0;
  uint64_t v10 = (unsigned __int8 *)(v6 + v7);
  while (memchr(" \t\n\r\f\v", *(char *)(v6 + v9), 6uLL))
  {
    if (v7 == ++v9) {
      goto LABEL_20;
    }
  }
  if (v9 == -1)
  {
LABEL_20:
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
LABEL_39:
    if (*(char *)(a3 + 23) < 0)
    {
      **(unsigned char **)a3 = 0;
      *(void *)(a3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 23) = 0;
    }
    return result;
  }
  if (v7 <= v9)
  {
LABEL_29:
    std::string::basic_string[abi:ne180100](&__dst, (uint64_t *)a1, v9);
LABEL_36:
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    double result = *(double *)&__dst.__r_.__value_.__l.__data_;
    *(std::string *)a2 = __dst;
    goto LABEL_39;
  }
  uint64_t v12 = (unsigned __int8 *)(v6 + v9);
  std::string::size_type v13 = v9;
LABEL_15:
  uint64_t v14 = 0;
  while (*v12 != asc_1B26B0B6B[v14])
  {
    if (++v14 == 6)
    {
      ++v12;
      ++v13;
      if (v12 != v10) {
        goto LABEL_15;
      }
      goto LABEL_29;
    }
  }
  if (v12 == v10) {
    goto LABEL_29;
  }
  std::string::size_type v15 = &v12[-v6];
  if (&v12[-v6] == (unsigned __int8 *)-1) {
    goto LABEL_29;
  }
  if (v7 <= (unint64_t)v15) {
    goto LABEL_35;
  }
  while (memchr(" \t\n\r\f\v", *(char *)(v6 + v13), 6uLL))
  {
    if (v7 == ++v13) {
      goto LABEL_35;
    }
  }
  if (v13 == -1)
  {
LABEL_35:
    std::string::basic_string(&__dst, (const std::string *)a1, v9, (std::string::size_type)&v15[-v9], (std::allocator<char> *)&v18);
    goto LABEL_36;
  }
  uint64_t v16 = v6 - 1;
  while (v7)
  {
    if (!memchr(" \t\n\r\f\v", *(char *)(v16 + v7--), 6uLL)) {
      goto LABEL_43;
    }
  }
  unint64_t v7 = -1;
LABEL_43:
  std::string::basic_string(&__dst, (const std::string *)a1, v9, (std::string::size_type)&v15[-v9], (std::allocator<char> *)&v18);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = __dst;
  std::string::basic_string(&__dst, (const std::string *)a1, v13, v7 - v13 + 1, (std::allocator<char> *)&v18);
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  double result = *(double *)&__dst.__r_.__value_.__l.__data_;
  *(std::string *)a3 = __dst;
  return result;
}

void kaldi::GenerateCombinationIndices(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = a1[1] - *a1;
  if (a3) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v7 << 30) - 0x100000000) >> 32;
  }
  a4[1] = 0;
  a4[2] = 0;
  if (a3) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = -1;
  }
  *a4 = 0;
  std::vector<unsigned int>::value_type __x = 0;
  std::vector<unsigned int>::vector(&v25, v7 >> 2, &__x);
  if (a2 >= 1)
  {
    LODWORD(v10) = 0;
    unint64_t v11 = a4[1];
    uint64_t v12 = 4 * v8;
    uint64_t v13 = 4 * v9;
    do
    {
      if (v11 >= a4[2])
      {
        unint64_t v11 = std::vector<std::vector<unsigned int>>::__push_back_slow_path<std::vector<unsigned int> const&>(a4, (uint64_t)&v25);
      }
      else
      {
        std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>((uint64_t)a4, (uint64_t)&v25);
        v11 += 24;
      }
      a4[1] = v11;
      uint64_t v14 = *a1;
      uint64_t v15 = a1[1] - *a1;
      if (!v15) {
        break;
      }
      uint64_t v16 = 0;
      uint64_t v17 = v15 >> 2;
      std::vector<unsigned int>::pointer begin = v25.__begin_;
      uint64_t v19 = (unint64_t)(v15 >> 2) <= 1 ? 1 : v15 >> 2;
      uint64_t v20 = v12;
      while (1)
      {
        unsigned int v21 = (*(std::vector<unsigned int>::pointer)((char *)begin + v20) + 1) % *(_DWORD *)(v14 + v20);
        *(std::vector<unsigned int>::pointer)((char *)begin + v20) = v21;
        if (v21) {
          break;
        }
        ++v16;
        v20 += v13;
        if (v19 == v16)
        {
          uint64_t v16 = v19;
          break;
        }
      }
      if (v17 == v16)
      {
        std::vector<unsigned int>::pointer v22 = v25.__begin_;
        while (!*v22++)
        {
          if (!--v19) {
            goto LABEL_26;
          }
        }
      }
      uint64_t v10 = (v10 + 1);
    }
    while (v10 < a2);
  }
LABEL_26:
  if (v25.__begin_)
  {
    v25.__end_ = v25.__begin_;
    operator delete(v25.__begin_);
  }
}

void sub_1B2075A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

void *std::string::basic_string[abi:ne180100](void *__dst, uint64_t *a2, unint64_t a3)
{
  uint64_t v4 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v6 = a2[1];
    if (v6 < a3) {
      goto LABEL_15;
    }
    uint64_t v4 = (uint64_t *)*a2;
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a2 + 23);
    if (v6 < a3) {
LABEL_15:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  size_t v7 = v6 - a3;
  if (v6 - a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = v10 | 0x8000000000000000;
    *std::string __dst = v8;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v7;
    uint64_t v8 = __dst;
    if (v6 == a3) {
      goto LABEL_14;
    }
  }
  memmove(v8, (char *)v4 + a3, v7);
LABEL_14:
  *((unsigned char *)v8 + v7) = 0;
  return __dst;
}

void kaldi::ParseOptions::Escape(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  int v4 = (char)a1[23];
  int v5 = *(char **)a1;
  if (v4 >= 0) {
    unint64_t v6 = (char *)a1;
  }
  else {
    unint64_t v6 = *(char **)a1;
  }
  char v7 = *v6;
  if (!*v6)
  {
LABEL_16:
    if ((v4 & 0x80u) == 0) {
      uint64_t v12 = (char *)a1;
    }
    else {
      uint64_t v12 = v5;
    }
    int v13 = 39;
    uint64_t v14 = "'\\''";
    if (strchr(v12, 39))
    {
      {
        int v13 = 39;
      }
      else
      {
        uint64_t v14 = "\\\"";
        int v13 = 34;
      }
    }
    __s[1] = 0;
    __s[0] = v13;
    std::string::basic_string[abi:ne180100]<0>(a2, __s);
    uint64_t v15 = *(unsigned char **)a1;
    if ((a1[23] & 0x80u) == 0) {
      uint64_t v15 = a1;
    }
    int v16 = *v15;
    if (*v15)
    {
      uint64_t v17 = v15 + 1;
      do
      {
        char v18 = (std::string::value_type *)v14;
        if (v16 != v13)
        {
          __s[0] = v16;
          char v18 = __s;
        }
        std::string::append(a2, v18);
        int v19 = *v17++;
        int v16 = v19;
      }
      while (v19);
    }
    __s[0] = v13;
    std::string::append(a2, __s);
    return;
  }
  uint64_t v8 = MEMORY[0x1E4F14390];
  do
  {
    if (v7 < 0)
    {
      if (__maskrune(v7, 0x500uLL)) {
        goto LABEL_10;
      }
    }
    else if ((*(_DWORD *)(v8 + 4 * v7 + 60) & 0x500) != 0)
    {
      goto LABEL_10;
    }
    unsigned __int8 v10 = 91;
    uint64_t v11 = 1u;
    while (*v6 != v10)
    {
      unsigned __int8 v10 = asc_1B26B4167[v11++];
      if (v11 == 14)
      {
        LOBYTE(v4) = a1[23];
        int v5 = *(char **)a1;
        goto LABEL_16;
      }
    }
LABEL_10:
    int v9 = *++v6;
    char v7 = v9;
  }
  while (v9);
  if ((char)a1[23] < 0)
  {
    uint64_t v20 = *(const std::string::value_type **)a1;
    std::string::size_type v21 = *((void *)a1 + 1);
    std::string::__init_copy_ctor_external(a2, v20, v21);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *((void *)a1 + 2);
  }
}

void sub_1B2075D20(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::OnlineFeatInputItfIO::OnlineFeatInputItfIO(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *double result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  result[5] = a7;
  return result;
}

uint64_t kaldi::SimpleWaveformReader::SimpleWaveformReader(uint64_t result, uint64_t a2, float *a3, char a4)
{
  float v4 = *a3;
  float v5 = a3[1];
  int v6 = (int)*a3;
  *(void *)double result = &unk_1F0A47F58;
  *(void *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = v6;
  *(_DWORD *)(result + 20) = (int)v5;
  if (v4 != v5) {
    operator new();
  }
  *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = a4;
  return result;
}

uint64_t kaldi::SimpleWaveformReader::Compute(uint64_t a1, uint64_t *a2)
{
  BOOL v3 = (int32x2_t *)*a2;
  int v4 = kaldi::MatrixBase<float>::NumRows(*a2);
  uint64_t v5 = (int)((double)*(int *)(a1 + 16)
                         / (double)*(int *)(a1 + 20)
                         * (double)(int)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1) * v4));
  if ((int)v5 <= 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"No feature vectors requested?!", 30);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    }
    return 1;
  }
  else
  {
    std::string::size_type v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    kaldi::Vector<float>::Resize(&v21, v5, 1);
    uint64_t v6 = (***(uint64_t (****)(void))(a1 + 8))();
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    char v7 = *(uint64_t **)(a1 + 24);
    if (v7
      && (char v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)),
          kaldi::Resampler::Resample(v7, (uint64_t)&v21, (uint64_t)&v18, v8),
          *(void *)(a1 + 24))
      && (int v9 = v19, (int)v19 > 0))
    {
      unsigned __int8 v10 = (void **)&v18;
    }
    else
    {
      unsigned __int8 v10 = &v21;
      int v9 = v22;
    }
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
    kaldi::Vector<float>::Resize(v10, ((v9 + v11 - 1) / v12 * v13), 2);
    int v14 = *((_DWORD *)v10 + 2);
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
    kaldi::Matrix<float>::Resize(v3, (v14 / v15), v16, 0, 0);
    kaldi::MatrixBase<float>::CopyRowsFromVec((int *)v3, (char **)v10);
    if (*(unsigned char *)(a1 + 32)) {
      kaldi::MatrixBase<float>::Scale((uint64_t)v3, 0.000030518);
    }
    kaldi::Vector<float>::Destroy((uint64_t)&v18);
    kaldi::Vector<float>::Destroy((uint64_t)&v21);
  }
  return v6;
}

void sub_1B20760D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SimpleWaveformReader::Dim(kaldi::SimpleWaveformReader *this)
{
  return (*((_DWORD *)this + 5) / 100);
}

uint64_t kaldi::SimpleWaveformReader::FrameDurationMs(kaldi::SimpleWaveformReader *this)
{
  return 10;
}

uint64_t kaldi::SimpleWaveformReader::FrameDurationMsForAlignment(kaldi::SimpleWaveformReader *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 24))();
}

void kaldi::SimpleWaveformReader::~SimpleWaveformReader(kaldi::SimpleWaveformReader *this)
{
  *(void *)this = &unk_1F0A47F58;
  BOOL v3 = (uint64_t *)*((void *)this + 3);
  uint64_t v1 = (void *)((char *)this + 24);
  uint64_t v2 = v3;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
}

{
  void *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F0A47F58;
  BOOL v3 = (uint64_t *)*((void *)this + 3);
  uint64_t v1 = (void *)((char *)this + 24);
  uint64_t v2 = v3;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::EndOfAudioPadder::Compute(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(int32x2_t **)a2;
  int v4 = *(uint64_t (****)(void, _OWORD *))(a1 + 8);
  long long v5 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v5;
  v10[2] = *(_OWORD *)(a2 + 32);
  uint64_t v6 = (**v4)(v4, v10);
  if ((v6 & 1) == 0)
  {
    int v7 = kaldi::MatrixBase<float>::NumRows((uint64_t)v3);
    kaldi::Matrix<float>::Resize(v3, (*(_DWORD *)(a1 + 32) + v7), *(unsigned int *)(*(void *)(a1 + 16) + 8), 2, 0);
    if (*(int *)(a1 + 32) >= 1)
    {
      int v8 = 0;
      do
        kaldi::MatrixBase<float>::CopyRowFromVec((uint64_t)v3, *(void *)(a1 + 16), v7 + v8++);
      while (v8 < *(_DWORD *)(a1 + 32));
    }
  }
  return v6;
}

uint64_t kaldi::EndOfAudioPadder::Dim(kaldi::EndOfAudioPadder *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 8))();
}

uint64_t kaldi::EndOfAudioPadder::ChunkSize(kaldi::EndOfAudioPadder *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16))();
}

uint64_t kaldi::EndOfAudioPadder::FrameDurationMs(kaldi::EndOfAudioPadder *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t kaldi::EndOfAudioPadder::FrameDurationMsForAlignment(kaldi::EndOfAudioPadder *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

uint64_t kaldi::EndOfAudioPadder::HasSilencePosterior(kaldi::EndOfAudioPadder *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 40))();
}

void kaldi::EndOfAudioPadder::~EndOfAudioPadder(kaldi::EndOfAudioPadder *this)
{
  *(void *)this = &unk_1F0A478F8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F0A478F8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1B3EA8670);
}

void kaldi::OnlineCmnInput::~OnlineCmnInput(kaldi::OnlineCmnInput *this)
{
  *(void *)this = &unk_1F0A47828;
  kaldi::Vector<float>::Destroy((uint64_t)this + 112);
  kaldi::Vector<float>::Destroy((uint64_t)this + 88);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
}

{
  uint64_t vars8;

  kaldi::OnlineCmnInput::~OnlineCmnInput(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineCmvnInput::Compute(void *a1, uint64_t *a2)
{
  BOOL v3 = (int32x2_t *)*a2;
  uint64_t v4 = kaldi::MatrixBase<float>::NumRows(*a2);
  uint64_t v5 = kaldi::MatrixBase<float>::NumCols((uint64_t)v3);
  uint64_t v6 = a1[9];
  uint64_t result = (*(uint64_t (**)(void *, int32x2_t *))(*a1 + 88))(a1, v3);
  if (result)
  {
    while (!kaldi::MatrixBase<float>::NumRows((uint64_t)v3))
    {
      uint64_t v8 = a1[9];
      if (v8 == (int)v6) {
        break;
      }
      kaldi::Matrix<float>::Resize(v3, v4, v5, 0, 0);
      LODWORD(v6) = v8;
      if (((*(uint64_t (**)(void *, int32x2_t *))(*a1 + 88))(a1, v3) & 1) == 0) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t kaldi::OnlineCmvnInput::ComputeInternal(uint64_t a1, uint64_t a2)
{
  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::MatrixBase<float>::NumCols(a2);
  (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
  kaldi::Matrix<float>::Matrix((uint64_t)v28);
  kaldi::Matrix<float>::Swap(v28, (uint64_t *)a2);
  uint64_t v4 = *(uint64_t (****)(void, uint64_t **))(a1 + 8);
  uint64_t v24 = v28;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  uint64_t v5 = (**v4)(v4, &v24);
  int v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)v28);
  int v7 = v6;
  uint64_t v8 = *(void *)(a1 + 72);
  if (v6 + (int)v8 < *(_DWORD *)(a1 + 20)) {
    char v9 = v5;
  }
  else {
    char v9 = 0;
  }
  if (v9)
  {
    uint64_t v10 = 0;
  }
  else
  {
    int v11 = v8 + v6;
    int v12 = *(_DWORD *)(a1 + 80);
    uint64_t v10 = (v11 - v12);
    if (v11 != v12)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
      goto LABEL_9;
    }
  }
  uint64_t v13 = 0;
LABEL_9:
  kaldi::Matrix<float>::Resize((int32x2_t *)a2, v10, v13, 0, 0);
  if (v7 < 1)
  {
    int v15 = 0;
  }
  else
  {
    int v14 = 0;
    int v15 = 0;
    do
    {
      uint64_t v16 = v28[0];
      int v17 = v29;
      unsigned int v18 = kaldi::MatrixBase<float>::NumCols((uint64_t)v28);
      uint64_t v23 = 0;
      uint64_t v21 = v16 + 4 * v17 * v14;
      uint64_t v22 = v18;
      kaldi::OnlineCmvnInput::AcceptFrame(a1, (const void **)&v21);
      while (1)
      {
        uint64_t v19 = *(void *)(a1 + 72);
        if (v19 < *(int *)(a1 + 16) || *(void *)(a1 + 80) >= v19) {
          break;
        }
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v21 = *(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * v15;
        LODWORD(v22) = kaldi::MatrixBase<float>::NumCols(a2);
        kaldi::OnlineCmvnInput::OutputFrame(a1, (uint64_t)&v21);
        ++v15;
      }
      ++v14;
    }
    while (v14 != v7);
  }
  if (v15 < (int)v10)
  {
    do
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = *(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * v15;
      LODWORD(v22) = kaldi::MatrixBase<float>::NumCols(a2);
      kaldi::OnlineCmvnInput::OutputFrame(a1, (uint64_t)&v21);
      ++v15;
    }
    while (v10 != v15);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v28);
  return v5;
}

void sub_1B2076880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::OnlineCmvnInput::AcceptFrame(uint64_t a1, const void **a2)
{
  int v4 = *(void *)(a1 + 72) % (*(int *)(a1 + 16) + 1);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = a1 + 32;
  uint64_t v7 = v6 + 4 * *(_DWORD *)(v5 + 16) * v4;
  v9[2] = 0;
  v9[0] = v7;
  v9[1] = kaldi::MatrixBase<float>::NumCols(v5);
  uint64_t result = kaldi::VectorBase<float>::CopyFromVec((uint64_t)v9, a2);
  ++*(void *)(a1 + 72);
  return result;
}

void kaldi::OnlineCmvnInput::OutputFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 80);
  if (!v4)
  {
    if (*(void *)(a1 + 72) >= *(int *)(a1 + 20)) {
      LODWORD(v5) = *(_DWORD *)(a1 + 20);
    }
    else {
      uint64_t v5 = *(void *)(a1 + 72);
    }
    if ((int)v5 < 1)
    {
      uint64_t v4 = 0;
    }
    else
    {
      int v6 = 0;
      do
      {
        uint64_t v7 = (float *)(*(void *)(a1 + 32) + 4 * *(_DWORD *)(a1 + 48) * v6);
        unsigned int v8 = kaldi::MatrixBase<float>::NumCols(a1 + 32);
        uint64_t v45 = 0;
        char v43 = v7;
        uint64_t v44 = v8;
        kaldi::VectorBase<double>::AddVec<float>(a1 + 88, &v43, 1.0);
        if (*(unsigned char *)(a1 + 24))
        {
          char v9 = (float *)(*(void *)(a1 + 32) + 4 * *(_DWORD *)(a1 + 48) * v6);
          unsigned int v10 = kaldi::MatrixBase<float>::NumCols(a1 + 32);
          uint64_t v45 = 0;
          char v43 = v9;
          uint64_t v44 = v10;
          kaldi::VectorBase<double>::AddVec2<float>(a1 + 112, &v43, 1.0);
        }
        ++v6;
      }
      while (v5 != v6);
      uint64_t v4 = *(void *)(a1 + 80);
    }
  }
  LODWORD(v11) = *(_DWORD *)(a1 + 16);
  uint64_t v12 = (int)v11;
  if (v4 < (int)v11)
  {
    uint64_t v13 = *(int *)(a1 + 20);
    if (v4 >= v13)
    {
      LODWORD(v11) = v4;
    }
    else if (*(void *)(a1 + 72) >= v13)
    {
      LODWORD(v11) = *(_DWORD *)(a1 + 20);
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 72);
    }
  }
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  char v43 = (float *)(v14 + 4 * (int)(*(_DWORD *)(a1 + 48) * (v4 % (v12 + 1))));
  LODWORD(v44) = kaldi::MatrixBase<float>::NumCols(a1 + 32);
  kaldi::VectorBase<float>::CopyFromVec(a2, (const void **)&v43);
  uint64_t v15 = *(void *)(a1 + 136);
  int v16 = v11;
  if (v15)
  {
    int v17 = kaldi::MatrixBase<float>::NumRows(v15);
    int v16 = v11;
    if (v17) {
      int v16 = *(_DWORD *)(a1 + 152) + v11;
    }
  }
  double v18 = -1.0 / (double)v16;
  *(float *)&double v18 = v18;
  kaldi::VectorBase<float>::AddVec<double>(a2, (double **)(a1 + 88), v18);
  if (*(unsigned char *)(a1 + 24) && *(int *)(a2 + 8) >= 1)
  {
    uint64_t v19 = 0;
    double v20 = (double)(int)v11;
    while (1)
    {
      uint64_t v21 = *(void *)(a1 + 136);
      if (!v21) {
        break;
      }
      int v22 = kaldi::MatrixBase<float>::NumRows(v21);
      uint64_t v23 = *(void *)(a1 + 88);
      uint64_t v24 = *(void *)(a1 + 112);
      if (!v22) {
        goto LABEL_28;
      }
      double v25 = (double)(*(_DWORD *)(a1 + 152) + (int)v11);
      float v26 = *(double *)(v23 + 8 * v19) / v25;
      double v27 = *(double *)(v24 + 8 * v19) / v25;
      float v28 = v26 * v26;
LABEL_29:
      float v30 = v27 - v28;
      if (v30 < 1.0e-20) {
        float v30 = 1.0e-20;
      }
      *(float *)(*(void *)a2 + 4 * v19) = *(float *)(*(void *)a2 + 4 * v19) / sqrtf(v30);
      if (++v19 >= *(int *)(a2 + 8)) {
        goto LABEL_32;
      }
    }
    uint64_t v23 = *(void *)(a1 + 88);
    uint64_t v24 = *(void *)(a1 + 112);
LABEL_28:
    float v29 = *(double *)(v23 + 8 * v19) / v20;
    double v27 = *(double *)(v24 + 8 * v19) / v20;
    float v28 = v29 * v29;
    goto LABEL_29;
  }
LABEL_32:
  if (*(void *)(a1 + 80) >= *(int *)(a1 + 20))
  {
    kaldi::VectorBase<double>::AddVec<float>(a1 + 88, &v43, 1.0);
    if (*(unsigned char *)(a1 + 24)) {
      kaldi::VectorBase<double>::AddVec2<float>(a1 + 112, &v43, 1.0);
    }
  }
  uint64_t v31 = *(void *)(a1 + 80);
  uint64_t v32 = *(int *)(a1 + 16);
  if (v31 >= v32)
  {
    uint64_t v33 = *(void *)(a1 + 32);
    int v34 = *(_DWORD *)(a1 + 48);
    uint64_t v42 = 0;
    int v40 = (float *)(v33 + 4 * (int)(v34 * ((v31 - v32) % ((int)v32 + 1))));
    uint64_t v41 = kaldi::MatrixBase<float>::NumCols(a1 + 32);
    kaldi::VectorBase<double>::AddVec<float>(a1 + 88, &v40, -1.0);
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v35 = *(void *)(a1 + 80);
      uint64_t v36 = *(int *)(a1 + 16);
      uint64_t v37 = *(void *)(a1 + 32);
      int v38 = *(_DWORD *)(a1 + 48);
      unsigned int v39 = kaldi::MatrixBase<float>::NumCols(a1 + 32);
      uint64_t v42 = 0;
      int v40 = (float *)(v37 + 4 * (int)(v38 * ((v35 - v36) % (v36 + 1))));
      uint64_t v41 = v39;
      kaldi::VectorBase<double>::AddVec2<float>(a1 + 112, &v40, -1.0);
    }
    uint64_t v31 = *(void *)(a1 + 80);
  }
  *(void *)(a1 + 80) = v31 + 1;
}

uint64_t kaldi::OnlineSubsampleFe::OnlineSubsampleFe(uint64_t this, kaldi::OnlineFeatInputItf *a2, int a3)
{
  *(void *)this = &unk_1F0A47B58;
  *(void *)(this + 8) = a2;
  *(_DWORD *)(this + 16) = a3;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t kaldi::OnlineSubsampleFe::Compute(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(int32x2_t **)a2;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  int v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::Matrix<float>::Matrix((uint64_t)v27, (*(_DWORD *)(a1 + 16) * v6), v5, 1, 0);
  *(void *)a2 = v27;
  uint64_t v7 = *(uint64_t (****)(void))(a1 + 8);
  long long v8 = a2[2];
  long long v9 = *a2;
  long long v25 = a2[1];
  long long v26 = v8;
  long long v24 = v9;
  uint64_t v10 = (**v7)();
  uint64_t v11 = 0;
  for (int i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v27); ++i)
  {
    if ((i + *(_DWORD *)(a1 + 20)) % *(_DWORD *)(a1 + 16)) {
      uint64_t v11 = v11;
    }
    else {
      uint64_t v11 = (v11 + 1);
    }
  }
  kaldi::Matrix<float>::Resize(v4, v11, v5, 1, 0);
  int v13 = 0;
  int v14 = 0;
  while (v13 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v27))
  {
    int v15 = *(_DWORD *)(a1 + 20);
    if (!(v15 % *(_DWORD *)(a1 + 16)))
    {
      uint64_t v16 = v27[0];
      int v17 = v28;
      int v18 = kaldi::MatrixBase<float>::NumCols((uint64_t)v27);
      int v22 = 0;
      uint64_t v23 = 0;
      uint64_t v20 = v16 + 4 * v17 * v13;
      int v21 = v18;
      kaldi::MatrixBase<float>::CopyRowFromVec((uint64_t)v4, (uint64_t)&v20, v14++);
      int v15 = *(_DWORD *)(a1 + 20);
    }
    *(_DWORD *)(a1 + 20) = v15 + 1;
    ++v13;
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v27);
  return v10;
}

void sub_1B2076EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineSubsampleFe::Dim(kaldi::OnlineSubsampleFe *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 8))();
}

int32x2_t *kaldi::OnlineLdaInput::OnlineLdaInput(int32x2_t *a1, uint64_t a2, uint64_t a3, __int32 a4, __int32 a5)
{
  *a1 = (int32x2_t)&unk_1F0A47720;
  a1[1] = (int32x2_t)a2;
  a1[2].i32[0] = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  a1[2].i32[1] = a4;
  a1[3].i32[0] = a5;
  kaldi::Matrix<float>::Matrix((uint64_t)&a1[4]);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)&a1[12]);
  int v9 = a4 + a5 + 1;
  if (kaldi::MatrixBase<float>::NumCols(a3) == a1[2].i32[0] * v9)
  {
    kaldi::Matrix<float>::operator=(a1 + 4, a3);
  }
  else
  {
    if (kaldi::MatrixBase<float>::NumCols(a3) != a1[2].i32[0] * v9 + 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Invalid parameters supplied to OnlineLdaInput", 45);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
    }
    uint64_t v10 = kaldi::MatrixBase<float>::NumRows(a3);
    int v11 = kaldi::MatrixBase<float>::NumCols(a3);
    kaldi::Matrix<float>::Resize(a1 + 4, v10, (v11 - 1), 0, 0);
    LODWORD(v10) = kaldi::MatrixBase<float>::NumRows(a3);
    int v12 = kaldi::MatrixBase<float>::NumCols(a3);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v16, a3, 0, v10, 0, v12 - 1);
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&a1[4], (int *)v16, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v16);
    uint64_t v13 = kaldi::MatrixBase<float>::NumRows(a3);
    kaldi::Vector<float>::Resize((void **)&a1[9], v13, 0);
    int v14 = kaldi::MatrixBase<float>::NumCols(a3);
    kaldi::VectorBase<float>::CopyColFromMat<float>((uint64_t *)&a1[9], a3, v14 - 1);
  }
  return a1;
}

void sub_1B20770E8(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(v3);
  kaldi::Vector<float>::Destroy(v2);
  kaldi::Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void kaldi::OnlineLdaInput::SpliceFrames(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int32x2_t *a5)
{
  int v36 = kaldi::MatrixBase<float>::NumRows(a1);
  int v10 = kaldi::MatrixBase<float>::NumRows(a2) + v36;
  uint64_t v11 = kaldi::MatrixBase<float>::NumRows(a3) - a4 + v10 + 1;
  uint64_t v38 = a1;
  int v12 = kaldi::MatrixBase<float>::NumCols(a1);
  uint64_t v34 = a2;
  int v13 = kaldi::MatrixBase<float>::NumCols(a2);
  uint64_t v35 = a3;
  int v14 = kaldi::MatrixBase<float>::NumCols(a3);
  if (v13 <= v14) {
    int v15 = v14;
  }
  else {
    int v15 = v13;
  }
  if (v12 <= v15) {
    int v16 = v15;
  }
  else {
    int v16 = v12;
  }
  if ((int)v11 <= 0)
  {
    kaldi::Matrix<float>::Resize(a5, 0, 0, 0, 0);
  }
  else
  {
    kaldi::Matrix<float>::Resize(a5, v11, v16 * a4, 0, 0);
    uint64_t v37 = v10;
    int v33 = -v10;
    uint64_t v17 = 0;
    uint64_t v39 = a4;
    uint64_t v40 = 0;
    uint64_t v32 = v11;
    do
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      do
      {
        uint64_t v21 = v17 + v20;
        int32x2_t v22 = *a5;
        uint64_t v23 = a5[2].i32[0];
        kaldi::MatrixBase<float>::NumCols((uint64_t)a5);
        int v47 = 0;
        uint64_t v48 = 0;
        uint64_t v45 = *(void *)&v22 + v40 * v23 + v19;
        int v46 = v16;
        if (v17 + v20 >= v36)
        {
          if (v21 >= v37)
          {
            uint64_t v30 = *(void *)v35;
            int v31 = *(_DWORD *)(v35 + 16);
            int v29 = kaldi::MatrixBase<float>::NumCols(v35);
            int v43 = 0;
            uint64_t v44 = 0;
            uint64_t v41 = (const void *)(v30 + 4 * v31 * (v33 + (int)v17 + (int)v20));
          }
          else
          {
            uint64_t v27 = *(void *)v34;
            uint64_t v28 = *(int *)(v34 + 16);
            int v29 = kaldi::MatrixBase<float>::NumCols(v34);
            int v43 = 0;
            uint64_t v44 = 0;
            uint64_t v41 = (const void *)(v27 + 4 * (v17 - v36 + v20) * v28);
          }
          int v42 = v29;
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v45, &v41);
        }
        else
        {
          uint64_t v24 = *(void *)v38;
          uint64_t v25 = *(int *)(v38 + 16);
          int v26 = kaldi::MatrixBase<float>::NumCols(v38);
          int v43 = 0;
          uint64_t v44 = 0;
          uint64_t v41 = (const void *)(v24 + 4 * v21 * v25);
          int v42 = v26;
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v45, &v41);
        }
        ++v20;
        v19 += 4 * v16;
        v18 += v16;
      }
      while (v39 != v20);
      ++v17;
      v40 += 4;
    }
    while (v17 != v32);
  }
}

void kaldi::OnlineLdaInput::TransformToOutput(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  if (kaldi::MatrixBase<float>::NumRows(a2))
  {
    uint64_t v6 = kaldi::MatrixBase<float>::NumRows(a2);
    uint64_t v7 = kaldi::MatrixBase<float>::NumRows(a1 + 32);
    kaldi::Matrix<float>::Resize(a3, v6, v7, 0, 0);
    kaldi::MatrixBase<float>::AddMatMat((uint64_t)a3, a2, CblasNoTrans, a1 + 32, CblasTrans, 1.0, 0.0);
    if (*(_DWORD *)(a1 + 80))
    {
      kaldi::MatrixBase<float>::AddVecToRows<float>((uint64_t *)a3, (uint64_t *)(a1 + 72), 1.0);
    }
  }
  else
  {
    kaldi::Matrix<float>::Resize(a3, 0, 0, 0, 0);
  }
}

uint64_t kaldi::OnlineLdaInput::Compute(int32x2_t *a1, long long *a2)
{
  uint64_t v4 = *(int32x2_t **)a2;
  kaldi::MatrixBase<float>::NumRows(*(void *)a2);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4]);
  uint64_t v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::Matrix<float>::Matrix((uint64_t)v47, v5, a1[2].u32[0], 0, 0);
  *(void *)a2 = v47;
  uint64_t v6 = (uint64_t (***)(void))a1[1];
  long long v7 = a2[2];
  long long v8 = *a2;
  long long v45 = a2[1];
  long long v46 = v7;
  long long v44 = v8;
  uint64_t v9 = (**v6)();
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)v47)) {
    int v10 = 0;
  }
  else {
    int v10 = v9;
  }
  if (v10 == 1)
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    uint64_t v9 = 1;
  }
  else
  {
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)v47)) {
      char v11 = 1;
    }
    else {
      char v11 = v9;
    }
    if ((v11 & 1) != 0 || kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[12]))
    {
      if (!kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[12]))
      {
        if (kaldi::MatrixBase<float>::NumRows((uint64_t)v47))
        {
          uint64_t v25 = a1[2].u32[1];
          if (v25)
          {
            kaldi::Matrix<float>::Resize(a1 + 12, v25, a1[2].u32[0], 0, 0);
            if (a1[2].i32[1] >= 1)
            {
              __int32 v26 = 0;
              do
              {
                int32x2_t v27 = a1[12];
                __int32 v28 = a1[14].i32[0];
                int v29 = kaldi::MatrixBase<float>::NumCols((uint64_t)&a1[12]);
                int v42 = 0;
                uint64_t v43 = 0;
                int32x2_t v40 = (int32x2_t)(*(void *)&v27 + 4 * v28 * v26);
                int v41 = v29;
                int32x2_t v30 = (int32x2_t)v47[0];
                int v31 = kaldi::MatrixBase<float>::NumCols((uint64_t)v47);
                int v34 = 0;
                uint64_t v35 = 0;
                int32x2_t v32 = v30;
                int v33 = v31;
                kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v40, (const void **)&v32);
                ++v26;
              }
              while (v26 < a1[2].i32[1]);
            }
          }
        }
      }
      kaldi::Matrix<float>::Matrix((uint64_t)&v40);
      if ((v9 & 1) == 0)
      {
        uint64_t v12 = a1[3].u32[0];
        if ((int)v12 >= 1)
        {
          kaldi::Matrix<float>::Resize(&v40, v12, a1[2].u32[0], 0, 0);
          if (a1[3].i32[0] >= 1)
          {
            __int32 v13 = 0;
            do
            {
              if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v47) < 1)
              {
                int32x2_t v21 = v40;
                int v22 = v43;
                int v23 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v40);
                int v34 = 0;
                uint64_t v35 = 0;
                int32x2_t v32 = (int32x2_t)(*(void *)&v21 + 4 * v22 * v13);
                int v33 = v23;
                int v17 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[12]);
                int32x2_t v18 = a1[12];
                __int32 v19 = a1[14].i32[0];
                int v20 = kaldi::MatrixBase<float>::NumCols((uint64_t)&a1[12]);
              }
              else
              {
                int32x2_t v14 = v40;
                int v15 = v43;
                int v16 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v40);
                int v34 = 0;
                uint64_t v35 = 0;
                int32x2_t v32 = (int32x2_t)(*(void *)&v14 + 4 * v15 * v13);
                int v33 = v16;
                int v17 = kaldi::MatrixBase<float>::NumRows((uint64_t)v47);
                int32x2_t v18 = (int32x2_t)v47[0];
                __int32 v19 = v48;
                int v20 = kaldi::MatrixBase<float>::NumCols((uint64_t)v47);
              }
              int v38 = 0;
              uint64_t v39 = 0;
              uint64_t v36 = *(void *)&v18 + 4 * v19 * (v17 - 1);
              int v37 = v20;
              kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v32, (const void **)&v36);
              ++v13;
            }
            while (v13 < a1[3].i32[0]);
          }
        }
      }
      kaldi::Matrix<float>::Matrix((uint64_t)&v32);
      kaldi::OnlineLdaInput::SpliceFrames((uint64_t)&a1[12], (uint64_t)v47, (uint64_t)&v40, a1[2].i32[1] + a1[3].i32[0] + 1, &v32);
      kaldi::OnlineLdaInput::TransformToOutput((uint64_t)a1, (uint64_t)&v32, v4);
      kaldi::OnlineLdaInput::ComputeNextRemainder(a1, (uint64_t)v47);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v32);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v40);
    }
    else
    {
      kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
      uint64_t v9 = 0;
    }
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v47);
  return v9;
}

void sub_1B20778C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix(v10 - 128);
  _Unwind_Resume(a1);
}

void kaldi::OnlineLdaInput::ComputeNextRemainder(int32x2_t *a1, uint64_t a2)
{
  int v4 = a1[3].i32[0] + a1[2].i32[1];
  uint64_t v5 = a1 + 12;
  int v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[12]);
  int v7 = kaldi::MatrixBase<float>::NumRows(a2) + v6;
  if (v7 >= v4) {
    uint64_t v8 = v4;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8)
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v27, v8, a1[2].u32[0], 0, 0);
    int v19 = kaldi::MatrixBase<float>::NumRows((uint64_t)v5);
    int32x2_t v18 = v5;
    int v9 = kaldi::MatrixBase<float>::NumRows(a2);
    if ((int)v8 >= 1)
    {
      int v10 = 0;
      int v11 = v19 - v8 + v9;
      int v17 = v9 - v8;
      do
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v24 = v27[0] + 4 * v28 * v10;
        LODWORD(v25) = kaldi::MatrixBase<float>::NumCols((uint64_t)v27);
        if (v11 + v10 >= v19)
        {
          uint64_t v15 = *(void *)a2;
          int v16 = *(_DWORD *)(a2 + 16);
          int v14 = kaldi::MatrixBase<float>::NumCols(a2);
          int v22 = 0;
          uint64_t v23 = 0;
          uint64_t v20 = v15 + 4 * v16 * (v17 + v10);
        }
        else
        {
          int32x2_t v12 = a1[12];
          __int32 v13 = a1[14].i32[0];
          int v14 = kaldi::MatrixBase<float>::NumCols((uint64_t)v18);
          int v22 = 0;
          uint64_t v23 = 0;
          uint64_t v20 = *(void *)&v12 + 4 * v13 * (v11 + v10);
        }
        int v21 = v14;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v24, (const void **)&v20);
        ++v10;
      }
      while (v8 != v10);
    }
    kaldi::Matrix<float>::operator=(v18, (uint64_t)v27);
    kaldi::Matrix<float>::~Matrix((uint64_t)v27);
  }
  else
  {
    kaldi::Matrix<float>::Resize(v5, 0, 0, 0, 0);
  }
}

void sub_1B2077B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

int32x2_t *kaldi::OnlineTransformInput::OnlineTransformInput(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (int32x2_t)&unk_1F0A47EF0;
  a1[1] = (int32x2_t)a2;
  a1[2].i32[0] = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  kaldi::Matrix<float>::Matrix((uint64_t)&a1[3]);
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  if (kaldi::MatrixBase<float>::NumCols(a3) == a1[2].i32[0])
  {
    kaldi::Matrix<float>::operator=(a1 + 3, a3);
    kaldi::Vector<float>::Resize((void **)&a1[8], 0, 0);
  }
  else
  {
    if (kaldi::MatrixBase<float>::NumCols(a3) != a1[2].i32[0] + 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Invalid parameters supplied to OnlineTransformInput", 51);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
    }
    uint64_t v5 = kaldi::MatrixBase<float>::NumRows(a3);
    kaldi::Matrix<float>::Resize(a1 + 3, v5, a1[2].u32[0], 0, 0);
    int v6 = kaldi::MatrixBase<float>::NumRows(a3);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v9, a3, 0, v6, 0, a1[2].i32[0]);
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&a1[3], (int *)v9, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v9);
    uint64_t v7 = kaldi::MatrixBase<float>::NumRows(a3);
    kaldi::Vector<float>::Resize((void **)&a1[8], v7, 0);
    kaldi::VectorBase<float>::CopyColFromMat<float>((uint64_t *)&a1[8], a3, a1[2].i32[0]);
  }
  return a1;
}

void sub_1B2077CDC(_Unwind_Exception *a1)
{
  kaldi::Vector<float>::Destroy(v2);
  kaldi::Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineTransformInput::Compute(uint64_t a1, long long *a2)
{
  int v4 = *(int32x2_t **)a2;
  kaldi::MatrixBase<float>::NumRows(*(void *)a2);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  kaldi::MatrixBase<float>::NumRows(a1 + 24);
  kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
  uint64_t v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
  kaldi::Matrix<float>::Matrix((uint64_t)v19, v5, v6, 0, 0);
  *(void *)a2 = v19;
  uint64_t v7 = *(uint64_t (****)(void, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8);
  long long v8 = a2[2];
  long long v9 = *a2;
  v18[1] = a2[1];
  v18[2] = v8;
  v18[0] = v9;
  uint64_t v14 = (**v7)(v7, v18, v10, v11, v12, v13);
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)v19))
  {
    uint64_t v15 = kaldi::MatrixBase<float>::NumRows((uint64_t)v19);
    uint64_t v16 = kaldi::MatrixBase<float>::NumRows(a1 + 24);
    kaldi::Matrix<float>::Resize(v4, v15, v16, 0, 0);
    kaldi::MatrixBase<float>::AddMatMat((uint64_t)v4, (uint64_t)v19, CblasNoTrans, a1 + 24, CblasTrans, 1.0, 0.0);
    if (*(_DWORD *)(a1 + 72)) {
      kaldi::MatrixBase<float>::AddVecToRows<float>((uint64_t *)v4, (uint64_t *)(a1 + 64), 1.0);
    }
  }
  else
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v19);
  return v14;
}

void sub_1B2077EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

kaldi::OnlineBufferingInput *kaldi::OnlineBufferingInput::OnlineBufferingInput(kaldi::OnlineBufferingInput *this, kaldi::OnlineFeatInputItf *a2, char a3)
{
  *(void *)this = &unk_1F0A47E88;
  *((void *)this + 1) = a2;
  kaldi::Matrix<float>::Matrix((uint64_t)this + 16);
  *((_DWORD *)this + 14) = 0;
  *((unsigned char *)this + 60) = 1;
  *((unsigned char *)this + 61) = a3;
  return this;
}

BOOL kaldi::OnlineBufferingInput::Compute(int32x2_t *a1, long long *a2)
{
  int v4 = *(int32x2_t **)a2;
  if (!kaldi::MatrixBase<float>::NumRows(*(void *)a2)) {
    return 1;
  }
  uint64_t v5 = 0;
  while (1)
  {
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[2]) == a1[7].i32[0])
    {
      if (!a1[7].i8[4])
      {
        if (v5) {
          uint64_t v15 = (*(uint64_t (**)(int32x2_t *))(*(void *)a1 + 8))(a1);
        }
        else {
          uint64_t v15 = 0;
        }
        kaldi::Matrix<float>::Resize(v4, v5, v15, 2, 0);
        return 0;
      }
      a1[7].i32[0] = 0;
      uint64_t v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
      uint64_t v7 = (*(uint64_t (**)(int32x2_t *))(*(void *)a1 + 8))(a1);
      kaldi::Matrix<float>::Resize(a1 + 2, v6, v7, 1, 0);
      *(void *)a2 = a1 + 2;
      long long v8 = (uint64_t (***)(void))a1[1];
      long long v9 = a2[2];
      long long v10 = *a2;
      long long v20 = a2[1];
      long long v21 = v9;
      long long v19 = v10;
      a1[7].i8[4] = (**v8)();
    }
    if (!kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[2])) {
      break;
    }
    int v11 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[2]) - a1[7].i32[0];
    int v12 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4) - v5;
    if (v11 >= v12) {
      int v11 = v12;
    }
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v18, (uint64_t)v4, v5, v11, 0, v4[1].i32[0]);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v17, (uint64_t)&a1[2], a1[7].i32[0], v11, 0, a1[3].i32[0]);
    kaldi::MatrixBase<float>::CopyFromMat<float>(v18, v17, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v17);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v18);
    a1[7].i32[0] += v11;
    uint64_t v5 = (v11 + v5);
    if (v5 == kaldi::MatrixBase<float>::NumRows((uint64_t)v4)) {
      return 1;
    }
  }
  if (v5) {
    uint64_t v14 = (*(uint64_t (**)(int32x2_t *))(*(void *)a1 + 8))(a1);
  }
  else {
    uint64_t v14 = 0;
  }
  kaldi::Matrix<float>::Resize(v4, v5, v14, 2, 0);
  int v16 = a1[7].u8[4];
  if (a1[7].i8[5] && a1[7].i8[4])
  {
    kaldi::Matrix<float>::Swap((uint64_t *)&a1[2], (uint64_t *)v4);
    a1[7].i32[0] = 0;
    int v16 = a1[7].u8[4];
  }
  return v16 != 0;
}

void sub_1B20781EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t kaldi::OnlinePadInput::OnlinePadInput(uint64_t this, kaldi::OnlineFeatInputItf *a2, int a3)
{
  *(void *)this = &unk_1F0A47788;
  *(void *)(this + 8) = a2;
  *(_DWORD *)(this + 16) = a3;
  *(void *)(this + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  if (a3 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"end_pad_ > 0", 12);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return this;
}

void sub_1B20782A8(_Unwind_Exception *a1)
{
  kaldi::Vector<float>::Destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlinePadInput::Compute(uint64_t a1, _OWORD *a2)
{
  int v4 = *(uint64_t (****)(void, _OWORD *))(a1 + 8);
  long long v5 = a2[1];
  v14[0] = *a2;
  uint64_t v3 = *(int32x2_t **)&v14[0];
  v14[1] = v5;
  void v14[2] = a2[2];
  uint64_t v6 = (**v4)(v4, v14);
  if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v3) >= 1)
  {
    uint64_t v7 = (const void *)(*(void *)v3 + 4 * (int)(v3[2].i32[0] * (kaldi::MatrixBase<float>::NumRows((uint64_t)v3) - 1)));
    uint64_t v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)v3);
    v13[2] = 0;
    v13[0] = v7;
    v13[1] = (const void *)v8;
    kaldi::Vector<float>::Resize((void **)(a1 + 24), v8, 1);
    kaldi::VectorBase<float>::CopyFromVec(a1 + 24, v13);
  }
  if ((v6 & 1) == 0 && *(int *)(a1 + 32) >= 1)
  {
    uint64_t v9 = *(_DWORD *)(a1 + 16) + kaldi::MatrixBase<float>::NumRows((uint64_t)v3);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
    kaldi::Matrix<float>::Resize(v3, v9, v10, 2, 0);
    int v11 = kaldi::MatrixBase<float>::NumRows((uint64_t)v3);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v13, (uint64_t)v3, v11 - *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 16), 0, v3[1].i32[0]);
    kaldi::MatrixBase<float>::CopyRowsFromVec((int *)v13, (char **)(a1 + 24));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v13);
  }
  return v6;
}

void sub_1B207843C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::OnlineSpliceInput::SpliceFrames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int32x2_t *a6)
{
  int v37 = kaldi::MatrixBase<float>::NumRows(a2);
  int v11 = kaldi::MatrixBase<float>::NumRows(a3) + v37;
  uint64_t v12 = kaldi::MatrixBase<float>::NumRows(a4) - a5 + v11 + 1;
  uint64_t v39 = a2;
  int v13 = kaldi::MatrixBase<float>::NumCols(a2);
  uint64_t v35 = a3;
  int v14 = kaldi::MatrixBase<float>::NumCols(a3);
  uint64_t v36 = a4;
  int v15 = kaldi::MatrixBase<float>::NumCols(a4);
  if (v14 <= v15) {
    int v16 = v15;
  }
  else {
    int v16 = v14;
  }
  if (v13 <= v16) {
    int v17 = v16;
  }
  else {
    int v17 = v13;
  }
  if ((int)v12 <= 0)
  {
    kaldi::Matrix<float>::Resize(a6, 0, 0, 0, 0);
  }
  else
  {
    kaldi::Matrix<float>::Resize(a6, v12, v17 * a5, 0, 0);
    uint64_t v38 = v11;
    int v34 = -v11;
    uint64_t v18 = 0;
    uint64_t v40 = a5;
    uint64_t v41 = 0;
    uint64_t v33 = v12;
    do
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = v18 + v21;
        int32x2_t v23 = *a6;
        uint64_t v24 = a6[2].i32[0];
        kaldi::MatrixBase<float>::NumCols((uint64_t)a6);
        int v48 = 0;
        uint64_t v49 = 0;
        uint64_t v46 = *(void *)&v23 + v41 * v24 + v20;
        int v47 = v17;
        if (v18 + v21 >= v37)
        {
          if (v22 >= v38)
          {
            uint64_t v31 = *(void *)v36;
            int v32 = *(_DWORD *)(v36 + 16);
            int v30 = kaldi::MatrixBase<float>::NumCols(v36);
            int v44 = 0;
            uint64_t v45 = 0;
            int v42 = (const void *)(v31 + 4 * v32 * (v34 + (int)v18 + (int)v21));
          }
          else
          {
            uint64_t v28 = *(void *)v35;
            uint64_t v29 = *(int *)(v35 + 16);
            int v30 = kaldi::MatrixBase<float>::NumCols(v35);
            int v44 = 0;
            uint64_t v45 = 0;
            int v42 = (const void *)(v28 + 4 * (v18 - v37 + v21) * v29);
          }
          int v43 = v30;
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v46, &v42);
        }
        else
        {
          uint64_t v25 = *(void *)v39;
          uint64_t v26 = *(int *)(v39 + 16);
          int v27 = kaldi::MatrixBase<float>::NumCols(v39);
          int v44 = 0;
          uint64_t v45 = 0;
          int v42 = (const void *)(v25 + 4 * v22 * v26);
          int v43 = v27;
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v46, &v42);
        }
        ++v21;
        v20 += 4 * v17;
        v19 += v17;
      }
      while (v40 != v21);
      ++v18;
      v41 += 4;
    }
    while (v18 != v33);
  }
}

uint64_t kaldi::OnlineSpliceInput::Compute(int32x2_t *a1, long long *a2)
{
  int v4 = *(int32x2_t **)a2;
  kaldi::MatrixBase<float>::NumRows(*(void *)a2);
  uint64_t v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::Matrix<float>::Matrix((uint64_t)v49, v5, a1[2].u32[0], 1, 0);
  *(void *)a2 = v49;
  uint64_t v6 = (uint64_t (***)(void))a1[1];
  long long v7 = a2[2];
  long long v8 = *a2;
  long long v47 = a2[1];
  long long v48 = v7;
  long long v46 = v8;
  uint64_t v9 = (**v6)();
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)v49)) {
    int v10 = 0;
  }
  else {
    int v10 = v9;
  }
  if (v10 == 1)
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    uint64_t v9 = 1;
  }
  else
  {
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)v49)) {
      char v11 = 1;
    }
    else {
      char v11 = v9;
    }
    if ((v11 & 1) != 0 || kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4]))
    {
      if (!kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4])
        && (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v49) >= 1)
      {
        uint64_t v27 = a1[2].u32[1];
        if ((int)v27 >= 1)
        {
          kaldi::Matrix<float>::Resize(a1 + 4, v27, a1[2].u32[0], 1, 0);
          if (a1[2].i32[1] >= 1)
          {
            __int32 v28 = 0;
            do
            {
              int32x2_t v29 = a1[4];
              __int32 v30 = a1[6].i32[0];
              int v31 = kaldi::MatrixBase<float>::NumCols((uint64_t)&a1[4]);
              int v40 = 0;
              uint64_t v41 = 0;
              int32x2_t v38 = (int32x2_t)(*(void *)&v29 + 4 * v30 * v28);
              int v39 = v31;
              uint64_t v32 = v49[0];
              int v33 = kaldi::MatrixBase<float>::NumCols((uint64_t)v49);
              int v44 = 0;
              uint64_t v45 = 0;
              uint64_t v42 = v32;
              int v43 = v33;
              kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v38, (const void **)&v42);
              ++v28;
            }
            while (v28 < a1[2].i32[1]);
          }
        }
      }
      kaldi::Matrix<float>::Matrix((uint64_t)&v38);
      uint64_t v13 = a1[3].u32[0];
      if ((int)v13 < 1) {
        char v14 = 1;
      }
      else {
        char v14 = v9;
      }
      if ((v14 & 1) == 0)
      {
        kaldi::Matrix<float>::Resize(&v38, v13, a1[2].u32[0], 1, 0);
        LODWORD(v13) = a1[3].i32[0];
        if ((int)v13 >= 1)
        {
          int v15 = 0;
          do
          {
            if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v49) < 1)
            {
              int32x2_t v23 = v38;
              int v24 = v41;
              int v25 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v38);
              int v44 = 0;
              uint64_t v45 = 0;
              uint64_t v42 = *(void *)&v23 + 4 * v24 * v15;
              int v43 = v25;
              int v19 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4]);
              int32x2_t v20 = a1[4];
              __int32 v21 = a1[6].i32[0];
              int v22 = kaldi::MatrixBase<float>::NumCols((uint64_t)&a1[4]);
            }
            else
            {
              int32x2_t v16 = v38;
              int v17 = v41;
              int v18 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v38);
              int v44 = 0;
              uint64_t v45 = 0;
              uint64_t v42 = *(void *)&v16 + 4 * v17 * v15;
              int v43 = v18;
              int v19 = kaldi::MatrixBase<float>::NumRows((uint64_t)v49);
              int32x2_t v20 = (int32x2_t)v49[0];
              __int32 v21 = v50;
              int v22 = kaldi::MatrixBase<float>::NumCols((uint64_t)v49);
            }
            int v36 = 0;
            uint64_t v37 = 0;
            uint64_t v34 = *(void *)&v20 + 4 * v21 * (v19 - 1);
            int v35 = v22;
            uint64_t v12 = kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v42, (const void **)&v34);
            ++v15;
            LODWORD(v13) = a1[3].i32[0];
          }
          while (v15 < (int)v13);
        }
      }
      kaldi::OnlineSpliceInput::SpliceFrames((uint64_t)v12, (uint64_t)&a1[4], (uint64_t)v49, (uint64_t)&v38, a1[2].i32[1] + v13 + 1, v4);
      kaldi::OnlineSpliceInput::ComputeNextRemainder(a1, (uint64_t)v49);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v38);
    }
    else
    {
      kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
      uint64_t v9 = 0;
    }
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v49);
  return v9;
}

void sub_1B2078AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix(v5 - 128);
  _Unwind_Resume(a1);
}

void kaldi::OnlineSpliceInput::ComputeNextRemainder(int32x2_t *a1, uint64_t a2)
{
  int v4 = a1[3].i32[0] + a1[2].i32[1];
  uint64_t v5 = a1 + 4;
  int v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4]);
  int v7 = kaldi::MatrixBase<float>::NumRows(a2) + v6;
  if (v7 >= v4) {
    uint64_t v8 = v4;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8)
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v27, v8, a1[2].u32[0], 0, 0);
    int v19 = kaldi::MatrixBase<float>::NumRows((uint64_t)v5);
    int v18 = v5;
    int v9 = kaldi::MatrixBase<float>::NumRows(a2);
    if ((int)v8 >= 1)
    {
      int v10 = 0;
      int v11 = v19 - v8 + v9;
      int v17 = v9 - v8;
      do
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v24 = v27[0] + 4 * v28 * v10;
        LODWORD(v25) = kaldi::MatrixBase<float>::NumCols((uint64_t)v27);
        if (v11 + v10 >= v19)
        {
          uint64_t v15 = *(void *)a2;
          int v16 = *(_DWORD *)(a2 + 16);
          int v14 = kaldi::MatrixBase<float>::NumCols(a2);
          int v22 = 0;
          uint64_t v23 = 0;
          uint64_t v20 = v15 + 4 * v16 * (v17 + v10);
        }
        else
        {
          int32x2_t v12 = a1[4];
          __int32 v13 = a1[6].i32[0];
          int v14 = kaldi::MatrixBase<float>::NumCols((uint64_t)v18);
          int v22 = 0;
          uint64_t v23 = 0;
          uint64_t v20 = *(void *)&v12 + 4 * v13 * (v11 + v10);
        }
        int v21 = v14;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v24, (const void **)&v20);
        ++v10;
      }
      while (v8 != v10);
    }
    kaldi::Matrix<float>::operator=(v18, (uint64_t)v27);
    kaldi::Matrix<float>::~Matrix((uint64_t)v27);
  }
  else
  {
    kaldi::Matrix<float>::Resize(v5, 0, 0, 0, 0);
  }
}

void sub_1B2078CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::OnlineSpliceBatchInput::SpliceFrames(uint64_t a1, int *a2, int *a3, int a4, int32x2_t *a5)
{
  int v9 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  int v10 = kaldi::MatrixBase<float>::NumRows((uint64_t)a3);
  int v11 = v9 - a4 + v10 + 1;
  unsigned int v12 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  unsigned int v13 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
  if (v11 <= 0)
  {
    kaldi::Matrix<float>::Resize(a5, 0, 0, 0, 0);
  }
  else
  {
    if ((int)v12 <= (int)v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v12;
    }
    kaldi::Matrix<float>::Resize(a5, (v9 + v10), v14, 1, 0);
    if (v9 >= 1)
    {
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v15, (uint64_t)a5, 0, v9, 0, a5[1].i32[0]);
      kaldi::MatrixBase<float>::CopyFromMat<float>(v15, a2, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v15);
    }
    if (v10 >= 1)
    {
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v15, (uint64_t)a5, v9, v10, 0, a5[1].i32[0]);
      kaldi::MatrixBase<float>::CopyFromMat<float>(v15, a3, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v15);
    }
  }
}

void sub_1B2078E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::OnlineSpliceBatchInput::Compute(int32x2_t *a1, long long *a2)
{
  int v4 = *(int32x2_t **)a2;
  kaldi::MatrixBase<float>::NumRows(*(void *)a2);
  if (!kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[6]))
  {
    int v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
    kaldi::Matrix<float>::Resize(v4, (a1[5].i32[0] + v5), a1[4].u32[0], 1, 0);
  }
  uint64_t v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::Matrix<float>::Matrix((uint64_t)v33, v6, a1[4].u32[0], 0, 0);
  *(void *)a2 = v33;
  int v7 = (uint64_t (***)(void))a1[3];
  long long v8 = a2[2];
  long long v9 = *a2;
  long long v31 = a2[1];
  long long v32 = v8;
  long long v30 = v9;
  uint64_t v10 = (**v7)();
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)v33)) {
    int v11 = 0;
  }
  else {
    int v11 = v10;
  }
  if (v11 == 1)
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    uint64_t v10 = 1;
  }
  else
  {
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)v33)) {
      char v12 = 1;
    }
    else {
      char v12 = v10;
    }
    if ((v12 & 1) != 0 || kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[6]))
    {
      uint64_t v13 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[6]);
      if (!v13)
      {
        uint64_t v13 = kaldi::MatrixBase<float>::NumRows((uint64_t)v33);
        if ((int)v13 >= 1)
        {
          uint64_t v15 = a1[4].u32[1];
          if ((int)v15 >= 1)
          {
            kaldi::Matrix<float>::Resize(a1 + 6, v15, a1[4].u32[0], 0, 0);
            if (a1[4].i32[1] >= 1)
            {
              __int32 v16 = 0;
              do
              {
                int32x2_t v17 = a1[6];
                __int32 v18 = a1[8].i32[0];
                int v19 = kaldi::MatrixBase<float>::NumCols((uint64_t)&a1[6]);
                int v28 = 0;
                uint64_t v29 = 0;
                uint64_t v26 = *(void *)&v17 + 4 * v18 * v16;
                int v27 = v19;
                uint64_t v20 = *(const void **)v33;
                int v21 = kaldi::MatrixBase<float>::NumCols((uint64_t)v33);
                int v24 = 0;
                uint64_t v25 = 0;
                int v22 = v20;
                int v23 = v21;
                uint64_t v13 = (uint64_t)kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v26, &v22);
                ++v16;
              }
              while (v16 < a1[4].i32[1]);
            }
          }
        }
      }
      kaldi::OnlineSpliceBatchInput::SpliceFrames(v13, (int *)&a1[6], v33, a1[4].i32[1] + a1[5].i32[0] + 1, v4);
      kaldi::OnlineSpliceBatchInput::ComputeNextRemainder(a1, (uint64_t)v33);
    }
    else
    {
      kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
      uint64_t v10 = 0;
    }
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v33);
  return v10;
}

void sub_1B20790FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::OnlineSpliceBatchInput::ComputeNextRemainder(int32x2_t *a1, uint64_t a2)
{
  int v4 = a1[5].i32[0] + a1[4].i32[1];
  int v5 = a1 + 6;
  int v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[6]);
  int v7 = kaldi::MatrixBase<float>::NumRows(a2) + v6;
  if (v7 >= v4) {
    uint64_t v8 = v4;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8)
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v27, v8, a1[4].u32[0], 0, 0);
    int v19 = kaldi::MatrixBase<float>::NumRows((uint64_t)v5);
    __int32 v18 = v5;
    int v9 = kaldi::MatrixBase<float>::NumRows(a2);
    if ((int)v8 >= 1)
    {
      int v10 = 0;
      int v11 = v19 - v8 + v9;
      int v17 = v9 - v8;
      do
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v24 = v27[0] + 4 * v28 * v10;
        LODWORD(v25) = kaldi::MatrixBase<float>::NumCols((uint64_t)v27);
        if (v11 + v10 >= v19)
        {
          uint64_t v15 = *(void *)a2;
          int v16 = *(_DWORD *)(a2 + 16);
          int v14 = kaldi::MatrixBase<float>::NumCols(a2);
          int v22 = 0;
          uint64_t v23 = 0;
          uint64_t v20 = v15 + 4 * v16 * (v17 + v10);
        }
        else
        {
          int32x2_t v12 = a1[6];
          __int32 v13 = a1[8].i32[0];
          int v14 = kaldi::MatrixBase<float>::NumCols((uint64_t)v18);
          int v22 = 0;
          uint64_t v23 = 0;
          uint64_t v20 = *(void *)&v12 + 4 * v13 * (v11 + v10);
        }
        int v21 = v14;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v24, (const void **)&v20);
        ++v10;
      }
      while (v8 != v10);
    }
    kaldi::Matrix<float>::operator=(v18, (uint64_t)v27);
    kaldi::Matrix<float>::~Matrix((uint64_t)v27);
  }
  else
  {
    kaldi::Matrix<float>::Resize(v5, 0, 0, 0, 0);
  }
}

void sub_1B2079300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL kaldi::OnlineRecordedInput::Compute(_DWORD *a1, int32x2_t **a2)
{
  uint64_t v3 = *a2;
  int v4 = a1[2];
  uint64_t v5 = (uint64_t)(a1 + 4);
  if (v4 == kaldi::MatrixBase<float>::NumRows((uint64_t)(a1 + 4)))
  {
    kaldi::Matrix<float>::Resize(v3, 0, 0, 0, 0);
    return 0;
  }
  else
  {
    kaldi::MatrixBase<float>::NumRows((uint64_t)v3);
    kaldi::MatrixBase<float>::NumCols((uint64_t)v3);
    (*(void (**)(_DWORD *))(*(void *)a1 + 8))(a1);
    LODWORD(v7) = kaldi::MatrixBase<float>::NumRows(v5) - a1[2];
    int v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)v3);
    if ((int)v7 >= v8) {
      uint64_t v7 = v8;
    }
    else {
      uint64_t v7 = v7;
    }
    uint64_t v9 = kaldi::MatrixBase<float>::NumCols(v5);
    kaldi::Matrix<float>::Resize(v3, v7, v9, 0, 0);
    int v10 = a1[2];
    int v11 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 8))(a1);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v13, v5, v10, v7, 0, v11);
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v3, v13, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v13);
    int v12 = a1[2] + v7;
    a1[2] = v12;
    return v12 != kaldi::MatrixBase<float>::NumRows(v5);
  }
}

void sub_1B2079494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::OnlineCacheInput::Compute(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  if (!*(void *)(a2 + 16)) {
    operator new();
  }
  uint64_t v5 = *(uint64_t (****)(void, _OWORD *))(a1 + 8);
  long long v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  v9[2] = *(_OWORD *)(a2 + 32);
  uint64_t v7 = (**v5)(v5, v9);
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (kaldi::MatrixBase<float>::NumRows(v4) && *(unsigned char *)(a1 + 128)) {
    operator new();
  }
  if (*(void *)(a2 + 16) && kaldi::MatrixBase<float>::NumRows(v4) && *(unsigned char *)(a1 + 129)) {
    operator new();
  }
  std::mutex::unlock((std::mutex *)(a1 + 40));
  return v7;
}

void sub_1B2079788(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x1080C40EB13E0A1);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void kaldi::OnlineCacheInput::GetCachedData(uint64_t a1, int32x2_t *a2, int32x2_t *a3)
{
  long long v6 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 24) == v7)
    {
      uint64_t v9 = 0;
      uint64_t v12 = 0;
    }
    else
    {
      unint64_t v8 = 0;
      LODWORD(v9) = 0;
      do
      {
        int v10 = kaldi::MatrixBase<float>::NumRows(*(void *)(v7 + 8 * v8));
        uint64_t v11 = kaldi::MatrixBase<float>::NumCols(*(void *)(*(void *)(a1 + 16) + 8 * v8));
        uint64_t v9 = (v10 + v9);
        ++v8;
        uint64_t v7 = *(void *)(a1 + 16);
      }
      while (v8 < (*(void *)(a1 + 24) - v7) >> 3);
      uint64_t v12 = v11;
    }
    kaldi::Matrix<float>::Resize(a2, v9, v12, 0, 0);
    uint64_t v13 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 24) != v13)
    {
      unint64_t v14 = 0;
      int v15 = 0;
      do
      {
        int v16 = kaldi::MatrixBase<float>::NumRows(*(void *)(v13 + 8 * v14));
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v26, (uint64_t)a2, v15, v16, 0, v12);
        kaldi::MatrixBase<float>::CopyFromMat<float>(v26, *(int **)(*(void *)(a1 + 16) + 8 * v14), 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v26);
        v15 += v16;
        ++v14;
        uint64_t v13 = *(void *)(a1 + 16);
      }
      while (v14 < (*(void *)(a1 + 24) - v13) >> 3);
    }
  }
  if (a3)
  {
    if (*(unsigned char *)(a1 + 129))
    {
      int v17 = *(uint64_t **)(a1 + 104);
      if (v17 != *(uint64_t **)(a1 + 112))
      {
        unint64_t v18 = 0;
        LODWORD(v19) = 0;
        do
        {
          uint64_t v19 = kaldi::MatrixBase<float>::NumRows(v17[v18++]) + v19;
          int v17 = *(uint64_t **)(a1 + 104);
        }
        while (v18 < (uint64_t)(*(void *)(a1 + 112) - (void)v17) >> 3);
        uint64_t v20 = kaldi::MatrixBase<float>::NumCols(*v17);
        int v21 = v20;
        kaldi::Matrix<float>::Resize(a3, v19, v20, 0, 0);
        uint64_t v22 = *(void *)(a1 + 104);
        if (*(void *)(a1 + 112) != v22)
        {
          unint64_t v23 = 0;
          int v24 = 0;
          do
          {
            int v25 = kaldi::MatrixBase<float>::NumRows(*(void *)(v22 + 8 * v23));
            kaldi::SubMatrix<float>::SubMatrix((uint64_t)v26, (uint64_t)a3, v24, v25, 0, v21);
            kaldi::MatrixBase<float>::CopyFromMat<float>(v26, *(int **)(*(void *)(a1 + 104) + 8 * v23), 111);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v26);
            v24 += v25;
            ++v23;
            uint64_t v22 = *(void *)(a1 + 104);
          }
          while (v23 < (*(void *)(a1 + 112) - v22) >> 3);
        }
      }
    }
  }
  std::mutex::unlock(v6);
}

void sub_1B2079A04(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *kaldi::OnlineCacheInput::Deallocate(void *this)
{
  uint64_t v1 = this;
  uint64_t v3 = this[2];
  uint64_t v2 = this[3];
  if (v2 == v3)
  {
    uint64_t v3 = this[3];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      this = *(void **)(v3 + 8 * v4);
      if (this)
      {
        uint64_t v5 = kaldi::Matrix<float>::~Matrix((uint64_t)this);
        this = (void *)MEMORY[0x1B3EA8670](v5, 0x1080C40EB13E0A1);
        uint64_t v3 = v1[2];
        uint64_t v2 = v1[3];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v1[3] = v3;
  uint64_t v7 = v1[13];
  uint64_t v6 = v1[14];
  if (v6 == v7)
  {
    uint64_t v7 = v1[14];
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      this = *(void **)(v7 + 8 * v8);
      if (this)
      {
        uint64_t v9 = kaldi::Matrix<float>::~Matrix((uint64_t)this);
        this = (void *)MEMORY[0x1B3EA8670](v9, 0x1080C40EB13E0A1);
        uint64_t v7 = v1[13];
        uint64_t v6 = v1[14];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  v1[14] = v7;
  return this;
}

uint64_t kaldi::OnlineDeltaInput::OnlineDeltaInput(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A479C8;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = *a2;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8))(a3);
  kaldi::Matrix<float>::Matrix(a1 + 32);
  return a1;
}

void kaldi::OnlineDeltaInput::AppendFrames(int *a1, int *a2, int *a3, int32x2_t *a4)
{
  int v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)a1);
  int v9 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  int v10 = kaldi::MatrixBase<float>::NumRows((uint64_t)a3);
  uint64_t v11 = (v9 + v8 + v10);
  if (v9 + v8 + v10)
  {
    int v12 = v10;
    LODWORD(v13) = kaldi::MatrixBase<float>::NumCols((uint64_t)a1);
    int v14 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    int v15 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
    if (v14 <= v15) {
      int v16 = v15;
    }
    else {
      int v16 = v14;
    }
    if ((int)v13 <= v16) {
      uint64_t v13 = v16;
    }
    else {
      uint64_t v13 = v13;
    }
    kaldi::Matrix<float>::Resize(a4, v11, v13, 0, 0);
    if (v8)
    {
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v17, (uint64_t)a4, 0, v8, 0, v13);
      kaldi::MatrixBase<float>::CopyFromMat<float>(v17, a1, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v17);
    }
    if (v9)
    {
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v17, (uint64_t)a4, v8, v9, 0, v13);
      kaldi::MatrixBase<float>::CopyFromMat<float>(v17, a2, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v17);
    }
    if (v12)
    {
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v17, (uint64_t)a4, v9 + v8, v12, 0, v13);
      kaldi::MatrixBase<float>::CopyFromMat<float>(v17, a3, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v17);
    }
  }
  else
  {
    kaldi::Matrix<float>::Resize(a4, 0, 0, 0, 0);
  }
}

void sub_1B2079D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::OnlineDeltaInput::DeltaComputation(_DWORD *a1, uint64_t a2, int32x2_t *a3, int32x2_t *a4)
{
  int v8 = kaldi::MatrixBase<float>::NumRows(a2);
  int v9 = v8;
  uint64_t v10 = a1[6];
  int v11 = a1[4] * a1[5];
  if (2 * v11 >= v8) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = (2 * v11);
  }
  uint64_t v13 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 8))(a1);
  if ((int)v12 < 1)
  {
    kaldi::Matrix<float>::Resize(a4, 0, 0, 0, 0);
  }
  else
  {
    kaldi::Matrix<float>::Resize(a4, v12, v10, 0, 0);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v22, a2, v9 - v12, v12, 0, v10);
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)a4, &v22, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
  }
  uint64_t v14 = (v9 - 2 * v11);
  if ((int)v14 < 1)
  {
    kaldi::Matrix<float>::Resize(a3, 0, 0, 0, 0);
  }
  else
  {
    int v15 = v14 & ~((int)v14 >> 31);
    kaldi::Matrix<float>::Resize(a3, v14, v13, 0, 0);
    kaldi::DeltaFeatures::DeltaFeatures(&v22, a1 + 4);
    int v16 = 0;
    do
    {
      int v17 = a1[4];
      int v18 = a1[5];
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v19 = (void **)(*(void *)a3 + 4 * a3[2].i32[0] * v16);
      LODWORD(v20) = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
      kaldi::DeltaFeatures::Process(&v22, a2, v16 + v18 * v17, (uint64_t)&v19);
      ++v16;
    }
    while (v15 != v16);
    uint64_t v19 = (void **)&v23;
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

void sub_1B2079F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineDeltaInput::Compute(int32x2_t *a1, long long *a2)
{
  unint64_t v4 = *(int32x2_t **)a2;
  kaldi::MatrixBase<float>::NumRows(*(void *)a2);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  (*(void (**)(int32x2_t *))(*(void *)a1 + 8))(a1);
  uint64_t v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::Matrix<float>::Matrix((uint64_t)v47, v5, a1[3].u32[0], 0, 0);
  *(void *)a2 = v47;
  uint64_t v6 = (uint64_t (***)(void))a1[1];
  long long v7 = a2[2];
  long long v8 = *a2;
  long long v45 = a2[1];
  long long v46 = v7;
  long long v44 = v8;
  uint64_t v9 = (**v6)();
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)v47)) {
    int v10 = 0;
  }
  else {
    int v10 = v9;
  }
  if (v10 == 1)
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    uint64_t v9 = 1;
  }
  else
  {
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)v47)) {
      char v11 = 1;
    }
    else {
      char v11 = v9;
    }
    if ((v11 & 1) != 0 || kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4]))
    {
      if (!kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4]))
      {
        if (kaldi::MatrixBase<float>::NumRows((uint64_t)v47))
        {
          uint64_t v25 = (a1[2].i32[1] * a1[2].i32[0]);
          if (v25)
          {
            kaldi::Matrix<float>::Resize(a1 + 4, v25, a1[3].u32[0], 0, 0);
            if (a1[2].i32[1] * a1[2].i32[0] >= 1)
            {
              int v26 = 0;
              do
              {
                int32x2_t v27 = a1[4];
                __int32 v28 = a1[6].i32[0];
                int v29 = kaldi::MatrixBase<float>::NumCols((uint64_t)&a1[4]);
                int v42 = 0;
                uint64_t v43 = 0;
                int32x2_t v40 = (int32x2_t)(*(void *)&v27 + 4 * v28 * v26);
                int v41 = v29;
                int32x2_t v30 = (int32x2_t)v47[0];
                int v31 = kaldi::MatrixBase<float>::NumCols((uint64_t)v47);
                int v34 = 0;
                uint64_t v35 = 0;
                int32x2_t v32 = v30;
                int v33 = v31;
                kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v40, (const void **)&v32);
                ++v26;
              }
              while (v26 < a1[2].i32[1] * a1[2].i32[0]);
            }
          }
        }
      }
      kaldi::Matrix<float>::Matrix((uint64_t)&v40);
      if ((v9 & 1) == 0)
      {
        uint64_t v12 = (a1[2].i32[1] * a1[2].i32[0]);
        if ((int)v12 >= 1)
        {
          kaldi::Matrix<float>::Resize(&v40, v12, a1[3].u32[0], 0, 0);
          if (a1[2].i32[1] * a1[2].i32[0] >= 1)
          {
            int v13 = 0;
            do
            {
              if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v47) < 1)
              {
                int32x2_t v21 = v40;
                int v22 = v43;
                int v23 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v40);
                int v34 = 0;
                uint64_t v35 = 0;
                int32x2_t v32 = (int32x2_t)(*(void *)&v21 + 4 * v22 * v13);
                int v33 = v23;
                int v17 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4]);
                int32x2_t v18 = a1[4];
                __int32 v19 = a1[6].i32[0];
                int v20 = kaldi::MatrixBase<float>::NumCols((uint64_t)&a1[4]);
              }
              else
              {
                int32x2_t v14 = v40;
                int v15 = v43;
                int v16 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v40);
                int v34 = 0;
                uint64_t v35 = 0;
                int32x2_t v32 = (int32x2_t)(*(void *)&v14 + 4 * v15 * v13);
                int v33 = v16;
                int v17 = kaldi::MatrixBase<float>::NumRows((uint64_t)v47);
                int32x2_t v18 = (int32x2_t)v47[0];
                __int32 v19 = v48;
                int v20 = kaldi::MatrixBase<float>::NumCols((uint64_t)v47);
              }
              int v38 = 0;
              uint64_t v39 = 0;
              uint64_t v36 = *(void *)&v18 + 4 * v19 * (v17 - 1);
              int v37 = v20;
              kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v32, (const void **)&v36);
              ++v13;
            }
            while (v13 < a1[2].i32[1] * a1[2].i32[0]);
          }
        }
      }
      kaldi::Matrix<float>::Matrix((uint64_t)&v32);
      kaldi::OnlineDeltaInput::AppendFrames((int *)&a1[4], (int *)v47, (int *)&v40, &v32);
      kaldi::OnlineDeltaInput::DeltaComputation(a1, (uint64_t)&v32, v4, a1 + 4);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v32);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v40);
    }
    else
    {
      kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
      uint64_t v9 = 0;
    }
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v47);
  return v9;
}

void sub_1B207A324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix(v10 - 128);
  _Unwind_Resume(a1);
}

float kaldi::handleStrictBatchOps(int32x2_t *a1, int a2, char a3, int a4)
{
  int v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)a1);
  uint64_t v9 = kaldi::MatrixBase<float>::NumCols((uint64_t)a1);
  kaldi::Matrix<float>::Resize(a1, (v8 + a2 + a4), v9, 2, 0);
  if (a2 >= 1 && (a3 & 1) == 0)
  {
    char v11 = (char *)(*(void *)a1 + 4 * a1[2].i32[0] * (v8 - 1));
    v13[2] = 0;
    v13[0] = v11;
    v13[1] = (char *)kaldi::MatrixBase<float>::NumCols((uint64_t)a1);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v12, (uint64_t)a1, v8, a2, 0, a1[1].i32[0]);
    kaldi::MatrixBase<float>::CopyRowsFromVec(v12, v13);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v12);
  }
  if (a4)
  {
    float result = (float)a2;
    *(float *)(*(void *)a1 + 4 * a1[2].i32[0] * (v8 + a2)) = (float)a2;
  }
  return result;
}

void sub_1B207A480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineNnetForwardInput::Compute(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(int32x2_t **)a2;
  uint64_t v5 = (int32x2_t *)*((void *)a2 + 1);
  if (*(void *)(a1 + 88)) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = !v6;
  int v67 = v7;
  kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
  int v8 = *(int **)(a1 + 112);
  int v9 = *v8;
  uint64_t v10 = 1;
  if (*(int *)(a1 + 184) > 0) {
    uint64_t v10 = 2;
  }
  uint64_t v11 = v8[v10];
  if ((int)v11 >= 1)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
    kaldi::Matrix<float>::Resize(v4, v11, v12, 1, 0);
  }
  uint64_t v13 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
  kaldi::Matrix<float>::Matrix((uint64_t)v86, v13, v14, 1, 0);
  *(void *)a2 = v86;
  int v15 = *(uint64_t (****)(void))(a1 + 8);
  long long v16 = a2[2];
  long long v17 = *a2;
  long long v84 = a2[1];
  long long v85 = v16;
  long long v83 = v17;
  unsigned int v68 = (**v15)();
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v80, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"requested ", 10);
    int32x2_t v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" frames and got ", 16);
    kaldi::MatrixBase<float>::NumRows((uint64_t)v86);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v80);
  }
  if (!kaldi::MatrixBase<float>::NumRows((uint64_t)v86))
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    goto LABEL_101;
  }
  int v66 = kaldi::MatrixBase<float>::NumRows((uint64_t)v86);
  if (v9 < 1)
  {
    uint64_t v21 = 0;
  }
  else
  {
    int v19 = kaldi::MatrixBase<float>::NumRows((uint64_t)v86);
    int v20 = *(_DWORD *)(a1 + 96) + v9;
    if (v19 > v20)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"input.NumRows() <= strict_batch_size + total_batch_context_", 59);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v80);
    }
    uint64_t v21 = v20 - kaldi::MatrixBase<float>::NumRows((uint64_t)v86);
    kaldi::handleStrictBatchOps(v86, v21, *(unsigned char *)(a1 + 136), *(unsigned __int8 *)(a1 + 137));
    if (*(int *)(a1 + 140) >= 1)
    {
      int v22 = kaldi::MatrixBase<float>::NumRows((uint64_t)v86);
      uint64_t v23 = kaldi::MatrixBase<float>::NumCols((uint64_t)v86);
      kaldi::Matrix<float>::Resize((int32x2_t *)(a1 + 144), *(unsigned int *)(a1 + 140), v23, 2, 0);
      if (*(unsigned char *)(a1 + 296))
      {
        if (v9 <= (int)v21)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v80);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"frames_padded < strict_batch_size", 33);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v80);
        }
        kaldi::Matrix<float>::Matrix((uint64_t)&v80, 1, v23, 0, 0);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v78, (uint64_t)&v80, 0, 1, 0, v9 - v21);
        kaldi::MatrixBase<float>::Set((uint64_t)v78, 1.0);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v78);
        int v24 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v80);
        kaldi::Matrix<float>::Resize(v86, (v24 + v22 + *(_DWORD *)(a1 + 140)), v23, 2, 0);
        int v25 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v80);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v78, (uint64_t)v86, v22, v25, 0, v23);
        kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v78, (int *)&v80, 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v78);
        int v26 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v80);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v78, (uint64_t)v86, v26 + v22, *(_DWORD *)(a1 + 140), 0, v23);
        kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v78, (int *)(a1 + 144), 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v78);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v80);
      }
      else
      {
        kaldi::Matrix<float>::Resize(v86, (v22 + *(_DWORD *)(a1 + 140) + 2), v23, 2, 0);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v80, (uint64_t)v86, v22, *(_DWORD *)(a1 + 140), 0, v23);
        kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&v80, (int *)(a1 + 144), 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v80);
        int32x2_t v27 = v86[0];
        int v28 = v87;
        int v29 = v87 * (*(_DWORD *)(a1 + 140) + v22);
        *(float *)(*(void *)v86 + 4 * v29) = (float)*(int *)(a1 + 184);
        float v30 = 0.0;
        if (*(_DWORD *)(*(void *)(a1 + 112) + 4) == *(_DWORD *)(*(void *)(a1 + 112) + 8)) {
          float v30 = 1.0;
        }
        *(float *)(*(void *)&v27 + 4 * (v28 + v29)) = v30;
      }
    }
  }
  for (int i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v86); ++i)
  {
    for (uint64_t j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v86); ++j)
    {
      float v33 = *(float *)(*(void *)v86 + 4 * i * v87 + 4 * j);
      if (v33 == INFINITY)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"inf in features", 15);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v80);
      }
    }
  }
  memset(&v78[1], 0, 32);
  v78[0] = (int32x2_t)&unk_1F0A51768;
  char v79 = 0;
  memset(&v76[1], 0, 32);
  v76[0] = (int32x2_t)&unk_1F0A51768;
  char v77 = 0;
  kaldi::CuMatrix<float>::operator=(v78, (int *)v86);
  uint64_t v34 = *(void *)(a1 + 16);
  if (v34) {
    uint64_t v35 = v76;
  }
  else {
    uint64_t v35 = v78;
  }
  if (v34) {
    kaldi::nnet1::Nnet::Feedforward(*(uint64_t **)(a1 + 16), (uint64_t)v78, v76, -1, 0);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v80, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"Batch ", 6);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v80);
  }
  long long v73 = 0u;
  long long v74 = 0u;
  int32x2_t v72 = (int32x2_t)&unk_1F0A51768;
  char v75 = 0;
  uint64_t v36 = *(const void **)(a1 + 24);
  if (v67)
  {
    if (!v36
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"Must use penultimate-compatible AM with silence nnet", 52);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v80);
    }
    int v38 = v37;
    uint64_t v39 = *(std::__shared_weak_count **)(a1 + 32);
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, int32x2_t *, uint64_t, uint64_t))(*(void *)v37 + 96))(v37, v35, a1 + 200, 1);
    (*(void (**)(void *, uint64_t, int32x2_t *))(*(void *)v38 + 144))(v38, a1 + 200, &v72);
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), a1 + 200, a1 + 248);
    BOOL v40 = 1;
    goto LABEL_61;
  }
  if (v36
  {
    int v42 = v41;
    uint64_t v39 = *(std::__shared_weak_count **)(a1 + 32);
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((*(uint64_t (**)(void *))(*(void *)v41 + 184))(v41))
    {
      uint64_t v43 = operator new(8uLL);
      long long v80 = v43;
      *uint64_t v43 = a1 + 248;
      *(void *)&long long v81 = v43 + 1;
      *((void *)&v81 + 1) = v43 + 1;
      long long v44 = (char *)&v78[2] + 4;
      if (v34) {
        long long v44 = (char *)&v76[2] + 4;
      }
      (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 24) + 64))(*(void *)(a1 + 24), *(unsigned int *)v44, v21);
      std::string __p = 0;
      long long v70 = 0;
      uint64_t v71 = 0;
      (*(void (**)(void *, int32x2_t *, void **, int32x2_t *, void **, void))(*(void *)v42 + 120))(v42, v35, &__p, &v72, &v80, 0);
      if (__p)
      {
        long long v70 = __p;
        operator delete(__p);
      }
      BOOL v40 = *(void *)(a1 + 256) != 0;
      if (v80)
      {
        *(void *)&long long v81 = v80;
        operator delete(v80);
      }
      goto LABEL_61;
    }
    uint64_t v36 = *(const void **)(a1 + 24);
  }
  else
  {
    uint64_t v39 = 0;
  }
  long long v45 = (char *)&v78[2] + 4;
  if (v34) {
    long long v45 = (char *)&v76[2] + 4;
  }
  (*(void (**)(const void *, void, uint64_t))(*(void *)v36 + 64))(v36, *(unsigned int *)v45, v21);
  (*(void (**)(void, int32x2_t *, int32x2_t *))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), v35, &v72);
  BOOL v40 = 0;
LABEL_61:
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  long long v46 = (char *)&v76[2] + 4;
  if (!v34) {
    long long v46 = (char *)&v78[2] + 4;
  }
  int v47 = HIDWORD(v73);
  int v48 = *(_DWORD *)(a1 + 96);
  if (v48 >= 1 && v48 != *(_DWORD *)v46 - HIDWORD(v73))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"Frames consumed by model (", 26);
    long long v63 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)") does not match frames added by batchwise splicing (", 53);
    long long v64 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"). Hint: Are batch-left-context and batch-right-context correct for this model?", 79);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v80);
  }
  ++*(_DWORD *)(a1 + 184);
  int v49 = *(_DWORD *)(a1 + 140);
  if (v49 >= 1)
  {
    if (v47 < v49)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"nnet_out NumRows ", 17);
      long long v65 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" cannot be smaller than append_context_size_ ", 45);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v80);
    }
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)&__p, a1 + 144, 0, v49, 0, SDWORD2(v73));
    uint64_t v50 = (v21 + v66);
    *((void *)&v81 + 1) = __PAIR64__(*(_DWORD *)(a1 + 140), DWORD2(v73));
    LODWORD(v82) = v74;
    DWORD1(v82) = DWORD1(v74) - v74 * v50;
    *((void *)&v82 + 1) = *((void *)&v74 + 1);
    long long v80 = &unk_1F0A472A0;
    *(void *)&long long v81 = v73 + 4 * (int)v74 * (int)v50;
    kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v80, (int *)&__p, 111);
    long long v80 = &unk_1F0A472A0;
    long long v81 = 0u;
    long long v82 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v80);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
    uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
    kaldi::CuMatrix<float>::Resize(&v72, v50, v51, 2, 0);
  }
  if (*(unsigned char *)(a1 + 80)) {
    kaldi::CuMatrixBase<float>::ApplyLog((uint64_t)&v72);
  }
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 63)) {
      goto LABEL_79;
    }
LABEL_76:
    if (*(unsigned char *)(a1 + 81) || *(unsigned char *)(a1 + 80)) {
      kaldi::nnet1::PdfPrior::SubtractOnLogpost(*(void *)(a1 + 72), (uint64_t)&v72);
    }
    goto LABEL_79;
  }
  if (*(void *)(a1 + 48)) {
    goto LABEL_76;
  }
LABEL_79:
  kaldi::Matrix<float>::Resize(v4, HIDWORD(v73), DWORD2(v73), 1, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v72, (int *)v4, 111);
  if (v40)
  {
    kaldi::Matrix<float>::Resize(v5, *(unsigned int *)(a1 + 268), *(unsigned int *)(a1 + 264), 1, 0);
    kaldi::CuMatrixBase<float>::CopyToMat<float>(a1 + 248, (int *)v5, 111);
  }
  if ((int)v21 >= 1)
  {
    if (*(unsigned char *)(a1 + 297))
    {
      if (kaldi::MatrixBase<float>::NumRows((uint64_t)v4) != 1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"output->NumRows() == 1", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v80);
      }
    }
    else
    {
      int v52 = *(_DWORD *)(a1 + 96);
      if (v21 + v66 - v52 != kaldi::MatrixBase<float>::NumRows((uint64_t)v4))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"orig_input_size + frames_padded - total_batch_context_ == output->NumRows()", 75);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v80);
      }
    }
    if (v40)
    {
      int v53 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
      if (v53 != kaldi::MatrixBase<float>::NumRows((uint64_t)v5))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"output->NumRows() == sil_post->NumRows()", 40);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v80);
      }
    }
    if (*(unsigned char *)(a1 + 297))
    {
      uint64_t v54 = kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
      uint64_t v55 = 1;
    }
    else
    {
      int v56 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
      uint64_t v54 = kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
      uint64_t v55 = (v56 - v21);
    }
    kaldi::Matrix<float>::Resize(v4, v55, v54, 2, 0);
    if (v40)
    {
      int v57 = kaldi::MatrixBase<float>::NumRows((uint64_t)v5);
      uint64_t v58 = kaldi::MatrixBase<float>::NumCols((uint64_t)v5);
      kaldi::Matrix<float>::Resize(v5, (v57 - v21), v58, 2, 0);
    }
  }
  for (int k = 0; k < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v4); ++k)
  {
    for (uint64_t m = 0; m < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v4); ++m)
    {
      float v61 = *(float *)(*(void *)v4 + 4 * k * v4[2].i32[0] + 4 * m);
      if (v61 == INFINITY)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v80, (uint64_t)"inf in NNet output", 18);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v80);
      }
    }
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v72);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v76);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v78);
LABEL_101:
  kaldi::Matrix<float>::~Matrix((uint64_t)v86);
  return v68;
}

void sub_1B207B458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1B207B478(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(v1 - 136);
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::CuMatrix<float> *,std::allocator<kaldi::CuMatrix<float> *>>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a3);
    BOOL v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_1B207B4F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::OnlineNnetForwardInput::ResetForStreaming(kaldi::OnlineNnetForwardInput *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 72))(v2)) {
    (*(void (**)(void))(**((void **)this + 3) + 88))(*((void *)this + 3));
  }
  if (*((int *)this + 35) >= 1)
  {
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v3, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"appended context reset", 22);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v3);
    }
    kaldi::MatrixBase<float>::SetZero((uint64_t)this + 144);
  }
}

void sub_1B207B5E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::GasrEncoderBase::GasrEncoderBase(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5, void *a6)
{
  *(void *)a1 = &unk_1F0A1C6C8;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = 1;
  *(unsigned char *)(a1 + 16) = a4;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = a2;
  int v8 = *(kaldi::quasar::CEFusedAcousticEncoder **)a5;
  *(void *)(a1 + 64) = *(void *)a5;
  uint64_t v9 = *(void *)(a5 + 8);
  *(void *)(a1 + 72) = v9;
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    int v8 = *(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64);
  }
  *(_OWORD *)(a1 + 80) = 0uLL;
  *(_OWORD *)(a1 + 112) = 0uLL;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0uLL;
  if (kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactor(v8))
  {
    int v10 = kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    int v11 = kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    *(_DWORD *)(a1 + 12) = (v10 - v11)
                         / (int)kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactor(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"chunk size: ", 12);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v13);
    }
  }
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  *(_DWORD *)(a1 + 52) = v12;
  if (*a6) {
    operator new();
  }
  if (v12 >= 1) {
    operator new();
  }
  operator new();
}

void sub_1B207B9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  MEMORY[0x1B3EA8670](v17, 0x10A1C40666B5A9ELL);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v21 = *v19;
  *int v19 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  int v22 = *(std::__shared_weak_count **)(v16 + 72);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v23 = *(void *)(v16 + 40);
  *(void *)(v16 + 40) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 72))(v23);
  }
  uint64_t v24 = *a9;
  *a9 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 72))(v24);
  }
  uint64_t v25 = *v18;
  uint64_t *v18 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 72))(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::GasrEncoderBase::HasSilencePosterior(kaldi::GasrEncoderBase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7) + 40))();
}

uint64_t kaldi::GasrEncoderBase::HasEndpointerScore(kaldi::GasrEncoderBase *this)
{
  return 0;
}

uint64_t kaldi::GasrEncoderBase::Dim(kaldi::quasar::CEFusedAcousticEncoder **this)
{
  return kaldi::quasar::CEFusedAcousticEncoder::OutputDim(this[8]);
}

uint64_t kaldi::GasrEncoderBase::FrameDurationMs(kaldi::GasrEncoderBase *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 7) + 24))(*((void *)this + 7));
  return kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactor(*((kaldi::quasar::CEFusedAcousticEncoder **)this
                                                                                     + 8))
       * v2;
}

uint64_t kaldi::GasrEncoderBase::ChunkSize(kaldi::GasrEncoderBase *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t kaldi::GasrEncoderBase::FrameDurationMsForAlignment(kaldi::GasrEncoderBase *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 7) + 24))(*((void *)this + 7));
  return kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactorFusion(*((kaldi::quasar::CEFusedAcousticEncoder **)this
                                                                                           + 8))
       * v2;
}

void kaldi::GasrEncoderBase::~GasrEncoderBase(kaldi::GasrEncoderBase *this)
{
  *(void *)this = &unk_1F0A1C6C8;
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100]((void *)this + 11);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100]((void *)this + 14);
  kaldi::quasar::CEFusedAcousticEncoder::AttemptComputeEngineUpgrade(*((kaldi::quasar::CEFusedAcousticEncoder **)this + 8));
  OsymsName = (void *)quasar::PMBuilder::getOsymsName(*((quasar::PMBuilder **)this + 8));
  (*(void (**)(void))(*(void *)*OsymsName + 136))(*OsymsName);
  uint64_t v9 = (void **)((char *)this + 112);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)((char *)this + 88);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 72))(v6);
  }
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 72))(v7);
  }
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 72))(v8);
  }
}

{
  uint64_t vars8;

  kaldi::GasrEncoderBase::~GasrEncoderBase(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::GasrEncoderBase::PrepareFeature(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v48 = kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
  if (*(int *)(a1 + 48) >= 1)
  {
    int v6 = kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    unsigned int v48 = v6 - kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
  }
  LODWORD(v43[0]) = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 8))(*(void *)(a1 + 56));
  v41[0] = 1;
  std::allocate_shared[abi:ne180100]<kaldi::Matrix<float>,std::allocator<kaldi::Matrix<float>>,int &,int,kaldi::MatrixResizeType,void>(&v48, (unsigned int *)v43, v41, &v46);
  kaldi::Matrix<float>::Swap(*(uint64_t **)a2, v46);
  uint64_t v7 = *(uint64_t (****)(void, _OWORD *))(a1 + 56);
  long long v8 = *(_OWORD *)(a2 + 16);
  v45[0] = *(_OWORD *)a2;
  v45[1] = v8;
  v45[2] = *(_OWORD *)(a2 + 32);
  uint64_t v9 = (**v7)(v7, v45);
  kaldi::Matrix<float>::Swap(*(uint64_t **)a2, v46);
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)v46))
  {
    if (!*(_DWORD *)(a1 + 48))
    {
      int v10 = kaldi::MatrixBase<float>::NumRows((uint64_t)v46);
      int v11 = *(_DWORD *)(a1 + 52);
      if (v10 > v11)
      {
        int v12 = v46;
        int v13 = kaldi::MatrixBase<float>::NumRows((uint64_t)v46);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v41, (uint64_t)v12, v11, v13 - *(_DWORD *)(a1 + 52), 0, *((_DWORD *)v12 + 2));
        kaldi::CuMatrix<float>::CuMatrix<float>(v43, v41, 111, 0);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v41);
        uint64_t v14 = (int32x2_t *)v46;
        uint64_t v15 = v44;
        uint64_t v16 = kaldi::MatrixBase<float>::NumCols((uint64_t)v46);
        kaldi::Matrix<float>::Resize(v14, v15, v16, 1, 0);
        kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v43, (int *)v46, 111);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v43);
      }
    }
    uint64_t v17 = *(int32x2_t **)(a2 + 16);
    uint64_t v18 = kaldi::MatrixBase<float>::NumRows((uint64_t)v46);
    uint64_t v19 = kaldi::MatrixBase<float>::NumCols((uint64_t)v46);
    kaldi::Matrix<float>::Resize(v17, v18, v19, 1, 0);
    int v20 = kaldi::MatrixBase<float>::CopyFromMat<float>(*(int **)(a2 + 16), (int *)v46, 111);
    if ((kaldi::GasrEncoderBase::IsFinite((uint64_t)v20, (uint64_t)v46) & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"IsFinite(*feats)", 16);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43);
    }
    *a3 = 0;
    signed int v21 = kaldi::MatrixBase<float>::NumRows((uint64_t)v46);
    if (*(int *)(a1 + 48) < 1) {
      int v22 = 0;
    }
    else {
      int v22 = *(_DWORD *)(a1 + 52);
    }
    if (v21 > (int)(v22 + v48))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"feats->NumRows() <= size_to_fetch + (batch_num_ > 0 ? num_overlap_frames_ : 0)", 78);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43);
    }
    if ((kaldi::quasar::CEFusedAcousticEncoder::FlexibleInputSizeIsAllowed(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)) & 1) == 0)
    {
      unsigned int v23 = v48;
      int v24 = v23 - kaldi::MatrixBase<float>::NumRows((uint64_t)v46);
      int v25 = *(int *)(a1 + 48) < 1 ? 0 : *(_DWORD *)(a1 + 52);
      *a3 = v25 + v24;
      kaldi::handleStrictBatchOps((int32x2_t *)v46, v25 + v24, *(unsigned char *)(a1 + 16), 0);
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v43, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Torch model doesn't pad", 23);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v43);
      }
    }
    if (*a3 >= 1 && kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v43, 4);
      int v26 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" frames are padded to enforce strict batch size", 47);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v43);
    }
    int32x2_t v27 = v46;
    if (kaldi::quasar::CEFusedAcousticEncoder::FlexibleInputSizeIsAllowed(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)))
    {
      int v28 = 0;
    }
    else
    {
      int v29 = kaldi::MatrixBase<float>::NumRows((uint64_t)v46);
      int v28 = v29
          - kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    }
    if (kaldi::quasar::CEFusedAcousticEncoder::FlexibleInputSizeIsAllowed(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64))) {
      int v30 = kaldi::MatrixBase<float>::NumRows((uint64_t)v46);
    }
    else {
      int v30 = kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    }
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v42, (uint64_t)v27, v28, v30, 0, *((_DWORD *)v27 + 2));
    kaldi::CuMatrix<float>::CuMatrix<float>(v41, v42, 111, 0);
    if (kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v43, 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Conformer input shape (", 23);
      int v31 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
      int32x2_t v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)")", 1);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v43);
    }
    uint64_t v33 = *(void *)(a1 + 64);
    uint64_t v34 = *(kaldi::quasar::ComputeEngineBufferItf **)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    BOOL v40 = v34;
    kaldi::quasar::CEFusedAcousticEncoder::CreateFeatures(v33, (uint64_t)v41, &v40, v43);
    uint64_t v35 = v43[0];
    v43[0] = 0;
    uint64_t v36 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v35;
    if (v36)
    {
      (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
      int v37 = v43[0];
      v43[0] = 0;
      if (v37) {
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v37 + 8))(v37);
      }
    }
    int v38 = v40;
    BOOL v40 = 0;
    if (v38) {
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v38 + 8))(v38);
    }
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v41);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v42);
  }
  else
  {
    kaldi::Matrix<float>::Resize(*(int32x2_t **)a2, 0, 0, 0, 0);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  return v9;
}

void sub_1B207C434(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::GasrEncoderBase::IsFinite(uint64_t a1, uint64_t a2)
{
  if ((int)kaldi::MatrixBase<float>::NumRows(a2) < 1) {
    return 1;
  }
  int v3 = 0;
  while ((int)kaldi::MatrixBase<float>::NumCols(a2) < 1)
  {
LABEL_7:
    if (++v3 >= (int)kaldi::MatrixBase<float>::NumRows(a2)) {
      return 1;
    }
  }
  uint64_t v4 = 0;
  while ((*(_DWORD *)(*(void *)a2 + 4 * v3 * *(_DWORD *)(a2 + 16) + 4 * v4) & 0x7FFFFFFFu) < 0x7F800000)
  {
    if (++v4 >= (int)kaldi::MatrixBase<float>::NumCols(a2)) {
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t kaldi::GasrEncoderBase::Compute(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int32x2_t **)a2;
  int v26 = 0;
  long long v5 = *(_OWORD *)(a2 + 16);
  v25[0] = *(_OWORD *)a2;
  v25[1] = v5;
  v25[2] = *(_OWORD *)(a2 + 32);
  uint64_t v6 = kaldi::GasrEncoderBase::PrepareFeature(a1, (uint64_t)v25, &v26);
  if (kaldi::MatrixBase<float>::NumRows(*(void *)(a2 + 16)))
  {
    int v7 = v26;
    int v8 = kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactor(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    if ((int)kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)) > *(_DWORD *)(a1 + 52))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v22, "nnet_->FrameOverlap() <= num_overlap_frames_");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v22);
    }
    int v9 = v7 / v8;
    if (v9 >= 1 && kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v22, 4);
      int v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" rows will be removed from output because input is padded", 57);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v22);
    }
    if ((kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMask(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)) & 0x80000000) == 0)
    {
      int v12 = *(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64);
      IndexOfMasint k = kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMask(v12);
      kaldi::quasar::CEFusedAcousticEncoder::FillMask((uint64_t)v12, (void *)(*(void *)(a1 + 88) + 8 * IndexOfMask), v9, 0, 0);
    }
    long long v19 = 0u;
    long long v20 = 0u;
    int32x2_t v18 = (int32x2_t)&unk_1F0A51768;
    char v21 = 0;
    uint64_t v14 = *(void *)(a1 + 64);
    int v22 = 0;
    kaldi::quasar::CEFusedAcousticEncoder::Encode(v14, (uint64_t *)(a1 + 80), (uint64_t *)&v22, (uint64_t *)(a1 + 88), &v18, 0, 0, 0, 0, (uint64_t **)(a1 + 112));
    uint64_t v15 = v22;
    int v22 = 0;
    if (v15) {
      (*(void (**)(void *))(*(void *)v15 + 8))(v15);
    }
    kaldi::Matrix<float>::Resize(v4, (HIDWORD(v19) - v9), DWORD2(v19), 1, 0);
    DWORD2(v23) = DWORD2(v19);
    HIDWORD(v23) = HIDWORD(v19) - v9;
    long long v24 = v20;
    int v22 = &unk_1F0A472A0;
    *(void *)&long long v23 = v19;
    kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v22, (int *)v4, 111);
    int v22 = &unk_1F0A472A0;
    long long v23 = 0u;
    long long v24 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
    if ((kaldi::GasrEncoderBase::IsFinite(v16, (uint64_t)v4) & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"IsFinite(*output)", 17);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v22);
    }
    ++*(_DWORD *)(a1 + 48);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v18);
  }
  else
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
  }
  return v6;
}

void kaldi::SpeechActivityDetector::SpeechActivityDetector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, char a7)
{
  *(void *)a1 = &unk_1F0A1C738;
  *(void *)(a1 + 8) = a2;
  uint64_t v7 = a5[1];
  *(void *)(a1 + 16) = *a5;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 32) = a7;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  operator new();
}

void sub_1B207C90C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A1C4059E20CA8);
  uint64_t v4 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 72))(v4);
  }
  long long v5 = *(std::__shared_weak_count **)(v1 + 24);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::SpeechActivityDetector::FrameDurationMs(kaldi::SpeechActivityDetector *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t kaldi::SpeechActivityDetector::FrameDurationMsForAlignment(kaldi::SpeechActivityDetector *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

uint64_t kaldi::SpeechActivityDetector::Compute(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  v29[0] = *(_OWORD *)a2;
  v29[1] = v4;
  uint64_t v7 = *(int32x2_t **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v8 = *(uint64_t (****)(void, _OWORD *))(a1 + 40);
  v29[2] = v5;
  uint64_t v9 = (**v8)(v8, v29);
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)v7))
  {
    if ((int)kaldi::MatrixBase<float>::NumCols((uint64_t)v7) >= 2)
    {
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v26, (uint64_t)v7, 0, v7[1].i32[1], 1, 1);
      kaldi::CuMatrix<float>::CuMatrix<float>(v27, v26, 111, 0);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v26);
      uint64_t v10 = kaldi::MatrixBase<float>::NumRows((uint64_t)v7);
      kaldi::Matrix<float>::Resize(v7, v10, 1, 1, 0);
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v27, (int *)v7, 111);
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v27);
    }
    kaldi::Matrix<float>::Swap((uint64_t *)v6, (uint64_t *)v7);
    uint64_t v11 = kaldi::MatrixBase<float>::NumRows(*(void *)(a2 + 16));
    if (*(unsigned char *)(a1 + 32))
    {
      if (v9) {
        uint64_t v11 = v11
      }
            - kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 16));
      uint64_t v12 = kaldi::MatrixBase<float>::NumCols(*(void *)(a2 + 16));
      kaldi::Matrix<float>::Resize(v7, v11, v12, 1, 0);
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v27, *(void *)(a2 + 16), 0, v11, 0, *(_DWORD *)(*(void *)(a2 + 16) + 8));
      kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v7, v27, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v27);
      uint64_t v13 = kaldi::MatrixBase<float>::NumRows((uint64_t)v7);
      int v14 = kaldi::MatrixBase<float>::NumRows(v6);
      if (v13 != v14)
      {
        int v15 = v14;
        kaldi::Matrix<float>::Matrix(v27, v6);
        kaldi::Matrix<float>::Resize((int32x2_t *)v6, v13, 1, 1, 0);
        if ((int)v13 >= 1)
        {
          uint64_t v16 = 0;
          uint64_t v17 = *(void *)v27;
          int v18 = v28;
          long long v19 = *(_DWORD **)v6;
          uint64_t v20 = 4 * *(int *)(v6 + 16);
          do
          {
            float v21 = (float)(int)v16 / (float)((int)v13 / v15);
            if (v21 > (float)(v15 - 1)) {
              float v21 = (float)(v15 - 1);
            }
            *long long v19 = *(_DWORD *)(v17 + 4 * v18 * (int)v21);
            ++v16;
            long long v19 = (_DWORD *)((char *)v19 + v20);
          }
          while (v13 != v16);
        }
        kaldi::Matrix<float>::~Matrix((uint64_t)v27);
      }
    }
    else
    {
      if (*(int *)(a1 + 48) >= 1) {
        uint64_t v11 = v11
      }
            - kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 16));
      uint64_t v22 = kaldi::MatrixBase<float>::NumCols(*(void *)(a2 + 16));
      kaldi::Matrix<float>::Resize(v7, v11, v22, 1, 0);
      uint64_t v23 = *(void *)(a2 + 16);
      int v24 = kaldi::MatrixBase<float>::NumRows(v23);
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v27, v23, v24 - v11, v11, 0, *(_DWORD *)(v23 + 8));
      kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v7, v27, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v27);
    }
    kaldi::MatrixBase<float>::ApplyExp(v6);
    ++*(_DWORD *)(a1 + 48);
  }
  return v9;
}

void sub_1B207CC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SpeechActivityDetector::Dim(kaldi::SpeechActivityDetector *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 8))();
}

uint64_t kaldi::SpeechActivityDetector::HasSilencePosterior(kaldi::SpeechActivityDetector *this)
{
  return 1;
}

uint64_t kaldi::AmFusionEncoderInput::DecideFrameOverlap(kaldi::quasar::CEFusedAcousticEncoder **this)
{
  uint64_t v2 = kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(this[8]);
  int v3 = this[18];
  if (!v3 || (int)kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(v3) <= (int)v2) {
    return v2;
  }
  long long v4 = this[18];
  return kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(v4);
}

void kaldi::AmFusionEncoderInput::AmFusionEncoderInput(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6, void *a7)
{
}

{
  kaldi::AmFusionEncoderInput::AmFusionEncoderInput(a1, a2, a3, a4, a5, a6, a7);
}

void sub_1B207D0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  float v21 = *v19;
  if (*v19)
  {
    *((void *)v17 + 30) = v21;
    operator delete(v21);
  }
  std::string __p = v18 + 5;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v22 = *((void *)v17 + 21);
  *((void *)v17 + 21) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *v18;
  uint64_t *v18 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  int v24 = (std::__shared_weak_count *)*((void *)v17 + 19);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  kaldi::GasrEncoderBase::~GasrEncoderBase(v17);
  _Unwind_Resume(a1);
}

uint64_t kaldi::AmFusionEncoderInput::HasSilencePosterior(kaldi::AmFusionEncoderInput *this)
{
  if (*((unsigned char *)this + 140)) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(void))(**((void **)this + 7) + 40))();
  }
}

uint64_t kaldi::AmFusionEncoderInput::HasEndpointerScore(kaldi::AmFusionEncoderInput *this)
{
  if (*((unsigned char *)this + 141)) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(void))(**((void **)this + 7) + 48))();
  }
}

uint64_t kaldi::AmFusionEncoderInput::FrameDurationMsForAlignment(kaldi::AmFusionEncoderInput *this)
{
  uint64_t v2 = (kaldi::quasar::CEFusedAcousticEncoder *)*((void *)this + 18);
  if (v2) {
    int v3 = kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactor(v2);
  }
  else {
    int v3 = kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactorFusion(*((kaldi::quasar::CEFusedAcousticEncoder **)this
  }
                                                                             + 8));
  return (*(unsigned int (**)(void))(**((void **)this + 7) + 32))(*((void *)this + 7)) * v3;
}

void kaldi::AmFusionEncoderInput::~AmFusionEncoderInput(kaldi::AmFusionEncoderInput *this)
{
  *(void *)this = &unk_1F0A47E18;
  uint64_t v2 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100]((void *)this + 22);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100]((void *)this + 25);
  int v3 = (kaldi::quasar::CEFusedAcousticEncoder *)*((void *)this + 18);
  if (v3)
  {
    kaldi::quasar::CEFusedAcousticEncoder::AttemptComputeEngineUpgrade(v3);
    OsymsName = (void *)quasar::PMBuilder::getOsymsName(*((quasar::PMBuilder **)this + 18));
    (*(void (**)(void))(*(void *)*OsymsName + 136))(*OsymsName);
  }
  long long v5 = (void *)*((void *)this + 29);
  if (v5)
  {
    *((void *)this + 30) = v5;
    operator delete(v5);
  }
  uint64_t v9 = (void **)((char *)this + 200);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)((char *)this + 176);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v6 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  int v8 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  kaldi::GasrEncoderBase::~GasrEncoderBase(this);
}

{
  uint64_t vars8;

  kaldi::AmFusionEncoderInput::~AmFusionEncoderInput(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::AmFusionEncoderInput::PrepareFeature(uint64_t a1, _OWORD *a2, int *a3)
{
  long long v5 = a2[1];
  v23[0] = *a2;
  v23[1] = v5;
  v23[2] = a2[2];
  uint64_t v6 = kaldi::GasrEncoderBase::PrepareFeature(a1, (uint64_t)v23, a3);
  if (*(void *)(a1 + 144))
  {
    uint64_t v7 = *((void *)a2 + 2);
    int v8 = kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    int v9 = v8
       - kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64))
       + *(_DWORD *)(a1 + 52);
    int v10 = kaldi::MatrixBase<float>::NumRows(v7);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v21, v7, v10 - v9, v9, 0, *(_DWORD *)(v7 + 8));
    kaldi::CuMatrix<float>::CuMatrix<float>(v22, v21, 111, 0);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v21);
    if (kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v21, 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"RFDNN input shape (", 19);
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
      uint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)")", 1);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v21);
    }
    uint64_t v13 = *(void *)(a1 + 144);
    int v14 = *(kaldi::quasar::ComputeEngineBufferItf **)(a1 + 160);
    *(void *)(a1 + 160) = 0;
    uint64_t v20 = v14;
    kaldi::quasar::CEFusedAcousticEncoder::CreateFeatures(v13, (uint64_t)v22, &v20, v21);
    int v15 = v21[0];
    v21[0] = 0;
    uint64_t v16 = *(void *)(a1 + 160);
    *(void *)(a1 + 160) = v15;
    if (v16)
    {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      uint64_t v17 = v21[0];
      v21[0] = 0;
      if (v17) {
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v17 + 8))(v17);
      }
    }
    int v18 = v20;
    uint64_t v20 = 0;
    if (v18) {
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v18 + 8))(v18);
    }
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v22);
  }
  return v6;
}

void sub_1B207D64C(_Unwind_Exception *a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t kaldi::AmFusionEncoderInput::Compute(uint64_t a1, uint64_t a2)
{
  long long v4 = *(int32x2_t **)a2;
  long long v5 = *(int32x2_t **)(a2 + 8);
  uint64_t v6 = *(int32x2_t **)(a2 + 24);
  uint64_t v7 = *(int32x2_t **)(a2 + 32);
  int v8 = *(int32x2_t **)(a2 + 40);
  kaldi::Matrix<float>::Matrix((uint64_t)v109);
  int v108 = 0;
  long long v9 = *(_OWORD *)(a2 + 16);
  v107[0] = *(_OWORD *)a2;
  v107[1] = v9;
  v107[2] = *(_OWORD *)(a2 + 32);
  uint64_t v10 = kaldi::AmFusionEncoderInput::PrepareFeature(a1, v107, &v108);
  if (kaldi::MatrixBase<float>::NumRows(*(void *)(a2 + 16)))
  {
    int v11 = v108;
    int v12 = kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactor(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    if ((int)kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)) > *(_DWORD *)(a1 + 52))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"nnet_->FrameOverlap() <= num_overlap_frames_", 44);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v104);
    }
    uint64_t v83 = (uint64_t)v4;
    int v13 = v11 / v12;
    if (v13 >= 1 && kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104, 4);
      int v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" rows will be removed from output because input is padded", 57);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104);
    }
    unsigned int v81 = v10;
    int v82 = v11;
    if (kaldi::quasar::CEFusedAcousticEncoder::HasRfdnnOut(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)))
    {
      int v16 = v11
          / (int)kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactorFusion(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
      if (v16 >= 1 && kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104, 4);
        uint64_t v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" rows will be removed from am-fusion feature because input is padded", 68);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104);
      }
    }
    else
    {
      int v16 = 0;
    }
    if ((kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMask(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)) & 0x80000000) == 0)
    {
      long long v19 = *(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64);
      IndexOfMasint k = kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMask(v19);
      kaldi::quasar::CEFusedAcousticEncoder::FillMask((uint64_t)v19, (void *)(*(void *)(a1 + 88) + 8 * IndexOfMask), v13, 0, 0);
    }
    if ((kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMaskFusion(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)) & 0x80000000) == 0)
    {
      float v21 = *(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64);
      int IndexOfMaskFusion = kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMaskFusion(v21);
      kaldi::quasar::CEFusedAcousticEncoder::FillMask((uint64_t)v21, (void *)(*(void *)(a1 + 88) + 8 * IndexOfMaskFusion), v16, 0, 0);
    }
    if (kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104, 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"masks are filled", 16);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104);
    }
    long long v102 = 0u;
    long long v101 = 0u;
    int32x2_t v100 = (int32x2_t)&unk_1F0A51768;
    char v103 = 0;
    long long v98 = 0u;
    long long v97 = 0u;
    int32x2_t v96 = (int32x2_t)&unk_1F0A51768;
    char v99 = 0;
    long long v93 = 0u;
    long long v94 = 0u;
    int32x2_t v92 = (int32x2_t)&unk_1F0A51768;
    char v95 = 0;
    long long v89 = 0u;
    long long v90 = 0u;
    int32x2_t v88 = (int32x2_t)&unk_1F0A51768;
    char v91 = 0;
    long long v85 = 0u;
    long long v86 = 0u;
    int32x2_t v84 = (int32x2_t)&unk_1F0A51768;
    char v87 = 0;
    kaldi::quasar::CEFusedAcousticEncoder::Encode(*(void *)(a1 + 64), (uint64_t *)(a1 + 80), (uint64_t *)(a1 + 168), (uint64_t *)(a1 + 88), &v100, &v96, &v92, &v88, &v84, (uint64_t **)(a1 + 112));
    kaldi::Matrix<float>::Resize(v4, (HIDWORD(v101) - v13), DWORD2(v101), 1, 0);
    DWORD2(v105) = DWORD2(v101);
    HIDWORD(v105) = HIDWORD(v101) - v13;
    long long v106 = v102;
    std::string v104 = &unk_1F0A472A0;
    *(void *)&long long v105 = v101;
    kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v104, (int *)v4, 111);
    std::string v104 = &unk_1F0A472A0;
    long long v105 = 0u;
    long long v106 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v104);
    if ((kaldi::GasrEncoderBase::IsFinite(v23, (uint64_t)v4) & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"IsFinite(*output)", 17);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v104);
    }
    uint64_t v24 = (uint64_t)v4;
    BOOL HasRfdnnOut = kaldi::quasar::CEFusedAcousticEncoder::HasRfdnnOut(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    if (v6) {
      BOOL v26 = HasRfdnnOut;
    }
    else {
      BOOL v26 = 0;
    }
    if (v26)
    {
      kaldi::Matrix<float>::Resize(v6, (HIDWORD(v93) - v16), DWORD2(v93), 1, 0);
      DWORD2(v105) = DWORD2(v93);
      HIDWORD(v105) = HIDWORD(v93) - v16;
      long long v106 = v94;
      std::string v104 = &unk_1F0A472A0;
      *(void *)&long long v105 = v93;
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v104, (int *)v6, 111);
      std::string v104 = &unk_1F0A472A0;
      long long v105 = 0u;
      long long v106 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v104);
      if ((kaldi::GasrEncoderBase::IsFinite(v27, (uint64_t)v6) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"IsFinite(*fusion_feat)", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v104);
      }
    }
    BOOL HasEpOut = kaldi::quasar::CEFusedAcousticEncoder::HasEpOut(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    if (v8) {
      BOOL v29 = HasEpOut;
    }
    else {
      BOOL v29 = 0;
    }
    if (v29)
    {
      kaldi::Matrix<float>::Resize(v8, (HIDWORD(v89) - v13), DWORD2(v89), 1, 0);
      DWORD2(v105) = DWORD2(v89);
      HIDWORD(v105) = HIDWORD(v89) - v13;
      long long v106 = v90;
      std::string v104 = &unk_1F0A472A0;
      *(void *)&long long v105 = v89;
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v104, (int *)v8, 111);
      std::string v104 = &unk_1F0A472A0;
      long long v105 = 0u;
      long long v106 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v104);
      if ((kaldi::GasrEncoderBase::IsFinite(v30, (uint64_t)v8) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"IsFinite(*ep_feat)", 18);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v104);
      }
    }
    if (v7)
    {
      kaldi::Matrix<float>::Resize(v7, (HIDWORD(v97) - v13), DWORD2(v97), 1, 0);
      DWORD2(v105) = DWORD2(v97);
      HIDWORD(v105) = HIDWORD(v97) - v13;
      long long v106 = v98;
      std::string v104 = &unk_1F0A472A0;
      *(void *)&long long v105 = v97;
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v104, (int *)v7, 111);
      std::string v104 = &unk_1F0A472A0;
      long long v105 = 0u;
      long long v106 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v104);
      if ((kaldi::GasrEncoderBase::IsFinite(v31, (uint64_t)v7) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"IsFinite(*aed_feat)", 19);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v104);
      }
    }
    if (*(unsigned char *)(a1 + 140) && v5)
    {
      int v32 = 0;
      uint64_t v33 = (void **)(a1 + 232);
      while (v32 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v6))
      {
        uint64_t v34 = *(int *)(a1 + 136);
        uint64_t v35 = *(void *)v6 + 4 * v6[2].i32[0] * v32;
        int v37 = *(char **)(a1 + 240);
        unint64_t v36 = *(void *)(a1 + 248);
        if ((unint64_t)v37 >= v36)
        {
          uint64_t v39 = (char *)*v33;
          uint64_t v40 = (v37 - (unsigned char *)*v33) >> 2;
          unint64_t v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v42 = v36 - (void)v39;
          if (v42 >> 1 > v41) {
            unint64_t v41 = v42 >> 1;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v41;
          }
          if (v43)
          {
            unsigned int v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 248, v43);
            uint64_t v39 = *(char **)(a1 + 232);
            int v37 = *(char **)(a1 + 240);
          }
          else
          {
            unsigned int v44 = 0;
          }
          long long v45 = &v44[4 * v40];
          *(_DWORD *)long long v45 = *(_DWORD *)(v35 + 4 * v34);
          int v38 = v45 + 4;
          while (v37 != v39)
          {
            int v46 = *((_DWORD *)v37 - 1);
            v37 -= 4;
            *((_DWORD *)v45 - 1) = v46;
            v45 -= 4;
          }
          *(void *)(a1 + 232) = v45;
          *(void *)(a1 + 240) = v38;
          *(void *)(a1 + 248) = &v44[4 * v43];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(_DWORD *)int v37 = *(_DWORD *)(v35 + 4 * v34);
          int v38 = v37 + 4;
        }
        *(void *)(a1 + 240) = v38;
        ++v32;
      }
      uint64_t v24 = v83;
      uint64_t v54 = kaldi::MatrixBase<float>::NumRows(v83);
      kaldi::Matrix<float>::Resize(v5, v54, 1, 1, 0);
      int v55 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v56 = 0;
      float v57 = (float)(v55 / (*(int (**)(uint64_t))(*(void *)a1 + 32))(a1));
      while (v56 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v5))
      {
        unint64_t v58 = (unint64_t)(float)((float)((float)(v56 + *(_DWORD *)(a1 + 224) + 1) * v57) + -1.0);
        uint64_t v59 = *(void *)(a1 + 232);
        unint64_t v60 = (*(void *)(a1 + 240) - v59) >> 2;
        if (v60 - 1 < v58) {
          unint64_t v58 = v60 - 1;
        }
        if (v60 <= v58) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        *(float *)(*(void *)v5 + 4 * v5[2].i32[0] * v56++) = expf(*(float *)(v59 + 4 * v58));
      }
    }
    else if (v5)
    {
      if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v5) >= 1)
      {
        int v47 = kaldi::MatrixBase<float>::NumRows((uint64_t)v5);
        if (v47 != kaldi::MatrixBase<float>::NumRows((uint64_t)v4))
        {
          kaldi::Matrix<float>::Matrix(&v104, v5);
          int v48 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v104);
          int v49 = kaldi::MatrixBase<float>::NumRows((uint64_t)v5);
          int v50 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
          uint64_t v51 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
          kaldi::Matrix<float>::Resize(v5, v51, 1, 1, 0);
          for (int i = 0; i < (int)kaldi::MatrixBase<float>::NumRows(v83); ++i)
          {
            unint64_t v53 = (unint64_t)(float)((float)((float)(i + 1) * (float)(v49 / v50)) + -1.0);
            if (v48 - 1 < v53) {
              LODWORD(v53) = v48 - 1;
            }
            *(_DWORD *)(*(void *)v5 + 4 * v5[2].i32[0] * i) = v104[DWORD2(v105) * (int)v53];
          }
          kaldi::Matrix<float>::~Matrix((uint64_t)&v104);
        }
      }
    }
    *(_DWORD *)(a1 + 224) += kaldi::MatrixBase<float>::NumRows(v24);
    uint64_t v61 = *(void *)(a1 + 144);
    uint64_t v10 = v81;
    if (v61 && v6)
    {
      std::string v104 = 0;
      kaldi::quasar::CEFusedAcousticEncoder::Encode(v61, (uint64_t *)(a1 + 160), (uint64_t *)&v104, (uint64_t *)(a1 + 176), &v92, 0, 0, 0, 0, (uint64_t **)(a1 + 200));
      long long v62 = v104;
      std::string v104 = 0;
      if (v62) {
        (*(void (**)(void *))(*(void *)v62 + 8))(v62);
      }
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"RFDNN output shape (", 20);
        long long v63 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)", ", 2);
        long long v64 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)")", 1);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104);
      }
      if (*(_DWORD *)(a1 + 48))
      {
        int v65 = 0;
        int v66 = *(_DWORD *)(a1 + 52) / 2;
      }
      else
      {
        int v67 = HIDWORD(v93);
        int v68 = v67
            - kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
        int v69 = *(_DWORD *)(a1 + 52);
        if (v69 >= 0) {
          int v70 = *(_DWORD *)(a1 + 52);
        }
        else {
          int v70 = v69 + 1;
        }
        int v66 = v70 >> 1;
        int v65 = v68 + (v70 >> 1);
      }
      BOOL v71 = __OFSUB__(v66, v82);
      int v72 = v66 - v82;
      if (v72 < 0 == v71) {
        int v72 = 0;
      }
      int v73 = HIDWORD(v93) + v72;
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"rfdnn_output[", 13);
        long long v74 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)":", 1);
        char v75 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"] --> fusion_feat", 17);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104);
      }
      uint64_t v76 = (v73 - v65);
      kaldi::Matrix<float>::Resize(v6, v76, DWORD2(v93), 1, 0);
      *((void *)&v105 + 1) = __PAIR64__(v76, DWORD2(v93));
      LODWORD(v106) = v94;
      DWORD1(v106) = DWORD1(v94) - v94 * v65;
      *((void *)&v106 + 1) = *((void *)&v94 + 1);
      std::string v104 = &unk_1F0A472A0;
      *(void *)&long long v105 = v93 + 4 * (int)v94 * v65;
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v104, (int *)v6, 111);
      std::string v104 = &unk_1F0A472A0;
      long long v105 = 0u;
      long long v106 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v104);
      if ((kaldi::GasrEncoderBase::IsFinite(v77, (uint64_t)v6) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"IsFinite(*fusion_feat)", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v104);
      }
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"fusion_feat shape (", 19);
        kaldi::MatrixBase<float>::NumRows((uint64_t)v6);
        long long v78 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)", ", 2);
        kaldi::MatrixBase<float>::NumCols((uint64_t)v6);
        char v79 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)")", 1);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104);
      }
    }
    ++*(_DWORD *)(a1 + 48);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v84);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v88);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v92);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v96);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v100);
  }
  else
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    if (v6) {
      char v18 = v10;
    }
    else {
      char v18 = 1;
    }
    if ((v18 & 1) == 0) {
      kaldi::Matrix<float>::Resize(v6, 0, 0, 0, 0);
    }
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v109);
  return v10;
}

void sub_1B207E4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a14);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a20);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a26);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a32);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a38);
  kaldi::Matrix<float>::~Matrix(v38 - 152);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineAcousticEncoderInput::Compute(uint64_t a1, long long *a2)
{
  long long v4 = *(int32x2_t **)a2;
  kaldi::MatrixBase<float>::NumRows(*(void *)a2);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
  uint64_t v5 = 88;
  if (*(int *)(a1 + 100) > 0) {
    uint64_t v5 = 92;
  }
  uint64_t v6 = *(unsigned int *)(a1 + v5);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
    kaldi::Matrix<float>::Resize(v4, v6, v7, 1, 0);
  }
  uint64_t v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
  kaldi::Matrix<float>::Matrix((uint64_t)v48, v8, v9, 1, 0);
  *(void *)a2 = v48;
  uint64_t v10 = *(uint64_t (****)(void))(a1 + 8);
  long long v11 = a2[2];
  long long v12 = *a2;
  long long v46 = a2[1];
  long long v47 = v11;
  long long v45 = v12;
  uint64_t v13 = (**v10)();
  if (!kaldi::MatrixBase<float>::NumRows((uint64_t)v48))
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    goto LABEL_44;
  }
  memset(&v43[1], 0, 32);
  int v14 = v43;
  v43[0] = (int32x2_t)&unk_1F0A51768;
  char v44 = 0;
  memset(&v41[1], 0, 32);
  v41[0] = (int32x2_t)&unk_1F0A51768;
  char v42 = 0;
  kaldi::CuMatrix<float>::operator=(v43, v48);
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    int v14 = v41;
    kaldi::nnet1::Nnet::Feedforward(*(uint64_t **)(a1 + 16), (uint64_t)v43, v41, -1, 0);
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v39);
  int v16 = (char *)&v43[2] + 4;
  if (v15) {
    int v16 = (char *)&v41[2] + 4;
  }
  uint64_t v17 = &v43[2];
  if (v15) {
    uint64_t v17 = &v41[2];
  }
  kaldi::Matrix<float>::Resize(v39, *(unsigned int *)v16, v17->u32[0], 1, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v14, (int *)v39, 111);
  if (*(int *)(a1 + 84) >= 1)
  {
    int v18 = kaldi::MatrixBase<float>::NumRows((uint64_t)v39);
    int v19 = *(_DWORD *)(a1 + 84);
    if (v18 > v19)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"feats_mat.NumRows() <= model_interface_size_", 44);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38);
    }
    int v20 = kaldi::MatrixBase<float>::NumRows((uint64_t)v39);
    kaldi::handleStrictBatchOps(v39, v19 - v20, *(unsigned char *)(a1 + 96), *(unsigned __int8 *)(a1 + 97));
  }
  for (int i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v39); ++i)
  {
    for (uint64_t j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v39); ++j)
    {
      int v23 = *(_DWORD *)(*(void *)v39 + 4 * i * v40 + 4 * j) & 0x7FFFFFFF;
      if (v23 >= 2139095040)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"NaN or inf in features", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38);
      }
    }
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v38, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Batch ", 6);
    kaldi::MatrixBase<float>::NumRows((uint64_t)v39);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v38);
  }
  long long v36 = 0u;
  long long v35 = 0u;
  int32x2_t v34 = (int32x2_t)&unk_1F0A51768;
  char v37 = 0;
  kaldi::CuMatrix<float>::operator=(&v34, (int *)v39);
  long long v32 = 0u;
  long long v31 = 0u;
  int32x2_t v30 = (int32x2_t)&unk_1F0A51768;
  char v33 = 0;
  kaldi::quasar::CEAcousticEncoderNet::Encode(*(void *)(a1 + 24), (void *)(a1 + 112), (uint64_t)&v34, v13 ^ 1, a1 + 112, &v30);
  if (*(unsigned char *)(a1 + 97))
  {
    float v24 = *(float *)(v31 + 4 * (int)v32 * (HIDWORD(v31) - 1));
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
    kaldi::CuMatrix<float>::Resize(&v30, (int)v24, v25, 2, 0);
  }
  ++*(_DWORD *)(a1 + 100);
  if (*(unsigned char *)(a1 + 80)) {
    kaldi::CuMatrixBase<float>::ApplyLog((uint64_t)&v30);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    if (!*(void *)(a1 + 48)) {
      goto LABEL_36;
    }
LABEL_33:
    if (*(unsigned char *)(a1 + 81) || *(unsigned char *)(a1 + 80)) {
      kaldi::nnet1::PdfPrior::SubtractOnLogpost(*(void *)(a1 + 72), (uint64_t)&v30);
    }
    goto LABEL_36;
  }
  if (*(unsigned char *)(a1 + 63)) {
    goto LABEL_33;
  }
LABEL_36:
  kaldi::Matrix<float>::Resize(v4, HIDWORD(v31), DWORD2(v31), 1, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v30, (int *)v4, 111);
  for (int k = 0; k < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v4); ++k)
  {
    for (uint64_t m = 0; m < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v4); ++m)
    {
      int v28 = *(_DWORD *)(*(void *)v4 + 4 * k * v4[2].i32[0] + 4 * m) & 0x7FFFFFFF;
      if (v28 >= 2139095040)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"NaN or inf in NNet output", 25);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38);
      }
    }
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v30);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v34);
  kaldi::Matrix<float>::~Matrix((uint64_t)v39);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v41);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v43);
LABEL_44:
  kaldi::Matrix<float>::~Matrix((uint64_t)v48);
  return v13;
}

void sub_1B207EB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1B207EB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a56);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a61);
  kaldi::CuMatrix<float>::~CuMatrix(v61 - 224);
  kaldi::Matrix<float>::~Matrix(v61 - 120);
  _Unwind_Resume(a1);
}

uint64_t kaldi::GasrEncoderBase::DecideFrameOverlap(kaldi::quasar::CEFusedAcousticEncoder **this)
{
  return kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(this[8]);
}

uint64_t kaldi::OnlineNnetForwardSkippedInput::Compute(uint64_t a1, long long *a2)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  long long v4 = *(int32x2_t **)a2;
  char v103 = (int32x2_t *)*((void *)a2 + 1);
  if (*(void *)(a1 + 88)) {
    BOOL v5 = *((void *)a2 + 1) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  BOOL v6 = !v5;
  kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
  uint64_t v7 = *(unsigned int *)(a1 + 160);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
    kaldi::Matrix<float>::Resize(v4, v7, v8, 1, 0);
  }
  uint64_t v9 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
  kaldi::Matrix<float>::Matrix((uint64_t)&v122, v9, v10, 0, 0);
  *(void *)a2 = &v122;
  long long v11 = *(uint64_t (****)(void, _OWORD *))(a1 + 8);
  long long v12 = a2[2];
  long long v13 = *a2;
  v121[1] = a2[1];
  v121[2] = v12;
  v121[0] = v13;
  uint64_t v14 = (**v11)(v11, v121);
  if (!kaldi::MatrixBase<float>::NumRows((uint64_t)&v122))
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    goto LABEL_111;
  }
  int v97 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v122);
  if (*(int *)(a1 + 160) < 1)
  {
    int v99 = 0;
  }
  else
  {
    int v15 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v122);
    int v16 = *(_DWORD *)(a1 + 160);
    if (v15 > v16)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"input.NumRows() <= strict_batch_size_", 37);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    int v99 = v16 - kaldi::MatrixBase<float>::NumRows((uint64_t)&v122);
    kaldi::handleStrictBatchOps(&v122, v99, *(unsigned char *)(a1 + 164), *(unsigned __int8 *)(a1 + 368));
  }
  for (int i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v122); ++i)
  {
    for (uint64_t j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v122); ++j)
    {
      float v19 = *(float *)(*(void *)&v122 + 4 * i * v124 + 4 * j);
      if (v19 == INFINITY)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"inf in features", 15);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
    }
  }
  *(_DWORD *)(a1 + 96) += kaldi::MatrixBase<float>::NumRows((uint64_t)&v122);
  int v20 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v122);
  int v21 = *(_DWORD *)(a1 + 104);
  unsigned int v98 = v14;
  if (v20 > v21)
  {
    int v22 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v122);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)&__p, (uint64_t)&v122, v21, v22 - *(_DWORD *)(a1 + 104), 0, v123);
    kaldi::CuMatrix<float>::CuMatrix<float>(&v115, &__p, 111, 0);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
    kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v115, *(_DWORD *)(a1 + 80) * v119);
    long long v113 = 0u;
    long long v112 = 0u;
    int v23 = &v111;
    int32x2_t v111 = (int32x2_t)&unk_1F0A51768;
    char v114 = 0;
    float v24 = *(uint64_t **)(a1 + 16);
    if (!v24) {
      int v23 = (int32x2_t *)&v115;
    }
    long long v101 = v23;
    if (v24) {
      kaldi::nnet1::Nnet::Feedforward(v24, (uint64_t)&v115, &v111, -1, 0);
    }
    uint64_t v25 = *(void *)(a1 + 376);
    if (v25)
    {
      uint64_t v26 = *(void *)(v25 + 40);
      uint64_t v27 = v24 ? &v111 : (int32x2_t *)&v115;
      uint64_t v28 = v27[2].i32[1];
      if (v26 + v28 <= (unint64_t)*(unsigned int *)(a1 + 392) && (int)v28 >= 1)
      {
        __int32 v29 = 0;
        if (v24) {
          int32x2_t v30 = &v111;
        }
        else {
          int32x2_t v30 = (int32x2_t *)&v115;
        }
        do
        {
          kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)&__p, 1, v30[2].u32[0], 0, 0, 0);
          long long v31 = (uint64_t *)&v116;
          if (v24) {
            long long v31 = (uint64_t *)&v112;
          }
          uint64_t v32 = *v31;
          char v33 = (long long *)&v119;
          if (v24) {
            char v33 = &v113;
          }
          int32x2_t v34 = (int *)(v32 + 4 * *(_DWORD *)v33 * v29);
          unsigned __int32 v35 = v30[2].u32[0];
          long long v36 = &v120;
          if (v24) {
            long long v36 = (uint64_t *)&v113 + 1;
          }
          uint64_t v37 = *v36;
          v125.__end_ = v34;
          v125.__begin_ = (std::vector<int>::pointer)&unk_1F0A472D0;
          v125.__end_cap_.__value_ = (int *)v35;
          uint64_t v126 = v37;
          kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)&__p, (uint64_t)&v125);
          std::deque<kaldi::CuMatrix<float>>::push_back(*(void **)(a1 + 376), (uint64_t)&__p);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
          ++v29;
        }
        while (v29 < v27[2].i32[1]);
      }
    }
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Batch ", 6);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    if (v6)
    {
      uint64_t v38 = *(const void **)(a1 + 24);
      if (!v38
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Must use penultimate-compatible AM with silence nnet", 52);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      int v40 = v39;
      unint64_t v41 = *(std::__shared_weak_count **)(a1 + 32);
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, int32x2_t *, uint64_t, uint64_t))(*(void *)v39 + 96))(v39, v101, a1 + 176, 1);
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 144))(v40, a1 + 176, a1 + 224);
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), a1 + 176, a1 + 272);
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
      BOOL v6 = 1;
      goto LABEL_71;
    }
    int v42 = *(_DWORD *)(a1 + 340);
    if (v42 || *(_DWORD *)(a1 + 336))
    {
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"There is extra input, rows=", 27);
        unint64_t v43 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", cols=", 7);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
        int v42 = *(_DWORD *)(a1 + 340);
      }
      if (v42 != 1 || (v24 ? (v44 = &v111) : (v44 = (int32x2_t *)&v115), uint64_t v45 = v44[2].u32[1], (int)v45 <= 0))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"extra_input_.NumRows() == 1 && feats.NumRows() >= 1", 51);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      if (v45 == 1)
      {
        long long v46 = operator new(8uLL);
        std::string __p = v46;
        *long long v46 = a1 + 320;
        uint64_t v108 = (uint64_t)(v46 + 1);
        unint64_t v109 = (unint64_t)(v46 + 1);
        (*(void (**)(void, int32x2_t *, void **, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v101, &__p, a1 + 224);
        if (__p)
        {
          uint64_t v108 = (uint64_t)__p;
          operator delete(__p);
        }
      }
      else
      {
        kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)&__p, v45, *(unsigned int *)(a1 + 336), 0, 0, 0);
        std::vector<int>::size_type v47 = v44[2].i32[1];
        __x[0] = 0;
        std::vector<int>::vector(&v125, v47, __x);
        kaldi::CuMatrixBase<float>::CopyRows((uint64_t)&__p, a1 + 320, &v125);
        int v48 = operator new(8uLL);
        *(void *)std::vector<unsigned int>::value_type __x = v48;
        *int v48 = &__p;
        long long v105 = v48 + 1;
        long long v106 = v48 + 1;
        (*(void (**)(void, int32x2_t *, std::vector<int>::value_type *, uint64_t))(**(void **)(a1 + 24)
                                                                                             + 32))(*(void *)(a1 + 24), v101, __x, a1 + 224);
        if (*(void *)__x)
        {
          long long v105 = *(void **)__x;
          operator delete(*(void **)__x);
        }
        if (v125.__begin_)
        {
          v125.__end_ = v125.__begin_;
          operator delete(v125.__begin_);
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
      }
      BOOL v6 = 0;
      goto LABEL_71;
    }
    long long v93 = *(const void **)(a1 + 24);
    if (v93
    {
      char v95 = v94;
      int32x2_t v96 = *(std::__shared_weak_count **)(a1 + 32);
      if (v96) {
        atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((*(uint64_t (**)(void *))(*(void *)v94 + 184))(v94))
      {
        v125.__begin_ = (std::vector<int>::pointer)(a1 + 272);
        std::vector<kaldi::CuMatrix<float> *,std::allocator<kaldi::CuMatrix<float> *>>::vector[abi:ne180100](&__p, &v125, 1uLL);
        memset(&v125, 0, sizeof(v125));
        (*(void (**)(void *, int32x2_t *, std::vector<int> *, uint64_t, void **, void))(*(void *)v95
                                                                                                  + 120))(v95, v101, &v125, a1 + 224, &__p, 0);
        if (v125.__begin_)
        {
          v125.__end_ = v125.__begin_;
          operator delete(v125.__begin_);
        }
        BOOL v6 = *(void *)(a1 + 280) != 0;
        if (__p)
        {
          uint64_t v108 = (uint64_t)__p;
          operator delete(__p);
        }
        goto LABEL_124;
      }
      long long v93 = *(const void **)(a1 + 24);
    }
    else
    {
      int32x2_t v96 = 0;
    }
    (*(void (**)(const void *, int32x2_t *, uint64_t))(*(void *)v93 + 16))(v93, v101, a1 + 224);
    BOOL v6 = 0;
LABEL_124:
    if (v96) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v96);
    }
LABEL_71:
    if (*(unsigned char *)(a1 + 84)) {
      kaldi::CuMatrixBase<float>::ApplyLog(a1 + 224);
    }
    if (*(char *)(a1 + 63) < 0)
    {
      if (!*(void *)(a1 + 48))
      {
LABEL_80:
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v111);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v115);
        goto LABEL_81;
      }
    }
    else if (!*(unsigned char *)(a1 + 63))
    {
      goto LABEL_80;
    }
    if (*(unsigned char *)(a1 + 85) || *(unsigned char *)(a1 + 84)) {
      kaldi::nnet1::PdfPrior::SubtractOnLogpost(*(void *)(a1 + 72), a1 + 224);
    }
    goto LABEL_80;
  }
LABEL_81:
  uint64_t v49 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v122);
  kaldi::Matrix<float>::Resize(v4, v49, *(unsigned int *)(a1 + 240), 0, 0);
  if (v6)
  {
    uint64_t v50 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v122);
    kaldi::Matrix<float>::Resize(v103, v50, *(unsigned int *)(a1 + 288), 1, 0);
  }
  int v51 = 0;
  int32x2_t v100 = (const void **)(a1 + 136);
  long long v102 = (const void **)(a1 + 112);
  while (v51 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v4))
  {
    int v52 = *(_DWORD *)(a1 + 104);
    int v53 = v51 - v52;
    if (v51 >= v52)
    {
      BOOL v60 = v6;
      int v61 = *(_DWORD *)(a1 + 80);
      int32x2_t v62 = *v4;
      __int32 v63 = v4[2].i32[0];
      int v64 = kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
      int v65 = v53 / v61;
      int v117 = 0;
      uint64_t v118 = 0;
      uint64_t v115 = *(void *)&v62 + 4 * v63 * v51;
      int v116 = v64;
      unsigned int v66 = *(_DWORD *)(a1 + 240);
      uint64_t v67 = *(void *)(a1 + 256);
      uint64_t v108 = *(void *)(a1 + 232) + 4 * *(_DWORD *)(a1 + 248) * v65;
      std::string __p = &unk_1F0A472D0;
      unint64_t v109 = v66;
      uint64_t v110 = v67;
      kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)&__p, (uint64_t)&v115);
      BOOL v6 = v60;
      if (v60)
      {
        int32x2_t v68 = *v103;
        __int32 v69 = v103[2].i32[0];
        int v70 = kaldi::MatrixBase<float>::NumCols((uint64_t)v103);
        int v117 = 0;
        uint64_t v118 = 0;
        uint64_t v115 = *(void *)&v68 + 4 * v69 * v51;
        int v116 = v70;
        unsigned int v71 = *(_DWORD *)(a1 + 288);
        uint64_t v72 = *(void *)(a1 + 304);
        uint64_t v108 = *(void *)(a1 + 280) + 4 * *(_DWORD *)(a1 + 296) * v65;
        std::string __p = &unk_1F0A472D0;
        unint64_t v109 = v71;
        uint64_t v110 = v72;
        kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)&__p, (uint64_t)&v115);
      }
    }
    else
    {
      int32x2_t v54 = *v4;
      __int32 v55 = v4[2].i32[0];
      unsigned int v56 = kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
      unint64_t v109 = 0;
      std::string __p = (void *)(*(void *)&v54 + 4 * v55 * v51);
      uint64_t v108 = v56;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&__p, v102);
      if (v6)
      {
        int32x2_t v57 = *v103;
        __int32 v58 = v103[2].i32[0];
        unsigned int v59 = kaldi::MatrixBase<float>::NumCols((uint64_t)v103);
        unint64_t v109 = 0;
        std::string __p = (void *)(*(void *)&v57 + 4 * v58 * v51);
        uint64_t v108 = v59;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&__p, v100);
      }
    }
    ++v51;
  }
  int v73 = 0;
  uint64_t v14 = v98;
  while (v73 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v4))
  {
    for (uint64_t k = 0; k < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v4); ++k)
    {
      float v75 = *(float *)(*(void *)v4 + 4 * v73 * v4[2].i32[0] + 4 * k);
      if (v75 == INFINITY)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"inf in NNet output", 18);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
    }
    ++v73;
  }
  if (*(unsigned char *)(a1 + 100))
  {
    int v76 = *(_DWORD *)(a1 + 104);
    if (v76 >= (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v122))
    {
      *(_DWORD *)(a1 + 104) -= kaldi::MatrixBase<float>::NumRows((uint64_t)&v122);
    }
    else
    {
      int v77 = *(_DWORD *)(a1 + 96);
      int v78 = *(_DWORD *)(a1 + 80);
      if (v77 % v78)
      {
        *(_DWORD *)(a1 + 104) = v78 - v77 % v78;
        int v79 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v122);
        int32x2_t v80 = *v4;
        __int32 v81 = v4[2].i32[0];
        uint64_t v82 = kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
        int v83 = v79 - v77 + (v77 - 1) / v78 * v78;
        unint64_t v109 = 0;
        std::string __p = (void *)(*(void *)&v80 + 4 * v81 * v83);
        uint64_t v108 = v82;
        kaldi::Vector<float>::Resize((void **)v102, v82, 1);
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)v102, (const void **)&__p);
        if (v6)
        {
          int32x2_t v84 = *v103;
          __int32 v85 = v103[2].i32[0];
          uint64_t v86 = kaldi::MatrixBase<float>::NumCols((uint64_t)v103);
          unint64_t v109 = 0;
          std::string __p = (void *)(*(void *)&v84 + 4 * v85 * v83);
          uint64_t v108 = v86;
          kaldi::Vector<float>::Resize((void **)v100, v86, 1);
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)v100, (const void **)&__p);
        }
      }
      else
      {
        *(_DWORD *)(a1 + 104) = 0;
      }
    }
  }
  if (v99 >= 1)
  {
    if (v99 + v97 != kaldi::MatrixBase<float>::NumRows((uint64_t)v4))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"orig_input_size + frames_padded == output->NumRows()", 52);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    if (v6)
    {
      int v87 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
      if (v87 != kaldi::MatrixBase<float>::NumRows((uint64_t)v103))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"output->NumRows() == sil_post->NumRows()", 40);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
    }
    int v88 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
    uint64_t v89 = kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
    kaldi::Matrix<float>::Resize(v4, (v88 - v99), v89, 2, 0);
    if (v6)
    {
      int v90 = kaldi::MatrixBase<float>::NumRows((uint64_t)v103);
      uint64_t v91 = kaldi::MatrixBase<float>::NumCols((uint64_t)v103);
      kaldi::Matrix<float>::Resize(v103, (v90 - v99), v91, 2, 0);
    }
  }
LABEL_111:
  kaldi::Matrix<float>::~Matrix((uint64_t)&v122);
  return v14;
}

void sub_1B207FC14(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_1B207FC28(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B207FC20);
}

uint64_t kaldi::OnlineAppendInput::Compute(uint64_t a1, long long *a2)
{
  long long v4 = *(int32x2_t **)a2;
  uint64_t v5 = kaldi::MatrixBase<float>::NumRows(*(void *)a2);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
  kaldi::Matrix<float>::Resize(v4, v5, v6, 1, 0);
  uint64_t v7 = *(uint64_t (****)(void))(a1 + 8);
  long long v8 = a2[1];
  long long v15 = *a2;
  long long v16 = v8;
  long long v17 = a2[2];
  uint64_t v9 = (**v7)();
  if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v4) >= 1)
  {
    uint64_t v10 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
    kaldi::Matrix<float>::Resize(v4, v10, v11, 2, 0);
    int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v14, (uint64_t)v4, 0, v4[1].i32[1], v12, *(_DWORD *)(a1 + 24));
    kaldi::MatrixBase<float>::CopyRowsFromVec(v14, (char **)(a1 + 16));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v14);
  }
  return v9;
}

void sub_1B207FDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::OnlineFeatureMatrix::GetNextFeatures(int32x2_t *this, clockid_t a2)
{
  if (!this[19].i8[4])
  {
    double Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2);
    int v4 = kaldi::MatrixBase<float>::NumRows((uint64_t)&this[4]);
    this[19].i8[5] = v4 != 0;
    memset(v53, 0, 24);
    memset(v52, 0, sizeof(v52));
    memset(v51, 0, sizeof(v51));
    if (v4)
    {
      int v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)&this[4]);
      int32x2_t v6 = this[4];
      __int32 v7 = this[6].i32[0];
      uint64_t v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)&this[4]);
      v44[0] = 0;
      uint64_t v42 = *(void *)&v6 + 4 * v7 * (v5 - 1);
      uint64_t v43 = v8;
      kaldi::Vector<float>::Resize((void **)v53, v8, 1);
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)v53, (const void **)&v42);
      if (this[21].i8[1])
      {
        int v9 = kaldi::MatrixBase<float>::NumRows((uint64_t)&this[9]);
        int32x2_t v10 = this[9];
        __int32 v11 = this[11].i32[0];
        uint64_t v12 = kaldi::MatrixBase<float>::NumCols((uint64_t)&this[9]);
        v44[0] = 0;
        uint64_t v42 = *(void *)&v10 + 4 * v11 * (v9 - 1);
        uint64_t v43 = v12;
        kaldi::Vector<float>::Resize((void **)v52, v12, 1);
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)v52, (const void **)&v42);
      }
      if (this[21].i8[0])
      {
        int v13 = kaldi::MatrixBase<float>::NumRows((uint64_t)&this[14]);
        int32x2_t v14 = this[14];
        __int32 v15 = this[16].i32[0];
        uint64_t v16 = kaldi::MatrixBase<float>::NumCols((uint64_t)&this[14]);
        v44[0] = 0;
        uint64_t v42 = *(void *)&v14 + 4 * v15 * (v13 - 1);
        uint64_t v43 = v16;
        kaldi::Vector<float>::Resize((void **)v51, v16, 1);
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)v51, (const void **)&v42);
      }
    }
    while (1)
    {
      kaldi::Matrix<float>::Matrix((uint64_t)v50, this[1].u32[0], this[3].u32[0], 0, 0);
      kaldi::Matrix<float>::Matrix((uint64_t)v49);
      kaldi::Matrix<float>::Matrix((uint64_t)v48);
      kaldi::Matrix<float>::Matrix((uint64_t)v47);
      kaldi::Matrix<float>::Matrix((uint64_t)v46);
      v17.n128_f64[0] = kaldi::Matrix<float>::Matrix((uint64_t)v45);
      int v18 = (uint64_t (***)(__n128))this[2];
      v44[33] = v50;
      v44[34] = v49;
      v44[35] = v48;
      v44[36] = v47;
      v44[37] = v46;
      v44[38] = v45;
      this[19].i8[4] = (**v18)(v17) ^ 1;
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"receive am-fusion feature (", 27);
        kaldi::MatrixBase<float>::NumRows((uint64_t)v47);
        float v19 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", ", 2);
        kaldi::MatrixBase<float>::NumCols((uint64_t)v47);
        int v20 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42);
      }
      if (kaldi::MatrixBase<float>::NumRows((uint64_t)v47)
        && kaldi::MatrixBase<float>::NumCols((uint64_t)v47))
      {
        kaldi::Matrix<float>::Matrix((uint64_t)&v42);
        std::deque<kaldi::Matrix<float>>::emplace_back<kaldi::Matrix<float>>(&this[55], (uint64_t)&v42);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v42);
        unint64_t v21 = *(void *)&this[60] + *(void *)&this[59] - 1;
        kaldi::Matrix<float>::Swap((uint64_t *)(*(void *)(*(void *)&this[56] + 8 * (v21 / 0x66)) + 40 * (v21 % 0x66)), v47);
      }
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"receive AED states (", 20);
        kaldi::MatrixBase<float>::NumRows((uint64_t)v46);
        int v22 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
        kaldi::MatrixBase<float>::NumCols((uint64_t)v46);
        int v23 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)")", 1);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42);
      }
      if (kaldi::MatrixBase<float>::NumRows((uint64_t)v46)
        && kaldi::MatrixBase<float>::NumCols((uint64_t)v46))
      {
        kaldi::Matrix<float>::Matrix((uint64_t)&v42);
        std::deque<kaldi::Matrix<float>>::push_back(&this[49], (uint64_t)&v42);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v42);
        unint64_t v24 = *(void *)&this[54] + *(void *)&this[53] - 1;
        kaldi::Matrix<float>::Swap((uint64_t *)(*(void *)(*(void *)&this[50] + 8 * (v24 / 0x66)) + 40 * (v24 % 0x66)), v46);
      }
      if (!this[21].i8[0])
      {
        if (!kaldi::MatrixBase<float>::NumRows((uint64_t)v49)) {
          goto LABEL_21;
        }
        if (!this[21].i8[0]) {
          goto LABEL_47;
        }
      }
      int v25 = kaldi::MatrixBase<float>::NumRows((uint64_t)v50);
      if (v25 != kaldi::MatrixBase<float>::NumRows((uint64_t)v49))
      {
LABEL_47:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"(!has_sil_post_ && next_sil_post.NumRows() == 0) || (has_sil_post_ && next_features.NumRows() == next_sil_post.NumRows())", 121);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42);
      }
LABEL_21:
      if (this[21].i8[1]) {
        goto LABEL_24;
      }
      if (kaldi::MatrixBase<float>::NumRows((uint64_t)v45))
      {
        if (!this[21].i8[1]) {
          goto LABEL_48;
        }
LABEL_24:
        int v26 = kaldi::MatrixBase<float>::NumRows((uint64_t)v50);
        if (v26 != kaldi::MatrixBase<float>::NumRows((uint64_t)v45))
        {
LABEL_48:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"(!has_endpointer_score_ && next_ep_feat.NumRows() == 0) || (has_endpointer_score_ && next_features.NumRows() == next_ep_feat.NumRows())", 135);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42);
        }
      }
      if (kaldi::MatrixBase<float>::NumRows((uint64_t)v50) || this[19].i8[4] || !this[27].i8[0])
      {
        if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v50) >= 1)
        {
          int v27 = this[19].u8[5];
          uint64_t v28 = kaldi::MatrixBase<float>::NumRows((uint64_t)v50) + v27;
          this[19].i32[0] += kaldi::MatrixBase<float>::NumRows((uint64_t)&this[4]) - this[19].u8[5];
          kaldi::Matrix<float>::Resize(this + 4, v28, this[3].u32[0], 1, 0);
          if (this[19].i8[5])
          {
            uint64_t v29 = (uint64_t)this[4];
            unsigned int v30 = kaldi::MatrixBase<float>::NumCols((uint64_t)&this[4]);
            v44[0] = 0;
            uint64_t v42 = v29;
            uint64_t v43 = v30;
            kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v42, v53);
            int v31 = kaldi::MatrixBase<float>::NumRows((uint64_t)v50);
            kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v42, (uint64_t)&this[4], 1, v31, 0, this[3].i32[0]);
            kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&v42, v50, 111);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v42);
          }
          else
          {
            kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&this[4], v50, 111);
          }
          if (this[21].i8[1])
          {
            uint64_t v32 = kaldi::MatrixBase<float>::NumCols((uint64_t)v45);
            kaldi::Matrix<float>::Resize(this + 9, v28, v32, 1, 0);
            if (this[19].i8[5])
            {
              uint64_t v33 = (uint64_t)this[9];
              unsigned int v34 = kaldi::MatrixBase<float>::NumCols((uint64_t)&this[9]);
              v44[0] = 0;
              uint64_t v42 = v33;
              uint64_t v43 = v34;
              kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v42, v52);
              LODWORD(v33) = kaldi::MatrixBase<float>::NumRows((uint64_t)v45);
              int v35 = kaldi::MatrixBase<float>::NumCols((uint64_t)v45);
              kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v42, (uint64_t)&this[9], 1, v33, 0, v35);
              kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&v42, v45, 111);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v42);
            }
            else
            {
              kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&this[9], v45, 111);
            }
          }
          if (this[21].i8[0])
          {
            uint64_t v37 = kaldi::MatrixBase<float>::NumCols((uint64_t)v49);
            kaldi::Matrix<float>::Resize(this + 14, v28, v37, 1, 0);
            if (this[19].i8[5])
            {
              uint64_t v38 = (uint64_t)this[14];
              unsigned int v39 = kaldi::MatrixBase<float>::NumCols((uint64_t)&this[14]);
              v44[0] = 0;
              uint64_t v42 = v38;
              uint64_t v43 = v39;
              kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v42, v51);
              LODWORD(v38) = kaldi::MatrixBase<float>::NumRows((uint64_t)v49);
              int v40 = kaldi::MatrixBase<float>::NumCols((uint64_t)v49);
              kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v42, (uint64_t)&this[14], 1, v38, 0, v40);
              kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&v42, v49, 111);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v42);
            }
            else
            {
              kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&this[14], v49, 111);
            }
          }
          if (this[1].i8[4])
          {
            kaldi::quasar::ConvertDenseMatrixToSparseMatrixByMinimumValue<float>((uint64_t)v50, (uint64_t)&v42, -11.513);
            std::deque<kaldi::quasar::SparseMatrix<float>>::push_back(&this[43], (uint64_t)&v42);
            std::__tree<int>::destroy((uint64_t)v44, (void *)v44[1]);
          }
        }
        char v36 = 0;
      }
      else
      {
        char v36 = 1;
      }
      kaldi::Matrix<float>::~Matrix((uint64_t)v45);
      kaldi::Matrix<float>::~Matrix((uint64_t)v46);
      kaldi::Matrix<float>::~Matrix((uint64_t)v47);
      kaldi::Matrix<float>::~Matrix((uint64_t)v48);
      kaldi::Matrix<float>::~Matrix((uint64_t)v49);
      kaldi::Matrix<float>::~Matrix((uint64_t)v50);
      if ((v36 & 1) == 0)
      {
        *(double *)&this[20] = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v41) - Seconds + *(double *)&this[20];
        kaldi::Vector<float>::Destroy((uint64_t)v51);
        kaldi::Vector<float>::Destroy((uint64_t)v52);
        kaldi::Vector<float>::Destroy((uint64_t)v53);
        return;
      }
    }
  }
}

void sub_1B2080718(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(&v3);
  kaldi::Matrix<float>::~Matrix(&v4);
  kaldi::Matrix<float>::~Matrix(&v5);
  kaldi::Matrix<float>::~Matrix(&v6);
  kaldi::Matrix<float>::~Matrix(v1 - 256);
  kaldi::Matrix<float>::~Matrix(v1 - 216);
  kaldi::Vector<float>::Destroy(v1 - 176);
  kaldi::Vector<float>::Destroy(v1 - 152);
  kaldi::Vector<float>::Destroy(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t std::deque<kaldi::Matrix<float>>::emplace_back<kaldi::Matrix<float>>(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 102 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<kaldi::Matrix<float>>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  }
  kaldi::Matrix<float>::Matrix(v8, a2);
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5] + 1;
  a1[5] = v10;
  unint64_t v11 = v9 + v10;
  uint64_t v12 = a1[1];
  int v13 = (void *)(v12 + 8 * (v11 / 0x66));
  uint64_t v14 = *v13 + 40 * (v11 % 0x66);
  if (a1[2] == v12) {
    uint64_t v14 = 0;
  }
  if (v14 == *v13) {
    uint64_t v14 = *(v13 - 1) + 4080;
  }
  return v14 - 40;
}

uint64_t std::deque<kaldi::Matrix<float>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 102 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<kaldi::Matrix<float>>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  }
  uint64_t result = kaldi::Matrix<float>::Matrix(v8, a2);
  ++a1[5];
  return result;
}

uint64_t std::deque<kaldi::quasar::SparseMatrix<float>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 102 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<kaldi::quasar::SparseMatrix<float>>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  }
  uint64_t result = kaldi::quasar::SparseMatrix<float>::SparseMatrix(v8, a2);
  ++a1[5];
  return result;
}

uint64_t kaldi::quasar::ConvertDenseMatrixToSparseMatrixByMinimumValue<float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  int v6 = kaldi::MatrixBase<float>::NumRows(a1);
  int v7 = kaldi::MatrixBase<float>::NumCols(a1);
  uint64_t v8 = 0;
  *(_DWORD *)a2 = v6;
  *(_DWORD *)(a2 + 4) = v7;
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a2 + 16) = a2 + 24;
  *(_DWORD *)(a2 + 8) = (int)a3;
  *(void *)(a2 + 32) = 0;
  while (1)
  {
    uint64_t result = kaldi::MatrixBase<float>::NumRows(a1);
    if (v8 >= (int)result) {
      break;
    }
    uint64_t v10 = 0;
    uint64_t v11 = v8;
    while (v10 < (int)kaldi::MatrixBase<float>::NumCols(a1))
    {
      float v12 = *(float *)(*(void *)a1 + 4 * (int)v8 * *(_DWORD *)(a1 + 16) + 4 * v10);
      if (v12 > a3)
      {
        kaldi::quasar::SparseMatrix<float>::CheckBounds((_DWORD *)a2, v8, v10);
        *(void *)int v13 = v11;
        uint64_t v14 = v13;
        *((float *)std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>((uint64_t **)(a2 + 16), v13, (uint64_t)&std::piecewise_construct, (void **)&v14)+ 9) = v12;
      }
      ++v10;
      v11 += 0x100000000;
    }
    ++v8;
  }
  return result;
}

void sub_1B2080B20(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

BOOL kaldi::OnlineFeatureMatrix::IsValidFrame(int32x2_t *this, signed int a2, int a3)
{
  __int32 v6 = this[19].i32[0];
  int v7 = this + 4;
  if ((int)(kaldi::MatrixBase<float>::NumRows((uint64_t)&this[4]) + v6) > a2) {
    return 1;
  }
  if (!a3) {
    return this[19].i8[4] == 0;
  }
  kaldi::OnlineFeatureMatrix::GetNextFeatures(this, v8);
  __int32 v9 = this[19].i32[0];
  if ((int)(kaldi::MatrixBase<float>::NumRows((uint64_t)v7) + v9) > a2) {
    return 1;
  }
  if (this[19].i8[4]) {
    return 0;
  }
  BOOL result = 0;
  if (this[27].i8[0] && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unexpected point reached in code: ", 34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"possibly you are skipping frames?", 33);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    return 0;
  }
  return result;
}

void sub_1B2080C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::OnlineFeatureMatrix::GetFrame@<X0>(kaldi::OnlineFeatureMatrix *this@<X0>, signed int a2@<W1>, uint64_t *a3@<X8>)
{
  signed int v3 = *((_DWORD *)this + 38);
  if (v3 > a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Attempting to get a discarded frame.");
    goto LABEL_6;
  }
  int v7 = (char *)this + 32;
  if ((int)(kaldi::MatrixBase<float>::NumRows((uint64_t)this + 32) + v3) <= a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Attempt get frame without check its validity.");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  uint64_t v8 = *((void *)this + 4) + 4 * *((_DWORD *)this + 12) * (a2 - *((_DWORD *)this + 38));
  uint64_t result = kaldi::MatrixBase<float>::NumCols((uint64_t)v7);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = v8;
  *((_DWORD *)a3 + 2) = result;
  return result;
}

uint64_t kaldi::OnlineFeatureMatrix::GetAedFrame@<X0>(kaldi::OnlineFeatureMatrix *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  if (!(*(unsigned int (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "Attempting to get Aed frame when chunk size is 0");
    goto LABEL_10;
  }
  __int32 v6 = (char *)this + 264;
  if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)this + 264) < 1
    || (int)kaldi::MatrixBase<float>::NumRows((uint64_t)this + 264) <= a2)
  {
    int v9 = a2 - kaldi::MatrixBase<float>::NumRows((uint64_t)this + 264);
    int v10 = v9 / (*(int (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
    if (*((void *)this + 54) <= (unint64_t)v10)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Attempting to access all_aed_feat_list_ by index ", 49);
      uint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" while size is ", 15);
      std::ostream::operator<<();
    }
    else
    {
      uint64_t v11 = *(void *)(*((void *)this + 50) + 8 * ((*((void *)this + 53) + v10) / 0x66uLL))
          + 40 * ((*((void *)this + 53) + v10) % 0x66uLL);
      int v12 = v9 % (*(int (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
      if ((int)kaldi::MatrixBase<float>::NumRows(v11) > v12)
      {
        uint64_t v7 = *(void *)v11 + 4 * *(_DWORD *)(v11 + 16) * v12;
        uint64_t v8 = v11;
        goto LABEL_8;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Attempting to access aed_feat by row index ", 43);
      __int32 v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" while number of rows is ", 25);
      kaldi::MatrixBase<float>::NumRows(v11);
      std::ostream::operator<<();
    }
LABEL_10:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  uint64_t v7 = *((void *)this + 33) + 4 * *((_DWORD *)this + 70) * a2;
  uint64_t v8 = (uint64_t)v6;
LABEL_8:
  uint64_t result = kaldi::MatrixBase<float>::NumCols(v8);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = v7;
  *((_DWORD *)a3 + 2) = result;
  return result;
}

void sub_1B2080F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::OnlineFeatureMatrix::HasEndpointerScore(kaldi::OnlineFeatureMatrix *this)
{
  return *((unsigned __int8 *)this + 169);
}

uint64_t kaldi::OnlineFeatureMatrix::GetEndpointerScore@<X0>(kaldi::OnlineFeatureMatrix *this@<X0>, signed int a2@<W1>, uint64_t *a3@<X8>)
{
  if (!*((unsigned char *)this + 169))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Attempting to get endpointer score without providing the model output.");
    goto LABEL_8;
  }
  signed int v6 = *((_DWORD *)this + 38);
  if (v6 > a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Attempting to get a discarded frame.");
    goto LABEL_8;
  }
  uint64_t v7 = (char *)this + 72;
  if ((int)(kaldi::MatrixBase<float>::NumRows((uint64_t)this + 72) + v6) <= a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Attempt get frame without check its validity.");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  uint64_t v8 = *((void *)this + 9) + 4 * *((_DWORD *)this + 22) * (a2 - *((_DWORD *)this + 38));
  uint64_t result = kaldi::MatrixBase<float>::NumCols((uint64_t)v7);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = v8;
  *((_DWORD *)a3 + 2) = result;
  return result;
}

uint64_t kaldi::OnlineFeatureMatrix::HasSilencePosterior(kaldi::OnlineFeatureMatrix *this)
{
  return *((unsigned __int8 *)this + 168);
}

double kaldi::OnlineFeatureMatrix::GetSilencePosterior(kaldi::OnlineFeatureMatrix *this, signed int a2)
{
  if (*((unsigned char *)this + 168))
  {
    signed int v4 = *((_DWORD *)this + 38);
    if (v4 > a2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Attempting to get a discarded frame.");
    }
    else
    {
      if ((int)(kaldi::MatrixBase<float>::NumRows((uint64_t)this + 32) + v4) > a2)
      {
        LODWORD(result) = *(_DWORD *)(*((void *)this + 14)
                                    + 4 * *((_DWORD *)this + 32) * (a2 - *((_DWORD *)this + 38)));
        return result;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Attempt get frame without check its validity.");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return 0.0;
}

void kaldi::OnlineFeatureMatrix::GetCurrentBatch(uint64_t a1, int32x2_t *a2)
{
  signed int v4 = (int *)(a1 + 32);
  uint64_t v5 = kaldi::MatrixBase<float>::NumRows(a1 + 32) - *(char *)(a1 + 157);
  kaldi::Matrix<float>::Resize(a2, v5, *(unsigned int *)(a1 + 24), 1, 0);
  if (*(unsigned char *)(a1 + 157))
  {
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v6, (uint64_t)v4, 1, v5, 0, *(_DWORD *)(a1 + 24));
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)a2, v6, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v6);
  }
  else
  {
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)a2, v4, 111);
  }
}

void sub_1B2081230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::OnlineFeatureMatrix::GetCurrentBatchOffset(kaldi::OnlineFeatureMatrix *this)
{
  return *((_DWORD *)this + 38) + *((unsigned __int8 *)this + 157);
}

char *kaldi::OnlineFeatureMatrix::GetAllFeat(kaldi::OnlineFeatureMatrix *this)
{
  uint64_t v2 = (char *)this + 224;
  int v3 = *((_DWORD *)this + 56);
  signed int v4 = (int64x2_t *)((char *)this + 344);
  int v5 = *((_DWORD *)this + 57);
  unint64_t v6 = *((void *)this + 47);
  uint64_t v7 = *((void *)this + 44);
  uint64_t v8 = *((void *)this + 45);
  int v9 = (int **)(v7 + 8 * (v6 / 0x66));
  if (v8 == v7) {
    int v10 = 0;
  }
  else {
    int v10 = &(*v9)[10 * (v6 % 0x66)];
  }
  int v11 = *((_DWORD *)this + 56);
LABEL_5:
  int v12 = v10 - 1020;
  while (1)
  {
    unint64_t v13 = v8 == v7
        ? 0
        : *(void *)(v7 + 8 * ((*((void *)this + 48) + v6) / 0x66)) + 40 * ((*((void *)this + 48) + v6) % 0x66);
    if (v10 == (int *)v13) {
      break;
    }
    int v15 = *v10;
    int v14 = v10[1];
    v10 += 10;
    if (!v11) {
      int v5 = v14;
    }
    v11 += v15;
    v12 += 10;
    if (*v9 == v12)
    {
      uint64_t v16 = v9[1];
      ++v9;
      int v10 = v16;
      goto LABEL_5;
    }
  }
  kaldi::quasar::SparseMatrix<float>::Resize((uint64_t)this + 224, v11, v5, 2 * (v3 > 0));
  while (*((void *)this + 48))
  {
    kaldi::quasar::SparseMatrix<float>::Merge(v2, *(void *)(*((void *)this + 44) + 8 * (*((void *)this + 47) / 0x66uLL))+ 40 * (*((void *)this + 47) % 0x66uLL), v3);
    v3 += *(_DWORD *)(*(void *)(*((void *)this + 44) + 8 * (*((void *)this + 47) / 0x66uLL))
                    + 40 * (*((void *)this + 47) % 0x66uLL));
    std::deque<kaldi::quasar::SparseMatrix<float>>::pop_front(v4);
  }
  int v17 = *((_DWORD *)this + 122);
  if (v17 >= 1)
  {
    unsigned int v18 = *(_DWORD *)v2;
    if (*(int *)v2 >= 1)
    {
      BOOL v19 = v17 >= v18;
      unsigned int v20 = v17 - v18;
      if (v19)
      {
        unint64_t v21 = (void *)*((void *)this + 31);
        *((_DWORD *)this + 122) = v20;
        int v22 = *((_DWORD *)this + 57);
        std::__tree<int>::destroy((uint64_t)this + 240, v21);
        *((void *)this + 30) = (char *)this + 248;
        *((void *)this + 31) = 0;
        *((void *)this + 32) = 0;
        *((_DWORD *)this + 56) = 0;
        *((_DWORD *)this + 57) = v22 & ~(v22 >> 31);
      }
      else
      {
        kaldi::quasar::SparseMatrix<float>::RemoveFirstNRows((uint64_t)v2, v17);
        *((_DWORD *)this + 122) = 0;
      }
    }
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"features returned ", 18);
    int v23 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" ", 1);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v25);
  }
  return v2;
}

void sub_1B2081498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *kaldi::OnlineFeatureMatrix::GetAllAedFeat(kaldi::OnlineFeatureMatrix *this)
{
  uint64_t v1 = (char *)this + 264;
  kaldi::MergeMatricesAndRemoveRows((int64x2_t *)((char *)this + 392), (int32x2_t *)this + 33, (int *)this + 123);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"aed features returned ", 22);
    kaldi::MatrixBase<float>::NumRows((uint64_t)v1);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v3);
  }
  return v1;
}

void sub_1B2081540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::MergeMatricesAndRemoveRows(int64x2_t *a1, int32x2_t *a2, int *a3)
{
  int v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  uint64_t v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  uint64_t v7 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  unint64_t v8 = a1[2].u64[0];
  uint64_t v9 = a1->i64[1];
  uint64_t v10 = a1[1].i64[0];
  int v11 = (void *)(v9 + 8 * (v8 / 0x66));
  if (v10 == v9) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *v11 + 40 * (v8 % 0x66);
  }
  while (1)
  {
    if (v10 == v9)
    {
      unint64_t v14 = 0;
    }
    else
    {
      unint64_t v13 = a1[2].i64[1] + a1[2].i64[0];
      unint64_t v14 = *(void *)(v9 + 8 * (v13 / 0x66)) + 40 * (v13 % 0x66);
    }
    if (v12 == v14) {
      break;
    }
    unsigned int v15 = kaldi::MatrixBase<float>::NumCols(v12);
    if (v6) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = v15;
    }
    int v16 = kaldi::MatrixBase<float>::NumRows(v12);
    v12 += 40;
    if (v12 - *v11 == 4080)
    {
      uint64_t v17 = v11[1];
      ++v11;
      uint64_t v12 = v17;
    }
    uint64_t v6 = (v16 + v6);
    uint64_t v9 = a1->i64[1];
    uint64_t v10 = a1[1].i64[0];
  }
  if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)a2) < 1) {
    int v18 = 1;
  }
  else {
    int v18 = 2;
  }
  kaldi::Matrix<float>::Resize(a2, v6, v7, v18, 0);
  while (a1[2].i64[1])
  {
    int v19 = kaldi::MatrixBase<float>::NumRows(*(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x66uLL)) + 40 * (a1[2].i64[0] % 0x66uLL));
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v27, (uint64_t)a2, v5, v19, 0, a2[1].i32[0]);
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v27, (int *)(*(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x66uLL)) + 40 * (a1[2].i64[0] % 0x66uLL)), 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v27);
    v5 += kaldi::MatrixBase<float>::NumRows(*(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x66uLL)) + 40 * (a1[2].i64[0] % 0x66uLL));
    std::deque<kaldi::Matrix<float>>::pop_front(a1);
  }
  if (*a3 >= 1 && (int)kaldi::MatrixBase<float>::NumRows((uint64_t)a2) >= 1)
  {
    int v20 = *a3;
    if (v20 >= (int)kaldi::MatrixBase<float>::NumRows((uint64_t)a2))
    {
      *a3 -= kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
      uint64_t v24 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
      kaldi::Matrix<float>::Resize(a2, 0, v24, 0, 0);
    }
    else
    {
      int v21 = *a3;
      int v22 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
      double v23 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)v26, (uint64_t)a2, v21, v22 - *a3, 0, a2[1].i32[0]);
      kaldi::Matrix<float>::Matrix(v27, v26, 111, v23);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v26);
      kaldi::Matrix<float>::Swap((uint64_t *)a2, v27);
      *a3 = 0;
      kaldi::Matrix<float>::~Matrix((uint64_t)v27);
    }
  }
}

void sub_1B2081838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

char *kaldi::OnlineFeatureMatrix::GetAllFusionFeat(kaldi::OnlineFeatureMatrix *this)
{
  uint64_t v1 = (char *)this + 304;
  kaldi::MergeMatricesAndRemoveRows((int64x2_t *)((char *)this + 440), (int32x2_t *)this + 38, (int *)this + 124);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"fusion features returned ", 25);
    kaldi::MatrixBase<float>::NumRows((uint64_t)v1);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v3);
  }
  return v1;
}

void sub_1B20818FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *kaldi::OnlineFeatureMatrix::GetCachedAllFeat(kaldi::OnlineFeatureMatrix *this)
{
  if (*((void *)this + 48))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"There are features to merge.", 28);
LABEL_7:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      return kaldi::OnlineFeatureMatrix::GetAllFeat(this);
    }
    return kaldi::OnlineFeatureMatrix::GetAllFeat(this);
  }
  if (*((int *)this + 122) >= 1)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"There are features to remove.", 29);
      goto LABEL_7;
    }
    return kaldi::OnlineFeatureMatrix::GetAllFeat(this);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"features returned ", 18);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v3);
  }
  return (char *)this + 224;
}

void sub_1B20819F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *kaldi::OnlineFeatureMatrix::GetCachedAllAedFeat(kaldi::OnlineFeatureMatrix *this)
{
  if (*((void *)this + 54))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"There are AED features to merge.", 32);
LABEL_7:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      return kaldi::OnlineFeatureMatrix::GetAllAedFeat(this);
    }
    return kaldi::OnlineFeatureMatrix::GetAllAedFeat(this);
  }
  if (*((int *)this + 123) >= 1)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"There are AED features to remove.", 33);
      goto LABEL_7;
    }
    return kaldi::OnlineFeatureMatrix::GetAllAedFeat(this);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"aed features returned ", 22);
    kaldi::MatrixBase<float>::NumRows((uint64_t)this + 264);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v3);
  }
  return (char *)this + 264;
}

void sub_1B2081B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *kaldi::OnlineFeatureMatrix::GetCachedAllFusionFeat(kaldi::OnlineFeatureMatrix *this)
{
  if (*((void *)this + 60))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"There are fusion features to merge.", 35);
LABEL_7:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      return kaldi::OnlineFeatureMatrix::GetAllFusionFeat(this);
    }
    return kaldi::OnlineFeatureMatrix::GetAllFusionFeat(this);
  }
  if (*((int *)this + 124) >= 1)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"There are fusion features to remove.", 36);
      goto LABEL_7;
    }
    return kaldi::OnlineFeatureMatrix::GetAllFusionFeat(this);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"fusion features returned ", 25);
    kaldi::MatrixBase<float>::NumRows((uint64_t)this + 304);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v3);
  }
  return (char *)this + 304;
}

void sub_1B2081C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::OnlineFeatureMatrix::ResetAedFeat(kaldi::OnlineFeatureMatrix *this, int a2)
{
  int v3 = (int *)((char *)this + 492);
  *((_DWORD *)this + 123) += a2;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"aed feature cache has been reset, aed_feat_rows_to_remove_ ", 59);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v4);
  }
  kaldi::MergeMatricesAndRemoveRows((int64x2_t *)((char *)this + 392), (int32x2_t *)this + 33, v3);
}

void sub_1B2081D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::OnlineFeatureMatrix::ResetFusionFeat(kaldi::OnlineFeatureMatrix *this, int a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  *((_DWORD *)this + 1++*(_DWORD *)(result + 24) = (int)(float)((float)*((int *)this + 124)
                                       + (float)((float)a2
                                               * (float)(v4
                                                       / (*(int (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2)))));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"fusion feature cache has been reset, fusion_feat_rows_to_remove_ ", 65);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
  kaldi::MergeMatricesAndRemoveRows((int64x2_t *)((char *)this + 440), (int32x2_t *)this + 38, (int *)this + 124);
}

void sub_1B2081E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::OnlineFeatureMatrix::FrameDurationMs(kaldi::OnlineFeatureMatrix *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 24))();
}

uint64_t kaldi::OnlineFeatureMatrix::FrameDurationMsForAlignment(kaldi::OnlineFeatureMatrix *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 32))();
}

uint64_t kaldi::OnlineFeatInputItf::ChunkSize(kaldi::OnlineFeatInputItf *this)
{
  return 1;
}

uint64_t kaldi::OnlineFeatInputItf::HasSilencePosterior(kaldi::OnlineFeatInputItf *this)
{
  return 0;
}

uint64_t kaldi::OnlineFeatInputItf::HasEndpointerScore(kaldi::OnlineFeatInputItf *this)
{
  return 0;
}

uint64_t kaldi::OnlineCmvnInput::Dim(kaldi::OnlineCmvnInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 8))();
}

uint64_t kaldi::OnlineCmvnInput::FrameDurationMs(kaldi::OnlineCmvnInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t kaldi::OnlineCmvnInput::FrameDurationMsForAlignment(kaldi::OnlineCmvnInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

void kaldi::OnlineCmvnInput::~OnlineCmvnInput(kaldi::OnlineCmvnInput *this)
{
  *(void *)this = &unk_1F0A47828;
  kaldi::Vector<float>::Destroy((uint64_t)this + 112);
  kaldi::Vector<float>::Destroy((uint64_t)this + 88);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A47828;
  kaldi::Vector<float>::Destroy((uint64_t)this + 112);
  kaldi::Vector<float>::Destroy((uint64_t)this + 88);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineCacheInput::Dim(kaldi::OnlineCacheInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 8))();
}

uint64_t kaldi::OnlineCacheInput::FrameDurationMs(kaldi::OnlineCacheInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t kaldi::OnlineCacheInput::FrameDurationMsForAlignment(kaldi::OnlineCacheInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

uint64_t kaldi::OnlineCacheInput::HasSilencePosterior(kaldi::OnlineCacheInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 40))();
}

void kaldi::OnlineCacheInput::~OnlineCacheInput(kaldi::OnlineCacheInput *this)
{
  kaldi::OnlineCacheInput::~OnlineCacheInput(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1F0A47960;
  kaldi::OnlineCacheInput::Deallocate(this);
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 40));
  int v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

uint64_t kaldi::OnlineRecordedInput::Dim(kaldi::OnlineRecordedInput *this)
{
  return kaldi::MatrixBase<float>::NumCols((uint64_t)this + 16);
}

uint64_t kaldi::OnlineRecordedInput::FrameDurationMs(kaldi::OnlineRecordedInput *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t kaldi::OnlineRecordedInput::FrameDurationMsForAlignment(kaldi::OnlineRecordedInput *this)
{
  return *((unsigned int *)this + 3);
}

void kaldi::OnlineRecordedInput::~OnlineRecordedInput(kaldi::OnlineRecordedInput *this)
{
  *(void *)this = &unk_1F0A47DB0;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 16);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A47DB0;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 16);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineSpliceInput::Dim(kaldi::OnlineSpliceInput *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 1) + 8))(*((void *)this + 1));
  return (v2 + v2 * (*((_DWORD *)this + 5) + *((_DWORD *)this + 6)));
}

uint64_t kaldi::OnlineSpliceInput::FrameDurationMs(kaldi::OnlineSpliceInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t kaldi::OnlineSpliceInput::FrameDurationMsForAlignment(kaldi::OnlineSpliceInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

void kaldi::OnlineSpliceInput::~OnlineSpliceInput(kaldi::OnlineSpliceInput *this)
{
  *(void *)this = &unk_1F0A47AF0;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A47AF0;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineSpliceBatchInput::Dim(kaldi::OnlineSpliceBatchInput *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t kaldi::OnlineSpliceBatchInput::FrameDurationMs(kaldi::OnlineSpliceBatchInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 24))();
}

uint64_t kaldi::OnlineSpliceBatchInput::FrameDurationMsForAlignment(kaldi::OnlineSpliceBatchInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 32))();
}

uint64_t kaldi::OnlineSpliceBatchInput::HasSilencePosterior(kaldi::OnlineSpliceBatchInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 40))();
}

void kaldi::OnlineSpliceBatchInput::~OnlineSpliceBatchInput(kaldi::OnlineSpliceBatchInput *this)
{
  *(void *)this = &unk_1F0A48028;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 48);
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F0A48028;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 48);
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineNnetForwardInput::Dim(kaldi::OnlineNnetForwardInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 40))();
}

uint64_t kaldi::OnlineNnetForwardInput::FrameDurationMs(kaldi::OnlineNnetForwardInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t kaldi::OnlineNnetForwardInput::FrameDurationMsForAlignment(kaldi::OnlineNnetForwardInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

uint64_t kaldi::OnlineNnetForwardInput::HasSilencePosterior(kaldi::OnlineNnetForwardInput *this)
{
  if (*((void *)this + 11)) {
    return 1;
  }
  uint64_t v3 = (const void *)*((void *)this + 3);
  if (!v3) {
    return 0;
  }
  if (!v4) {
    return 0;
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v1 = (*(uint64_t (**)(void *))(*(void *)v4 + 184))(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_1B208261C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::OnlineNnetForwardInput::~OnlineNnetForwardInput(kaldi::OnlineNnetForwardInput *this)
{
  kaldi::OnlineNnetForwardInput::~OnlineNnetForwardInput(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  *(void *)this = &unk_1F0A47FC0;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 248);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 200);
  uint64_t v3 = *((void *)this + 24);
  *((void *)this + ++*(_DWORD *)(result + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 144);
  int v4 = (void *)*((void *)this + 14);
  if (v4)
  {
    *((void *)this + 15) = v4;
    operator delete(v4);
  }
  int v5 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 72))(v5);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

uint64_t kaldi::OnlineAcousticEncoderInput::Dim(kaldi::quasar::CEAcousticEncoderNet **this)
{
  return kaldi::quasar::CEAcousticEncoderNet::OutputDim(this[3]);
}

uint64_t kaldi::OnlineAcousticEncoderInput::FrameDurationMs(kaldi::OnlineAcousticEncoderInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t kaldi::OnlineAcousticEncoderInput::FrameDurationMsForAlignment(kaldi::OnlineAcousticEncoderInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

uint64_t kaldi::OnlineAcousticEncoderInput::HasSilencePosterior(kaldi::OnlineAcousticEncoderInput *this)
{
  return 0;
}

void kaldi::OnlineAcousticEncoderInput::~OnlineAcousticEncoderInput(kaldi::OnlineAcousticEncoderInput *this)
{
  *(void *)this = &unk_1F0A48108;
  int v4 = (void **)((char *)this + 112);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  void **v4;

  *(void *)this = &unk_1F0A48108;
  int v4 = (void **)((char *)this + 112);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  MEMORY[0x1B3EA8670](this, 0x10B3C40F537EBDBLL);
}

uint64_t kaldi::OnlineNnetForwardSkippedInput::Dim(kaldi::OnlineNnetForwardSkippedInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 40))();
}

uint64_t kaldi::OnlineNnetForwardSkippedInput::FrameDurationMs(kaldi::OnlineNnetForwardSkippedInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t kaldi::OnlineNnetForwardSkippedInput::FrameDurationMsForAlignment(kaldi::OnlineNnetForwardSkippedInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

uint64_t kaldi::OnlineNnetForwardSkippedInput::HasSilencePosterior(kaldi::OnlineNnetForwardSkippedInput *this)
{
  if (*((void *)this + 11)) {
    return 1;
  }
  uint64_t v3 = (const void *)*((void *)this + 3);
  if (!v3) {
    return 0;
  }
  if (!v4) {
    return 0;
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v1 = (*(uint64_t (**)(void *))(*(void *)v4 + 184))(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_1B2082974(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::OnlineNnetForwardSkippedInput::~OnlineNnetForwardSkippedInput(kaldi::OnlineNnetForwardSkippedInput *this)
{
  kaldi::OnlineNnetForwardSkippedInput::~OnlineNnetForwardSkippedInput(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1F0A482C8;
  (*(void (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 320);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 272);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 224);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 176);
  uint64_t v3 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 136);
  kaldi::Vector<float>::Destroy((uint64_t)this + 112);
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t kaldi::OnlineAppendInput::Dim(kaldi::OnlineAppendInput *this)
{
  return *((_DWORD *)this + 6)
       + (*(unsigned int (**)(void))(**((void **)this + 1) + 8))(*((void *)this + 1));
}

uint64_t kaldi::OnlineAppendInput::FrameDurationMs(kaldi::OnlineAppendInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t kaldi::OnlineAppendInput::FrameDurationMsForAlignment(kaldi::OnlineAppendInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

void kaldi::OnlineAppendInput::~OnlineAppendInput(kaldi::OnlineAppendInput *this)
{
  *(void *)this = &unk_1F0A47A88;
  kaldi::Vector<float>::Destroy((uint64_t)this + 16);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A47A88;
  kaldi::Vector<float>::Destroy((uint64_t)this + 16);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::OnlineFeatureMatrix::~OnlineFeatureMatrix(kaldi::OnlineFeatureMatrix *this)
{
  *(void *)this = &unk_1F0A47D40;
  std::deque<kaldi::Matrix<float>>::~deque[abi:ne180100]((void *)this + 55);
  std::deque<kaldi::Matrix<float>>::~deque[abi:ne180100]((void *)this + 49);
  std::deque<kaldi::quasar::SparseMatrix<float>>::~deque[abi:ne180100]((void *)this + 43);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 304);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 264);
  std::__tree<int>::destroy((uint64_t)this + 240, *((void **)this + 31));
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 112);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 72);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A47D40;
  std::deque<kaldi::Matrix<float>>::~deque[abi:ne180100]((void *)this + 55);
  std::deque<kaldi::Matrix<float>>::~deque[abi:ne180100]((void *)this + 49);
  std::deque<kaldi::quasar::SparseMatrix<float>>::~deque[abi:ne180100]((void *)this + 43);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 304);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 264);
  std::__tree<int>::destroy((uint64_t)this + 240, *((void **)this + 31));
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 112);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 72);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineFeatureMatrix::Dim(kaldi::OnlineFeatureMatrix *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t kaldi::OnlineFeatureMatrix::ChunkSize(kaldi::OnlineFeatureMatrix *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 16))();
}

uint64_t kaldi::OnlineSubsampleFe::FrameDurationMs(kaldi::OnlineSubsampleFe *this)
{
  return *((_DWORD *)this + 4)
       * (*(unsigned int (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1));
}

uint64_t kaldi::OnlineSubsampleFe::FrameDurationMsForAlignment(kaldi::OnlineSubsampleFe *this)
{
  return *((_DWORD *)this + 4)
       * (*(unsigned int (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
}

void kaldi::OnlineSubsampleFe::~OnlineSubsampleFe(kaldi::OnlineSubsampleFe *this)
{
}

uint64_t kaldi::OnlineLdaInput::Dim(kaldi::OnlineLdaInput *this)
{
  return kaldi::MatrixBase<float>::NumRows((uint64_t)this + 32);
}

uint64_t kaldi::OnlineLdaInput::FrameDurationMs(kaldi::OnlineLdaInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t kaldi::OnlineLdaInput::FrameDurationMsForAlignment(kaldi::OnlineLdaInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

void kaldi::OnlineLdaInput::~OnlineLdaInput(kaldi::OnlineLdaInput *this)
{
  *(void *)this = &unk_1F0A47720;
  uint64_t v2 = (char *)this + 72;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 96);
  kaldi::Vector<float>::Destroy((uint64_t)v2);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A47720;
  uint64_t v2 = (char *)this + 72;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 96);
  kaldi::Vector<float>::Destroy((uint64_t)v2);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineTransformInput::Dim(kaldi::OnlineTransformInput *this)
{
  return kaldi::MatrixBase<float>::NumRows((uint64_t)this + 24);
}

uint64_t kaldi::OnlineTransformInput::FrameDurationMs(kaldi::OnlineTransformInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t kaldi::OnlineTransformInput::FrameDurationMsForAlignment(kaldi::OnlineTransformInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

void kaldi::OnlineTransformInput::~OnlineTransformInput(kaldi::OnlineTransformInput *this)
{
  *(void *)this = &unk_1F0A47EF0;
  kaldi::Vector<float>::Destroy((uint64_t)this + 64);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 24);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A47EF0;
  kaldi::Vector<float>::Destroy((uint64_t)this + 64);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 24);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineBufferingInput::Dim(kaldi::OnlineBufferingInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 8))();
}

uint64_t kaldi::OnlineBufferingInput::FrameDurationMs(kaldi::OnlineBufferingInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t kaldi::OnlineBufferingInput::FrameDurationMsForAlignment(kaldi::OnlineBufferingInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

uint64_t kaldi::OnlineBufferingInput::HasSilencePosterior(kaldi::OnlineBufferingInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 40))();
}

void kaldi::OnlineBufferingInput::~OnlineBufferingInput(kaldi::OnlineBufferingInput *this)
{
  *(void *)this = &unk_1F0A47E88;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 16);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A47E88;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 16);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlinePadInput::Dim(kaldi::OnlinePadInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 8))();
}

uint64_t kaldi::OnlinePadInput::FrameDurationMs(kaldi::OnlinePadInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t kaldi::OnlinePadInput::FrameDurationMsForAlignment(kaldi::OnlinePadInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

void kaldi::OnlinePadInput::~OnlinePadInput(kaldi::OnlinePadInput *this)
{
  *(void *)this = &unk_1F0A47788;
  kaldi::Vector<float>::Destroy((uint64_t)this + 24);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A47788;
  kaldi::Vector<float>::Destroy((uint64_t)this + 24);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineDeltaInput::Dim(kaldi::OnlineDeltaInput *this)
{
  return (*((_DWORD *)this + 6) + *((_DWORD *)this + 6) * *((_DWORD *)this + 4));
}

uint64_t kaldi::OnlineDeltaInput::FrameDurationMs(kaldi::OnlineDeltaInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t kaldi::OnlineDeltaInput::FrameDurationMsForAlignment(kaldi::OnlineDeltaInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

void kaldi::OnlineDeltaInput::~OnlineDeltaInput(kaldi::OnlineDeltaInput *this)
{
  *(void *)this = &unk_1F0A479C8;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A479C8;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::SpeechActivityDetector::~SpeechActivityDetector(kaldi::SpeechActivityDetector *this)
{
  *(void *)this = &unk_1F0A1C738;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F0A1C738;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x1B3EA8670);
}

int32x2_t kaldi::quasar::SparseMatrix<float>::Resize(uint64_t a1, int a2, int a3, int a4)
{
  if (a3 >= 1 && a2 >= 1 && a4)
  {
    if (a4 != 1 && (*(_DWORD *)a1 > a2 || *(_DWORD *)(a1 + 4) > a3))
    {
      uint64_t v7 = *(void **)(a1 + 16);
      unint64_t v8 = (void *)(a1 + 24);
      if (v7 != (void *)(a1 + 24))
      {
        do
        {
          uint64_t v9 = (void *)v7[1];
          if (*((_DWORD *)v7 + 7) < a2 && *((_DWORD *)v7 + 8) < a3)
          {
            if (v9)
            {
              do
              {
                uint64_t v12 = v9;
                uint64_t v9 = (void *)*v9;
              }
              while (v9);
            }
            else
            {
              do
              {
                uint64_t v12 = (void *)v7[2];
                BOOL v13 = *v12 == (void)v7;
                uint64_t v7 = v12;
              }
              while (!v13);
            }
          }
          else
          {
            int v11 = v7;
            if (v9)
            {
              do
              {
                uint64_t v12 = v9;
                uint64_t v9 = (void *)*v9;
              }
              while (v9);
            }
            else
            {
              do
              {
                uint64_t v12 = (void *)v11[2];
                BOOL v13 = *v12 == (void)v11;
                int v11 = v12;
              }
              while (!v13);
            }
            std::__tree<std::string>::__remove_node_pointer((uint64_t **)(a1 + 16), v7);
            operator delete(v7);
          }
          uint64_t v7 = v12;
        }
        while (v12 != v8);
      }
    }
  }
  else
  {
    unint64_t v14 = (void *)(a1 + 24);
    std::__tree<int>::destroy(a1 + 16, *(void **)(a1 + 24));
    *(void *)(a1 + 16) = a1 + 24;
    *unint64_t v14 = 0;
    *(void *)(a1 + 32) = 0;
  }
  int32x2_t result = vmax_s32((int32x2_t)__PAIR64__(a3, a2), 0);
  *(int32x2_t *)a1 = result;
  return result;
}

char *kaldi::quasar::SparseMatrix<float>::Merge(char *result, uint64_t a2, int a3)
{
  uint64_t v3 = *(void **)(a2 + 16);
  int v4 = (void *)(a2 + 24);
  if (v3 != (void *)(a2 + 24))
  {
    uint64_t v6 = result;
    uint64_t v7 = (uint64_t **)(result + 16);
    do
    {
      uint64_t v8 = *((unsigned int *)v3 + 8);
      uint64_t v9 = (*((_DWORD *)v3 + 7) + a3);
      *(void *)unint64_t v14 = v9 | (v8 << 32);
      kaldi::quasar::SparseMatrix<float>::CheckBounds(v6, v9, v8);
      int v10 = *((_DWORD *)v3 + 9);
      unsigned int v15 = v14;
      int32x2_t result = std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(v7, v14, (uint64_t)&std::piecewise_construct, (void **)&v15);
      *((_DWORD *)result + 9) = v10;
      int v11 = (void *)v3[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v3[2];
          BOOL v13 = *v12 == (void)v3;
          uint64_t v3 = v12;
        }
        while (!v13);
      }
      uint64_t v3 = v12;
    }
    while (v12 != v4);
  }
  return result;
}

uint64_t std::deque<kaldi::quasar::SparseMatrix<float>>::pop_front(int64x2_t *a1)
{
  unint64_t v2 = *(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x66uLL)) + 40 * (a1[2].i64[0] % 0x66uLL);
  std::__tree<int>::destroy(v2 + 16, *(void **)(v2 + 24));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1B255E5F0);
  return std::deque<kaldi::quasar::SparseMatrix<float>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

void kaldi::quasar::SparseMatrix<float>::RemoveFirstNRows(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)a1 - a2;
  if (*(_DWORD *)a1 <= a2)
  {
    int v12 = *(_DWORD *)(a1 + 4);
    std::__tree<int>::destroy(a1 + 16, *(void **)(a1 + 24));
    *(void *)(a1 + 16) = a1 + 24;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
    *(_DWORD *)a1 = 0;
    *(_DWORD *)(a1 + 4) = v12 & ~(v12 >> 31);
  }
  else
  {
    v15[0] = 0;
    v15[1] = 0;
    unint64_t v14 = (uint64_t *)v15;
    int v4 = *(void **)(a1 + 16);
    int v5 = (void *)(a1 + 24);
    if (v4 != (void *)(a1 + 24))
    {
      do
      {
        uint64_t v7 = *(void *)((char *)v4 + 28);
        if ((int)v7 >= a2)
        {
          int v8 = *((_DWORD *)v4 + 9);
          unint64_t v13 = v7 & 0xFFFFFFFF00000000 | (v7 - a2);
          int v16 = &v13;
          *((_DWORD *)std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(&v14, (int *)&v13, (uint64_t)&std::piecewise_construct, &v16)+ 9) = v8;
        }
        uint64_t v9 = (void *)v4[1];
        if (v9)
        {
          do
          {
            int v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            int v10 = (void *)v4[2];
            BOOL v11 = *v10 == (void)v4;
            int v4 = v10;
          }
          while (!v11);
        }
        int v4 = v10;
      }
      while (v10 != v5);
    }
    std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::swap((uint64_t *)(a1 + 16), (uint64_t)&v14);
    *(_DWORD *)a1 = v3;
    std::__tree<int>::destroy((uint64_t)&v14, v15[0]);
  }
}

void sub_1B208380C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t std::deque<kaldi::quasar::SparseMatrix<float>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x66) {
    a2 = 1;
  }
  if (v2 < 0xCC) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 102;
  }
  return v4 ^ 1u;
}

uint64_t *std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::swap(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *int32x2_t result = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v5 = result[1];
  uint64_t v4 = result[2];
  int v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  if (result[2]) {
    int32x2_t result = (uint64_t *)(*v3 + 16);
  }
  *int32x2_t result = (uint64_t)v3;
  uint64_t v6 = (void *)(*(void *)(a2 + 8) + 16);
  if (!v4) {
    uint64_t v6 = (void *)a2;
  }
  *uint64_t v6 = a2 + 8;
  return result;
}

uint64_t std::deque<kaldi::Matrix<float>>::pop_front(int64x2_t *a1)
{
  kaldi::Matrix<float>::~Matrix(*(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x66uLL)) + 40 * (a1[2].i64[0] % 0x66uLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1B255E5F0);
  return std::deque<kaldi::quasar::SparseMatrix<float>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<kaldi::Matrix<float>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    int v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x66];
    uint64_t v7 = (uint64_t)*v6 + 40 * (v5 % 0x66);
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v7 != v8)
    {
      do
      {
        uint64_t v7 = kaldi::Matrix<float>::~Matrix(v7) + 40;
        if (v7 - (void)*v6 == 4080)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v2 = (void **)a1[1];
      int v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 51;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 102;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    unint64_t v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<kaldi::quasar::SparseMatrix<float>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    int v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x66];
    unint64_t v7 = (unint64_t)*v6 + 40 * (v5 % 0x66);
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v7 != v8)
    {
      do
      {
        std::__tree<int>::destroy(v7 + 16, *(void **)(v7 + 24));
        v7 += 40;
        if (v7 - (void)*v6 == 4080)
        {
          unint64_t v9 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v2 = (void **)a1[1];
      int v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 51;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 102;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    unint64_t v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::default_delete<kaldi::Resampler>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    if (v3) {
      std::default_delete<kaldi::LinearResample>::operator()[abi:ne180100]((uint64_t)a2, v3);
    }
    JUMPOUT(0x1B3EA8670);
  }
}

void std::default_delete<kaldi::LinearResample>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    kaldi::Vector<float>::Destroy(a2 + 88);
    uint64_t v4 = (void **)(a2 + 48);
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v3 = *(void **)(a2 + 24);
    if (v3)
    {
      *(void *)(a2 + 32) = v3;
      operator delete(v3);
    }
    MEMORY[0x1B3EA8670](a2, 0x10B0C40587FD9DDLL);
  }
}

void kaldi::OnlineSpliceBatchInput::OnlineSpliceBatchInput(kaldi::OnlineSpliceBatchInput *this, kaldi::OnlineFeatInputItf *a2, int a3, int a4)
{
  *(void *)this = &unk_1F0A48028;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
  *((_DWORD *)this + 8) = (*(uint64_t (**)(kaldi::OnlineFeatInputItf *))(*(void *)a2 + 8))(a2);
  *((_DWORD *)this + 9) = a3;
  *((_DWORD *)this + 10) = a4;
  kaldi::Matrix<float>::Matrix((uint64_t)this + 48);
  if (*((int *)this + 10) >= 1) {
    operator new();
  }
  operator new();
}

void sub_1B20840D4(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;
  MEMORY[0x1B3EA8670](v5, 0x10A1C405FCE00B7);
  kaldi::Matrix<float>::~Matrix(v2);
  uint64_t v7 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 72))(v7);
  }
  uint64_t v8 = *v4;
  *uint64_t v4 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 72))(v8);
  }
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<kaldi::Matrix<float>,std::allocator<kaldi::Matrix<float>>,int &,int,kaldi::MatrixResizeType,void>@<X0>(unsigned int *a1@<X1>, unsigned int *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x40uLL);
  int32x2_t result = std::__shared_ptr_emplace<kaldi::Matrix<float>>::__shared_ptr_emplace[abi:ne180100]<int &,int,kaldi::MatrixResizeType,std::allocator<kaldi::Matrix<float>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B20841F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::Matrix<float>>::__shared_ptr_emplace[abi:ne180100]<int &,int,kaldi::MatrixResizeType,std::allocator<kaldi::Matrix<float>>,0>(void *a1, unsigned int *a2, unsigned int *a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F028;
  kaldi::Matrix<float>::Matrix((uint64_t)(a1 + 3), *a2, *a3, *a4, 0);
  return a1;
}

void sub_1B208425C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<kaldi::CuMatrix<float>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 85 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<kaldi::CuMatrix<float>>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55);
  }
  uint64_t result = kaldi::CuMatrix<float>::CuMatrix(v8, a2, 111);
  ++a1[5];
  return result;
}

void std::deque<kaldi::CuMatrix<float>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x55;
  unint64_t v4 = v2 - 85;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unsigned int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        clockid_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)clockid_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    char v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unsigned int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B20845F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<kaldi::Matrix<float>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unsigned int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        clockid_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)clockid_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    char v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unsigned int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B2084908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<kaldi::quasar::SparseMatrix<float>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unsigned int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        clockid_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)clockid_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    char v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unsigned int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B2084C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::SparseMatrix<float>::SparseMatrix(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = *(void *)a2;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  unint64_t v2 = (void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(result + ++*(_DWORD *)(result + 24) = v3;
  uint64_t v4 = result + 24;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(result + 32) = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(a2 + 16) = v2;
    *unint64_t v2 = 0;
    *(void *)(a2 + 32) = 0;
  }
  else
  {
    *(void *)(result + 16) = v4;
  }
  return result;
}

uint64_t quasar::OnlineKeywordSpottingDecoder::OnlineKeywordSpottingDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A577D8;
  *(void *)(v3 + 640) = 0;
  *(void *)(v3 + 656) = 0;
  *(void *)(v3 + 648) = 0;
  *(void *)(v3 + 696) = 0;
  *(void *)(v3 + 712) = 0;
  *(void *)(v3 + 704) = 0;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(_OWORD *)(v3 + 512) = 0u;
  *(_OWORD *)(v3 + 528) = 0u;
  *(_OWORD *)(v3 + 544) = 0u;
  *(_OWORD *)(v3 + 560) = 0u;
  *(_OWORD *)(v3 + 5--*(_DWORD *)(a9 + 76) = 0u;
  *(_OWORD *)(v3 + 592) = 0u;
  *(void *)(v3 + 608) = 0x41200000C1200000;
  *(_DWORD *)(v3 + 616) = 0;
  MEMORY[0x1B3EA7B20](v3 + 584, "<blk>");
  *(void *)(a1 + 620) = 0;
  uint64_t v4 = *(void (****)(void))(a1 + 648);
  uint64_t v5 = *(void (****)(void))(a1 + 640);
  if (v4 != v5)
  {
    uint64_t v6 = v4 - 27;
    unint64_t v7 = v4 - 27;
    unint64_t v8 = v4 - 27;
    do
    {
      unint64_t v9 = *v8;
      v8 -= 27;
      (*v9)(v7);
      v6 -= 27;
      BOOL v10 = v7 == v5;
      unint64_t v7 = v8;
    }
    while (!v10);
  }
  *(void *)(a1 + 648) = v5;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 628) = 0x1B00000000;
  *(_WORD *)(a1 + 636) = 1;
  *(unsigned char *)(a1 + 638) = 0;
  *(unsigned char *)(a1 + 57) = 0;
  *(unsigned char *)(a1 + 688) = 0;
  *(_DWORD *)(a1 + 692) = 1;
  return a1;
}

void sub_1B2084E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  BOOL v14 = v11;
  std::vector<quasar::MovingAverage>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v14;
  std::vector<quasar::AMKeywordDetection>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 607) < 0) {
    operator delete(*v12);
  }
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(std::__shared_weak_count **)(v10 + 504);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (*(char *)(v10 + 495) < 0) {
    operator delete(*(void **)(v10 + 472));
  }
  if (*(char *)(v10 + 471) < 0) {
    operator delete(*v13);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v10);
  _Unwind_Resume(a1);
}

void quasar::OnlineKeywordSpottingDecoder::~OnlineKeywordSpottingDecoder(void **this)
{
  *this = &unk_1F0A577D8;
  uint64_t v3 = this + 87;
  std::vector<quasar::MovingAverage>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = this + 80;
  std::vector<quasar::AMKeywordDetection>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 607) < 0) {
    operator delete(this[73]);
  }
  uint64_t v3 = this + 70;
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = this + 67;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = this + 64;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v2 = (std::__shared_weak_count *)this[63];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 495) < 0) {
    operator delete(this[59]);
  }
  if (*((char *)this + 471) < 0) {
    operator delete(this[56]);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)this);
}

{
  uint64_t vars8;

  quasar::OnlineKeywordSpottingDecoder::~OnlineKeywordSpottingDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineKeywordSpottingDecoder::registerParams(quasar::OnlineKeywordSpottingDecoder *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "keyword-spotting");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 42, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "The threshold for the keyword score");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 608, (uint64_t)v4, 0, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "frame-offset");
  std::string::basic_string[abi:ne180100]<0>(v4, "frame offset");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 616, (uint64_t)v4, 0, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "do-viterbi");
  std::string::basic_string[abi:ne180100]<0>(v4, "apply viterbi for keyword detection");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 636, (uint64_t)v4, 0, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "tokens-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "symbole table file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v4, 1, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "keyword-list-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "list of keywords and their corresponding tokens sequence");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 472, (uint64_t)v4, 1, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Number of frames that get decoded in one go");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 632, (uint64_t)v4, 0, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "do-batch-reset");
  std::string::basic_string[abi:ne180100]<0>(v4, "Reset scores after each batch result");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 637, (uint64_t)v4, 0, 89, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "do-top-result-only");
  std::string::basic_string[abi:ne180100]<0>(v4, "Only return the best keyword score");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 638, (uint64_t)v4, 0, 89, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "do-moving-avg");
  std::string::basic_string[abi:ne180100]<0>(v4, "Performs a moving average of the scores");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 688, (uint64_t)v4, 0, 223, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "moving-avg-window-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Set the window size for the moving average");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 692, (uint64_t)v4, 0, 223, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B2085458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineKeywordSpottingDecoder::finishInit(quasar::OnlineKeywordSpottingDecoder *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&v4);
  uint64_t Text = fst::SymbolTable::ReadText((uint64_t)this + 448);
  std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(v3, Text);
}

void sub_1B2086024(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B2086084);
}

void sub_1B2086034(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }
  v4[0] = &v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v4);
  if (v5 < 0) {
    operator delete((void *)v4[34]);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  std::fstream::~fstream(&v8);
  _Unwind_Resume(a1);
}

std::fstream *__cdecl std::fstream::basic_fstream(std::fstream *this, const std::string *__s, std::ios_base::openmode __mode)
{
  this->__sb_.__extbufnext_ = 0;
  extbuf_min = this->__sb_.__extbuf_min_;
  this->__sb_.__extbuf_ = (char *)&unk_1F0A22F68;
  *(&this[1].__sb_.__st_._mbstateL + 2) = (uint64_t)&unk_1F0A22F90;
  std::ios_base::init((std::ios_base *)(&this[1].__sb_.__st_._mbstateL + 2), this->__sb_.__extbuf_min_);
  *(&this[1].__sb_.__st_last_._mbstateL + 3) = 0;
  *((_DWORD *)&this[1].__sb_.__st_last_._mbstateL + 8) = -1;
  MEMORY[0x1B3EA7CE0](extbuf_min);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)this + *((void *)this->__sb_.__extbuf_ - 3)), *(_DWORD *)&this->__sb_.__extbuf_min_[*((void *)this->__sb_.__extbuf_ - 3) + 8] | 4);
  }
  return this;
}

void sub_1B20861D0(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::string,long long,long long,float>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    v17[4] = result;
    if (v13) {
      BOOL v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(result, v13);
    }
    else {
      BOOL v14 = 0;
    }
    uint64_t v15 = &v14[48 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[48 * v13];
    long long v16 = *a2;
    *((void *)v15 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v15 = v16;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *((void *)v15 + 3) = *((void *)a2 + 3);
    *((void *)v15 + 4) = *((void *)a2 + 4);
    *((_DWORD *)v15 + 10) = *((_DWORD *)a2 + 10);
    _OWORD v17[2] = v15 + 48;
    std::vector<std::tuple<std::string,long long,long long,float>>::__swap_out_circular_buffer(a1, v17);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::tuple<std::string,long long,long long,float>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(void *)(v7 + ++*(_DWORD *)(result + 24) = *((void *)a2 + 3);
    *(void *)(v7 + 32) = *((void *)a2 + 4);
    *(_DWORD *)(v7 + 40) = *((_DWORD *)a2 + 10);
    uint64_t v9 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v9;
  return result;
}

void sub_1B2086368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,long long,long long,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this)))(std::fstream *__hidden this)
{
  unint64_t v2 = a1 + 54;
  MEMORY[0x1B3EA7CF0](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](v2);
  return a1;
}

BOOL quasar::tupleCompare(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 40) > *(float *)(a2 + 40);
}

void quasar::OnlineKeywordSpottingDecoder::updateBestScores(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a2[1] != *a2)
  {
    for (unint64_t i = 0; 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4) > i; ++i)
    {
      unint64_t v6 = (const std::string *)(v2 + 48 * i);
      uint64_t v7 = *(void *)(a1 + 560) + 48 * i;
      uint64_t v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
      if ((v8 & 0x80u) == 0) {
        std::string::size_type size = HIBYTE(v6->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v6->__r_.__value_.__l.__size_;
      }
      uint64_t v10 = *(unsigned __int8 *)(v7 + 23);
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(v7 + 8);
      }
      if (size != v10) {
        goto LABEL_19;
      }
      if (v11 >= 0) {
        unint64_t v12 = (unsigned __int8 *)(*(void *)(a1 + 560) + 48 * i);
      }
      else {
        unint64_t v12 = *(unsigned __int8 **)v7;
      }
      if ((v8 & 0x80) != 0)
      {
        if (memcmp(v6->__r_.__value_.__l.__data_, v12, v6->__r_.__value_.__l.__size_)) {
          goto LABEL_19;
        }
      }
      else if (*((unsigned char *)&v6->__r_.__value_.__s + 23))
      {
        unint64_t v13 = v6;
        while (v13->__r_.__value_.__s.__data_[0] == *v12)
        {
          unint64_t v13 = (const std::string *)((char *)v13 + 1);
          ++v12;
          if (!--v8) {
            goto LABEL_33;
          }
        }
LABEL_19:
        if (quasar::gLogLevel >= 4)
        {
          memset(v25, 0, 272);
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
          BOOL v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"keyword mismatch ", 17);
          uint64_t v15 = *a2 + 48 * i;
          int v16 = *(char *)(v15 + 23);
          if (v16 >= 0) {
            uint64_t v17 = *a2 + 48 * i;
          }
          else {
            uint64_t v17 = *(void *)v15;
          }
          if (v16 >= 0) {
            uint64_t v18 = *(unsigned __int8 *)(v15 + 23);
          }
          else {
            uint64_t v18 = *(void *)(v15 + 8);
          }
          int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v17, v18);
          int64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" != ", 4);
          uint64_t v21 = *(void *)(a1 + 560) + 48 * i;
          int v22 = *(char *)(v21 + 23);
          if (v22 >= 0) {
            uint64_t v23 = *(void *)(a1 + 560) + 48 * i;
          }
          else {
            uint64_t v23 = *(void *)v21;
          }
          if (v22 >= 0) {
            uint64_t v24 = *(unsigned __int8 *)(v21 + 23);
          }
          else {
            uint64_t v24 = *(void *)(v21 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v23, v24);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v25);
        }
        goto LABEL_35;
      }
LABEL_33:
      if (*(float *)&v6[1].__r_.__value_.__r.__words[2] > *(float *)(v7 + 40))
      {
        std::string::operator=((std::string *)v7, v6);
        *(void *)(v7 + ++*(_DWORD *)(result + 24) = v6[1].__r_.__value_.__l.__data_;
        *(void *)(v7 + 32) = v6[1].__r_.__value_.__l.__size_;
        *(_DWORD *)(v7 + 40) = v6[1].__r_.__value_.__r.__words[2];
      }
LABEL_35:
      uint64_t v2 = *a2;
    }
  }
}

void sub_1B2086638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::OnlineKeywordSpottingDecoder::writePerBatchResults(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  memset(&v35, 0, sizeof(v35));
  std::vector<std::tuple<std::string,long long,long long,float>>::__init_with_size[abi:ne180100]<std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*>(&v35, *(long long **)(a1 + 560), *(long long **)(a1 + 568), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 4));
  unint64_t v9 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35.__r_.__value_.__l.__size_ - v35.__r_.__value_.__r.__words[0]) >> 4));
  v34[0] = (uint64_t (*)(long long *, long long *))quasar::tupleCompare;
  if (v35.__r_.__value_.__l.__size_ == v35.__r_.__value_.__r.__words[0]) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*,false>((uint64_t)v35.__r_.__value_.__l.__data_, (long long *)v35.__r_.__value_.__l.__size_, v34, v10, 1, v8);
  uint64_t v22 = a3;
  unsigned int v21 = a4;
  memset(v34, 0, sizeof(v34));
  std::vector<std::vector<quasar::Token>>::reserve((uint64_t *)v34, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35.__r_.__value_.__l.__size_ - v35.__r_.__value_.__r.__words[0]) >> 4));
  std::string::size_type size = v35.__r_.__value_.__l.__size_;
  if (v35.__r_.__value_.__r.__words[0] != v35.__r_.__value_.__l.__size_)
  {
    std::string::size_type v12 = v35.__r_.__value_.__r.__words[0] + 48;
    do
    {
      if (*(char *)(v12 - 25) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v12 - 48), *(void *)(v12 - 40));
      }
      else
      {
        long long v13 = *(_OWORD *)(v12 - 48);
        v30.__r_.__value_.__r.__words[2] = *(void *)(v12 - 32);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
      }
      int v14 = *(_DWORD *)(v12 - 24);
      int v15 = *(_DWORD *)(v12 - 16);
      float v16 = *(float *)(v12 - 8);
      std::string::basic_string[abi:ne180100]<0>(&v28, "");
      std::string::basic_string[abi:ne180100]<0>(&v26, "");
      memset(v25, 0, sizeof(v25));
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      quasar::Token::Token(&v38, (long long *)&v30, v14, v15, v15, 0, 0, &v28, v16, &v26, v25, 0, (long long *)__p, 0, 0);
      long long v31 = 0;
      uint64_t v32 = 0;
      unint64_t v33 = 0;
      uint64_t v36 = &v31;
      char v37 = 0;
      long long v31 = (char *)operator new(0xE0uLL);
      uint64_t v32 = (uint64_t)v31;
      unint64_t v33 = v31 + 224;
      uint64_t v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>((uint64_t)&v33, (uint64_t)&v38, (uint64_t)&v40, (uint64_t)v31);
      std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100]((uint64_t *)v34, (uint64_t)&v31);
      uint64_t v36 = &v31;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
      quasar::Token::~Token((void **)&v38.__r_.__value_.__l.__data_);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      __p[0] = v25;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (SHIBYTE(v27) < 0) {
        operator delete((void *)v26);
      }
      if (SHIBYTE(v29) < 0) {
        operator delete((void *)v28);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 638)) {
        break;
      }
      BOOL v17 = v12 == size;
      v12 += 48;
    }
    while (!v17);
  }
  uint64_t v18 = *(void *)(*(void *)a2 + 560);
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  long long v31 = 0;
  uint64_t v19 = *(unsigned int *)(*(void *)v22 + 12);
  long long v28 = 0uLL;
  uint64_t v29 = 0;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  v38.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v38.__r_.__value_.__l.__size_, "▁");
  LOWORD(v20) = 0;
  (*(void (**)(uint64_t, char **, uint64_t, uint64_t, void, void, uint64_t (**)(long long *, long long *), long long *, long long *, int, std::string *))(*(void *)v18 + 24))(v18, &v31, v19, 1, v21, 0, v34, &v28, &v26, v20, &v38);
  if (v39 < 0) {
    operator delete((void *)v38.__r_.__value_.__l.__size_);
  }
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
}

void sub_1B2086A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char *a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0) {
    operator delete(__p);
  }
  a55 = (char *)&a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  a55 = (char *)&a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  a55 = &a44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  a55 = &a47;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  a55 = &a50;
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineKeywordSpottingDecoder::runImpl(uint64_t a1, kaldi::OnlineFeatureMatrix **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  v131 = (int32x2_t *)(a1 + 620);
  *(void *)(a1 + 620) = 0;
  *(_DWORD *)(a1 + 628) = 0;
  uint64_t v8 = *(void *)(a1 + 560);
  for (uint64_t i = *(void *)(a1 + 568); v8 != i; v8 += 48)
  {
    *(void *)(v8 + ++*(_DWORD *)(result + 24) = 0;
    *(void *)(v8 + 32) = 0;
    *(_DWORD *)(v8 + 40) = -8388609;
  }
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  v132 = *a2;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v128 = v10;
  if (!v132)
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v172 = 0u;
      long long v173 = 0u;
      long long v170 = 0u;
      long long v171 = 0u;
      *(_OWORD *)v168 = 0u;
      long long v169 = 0u;
      *(_OWORD *)v166 = 0u;
      long long v167 = 0u;
      long long v164 = 0u;
      long long v165 = 0u;
      long long v162 = 0u;
      *(_OWORD *)v163 = 0u;
      *(_OWORD *)v160 = 0u;
      long long v161 = 0u;
      long long v159 = 0u;
      memset(v158, 0, sizeof(v158));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v158);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"Error: no utterance features were provided", 42);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v158);
    }
    uint64_t v80 = 2;
    if (v10) {
      goto LABEL_176;
    }
    return v80;
  }
  v188 = 0;
  v189 = 0;
  uint64_t v190 = 0;
  if (*(void *)(a1 + 664))
  {
    int v11 = *(quasar::AMKeywordDetection **)(a1 + 640);
    std::string::size_type v12 = *(quasar::AMKeywordDetection **)(a1 + 648);
    while (v11 != v12)
    {
      quasar::AMKeywordDetection::init(v11);
      int v11 = (quasar::AMKeywordDetection *)((char *)v11 + 216);
    }
    long long v13 = *(quasar::MovingAverage **)(v7 + 696);
    int v14 = *(quasar::MovingAverage **)(v7 + 704);
    while (v13 != v14)
    {
      quasar::MovingAverage::init(v13, *(int *)(v7 + 692));
      long long v13 = (quasar::MovingAverage *)((char *)v13 + 64);
    }
    *(float *)(v7 + 612) = (float)(*(int (**)(void))(**((void **)*a2 + 2) + 24))(*((void *)*a2 + 2));
    if (quasar::gLogLevel >= 5)
    {
      long long v172 = 0u;
      long long v173 = 0u;
      long long v170 = 0u;
      long long v171 = 0u;
      *(_OWORD *)v168 = 0u;
      long long v169 = 0u;
      *(_OWORD *)v166 = 0u;
      long long v167 = 0u;
      long long v164 = 0u;
      long long v165 = 0u;
      long long v162 = 0u;
      *(_OWORD *)v163 = 0u;
      *(_OWORD *)v160 = 0u;
      long long v161 = 0u;
      long long v159 = 0u;
      memset(v158, 0, sizeof(v158));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v158);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"Start of batches", 16);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v158);
    }
    uint64_t v125 = a3;
    int v15 = 0;
    uint64_t v133 = a4;
    while (kaldi::OnlineFeatureMatrix::IsValidFrame((int32x2_t *)v132, v131->i32[0] + 1, 1))
    {
      BOOL v17 = v188;
      float v16 = v189;
      if (v189 != v188)
      {
        uint64_t v18 = v189;
        do
        {
          int v20 = (void *)*(v18 - 3);
          v18 -= 3;
          uint64_t v19 = v20;
          if (v20)
          {
            *(v16 - 2) = v19;
            operator delete(v19);
          }
          float v16 = v18;
        }
        while (v18 != v17);
      }
      int v21 = 0;
      v189 = v17;
      for (signed int j = v131->i32[0];
            kaldi::OnlineFeatureMatrix::IsValidFrame((int32x2_t *)v132, j, 1) && v21 < *(_DWORD *)(v7 + 632);
            signed int j = v35.i32[0])
      {
        kaldi::OnlineFeatureMatrix::GetFrame(v132, v131->i32[0], (uint64_t *)v158);
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v140 = 0;
        if (*(int *)&v158[8] >= 1)
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          do
          {
            uint64_t v25 = *(void *)v158;
            if ((unint64_t)v23 >= (unint64_t)v140)
            {
              uint64_t v27 = (char *)__p[0];
              uint64_t v28 = (v23 - (char *)__p[0]) >> 2;
              unint64_t v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v30 = v140 - (unint64_t)__p[0];
              if ((uint64_t)(v140 - (unint64_t)__p[0]) >> 1 > v29) {
                unint64_t v29 = v30 >> 1;
              }
              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v31 = v29;
              }
              if (v31)
              {
                uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v140, v31);
                uint64_t v27 = (char *)__p[0];
                uint64_t v23 = (char *)__p[1];
              }
              else
              {
                uint64_t v32 = 0;
              }
              unint64_t v33 = &v32[4 * v28];
              *(_DWORD *)unint64_t v33 = *(_DWORD *)(v25 + 4 * v24);
              long long v26 = v33 + 4;
              while (v23 != v27)
              {
                int v34 = *((_DWORD *)v23 - 1);
                v23 -= 4;
                *((_DWORD *)v33 - 1) = v34;
                v33 -= 4;
              }
              __p[0] = v33;
              __p[1] = v26;
              *(void *)&long long v140 = &v32[4 * v31];
              if (v27) {
                operator delete(v27);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v23 = *(_DWORD *)(*(void *)v158 + 4 * v24);
              long long v26 = v23 + 4;
            }
            __p[1] = v26;
            ++v24;
            uint64_t v23 = (char *)v26;
          }
          while (v24 < *(int *)&v158[8]);
        }
        std::vector<std::vector<float>>::push_back[abi:ne180100]((uint64_t *)&v188, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        int32x2_t v35 = vadd_s32(*v131, (int32x2_t)0x100000001);
        int32x2_t *v131 = v35;
        ++v21;
      }
      ++*(_DWORD *)(v7 + 628);
      uint64_t v36 = (char *)v189 - (char *)v188;
      if (v189 == v188)
      {
        if (quasar::gLogLevel >= 1)
        {
          long long v172 = 0u;
          long long v173 = 0u;
          long long v170 = 0u;
          long long v171 = 0u;
          *(_OWORD *)v168 = 0u;
          long long v169 = 0u;
          *(_OWORD *)v166 = 0u;
          long long v167 = 0u;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          *(_OWORD *)v163 = 0u;
          *(_OWORD *)v160 = 0u;
          long long v161 = 0u;
          long long v159 = 0u;
          memset(v158, 0, sizeof(v158));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v158);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"empty posterior matrix", 22);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v158);
        }
        goto LABEL_167;
      }
      if (*(void *)(v7 + 672) != (uint64_t)(v188[1] - *v188) >> 2)
      {
        if (quasar::gLogLevel >= 1)
        {
          long long v172 = 0u;
          long long v173 = 0u;
          long long v170 = 0u;
          long long v171 = 0u;
          *(_OWORD *)v168 = 0u;
          long long v169 = 0u;
          *(_OWORD *)v166 = 0u;
          long long v167 = 0u;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          *(_OWORD *)v163 = 0u;
          *(_OWORD *)v160 = 0u;
          long long v161 = 0u;
          long long v159 = 0u;
          memset(v158, 0, sizeof(v158));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v158);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"unmatched  posterior matrix dimension and number of symbols", 59);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v158);
        }
        goto LABEL_167;
      }
      int v126 = *(_DWORD *)(v7 + 624);
      int v127 = *(_DWORD *)(*(void *)a4 + 8);
      if (quasar::gLogLevel >= 5)
      {
        long long v172 = 0u;
        long long v173 = 0u;
        long long v170 = 0u;
        long long v171 = 0u;
        *(_OWORD *)v168 = 0u;
        long long v169 = 0u;
        *(_OWORD *)v166 = 0u;
        long long v167 = 0u;
        long long v164 = 0u;
        long long v165 = 0u;
        long long v162 = 0u;
        *(_OWORD *)v163 = 0u;
        *(_OWORD *)v160 = 0u;
        long long v161 = 0u;
        long long v159 = 0u;
        memset(v158, 0, sizeof(v158));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v158);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"About to process ", 17);
        char v37 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" frames in batch", 16);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v158);
      }
      if (v36 >= 1)
      {
        uint64_t v38 = 0;
        if (v36 / 24 <= 1) {
          uint64_t v39 = 1;
        }
        else {
          uint64_t v39 = v36 / 24;
        }
        uint64_t v130 = v39;
        do
        {
          v135 = &v188[3 * v38];
          __p[0] = 0;
          __p[1] = 0;
          *(void *)&long long v140 = 0;
          if (*(unsigned char *)(v7 + 688))
          {
            if (*(void *)(v7 + 520) != *(void *)(v7 + 512))
            {
              uint64_t v134 = v38;
              int v129 = v15;
              uint64_t v40 = 0;
              uint64_t v41 = 0;
              uint64_t v42 = 0;
              unint64_t v43 = 0;
              do
              {
                int v44 = *(_DWORD *)(*(void *)a4 + 8);
                uint64_t v45 = v7;
                int v46 = *(_DWORD *)(v7 + 624);
                int v47 = *(_DWORD *)(v7 + 692);
                int v48 = (quasar::MovingAverage *)(*(void *)(v7 + 696) + v40);
                quasar::MovingAverage::add(v48, *(float *)(*v135 + 4 * v43));
                uint64_t v136 = v41;
                uint64_t v138 = v40;
                uint64_t v49 = *(long long **)(*(void *)(v7 + 512) + v41);
                float v50 = *(float *)(v7 + 612);
                float v51 = *(float *)(v7 + 616);
                uint64_t v52 = *(int *)(v7 + 632);
                uint64_t v53 = v45;
                uint64_t v54 = *(int *)(v45 + 628);
                float Average = quasar::MovingAverage::getAverage(v48);
                if (*((char *)v49 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v158, *(const std::string::value_type **)v49, *((void *)v49 + 1));
                }
                else
                {
                  long long v56 = *v49;
                  *(void *)&v158[16] = *((void *)v49 + 2);
                  *(_OWORD *)v158 = v56;
                }
                *(float *)&v158[24] = v51 + (float)((float)(v46 + v44 - v47) * v50);
                *(float *)&v158[28] = v51 + (float)(v50 * (float)(v134 + (v54 - 1) * v52));
                *(float *)&long long v159 = Average;
                uint64_t v7 = v53;
                uint64_t v57 = *(void *)(v53 + 560) + v42;
                if (*(char *)(v57 + 23) < 0) {
                  operator delete(*(void **)v57);
                }
                long long v58 = *(_OWORD *)v158;
                *(void *)(v57 + 16) = *(void *)&v158[16];
                *(_OWORD *)uint64_t v57 = v58;
                v158[23] = 0;
                v158[0] = 0;
                *(int64x2_t *)(v57 + ++*(_DWORD *)(result + 24) = vcvtq_s64_f64(vcvtq_f64_f32(*(float32x2_t *)&v158[24]));
                *(_DWORD *)(v57 + 40) = v159;
                a4 = v133;
                if ((v158[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v158);
                }
                ++v43;
                v42 += 48;
                uint64_t v41 = v136 + 24;
                uint64_t v40 = v138 + 64;
              }
              while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 520) - *(void *)(v7 + 512)) >> 3) > v43);
              uint64_t v10 = v128;
              int v15 = v129;
              uint64_t v38 = v134;
            }
          }
          else
          {
            unsigned int v59 = *(quasar::AMKeywordDetection **)(v7 + 640);
            BOOL v60 = *(quasar::AMKeywordDetection **)(v7 + 648);
            while (v59 != v60)
            {
              quasar::AMKeywordDetection::propagate(v59, v135, *(void *)(v7 + 680));
              float Score = quasar::AMKeywordDetection::getScore(v59);
              float BestStartFrame = quasar::AMKeywordDetection::getBestStartFrame(v59);
              kaldi::quasar::Vocab::OOvWord(v59, &v187);
              uint64_t v63 = (uint64_t)BestStartFrame;
              if ((uint64_t)BestStartFrame == -1) {
                uint64_t v63 = 0;
              }
              float v64 = *(float *)(v7 + 612);
              float v65 = *(float *)(v7 + 616);
              float v66 = v65 + (float)((float)v63 * v64);
              float v67 = v65 + (float)(v64 * (float)(v38 + (*(_DWORD *)(v7 + 628) - 1) * *(_DWORD *)(v7 + 632)));
              *(void *)&v158[8] = v187.__r_.__value_.__l.__size_;
              std::string::size_type v68 = v187.__r_.__value_.__r.__words[0];
              *(void *)&v158[15] = *(std::string::size_type *)((char *)&v187.__r_.__value_.__r.__words[1] + 7);
              char v69 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
              memset(&v187, 0, sizeof(v187));
              *(void *)v158 = v68;
              v158[23] = v69;
              *(void *)&v158[24] = (uint64_t)v66;
              *(void *)&long long v159 = (uint64_t)v67;
              *((float *)&v159 + 2) = Score;
              std::vector<std::tuple<std::string,long long,long long,float>>::push_back[abi:ne180100]((uint64_t *)__p, (long long *)v158);
              if ((v158[23] & 0x80000000) != 0) {
                operator delete(*(void **)v158);
              }
              if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v187.__r_.__value_.__l.__data_);
              }
              if (Score > *(float *)(v7 + 608))
              {
                if (quasar::gLogLevel >= 4)
                {
                  long long v172 = 0u;
                  long long v173 = 0u;
                  long long v170 = 0u;
                  long long v171 = 0u;
                  *(_OWORD *)v168 = 0u;
                  long long v169 = 0u;
                  *(_OWORD *)v166 = 0u;
                  long long v167 = 0u;
                  long long v164 = 0u;
                  long long v165 = 0u;
                  long long v162 = 0u;
                  *(_OWORD *)v163 = 0u;
                  *(_OWORD *)v160 = 0u;
                  long long v161 = 0u;
                  long long v159 = 0u;
                  memset(v158, 0, sizeof(v158));
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v158);
                  int v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"KWD ", 4);
                  kaldi::quasar::Vocab::OOvWord(v59, &v187);
                  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    unsigned int v71 = &v187;
                  }
                  else {
                    unsigned int v71 = (std::string *)v187.__r_.__value_.__r.__words[0];
                  }
                  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type size = HIBYTE(v187.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type size = v187.__r_.__value_.__l.__size_;
                  }
                  int v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, size);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" ", 1);
                  long long v74 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" ", 1);
                  float v75 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" ", 1);
                  int v76 = (void *)std::ostream::operator<<();
                  std::ios_base::getloc((const std::ios_base *)((char *)v76 + *(void *)(*v76 - 24)));
                  int v77 = std::locale::use_facet(&v184, MEMORY[0x1E4FBA258]);
                  ((void (*)(const std::locale::facet *, uint64_t))v77->__vftable[2].~facet_0)(v77, 10);
                  std::locale::~locale(&v184);
                  std::ostream::put();
                  std::ostream::flush();
                  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v187.__r_.__value_.__l.__data_);
                  }
                  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v158);
                }
                ++v15;
              }
              quasar::OnlineKeywordSpottingDecoder::updateBestScores(v7, (uint64_t *)__p);
              unsigned int v59 = (quasar::AMKeywordDetection *)((char *)v59 + 216);
            }
          }
          *(void *)v158 = __p;
          std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
          ++v38;
        }
        while (v38 != v130);
      }
      if (quasar::gLogLevel > 4)
      {
        long long v172 = 0u;
        long long v173 = 0u;
        long long v170 = 0u;
        long long v171 = 0u;
        *(_OWORD *)v168 = 0u;
        long long v169 = 0u;
        *(_OWORD *)v166 = 0u;
        long long v167 = 0u;
        long long v164 = 0u;
        long long v165 = 0u;
        long long v162 = 0u;
        *(_OWORD *)v163 = 0u;
        *(_OWORD *)v160 = 0u;
        long long v161 = 0u;
        long long v159 = 0u;
        memset(v158, 0, sizeof(v158));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v158);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"End of batch", 12);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v158);
      }
      quasar::OnlineKeywordSpottingDecoder::writePerBatchResults(v7, v125, a4, (int)(float)(*(float *)(v7 + 612) * (float)(v126 + v127)));
      if (*(unsigned char *)(v7 + 637))
      {
        uint64_t v78 = *(void *)(v7 + 560);
        for (uint64_t k = *(void *)(v7 + 568); v78 != k; v78 += 48)
        {
          *(void *)(v78 + ++*(_DWORD *)(result + 24) = 0;
          *(void *)(v78 + 32) = 0;
          *(_DWORD *)(v78 + 40) = -8388609;
        }
      }
    }
    if (quasar::gLogLevel >= 5)
    {
      long long v172 = 0u;
      long long v173 = 0u;
      long long v170 = 0u;
      long long v171 = 0u;
      *(_OWORD *)v168 = 0u;
      long long v169 = 0u;
      *(_OWORD *)v166 = 0u;
      long long v167 = 0u;
      long long v164 = 0u;
      long long v165 = 0u;
      long long v162 = 0u;
      *(_OWORD *)v163 = 0u;
      *(_OWORD *)v160 = 0u;
      long long v161 = 0u;
      long long v159 = 0u;
      memset(v158, 0, sizeof(v158));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v158);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"End of batches", 14);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v158);
    }
    memset(&v187, 0, sizeof(v187));
    v184.__locale_ = 0;
    v185 = 0;
    unint64_t v186 = 0;
    v181 = 0;
    v182 = 0;
    v183 = 0;
    memset(&v180, 0, sizeof(v180));
    std::vector<std::tuple<std::string,long long,long long,float>>::__init_with_size[abi:ne180100]<std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*>(&v180, *(long long **)(v7 + 560), *(long long **)(v7 + 568), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 568) - *(void *)(v7 + 560)) >> 4));
    uint64_t v82 = a4;
    uint64_t v137 = v7;
    unint64_t v83 = 126
        - 2
        * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v180.__r_.__value_.__l.__size_ - v180.__r_.__value_.__r.__words[0]) >> 4));
    __p[0] = quasar::tupleCompare;
    if (v180.__r_.__value_.__l.__size_ == v180.__r_.__value_.__r.__words[0]) {
      uint64_t v84 = 0;
    }
    else {
      uint64_t v84 = v83;
    }
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*,false>((uint64_t)v180.__r_.__value_.__l.__data_, (long long *)v180.__r_.__value_.__l.__size_, (uint64_t (**)(long long *, long long *))__p, v84, 1, v81);
    std::string::size_type v86 = v180.__r_.__value_.__l.__size_;
    for (std::string::size_type m = v180.__r_.__value_.__r.__words[0]; m != v86; m += 48)
    {
      locale = v184.__locale_;
      for (n = v185; n != (std::string *)locale; quasar::Token::~Token((void **)&n[-10].__r_.__value_.__r.__words[2]))
        ;
      v185 = (std::string *)locale;
      if (*(char *)(m + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v179, *(const std::string::value_type **)m, *(void *)(m + 8));
      }
      else
      {
        long long v89 = *(_OWORD *)m;
        v179.__r_.__value_.__r.__words[2] = *(void *)(m + 16);
        *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v89;
      }
      int v90 = *(_DWORD *)(m + 24);
      int v91 = *(_DWORD *)(m + 32);
      float v92 = *(float *)(m + 40);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      std::string::basic_string[abi:ne180100]<0>(v177, "");
      memset(v176, 0, sizeof(v176));
      std::string::basic_string[abi:ne180100]<0>(v174, "");
      quasar::Token::Token((std::string *)v158, (long long *)&v179, v90, v91, v91, 0, 0, (long long *)__p, v92, (long long *)v177, v176, 0, (long long *)v174, 0, 0);
      if (v175 < 0) {
        operator delete(v174[0]);
      }
      v174[0] = v176;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v174);
      if (v178 < 0) {
        operator delete(v177[0].__locale_);
      }
      if (SBYTE7(v140) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v179.__r_.__value_.__l.__data_);
      }
      long long v93 = v185;
      if ((unint64_t)v185 >= v186)
      {
        long long v94 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v184, (const quasar::Token *)v158);
      }
      else
      {
        quasar::Token::Token(v185, (const quasar::Token *)v158);
        long long v94 = (std::string *)((char *)v93 + 224);
      }
      v185 = v94;
      double v95 = *(float *)(m + 40);
      int32x2_t v96 = v182;
      if (v182 >= v183)
      {
        unsigned int v98 = v181;
        uint64_t v99 = v182 - v181;
        unint64_t v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v101 = (char *)v183 - (char *)v181;
        if (((char *)v183 - (char *)v181) >> 2 > v100) {
          unint64_t v100 = v101 >> 2;
        }
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v102 = v100;
        }
        if (v102)
        {
          char v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v183, v102);
          unsigned int v98 = v181;
          int32x2_t v96 = v182;
        }
        else
        {
          char v103 = 0;
        }
        std::string v104 = (double *)&v103[8 * v99];
        double *v104 = v95;
        int v97 = v104 + 1;
        while (v96 != v98)
        {
          uint64_t v105 = *((void *)v96-- - 1);
          *((void *)v104-- - 1) = v105;
        }
        v181 = v104;
        v182 = v97;
        v183 = (double *)&v103[8 * v102];
        if (v98) {
          operator delete(v98);
        }
      }
      else
      {
        double *v182 = v95;
        int v97 = v96 + 1;
      }
      v182 = v97;
      long long v106 = (void *)v187.__r_.__value_.__l.__size_;
      if (v187.__r_.__value_.__l.__size_ >= v187.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v107 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v187, (uint64_t *)&v184);
      }
      else
      {
        *(void *)v187.__r_.__value_.__l.__size_ = 0;
        v106[1] = 0;
        v106[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v106, (uint64_t)v184.__locale_, (uint64_t)v185, 0x6DB6DB6DB6DB6DB7 * (((char *)v185 - (char *)v184.__locale_) >> 5));
        std::string::size_type v107 = (std::string::size_type)(v106 + 3);
      }
      v187.__r_.__value_.__l.__size_ = v107;
      if (SBYTE7(v169) < 0) {
        operator delete(v168[0]);
      }
      if (SBYTE7(v167) < 0) {
        operator delete(v166[0]);
      }
      __p[0] = (char *)&v164 + 8;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (SBYTE7(v164) < 0) {
        operator delete(v163[0]);
      }
      __p[0] = (char *)&v161 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (SBYTE7(v161) < 0) {
        operator delete(v160[0]);
      }
      if ((v158[23] & 0x80000000) != 0) {
        operator delete(*(void **)v158);
      }
    }
    int v108 = *(_DWORD *)(*(void *)v82 + 8);
    int v109 = *(_DWORD *)(v137 + 624);
    quasar::RecogResult::RecogResult((quasar::RecogResult *)v158);
    uint64_t v110 = *(std::__shared_weak_count **)(*(void *)v82 + 32);
    uint64_t v156 = *(void *)(*(void *)v82 + 24);
    v157 = v110;
    if (v110) {
      atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v111 = quasar::RecogResult::setParams((uint64_t)v158, &v156);
    long long v112 = quasar::Token::resetSpacing((uint64_t **)&v187);
    uint64_t v113 = quasar::RecogResult::setResultChoices(v111, (uint64_t)v112);
    char v114 = (void *)quasar::RecogResult::setResultCosts(v113, (uint64_t)&v181);
    uint64_t v115 = quasar::RecogResult::setLmeStatus(v114, (uint64_t *)(*(void *)v125 + 584));
    uint64_t started = quasar::RecogResult::setUtteranceStartMillis((uint64_t)v115, (float)(*(float *)(v137 + 612) * (float)*(unsigned int *)(*(void *)v82 + 8)));
    quasar::RecogResult::setUtteranceDurationMillis(started, (float)(*(float *)(v137 + 612) * (float)(v109 + v108)));
    if (v157) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v157);
    }
    (*(void (**)(void, unsigned char *, uint64_t))(**(void **)(*(void *)v125 + 560) + 40))(*(void *)(*(void *)v125 + 560), v158, 1);
    *(_DWORD *)(*(void *)v125 + 5--*(_DWORD *)(a9 + 76) = *(_DWORD *)(v137 + 624);
    if (v15)
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v154 = 0u;
        long long v155 = 0u;
        long long v152 = 0u;
        long long v153 = 0u;
        long long v150 = 0u;
        long long v151 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        long long v146 = 0u;
        long long v147 = 0u;
        long long v144 = 0u;
        long long v145 = 0u;
        long long v142 = 0u;
        long long v143 = 0u;
        long long v140 = 0u;
        long long v141 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        int v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"keyword detected", 16);
        std::ios_base::getloc((const std::ios_base *)((char *)v117 + *(void *)(*v117 - 24)));
        uint64_t v118 = std::locale::use_facet(v177, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v118->__vftable[2].~facet_0)(v118, 10);
        std::locale::~locale(v177);
        std::ostream::put();
        std::ostream::flush();
        goto LABEL_170;
      }
    }
    else if (quasar::gLogLevel >= 4)
    {
      long long v154 = 0u;
      long long v155 = 0u;
      long long v152 = 0u;
      long long v153 = 0u;
      long long v150 = 0u;
      long long v151 = 0u;
      long long v148 = 0u;
      long long v149 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      long long v144 = 0u;
      long long v145 = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      long long v140 = 0u;
      long long v141 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      int v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"no keywords detected", 20);
      std::ios_base::getloc((const std::ios_base *)((char *)v119 + *(void *)(*v119 - 24)));
      uint64_t v120 = std::locale::use_facet(v177, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v120->__vftable[2].~facet_0)(v120, 10);
      std::locale::~locale(v177);
      std::ostream::put();
      std::ostream::flush();
LABEL_170:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      if (quasar::gLogLevel >= 4)
      {
        long long v154 = 0u;
        long long v155 = 0u;
        long long v152 = 0u;
        long long v153 = 0u;
        long long v150 = 0u;
        long long v151 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        long long v146 = 0u;
        long long v147 = 0u;
        long long v144 = 0u;
        long long v145 = 0u;
        long long v142 = 0u;
        long long v143 = 0u;
        long long v140 = 0u;
        long long v141 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"keyword search finished with ", 29);
        v121 = (void *)std::ostream::operator<<();
        int32x2_t v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)" detected hypothesis.", 21);
        std::ios_base::getloc((const std::ios_base *)((char *)v122 + *(void *)(*v122 - 24)));
        int v123 = std::locale::use_facet(v177, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v123->__vftable[2].~facet_0)(v123, 10);
        std::locale::~locale(v177);
        std::ostream::put();
        std::ostream::flush();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
    }
    quasar::RecogResult::~RecogResult((quasar::RecogResult *)v158);
    *(void *)v158 = &v180;
    std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
    if (v181)
    {
      v182 = v181;
      operator delete(v181);
    }
    *(void *)v158 = &v184;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
    *(void *)v158 = &v187;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
    uint64_t v80 = 0;
    goto LABEL_175;
  }
  if (quasar::gLogLevel >= 2)
  {
    long long v172 = 0u;
    long long v173 = 0u;
    long long v170 = 0u;
    long long v171 = 0u;
    *(_OWORD *)v168 = 0u;
    long long v169 = 0u;
    *(_OWORD *)v166 = 0u;
    long long v167 = 0u;
    long long v164 = 0u;
    long long v165 = 0u;
    long long v162 = 0u;
    *(_OWORD *)v163 = 0u;
    *(_OWORD *)v160 = 0u;
    long long v161 = 0u;
    long long v159 = 0u;
    memset(v158, 0, sizeof(v158));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v158);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"No keywords found.", 18);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v158);
  }
LABEL_167:
  uint64_t v80 = 2;
LABEL_175:
  *(void *)v158 = &v188;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
  if (v10) {
LABEL_176:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  return v80;
}

void sub_1B2087E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&a65);
  a65 = (void *)(v65 - 240);
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  float v67 = *(void **)(v65 - 216);
  if (v67)
  {
    *(void *)(v65 - 208) = v67;
    operator delete(v67);
  }
  a65 = (void *)(v65 - 192);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  a65 = (void *)(v65 - 168);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  a65 = (void *)(v65 - 144);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineKeywordSpottingDecoder::affectsRecognitionResults(quasar::OnlineKeywordSpottingDecoder *this)
{
  return 1;
}

void non-virtual thunk to'std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  MEMORY[0x1B3EA7CF0](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1B3EA8520);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = a1 + 52;
  MEMORY[0x1B3EA7CF0](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](v1);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'std::fstream::~fstream(void *a1)
{
  uint64_t v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(void *)(*a1 - 24));
  MEMORY[0x1B3EA7CF0](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1B3EA8520);
}

{
  void (__cdecl ***v1)(std::fstream *__hidden);
  uint64_t vars8;

  uint64_t v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(void *)(*a1 - 24));
  MEMORY[0x1B3EA7CF0](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](v1 + 54);
  JUMPOUT(0x1B3EA8670);
}

void std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  uint64_t v1 = a1 + 54;
  MEMORY[0x1B3EA7CF0](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](v1);
  JUMPOUT(0x1B3EA8670);
}

void std::vector<quasar::AMKeywordDetection>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    std::fstream v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = v4 - 216;
      uint64_t v7 = v4 - 216;
      uint64_t v8 = v4 - 216;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 216;
        (*v9)(v7);
        v6 -= 216;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::MovingAverage>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    std::fstream v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 64;
        std::deque<int>::~deque[abi:ne180100]((void *)v4 - 6);
        std::fstream v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::AMKeywordDetection>::__push_back_slow_path<quasar::AMKeywordDetection>(uint64_t *a1, const quasar::AMKeywordDetection *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x12F684BDA12F684) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x84BDA12F684BDA13 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x97B425ED097B42) {
    unint64_t v9 = 0x12F684BDA12F684;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::RecogRequestFilter>>(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  long long v13 = v10;
  int v14 = (quasar::AMKeywordDetection *)&v10[216 * v4];
  float v16 = &v10[216 * v9];
  quasar::AMKeywordDetection::AMKeywordDetection(v14, a2);
  int v15 = (char *)v14 + 216;
  std::vector<quasar::AMKeywordDetection>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::AMKeywordDetection>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B2088734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::AMKeywordDetection>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

quasar::AMKeywordDetection *quasar::AMKeywordDetection::AMKeywordDetection(quasar::AMKeywordDetection *this, const quasar::AMKeywordDetection *a2)
{
  *(void *)this = &unk_1F0A53ED0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  uint64_t v5 = *((void *)a2 + 4);
  *((void *)this + 5) = 0;
  *((void *)this + 4) = v5;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)this + 5, *((const void **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 8, *((const void **)a2 + 8), *((void *)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 2);
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 11, *((const void **)a2 + 11), *((void *)a2 + 12), (uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 2);
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 14, *((const void **)a2 + 14), *((void *)a2 + 15), (uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 2);
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)this + 17, *((const void **)a2 + 17), *((void *)a2 + 18), (uint64_t)(*((void *)a2 + 18) - *((void *)a2 + 17)) >> 3);
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)this + 20, *((const void **)a2 + 20), *((void *)a2 + 21), (uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 3);
  *((void *)this + 23) = 0;
  *((void *)this + ++*(_DWORD *)(result + 24) = 0;
  *((void *)this + 25) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)this + 23, *((const void **)a2 + 23), *((void *)a2 + 24), (uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 3);
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 208);
  return this;
}

void sub_1B20888C8(_Unwind_Exception *exception_object)
{
  BOOL v10 = *v8;
  if (*v8)
  {
    *(void *)(v1 + 168) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *v7;
  if (*v7)
  {
    *(void *)(v1 + 144) = v11;
    operator delete(v11);
  }
  std::string::size_type v12 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 120) = v12;
    operator delete(v12);
  }
  long long v13 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 96) = v13;
    operator delete(v13);
  }
  int v14 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 72) = v14;
    operator delete(v14);
  }
  int v15 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v15;
    operator delete(v15);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::AMKeywordDetection>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AMKeywordDetection>,std::reverse_iterator<quasar::AMKeywordDetection*>,std::reverse_iterator<quasar::AMKeywordDetection*>,std::reverse_iterator<quasar::AMKeywordDetection*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AMKeywordDetection>,std::reverse_iterator<quasar::AMKeywordDetection*>,std::reverse_iterator<quasar::AMKeywordDetection*>,std::reverse_iterator<quasar::AMKeywordDetection*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0;
        a3 + i != a5;
        quasar::AMKeywordDetection::AMKeywordDetection((quasar::AMKeywordDetection *)(i + a7), (const quasar::AMKeywordDetection *)(i + a3)))
  {
    i -= 216;
  }
  return a6;
}

uint64_t std::__split_buffer<quasar::AMKeywordDetection>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    long long v4 = *(void (***)(void))(i - 216);
    *(void *)(a1 + 16) = i - 216;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::tuple<std::string,long long,long long,float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,long long,long long,float>>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,long long,long long,float>>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 48);
      *(void *)(v8 - 32) = *(void *)(a3 + v7 - 32);
      *(_OWORD *)(v8 - 48) = v10;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 48) = 0;
      *(void *)(v8 - ++*(_DWORD *)(result + 24) = *(void *)(a3 + v7 - 24);
      *(void *)(v8 - 16) = *(void *)(a3 + v7 - 16);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 48;
    }
    while (a3 + v7 != a5);
    *((void *)&v16 + 1) = a7 + v7;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 48;
  }
}

uint64_t std::__split_buffer<std::tuple<std::string,long long,long long,float>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::tuple<std::string,long long,long long,float>>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 6;
      *(void *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::vector<quasar::MovingAverage>::__push_back_slow_path<quasar::MovingAverage>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  long long v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>(v7, v9);
  uint64_t v11 = &v10[64 * v4];
  v16[0] = v10;
  v16[1] = v11;
  void v16[3] = &v10[64 * v12];
  int v13 = *(_DWORD *)(a2 + 8);
  *(void *)uint64_t v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = v13;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *((void *)v11 + 4) = *(void *)(a2 + 32);
  *((void *)v11 + 5) = *(void *)(a2 + 40);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *((void *)v11 + 7) = *(void *)(a2 + 56);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  void v16[2] = v11 + 64;
  std::vector<quasar::MovingAverage>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<quasar::MovingAverage>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1B2088E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::MovingAverage>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::MovingAverage>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::MovingAverage>,std::reverse_iterator<quasar::MovingAverage*>,std::reverse_iterator<quasar::MovingAverage*>,std::reverse_iterator<quasar::MovingAverage*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::MovingAverage>,std::reverse_iterator<quasar::MovingAverage*>,std::reverse_iterator<quasar::MovingAverage*>,std::reverse_iterator<quasar::MovingAverage*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a6;
  if (a3 != a5)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a7 + v8;
      uint64_t v10 = a3 + v8;
      uint64_t v11 = *(void *)(a3 + v8 - 64);
      *(_DWORD *)(v9 - 56) = *(_DWORD *)(a3 + v8 - 56);
      *(void *)(v9 - 64) = v11;
      *(void *)(v9 - 48) = *(void *)(a3 + v8 - 48);
      *(void *)(v9 - 40) = *(void *)(a3 + v8 - 40);
      *(void *)(v9 - 32) = *(void *)(a3 + v8 - 32);
      *(void *)(v9 - ++*(_DWORD *)(result + 24) = *(void *)(a3 + v8 - 24);
      *(_OWORD *)(v10 - 48) = 0uLL;
      *(_OWORD *)(v10 - 32) = 0uLL;
      *(void *)(v9 - 16) = *(void *)(a3 + v8 - 16);
      *(void *)(v9 - 8) = *(void *)(a3 + v8 - 8);
      *(void *)(v10 - 16) = 0;
      *(void *)(v10 - 8) = 0;
      v8 -= 64;
    }
    while (a3 + v8 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<quasar::MovingAverage>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    std::deque<int>::~deque[abi:ne180100]((void *)(i - 48));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::vector<std::tuple<std::string,long long,long long,float>>::__init_with_size[abi:ne180100]<std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<std::string,long long,long long,float>>,std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B2088FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<std::string,long long,long long,float>>,std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::string,long long,long long,float>::__tuple_impl(v4, v6);
      v6 += 3;
      uint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::tuple<std::string,long long,long long,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B20890AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::string,long long,long long,float>::__tuple_impl(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = *((void *)a2 + 4);
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 10);
  return this;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::tuple<std::string,long long,long long,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::tuple<std::string,long long,long long,float>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::tuple<std::string,long long,long long,float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 25) < 0) {
      operator delete(*(void **)(v1 - 48));
    }
    v1 -= 48;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*,false>(uint64_t a1, long long *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, long long *a2, uint64_t (**a3)(long long *, uint64_t, float))
{
  if ((long long *)a1 != a2)
  {
    uint64_t v5 = a1 + 48;
    if ((long long *)(a1 + 48) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        char v9 = (long long *)v5;
        if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v5, v8))
        {
          long long v15 = *v9;
          *(void *)uint64_t v16 = *((void *)v9 + 2);
          *((void *)v9 + 1) = 0;
          *((void *)v9 + 2) = 0;
          *(void *)char v9 = 0;
          *(_OWORD *)&v16[8] = *(_OWORD *)(v8 + 72);
          int v17 = *(_DWORD *)(v8 + 88);
          uint64_t v10 = v7;
          while (1)
          {
            float v11 = std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(a1 + v10 + 48, (long long *)(a1 + v10));
            if (!v10) {
              break;
            }
            char v12 = (*a3)(&v15, a1 + v10 - 48, v11);
            v10 -= 48;
            if ((v12 & 1) == 0)
            {
              uint64_t v13 = a1 + v10 + 48;
              goto LABEL_10;
            }
          }
          uint64_t v13 = a1;
LABEL_10:
          if (*(char *)(v13 + 23) < 0) {
            operator delete(*(void **)v13);
          }
          long long v14 = *(_OWORD *)v16;
          *(_OWORD *)uint64_t v13 = v15;
          *(_OWORD *)(v13 + 16) = v14;
          *(void *)(v13 + 32) = *(void *)&v16[16];
          *(_DWORD *)(v13 + 40) = v17;
        }
        uint64_t v5 = (uint64_t)(v9 + 3);
        v7 += 48;
        uint64_t v8 = (uint64_t)v9;
      }
      while (v9 + 3 != a2);
    }
  }
}

void sub_1B2089744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, uint64_t, float))
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a1 + 48;
    if (a1 + 48 != a2)
    {
      do
      {
        uint64_t v7 = v5;
        if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v5, v4))
        {
          long long v12 = *(_OWORD *)v7;
          *(void *)uint64_t v13 = *(void *)(v7 + 16);
          *(void *)(v7 + 8) = 0;
          *(void *)(v7 + 16) = 0;
          *(void *)uint64_t v7 = 0;
          *(_OWORD *)&int v13[8] = *(_OWORD *)(v4 + 72);
          int v14 = *(_DWORD *)(v4 + 88);
          uint64_t v8 = v7;
          do
          {
            uint64_t v9 = v8;
            v8 -= 48;
            float v10 = std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(v9, (long long *)v8);
          }
          while (((*a3)(&v12, v9 - 96, v10) & 1) != 0);
          if (*(char *)(v8 + 23) < 0) {
            operator delete(*(void **)v8);
          }
          long long v11 = *(_OWORD *)v13;
          *(_OWORD *)uint64_t v8 = v12;
          *(_OWORD *)(v8 + 16) = v11;
          *(void *)(v8 + 32) = *(void *)&v13[16];
          *(_DWORD *)(v8 + 40) = v14;
        }
        uint64_t v5 = v7 + 48;
        uint64_t v4 = v7;
      }
      while (v7 + 48 != a2);
    }
  }
}

void sub_1B2089858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      float v10 = (int *)a1 + 10;
      uint64_t v11 = *((void *)a1 + 2);
      long long v12 = *a1;
      uint64_t v13 = *((void *)a3 + 2);
      *a1 = *a3;
      *((void *)a1 + 2) = v13;
      *a3 = v12;
      *((void *)a3 + 2) = v11;
      uint64_t v14 = *((void *)a1 + 3);
      *((void *)a1 + 3) = *((void *)a3 + 3);
      *((void *)a3 + 3) = v14;
      uint64_t v15 = *((void *)a1 + 4);
      *((void *)a1 + 4) = *((void *)a3 + 4);
      *((void *)a3 + 4) = v15;
      uint64_t v16 = (int *)a3 + 10;
      uint64_t result = 1;
LABEL_10:
      int v38 = *v10;
      *float v10 = *v16;
      *uint64_t v16 = v38;
      return result;
    }
    uint64_t v27 = *((void *)a1 + 2);
    long long v28 = *a1;
    uint64_t v29 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v29;
    *a2 = v28;
    *((void *)a2 + 2) = v27;
    uint64_t v30 = *((void *)a1 + 3);
    *((void *)a1 + 3) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v30;
    uint64_t v31 = *((void *)a1 + 4);
    *((void *)a1 + 4) = *((void *)a2 + 4);
    *((void *)a2 + 4) = v31;
    float v10 = (int *)a2 + 10;
    int v32 = *((_DWORD *)a1 + 10);
    *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v32;
    if ((*a4)(a3, a2))
    {
      uint64_t v33 = *((void *)a2 + 2);
      long long v34 = *a2;
      uint64_t v35 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v35;
      *a3 = v34;
      *((void *)a3 + 2) = v33;
      uint64_t v36 = *((void *)a2 + 3);
      *((void *)a2 + 3) = *((void *)a3 + 3);
      *((void *)a3 + 3) = v36;
      uint64_t v37 = *((void *)a2 + 4);
      *((void *)a2 + 4) = *((void *)a3 + 4);
      *((void *)a3 + 4) = v37;
      uint64_t v16 = (int *)a3 + 10;
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v17 = *((void *)a2 + 2);
    long long v18 = *a2;
    uint64_t v19 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v19;
    *a3 = v18;
    *((void *)a3 + 2) = v17;
    uint64_t v20 = *((void *)a2 + 3);
    *((void *)a2 + 3) = *((void *)a3 + 3);
    *((void *)a3 + 3) = v20;
    uint64_t v21 = *((void *)a2 + 4);
    *((void *)a2 + 4) = *((void *)a3 + 4);
    *((void *)a3 + 4) = v21;
    uint64_t v16 = (int *)a2 + 10;
    LODWORD(v18) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = *((_DWORD *)a3 + 10);
    *((_DWORD *)a3 + 10) = v18;
    if ((*a4)(a2, a1))
    {
      uint64_t v22 = *((void *)a1 + 2);
      long long v23 = *a1;
      uint64_t v24 = *((void *)a2 + 2);
      *a1 = *a2;
      *((void *)a1 + 2) = v24;
      *a2 = v23;
      *((void *)a2 + 2) = v22;
      uint64_t v25 = *((void *)a1 + 3);
      *((void *)a1 + 3) = *((void *)a2 + 3);
      *((void *)a2 + 3) = v25;
      uint64_t v26 = *((void *)a1 + 4);
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *((void *)a2 + 4) = v26;
      float v10 = (int *)a1 + 10;
LABEL_9:
      uint64_t result = 2;
      goto LABEL_10;
    }
  }
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<std::string,long long,long long,float> *,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&)>(uint64_t a1, unint64_t a2, uint64_t (**a3)(void **, unint64_t))
{
  unint64_t v4 = a2;
  *(_OWORD *)std::string __p = *(_OWORD *)a1;
  uint64_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  long long v19 = *(_OWORD *)(a1 + 24);
  int v20 = *(_DWORD *)(a1 + 40);
  if ((*a3)(__p, a2 - 48))
  {
    unint64_t v6 = a1;
    do
      v6 += 48;
    while (((*a3)(__p, v6) & 1) == 0);
  }
  else
  {
    unint64_t v7 = a1 + 48;
    do
    {
      unint64_t v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = (*a3)(__p, v7);
      unint64_t v7 = v6 + 48;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 -= 48;
    while (((*a3)(__p, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    long long v9 = *(_OWORD *)v6;
    uint64_t v22 = *(void *)(v6 + 16);
    long long v21 = v9;
    long long v10 = *(_OWORD *)v4;
    *(void *)(v6 + 16) = *(void *)(v4 + 16);
    *(_OWORD *)unint64_t v6 = v10;
    long long v11 = v21;
    *(void *)(v4 + 16) = v22;
    *(_OWORD *)unint64_t v4 = v11;
    uint64_t v12 = *(void *)(v6 + 24);
    *(void *)(v6 + ++*(_DWORD *)(result + 24) = *(void *)(v4 + 24);
    *(void *)(v4 + ++*(_DWORD *)(result + 24) = v12;
    uint64_t v13 = *(void *)(v6 + 32);
    *(void *)(v6 + 32) = *(void *)(v4 + 32);
    *(void *)(v4 + 32) = v13;
    LODWORD(v11) = *(_DWORD *)(v6 + 40);
    *(_DWORD *)(v6 + 40) = *(_DWORD *)(v4 + 40);
    *(_DWORD *)(v4 + 40) = v11;
    do
      v6 += 48;
    while (!(*a3)(__p, v6));
    do
      v4 -= 48;
    while (((*a3)(__p, v4) & 1) != 0);
  }
  uint64_t v14 = (void **)(v6 - 48);
  if (v6 - 48 != a1) {
    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(a1, (long long *)(v6 - 48));
  }
  if (*(char *)(v6 - 25) < 0) {
    operator delete(*v14);
  }
  long long v15 = *(_OWORD *)__p;
  *(void *)(v6 - 32) = v18;
  *(_OWORD *)uint64_t v14 = v15;
  HIBYTE(v18) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(v6 - ++*(_DWORD *)(result + 24) = v19;
  *(_DWORD *)(v6 - 8) = v20;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_1B2089C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<std::string,long long,long long,float> *,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&)>(uint64_t a1, unint64_t a2, uint64_t (**a3)(uint64_t, void **))
{
  uint64_t v6 = 0;
  uint64_t v20 = *(void *)(a1 + 16);
  int v22 = *(_DWORD *)(a1 + 40);
  *(_OWORD *)std::string __p = *(_OWORD *)a1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  long long v21 = *(_OWORD *)(a1 + 24);
  do
  {
    char v7 = (*a3)(a1 + v6 + 48, __p);
    v6 += 48;
  }
  while ((v7 & 1) != 0);
  unint64_t v8 = a1 + v6;
  if (v6 == 48)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      a2 -= 48;
    }
    while (((*a3)(a2, __p) & 1) == 0);
  }
  else
  {
    do
      a2 -= 48;
    while (!(*a3)(a2, __p));
  }
  unint64_t v9 = a1 + v6;
  if (v8 < a2)
  {
    unint64_t v10 = a2;
    do
    {
      long long v23 = *(_OWORD *)v9;
      long long v11 = v23;
      uint64_t v24 = *(void *)(v9 + 16);
      uint64_t v12 = v24;
      uint64_t v13 = *(void *)(v10 + 16);
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
      *(void *)(v9 + 16) = v13;
      *(void *)(v10 + 16) = v12;
      *(_OWORD *)unint64_t v10 = v11;
      uint64_t v14 = *(void *)(v9 + 24);
      *(void *)(v9 + ++*(_DWORD *)(result + 24) = *(void *)(v10 + 24);
      *(void *)(v10 + ++*(_DWORD *)(result + 24) = v14;
      uint64_t v15 = *(void *)(v9 + 32);
      *(void *)(v9 + 32) = *(void *)(v10 + 32);
      *(void *)(v10 + 32) = v15;
      LODWORD(v11) = *(_DWORD *)(v9 + 40);
      *(_DWORD *)(v9 + 40) = *(_DWORD *)(v10 + 40);
      *(_DWORD *)(v10 + 40) = v11;
      do
        v9 += 48;
      while (((*a3)(v9, __p) & 1) != 0);
      do
        v10 -= 48;
      while (!(*a3)(v10, __p));
    }
    while (v9 < v10);
  }
  uint64_t v16 = (void **)(v9 - 48);
  if (v9 - 48 != a1) {
    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(a1, (long long *)(v9 - 48));
  }
  if (*(char *)(v9 - 25) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)__p;
  *(void *)(v9 - 32) = v20;
  *(_OWORD *)uint64_t v16 = v17;
  HIBYTE(v20) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(v9 - ++*(_DWORD *)(result + 24) = v21;
  *(_DWORD *)(v9 - 8) = v22;
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  return v9 - 48;
}

void sub_1B2089EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v8 = (long long *)(a2 - 48);
      if ((*a3)((long long *)(a2 - 48), (long long *)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(a2 - 32);
        *(_OWORD *)a1 = *v8;
        *(void *)(a1 + 16) = v11;
        *unint64_t v8 = v10;
        *(void *)(a2 - 32) = v9;
        uint64_t v12 = *(void *)(a1 + 24);
        *(void *)(a1 + ++*(_DWORD *)(result + 24) = *(void *)(a2 - 24);
        *(void *)(a2 - ++*(_DWORD *)(result + 24) = v12;
        uint64_t v13 = *(void *)(a1 + 32);
        *(void *)(a1 + 32) = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v13;
        LODWORD(v10) = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v10;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v14 = (long long *)(a1 + 96);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v15 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v15, v14))
    {
      long long v23 = *(_OWORD *)v15;
      *(void *)uint64_t v24 = *(void *)(v15 + 16);
      *(void *)(v15 + 8) = 0;
      *(void *)(v15 + 16) = 0;
      *(void *)uint64_t v15 = 0;
      *(_OWORD *)&v24[8] = *(_OWORD *)(v15 + 24);
      uint64_t v18 = v16;
      int v25 = *(_DWORD *)(v15 + 40);
      while (1)
      {
        float v19 = std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(a1 + v18 + 144, (long long *)(a1 + v18 + 96));
        if (v18 == -96) {
          break;
        }
        char v20 = ((uint64_t (*)(long long *, uint64_t, float))*a3)(&v23, a1 + v18 + 48, v19);
        v18 -= 48;
        if ((v20 & 1) == 0)
        {
          uint64_t v21 = a1 + v18 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v21 = a1;
LABEL_12:
      if (*(char *)(v21 + 23) < 0) {
        operator delete(*(void **)v21);
      }
      long long v22 = *(_OWORD *)v24;
      *(_OWORD *)uint64_t v21 = v23;
      *(_OWORD *)(v21 + 16) = v22;
      v24[7] = 0;
      LOBYTE(v23) = 0;
      *(void *)(v21 + 32) = *(void *)&v24[16];
      *(_DWORD *)(v21 + 40) = v25;
      if (++v17 == 8) {
        return v15 + 48 == a2;
      }
    }
    uint64_t v14 = (long long *)v15;
    v16 += 48;
    v15 += 48;
    if (v15 == a2) {
      return 1;
    }
  }
}

void sub_1B208A130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    uint64_t v11 = *(void *)(a3 + 16);
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(void *)(a4 + 16) = v11;
    uint64_t v14 = *(void *)(a3 + 24);
    *(void *)(a3 + ++*(_DWORD *)(result + 24) = *(void *)(a4 + 24);
    *(void *)(a4 + ++*(_DWORD *)(result + 24) = v14;
    uint64_t v15 = *(void *)(a3 + 32);
    *(void *)(a3 + 32) = *(void *)(a4 + 32);
    *(void *)(a4 + 32) = v15;
    LODWORD(v12) = *(_DWORD *)(a3 + 40);
    *(_DWORD *)(a3 + 40) = *(_DWORD *)(a4 + 40);
    *(_DWORD *)(a4 + 40) = v12;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      uint64_t v16 = *(void *)(a2 + 16);
      long long v17 = *(_OWORD *)a2;
      uint64_t v18 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v18;
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v16;
      uint64_t v19 = *(void *)(a2 + 24);
      *(void *)(a2 + ++*(_DWORD *)(result + 24) = *(void *)(a3 + 24);
      *(void *)(a3 + ++*(_DWORD *)(result + 24) = v19;
      uint64_t v20 = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = *(void *)(a3 + 32);
      *(void *)(a3 + 32) = v20;
      LODWORD(v17) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
      *(_DWORD *)(a3 + 40) = v17;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        uint64_t v21 = *(void *)(a1 + 16);
        long long v22 = *(_OWORD *)a1;
        uint64_t v23 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v23;
        *(_OWORD *)a2 = v22;
        *(void *)(a2 + 16) = v21;
        uint64_t v24 = *(void *)(a1 + 24);
        *(void *)(a1 + ++*(_DWORD *)(result + 24) = *(void *)(a2 + 24);
        *(void *)(a2 + ++*(_DWORD *)(result + 24) = v24;
        uint64_t v25 = *(void *)(a1 + 32);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a2 + 32) = v25;
        float result = *(float *)(a1 + 40);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
        *(float *)(a2 + 40) = result;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  float v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, float))*a6)(a5, a4, v12))
  {
    uint64_t v14 = *(void *)(a4 + 16);
    long long v15 = *(_OWORD *)a4;
    uint64_t v16 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(void *)(a5 + 16) = v14;
    uint64_t v17 = *(void *)(a4 + 24);
    *(void *)(a4 + ++*(_DWORD *)(result + 24) = *(void *)(a5 + 24);
    *(void *)(a5 + ++*(_DWORD *)(result + 24) = v17;
    uint64_t v18 = *(void *)(a4 + 32);
    *(void *)(a4 + 32) = *(void *)(a5 + 32);
    *(void *)(a5 + 32) = v18;
    LODWORD(v15) = *(_DWORD *)(a4 + 40);
    *(_DWORD *)(a4 + 40) = *(_DWORD *)(a5 + 40);
    *(_DWORD *)(a5 + 40) = v15;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      uint64_t v19 = *(void *)(a3 + 16);
      long long v20 = *(_OWORD *)a3;
      uint64_t v21 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v21;
      *(_OWORD *)a4 = v20;
      *(void *)(a4 + 16) = v19;
      uint64_t v22 = *(void *)(a3 + 24);
      *(void *)(a3 + ++*(_DWORD *)(result + 24) = *(void *)(a4 + 24);
      *(void *)(a4 + ++*(_DWORD *)(result + 24) = v22;
      uint64_t v23 = *(void *)(a3 + 32);
      *(void *)(a3 + 32) = *(void *)(a4 + 32);
      *(void *)(a4 + 32) = v23;
      LODWORD(v20) = *(_DWORD *)(a3 + 40);
      *(_DWORD *)(a3 + 40) = *(_DWORD *)(a4 + 40);
      *(_DWORD *)(a4 + 40) = v20;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        uint64_t v24 = *(void *)(a2 + 16);
        long long v25 = *(_OWORD *)a2;
        uint64_t v26 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v26;
        *(_OWORD *)a3 = v25;
        *(void *)(a3 + 16) = v24;
        uint64_t v27 = *(void *)(a2 + 24);
        *(void *)(a2 + ++*(_DWORD *)(result + 24) = *(void *)(a3 + 24);
        *(void *)(a3 + ++*(_DWORD *)(result + 24) = v27;
        uint64_t v28 = *(void *)(a2 + 32);
        *(void *)(a2 + 32) = *(void *)(a3 + 32);
        *(void *)(a3 + 32) = v28;
        LODWORD(v25) = *(_DWORD *)(a2 + 40);
        *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
        *(_DWORD *)(a3 + 40) = v25;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          uint64_t v29 = *(void *)(a1 + 16);
          long long v30 = *(_OWORD *)a1;
          uint64_t v31 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v31;
          *(_OWORD *)a2 = v30;
          *(void *)(a2 + 16) = v29;
          uint64_t v32 = *(void *)(a1 + 24);
          *(void *)(a1 + ++*(_DWORD *)(result + 24) = *(void *)(a2 + 24);
          *(void *)(a2 + ++*(_DWORD *)(result + 24) = v32;
          uint64_t v33 = *(void *)(a1 + 32);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(void *)(a2 + 32) = v33;
          float result = *(float *)(a1 + 40);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
          *(float *)(a2 + 40) = result;
        }
      }
    }
  }
  return result;
}

float std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  float result = *((float *)a2 + 10);
  *(float *)(a1 + 40) = result;
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (**a4)(uint64_t, uint64_t, float), __n128 a5)
{
  if (a1 != a2)
  {
    uint64_t v7 = a2;
    uint64_t v9 = a2 - a1;
    uint64_t v10 = (a2 - a1) / 48;
    if (a2 - a1 >= 49)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      uint64_t v13 = a1 + 48 * v11;
      do
      {
        a5.n128_f32[0] = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, a4, v10, v13, a5.n128_f32[0]);
        v13 -= 48;
        --v12;
      }
      while (v12);
    }
    uint64_t v14 = v7;
    if (v7 != a3)
    {
      uint64_t v15 = v7;
      do
      {
        if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a4)(v15, a1, a5))
        {
          uint64_t v16 = *(void *)(v15 + 16);
          long long v17 = *(_OWORD *)v15;
          uint64_t v18 = *(void *)(a1 + 16);
          *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
          *(void *)(v15 + 16) = v18;
          *(_OWORD *)a1 = v17;
          *(void *)(a1 + 16) = v16;
          uint64_t v19 = *(void *)(v15 + 24);
          *(void *)(v15 + ++*(_DWORD *)(result + 24) = *(void *)(a1 + 24);
          *(void *)(a1 + ++*(_DWORD *)(result + 24) = v19;
          uint64_t v20 = *(void *)(v15 + 32);
          *(void *)(v15 + 32) = *(void *)(a1 + 32);
          *(void *)(a1 + 32) = v20;
          LODWORD(v17) = *(_DWORD *)(v15 + 40);
          *(_DWORD *)(v15 + 40) = *(_DWORD *)(a1 + 40);
          *(_DWORD *)(a1 + 40) = v17;
          a5.n128_f32[0] = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, a4, v10, a1, *(float *)&v17);
        }
        v15 += 48;
      }
      while (v15 != a3);
      uint64_t v14 = a3;
    }
    if (v9 >= 49)
    {
      unint64_t v21 = v9 / 0x30uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, v7, (unsigned int (**)(uint64_t, uint64_t))a4, v21);
        v7 -= 48;
      }
      while (v21-- > 2);
    }
    return v14;
  }
  return a3;
}

float std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t, float), uint64_t a3, uint64_t a4, float result)
{
  unint64_t v5 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v6 = a4;
    uint64_t v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 4)))
    {
      uint64_t v11 = (0x5555555555555556 * ((a4 - a1) >> 4)) | 1;
      unint64_t v12 = (long long *)(a1 + 48 * v11);
      uint64_t v13 = 0x5555555555555556 * ((a4 - a1) >> 4) + 2;
      if (v13 < a3 && ((unsigned int (*)(uint64_t, long long *))*a2)(a1 + 48 * v11, v12 + 3))
      {
        v12 += 3;
        uint64_t v11 = v13;
      }
      if ((((uint64_t (*)(long long *, uint64_t))*a2)(v12, v6) & 1) == 0)
      {
        long long v18 = *(_OWORD *)v6;
        uint64_t v19 = *(void *)(v6 + 16);
        *(void *)(v6 + 8) = 0;
        *(void *)(v6 + 16) = 0;
        *(void *)uint64_t v6 = 0;
        long long v20 = *(_OWORD *)(v6 + 24);
        float v21 = *(float *)(v6 + 40);
        do
        {
          uint64_t v14 = v12;
          float v15 = std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(v6, v12);
          if (v8 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          unint64_t v12 = (long long *)(a1 + 48 * v16);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v16;
          }
          else if ((*a2)(a1 + 48 * v16, (uint64_t)(v12 + 3), v15))
          {
            v12 += 3;
          }
          else
          {
            uint64_t v11 = v16;
          }
          uint64_t v6 = (uint64_t)v14;
        }
        while (!((unsigned int (*)(long long *, long long *))*a2)(v12, &v18));
        if (*((char *)v14 + 23) < 0) {
          operator delete(*(void **)v14);
        }
        long long v17 = v18;
        *((void *)v14 + 2) = v19;
        *uint64_t v14 = v17;
        *(long long *)((char *)v14 + ++*(_DWORD *)(result + 24) = v20;
        float result = v21;
        *((float *)v14 + 10) = v21;
      }
    }
  }
  return result;
}

void sub_1B208A85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = *(void *)a1;
    *(void *)uint64_t v16 = *(void *)(a1 + 8);
    *(void *)&v16[7] = *(void *)(a1 + 15);
    char v8 = *(unsigned char *)(a1 + 23);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v9 = *(void *)(a1 + 32);
    int v11 = *(_DWORD *)(a1 + 40);
    unint64_t v12 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, a3, a4);
    uint64_t v13 = v12;
    if (v12 == (long long *)(a2 - 48))
    {
      if (*((char *)v12 + 23) < 0) {
        operator delete(*(void **)v12);
      }
      *(void *)uint64_t v13 = v7;
      *((void *)v13 + 1) = *(void *)v16;
      *(void *)((char *)v13 + 15) = *(void *)&v16[7];
      *((unsigned char *)v13 + 23) = v8;
      *((void *)v13 + 3) = v10;
      *((void *)v13 + 4) = v9;
      *((_DWORD *)v13 + 10) = v11;
    }
    else
    {
      float v14 = std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>((uint64_t)v12, (long long *)(a2 - 48));
      uint64_t v15 = (uint64_t)(v13 + 3);
      if (*(char *)(a2 - 25) < 0) {
        operator delete(*(void **)(a2 - 48));
      }
      *(void *)(a2 - 48) = v7;
      *(void *)(a2 - 40) = *(void *)v16;
      *(void *)(a2 - 33) = *(void *)&v16[7];
      *(unsigned char *)(a2 - 25) = v8;
      *(void *)(a2 - ++*(_DWORD *)(result + 24) = v10;
      *(void *)(a2 - 16) = v9;
      *(_DWORD *)(a2 - 8) = v11;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, v15, (unsigned int (**)(long long *, uint64_t))a3, 0xAAAAAAAAAAAAAAABLL * ((v15 - a1) >> 4), v14);
    }
  }
}

void sub_1B208A9D4(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

long long *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = (long long *)(a1 + 48 * v6 + 48);
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 48 * v6 + 48, a1 + 48 * v6 + 96))
    {
      v9 += 3;
      uint64_t v10 = v11;
    }
    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(a1, v9);
    a1 = (uint64_t)v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

float std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(long long *, uint64_t), uint64_t a4, float result)
{
  unint64_t v5 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v9 = v5 >> 1;
    uint64_t v10 = (long long *)(a1 + 48 * (v5 >> 1));
    uint64_t v11 = a2 - 48;
    if ((*a3)(v10, a2 - 48))
    {
      long long v14 = *(_OWORD *)v11;
      uint64_t v15 = *(void *)(v11 + 16);
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      *(void *)uint64_t v11 = 0;
      long long v16 = *(_OWORD *)(a2 - 24);
      float v17 = *(float *)(a2 - 8);
      do
      {
        unint64_t v12 = v10;
        float v13 = std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(v11, v10);
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (long long *)(a1 + 48 * v9);
        uint64_t v11 = (uint64_t)v12;
      }
      while ((((uint64_t (*)(long long *, long long *, float))*a3)(v10, &v14, v13) & 1) != 0);
      if (*((char *)v12 + 23) < 0) {
        operator delete(*(void **)v12);
      }
      *unint64_t v12 = v14;
      *((void *)v12 + 2) = v15;
      *(long long *)((char *)v12 + ++*(_DWORD *)(result + 24) = v16;
      float result = v17;
      *((float *)v12 + 10) = v17;
    }
  }
  return result;
}

void sub_1B208ABB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void StopNgram::StopNgram(StopNgram *this, Vocab *a2, SubVocab *a3, int a4)
{
  Ngram::Ngram(this, a2, a4);
  void *v5 = &unk_1F0A356A8;
  v5[24] = a3;
}

uint64_t StopNgram::removeStopWords(StopNgram *this, const unsigned int *a2, unsigned int *a3, int a4)
{
  uint64_t v5 = (a4 - 1);
  if (a4 == 1)
  {
    int v9 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    int v9 = 0;
    while (a2[v8] != -1)
    {
      if (!(*(uint64_t (**)(void))(**((void **)this + 24) + 32))(*((void *)this + 24))) {
        a3[v9++] = a2[v8];
      }
      if (v5 == ++v8) {
        goto LABEL_10;
      }
    }
    LODWORD(v5) = v8;
  }
LABEL_10:
  a3[v9] = -1;
  return (v5 - v9);
}

float StopNgram::wordProb(StopNgram *this, uint64_t a2, const unsigned int *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  StopNgram::removeStopWords(this, a3, v6, 404);
  return LM::wordProb(this, a2, v6);
}

char *StopNgram::contextID(StopNgram *this, unsigned int a2, const unsigned int *a3, unsigned int *a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v7 = StopNgram::removeStopWords(this, a3, v9, 404);
  float result = Ngram::contextID(this, a2, v9, a4);
  *a4 += v7;
  return result;
}

float StopNgram::contextBOW(StopNgram *this, const unsigned int *a2, unsigned int a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  StopNgram::removeStopWords(this, a2, v6, 404);
  return Ngram::contextBOW(this, v6, a3);
}

void StopNgram::~StopNgram(StopNgram *this)
{
  *(void *)this = &unk_1F0A346B0;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A346B0;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::AudioAnalyticsProcessor::computeAnalytics(float **a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, int a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  long long v137 = 0u;
  long long v138 = 0u;
  long long v135 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v133 = 0u;
  *(_OWORD *)uint64_t v134 = 0u;
  long long v131 = 0u;
  *(_OWORD *)v132 = 0u;
  *(_OWORD *)uint64_t v130 = 0u;
  uint64_t v9 = kaldi::MatrixBase<float>::NumRows((uint64_t)a1);
  kaldi::Matrix<float>::Matrix((uint64_t)&v139, v9, 4, 0, 0);
  if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)a1) >= 1)
  {
    kaldi::AudioAnalyticsHelper::ExtractDesiredAudioAnalytics(a1, 228, (uint64_t)&v139);
    for (int i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v139); ++i)
    {
      double v11 = *(float *)(v139 + 4 * (int)v140 * i);
      unint64_t v12 = (char *)v134[1];
      if (v134[1] >= (void *)v135)
      {
        long long v14 = (char *)v134[0];
        int64_t v15 = ((char *)v134[1] - (char *)v134[0]) >> 3;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v135 - (unint64_t)v134[0];
        if ((uint64_t)(v135 - (unint64_t)v134[0]) >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v135, v18);
          long long v14 = (char *)v134[0];
          unint64_t v12 = (char *)v134[1];
        }
        else
        {
          uint64_t v19 = 0;
        }
        long long v20 = (double *)&v19[8 * v15];
        *long long v20 = v11;
        float v13 = v20 + 1;
        while (v12 != v14)
        {
          uint64_t v21 = *((void *)v12 - 1);
          v12 -= 8;
          *((void *)v20-- - 1) = v21;
        }
        v134[0] = v20;
        v134[1] = v13;
        *(void *)&long long v135 = &v19[8 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(double *)v134[1] = v11;
        float v13 = v12 + 8;
      }
      v134[1] = v13;
      double v22 = *(float *)(v139 + 4 * (int)v140 * i + 4);
      uint64_t v23 = (char *)v130[1];
      if (v130[1] >= (void *)v131)
      {
        long long v25 = (char *)v130[0];
        int64_t v26 = ((char *)v130[1] - (char *)v130[0]) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = v131 - (unint64_t)v130[0];
        if ((uint64_t)(v131 - (unint64_t)v130[0]) >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v131, v29);
          long long v25 = (char *)v130[0];
          uint64_t v23 = (char *)v130[1];
        }
        else
        {
          long long v30 = 0;
        }
        uint64_t v31 = (double *)&v30[8 * v26];
        *uint64_t v31 = v22;
        uint64_t v24 = v31 + 1;
        while (v23 != v25)
        {
          uint64_t v32 = *((void *)v23 - 1);
          v23 -= 8;
          *((void *)v31-- - 1) = v32;
        }
        v130[0] = v31;
        v130[1] = v24;
        *(void *)&long long v131 = &v30[8 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(double *)v130[1] = v22;
        uint64_t v24 = v23 + 8;
      }
      v130[1] = v24;
      double v33 = *(float *)(v139 + 4 * (int)v140 * i + 8);
      long long v34 = (char *)__p[1];
      if (__p[1] >= (void *)v137)
      {
        uint64_t v36 = (char *)__p[0];
        int64_t v37 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v137 - (unint64_t)__p[0];
        if ((uint64_t)(v137 - (unint64_t)__p[0]) >> 2 > v38) {
          unint64_t v38 = v39 >> 2;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v137, v40);
          uint64_t v36 = (char *)__p[0];
          long long v34 = (char *)__p[1];
        }
        else
        {
          uint64_t v41 = 0;
        }
        uint64_t v42 = (double *)&v41[8 * v37];
        *uint64_t v42 = v33;
        uint64_t v35 = v42 + 1;
        while (v34 != v36)
        {
          uint64_t v43 = *((void *)v34 - 1);
          v34 -= 8;
          *((void *)v42-- - 1) = v43;
        }
        __p[0] = v42;
        __p[1] = v35;
        *(void *)&long long v137 = &v41[8 * v40];
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        *(double *)__p[1] = v33;
        uint64_t v35 = v34 + 8;
      }
      __p[1] = v35;
      double v44 = *(float *)(v139 + 4 * (int)v140 * i + 12);
      uint64_t v45 = (char *)v132[1];
      if (v132[1] >= (void *)v133)
      {
        int v47 = (char *)v132[0];
        int64_t v48 = ((char *)v132[1] - (char *)v132[0]) >> 3;
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v50 = v133 - (unint64_t)v132[0];
        if ((uint64_t)(v133 - (unint64_t)v132[0]) >> 2 > v49) {
          unint64_t v49 = v50 >> 2;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        if (v51)
        {
          uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v133, v51);
          int v47 = (char *)v132[0];
          uint64_t v45 = (char *)v132[1];
        }
        else
        {
          uint64_t v52 = 0;
        }
        uint64_t v53 = (double *)&v52[8 * v48];
        *uint64_t v53 = v44;
        int v46 = v53 + 1;
        while (v45 != v47)
        {
          uint64_t v54 = *((void *)v45 - 1);
          v45 -= 8;
          *((void *)v53-- - 1) = v54;
        }
        v132[0] = v53;
        v132[1] = v46;
        *(void *)&long long v133 = &v52[8 * v51];
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *(double *)v132[1] = v44;
        int v46 = v45 + 8;
      }
      v132[1] = v46;
    }
  }
  *((double *)&v131 + 1) = (double)a3;
  *((double *)&v133 + 1) = (double)a3;
  *((double *)&v135 + 1) = (double)a3;
  *((double *)&v137 + 1) = (double)a3;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v139);
  if ((a6 & 1) == 0)
  {
    if (v132[1] != v132[0])
    {
      unint64_t v69 = 0;
      do
      {
        quasar::calculateRelativeJitter((uint64_t *)v130, a5, v69, (unint64_t)((char *)v130[1] - (char *)v130[0]) >> 3);
        quasar::calculateAbsoluteShimmer((uint64_t *)v132, a5, v69++, (unint64_t)((char *)v132[1] - (char *)v132[0]) >> 3);
      }
      while (v69 < ((char *)v132[1] - (char *)v132[0]) >> 3);
    }
    goto LABEL_155;
  }
  long long v58 = (double *)__p[0];
  uint64_t v57 = __p[1];
  if (__p[1] != __p[0])
  {
    double v59 = 0.0;
    do
    {
      double v60 = *v58++;
      double v59 = v59 + v60;
    }
    while (v58 != __p[1]);
    double v61 = v59 / (double)(unint64_t)(((char *)__p[1] - (char *)__p[0]) >> 3);
    double v62 = quasar::computeStdDev((double **)__p, v61);
    uint64_t v156 = 0;
    v157 = 0;
    uint64_t v158 = 0;
    std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v156, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
    uint64_t v63 = v156;
    float v64 = v157;
    if (v156 == v157)
    {
      double v66 = 0.0;
    }
    else
    {
      uint64_t v65 = v156;
      do
      {
        double *v65 = (*v65 - v61) / v62;
        ++v65;
      }
      while (v65 != v64);
      double v66 = 0.0;
      float v67 = v63;
      do
      {
        double v68 = *v67++;
        double v66 = v66 + v68;
      }
      while (v67 != v64);
    }
    double v70 = quasar::computeStdDev(&v156, v66 / (double)(unint64_t)(v64 - v63));
    if (quasar::gLogLevel <= 5)
    {
      HIDWORD(v55) = 1069128089;
      double v71 = v70 * 0.1;
    }
    else
    {
      long long v154 = 0u;
      long long v155 = 0u;
      long long v152 = 0u;
      long long v153 = 0u;
      long long v150 = 0u;
      long long v151 = 0u;
      long long v148 = 0u;
      long long v149 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      long long v144 = 0u;
      long long v145 = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      long long v140 = 0u;
      long long v141 = 0u;
      long long v139 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v139);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v139, (uint64_t)"Voicing threshold=", 18);
      double v71 = v70 * 0.1;
      uint64_t v72 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" mean=", 6);
      int v73 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" stddev=", 8);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v139);
    }
    unsigned int v74 = a4;
    float v75 = v71;
    int64_t v76 = (char *)__p[1] - (char *)__p[0];
    unint64_t v77 = (unint64_t)((char *)__p[1] - (char *)__p[0]) >> 3;
    v128 = 0;
    int v129 = 0;
    int v127 = 0;
    uint64_t v78 = v156;
    int v79 = v157;
    if (v157 == v156)
    {
      uint64_t v80 = 0;
      if (!v77) {
        goto LABEL_131;
      }
    }
    else
    {
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      unsigned int v82 = 0;
      unsigned int v83 = 0;
      double v84 = v75;
      do
      {
        double v55 = v78[v81];
        if (v55 <= v84)
        {
          if (v82)
          {
            double v55 = v78[v82 - 1];
            if (v55 > v84)
            {
              if (v82 - v83 <= v74)
              {
                unsigned int v83 = v82;
              }
              else
              {
                uint64_t v85 = v81 << 32;
                if (v80 >= v129)
                {
                  uint64_t v86 = v80 - v127;
                  if ((unint64_t)(v86 + 1) >> 61) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v87 = ((char *)v129 - (char *)v127) >> 2;
                  if (v87 <= v86 + 1) {
                    unint64_t v87 = v86 + 1;
                  }
                  if ((unint64_t)((char *)v129 - (char *)v127) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v88 = v87;
                  }
                  if (v88) {
                    long long v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v129, v88);
                  }
                  else {
                    long long v89 = 0;
                  }
                  int v90 = (unint64_t *)&v89[8 * v86];
                  *int v90 = v85 | v83;
                  uint64_t v80 = v90 + 1;
                  int v91 = v128;
                  if (v128 != v127)
                  {
                    do
                    {
                      unint64_t v92 = *--v91;
                      *--int v90 = v92;
                    }
                    while (v91 != v127);
                    int v91 = v127;
                  }
                  int v127 = v90;
                  int v129 = (unint64_t *)&v89[8 * v88];
                  if (v91) {
                    operator delete(v91);
                  }
                  unsigned int v74 = a4;
                }
                else
                {
                  *v80++ = v85 | v83;
                }
                v128 = v80;
                unsigned int v83 = v82;
                uint64_t v78 = v156;
                int v79 = v157;
              }
            }
          }
          ++v83;
        }
        uint64_t v81 = ++v82;
      }
      while (v82 < (unint64_t)(v79 - v78));
      if (v83)
      {
        if (v83 >= v77)
        {
LABEL_132:
          if (!v78)
          {
LABEL_134:
            double v95 = v127;
            if (v127 != v80)
            {
              int v96 = quasar::gLogLevel;
              do
              {
                if (v96 >= 6)
                {
                  long long v154 = 0u;
                  long long v155 = 0u;
                  long long v152 = 0u;
                  long long v153 = 0u;
                  long long v150 = 0u;
                  long long v151 = 0u;
                  long long v148 = 0u;
                  long long v149 = 0u;
                  long long v146 = 0u;
                  long long v147 = 0u;
                  long long v144 = 0u;
                  long long v145 = 0u;
                  long long v142 = 0u;
                  long long v143 = 0u;
                  long long v140 = 0u;
                  long long v141 = 0u;
                  long long v139 = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v139);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v139, (uint64_t)"Voiced region start: ", 21);
                  int v97 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" end:", 5);
                  std::ostream::operator<<();
                  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v139);
                  int v96 = quasar::gLogLevel;
                }
                ++v95;
              }
              while (v95 != v80);
              uint64_t v80 = v127;
            }
            if (v128 != v80)
            {
              uint64_t v99 = v130[0];
              unsigned int v98 = v130[1];
              if (v130[1] != v130[0])
              {
                int64_t v100 = 0;
                unsigned int v101 = 0;
                do
                {
                  if (v101 >= (unint64_t)(v128 - v80))
                  {
                    v99[v100] = 0;
                    *((void *)v134[0] + v100) = 0;
                    *((void *)v132[0] + v100++) = 0;
                  }
                  else
                  {
                    if (v100 >= SLODWORD(v80[v101]))
                    {
                      int64_t v102 = SHIDWORD(v80[v101]);
                      if (v100 < v102)
                      {
                        quasar::calculateRelativeJitter((uint64_t *)v130, a5, v100, v102);
                        quasar::calculateAbsoluteShimmer((uint64_t *)v132, a5, v100, HIDWORD(v127[v101]));
                        uint64_t v80 = v127;
                        unsigned int v98 = v130[1];
                      }
                    }
                    else
                    {
                      v99[v100] = 0;
                      *((void *)v134[0] + v100) = 0;
                      *((void *)v132[0] + v100) = 0;
                    }
                    if (SHIDWORD(v80[v101]) <= (int)++v100) {
                      ++v101;
                    }
                    uint64_t v99 = v130[0];
                  }
                }
                while (v100 < (unint64_t)((v98 - (unsigned char *)v99) >> 3));
              }
            }
            if (v80) {
              operator delete(v80);
            }
LABEL_155:
            uint64_t v103 = *a2;
            if (*a2)
            {
              std::string v104 = *(uint64_t **)v103;
              if (*(void *)v103 != *(void *)(v103 + 8))
              {
                uint64_t v105 = *v104;
                uint64_t v106 = v104[1];
                if (*v104 != v106)
                {
                  unint64_t v107 = (v106 - v105) / 224;
                  LODWORD(v55) = *(_DWORD *)(v106 - 188);
                  LODWORD(v56) = *(_DWORD *)(v105 + 28);
                  double v108 = (double)*(unint64_t *)&v55 - (double)v56;
                  double v109 = -1.0;
                  double v110 = -1.0;
                  if (v108 > 0.0) {
                    double v110 = (double)v107 / (v108 / 1000.0 / 60.0);
                  }
                  *(double *)&long long v138 = v110;
                  if (v107 != 1)
                  {
                    uint64_t v111 = (_DWORD *)(v105 + 36);
                    double v112 = 0.0;
                    for (uint64_t j = 1; j != v107; ++j)
                    {
                      double v112 = v112 + (double)(*v111 - *(v111 - 2));
                      v111 += 56;
                    }
                    if (v107 > 1) {
                      double v109 = v112 / 1000.0 / (double)(v107 - 1);
                    }
                  }
                  *((double *)&v138 + 1) = v109;
                }
              }
            }
            *(_OWORD *)a7 = *(_OWORD *)v130;
            *(void *)(a7 + 16) = v131;
            v130[0] = 0;
            v130[1] = 0;
            *(void *)(a7 + ++*(_DWORD *)(result + 24) = *((void *)&v131 + 1);
            *(_OWORD *)(a7 + 32) = *(_OWORD *)v132;
            *(void *)(a7 + 48) = v133;
            *(void *)&long long v131 = 0;
            v132[0] = 0;
            v132[1] = 0;
            *(void *)&long long v133 = 0;
            *(void *)(a7 + 56) = *((void *)&v133 + 1);
            *(_OWORD *)(a7 + 64) = *(_OWORD *)v134;
            *(void *)(a7 + 80) = v135;
            v134[0] = 0;
            v134[1] = 0;
            *(void *)(a7 + 88) = *((void *)&v135 + 1);
            *(_OWORD *)(a7 + 96) = *(_OWORD *)__p;
            *(void *)(a7 + 112) = v137;
            *(void *)&long long v135 = 0;
            __p[0] = 0;
            __p[1] = 0;
            *(void *)&long long v137 = 0;
            *(void *)(a7 + 120) = *((void *)&v137 + 1);
            *(_OWORD *)(a7 + 128) = v138;
            goto LABEL_167;
          }
LABEL_133:
          v157 = v78;
          operator delete(v78);
          uint64_t v80 = v128;
          goto LABEL_134;
        }
LABEL_123:
        double v55 = v78[(v77 - 1)];
        if (v55 > v84 && ~v83 + v77 > v74)
        {
          unint64_t v94 = (v76 << 29) & 0xFFFFFFFF00000000;
          if (v80 >= v129)
          {
            uint64_t v114 = v80 - v127;
            if ((unint64_t)(v114 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v115 = ((char *)v129 - (char *)v127) >> 2;
            if (v115 <= v114 + 1) {
              unint64_t v115 = v114 + 1;
            }
            if ((unint64_t)((char *)v129 - (char *)v127) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v116 = v115;
            }
            if (v116) {
              int v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v129, v116);
            }
            else {
              int v117 = 0;
            }
            uint64_t v118 = (unint64_t *)&v117[8 * v114];
            int v119 = &v117[8 * v116];
            unint64_t *v118 = v94 | v83;
            uint64_t v80 = v118 + 1;
            uint64_t v120 = v128;
            if (v128 != v127)
            {
              do
              {
                unint64_t v121 = *--v120;
                *--uint64_t v118 = v121;
              }
              while (v120 != v127);
              uint64_t v120 = v127;
            }
            int v127 = v118;
            int v129 = (unint64_t *)v119;
            if (v120) {
              operator delete(v120);
            }
          }
          else
          {
            *v80++ = v94 | v83;
          }
          v128 = v80;
          uint64_t v78 = v156;
          if (!v156) {
            goto LABEL_134;
          }
        }
        goto LABEL_133;
      }
      int v79 = v78;
      if (!v77)
      {
LABEL_131:
        uint64_t v78 = v79;
        goto LABEL_132;
      }
    }
    unsigned int v83 = 0;
    double v84 = v75;
    uint64_t v78 = v79;
    goto LABEL_123;
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v150 = 0u;
    long long v151 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v144 = 0u;
    long long v145 = 0u;
    long long v142 = 0u;
    long long v143 = 0u;
    long long v140 = 0u;
    long long v141 = 0u;
    long long v139 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v139);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v139, (uint64_t)"Missing voicing regions in audio analytics", 42);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v139);
    uint64_t v57 = __p[0];
  }
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)a7 = 0u;
  if (v57)
  {
    __p[1] = v57;
    operator delete(v57);
  }
LABEL_167:
  if (v134[0])
  {
    v134[1] = v134[0];
    operator delete(v134[0]);
  }
  if (v132[0])
  {
    v132[1] = v132[0];
    operator delete(v132[0]);
  }
  if (v130[0])
  {
    v130[1] = v130[0];
    operator delete(v130[0]);
  }
}

void sub_1B208BBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v41 = *(void **)(v39 - 152);
  if (v41)
  {
    *(void *)(v39 - 144) = v41;
    operator delete(v41);
  }
  quasar::AudioAnalytics::~AudioAnalytics((quasar::AudioAnalytics *)&a21);
  _Unwind_Resume(a1);
}

uint64_t *quasar::calculateRelativeJitter(uint64_t *result, int a2, int a3, int a4)
{
  int v4 = a3 + a2;
  if (a3 + a2 >= a4) {
    int v4 = a4;
  }
  uint64_t v5 = (v4 + ~a3);
  uint64_t v6 = *result;
  if ((int)v5 <= 0)
  {
    *(void *)(v6 + 8 * a3) = 0;
  }
  else
  {
    uint64_t v7 = (double *)(v6 + 8 * a3 + 8);
    float v8 = 0.0;
    uint64_t v9 = v5;
    float v10 = 0.0;
    do
    {
      double v11 = *(v7 - 1);
      float v10 = vabdd_f64(v11, *v7) + v10;
      float v8 = v11 + v8;
      ++v7;
      --v9;
    }
    while (v9);
    *(void *)(v6 + 8 * a3) = 0;
    float v12 = v8 / (float)(int)v5;
    if (v12 > 0.0) {
      *(double *)(v6 + 8 * a3) = (float)((float)((float)(v10 * 100.0) / (float)(int)v5) / v12);
    }
  }
  return result;
}

void quasar::calculateAbsoluteShimmer(uint64_t *a1, int a2, int a3, int a4)
{
  int v4 = a3 + a2;
  if (a3 + a2 >= a4) {
    int v4 = a4;
  }
  int v5 = v4 + ~a3;
  uint64_t v6 = *a1;
  uint64_t v7 = a3;
  if (v5 <= 0)
  {
    *(void *)(v6 + 8 * a3) = 0;
  }
  else
  {
    float v8 = (double *)(v6 + 8 * a3 + 8);
    double v9 = 0.0;
    uint64_t v10 = (v4 + ~a3);
    do
    {
      double v11 = 0.0;
      if (*v8 != 0.0) {
        double v11 = fabs(log10(*(v8 - 1) / *v8));
      }
      double v9 = v9 + v11;
      ++v8;
      --v10;
    }
    while (v10);
    *(void *)(v6 + 8 * v7) = 0;
    double v12 = v9 * 20.0 / (double)v5;
    if (v12 > 0.0) {
      *(double *)(v6 + 8 * v7) = v12;
    }
  }
}

double quasar::computeStdDev(double **a1, double a2)
{
  std::vector<double>::vector(&__p, a1[1] - *a1);
  int v5 = *a1;
  int v4 = a1[1];
  uint64_t v6 = (double *)__p;
  if (v5 != v4)
  {
    uint64_t v7 = v5;
    float v8 = (double *)__p;
    do
    {
      double v9 = *v7++;
      *v8++ = v9 - a2;
    }
    while (v7 != v4);
  }
  double v10 = 0.0;
  if (v6 != v15)
  {
    double v11 = v6;
    do
    {
      double v12 = *v11++;
      double v10 = v10 + v12 * v12;
    }
    while (v11 != v15);
  }
  if (v6)
  {
    int64_t v15 = v6;
    operator delete(v6);
  }
  return sqrt(v10 / (double)(unint64_t)(v4 - v5));
}

void fst::Determinize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, __n128 a2, uint64_t a3, int *a4)
{
  v6[0] = FLAGS_fst_default_cache_gc;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v8 = *a4;
  a2.n128_u64[0] = *(void *)(a4 + 3);
  unint64_t v9 = a2.n128_u64[0];
  char v10 = *((unsigned char *)a4 + 20);
  uint64_t v7 = 0;
  v13[0] = 0.0;
  LODWORD(v13[0]) = a4[1];
  LODWORD(v5[0]) = 2139095040;
  a2.n128_f32[0] = v13[0];
  if (v13[0] == INFINITY && a4[2] == -1) {
    fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(v13, a1, (uint64_t)v6);
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void, __n128))(*(void *)a1 + 64))(a1, 0x10000, 0, a2))
  {
    memset(v5, 0, sizeof(v5));
    fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, (uint64_t)v5, 1);
  }
  fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(v13, a1, (uint64_t)v6);
}

void sub_1B208C0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v15 - 64));
  _Unwind_Resume(a1);
}

void quasar::RealignAmFusionDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  quasar::ForceAlignDecoderBase::registerParams(this, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "am-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Acoustic model (transition model) filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 107), (uint64_t)__p, 1, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic likelihoods");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 116), (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "ctc-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for ctcScale");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 932, (uint64_t)__p, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map model into memory (requires aligned models)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 117), (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Name of nnet model file. Don't provide this file if frontend has performed the AM backend logic");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 110), (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "skip-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames to be skipped in nnet computation.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 940, (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "class-frame-counts-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing vector with frame-counts of pdfs to compute log-priors. This is the same as class-frame-counts, but allows paths that are relative to the json config file (class-frame-counts requires absolute paths). If class-frame-counts is also specified, this param will override it.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 120), (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of nbest for am-fusion");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 118), (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "pre-aligned-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "the final weight will be computed as preAlignedScale * preAlignedCost + postAlignedScale * postAlignedCost");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 948, (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "post-aligned-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "the final weight will be computed as preAlignedScale * preAlignedCost + postAlignedScale * postAlignedCost");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 119), (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "ilabel-score-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "(experimental) score lookup table of the T transducer");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 113), (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "experimental-new-merge-algo");
  std::string::basic_string[abi:ne180100]<0>(__p, "(experimental) Use new lattice merging algorithm");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 133), (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B208C640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::RealignAmFusionDecoder::finishInit(quasar::RealignAmFusionDecoder *this)
{
}

void sub_1B208C8C8(_Unwind_Exception *a1)
{
  kaldi::Input::~Input((kaldi::Input *)(v1 - 40));
  _Unwind_Resume(a1);
}

void quasar::RealignAmFusionDecoder::runImpl()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  fst::NbestAsFsts<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>();
}

void fst::RemoveEpsLocal<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1)
{
  fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEpsLocalClass(&v1, a1);
  if (__p)
  {
    char v5 = __p;
    operator delete(__p);
  }
  if (v2)
  {
    uint64_t v3 = v2;
    operator delete(v2);
  }
}

void fst::ConvertLatticeSkinny<fst::LatticeWeightTpl<float>,fst::TropicalWeightTpl<float>,int>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  int v5 = v4;
  if (v4 >= 1)
  {
    int v6 = v4;
    do
    {
      (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
      --v6;
    }
    while (v6);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v7);
  if (v5 < 1) {
    return;
  }
  uint64_t v8 = 0;
  do
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v15, a1, v8);
    v11[0] = *((float *)&v15 + 1);
    LODWORD(v12[0]) = v15;
    int v19 = 2139095040;
    float v18 = INFINITY;
    if (*(float *)&v15 != INFINITY || v11[0] != v18 || v17 != __p) {
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)a2 + 184))(a2, v8, 0.0);
    }
    unint64_t v14 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v8, v12);
    while (1)
    {
      if (!v12[0])
      {
        if (v14 >= v12[2]) {
          goto LABEL_22;
        }
LABEL_16:
        uint64_t v9 = v12[1] + 48 * v14;
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(void))(*(void *)v12[0] + 24))(v12[0])) {
        break;
      }
      if (!v12[0]) {
        goto LABEL_16;
      }
      uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v12[0] + 32))();
LABEL_17:
      v11[0] = *(float *)v9;
      v11[1] = v11[0];
      float v10 = *(float *)(v9 + 40);
      v11[2] = 0.0;
      v11[3] = v10;
      (*(void (**)(uint64_t, uint64_t, float *))(*(void *)a2 + 208))(a2, v8, v11);
      if (v12[0]) {
        (*(void (**)(void))(*(void *)v12[0] + 40))(v12[0]);
      }
      else {
        ++v14;
      }
    }
    if (v12[0])
    {
      (*(void (**)(void))(*(void *)v12[0] + 8))();
      goto LABEL_24;
    }
LABEL_22:
    if (v13) {
      --*v13;
    }
LABEL_24:
    if (__p)
    {
      uint64_t v17 = __p;
      operator delete(__p);
    }
    uint64_t v8 = (v8 + 1);
  }
  while (v8 != v5);
}

void sub_1B208F63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::RealignAmFusionDecoder::redecodeLattice(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)a2 + 64))();
  int v7 = (*(uint64_t (**)(void))(**(void **)a2 + 32))();
  int v8 = (*(uint64_t (**)(void))(**(void **)a2 + 40))();
  quasar::RealignAmFusionDecoder::redecodeLattice(a1, v6, v7, v8, a3);
}

void quasar::RealignAmFusionDecoder::updateResultLatticeWithRescoreLatticeNew(uint64_t a1, void *a2, unsigned int (**a3)(void), float a4, float a5, uint64_t a6, int a7)
{
  int v53 = a7;
  (*(void (**)(void *, uint64_t, uint64_t))(*a2 + 64))(a2, 0x40000, 1);
  (*((void (**)(unsigned int (**)(void), uint64_t, uint64_t))*a3 + 8))(a3, 0x40000, 1);
  std::vector<std::vector<double>>::vector(v35, 2uLL);
  v36[0] = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v35[0], 2uLL, v36);
  v36[0] = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v35[0] + 24, 2uLL, v36);
  uint64_t v12 = v35[0];
  **(double **)v35[0] = a5;
  *(double *)(v12[3] + 8) = a5;
  fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>((double ***)v35, (uint64_t)a2);
  v36[0] = v35;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v36);
  std::vector<std::vector<double>>::vector(v35, 2uLL);
  v36[0] = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v35[0], 2uLL, v36);
  v36[0] = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v35[0] + 24, 2uLL, v36);
  float v13 = v35[0];
  **(double **)v35[0] = a4;
  *(double *)(v13[3] + 8) = a4;
  fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>((double ***)v35, (uint64_t)a3);
  v36[0] = v35;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v36);
  fst::ArcSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t)a3);
  v52[0] = (unsigned int (**)(void))&unk_1F0A3F8B8;
  v52[1] = a3;
  (*((void (**)(unsigned int (**)(void), uint64_t, uint64_t))*a3 + 8))(a3, 268697600, 1);
  uint64_t v50 = 0;
  unint64_t v51 = 0;
  kaldi::RescoreCompactLatticeWithDeterministicOnDemandCompactLattice(v52, v53, a2, &v50, 0);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  long long v47 = 0u;
  long long v48 = 0u;
  int v49 = 1065353216;
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v45 = v46;
  int v14 = v53;
  v35[0] = &v53;
  uint64_t v15 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v47, &v53, (uint64_t)&std::piecewise_construct, (_DWORD **)v35);
  *((_DWORD *)v15 + 5) = v14;
  *((_DWORD *)v15 + 6) = -1;
  unint64_t v16 = *(void *)(a2[1] + 72) - *(void *)(a2[1] + 64);
  if ((int)(v16 >> 3) >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v34 = (v16 >> 3);
    do
    {
      uint64_t v41 = &unk_1F0A3E980;
      unint64_t v44 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)a2);
      uint64_t v18 = a2[1];
      uint64_t v19 = *(void *)(*(void *)(v18 + 64) + 8 * v17);
      uint64_t v42 = v19;
      uint64_t v43 = v18 + 8;
      for (unint64_t i = v44; ; unint64_t i = ++v44)
      {
        uint64_t v21 = *(void *)(v19 + 48);
        if (i >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v19 + 56) - v21) >> 4)) {
          break;
        }
        uint64_t v22 = v21 + 48 * i;
        v36[0] = *(void ***)v22;
        v36[1] = *(void ***)(v22 + 8);
        unint64_t v38 = 0;
        uint64_t v39 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v22 + 16), *(void *)(v22 + 24), (uint64_t)(*(void *)(v22 + 24) - *(void *)(v22 + 16)) >> 2);
        int v40 = *(_DWORD *)(v21 + 48 * i + 40);
        int v23 = (int)v36[0];
        if (LODWORD(v36[0]) == v53)
        {
          v54[0] = (int)v36[0];
        }
        else
        {
          v54[0] = DWORD2(v48);
          int v24 = HIDWORD(v36[0]);
          v35[0] = v54;
          long long v25 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v47, v54, (uint64_t)&std::piecewise_construct, (_DWORD **)v35);
          *((_DWORD *)v25 + 5) = v23;
          *((_DWORD *)v25 + 6) = v24;
        }
        uint64_t v26 = *(void *)(a1 + 704);
        uint64_t v29 = *(void *)(v26 + 40);
        uint64_t v27 = v26 + 40;
        uint64_t v28 = v29;
        if (v29)
        {
          uint64_t v30 = v27;
          do
          {
            int v31 = *(_DWORD *)(v28 + 28);
            BOOL v32 = v31 < SLODWORD(v36[0]);
            if (v31 >= SLODWORD(v36[0])) {
              double v33 = (uint64_t *)v28;
            }
            else {
              double v33 = (uint64_t *)(v28 + 8);
            }
            if (!v32) {
              uint64_t v30 = v28;
            }
            uint64_t v28 = *v33;
          }
          while (*v33);
          if (v30 != v27 && SLODWORD(v36[0]) >= *(_DWORD *)(v30 + 28)) {
            std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v45, v54, v54);
          }
        }
        if (v54[0] <= 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"acceptorLabel > 0", 17);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v35);
        }
        LODWORD(v36[0]) = v54[0];
        HIDWORD(v36[0]) = v54[0];
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&v41, (float *)v36);
        if (__p)
        {
          unint64_t v38 = __p;
          operator delete(__p);
        }
        uint64_t v19 = v42;
      }
      ++v17;
    }
    while (v17 != v34);
  }
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst();
}

void quasar::RealignAmFusionDecoder::redecodeLattice(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  float v8 = (float)(a3 / a4);
  int v9 = kaldi::MatrixBase<float>::NumRows(a2);
  if (v9 >= (int)(float)((float)a5 * v8)) {
    int v10 = (int)(float)((float)a5 * v8);
  }
  else {
    int v10 = v9;
  }
  if (quasar::gLogLevel >= 4)
  {
    memset(v22, 0, sizeof(v22));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"fusion features total: ", 23);
    kaldi::MatrixBase<float>::NumRows(a2);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" relevant: ", 11);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v22);
  }
  double v12 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)v22, a2, 0, v10, 0, *(_DWORD *)(a2 + 8));
  kaldi::Matrix<float>::Matrix(v21, v22, 111, v12);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
  uint64_t v13 = *(void *)(a1 + 1008);
  v14.n128_u32[0] = *(_DWORD *)(a1 + 928);
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 1032);
  uint64_t v19 = *(void *)(a1 + 1024);
  long long v20 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = *(std::__shared_weak_count **)(a1 + 1000);
  uint64_t v17 = *(void *)(a1 + 992);
  uint64_t v18 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  kaldi::DecodableMatrixScaledMappedLazyNnet1::DecodableMatrixScaledMappedLazyNnet1(v22, v13, v21, &v19, &v17, *(unsigned int *)(a1 + 940), 10240, v14);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  quasar::RealignAmFusionDecoder::redecodeLattice();
}

void sub_1B2090598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::DecodableMatrixScaledMappedLazyNnet1::~DecodableMatrixScaledMappedLazyNnet1((kaldi::DecodableMatrixScaledMappedLazyNnet1 *)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::RealignAmFusionDecoder::redecodeLattice()
{
}

void sub_1B209212C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,void *a35)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&STACK[0x2E0]);
  (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  kaldi::ScoreCacheFasterDecoder::~ScoreCacheFasterDecoder((kaldi::ScoreCacheFasterDecoder *)&a35);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v37 - 216));
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v37 - 192));
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::~__hash_table(v37 - 176);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<quasar::PronChoice>>::emplace_back<std::vector<quasar::PronChoice>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  int v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    __n128 v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)__n128 v14 = 0;
    *(_OWORD *)__n128 v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    _OWORD v17[2] = v14 + 24;
    std::vector<std::vector<quasar::PronChoice>>::__swap_out_circular_buffer(a1, v17);
    float v8 = (void *)a1[1];
    std::__split_buffer<std::vector<quasar::PronChoice>>::~__split_buffer(v17);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    _DWORD v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    _DWORD v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    float v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1B2092888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::PronChoice>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::RealignAmFusionDecoder::supportsEager(quasar::RealignAmFusionDecoder *this)
{
  return 1;
}

void quasar::RealignAmFusionDecoder::~RealignAmFusionDecoder(quasar::RealignAmFusionDecoder *this)
{
  quasar::RealignAmFusionDecoder::~RealignAmFusionDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F0A56300;
  kaldi::Vector<float>::Destroy((uint64_t)this + 1040);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 129);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 127);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 125);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 983) < 0) {
    operator delete(*((void **)this + 120));
  }
  if (*((char *)this + 927) < 0) {
    operator delete(*((void **)this + 113));
  }
  if (*((char *)this + 903) < 0) {
    operator delete(*((void **)this + 110));
  }
  if (*((char *)this + 879) < 0) {
    operator delete(*((void **)this + 107));
  }
  quasar::ForceAlignDecoderBase::~ForceAlignDecoderBase(this);
}

uint64_t quasar::getInfoFromLinearLattice(void *a1, kaldi::WordBoundaryInfo **a2, kaldi::TransitionModel *a3, int a4, uint64_t a5, kaldi::LatticeScoreCache *a6, int **a7, int **a8, uint64_t *a9)
{
  a7[1] = *a7;
  a8[1] = *a8;
  std::__list_imp<quasar::Word>::clear(a9);
  uint64_t v15 = *a2;
  uint64_t v16 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  if (v16 == -1) {
    return 0;
  }
  uint64_t v17 = v16;
  long long v144 = a3;
  long long v141 = v15;
  long long v139 = a2;
  int v18 = (*(uint64_t (**)(void *))(*a1 + 160))(a1);
  long long v145 = a8;
  uint64_t v146 = (uint64_t)(a7 + 2);
  uint64_t v140 = (uint64_t)(a8 + 2);
  while (1)
  {
    (*(void (**)(void **__return_ptr, void *, uint64_t))(*a1 + 32))(__p, a1, v17);
    LODWORD(v147[0]) = HIDWORD(__p[0]);
    LODWORD(v149) = __p[0];
    int v170 = 2139095040;
    float v169 = INFINITY;
    v19.n128_u32[0] = (unsigned __int32)__p[0];
    if (*(float *)__p == INFINITY)
    {
      v19.n128_u32[0] = (unsigned __int32)v147[0];
      long long v20 = __p[1];
      BOOL v21 = *(float *)v147 == v169 && (void *)v153 == __p[1];
    }
    else
    {
      BOOL v21 = 0;
      long long v20 = __p[1];
    }
    BOOL v22 = v18 > 0 && v21;
    if (v20)
    {
      *(void *)&long long v153 = v20;
      operator delete(v20);
    }
    if (!v22) {
      break;
    }
    uint64_t v23 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * (int)v17) + 48);
    uint64_t v24 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * (int)v17) + 56);
    uint64_t v25 = v24 - v23;
    if (v24 == v23) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * (int)v17) + 48);
    }
    if (v24 == v23)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "!aiter.Done()");
      goto LABEL_190;
    }
    uint64_t v27 = *(int **)(v23 + 16);
    uint64_t v28 = *(int **)(v23 + 24);
    while (v27 != v28)
    {
      int v29 = *v27;
      if (*v27 >= 1)
      {
        int v31 = a7[1];
        unint64_t v30 = (unint64_t)a7[2];
        if ((unint64_t)v31 >= v30)
        {
          double v33 = *a7;
          uint64_t v34 = v31 - *a7;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v36 = v30 - (void)v33;
          if (v36 >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            unint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v146, v37);
            double v33 = *a7;
            int v31 = a7[1];
            int v29 = *v27;
          }
          else
          {
            unint64_t v38 = 0;
          }
          uint64_t v39 = (int *)&v38[4 * v34];
          *uint64_t v39 = v29;
          BOOL v32 = v39 + 1;
          while (v31 != v33)
          {
            int v40 = *--v31;
            *--uint64_t v39 = v40;
          }
          *a7 = v39;
          a7[1] = v32;
          a7[2] = (int *)&v38[4 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *int v31 = v29;
          BOOL v32 = v31 + 1;
        }
        a7[1] = v32;
      }
      ++v27;
    }
    int v41 = *(_DWORD *)(v26 + 4);
    if (v41 > 0)
    {
      uint64_t v43 = v145[1];
      unint64_t v42 = (unint64_t)v145[2];
      if ((unint64_t)v43 >= v42)
      {
        uint64_t v45 = *v145;
        uint64_t v46 = v43 - *v145;
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v48 = v42 - (void)v45;
        if (v48 >> 1 > v47) {
          unint64_t v47 = v48 >> 1;
        }
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v47;
        }
        if (v49)
        {
          uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v140, v49);
          uint64_t v45 = *v145;
          uint64_t v43 = v145[1];
          int v41 = *(_DWORD *)(v26 + 4);
        }
        else
        {
          uint64_t v50 = 0;
        }
        unint64_t v51 = (int *)&v50[4 * v46];
        *unint64_t v51 = v41;
        unint64_t v44 = v51 + 1;
        while (v43 != v45)
        {
          int v52 = *--v43;
          *--unint64_t v51 = v52;
        }
        *long long v145 = v51;
        v145[1] = v44;
        v145[2] = (int *)&v50[4 * v49];
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *uint64_t v43 = v41;
        unint64_t v44 = v43 + 1;
      }
      v145[1] = v44;
    }
    if (0xAAAAAAAAAAAAAAABLL * (v25 >> 4) >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "aiter.Done()");
      goto LABEL_190;
    }
    uint64_t v17 = *(unsigned int *)(v26 + 40);
    --v18;
  }
  (*(void (**)(void **__return_ptr, void *, uint64_t, __n128))(*a1 + 32))(__p, a1, v17, v19);
  LODWORD(v147[0]) = HIDWORD(__p[0]);
  LODWORD(v149) = __p[0];
  int v170 = 2139095040;
  float v169 = INFINITY;
  v53.n128_u32[0] = (unsigned __int32)__p[0];
  if (*(float *)__p == INFINITY)
  {
    v53.n128_u32[0] = (unsigned __int32)v147[0];
    double v55 = v139;
    BOOL v54 = *(float *)v147 != v169 || (void *)v153 != __p[1];
  }
  else
  {
    BOOL v54 = 1;
    double v55 = v139;
  }
  if (__p[1])
  {
    *(void **)&long long v153 = __p[1];
    operator delete(__p[1]);
  }
  if (!v54)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "lat.Final(s) != kaldi::CompactLatticeWeight::Zero()");
LABEL_190:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  (*(void (**)(void **__return_ptr, void *, uint64_t, __n128))(*a1 + 32))(__p, a1, v17, v53);
  long long v149 = 0;
  long long v150 = 0;
  uint64_t v151 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v149, __p[1], v153, (uint64_t)(v153 - (unint64_t)__p[1]) >> 2);
  if (__p[1])
  {
    *(void **)&long long v153 = __p[1];
    operator delete(__p[1]);
  }
  uint64_t v57 = (int *)v149;
  long long v58 = v150;
  if (v149 != v150)
  {
    do
    {
      int v59 = *v57;
      if (*v57 >= 1)
      {
        double v61 = a7[1];
        unint64_t v60 = (unint64_t)a7[2];
        if ((unint64_t)v61 >= v60)
        {
          uint64_t v63 = *a7;
          uint64_t v64 = v61 - *a7;
          unint64_t v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v66 = v60 - (void)v63;
          if (v66 >> 1 > v65) {
            unint64_t v65 = v66 >> 1;
          }
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v65;
          }
          if (v67)
          {
            double v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v146, v67);
            uint64_t v63 = *a7;
            double v61 = a7[1];
            int v59 = *v57;
          }
          else
          {
            double v68 = 0;
          }
          unint64_t v69 = (int *)&v68[4 * v64];
          *unint64_t v69 = v59;
          double v62 = v69 + 1;
          while (v61 != v63)
          {
            int v70 = *--v61;
            *--unint64_t v69 = v70;
          }
          *a7 = v69;
          a7[1] = v62;
          a7[2] = (int *)&v68[4 * v67];
          if (v63) {
            operator delete(v63);
          }
        }
        else
        {
          *double v61 = v59;
          double v62 = v61 + 1;
        }
        a7[1] = v62;
      }
      ++v57;
    }
    while (v57 != v58);
  }
  double v71 = *a7;
  uint64_t v72 = a7[1];
  uint64_t v56 = *a7 != v72;
  if (*a7 != v72)
  {
    unint64_t v73 = 0;
    unsigned int v74 = v144;
    while (1)
    {
      unsigned int v75 = kaldi::TransitionModel::TransitionIdToPhone(v74, v71[v73]);
      if (v75 != a4) {
        break;
      }
LABEL_161:
      ++v73;
      double v71 = *a7;
      uint64_t v121 = (char *)a7[1] - (char *)*a7;
      if (v73 >= v121 >> 2)
      {
        uint64_t v122 = a9[2];
        if (v122) {
          *(_DWORD *)(*a9 + 100) = ((unint64_t)v121 >> 2) - 1;
        }
        int v123 = *v145;
        uint64_t v124 = (char *)v145[1] - (char *)*v145;
        uint64_t v56 = v56;
        if (v124)
        {
          uint64_t v125 = 0;
          unint64_t v126 = v124 >> 2;
          if (v126 <= 1) {
            uint64_t v127 = 1;
          }
          else {
            uint64_t v127 = v126;
          }
          v128 = a9;
          do
          {
            v128 = (uint64_t *)v128[1];
            if (v128 == a9)
            {
              v128 = (uint64_t *)operator new(0x68uLL);
              *((_DWORD *)v128 + 4) = v123[v125];
              *(_OWORD *)(v128 + 3) = 0u;
              *(_OWORD *)(v128 + 5) = 0u;
              *(_OWORD *)(v128 + 7) = 0u;
              *(_OWORD *)(v128 + 9) = 0u;
              v128[11] = 0;
              v128[12] = -1;
              uint64_t v137 = *a9;
              uint64_t *v128 = *a9;
              v128[1] = (uint64_t)a9;
              *(void *)(v137 + 8) = v128;
              *a9 = (uint64_t)v128;
              a9[2] = ++v122;
            }
            else
            {
              uint64_t v129 = *((void *)*v55 + 5);
              int v130 = v123[v125];
              if (v129)
              {
                uint64_t v131 = (uint64_t)*v55 + 40;
                do
                {
                  int v132 = *(_DWORD *)(v129 + 28);
                  BOOL v133 = v132 < v130;
                  if (v132 >= v130) {
                    uint64_t v134 = (uint64_t *)v129;
                  }
                  else {
                    uint64_t v134 = (uint64_t *)(v129 + 8);
                  }
                  if (!v133) {
                    uint64_t v131 = v129;
                  }
                  uint64_t v129 = *v134;
                }
                while (*v134);
                if ((kaldi::WordBoundaryInfo *)v131 != (kaldi::WordBoundaryInfo *)((char *)*v55 + 40)
                  && v130 >= *(_DWORD *)(v131 + 28))
                {
                  goto LABEL_181;
                }
              }
              if (v130 == *((_DWORD *)v141 + 6))
              {
LABEL_181:
                long long v135 = (char *)operator new(0x68uLL);
                *((_DWORD *)v135 + 4) = v130;
                *(_OWORD *)(v135 + ++*(_DWORD *)(result + 24) = 0u;
                *(_OWORD *)(v135 + 40) = 0u;
                *(_OWORD *)(v135 + 56) = 0u;
                *(_OWORD *)(v135 + 72) = 0u;
                *((void *)v135 + 11) = 0;
                *((void *)v135 + 12) = -1;
                uint64_t v136 = *v128;
                *(void *)(v136 + 8) = v135;
                *(void *)long long v135 = v136;
                uint64_t *v128 = (uint64_t)v135;
                *((void *)v135 + 1) = v128;
                ++v122;
                v128 = (uint64_t *)v135;
                a9[2] = v122;
              }
              else
              {
                *((_DWORD *)v128 + 4) = v130;
              }
            }
            ++v125;
          }
          while (v125 != v127);
        }
        goto LABEL_185;
      }
    }
    BOOL IsSelfLoop = kaldi::TransitionModel::IsSelfLoop(v74, (*a7)[v73]);
    if (a6)
    {
      float Score = kaldi::LatticeScoreCache::GetScore(a6, v73, *(_DWORD *)(*((void *)v144 + 12) + 4 * (*a7)[v73]));
      if (IsSelfLoop) {
        goto LABEL_102;
      }
    }
    else
    {
      float Score = 0.0;
      if (IsSelfLoop) {
        goto LABEL_102;
      }
    }
    if (kaldi::WordBoundaryInfo::TypeOfPhone(*v55, v75) == 1
      || kaldi::WordBoundaryInfo::TypeOfPhone(*v55, v75) == 3)
    {
      uint64_t v78 = a9[2];
      if (v78) {
        *(_DWORD *)(*a9 + 100) = v73 - 1;
      }
      int v79 = (char *)operator new(0x68uLL);
      *((_DWORD *)v79 + 4) = *((_DWORD *)v141 + 6);
      *(_OWORD *)(v79 + ++*(_DWORD *)(result + 24) = 0u;
      *(_OWORD *)(v79 + 40) = 0u;
      *(_OWORD *)(v79 + 56) = 0u;
      *(_OWORD *)(v79 + 72) = 0u;
      *((void *)v79 + 11) = 0;
      *((_DWORD *)v79 + ++*(_DWORD *)(result + 24) = v73;
      *((_DWORD *)v79 + 25) = -1;
      uint64_t v80 = *a9;
      *(void *)int v79 = *a9;
      *((void *)v79 + 1) = a9;
      *(void *)(v80 + 8) = v79;
      *a9 = (uint64_t)v79;
      uint64_t v81 = v78 + 1;
      a9[2] = v78 + 1;
      goto LABEL_103;
    }
LABEL_102:
    uint64_t v81 = a9[2];
LABEL_103:
    unsigned int v74 = v144;
    if (v81)
    {
      uint64_t v82 = *a9;
    }
    else
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v167 = 0u;
        long long v168 = 0u;
        long long v165 = 0u;
        long long v166 = 0u;
        long long v163 = 0u;
        long long v164 = 0u;
        long long v161 = 0u;
        long long v162 = 0u;
        long long v159 = 0u;
        long long v160 = 0u;
        long long v157 = 0u;
        long long v158 = 0u;
        long long v155 = 0u;
        long long v156 = 0u;
        long long v153 = 0u;
        long long v154 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Words list should not be empty.", 31);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      uint64_t v82 = (uint64_t)operator new(0x68uLL);
      *(_DWORD *)(v82 + 16) = *((_DWORD *)v141 + 6);
      *(_OWORD *)(v82 + ++*(_DWORD *)(result + 24) = 0u;
      *(_OWORD *)(v82 + 40) = 0u;
      *(_OWORD *)(v82 + 56) = 0u;
      *(_OWORD *)(v82 + 72) = 0u;
      *(void *)(v82 + 88) = 0;
      *(_DWORD *)(v82 + 96) = v73;
      *(_DWORD *)(v82 + 100) = -1;
      uint64_t v83 = *a9;
      *(void *)uint64_t v82 = *a9;
      *(void *)(v82 + 8) = a9;
      *(void *)(v83 + 8) = v82;
      *a9 = v82;
      ++a9[2];
      unsigned int v74 = v144;
    }
    if (kaldi::TransitionModel::IsSelfLoop(v74, (*a7)[v73]))
    {
      if (a6)
      {
        uint64_t v84 = *(void *)(v82 + 80);
        float v85 = *(float *)(v84 - 4);
        if (Score < v85) {
          float v85 = Score;
        }
        *(float *)(v84 - 4) = v85;
      }
    }
    else
    {
      unint64_t v86 = *(void *)(v82 + 40);
      unint64_t v87 = *(unsigned int **)(v82 + 32);
      if ((unint64_t)v87 >= v86)
      {
        long long v89 = *(unsigned int **)(v82 + 24);
        uint64_t v90 = v87 - v89;
        if ((unint64_t)(v90 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v91 = v86 - (void)v89;
        unint64_t v92 = (uint64_t)(v86 - (void)v89) >> 1;
        if (v92 <= v90 + 1) {
          unint64_t v92 = v90 + 1;
        }
        if (v91 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v92;
        }
        if (v93)
        {
          unint64_t v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v82 + 40, v93);
          long long v89 = *(unsigned int **)(v82 + 24);
          unint64_t v87 = *(unsigned int **)(v82 + 32);
        }
        else
        {
          unint64_t v94 = 0;
        }
        double v95 = (unsigned int *)&v94[4 * v90];
        *double v95 = v75;
        unint64_t v88 = v95 + 1;
        while (v87 != v89)
        {
          unsigned int v96 = *--v87;
          *--double v95 = v96;
        }
        *(void *)(v82 + ++*(_DWORD *)(result + 24) = v95;
        *(void *)(v82 + 32) = v88;
        *(void *)(v82 + 40) = &v94[4 * v93];
        if (v89) {
          operator delete(v89);
        }
      }
      else
      {
        *unint64_t v87 = v75;
        unint64_t v88 = v87 + 1;
      }
      *(void *)(v82 + 32) = v88;
      if (a5)
      {
        (*(void (**)(void **__return_ptr))(*(void *)a5 + 88))(v147);
        unint64_t v97 = *(void *)(v82 + 64);
        unint64_t v98 = *(void *)(v82 + 56);
        if (v98 >= v97)
        {
          uint64_t v100 = *(void *)(v82 + 48);
          unint64_t v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - v100) >> 3);
          unint64_t v102 = v101 + 1;
          if (v101 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - v100) >> 3);
          if (2 * v103 > v102) {
            unint64_t v102 = 2 * v103;
          }
          if (v103 >= 0x555555555555555) {
            unint64_t v104 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v104 = v102;
          }
          *(void *)&long long v154 = v82 + 64;
          if (v104) {
            uint64_t v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v82 + 64, v104);
          }
          else {
            uint64_t v105 = 0;
          }
          uint64_t v106 = &v105[24 * v101];
          __p[0] = v105;
          __p[1] = v106;
          *((void *)&v153 + 1) = &v105[24 * v104];
          long long v107 = *(_OWORD *)v147;
          *((void *)v106 + 2) = v148;
          *(_OWORD *)uint64_t v106 = v107;
          v147[1] = 0;
          uint64_t v148 = 0;
          v147[0] = 0;
          *(void *)&long long v153 = v106 + 24;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v82 + 48), (std::__split_buffer<std::string> *)__p);
          uint64_t v108 = *(void *)(v82 + 56);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
          int v109 = SHIBYTE(v148);
          *(void *)(v82 + 56) = v108;
          if (v109 < 0) {
            operator delete(v147[0]);
          }
        }
        else
        {
          long long v99 = *(_OWORD *)v147;
          *(void *)(v98 + 16) = v148;
          *(_OWORD *)unint64_t v98 = v99;
          *(void *)(v82 + 56) = v98 + 24;
        }
      }
      if (a6)
      {
        unint64_t v110 = *(void *)(v82 + 88);
        uint64_t v111 = *(float **)(v82 + 80);
        if ((unint64_t)v111 >= v110)
        {
          uint64_t v113 = *(float **)(v82 + 72);
          uint64_t v114 = v111 - v113;
          if ((unint64_t)(v114 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v115 = v110 - (void)v113;
          unint64_t v116 = (uint64_t)(v110 - (void)v113) >> 1;
          if (v116 <= v114 + 1) {
            unint64_t v116 = v114 + 1;
          }
          if (v115 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v117 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v117 = v116;
          }
          if (v117)
          {
            uint64_t v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v82 + 88, v117);
            uint64_t v113 = *(float **)(v82 + 72);
            uint64_t v111 = *(float **)(v82 + 80);
          }
          else
          {
            uint64_t v118 = 0;
          }
          int v119 = (float *)&v118[4 * v114];
          *int v119 = Score;
          double v112 = v119 + 1;
          while (v111 != v113)
          {
            int v120 = *((_DWORD *)v111-- - 1);
            *((_DWORD *)v119-- - 1) = v120;
          }
          *(void *)(v82 + 72) = v119;
          *(void *)(v82 + 80) = v112;
          *(void *)(v82 + 88) = &v118[4 * v117];
          if (v113) {
            operator delete(v113);
          }
        }
        else
        {
          *uint64_t v111 = Score;
          double v112 = v111 + 1;
        }
        *(void *)(v82 + 80) = v112;
      }
    }
    goto LABEL_161;
  }
LABEL_185:
  if (v149)
  {
    long long v150 = (int *)v149;
    operator delete(v149);
  }
  return v56;
}

void sub_1B2093500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,std::__split_buffer<std::wstring> *a28)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2093594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void std::__list_imp<quasar::Word>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<quasar::Word,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<quasar::Word,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
}

void *std::vector<quasar::Word>::__init_with_size[abi:ne180100]<std::__list_iterator<quasar::Word,void *>,std::__list_iterator<quasar::Word,void *>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::pair<std::string,quasar::PTree>>::__vallocate[abi:ne180100](result, a4);
    float result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Word>,std::__list_iterator<quasar::Word,void *>,std::__list_iterator<quasar::Word,void *>,quasar::Word*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B20936E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::Word>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Word>,std::__list_iterator<quasar::Word,void *>,std::__list_iterator<quasar::Word,void *>,quasar::Word*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<quasar::Word>::construct[abi:ne180100]<quasar::Word,quasar::Word&>(a1, v4, v6 + 16);
      uint64_t v6 = *(void *)(v6 + 8);
      uint64_t v4 = v12 + 88;
      v12 += 88;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Word>,quasar::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B2093798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<quasar::Word>::construct[abi:ne180100]<quasar::Word,quasar::Word&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a2 + 8), *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 32), *(long long **)(a3 + 32), *(long long **)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  float result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a2 + 56), *(const void **)(a3 + 56), *(void *)(a3 + 64), (uint64_t)(*(void *)(a3 + 64) - *(void *)(a3 + 56)) >> 2);
  *(void *)(a2 + 80) = *(void *)(a3 + 80);
  return result;
}

void sub_1B2093858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Word>,quasar::Word*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Word>,quasar::Word*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Word>,quasar::Word*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 88;
      std::allocator<quasar::Word>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::allocator<quasar::Word>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(void *)(a2 + 64) = v3;
    operator delete(v3);
  }
  uint64_t v5 = (void **)(a2 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = *(void **)(a2 + 8);
  if (v4)
  {
    *(void *)(a2 + 16) = v4;
    operator delete(v4);
  }
}

void std::vector<quasar::Word>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<quasar::Word>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::map<int,std::set<int>>::at(uint64_t a1, int *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    uint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

void std::allocator<quasar::FirstPassArcDetail>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v4 = (void **)(a2 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  int v3 = *(void **)(a2 + 16);
  if (v3)
  {
    *(void *)(a2 + ++*(_DWORD *)(result + 24) = v3;
    operator delete(v3);
  }
}

uint64_t std::vector<quasar::FirstPassArcDetail>::__emplace_back_slow_path<int &>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  v14[4] = a1 + 2;
  if (v9) {
    char v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v7, v9);
  }
  else {
    char v10 = 0;
  }
  uint64_t v11 = &v10[72 * v4];
  v14[0] = v10;
  v14[1] = v11;
  int v14[3] = &v10[72 * v9];
  *(_DWORD *)uint64_t v11 = *a2;
  float v11[4] = 0;
  *((_DWORD *)v11 + 2) = 1065353216;
  v11[12] = 0;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *((_DWORD *)v11 + 16) = 0;
  *((_OWORD *)v11 + 3) = 0u;
  void v14[2] = v11 + 72;
  std::vector<quasar::FirstPassArcDetail>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::FirstPassArcDetail>::~__split_buffer(v14);
  return v12;
}

void sub_1B2093BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::FirstPassArcDetail>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::FirstPassArcDetail>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::FirstPassArcDetail>,std::reverse_iterator<quasar::FirstPassArcDetail*>,std::reverse_iterator<quasar::FirstPassArcDetail*>,std::reverse_iterator<quasar::FirstPassArcDetail*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::FirstPassArcDetail>,std::reverse_iterator<quasar::FirstPassArcDetail*>,std::reverse_iterator<quasar::FirstPassArcDetail*>,std::reverse_iterator<quasar::FirstPassArcDetail*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 72);
      a3 -= 72;
      *(void *)(v7 - 67) = *(void *)(a3 + 5);
      *(void *)(v7 - 72) = v8;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 56) = 0;
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 + 16);
      *(void *)(v7 - 40) = *(void *)(a3 + 32);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 40);
      *(void *)(v7 - 16) = *(void *)(a3 + 56);
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 40) = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 64);
      uint64_t v7 = *((void *)&v14 + 1) - 72;
      *((void *)&v14 + 1) -= 72;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FirstPassArcDetail>,std::reverse_iterator<quasar::FirstPassArcDetail*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FirstPassArcDetail>,std::reverse_iterator<quasar::FirstPassArcDetail*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FirstPassArcDetail>,std::reverse_iterator<quasar::FirstPassArcDetail*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FirstPassArcDetail>,std::reverse_iterator<quasar::FirstPassArcDetail*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::FirstPassArcDetail>::destroy[abi:ne180100](v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::FirstPassArcDetail>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::FirstPassArcDetail>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<quasar::FirstPassArcDetail>::destroy[abi:ne180100](v4, i - 72);
  }
}

void kaldi::MinimumBayesRisk::~MinimumBayesRisk(kaldi::MinimumBayesRisk *this)
{
  uint64_t v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    *((void *)this + 36) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 32);
  if (v3)
  {
    *((void *)this + 33) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 29);
  if (v4)
  {
    *((void *)this + 30) = v4;
    operator delete(v4);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 192);
  uint64_t v7 = (void **)((char *)this + 168);
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 144);
  std::vector<std::map<int,std::set<int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 120);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v5 = (void *)*((void *)this + 11);
  if (v5)
  {
    *((void *)this + 12) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 8);
  if (v6)
  {
    *((void *)this + 9) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void **)((char *)this + 40);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 16);
  std::vector<kaldi::MinimumBayesRisk::Arc>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56)
  {
    uint64_t v4 = *(void **)(i - 32);
    if (v4)
    {
      *(void *)(i - ++*(_DWORD *)(result + 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::vector<std::map<int,std::set<int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 24;
        std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<kaldi::MinimumBayesRisk::Arc>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<kaldi::MinimumBayesRisk::Arc>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<kaldi::MinimumBayesRisk::Arc>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 72)
  {
    uint64_t v4 = *(void **)(i - 32);
    if (v4)
    {
      *(void *)(i - ++*(_DWORD *)(result + 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void kaldi::ScoreCacheFasterDecoder::~ScoreCacheFasterDecoder(kaldi::ScoreCacheFasterDecoder *this)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2 != -1)
  {
    uint64_t v3 = *((void *)this + 9);
    do
    {
      uint64_t v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      uint64_t v2 = *v4;
    }
    while (v2 != -1);
  }
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = -1;
  kaldi::ScoreCacheFasterDecoder::ClearToks((uint64_t *)this, v5);
  uint64_t v6 = (unsigned int *)MEMORY[0x1E4F14960];
  if (MEMORY[0x1B3EAA6A0](*MEMORY[0x1E4F14960], *((void *)this + 2), 28 * *((int *)this + 8)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": Could not vm_deallocate ", 26);
    char v10 = (void *)std::ostream::operator<<();
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" bytes of ", 10);
    size_t v12 = strlen((const char *)(0x80000001B25A27E8 & 0x7FFFFFFFFFFFFFFFLL));
    long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, 0x80000001B25A27E8 & 0x7FFFFFFFFFFFFFFFLL, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
    std::ostream::operator<<();
    goto LABEL_13;
  }
  if (MEMORY[0x1B3EAA6A0](*v6, *(void *)this, 4 * *((int *)this + 8)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    long long v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": Could not vm_deallocate ", 26);
    uint64_t v15 = (void *)std::ostream::operator<<();
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" bytes of ", 10);
    size_t v17 = strlen((const char *)(*(void *)(MEMORY[0x1E4FBA3B0] + 8) & 0x7FFFFFFFFFFFFFFFLL));
    int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, *(void *)(MEMORY[0x1E4FBA3B0] + 8) & 0x7FFFFFFFFFFFFFFFLL, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    std::ostream::operator<<();
LABEL_13:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  uint64_t v7 = (void *)*((void *)this + 27);
  if (v7)
  {
    *((void *)this + 28) = v7;
    operator delete(v7);
  }
  v19[0] = (void **)((char *)this + 192);
  std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__destroy_vector::operator()[abi:ne180100](v19);
  uint64_t v8 = (void *)*((void *)this + 21);
  if (v8)
  {
    *((void *)this + 22) = v8;
    operator delete(v8);
  }
  kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::~HashList((void *)this + 6);
}

void fst::Prune<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v126 = a2;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v7);
  uint64_t v125 = a1;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) != -1)
  {
    LODWORD(v144[0]) = 0;
    if (!fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)v155, (float *)a3, (float *)v144))
    {
      if (*(_DWORD *)(a3 + 4))
      {
        long long v152 = 0;
        long long v153 = 0;
        long long v154 = 0;
        long long v149 = 0;
        long long v150 = 0;
        uint64_t v151 = 0;
        if (!*(void *)(a3 + 16)) {
          fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, (uint64_t)&v149, 1);
        }
        uint64_t v8 = *(void **)(a3 + 16);
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        if ((*(int (**)(uint64_t))(*(void *)v125 + 24))(v125) < (unint64_t)((v9 - v10) >> 2))
        {
          int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v125 + 24))(v125);
          uint64_t v12 = *v8;
          LODWORD(v144[0]) = 0;
          LODWORD(v144[0]) = *(_DWORD *)(v12 + 4 * v11);
          LODWORD(v132[0]) = 2139095040;
          if (*(float *)v144 != INFINITY)
          {
            v144[0] = &v152;
            v144[1] = v8;
            long long v145 = 0u;
            long long v146 = 0u;
            long long v147 = 0u;
            memset(v148, 0, 28);
            long long v141 = 0;
            long long v142 = 0;
            long long v143 = 0;
            long long v138 = 0;
            long long v139 = 0;
            uint64_t v140 = 0;
            memset(__p, 0, sizeof(__p));
            unsigned int v136 = 0;
            int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v125 + 24))(v125);
            unsigned int v136 = v13;
            unint64_t v14 = v13;
            if (v13 >= (unint64_t)((uint64_t)(v8[1] - *v8) >> 2))
            {
              float v15 = INFINITY;
            }
            else
            {
              float v15 = *(float *)(*v8 + 4 * v13);
              float v16 = NAN;
              if (v15 == -INFINITY) {
                goto LABEL_16;
              }
            }
            float v17 = *(float *)a3;
            float v16 = NAN;
            if (*(float *)a3 != -INFINITY)
            {
              float v16 = INFINITY;
              BOOL v18 = v17 == INFINITY || v15 == INFINITY;
              float v19 = v15 + v17;
              if (!v18) {
                float v16 = v19;
              }
            }
LABEL_16:
            float v135 = v16;
            long long v20 = (char *)v141;
            BOOL v21 = v142;
            unint64_t v22 = (v142 - (unsigned char *)v141) >> 2;
            if (v22 <= v14)
            {
              do
              {
                if (v21 >= v143)
                {
                  unint64_t v24 = v22 + 1;
                  if ((v22 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v25 = v143 - v20;
                  if ((v143 - v20) >> 1 > v24) {
                    unint64_t v24 = v25 >> 1;
                  }
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v26 = v24;
                  }
                  if (v26)
                  {
                    uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v143, v26);
                    long long v20 = (char *)v141;
                    BOOL v21 = v142;
                  }
                  else
                  {
                    uint64_t v27 = 0;
                  }
                  uint64_t v28 = &v27[4 * v22];
                  *(_DWORD *)uint64_t v28 = -1;
                  uint64_t v23 = v28 + 4;
                  while (v21 != v20)
                  {
                    int v29 = *((_DWORD *)v21 - 1);
                    v21 -= 4;
                    *((_DWORD *)v28 - 1) = v29;
                    v28 -= 4;
                  }
                  long long v141 = v28;
                  long long v142 = v23;
                  long long v143 = &v27[4 * v26];
                  if (v20)
                  {
                    operator delete(v20);
                    long long v20 = (char *)v141;
                  }
                  else
                  {
                    long long v20 = v28;
                  }
                }
                else
                {
                  *(_DWORD *)BOOL v21 = -1;
                  uint64_t v23 = v21 + 4;
                }
                long long v142 = v23;
                unint64_t v22 = (v23 - v20) >> 2;
                BOOL v21 = v23;
              }
              while (v22 <= (int)v136);
            }
            int v30 = (*(uint64_t (**)(uint64_t))(*(void *)v126 + 200))(v126);
            int v31 = (unsigned int *)v141;
            *((_DWORD *)v141 + (int)v136) = v30;
            (*(void (**)(uint64_t, void))(*(void *)v126 + 176))(v126, v31[v136]);
            BOOL v32 = v152;
            double v33 = v153;
            unint64_t v34 = v153 - v152;
            for (uint64_t i = (int)v136; v34 <= (int)v136; uint64_t i = (int)v136)
            {
              if (v33 >= (float *)v154)
              {
                if ((v34 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v36 = v154 - (char *)v32;
                uint64_t v37 = v36 >> 1;
                if (v36 >> 1 <= v34 + 1) {
                  uint64_t v37 = v34 + 1;
                }
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v38 = v37;
                }
                if (v38) {
                  uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v154, v38);
                }
                else {
                  uint64_t v39 = 0;
                }
                int v40 = &v39[4 * v34];
                *(_DWORD *)int v40 = 2139095040;
                double v33 = (float *)(v40 + 4);
                unint64_t v42 = v152;
                int v41 = v153;
                if (v153 != v152)
                {
                  do
                  {
                    int v43 = *((_DWORD *)v41-- - 1);
                    *((_DWORD *)v40 - 1) = v43;
                    v40 -= 4;
                  }
                  while (v41 != v42);
                  int v41 = v152;
                }
                long long v152 = (float *)v40;
                long long v153 = v33;
                long long v154 = &v39[4 * v38];
                if (v41) {
                  operator delete(v41);
                }
              }
              else
              {
                *v33++ = INFINITY;
              }
              long long v153 = v33;
              BOOL v32 = v152;
              unint64_t v34 = v33 - v152;
            }
            v32[i] = 0.0;
            unint64_t v44 = (char *)v138;
            uint64_t v45 = v139;
            for (unint64_t j = (v139 - (unsigned char *)v138) >> 3; j <= (int)v136; unint64_t j = (v139 - (unsigned char *)v138) >> 3)
            {
              if (v45 >= v140)
              {
                unint64_t v48 = j + 1;
                if ((j + 1) >> 61) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v49 = v140 - v44;
                if ((v140 - v44) >> 2 > v48) {
                  unint64_t v48 = v49 >> 2;
                }
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v50 = v48;
                }
                if (v50)
                {
                  unint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v140, v50);
                  unint64_t v44 = (char *)v138;
                  uint64_t v45 = v139;
                }
                else
                {
                  unint64_t v51 = 0;
                }
                int v52 = &v51[8 * j];
                *(void *)int v52 = -1;
                unint64_t v47 = v52 + 8;
                while (v45 != v44)
                {
                  uint64_t v53 = *((void *)v45 - 1);
                  v45 -= 8;
                  *((void *)v52 - 1) = v53;
                  v52 -= 8;
                }
                long long v138 = v52;
                long long v139 = v47;
                uint64_t v140 = &v51[8 * v50];
                if (v44) {
                  operator delete(v44);
                }
              }
              else
              {
                *(void *)uint64_t v45 = -1;
                unint64_t v47 = v45 + 8;
              }
              long long v139 = v47;
              LOBYTE(v132[0]) = 0;
              std::vector<BOOL>::push_back((uint64_t)__p, v132);
              unint64_t v44 = (char *)v138;
              uint64_t v45 = v139;
            }
            int v54 = fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert((uint64_t)v144, (int *)&v136);
            uint64_t v127 = v8;
            *((void *)v138 + (int)v136) = v54;
            if (!LODWORD(v148[3])) {
              goto LABEL_196;
            }
            while (1)
            {
              unsigned int v136 = *(_DWORD *)v148[0];
              fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Pop((uint64_t)v144);
              int v55 = v136;
              uint64_t v56 = (int)v136;
              *((void *)v138 + (int)v136) = -1;
              *(void *)((char *)__p[0] + (((unint64_t)v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v55;
              uint64_t v57 = v152;
              (*(void (**)(uint64_t))(*(void *)v125 + 32))(v125);
              float v59 = v57[v56];
              float v60 = NAN;
              if (v59 != -INFINITY && v58 != -INFINITY)
              {
                float v60 = INFINITY;
                BOOL v61 = v59 == INFINITY || v58 == INFINITY;
                float v62 = v58 + v59;
                if (!v61) {
                  float v60 = v62;
                }
              }
              *(float *)int v132 = v60;
              if (!fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)v155, &v135, (float *)v132))
              {
                uint64_t v63 = *((unsigned int *)v141 + (int)v136);
                (*(void (**)(uint64_t))(*(void *)v125 + 32))(v125);
                (*(void (**)(uint64_t, uint64_t))(*(void *)v126 + 184))(v126, v63);
              }
              unint64_t v134 = 0;
              (*(void (**)(uint64_t, void, void *))(*(void *)v125 + 136))(v125, v136, v132);
              uint64_t v64 = a3;
              while (1)
              {
                if (!v132[0])
                {
                  if (v134 >= v132[2]) {
                    goto LABEL_193;
                  }
                  goto LABEL_87;
                }
                if ((*(unsigned int (**)(void))(*(void *)v132[0] + 24))(v132[0])) {
                  break;
                }
                if (v132[0])
                {
                  uint64_t v65 = (*(uint64_t (**)(void))(*(void *)v132[0] + 32))();
                  goto LABEL_88;
                }
LABEL_87:
                uint64_t v65 = v132[1] + 16 * v134;
LABEL_88:
                float v66 = v152[v136];
                float v67 = NAN;
                if (v66 != -INFINITY)
                {
                  float v68 = *(float *)(v65 + 8);
                  float v67 = NAN;
                  if (v68 != -INFINITY)
                  {
                    float v67 = INFINITY;
                    BOOL v69 = v68 == INFINITY || v66 == INFINITY;
                    float v70 = v66 + v68;
                    if (!v69) {
                      float v67 = v70;
                    }
                  }
                }
                uint64_t v72 = (int *)(v65 + 12);
                unint64_t v71 = *(int *)(v65 + 12);
                if (v71 >= (uint64_t)(v127[1] - *v127) >> 2) {
                  float v73 = INFINITY;
                }
                else {
                  float v73 = *(float *)(*v127 + 4 * v71);
                }
                float v74 = NAN;
                if (v67 != -INFINITY && v73 != -INFINITY)
                {
                  float v74 = INFINITY;
                  BOOL v75 = v73 == INFINITY || v67 == INFINITY;
                  float v76 = v67 + v73;
                  if (!v75) {
                    float v74 = v76;
                  }
                }
                float v131 = v74;
                if (!fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)v155, &v135, &v131)
                  && (*(_DWORD *)(v64 + 4) == -1
                   || (*(int (**)(uint64_t))(*(void *)v126 + 160))(v126) < *(_DWORD *)(v64 + 4)))
                {
                  for (uint64_t k = v153; ; v153 = k)
                  {
                    unint64_t v78 = k - v152;
                    unint64_t v79 = *v72;
                    if (v78 > v79) {
                      break;
                    }
                    if (k >= (float *)v154)
                    {
                      if ((v78 + 1) >> 62) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v80 = (v154 - (char *)v152) >> 1;
                      if (v80 <= v78 + 1) {
                        unint64_t v80 = v78 + 1;
                      }
                      if ((unint64_t)(v154 - (char *)v152) >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v81 = v80;
                      }
                      if (v81) {
                        uint64_t v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v154, v81);
                      }
                      else {
                        uint64_t v82 = 0;
                      }
                      uint64_t v83 = &v82[4 * v78];
                      *(_DWORD *)uint64_t v83 = 2139095040;
                      uint64_t k = (float *)(v83 + 4);
                      float v85 = v152;
                      uint64_t v84 = v153;
                      if (v153 != v152)
                      {
                        do
                        {
                          int v86 = *((_DWORD *)v84-- - 1);
                          *((_DWORD *)v83 - 1) = v86;
                          v83 -= 4;
                        }
                        while (v84 != v85);
                        uint64_t v84 = v152;
                      }
                      long long v152 = (float *)v83;
                      long long v153 = k;
                      long long v154 = &v82[4 * v81];
                      if (v84) {
                        operator delete(v84);
                      }
                    }
                    else
                    {
                      *k++ = INFINITY;
                    }
                  }
                  float v87 = v152[v136];
                  float v88 = NAN;
                  if (v87 != -INFINITY)
                  {
                    float v89 = *(float *)(v65 + 8);
                    float v88 = NAN;
                    if (v89 != -INFINITY)
                    {
                      float v88 = INFINITY;
                      BOOL v90 = v89 == INFINITY || v87 == INFINITY;
                      float v91 = v87 + v89;
                      if (!v90) {
                        float v88 = v91;
                      }
                    }
                  }
                  *(float *)&uint64_t v128 = v88;
                  if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)v155, (float *)&v128, &v152[v79]))
                  {
                    float v92 = v152[v136];
                    float v93 = NAN;
                    if (v92 != -INFINITY)
                    {
                      float v94 = *(float *)(v65 + 8);
                      float v93 = NAN;
                      if (v94 != -INFINITY)
                      {
                        float v93 = INFINITY;
                        BOOL v95 = v94 == INFINITY || v92 == INFINITY;
                        float v96 = v92 + v94;
                        if (!v95) {
                          float v93 = v96;
                        }
                      }
                    }
                    v152[*v72] = v93;
                  }
                  unint64_t v97 = (char *)v141;
                  unint64_t v98 = v142;
                  unint64_t v99 = (v142 - (unsigned char *)v141) >> 2;
                  int v100 = *v72;
                  if (v99 <= *v72)
                  {
                    do
                    {
                      if (v98 >= v143)
                      {
                        unint64_t v103 = v99 + 1;
                        if ((v99 + 1) >> 62) {
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v104 = v143 - v97;
                        if ((v143 - v97) >> 1 > v103) {
                          unint64_t v103 = v104 >> 1;
                        }
                        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v105 = v103;
                        }
                        if (v105)
                        {
                          uint64_t v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v143, v105);
                          unint64_t v97 = (char *)v141;
                          unint64_t v98 = v142;
                        }
                        else
                        {
                          uint64_t v106 = 0;
                        }
                        long long v107 = &v106[4 * v99];
                        *(_DWORD *)long long v107 = -1;
                        unint64_t v102 = v107 + 4;
                        while (v98 != v97)
                        {
                          int v108 = *((_DWORD *)v98 - 1);
                          v98 -= 4;
                          *((_DWORD *)v107 - 1) = v108;
                          v107 -= 4;
                        }
                        long long v141 = v107;
                        long long v142 = v102;
                        long long v143 = &v106[4 * v105];
                        if (v97) {
                          operator delete(v97);
                        }
                      }
                      else
                      {
                        *(_DWORD *)unint64_t v98 = -1;
                        unint64_t v102 = v98 + 4;
                      }
                      long long v142 = v102;
                      unint64_t v97 = (char *)v141;
                      unint64_t v99 = (v102 - (unsigned char *)v141) >> 2;
                      int v100 = *v72;
                      unint64_t v98 = v102;
                    }
                    while (v99 <= *v72);
                    uint64_t v101 = v100;
                  }
                  else
                  {
                    uint64_t v101 = v100;
                  }
                  if (*(_DWORD *)&v97[4 * v101] == -1)
                  {
                    int v109 = (*(uint64_t (**)(uint64_t))(*(void *)v126 + 200))(v126);
                    unint64_t v97 = (char *)v141;
                    *((_DWORD *)v141 + *v72) = v109;
                    int v100 = *v72;
                  }
                  uint64_t v110 = *(unsigned int *)&v97[4 * v136];
                  unsigned int v111 = *(_DWORD *)&v97[4 * v100];
                  uint64_t v128 = *(void *)v65;
                  int v129 = *(_DWORD *)(v65 + 8);
                  unsigned int v130 = v111;
                  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v126 + 208))(v126, v110, &v128);
                  while (1)
                  {
                    double v112 = (char *)v138;
                    uint64_t v113 = v139;
                    unint64_t v114 = (v139 - (unsigned char *)v138) >> 3;
                    unint64_t v115 = *v72;
                    if (v114 > v115) {
                      break;
                    }
                    if (v139 >= v140)
                    {
                      unint64_t v117 = v114 + 1;
                      if ((v114 + 1) >> 61) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v118 = v140 - (unsigned char *)v138;
                      if ((v140 - (unsigned char *)v138) >> 2 > v117) {
                        unint64_t v117 = v118 >> 2;
                      }
                      if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v119 = v117;
                      }
                      if (v119)
                      {
                        int v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v140, v119);
                        double v112 = (char *)v138;
                        uint64_t v113 = v139;
                      }
                      else
                      {
                        int v120 = 0;
                      }
                      uint64_t v121 = &v120[8 * v114];
                      *(void *)uint64_t v121 = -1;
                      unint64_t v116 = v121 + 8;
                      while (v113 != v112)
                      {
                        uint64_t v122 = *((void *)v113 - 1);
                        v113 -= 8;
                        *((void *)v121 - 1) = v122;
                        v121 -= 8;
                      }
                      long long v138 = v121;
                      long long v139 = v116;
                      uint64_t v140 = &v120[8 * v119];
                      if (v112) {
                        operator delete(v112);
                      }
                    }
                    else
                    {
                      *(void *)long long v139 = -1;
                      unint64_t v116 = v113 + 8;
                    }
                    long long v139 = v116;
                    LOBYTE(v128) = 0;
                    std::vector<BOOL>::push_back((uint64_t)__p, &v128);
                  }
                  uint64_t v64 = a3;
                  if (((*(void *)((char *)__p[0] + ((v115 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v115) & 1) == 0)
                  {
                    uint64_t v123 = *((void *)v138 + v115);
                    if (v123 == -1)
                    {
                      int v124 = fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert((uint64_t)v144, (int *)(v65 + 12));
                      *((void *)v138 + *v72) = v124;
                    }
                    else
                    {
                      fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Update((uint64_t)v144, v123, (int *)(v65 + 12));
                    }
                  }
                }
                if (v132[0]) {
                  (*(void (**)(void))(*(void *)v132[0] + 40))(v132[0]);
                }
                else {
                  ++v134;
                }
              }
              if (v132[0])
              {
                (*(void (**)(void))(*(void *)v132[0] + 8))();
                goto LABEL_195;
              }
LABEL_193:
              if (v133) {
                --*v133;
              }
LABEL_195:
              if (!LODWORD(v148[3]))
              {
LABEL_196:
                if (__p[0]) {
                  operator delete(__p[0]);
                }
                if (v138)
                {
                  long long v139 = (char *)v138;
                  operator delete(v138);
                }
                if (v141)
                {
                  long long v142 = (char *)v141;
                  operator delete(v141);
                }
                fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::~Heap(v144);
                break;
              }
            }
          }
        }
        if (v149)
        {
          long long v150 = v149;
          operator delete(v149);
        }
        if (v152)
        {
          long long v153 = v152;
          operator delete(v152);
        }
      }
    }
  }
}

void sub_1B20952DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  if (a31) {
    operator delete(a31);
  }
  fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::~Heap(&a34);
  uint64_t v36 = *(void **)(v34 - 144);
  if (v36)
  {
    *(void *)(v34 - 136) = v36;
    operator delete(v36);
  }
  uint64_t v37 = *(void **)(v34 - 120);
  if (v37)
  {
    *(void *)(v34 - 112) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A3B438;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
    uint64_t v4 = (void *)fst::cerr(v3);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1[1] + 8) |= 4uLL;
  }
  operator new();
}

void sub_1B2095590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(v18);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_1F0A3B438;
  a1[1] = 0;
  fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Init<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>((uint64_t)a1, a2, a3);
}

void sub_1B2095644(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

uint64_t *fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEpsLocalClass(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    *((_DWORD *)a1 + 2) = (*(uint64_t (**)(void))(*(void *)*a1 + 200))();
    fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::InitNumArcs(a1);
    int v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 160))();
    if (v4 >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, v5); ++i)
          fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEps((uint64_t)a1, v5, i);
        uint64_t v5 = (v5 + 1);
      }
      while (v5 != v4);
    }
    fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2);
  }
  return a1;
}

void sub_1B20957A4(_Unwind_Exception *exception_object)
{
  int v4 = (void *)v1[5];
  if (v4)
  {
    v1[6] = v4;
    operator delete(v4);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[3] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::InitNumArcs(void *a1)
{
  int v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 160))(*a1);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 2), v2);
  uint64_t v3 = a1 + 5;
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 5), v2);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  ++*(_DWORD *)(a1[2] + 4 * (int)result);
  if (v2 < 1) {
    return result;
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 32))(&v13);
    float v20 = *((float *)&v13 + 1);
    int v21 = v13;
    int v19 = 2139095040;
    float v18 = INFINITY;
    v6.n128_u32[0] = v13;
    if (*(float *)&v13 != INFINITY)
    {
      BOOL v7 = 1;
      char v8 = __p;
      if (!__p) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    v6.n128_f32[0] = v20;
    char v8 = __p;
    if (v20 == v18)
    {
      BOOL v7 = v15 != __p;
      if (!__p) {
        goto LABEL_9;
      }
LABEL_8:
      float v15 = v8;
      operator delete(v8);
      goto LABEL_9;
    }
    BOOL v7 = 1;
    if (__p) {
      goto LABEL_8;
    }
LABEL_9:
    if (v7) {
      ++*(_DWORD *)(*v3 + 4 * i);
    }
    uint64_t v9 = *a1;
    unint64_t v17 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, __n128))(*(void *)v9 + 136))(v9, i, &v13, v6);
    while (1)
    {
      uint64_t result = v13;
      if (!v13)
      {
        if (v17 >= (unint64_t)v15) {
          goto LABEL_23;
        }
LABEL_17:
        uint64_t v12 = 0;
        int v11 = (char *)__p + 48 * v17;
        goto LABEL_18;
      }
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13);
      uint64_t result = v13;
      if (v10) {
        break;
      }
      if (!v13) {
        goto LABEL_17;
      }
      int v11 = (char *)(*(uint64_t (**)(void))(*(void *)v13 + 32))();
      uint64_t v12 = v13;
LABEL_18:
      ++*(_DWORD *)(a1[2] + 4 * *((int *)v11 + 10));
      ++*(_DWORD *)(*v3 + 4 * i);
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
      }
      else {
        ++v17;
      }
    }
    if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v13 + 8))();
      continue;
    }
LABEL_23:
    if (v16) {
      --*v16;
    }
  }
  return result;
}

void sub_1B2095AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::Reverse<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>();
  }
  else {
    fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::InitNumArcs(v10);
  }
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEps(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v19 = 0;
  float v20 = 0;
  uint64_t v21 = 0;
  fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::GetArc((uint64_t *)a1, a2, a3, (uint64_t)&v17);
  if (v22 == a2 || v22 == *(_DWORD *)(a1 + 8)) {
    goto LABEL_16;
  }
  int v7 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * v22);
  if (*(_DWORD *)(*(void *)(a1 + 16) + 4 * v22) != 1 || v7 < 2)
  {
    if (v7 != 1) {
      goto LABEL_16;
    }
    v11[0] = v17;
    v11[1] = v18;
    memset(v12, 0, sizeof(v12));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v12, v19, (uint64_t)v20, (v20 - (unsigned char *)v19) >> 2);
    int v13 = v22;
    fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEpsPattern2((void *)a1, a2, a3, v11);
    uint64_t v9 = (void *)v12[0];
    if (!v12[0]) {
      goto LABEL_16;
    }
    int v10 = v11;
  }
  else
  {
    v14[0] = v17;
    v14[1] = v18;
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v19, (uint64_t)v20, (v20 - (unsigned char *)v19) >> 2);
    int v16 = v22;
    fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEpsPattern1((void *)a1, a2, a3, v14);
    uint64_t v9 = __p[0];
    if (!__p[0]) {
      goto LABEL_16;
    }
    int v10 = v14;
  }
  _OWORD v10[3] = (float32x2_t)v9;
  operator delete(v9);
LABEL_16:
  if (v19)
  {
    float v20 = v19;
    operator delete(v19);
  }
}

void sub_1B2095C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  float v20 = *(void **)(v18 - 64);
  if (v20)
  {
    *(void *)(v18 - 56) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::GetArc(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  uint64_t v11 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v9);
  if (v9[0])
  {
    (*(void (**)(void, uint64_t))(*(void *)v9[0] + 64))(v9[0], a3);
    if (v9[0])
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v9[0] + 32))(v9[0]);
      goto LABEL_7;
    }
    a3 = v11;
  }
  else
  {
    uint64_t v11 = a3;
  }
  uint64_t v7 = v9[1] + 48 * a3;
LABEL_7:
  *(void *)a4 = *(void *)v7;
  fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(a4 + 8, v7 + 8);
  *(_DWORD *)(a4 + 40) = *(_DWORD *)(v7 + 40);
  uint64_t result = v9[0];
  if (v9[0]) {
    return (*(uint64_t (**)(void))(*(void *)v9[0] + 8))(v9[0]);
  }
  if (v10) {
    --*v10;
  }
  return result;
}

void sub_1B2095DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::Reverse<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEpsPattern1(void *a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  __int32 v7 = a4[5].i32[0];
  int32x2_t v132 = vdup_n_s32(0x7F800000u);
  unint64_t v134 = 0;
  uint64_t v135 = 0;
  BOOL v133 = 0;
  int32x2_t v128 = v132;
  unsigned int v130 = 0;
  uint64_t v131 = 0;
  int v129 = 0;
  uint64_t v125 = 0;
  unint64_t v126 = 0;
  unint64_t v127 = 0;
  (*(void (**)(void))(*(void *)*a1 + 296))();
  while (!(*(unsigned int (**)(uint64_t))(*(void *)v124 + 24))(v124))
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v124 + 32))(v124);
    uint64_t v118 = *(uint64_t **)v8;
    unint64_t v119 = *(void **)(v8 + 8);
    uint64_t v121 = 0;
    uint64_t v122 = 0;
    int v120 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v120, *(const void **)(v8 + 16), *(void *)(v8 + 24), (uint64_t)(*(void *)(v8 + 24) - *(void *)(v8 + 16)) >> 2);
    int v123 = *(_DWORD *)(v8 + 40);
    if (v123 == *((_DWORD *)a1 + 2)) {
      goto LABEL_21;
    }
    unint64_t v115 = 0;
    unint64_t v116 = 0;
    uint64_t v117 = 0;
    if (!fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::CanCombineArcs((uint64_t)a1, a4, (float32x2_t *)&v118, (int32x2_t *)&v113))
    {
      if ((float)(*(float *)v128.i32 + *(float *)&v128.i32[1]) < (float)(*(float *)&v119 + *((float *)&v119 + 1))) {
        goto LABEL_8;
      }
      int v10 = &v119;
      if ((float)(*(float *)v128.i32 + *(float *)&v128.i32[1]) <= (float)(*(float *)&v119 + *((float *)&v119 + 1)))
      {
        if (*(float *)v128.i32 < *(float *)&v119)
        {
LABEL_8:
          int v10 = (void **)&v128;
        }
        else
        {
          int v10 = &v119;
          if (*(float *)v128.i32 <= *(float *)&v119)
          {
            uint64_t v23 = v129;
            unint64_t v24 = (unint64_t)((char *)v130 - (char *)v129) >> 2;
            uint64_t v25 = (int *)v120;
            unint64_t v26 = (unint64_t)(v121 - (unsigned char *)v120) >> 2;
            int v10 = &v119;
            if ((int)v24 <= (int)v26)
            {
              int v10 = (void **)&v128;
              if ((int)v24 >= 1 && (int)v24 >= (int)v26)
              {
                uint64_t v27 = ((unint64_t)((char *)v130 - (char *)v129) >> 2) - 1;
                while (1)
                {
                  int v29 = *v23++;
                  int v28 = v29;
                  int v31 = *v25++;
                  int v30 = v31;
                  if (v28 < v31) {
                    break;
                  }
                  BOOL v32 = v28 > v30 || v27-- == 0;
                  int v10 = (void **)&v128;
                  if (v32) {
                    goto LABEL_15;
                  }
                }
                int v10 = &v119;
              }
            }
          }
        }
      }
LABEL_15:
      int v109 = *v10;
      unsigned int v111 = 0;
      uint64_t v112 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v10[1], (uint64_t)v10[2], ((unsigned char *)v10[2] - (unsigned char *)v10[1]) >> 2);
      int32x2_t v128 = (int32x2_t)v109;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v129, (char *)__p, (uint64_t)v111, (v111 - (unsigned char *)__p) >> 2);
      if (__p)
      {
        unsigned int v111 = __p;
        operator delete(__p);
      }
      goto LABEL_19;
    }
    if ((float)(*(float *)v132.i32 + *(float *)&v132.i32[1]) >= (float)(*(float *)&v119 + *((float *)&v119 + 1)))
    {
      uint64_t v9 = (int32x2_t *)&v119;
      if ((float)(*(float *)v132.i32 + *(float *)&v132.i32[1]) > (float)(*(float *)&v119 + *((float *)&v119 + 1))) {
        goto LABEL_10;
      }
      if (*(float *)v132.i32 >= *(float *)&v119)
      {
        uint64_t v9 = (int32x2_t *)&v119;
        if (*(float *)v132.i32 <= *(float *)&v119)
        {
          int v13 = v133;
          unint64_t v14 = (unint64_t)((char *)v134 - (char *)v133) >> 2;
          float v15 = (int *)v120;
          unint64_t v16 = (unint64_t)(v121 - (unsigned char *)v120) >> 2;
          uint64_t v9 = (int32x2_t *)&v119;
          if ((int)v14 <= (int)v16)
          {
            uint64_t v9 = &v132;
            if ((int)v14 >= 1 && (int)v14 >= (int)v16)
            {
              uint64_t v17 = ((unint64_t)((char *)v134 - (char *)v133) >> 2) - 1;
              while (1)
              {
                int v19 = *v13++;
                int v18 = v19;
                int v21 = *v15++;
                int v20 = v21;
                if (v18 < v21) {
                  break;
                }
                BOOL v22 = v18 > v20 || v17-- == 0;
                uint64_t v9 = &v132;
                if (v22) {
                  goto LABEL_10;
                }
              }
              uint64_t v9 = (int32x2_t *)&v119;
            }
          }
        }
        goto LABEL_10;
      }
    }
    uint64_t v9 = &v132;
LABEL_10:
    int v109 = (void *)*v9;
    unsigned int v111 = 0;
    uint64_t v112 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)&v9[1], *(void *)&v9[2], (uint64_t)(*(void *)&v9[2] - *(void *)&v9[1]) >> 2);
    int32x2_t v132 = (int32x2_t)v109;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v133, (char *)__p, (uint64_t)v111, (v111 - (unsigned char *)__p) >> 2);
    if (__p)
    {
      unsigned int v111 = __p;
      operator delete(__p);
    }
    --*(_DWORD *)(a1[5] + 4 * v7);
    --*(_DWORD *)(a1[2] + 4 * v123);
    int v123 = *((_DWORD *)a1 + 2);
    (*(void (**)(uint64_t, uint64_t **))(*(void *)v124 + 88))(v124, &v118);
    unint64_t v11 = v126;
    if (v126 >= v127)
    {
      uint64_t v12 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(&v125, (uint64_t)&v113);
    }
    else
    {
      std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)&v125, (uint64_t)&v113);
      uint64_t v12 = v11 + 48;
    }
    unint64_t v126 = v12;
LABEL_19:
    if (v115)
    {
      unint64_t v116 = v115;
      operator delete(v115);
    }
LABEL_21:
    if (v120)
    {
      uint64_t v121 = v120;
      operator delete(v120);
    }
    (*(void (**)(uint64_t))(*(void *)v124 + 40))(v124);
  }
  if (v124) {
    (*(void (**)(uint64_t))(*(void *)v124 + 8))(v124);
  }
  (*(void (**)(uint64_t **__return_ptr))(*(void *)*a1 + 32))(&v118);
  LODWORD(v109) = HIDWORD(v118);
  LODWORD(v113) = v118;
  LODWORD(v1++*(_DWORD *)(result + 24) = 2139095040;
  float v138 = INFINITY;
  if (*(float *)&v118 != INFINITY)
  {
    double v33 = v119;
    uint64_t v34 = v120;
    goto LABEL_56;
  }
  double v33 = v119;
  uint64_t v34 = v120;
  if (*(float *)&v109 == v138 && v120 == v119)
  {
    if (v119) {
      goto LABEL_66;
    }
    goto LABEL_67;
  }
LABEL_56:
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  unint64_t v116 = 0;
  unint64_t v105 = v118;
  long long v107 = 0;
  uint64_t v108 = 0;
  uint64_t v106 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v106, v33, (uint64_t)v34, (v34 - (unsigned char *)v33) >> 2);
  BOOL CanCombineFinal = fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::CanCombineFinal(a4, (float32x2_t *)&v105, (int32x2_t *)&v113);
  if (v106)
  {
    long long v107 = v106;
    operator delete(v106);
  }
  if (CanCombineFinal)
  {
    if ((float)(*(float *)v132.i32 + *(float *)&v132.i32[1]) < (float)(*(float *)&v118 + *((float *)&v118 + 1))) {
      goto LABEL_60;
    }
    if ((float)(*(float *)v132.i32 + *(float *)&v132.i32[1]) <= (float)(*(float *)&v118 + *((float *)&v118 + 1)))
    {
      if (*(float *)v132.i32 < *(float *)&v118)
      {
LABEL_60:
        uint64_t v36 = &v132;
      }
      else
      {
        if (*(float *)v132.i32 > *(float *)&v118) {
          goto LABEL_92;
        }
        float v62 = v133;
        unint64_t v63 = (unint64_t)((char *)v134 - (char *)v133) >> 2;
        uint64_t v64 = (int *)v119;
        unint64_t v65 = (unint64_t)((unsigned char *)v120 - (unsigned char *)v119) >> 2;
        if ((int)v63 > (int)v65) {
          goto LABEL_92;
        }
        uint64_t v36 = &v132;
        if ((int)v63 >= 1 && (int)v63 >= (int)v65)
        {
          uint64_t v66 = ((unint64_t)((char *)v134 - (char *)v133) >> 2) - 1;
          do
          {
            int v68 = *v62++;
            int v67 = v68;
            int v70 = *v64++;
            int v69 = v70;
            if (v67 < v70) {
              goto LABEL_92;
            }
            BOOL v71 = v67 > v69 || v66-- == 0;
            uint64_t v36 = &v132;
          }
          while (!v71);
        }
      }
    }
    else
    {
LABEL_92:
      uint64_t v36 = (int32x2_t *)&v118;
    }
    __int32 v43 = v36->i32[1];
    LODWORD(v109) = v36->i32[0];
    HIDWORD(v109) = v43;
    unsigned int v111 = 0;
    uint64_t v112 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)&v36[1], *(void *)&v36[2], (uint64_t)(*(void *)&v36[2] - *(void *)&v36[1]) >> 2);
    int32x2_t v132 = (int32x2_t)v109;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v133, (char *)__p, (uint64_t)v111, (v111 - (unsigned char *)__p) >> 2);
    if (__p)
    {
      unsigned int v111 = __p;
      operator delete(__p);
    }
    (*(void (**)(void **__return_ptr))(*(void *)*a1 + 32))(&v109);
    float v138 = *((float *)&v109 + 1);
    LODWORD(v1++*(_DWORD *)(result + 24) = v109;
    int v137 = 2139095040;
    float v136 = INFINITY;
    v44.n128_u32[0] = v109;
    BOOL v45 = *(float *)&v109 == INFINITY && (v44.n128_f32[0] = v138, v138 == v136) && v111 == __p;
    if (__p)
    {
      unsigned int v111 = __p;
      operator delete(__p);
    }
    if (v45) {
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    }
    uint64_t v46 = *a1;
    (*(void (**)(void **__return_ptr, void, uint64_t, __n128))(*(void *)*a1 + 32))(&v109, *a1, a2, v44);
    if ((float)(*(float *)&v109 + *((float *)&v109 + 1)) < (float)(*(float *)&v113 + *((float *)&v113 + 1)))
    {
LABEL_104:
      unint64_t v47 = &v109;
      goto LABEL_111;
    }
    if ((float)(*(float *)&v109 + *((float *)&v109 + 1)) > (float)(*(float *)&v113 + *((float *)&v113 + 1))) {
      goto LABEL_110;
    }
    if (*(float *)&v109 < *(float *)&v113) {
      goto LABEL_104;
    }
    if (*(float *)&v109 > *(float *)&v113
      || (uint64_t v82 = (int *)__p,
          unint64_t v83 = (unint64_t)(v111 - (unsigned char *)__p) >> 2,
          uint64_t v84 = (int *)v114,
          unint64_t v85 = (unint64_t)((unsigned char *)v115 - (unsigned char *)v114) >> 2,
          (int)v83 > (int)v85))
    {
LABEL_110:
      unint64_t v47 = (void **)&v113;
    }
    else
    {
      unint64_t v47 = &v109;
      if ((int)v83 >= 1 && (int)v83 >= (int)v85)
      {
        uint64_t v86 = ((unint64_t)(v111 - (unsigned char *)__p) >> 2) - 1;
        do
        {
          int v88 = *v82++;
          int v87 = v88;
          int v90 = *v84++;
          int v89 = v90;
          if (v87 < v90) {
            goto LABEL_110;
          }
          BOOL v91 = v87 > v89 || v86-- == 0;
          unint64_t v47 = &v109;
        }
        while (!v91);
      }
    }
LABEL_111:
    int v50 = *((_DWORD *)v47 + 1);
    v101[0] = *(_DWORD *)v47;
    v101[1] = v50;
    unint64_t v103 = 0;
    uint64_t v104 = 0;
    unint64_t v102 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v102, v47[1], (uint64_t)v47[2], ((unsigned char *)v47[2] - (unsigned char *)v47[1]) >> 2);
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v46 + 184))(v46, a2, v101);
    if (v102)
    {
      unint64_t v103 = v102;
      operator delete(v102);
    }
    if (__p)
    {
      unsigned int v111 = __p;
      operator delete(__p);
    }
    --*(_DWORD *)(a1[5] + 4 * v7);
    uint64_t v51 = *a1;
    int32x2_t v97 = vdup_n_s32(0x7F800000u);
    unint64_t v99 = 0;
    uint64_t v100 = 0;
    unint64_t v98 = 0;
    (*(void (**)(uint64_t, void, int32x2_t *))(*(void *)v51 + 184))(v51, v7, &v97);
    uint64_t v49 = v98;
    if (v98)
    {
      unint64_t v99 = v98;
LABEL_117:
      operator delete(v49);
    }
    goto LABEL_118;
  }
  if ((float)(*(float *)v128.i32 + *(float *)&v128.i32[1]) < (float)(*(float *)&v118 + *((float *)&v118 + 1)))
  {
LABEL_62:
    uint64_t v37 = (uint64_t **)&v128;
    goto LABEL_107;
  }
  if ((float)(*(float *)v128.i32 + *(float *)&v128.i32[1]) > (float)(*(float *)&v118 + *((float *)&v118 + 1))) {
    goto LABEL_106;
  }
  if (*(float *)v128.i32 < *(float *)&v118) {
    goto LABEL_62;
  }
  if (*(float *)v128.i32 > *(float *)&v118
    || (uint64_t v72 = v129,
        unint64_t v73 = (unint64_t)((char *)v130 - (char *)v129) >> 2,
        float v74 = (int *)v119,
        unint64_t v75 = (unint64_t)((unsigned char *)v120 - (unsigned char *)v119) >> 2,
        (int)v73 > (int)v75))
  {
LABEL_106:
    uint64_t v37 = &v118;
  }
  else
  {
    uint64_t v37 = (uint64_t **)&v128;
    if ((int)v73 >= 1 && (int)v73 >= (int)v75)
    {
      uint64_t v76 = ((unint64_t)((char *)v130 - (char *)v129) >> 2) - 1;
      do
      {
        int v78 = *v72++;
        int v77 = v78;
        int v80 = *v74++;
        int v79 = v80;
        if (v77 < v80) {
          goto LABEL_106;
        }
        BOOL v81 = v77 > v79 || v76-- == 0;
        uint64_t v37 = (uint64_t **)&v128;
      }
      while (!v81);
    }
  }
LABEL_107:
  int v48 = *((_DWORD *)v37 + 1);
  LODWORD(v109) = *(_DWORD *)v37;
  HIDWORD(v109) = v48;
  unsigned int v111 = 0;
  uint64_t v112 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v37[1], (uint64_t)v37[2], ((char *)v37[2] - (char *)v37[1]) >> 2);
  int32x2_t v128 = (int32x2_t)v109;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v129, (char *)__p, (uint64_t)v111, (v111 - (unsigned char *)__p) >> 2);
  uint64_t v49 = __p;
  if (__p)
  {
    unsigned int v111 = __p;
    goto LABEL_117;
  }
LABEL_118:
  if (v114)
  {
    unint64_t v115 = v114;
    operator delete(v114);
  }
  double v33 = v119;
  if (v119)
  {
LABEL_66:
    int v120 = v33;
    operator delete(v33);
  }
LABEL_67:
  LODWORD(v113) = v132.i32[1];
  LODWORD(v118) = v132.i32[0];
  LODWORD(v109) = 2139095040;
  LODWORD(v1++*(_DWORD *)(result + 24) = 2139095040;
  if (*(float *)v132.i32 != INFINITY || *(float *)&v113 != *(float *)&v124 || v134 != v133)
  {
    LODWORD(v113) = v128.i32[1];
    LODWORD(v118) = v128.i32[0];
    LODWORD(v109) = 2139095040;
    LODWORD(v1++*(_DWORD *)(result + 24) = 2139095040;
    if (*(float *)v128.i32 == INFINITY && *(float *)&v113 == *(float *)&v124 && v130 == v129)
    {
      --*(_DWORD *)(a1[5] + 4 * (int)a2);
      --*(_DWORD *)(a1[2] + 4 * a4[5].i32[0]);
      a4[5].i32[0] = *((_DWORD *)a1 + 2);
      (*(void (**)(void))(*(void *)*a1 + 296))();
      (*(void (**)(void *, uint64_t))(*v113 + 64))(v113, a3);
      (*(void (**)(void *, float32x2_t *))(*v113 + 88))(v113, a4);
      if (v113) {
        (*(void (**)(void *))(*v113 + 8))(v113);
      }
    }
    else
    {
      if ((float)(*(float *)v132.i32 + *(float *)&v132.i32[1]) < (float)(*(float *)v128.i32 + *(float *)&v128.i32[1])) {
        goto LABEL_74;
      }
      if ((float)(*(float *)v132.i32 + *(float *)&v132.i32[1]) <= (float)(*(float *)v128.i32 + *(float *)&v128.i32[1]))
      {
        if (*(float *)v132.i32 < *(float *)v128.i32)
        {
LABEL_74:
          unint64_t v38 = &v132;
        }
        else
        {
          if (*(float *)v132.i32 > *(float *)v128.i32) {
            goto LABEL_76;
          }
          int v52 = v133;
          unint64_t v53 = (unint64_t)((char *)v134 - (char *)v133) >> 2;
          int v54 = v129;
          unint64_t v55 = (unint64_t)((char *)v130 - (char *)v129) >> 2;
          if ((int)v53 > (int)v55) {
            goto LABEL_76;
          }
          unint64_t v38 = &v132;
          if ((int)v53 >= 1 && (int)v53 >= (int)v55)
          {
            uint64_t v56 = ((unint64_t)((char *)v134 - (char *)v133) >> 2) - 1;
            do
            {
              int v58 = *v52++;
              int v57 = v58;
              int v60 = *v54++;
              int v59 = v60;
              if (v57 < v60) {
                goto LABEL_76;
              }
              BOOL v61 = v57 > v59 || v56-- == 0;
              unint64_t v38 = &v132;
            }
            while (!v61);
          }
        }
      }
      else
      {
LABEL_76:
        unint64_t v38 = &v128;
      }
      __int32 v39 = v38->i32[1];
      LODWORD(v118) = v38->i32[0];
      HIDWORD(v118) = v39;
      int v120 = 0;
      uint64_t v121 = 0;
      unint64_t v119 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v119, *(const void **)&v38[1], *(void *)&v38[2], (uint64_t)(*(void *)&v38[2] - *(void *)&v38[1]) >> 2);
      fst::Divide<fst::LatticeWeightTpl<float>,int>((uint64_t)&v128, (uint64_t)&v118, 0, (uint64_t)&v113);
      float v93 = v113;
      BOOL v95 = 0;
      uint64_t v96 = 0;
      float v94 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v94, v114, (uint64_t)v115, ((unsigned char *)v115 - (unsigned char *)v114) >> 2);
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::Reweight(a1, a2, a3, (float32x2_t *)&v93);
      if (v94)
      {
        BOOL v95 = v94;
        operator delete(v94);
      }
      if (v114)
      {
        unint64_t v115 = v114;
        operator delete(v114);
      }
      if (v119)
      {
        int v120 = v119;
        operator delete(v119);
      }
    }
  }
  uint64_t v40 = v125;
  if (v126 != v125)
  {
    uint64_t v41 = 0;
    unint64_t v42 = 0;
    do
    {
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      ++*(_DWORD *)(a1[2] + 4 * *(int *)(v40 + v41 + 40));
      (*(void (**)(void, uint64_t))(*(void *)*a1 + 208))(*a1, a2);
      ++v42;
      uint64_t v40 = v125;
      v41 += 48;
    }
    while (v42 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v126 - v125) >> 4));
  }
  uint64_t v118 = &v125;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
  if (v129)
  {
    unsigned int v130 = v129;
    operator delete(v129);
  }
  if (v133)
  {
    unint64_t v134 = v133;
    operator delete(v133);
  }
}

void sub_1B2096B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,void *a40,uint64_t a41)
{
  a38 = v41 - 192;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  __int32 v43 = *(void **)(v41 - 160);
  if (v43)
  {
    *(void *)(v41 - 152) = v43;
    operator delete(v43);
  }
  __n128 v44 = *(void **)(v41 - 128);
  if (v44)
  {
    *(void *)(v41 - 120) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEpsPattern2(void *a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  __int32 v8 = a4[5].i32[0];
  int v9 = *(_DWORD *)(a1[2] + 4 * v8);
  uint64_t v10 = v8;
  (*(void (**)(float32x2_t *__return_ptr))(*(void *)*a1 + 32))(&v55);
  v30.i32[0] = v55.i32[1];
  LODWORD(v36) = v55.i32[0];
  LODWORD(v42) = 2139095040;
  float v60 = INFINITY;
  if (v55.f32[0] == INFINITY && *(float *)v30.i32 == v60 && v57 == v56)
  {
    (*(void (**)(void, uint64_t, uint64_t *))(*(void *)*a1 + 296))(*a1, v10, &v42);
    while (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v42 + 32))(v42) + 40) == *((_DWORD *)a1 + 2))
      (*(void (**)(uint64_t))(*(void *)v42 + 40))(v42);
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 32))(v42);
    uint64_t v36 = *(void **)v28;
    uint64_t v37 = *(void **)(v28 + 8);
    __int32 v39 = 0;
    uint64_t v40 = 0;
    unint64_t v38 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v38, *(const void **)(v28 + 16), *(void *)(v28 + 24), (uint64_t)(*(void *)(v28 + 24) - *(void *)(v28 + 16)) >> 2);
    int v41 = *(_DWORD *)(v28 + 40);
    BOOL v32 = 0;
    double v33 = 0;
    uint64_t v34 = 0;
    int CanCombineArcs = fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::CanCombineArcs((uint64_t)a1, a4, (float32x2_t *)&v36, &v30);
    if (CanCombineArcs)
    {
      if (v9 == 1)
      {
        --*(_DWORD *)(a1[5] + 4 * v10);
        --*(_DWORD *)(a1[2] + 4 * v41);
        int v41 = *((_DWORD *)a1 + 2);
        (*(void (**)(uint64_t, void **))(*(void *)v42 + 88))(v42, &v36);
      }
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      ++*(_DWORD *)(a1[2] + 4 * v35);
      (*(void (**)(void, uint64_t, int32x2_t *))(*(void *)*a1 + 208))(*a1, a2, &v30);
    }
    if (v32)
    {
      double v33 = v32;
      operator delete(v32);
    }
    if (v38)
    {
      __int32 v39 = v38;
      operator delete(v38);
    }
    if (v42) {
      (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
    }
    if (CanCombineArcs) {
      goto LABEL_30;
    }
    goto LABEL_32;
  }
  uint64_t v37 = 0;
  unint64_t v38 = 0;
  __int32 v39 = 0;
  float32x2_t v51 = v55;
  unint64_t v53 = 0;
  uint64_t v54 = 0;
  int v52 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v52, v56, (uint64_t)v57, (v57 - v56) >> 2);
  BOOL CanCombineFinal = fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::CanCombineFinal(a4, &v51, (int32x2_t *)&v36);
  if (v52)
  {
    unint64_t v53 = v52;
    operator delete(v52);
  }
  if (CanCombineFinal)
  {
    (*(void (**)(int32x2_t *__return_ptr))(*(void *)*a1 + 32))(&v30);
    float v60 = *(float *)&v30.i32[1];
    LODWORD(v42) = v30.i32[0];
    int v59 = 2139095040;
    float v58 = INFINITY;
    v12.n128_u32[0] = v30.i32[0];
    BOOL v13 = *(float *)v30.i32 == INFINITY && (v12.n128_f32[0] = v60, v60 == v58) && v32 == __p;
    if (__p)
    {
      BOOL v32 = __p;
      operator delete(__p);
    }
    if (v13) {
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    }
    uint64_t v14 = *a1;
    (*(void (**)(int32x2_t *__return_ptr, void, uint64_t, __n128))(*(void *)*a1 + 32))(&v30, *a1, a2, v12);
    if ((float)(*(float *)v30.i32 + *(float *)&v30.i32[1]) >= (float)(*(float *)&v36 + *((float *)&v36 + 1)))
    {
      if ((float)(*(float *)v30.i32 + *(float *)&v30.i32[1]) > (float)(*(float *)&v36 + *((float *)&v36 + 1)))
      {
LABEL_17:
        float v15 = (int32x2_t *)&v36;
LABEL_20:
        __int32 v16 = v15->i32[1];
        v47[0] = v15->i32[0];
        v47[1] = v16;
        uint64_t v49 = 0;
        uint64_t v50 = 0;
        int v48 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v48, *(const void **)&v15[1], *(void *)&v15[2], (uint64_t)(*(void *)&v15[2] - *(void *)&v15[1]) >> 2);
        (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v14 + 184))(v14, a2, v47);
        if (v48)
        {
          uint64_t v49 = v48;
          operator delete(v48);
        }
        if (__p)
        {
          BOOL v32 = __p;
          operator delete(__p);
        }
        if (v9 == 1)
        {
          --*(_DWORD *)(a1[5] + 4 * v10);
          uint64_t v17 = *a1;
          int32x2_t v43 = vdup_n_s32(0x7F800000u);
          BOOL v45 = 0;
          uint64_t v46 = 0;
          __n128 v44 = 0;
          (*(void (**)(uint64_t, uint64_t, int32x2_t *))(*(void *)v17 + 184))(v17, v10, &v43);
          if (v44)
          {
            BOOL v45 = v44;
            operator delete(v44);
          }
        }
        goto LABEL_27;
      }
      if (*(float *)v30.i32 >= *(float *)&v36)
      {
        if (*(float *)v30.i32 <= *(float *)&v36)
        {
          int v18 = (int *)__p;
          unint64_t v19 = (unint64_t)((unsigned char *)v32 - (unsigned char *)__p) >> 2;
          int v20 = (int *)v37;
          unint64_t v21 = (unint64_t)((unsigned char *)v38 - (unsigned char *)v37) >> 2;
          if ((int)v19 <= (int)v21)
          {
            float v15 = &v30;
            if ((int)v19 < 1 || (int)v19 < (int)v21) {
              goto LABEL_20;
            }
            uint64_t v22 = ((unint64_t)((unsigned char *)v32 - (unsigned char *)__p) >> 2) - 1;
            while (1)
            {
              int v24 = *v18++;
              int v23 = v24;
              int v26 = *v20++;
              int v25 = v26;
              if (v23 < v26) {
                break;
              }
              BOOL v27 = v23 > v25 || v22-- == 0;
              float v15 = &v30;
              if (v27) {
                goto LABEL_20;
              }
            }
          }
        }
        goto LABEL_17;
      }
    }
    float v15 = &v30;
    goto LABEL_20;
  }
LABEL_27:
  if (v37)
  {
    unint64_t v38 = v37;
    operator delete(v37);
  }
  if (CanCombineFinal)
  {
LABEL_30:
    --*(_DWORD *)(a1[5] + 4 * (int)a2);
    --*(_DWORD *)(a1[2] + 4 * v10);
    a4[5].i32[0] = *((_DWORD *)a1 + 2);
    (*(void (**)(void))(*(void *)*a1 + 296))();
    (*(void (**)(void *, uint64_t))(*v36 + 64))(v36, a3);
    (*(void (**)(void *, float32x2_t *))(*v36 + 88))(v36, a4);
    if (v36) {
      (*(void (**)(void *))(*v36 + 8))(v36);
    }
  }
LABEL_32:
  if (v56)
  {
    int v57 = v56;
    operator delete(v56);
  }
}

void sub_1B2097418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  int v31 = *(void **)(v29 - 120);
  if (v31)
  {
    *(void *)(v29 - 112) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::CanCombineArcs(uint64_t a1, float32x2_t *a2, float32x2_t *a3, int32x2_t *a4)
{
  if (a2->i32[0]) {
    BOOL v4 = a3->i32[0] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    return 0;
  }
  if (a2->i32[1] && a3->i32[1] != 0) {
    return 0;
  }
  fst::Times<fst::LatticeWeightTpl<float>,int>(a2 + 1, a3 + 1, &v12);
  a4[1] = v12;
  if (&a4[1] != &v12) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&a4[2], (char *)__p, (uint64_t)v14, (v14 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
  __int32 v9 = a2->i32[0];
  if (!a2->i32[0]) {
    __int32 v9 = a3->i32[0];
  }
  a4->i32[0] = v9;
  __int32 v10 = a2->i32[1];
  if (!v10) {
    __int32 v10 = a3->i32[1];
  }
  a4->i32[1] = v10;
  a4[5].i32[0] = a3[5].i32[0];
  return 1;
}

void sub_1B209760C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::CanCombineFinal(float32x2_t *a1, float32x2_t *a2, int32x2_t *a3)
{
  BOOL v3 = *a1 == 0;
  if (!*(void *)a1)
  {
    fst::Times<fst::LatticeWeightTpl<float>,int>(a1 + 1, a2, &v6);
    *a3 = v6;
    if (&v6 != a3) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&a3[1], (char *)__p, (uint64_t)v8, (v8 - (unsigned char *)__p) >> 2);
    }
    if (__p)
    {
      __int32 v8 = __p;
      operator delete(__p);
    }
  }
  return v3;
}

void sub_1B20976B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::Reweight(void *a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  (*(void (**)(void, uint64_t, uint64_t *))(*(void *)*a1 + 296))(*a1, a2, &v31);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 64))(v31, a3);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 32))(v31);
  uint64_t v25 = *(void *)v7;
  float32x2_t v26 = *(float32x2_t *)(v7 + 8);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  BOOL v27 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, *(const void **)(v7 + 16), *(void *)(v7 + 24), (uint64_t)(*(void *)(v7 + 24) - *(void *)(v7 + 16)) >> 2);
  unsigned int v30 = *(_DWORD *)(v7 + 40);
  fst::Times<fst::LatticeWeightTpl<float>,int>(&v26, a4, (int32x2_t *)&v18);
  float32x2_t v26 = v18;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v27, (char *)__p, (uint64_t)v20, ((unsigned char *)v20 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    int v20 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v31 + 88))(v31, &v25);
  (*(void (**)(void, void, uint64_t *))(*(void *)*a1 + 296))(*a1, v30, &v24);
  while (!(*(unsigned int (**)(uint64_t))(*(void *)v24 + 24))(v24))
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 32))(v24);
    float32x2_t v18 = *(float32x2_t *)v8;
    std::string __p = *(void **)(v8 + 8);
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    int v20 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v20, *(const void **)(v8 + 16), *(void *)(v8 + 24), (uint64_t)(*(void *)(v8 + 24) - *(void *)(v8 + 16)) >> 2);
    int v23 = *(_DWORD *)(v8 + 40);
    if (v23 != *((_DWORD *)a1 + 2))
    {
      fst::Divide<fst::LatticeWeightTpl<float>,int>((uint64_t)&__p, (uint64_t)a4, 0, (uint64_t)&v15);
      std::string __p = v15;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v20, (char *)v16, (uint64_t)v17, (v17 - (unsigned char *)v16) >> 2);
      if (v16)
      {
        uint64_t v17 = v16;
        operator delete(v16);
      }
      (*(void (**)(uint64_t, float32x2_t *))(*(void *)v24 + 88))(v24, &v18);
    }
    if (v20)
    {
      unint64_t v21 = v20;
      operator delete(v20);
    }
    (*(void (**)(uint64_t))(*(void *)v24 + 40))(v24);
  }
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  (*(void (**)(float32x2_t *__return_ptr))(*(void *)*a1 + 32))(&v18);
  LODWORD(v++*(_DWORD *)(result + 24) = v18.i32[1];
  LODWORD(v15) = v18.i32[0];
  int v33 = 2139095040;
  float v32 = INFINITY;
  if (v18.f32[0] != INFINITY || *(float *)&v24 != v32 || v20 != __p)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = v30;
    fst::Divide<fst::LatticeWeightTpl<float>,int>((uint64_t)&v18, (uint64_t)a4, 0, (uint64_t)v12);
    (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v9 + 184))(v9, v10, v12);
    if (v13)
    {
      uint64_t v14 = v13;
      operator delete(v13);
    }
  }
  if (__p)
  {
    int v20 = __p;
    operator delete(__p);
  }
  if (v27)
  {
    uint64_t v28 = v27;
    operator delete(v27);
  }
  uint64_t result = v31;
  if (v31) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  return result;
}

void sub_1B2097B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  float32x2_t v26 = *(void **)(v24 - 96);
  if (v26)
  {
    *(void *)(v24 - 88) = v26;
    operator delete(v26);
  }
  uint64_t v27 = *(void *)(v24 - 64);
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<quasar::FirstPassArcDetail>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<quasar::FirstPassArcDetail>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::default_delete<quasar::DetailedLattice>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)a2 = &unk_1F0A52EC8;
    BOOL v3 = (void *)(a2 + 8);
    uint64_t v5 = (void **)(a2 + 24);
    std::vector<quasar::FirstPassArcDetail>::__destroy_vector::operator()[abi:ne180100](&v5);
    fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(v3);
    return MEMORY[0x1B3EA8670](a2, 0xA1C40A3561BEDLL);
  }
  return result;
}

uint64_t quasar::DetailedLattice::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = a1 + 24;
  *(_DWORD *)(a3 + 4) = 954437177 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  std::vector<kaldi::WordHypLattice::InputArcDetail>::emplace_back<>((uint64_t *)(a1 + 24));
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(v5 - 16);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc(*(void **)(v5 - 8), a2, (float *)a3);
  return *(void *)(v5 + 8) - 72;
}

uint64_t std::vector<kaldi::WordHypLattice::InputArcDetail>::emplace_back<>(uint64_t *a1)
{
  unint64_t v4 = a1[2];
  int v2 = a1 + 2;
  unint64_t v3 = v4;
  unint64_t v5 = *(v2 - 1);
  if (v5 >= v4)
  {
    unint64_t v7 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0x38E38E38E38E38ELL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0x8E38E38E38E38E39 * ((uint64_t)(v3 - *a1) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x1C71C71C71C71C7) {
      unint64_t v10 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v10 = v8;
    }
    v14[4] = v2;
    if (v10) {
      unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)v2, v10);
    }
    else {
      unint64_t v11 = 0;
    }
    int32x2_t v12 = &v11[72 * v7];
    v14[0] = v11;
    v14[1] = v12;
    int v14[3] = &v11[72 * v10];
    *(void *)int32x2_t v12 = 0;
    *((void *)v12 + 1) = 0x3FF0000000000000;
    *((_OWORD *)v12 + 1) = 0u;
    *((_OWORD *)v12 + 2) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((void *)v12 + 8) = 0;
    float32x2_t v14[2] = v12 + 72;
    std::vector<kaldi::WordHypLattice::InputArcDetail>::__swap_out_circular_buffer(a1, v14);
    uint64_t v6 = a1[1];
    std::__split_buffer<quasar::FirstPassArcDetail>::~__split_buffer(v14);
  }
  else
  {
    *(void *)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0x3FF0000000000000;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(void *)(v5 + 64) = 0;
    uint64_t v6 = v5 + 72;
    a1[1] = v5 + 72;
  }
  a1[1] = v6;
  return v6 - 72;
}

void sub_1B2097EE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::FirstPassArcDetail>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::WordHypLattice::InputArcDetail>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::WordHypLattice::InputArcDetail>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::WordHypLattice::InputArcDetail>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    uint64_t v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 - 72);
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 56) = 0;
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 40) = *(void *)(a3 - 40);
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      uint64_t v7 = *((void *)&v13 + 1) - 72;
      *((void *)&v13 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    uint64_t v8 = v13;
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::WordHypLattice::InputArcDetail>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::WordHypLattice::InputArcDetail>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FirstPassArcDetail>,std::reverse_iterator<quasar::FirstPassArcDetail*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::__shared_ptr_pointer<quasar::DetailedLattice  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::DetailedLattice  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<quasar::DetailedLattice>::operator()[abi:ne180100](a1 + 24, *(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<quasar::DetailedLattice  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<int,int>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<int,int>>,0>(uint64_t a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  int v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *int v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v++*(_DWORD *)(result + 24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B2098460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  double result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B2098510(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<int,int>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::vector<std::pair<int,std::vector<int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,std::vector<int>>>,std::reverse_iterator<std::pair<int,std::vector<int>>*>,std::reverse_iterator<std::pair<int,std::vector<int>>*>,std::reverse_iterator<std::pair<int,std::vector<int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,std::vector<int>>>,std::reverse_iterator<std::pair<int,std::vector<int>>*>,std::reverse_iterator<std::pair<int,std::vector<int>>*>,std::reverse_iterator<std::pair<int,std::vector<int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  float32x2_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      int v8 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<int>>>,std::reverse_iterator<std::pair<int,std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<int>>>,std::reverse_iterator<std::pair<int,std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::LexiconFst,std::allocator<kaldi::quasar::LexiconFst>,float &,std::string &,BOOL,void>@<X0>(float *a1@<X1>, uint64_t a2@<X2>, unsigned __int8 *a3@<X3>, void *a4@<X8>)
{
  int v8 = operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::LexiconFst>::__shared_ptr_emplace[abi:ne180100]<float &,std::string &,BOOL,std::allocator<kaldi::quasar::LexiconFst>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B209873C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::LexiconFst>::__shared_ptr_emplace[abi:ne180100]<float &,std::string &,BOOL,std::allocator<kaldi::quasar::LexiconFst>,0>(void *a1, float *a2, uint64_t a3, unsigned __int8 *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F098;
  kaldi::quasar::LexiconFst::LexiconFst(a1 + 3, a3, *a4, *a2);
  return a1;
}

void sub_1B20987A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::LexiconFst>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::LexiconFst>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F098;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void *std::__shared_ptr_emplace<kaldi::quasar::LexiconFst>::__on_zero_shared(uint64_t a1)
{
  return std::allocator<kaldi::quasar::LexiconFst>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

void *std::allocator<kaldi::quasar::LexiconFst>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
  return fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)a2);
}

void *std::allocate_shared[abi:ne180100]<kaldi::TrainingGraphCompiler,std::allocator<kaldi::TrainingGraphCompiler>,kaldi::TransitionModel const&,kaldi::ContextDependency &,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *&,std::vector<int> &,kaldi::TrainingGraphCompilerOptions &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  int v8 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel const&,kaldi::ContextDependency &,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *&,std::vector<int> &,kaldi::TrainingGraphCompilerOptions &,std::allocator<kaldi::TrainingGraphCompiler>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B2098918(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel const&,kaldi::ContextDependency &,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *&,std::vector<int> &,kaldi::TrainingGraphCompilerOptions &,std::allocator<kaldi::TrainingGraphCompiler>,0>(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5ECE0;
  kaldi::TrainingGraphCompiler::TrainingGraphCompiler(a1 + 3, a2, a3, *a4);
  return a1;
}

void sub_1B2098978(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5ECE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5ECE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::__on_zero_shared(uint64_t a1)
{
}

void kaldi::TrainingGraphCompiler::~TrainingGraphCompiler(kaldi::TrainingGraphCompiler *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

uint64_t fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

void fst::DeterministicOnDemandFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Final(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 8))(a1, a2, &v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1B2098B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::GetArc(uint64_t a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SortedMatcher((uint64_t)&v1, *(void *)(a1 + 8), 0, 1);
}

void sub_1B2098BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t fst::DeterministicOnDemandFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::GetArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, a2, a3, a4, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v4;
}

void sub_1B2098C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~NonBackoffDeterministicOnDemandFst()
{
}

float fst::DeterministicOnDemandFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinalEos()
{
  return INFINITY;
}

uint64_t kaldi::quasar::LmeFst::GetLmeSymbols(kaldi::quasar::LmeFst *this)
{
  return (uint64_t)this + 192;
}

uint64_t kaldi::quasar::LmeFst::CreateFst(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(void *)(a1 + 24))
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      return 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the base lexicon is empty", 25);
LABEL_23:
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    return 0;
  }
  if (!*(void *)(a1 + 32))
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      return 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the base symbol table is empty", 30);
    goto LABEL_23;
  }
  uint64_t v6 = a2[1];
  uint64_t v7 = v6 - *a2;
  if (v6 != *a2)
  {
    unint64_t v10 = *(void (****)(void))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    if (v9 != *(void *)a1)
    {
      uint64_t v11 = v9 - 16;
      char v12 = (void (***)(void))(v9 - 16);
      long long v13 = (void (***)(void))(v9 - 16);
      do
      {
        long long v14 = *v13;
        v13 -= 2;
        (*v14)(v12);
        v11 -= 16;
        BOOL v15 = v12 == v10;
        char v12 = v13;
      }
      while (!v15);
      *(void *)(a1 + 8) = v10;
      unint64_t v16 = *(_DWORD **)(*(void *)(a1 + 32) + 8);
      __p[0] = &unk_1F0A382C8;
      __p[1] = v16;
      ++v16[42];
      fst::SymbolTable::operator=(a1 + 40, (uint64_t)__p);
      fst::SymbolTable::~SymbolTable((fst::SymbolTable *)__p);
    }
    float v17 = *(_DWORD **)(a5 + 8);
    __p[0] = &unk_1F0A382C8;
    __p[1] = v17;
    ++v17[42];
    uint64_t v18 = a1 + 192;
    fst::SymbolTable::operator=(a1 + 192, (uint64_t)__p);
    fst::SymbolTable::~SymbolTable((fst::SymbolTable *)__p);
    unint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 192) + 120))(a1 + 192);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 192) + 128))(a1 + 192, 0);
    if (v19)
    {
      uint64_t v21 = v20;
      uint64_t v22 = 0;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v18 + 88))(__p, a1 + 192, v21);
        fst::SymbolTable::MutateCheck(a1 + 40);
        fst::SymbolTableImpl::AddSymbol(*(void *)(a1 + 48), (uint64_t)__p, v21);
        if (SBYTE7(v26) < 0) {
          operator delete(__p[0]);
        }
        if (++v22 < v19) {
          uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v18 + 128))(a1 + 192, v22);
        }
      }
      while (v19 != v22);
    }
    std::__tree<std::string>::destroy(a1 + 152, *(char **)(a1 + 160));
    *(void *)(a1 + 152) = a1 + 160;
    *(void *)(a1 + 160) = 0;
    int v23 = *(char **)(a1 + 240);
    *(void *)(a1 + 168) = 0;
    std::__tree<std::string>::destroy(a1 + 232, v23);
    *(void *)(a1 + 232) = a1 + 240;
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
    std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::vector(v28, v7 / 24);
    *(_OWORD *)std::string __p = 0u;
    long long v26 = 0u;
    int v27 = 1065353216;
    operator new();
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the number of templates in the user data is zero", 48);
    goto LABEL_23;
  }
  return 0;
}

void sub_1B2099EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  std::string __p = (void *)(v37 - 192);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (void *)(v37 - 168);
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (void *)(v37 - 144);
  std::vector<std::unordered_map<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (void *)(v37 - 120);
  std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_map<std::string,unsigned long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((result - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return std::vector<std::unordered_map<std::string,unsigned long>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 40 * a2;
    while (result != v7)
      uint64_t result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(result - 40);
    a1[1] = v7;
  }
  return result;
}

void std::vector<std::vector<std::vector<std::string>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<std::string>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      int v8 = v3;
      std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::string>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::string>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      int v8 = v3;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

uint64_t kaldi::quasar::LmeFst::GetNumberOfWordDisambiguationSymbols(kaldi::quasar::LmeFst *this, const fst::SymbolTable *a2)
{
  unint64_t v3 = (*(uint64_t (**)(kaldi::quasar::LmeFst *, const fst::SymbolTable *))(*(void *)this + 120))(this, a2);
  uint64_t v4 = (*(uint64_t (**)(kaldi::quasar::LmeFst *, void))(*(void *)this + 128))(this, 0);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    (*(void (**)(std::string *__return_ptr, kaldi::quasar::LmeFst *, uint64_t))(*(void *)this + 88))(&v20, this, v5);
    std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    int v9 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v20.__r_.__value_.__l.__size_;
    }
    if (size >= 3)
    {
      std::string::const_reference v10 = std::string::at(&v20, 0);
      std::string::size_type v11 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
      int v9 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
      if (*v10 == 47)
      {
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v11 = v20.__r_.__value_.__l.__size_;
        }
        std::string::const_reference v12 = std::string::at(&v20, v11 - 1);
        int64_t v13 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
        int v9 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
        if (*v12 == 47)
        {
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          {
            long long v14 = &v20;
          }
          else
          {
            int64_t v13 = v20.__r_.__value_.__l.__size_;
            long long v14 = (std::string *)v20.__r_.__value_.__r.__words[0];
          }
          if (v13 >= 10)
          {
            BOOL v15 = (std::string *)((char *)v14 + v13);
            unint64_t v16 = v14;
            do
            {
              float v17 = (std::string *)memchr(v16, 47, v13 - 9);
              if (!v17) {
                break;
              }
              if (v17->__r_.__value_.__r.__words[0] == 0x49442D44524F572FLL
                && LOWORD(v17->__r_.__value_.__r.__words[1]) == 11603)
              {
                if (v17 != v15) {
                  v6 += v17 == v14;
                }
                break;
              }
              unint64_t v16 = (std::string *)((char *)&v17->__r_.__value_.__l.__data_ + 1);
              int64_t v13 = (char *)v15 - (char *)v16;
            }
            while ((char *)v15 - (char *)v16 >= 10);
          }
        }
      }
    }
    if (v9 < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (++v7 < v3) {
      uint64_t v5 = (*(uint64_t (**)(kaldi::quasar::LmeFst *, uint64_t))(*(void *)this + 128))(this, v7);
    }
  }
  while (v7 != v3);
  return v6;
}

void sub_1B209A5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::LmeFst::RemoveWordSetContent(uint64_t a1, const void ***a2, long long ***a3)
{
  if (a2[2])
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"has to remove ", 14);
      uint64_t v6 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" words, rebuild the FST now", 27);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v26);
    }
    uint64_t v7 = *a2;
    if (*a2 != (const void **)(a2 + 1))
    {
      do
      {
        std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)(a1 + 152), v7 + 4);
        int v8 = (const void **)v7[1];
        if (v8)
        {
          do
          {
            int v9 = (const void ***)v8;
            int v8 = (const void **)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            int v9 = (const void ***)v7[2];
            BOOL v10 = *v9 == v7;
            uint64_t v7 = (const void **)v9;
          }
          while (!v10);
        }
        uint64_t v7 = (const void **)v9;
      }
      while (v9 != a2 + 1);
    }
    int v27 = 0;
    long long v11 = 0uLL;
    long long v26 = 0u;
    std::string::const_reference v12 = *a3;
    if (*a3 == a3[1])
    {
      uint64_t v21 = 0;
      int64_t v13 = *a3;
    }
    else
    {
      int64_t v13 = *a3;
      do
      {
        long long v14 = (long long *)((char *)*v13 + 24);
        if (*(unsigned char *)(a1 + 56))
        {
          long long __p = 0uLL;
          uint64_t v25 = 0;
          BOOL v15 = v13[1];
          memset(&v23, 0, sizeof(v23));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v23, v14, v15, 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 3));
          unint64_t v16 = (const std::string::value_type *)(a1 + 208);
          if (*(char *)(a1 + 231) < 0) {
            unint64_t v16 = *(const std::string::value_type **)(a1 + 208);
          }
          kaldi::JoinVectorToString((uint64_t *)&v23, v16, 1, &__p);
          uint64_t v28 = &v23;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
          if (!std::__tree<std::string>::__count_unique<std::string>((uint64_t)a2, (const void **)&__p))
          {
            float v17 = (std::string *)*((void *)&v26 + 1);
            if (*((void *)&v26 + 1) >= (unint64_t)v27)
            {
              uint64_t v18 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)&v26, v13);
            }
            else
            {
              **((void **)&v26 + 1) = 0;
              v17->__r_.__value_.__l.__size_ = 0;
              v17->__r_.__value_.__r.__words[2] = 0;
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v17, *v13, v13[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v13[1] - (char *)*v13) >> 3));
              uint64_t v18 = (uint64_t)&v17[1];
            }
            *((void *)&v26 + 1) = v18;
          }
          if (SHIBYTE(v25) < 0) {
            operator delete((void *)__p);
          }
        }
        else
        {
          while (v14 != v13[1])
          {
            if (std::__tree<std::string>::__count_unique<std::string>((uint64_t)a2, (const void **)v14)) {
              goto LABEL_31;
            }
            long long v14 = (long long *)((char *)v14 + 24);
          }
          unint64_t v19 = (std::string *)*((void *)&v26 + 1);
          if (*((void *)&v26 + 1) >= (unint64_t)v27)
          {
            uint64_t v20 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)&v26, v13);
          }
          else
          {
            **((void **)&v26 + 1) = 0;
            v19->__r_.__value_.__l.__size_ = 0;
            v19->__r_.__value_.__r.__words[2] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v19, *v13, v13[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v13[1] - (char *)*v13) >> 3));
            uint64_t v20 = (uint64_t)&v19[1];
          }
          *((void *)&v26 + 1) = v20;
        }
LABEL_31:
        v13 += 3;
      }
      while (v13 != a3[1]);
      std::string::const_reference v12 = *a3;
      long long v11 = v26;
      uint64_t v21 = v27;
    }
    *(_OWORD *)a3 = v11;
    *(void *)&long long v26 = v12;
    *((void *)&v26 + 1) = v13;
    uint64_t v22 = a3[2];
    a3[2] = v21;
    int v27 = v22;
    *(void *)&long long __p = &v26;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"remove excessive homophone prons without removing words, rebuild the FST now", 76);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v26);
  }
}

void sub_1B209A8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19)
{
}

uint64_t kaldi::quasar::LmeFst::CreateFstDirect(uint64_t a1, uint64_t *a2, int a3, int a4, void *a5, uint64_t a6, uint64_t a7, int a8)
{
  if (!*(void *)(a1 + 24))
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      return 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the base lexicon is empty", 25);
LABEL_64:
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    return 0;
  }
  if (!*(void *)(a1 + 32))
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      return 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the base symbol table is empty", 30);
    goto LABEL_64;
  }
  if (!*(unsigned char *)(a1 + 56)) {
    goto LABEL_37;
  }
  if (*(void *)(a1 + 96) == -1)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      int64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the optional silence ", 21);
      uint64_t v16 = *(void *)(a1 + 64);
      uint64_t v15 = a1 + 64;
      uint64_t v14 = v16;
      int v17 = *(char *)(v15 + 23);
      if (v17 >= 0) {
        uint64_t v18 = v15;
      }
      else {
        uint64_t v18 = v14;
      }
      if (v17 >= 0) {
        uint64_t v19 = *(unsigned __int8 *)(v15 + 23);
      }
      else {
        uint64_t v19 = *(void *)(v15 + 8);
      }
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v18, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" is not defined in the symbol table", 35);
      goto LABEL_64;
    }
    return 0;
  }
  if (*(char *)(a1 + 231) < 0)
  {
    std::string::const_reference v12 = *(unsigned __int8 **)(a1 + 208);
    uint64_t v11 = *(void *)(a1 + 216);
    if (!v11) {
      goto LABEL_37;
    }
LABEL_21:
    uint64_t v21 = &v12[v11];
    uint64_t v22 = v12;
LABEL_22:
    uint64_t v23 = 0;
    while (*v22 != asc_1B26B5A8E[v23])
    {
      if (++v23 == 3)
      {
        if (++v22 != v21) {
          goto LABEL_22;
        }
        goto LABEL_37;
      }
    }
    if (v22 == v21 || v22 - v12 == -1) {
      goto LABEL_37;
    }
    if (kaldi::g_kaldi_verbose_level < -1) {
      return 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the word boundary string can only have non-space characters, you set it (", 73);
    int v25 = *(char *)(a1 + 231);
    if (v25 >= 0) {
      uint64_t v26 = a1 + 208;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 208);
    }
    if (v25 >= 0) {
      uint64_t v27 = *(unsigned __int8 *)(a1 + 231);
    }
    else {
      uint64_t v27 = *(void *)(a1 + 216);
    }
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)")", 1);
    goto LABEL_64;
  }
  uint64_t v11 = *(unsigned __int8 *)(a1 + 231);
  std::string::const_reference v12 = (unsigned __int8 *)(a1 + 208);
  if (*(unsigned char *)(a1 + 231)) {
    goto LABEL_21;
  }
LABEL_37:
  uint64_t v30 = *a2;
  uint64_t v29 = a2[1];
  unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v29 - *a2) >> 3);
  a5[1] = *a5;
  std::vector<kaldi::quasar::LmeFst::Stats>::resize((uint64_t)a5, v31);
  if (v29 == v30)
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      return 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the number of templates in the user data is zero", 48);
    goto LABEL_64;
  }
  BOOL v32 = v29 - v30 == 24 || a8 == 0;
  if (v32)
  {
    uint64_t v34 = *(void (****)(void))a1;
    uint64_t v33 = *(void *)(a1 + 8);
    if (v33 != *(void *)a1)
    {
      uint64_t v35 = v33 - 16;
      uint64_t v36 = (void (***)(void))(v33 - 16);
      uint64_t v37 = (void (***)(void))(v33 - 16);
      do
      {
        unint64_t v38 = *v37;
        v37 -= 2;
        (*v38)(v36);
        v35 -= 16;
        BOOL v32 = v36 == v34;
        uint64_t v36 = v37;
      }
      while (!v32);
      *(void *)(a1 + 8) = v34;
      __int32 v39 = *(_DWORD **)(*(void *)(a1 + 32) + 8);
      __p[0] = &unk_1F0A382C8;
      __p[1] = v39;
      ++v39[42];
      fst::SymbolTable::operator=(a1 + 40, (uint64_t)__p);
      fst::SymbolTable::~SymbolTable((fst::SymbolTable *)__p);
    }
    uint64_t v40 = *(_DWORD **)(a7 + 8);
    __p[0] = &unk_1F0A382C8;
    __p[1] = v40;
    ++v40[42];
    uint64_t v41 = a1 + 192;
    fst::SymbolTable::operator=(a1 + 192, (uint64_t)__p);
    fst::SymbolTable::~SymbolTable((fst::SymbolTable *)__p);
    unint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 192) + 120))(a1 + 192);
    uint64_t v43 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 192) + 128))(a1 + 192, 0);
    if (v42)
    {
      uint64_t v44 = v43;
      uint64_t v45 = 0;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v41 + 88))(__p, a1 + 192, v44);
        fst::SymbolTable::MutateCheck(a1 + 40);
        fst::SymbolTableImpl::AddSymbol(*(void *)(a1 + 48), (uint64_t)__p, v44);
        if (SBYTE7(v53) < 0) {
          operator delete(__p[0]);
        }
        if (++v45 < v42) {
          uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v41 + 128))(a1 + 192, v45);
        }
      }
      while (v42 != v45);
    }
    std::__tree<std::string>::destroy(a1 + 152, *(char **)(a1 + 160));
    *(void *)(a1 + 152) = a1 + 160;
    *(void *)(a1 + 160) = 0;
    uint64_t v46 = *(char **)(a1 + 240);
    *(void *)(a1 + 168) = 0;
    std::__tree<std::string>::destroy(a1 + 232, v46);
    *(void *)(a1 + 232) = a1 + 240;
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
    std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::vector(v59, v31);
    if (v59[0] != v59[1])
    {
      *(_OWORD *)long long __p = 0u;
      long long v53 = 0u;
      int v54 = 1065353216;
      operator new();
    }
    std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::vector(v58, v31);
    if (v58[0] != v58[1])
    {
      *(_OWORD *)long long __p = 0u;
      long long v53 = 0u;
      int v54 = 1065353216;
      operator new();
    }
    memset(v57, 0, sizeof(v57));
    std::vector<std::unordered_map<std::string,unsigned long>>::resize(v57, v31);
    memset(v56, 0, sizeof(v56));
    std::vector<std::vector<std::vector<std::string>>>::resize(v56, v31);
    memset(v55, 0, sizeof(v55));
    std::vector<std::vector<std::string>>::resize(v55, v31);
    std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::resize((void *)a1, v31);
    kaldi::quasar::LmeFst::GetNumberOfWordDisambiguationSymbols(*(kaldi::quasar::LmeFst **)(a1 + 32), v47);
    kaldi::quasar::ExtractLexiconForLmeSlot(*(_DWORD *)a2, *(void *)(a1 + 24), a3, a4, *(kaldi::quasar::Lexicon **)v59[0]);
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"incomplete_fst should not be used with more than 1 FST", 54);
    goto LABEL_64;
  }
  return 0;
}

void sub_1B209C188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  long long __p = (void *)(v25 - 240);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long __p = (void *)(v25 - 216);
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long __p = (void *)(v25 - 192);
  std::vector<std::unordered_map<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long __p = (void *)(v25 - 168);
  std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long __p = (void *)(v25 - 144);
  std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::LmeFst::Stats>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<kaldi::quasar::LmeFst::Stats>::__append((char **)a1, a2 - v2);
  }
}

uint64_t kaldi::quasar::LmeFst::BuildCompoundLexicon(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  uint64_t v7 = std::unordered_set<std::string>::unordered_set((uint64_t)v77, v6);
  uint64_t v8 = a1 + 64;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v7, (unsigned __int8 *)(a1 + 64), a1 + 64);
  kaldi::quasar::Lexicon::MergePhoneSet(a4, (uint64_t)v77);
  char v75 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v74, v9);
  uint64_t v76 = 0;
  BOOL v10 = *a3;
  if (*a3 != a3[1])
  {
    float v60 = (void *)*MEMORY[0x1E4FBA418];
    BOOL v61 = *(void **)(MEMORY[0x1E4FBA418] + 24);
    float32x2_t v55 = (void *)a4;
    do
    {
      std::vector<std::vector<std::string>>::vector(v73, -1 - 0x5555555555555555 * ((uint64_t)(v10[1] - *v10) >> 3));
      uint64_t v11 = (unsigned __int8 *)(*v10 + 24);
      if (v11 != (unsigned __int8 *)v10[1])
      {
        unint64_t v12 = 0;
        float v58 = v10;
        do
        {
          v72[0] = 0;
          v72[1] = 0;
          p_v = (std::__split_buffer<std::string> *)v72;
          int v59 = v11;
          kaldi::quasar::Lexicon::GetPron(a2, v11, (uint64_t)&p_v);
          p_first = (void **)&p_v->__first_;
          if (p_v != (std::__split_buffer<std::string> *)v72)
          {
            do
            {
              long long v69 = 0uLL;
              int64_t v70 = 0;
              kaldi::JoinVectorToString((uint64_t *)p_first + 4, " ", 1, &v69);
              uint64_t v14 = v73[0];
              if (v12 < -1 - 0x5555555555555555 * ((uint64_t)(v73[1] - v73[0]) >> 3))
              {
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v62);
                if (v70 >= 0) {
                  uint64_t v15 = (uint64_t)&v69;
                }
                else {
                  uint64_t v15 = v69;
                }
                if (v70 >= 0) {
                  uint64_t v16 = HIBYTE(v70);
                }
                else {
                  uint64_t v16 = *((void *)&v69 + 1);
                }
                int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, v15, v16);
                uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
                int v19 = *(char *)(a1 + 87);
                if (v19 >= 0) {
                  uint64_t v20 = v8;
                }
                else {
                  uint64_t v20 = *(void *)(a1 + 64);
                }
                if (v19 >= 0) {
                  uint64_t v21 = *(unsigned __int8 *)(a1 + 87);
                }
                else {
                  uint64_t v21 = *(void *)(a1 + 72);
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
                uint64_t v22 = v73[0];
                std::stringbuf::str();
                uint64_t v23 = v22 + 24 * v12;
                unint64_t v26 = *(void *)(v23 + 8);
                uint64_t v25 = (unint64_t *)(v23 + 8);
                unint64_t v24 = v26;
                unint64_t v27 = v25[1];
                if (v26 >= v27)
                {
                  uint64_t v30 = v8;
                  unint64_t v31 = (std::vector<std::string> *)(v22 + 24 * v12);
                  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (unint64_t)v31->__begin_) >> 3);
                  unint64_t v33 = v32 + 1;
                  if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (unint64_t)v31->__begin_) >> 3);
                  if (2 * v34 > v33) {
                    unint64_t v33 = 2 * v34;
                  }
                  if (v34 >= 0x555555555555555) {
                    unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v35 = v33;
                  }
                  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v25 + 1);
                  if (v35) {
                    uint64_t v36 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(v25 + 1), v35);
                  }
                  else {
                    uint64_t v36 = 0;
                  }
                  uint64_t v37 = v36 + v32;
                  __v.__first_ = v36;
                  __v.__begin_ = v37;
                  __v.__end_cap_.__value_ = &v36[v35];
                  long long v38 = __p;
                  v37->__r_.__value_.__r.__words[2] = v68;
                  *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
                  std::string::size_type v68 = 0;
                  long long __p = 0uLL;
                  __v.__end_ = v37 + 1;
                  std::vector<std::string>::__swap_out_circular_buffer(v31, &__v);
                  unint64_t v29 = *v25;
                  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
                  uint64_t v8 = v30;
                }
                else
                {
                  long long v28 = __p;
                  *(void *)(v24 + 16) = v68;
                  *(_OWORD *)unint64_t v24 = v28;
                  std::string::size_type v68 = 0;
                  long long __p = 0uLL;
                  unint64_t v29 = v24 + 24;
                  *uint64_t v25 = v24 + 24;
                }
                *uint64_t v25 = v29;
                if (SHIBYTE(v68) < 0) {
                  operator delete((void *)__p);
                }
                v62[0] = v60;
                *(void **)((char *)v62 + *((void *)v60 - 3)) = v61;
                v62[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
                if (v65 < 0) {
                  operator delete(v64);
                }
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                MEMORY[0x1B3EA8520](&v66);
                uint64_t v14 = v73[0];
              }
              uint64_t v39 = v14 + 24 * v12;
              uint64_t v41 = *(std::string **)(v39 + 8);
              unint64_t v40 = *(void *)(v39 + 16);
              unint64_t v42 = (uint64_t *)(v39 + 8);
              if ((unint64_t)v41 >= v40)
              {
                uint64_t v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(v14 + 24 * v12), &v69);
              }
              else
              {
                if (SHIBYTE(v70) < 0)
                {
                  std::string::__init_copy_ctor_external(v41, (const std::string::value_type *)v69, *((std::string::size_type *)&v69 + 1));
                }
                else
                {
                  long long v43 = v69;
                  v41->__r_.__value_.__r.__words[2] = v70;
                  *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v43;
                }
                uint64_t v44 = (uint64_t)&v41[1];
                *unint64_t v42 = (uint64_t)&v41[1];
              }
              *unint64_t v42 = v44;
              if (SHIBYTE(v70) < 0) {
                operator delete((void *)v69);
              }
              uint64_t v45 = (char *)p_first[1];
              if (v45)
              {
                do
                {
                  uint64_t v46 = (char **)v45;
                  uint64_t v45 = *(char **)v45;
                }
                while (v45);
              }
              else
              {
                do
                {
                  uint64_t v46 = (char **)p_first[2];
                  BOOL v47 = *v46 == (char *)p_first;
                  p_first = (void **)v46;
                }
                while (!v47);
              }
              p_first = (void **)v46;
            }
            while (v46 != v72);
          }
          std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)&p_v, v72[0]);
          ++v12;
          BOOL v10 = v58;
          uint64_t v11 = v59 + 24;
        }
        while (v59 + 24 != (unsigned __int8 *)v58[1]);
      }
      v62[0] = 0;
      v62[1] = 0;
      uint64_t v63 = 0;
      int v48 = (long long *)v10[1];
      uint64_t v49 = (long long *)(*v10 + 24);
      memset(&__v, 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::string *)&__v, v49, v48, 0xAAAAAAAAAAAAAAABLL * (((char *)v48 - (char *)v49) >> 3));
      uint64_t v50 = (const std::string::value_type *)(a1 + 208);
      a4 = (uint64_t)v55;
      if (*(char *)(a1 + 231) < 0) {
        uint64_t v50 = *(const std::string::value_type **)(a1 + 208);
      }
      kaldi::JoinVectorToString((uint64_t *)&__v, v50, 1, (long long *)v62);
      p_v = &__v;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_v);
      kaldi::quasar::LmeFst::Permutation(a1, (unsigned __int8 *)v62, v73, v55);
      if (SHIBYTE(v63) < 0) {
        operator delete(v62[0]);
      }
      v62[0] = v73;
      std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
      v10 += 3;
    }
    while (v10 != a3[1]);
  }
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v62, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"LME: spent ", 11);
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v51);
    int v52 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" seconds on creating the compound lexicon for ", 46);
    long long v53 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" items", 6);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v62);
  }
  kaldi::quasar::Lexicon::SetPronView(a4, 3u, 1);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v77);
}

void sub_1B209CB7C(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 - 168);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LmeFst::BuildCompoundChainFst(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, uint64_t a5, void *a6, float a7)
{
  long long v67 = 0uLL;
  uint64_t v68 = 0;
  int64_t v13 = (const std::string::value_type *)(a1 + 208);
  if (*(char *)(a1 + 231) < 0) {
    int64_t v13 = *(const std::string::value_type **)v13;
  }
  kaldi::JoinVectorToString(a2, v13, 1, &v67);
  uint64_t v14 = *(void **)(a1 + 48);
  uint64_t v15 = fst::internal::DenseSymbolMap::Find(v14 + 5, (uint64_t)&v67);
  uint64_t v16 = v15;
  if (v15 != -1)
  {
    uint64_t v17 = v14[4];
    BOOL v18 = __OFSUB__(v15, v17);
    uint64_t v19 = v15 - v17;
    if (v19 < 0 == v18) {
      uint64_t v16 = *(void *)(v14[15] + 8 * v19);
    }
  }
  if (*(unsigned char *)(a1 + 176))
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)a1 + 16 * a5) + 272))(*(void *)a1 + 16 * a5);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v20 + 24))(v20, &v67, v16);
  }
  if (kaldi::quasar::Lexicon::WordHasDisambigLabel(a4, (unsigned __int8 *)&v67)
    || std::__tree<std::string>::__count_unique<std::string>(a1 + 232, (const void **)&v67))
  {
    kaldi::quasar::LmeFst::BuildChainFst((uint64_t *)a1, (unsigned __int8 *)&v67, (uint64_t)a4, a5, a6, a7);
  }
  else
  {
    memset(&v66, 0, sizeof(v66));
    uint64_t v21 = *a2;
    if (a2[1] != *a2)
    {
      int v48 = a6;
      unint64_t v22 = 0;
      uint64_t v23 = 0;
      unsigned int v54 = -1;
      unsigned int v59 = -1;
      unsigned int v52 = v16;
      do
      {
        uint64_t v64 = 0;
        uint64_t v65 = 0;
        uint64_t v63 = &v64;
        kaldi::quasar::Lexicon::GetPron(a3, (unsigned __int8 *)(v21 + 24 * v22), (uint64_t)&v63);
        if (v22) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 1;
        }
        uint64_t v50 = v65;
        uint64_t v51 = v24;
        uint64_t v25 = (char *)v63;
        unint64_t v56 = v22;
        unint64_t v55 = v22 + 1;
        if (v63 == &v64)
        {
          int v57 = -1;
        }
        else
        {
          int v57 = -1;
          char v53 = 1;
          do
          {
            uint64_t v26 = *((void *)v25 + 4);
            if (*((void *)v25 + 5) != v26)
            {
              uint64_t v27 = 0;
              unint64_t v28 = 0;
              unint64_t v29 = v56;
              do
              {
                std::string::operator=(&v66, (const std::string *)(v26 + v27));
                if (v28 | v29)
                {
                  std::string::size_type size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
                  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type size = v66.__r_.__value_.__l.__size_;
                  }
                  std::string::reference v31 = std::string::at(&v66, size - 2);
                  unsigned int v58 = 0;
                  if (v28) {
                    uint64_t v32 = v59;
                  }
                  else {
                    uint64_t v32 = v54;
                  }
                  *std::string::reference v31 = 73;
                  float v33 = 0.0;
                }
                else
                {
                  uint64_t v32 = *(unsigned int *)(a1 + 104);
                  std::string::size_type v34 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
                  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v34 = v66.__r_.__value_.__l.__size_;
                  }
                  *std::string::at(&v66, v34 - 2) = 66;
                  float v33 = a7;
                  unsigned int v58 = v52;
                }
                if (v55 == 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3)
                  && v28 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v25 + 5) - *((void *)v25 + 4)) >> 3))
                {
                  unsigned int v59 = *(_DWORD *)(a1 + 108);
                  std::string::size_type v35 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
                  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v35 = v66.__r_.__value_.__l.__size_;
                  }
                  *std::string::at(&v66, v35 - 2) = 69;
                }
                else if (v57 == -1 {
                       || (unsigned int v59 = v57,
                }
                           v28 + 1 != 0xAAAAAAAAAAAAAAABLL
                                    * ((uint64_t)(*((void *)v25 + 5) - *((void *)v25 + 4)) >> 3)))
                {
                  unsigned int v59 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)a1 + 16 * a5) + 200))(*(void *)a1 + 16 * a5);
                }
                if (!v29
                  && !v28
                  && v55 == 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3)
                  && *((void *)v25 + 5) - *((void *)v25 + 4) == 24)
                {
                  std::string::size_type v42 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
                  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  {
                    long long v43 = &v66;
                  }
                  else
                  {
                    std::string::size_type v42 = v66.__r_.__value_.__l.__size_;
                    long long v43 = (std::string *)v66.__r_.__value_.__r.__words[0];
                  }
                  v43->__r_.__value_.__s.__data_[v42 - 2] = 83;
                }
                unint64_t v60 = (unint64_t)&v66;
                unsigned int v36 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 112, (unsigned __int8 *)&v66, (uint64_t)&std::piecewise_construct, (long long **)&v60)+ 10);
                uint64_t v37 = *(void *)a1 + 16 * a5;
                unint64_t v60 = __PAIR64__(v58, v36);
                float v61 = v33;
                int v62 = v59;
                (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(void *)v37 + 208))(v37, v32, &v60);
                if (v53)
                {
                  int v38 = v57;
                  if (v28 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v25 + 5) - *((void *)v25 + 4)) >> 3)) {
                    int v38 = v59;
                  }
                  int v57 = v38;
                }
                if (v56 && !v28)
                {
                  uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)a1 + 16 * a5) + 200))(*(void *)a1 + 16 * a5);
                  uint64_t v40 = *(void *)a1 + 16 * a5;
                  unint64_t v60 = *(void *)(a1 + 96);
                  float v61 = 0.0;
                  int v62 = v39;
                  (*(void (**)(uint64_t, void, unint64_t *))(*(void *)v40 + 208))(v40, v54, &v60);
                  uint64_t v41 = *(void *)a1 + 16 * a5;
                  unint64_t v60 = __PAIR64__(v58, v36);
                  float v61 = v33;
                  int v62 = v59;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(void *)v41 + 208))(v41, v39, &v60);
                }
                ++v28;
                uint64_t v26 = *((void *)v25 + 4);
                v27 += 24;
                unint64_t v29 = v56;
              }
              while (v28 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)v25 + 5) - v26) >> 3));
            }
            uint64_t v44 = (char *)*((void *)v25 + 1);
            if (v44)
            {
              do
              {
                uint64_t v45 = (char **)v44;
                uint64_t v44 = *(char **)v44;
              }
              while (v44);
            }
            else
            {
              do
              {
                uint64_t v45 = (char **)*((void *)v25 + 2);
                BOOL v46 = *v45 == v25;
                uint64_t v25 = (char *)v45;
              }
              while (!v46);
            }
            char v53 = 0;
            uint64_t v25 = (char *)v45;
          }
          while (v45 != &v64);
        }
        uint64_t v23 = v50 * v51;
        std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)&v63, v64);
        uint64_t v21 = *a2;
        unint64_t v22 = v55;
        unsigned int v54 = v57;
      }
      while (v55 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      int v47 = SHIBYTE(v66.__r_.__value_.__r.__words[2]);
      *v48 += v23;
      if (v47 < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
    }
  }
  if (SHIBYTE(v68) < 0) {
    operator delete((void *)v67);
  }
}

void sub_1B209D384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 113) < 0) {
    operator delete(*(void **)(v32 - 136));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::LmeFst::BuildChainFst(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, void *a5, float a6)
{
  uint64_t v11 = (void *)a1[6];
  uint64_t v12 = fst::internal::DenseSymbolMap::Find(v11 + 5, (uint64_t)a2);
  uint64_t v13 = v12;
  if (v12 != -1)
  {
    uint64_t v14 = v11[4];
    BOOL v15 = __OFSUB__(v12, v14);
    uint64_t v16 = v12 - v14;
    if (v16 < 0 == v15) {
      uint64_t v13 = *(void *)(v11[15] + 8 * v16);
    }
  }
  if (*((unsigned char *)a1 + 176))
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)(*a1 + 16 * a4) + 272))(*a1 + 16 * a4);
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)v17 + 24))(v17, a2, v13);
  }
  int v34 = v13;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  unsigned int v36 = &v37;
  kaldi::quasar::Lexicon::GetPron(a3, a2, (uint64_t)&v36);
  BOOL v18 = (char *)v36;
  if (v36 != &v37)
  {
    uint64_t v19 = *((unsigned int *)a1 + 26);
    do
    {
      uint64_t v20 = *((void *)v18 + 4);
      uint64_t v21 = *((void *)v18 + 5) - v20;
      if (v21)
      {
        uint64_t v22 = 0;
        unint64_t v23 = 0;
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v21 >> 3);
        do
        {
          if (v23)
          {
            int v25 = 0;
            float v26 = 0.0;
            uint64_t v27 = v19;
          }
          else
          {
            uint64_t v27 = *((unsigned int *)a1 + 26);
            float v26 = a6;
            int v25 = v34;
          }
          if (++v23 == v24)
          {
            uint64_t v19 = *((unsigned int *)a1 + 27);
          }
          else
          {
            uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)(*a1 + 16 * a4) + 200))(*a1 + 16 * a4);
            uint64_t v20 = *((void *)v18 + 4);
          }
          uint64_t v28 = *a1;
          uint64_t v39 = (long long *)(v20 + v22);
          v35[0] = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 14), (unsigned __int8 *)(v20 + v22), (uint64_t)&std::piecewise_construct, &v39)+ 5);
          v35[1] = v25;
          *(float *)&v35[2] = v26;
          v35[3] = v19;
          (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)(v28 + 16 * a4) + 208))(v28 + 16 * a4, v27, v35);
          uint64_t v20 = *((void *)v18 + 4);
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v18 + 5) - v20) >> 3);
          v22 += 24;
        }
        while (v23 < v24);
      }
      unint64_t v29 = (char *)*((void *)v18 + 1);
      if (v29)
      {
        do
        {
          uint64_t v30 = (char **)v29;
          unint64_t v29 = *(char **)v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          uint64_t v30 = (char **)*((void *)v18 + 2);
          BOOL v31 = *v30 == v18;
          BOOL v18 = (char *)v30;
        }
        while (!v31);
      }
      BOOL v18 = (char *)v30;
    }
    while (v30 != &v37);
  }
  uint64_t v32 = v37;
  *a5 += v38;
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)&v36, v32);
}

void sub_1B209D684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *a15)
{
}

void kaldi::quasar::LmeFst::CompleteFstDirect(void *a1)
{
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1);
  unint64_t v2 = &unk_1F0A38370;
  unint64_t v3 = a1;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
}

void sub_1B209D78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LmeFst::Permutation(uint64_t a1, unsigned __int8 *a2, void *a3, void *a4)
{
  std::vector<unsigned int>::size_type v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3);
  __x[0] = 1;
  std::vector<unsigned int>::vector(&v30, v7, __x);
  uint64_t v8 = a3[1];
  uint64_t v9 = v8 - *a3;
  if (v8 != *a3)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    std::vector<unsigned int>::pointer begin = v30.__begin_;
    uint64_t v13 = (void *)(*a3 + 8);
    do
    {
      begin[v10++] = -1431655765 * ((*v13 - *(v13 - 1)) >> 3);
      v13 += 3;
    }
    while (v11 > v10);
  }
  kaldi::GenerateCombinationIndices((uint64_t *)&v30, *(void *)(a1 + 88) + 1, 0, (uint64_t *)__x);
  uint64_t v14 = *(uint64_t **)__x;
  BOOL v15 = v29;
  if (*(uint64_t **)__x != v29)
  {
    while (!(*(unsigned int (**)(void *, unsigned __int8 *))(*a4 + 16))(a4, a2)
         || *(void *)(a1 + 88) > (unint64_t)(int)kaldi::quasar::Lexicon::GetNumberOfPronsInWord(a4, a2))
    {
      float v26 = 0;
      unint64_t v27 = 0;
      int v25 = 0;
      uint64_t v16 = *v14;
      if (v14[1] != *v14)
      {
        uint64_t v17 = 0;
        unint64_t v18 = 0;
        unsigned int v19 = 1;
        do
        {
          uint64_t v20 = *(void *)(*a3 + 24 * v18) + 24 * *(unsigned int *)(v16 + 4 * v18);
          if ((unint64_t)v17 >= v27)
          {
            uint64_t v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v25, (long long *)v20);
          }
          else
          {
            if (*(char *)(v20 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v20, *(void *)(v20 + 8));
            }
            else
            {
              long long v21 = *(_OWORD *)v20;
              v17->__r_.__value_.__r.__words[2] = *(void *)(v20 + 16);
              *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v21;
            }
            ++v17;
          }
          float v26 = v17;
          unint64_t v18 = v19;
          uint64_t v16 = *v14;
          ++v19;
        }
        while (v18 < (v14[1] - *v14) >> 2);
      }
      memset(&__p, 0, sizeof(__p));
      kaldi::JoinVectorToString((uint64_t *)&v25, " ", 1, (long long *)&__p);
      memset(v23, 0, sizeof(v23));
      kaldi::SplitStringToVector(&__p, " ", 1, (uint64_t)v23);
      kaldi::quasar::Lexicon::AddPron((uint64_t)a4, (uint64_t)a2, v23, 1, 0);
      BOOL v31 = v23;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v14 += 3;
      if (v14 == v15) {
        goto LABEL_21;
      }
    }
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 232), (const void **)a2, (uint64_t)a2);
  }
LABEL_21:
  int v25 = __x;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v30.__begin_)
  {
    v30.__end_ = v30.__begin_;
    operator delete(v30.__begin_);
  }
}

void sub_1B209DA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  a20 = &a23;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LmeFst::GetFst(kaldi::quasar::LmeFst *this, uint64_t a2)
{
  return *(void *)this + 16 * a2;
}

uint64_t kaldi::quasar::LmeFst::GetNumberOfFsts(kaldi::quasar::LmeFst *this)
{
  return (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4;
}

std::string *kaldi::quasar::LmeFst::SetWordBoundary(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 208), a2);
}

uint64_t kaldi::quasar::LmeFst::SetMaxAllowedProns(uint64_t this, uint64_t a2)
{
  *(void *)(this + 88) = a2;
  return this;
}

uint64_t kaldi::quasar::LmeFst::SetClassSizeCost(uint64_t this, float a2, float a3)
{
  *(float *)(this + 256) = a2;
  *(float *)(this + 260) = a3;
  return this;
}

uint64_t kaldi::quasar::LmeFst::ExtractMinimumBaseSymbols(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the output symtable is not empty", 32);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    return 0xFFFFFFFFLL;
  }
  unint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 128))(a1, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "<eps>");
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 32))(a2, __p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v20 = a5;
  uint64_t v10 = 0;
  if (v11)
  {
    uint64_t v13 = 0;
    uint64_t v14 = -1;
    uint64_t v15 = -1;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 88))(__p, a1, v12);
      if ((*(unsigned int (**)(uint64_t, void **))(*(void *)a3 + 16))(a3, __p))
      {
        (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a2 + 24))(a2, __p, v12);
        int v16 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a3 + 24))(a3, __p);
        if (v12 >= v14) {
          uint64_t v17 = v14;
        }
        else {
          uint64_t v17 = v12;
        }
        if (v14 == -1) {
          uint64_t v17 = v12;
        }
        if (v15 <= v12) {
          uint64_t v18 = v12;
        }
        else {
          uint64_t v18 = v15;
        }
        if (v15 == -1) {
          uint64_t v18 = v12;
        }
        if (v16)
        {
          uint64_t v15 = v18;
          uint64_t v14 = v17;
          uint64_t v10 = (v10 + 1);
        }
        else
        {
          uint64_t v10 = v10;
        }
      }
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      if (++v13 < v11) {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v13);
      }
    }
    while (v11 != v13);
    if (!a4) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  uint64_t v15 = -1;
  uint64_t v14 = -1;
  if (a4) {
LABEL_29:
  }
    *a4 = v14;
LABEL_30:
  if (v20) {
    *uint64_t v20 = v15;
  }
  return v10;
}

void sub_1B209DDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

__n128 kaldi::quasar::LmeFst::ConvertLmeFstForRescore@<Q0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 64))(*a1, 0x10000, 1))
  {
    v6[0] = 0;
    v6[1] = 0;
    uint64_t v5 = v6;
    fst::quasar::GetWordsAndCosts(*a1, &v5);
    _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  __n128 result = *(__n128 *)a1;
  *a2 = *(_OWORD *)a1;
  *a1 = 0;
  a1[1] = 0;
  return result;
}

void sub_1B209DEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, void *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__tree<int>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LmeFst::DefragLmeFst(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  std::vector<unsigned int>::size_type v7 = (void *)result;
  if (a4 <= 0)
  {
    __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
    uint64_t v4 = result;
  }
  uint64_t v10 = (void *)*v7;
  uint64_t v8 = v7 + 1;
  uint64_t v9 = v10;
  if (v10 == v8) {
    return result;
  }
  do
  {
    unint64_t v11 = (void *)v9[7];
    if (!v11) {
      goto LABEL_29;
    }
    __n128 result = (*(uint64_t (**)(void))(*v11 + 160))(v9[7]);
    if (!result) {
      goto LABEL_29;
    }
    int v31 = 0;
    (*(void (**)(void *, uint64_t *))(*v11 + 128))(v11, &v29);
    while (1)
    {
      __n128 result = v29;
      if (!v29)
      {
        if (v31 >= v30) {
          goto LABEL_29;
        }
LABEL_12:
        int v13 = v31;
        goto LABEL_13;
      }
      int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 16))(v29);
      __n128 result = v29;
      if (v12) {
        break;
      }
      if (!v29) {
        goto LABEL_12;
      }
      int v13 = (*(uint64_t (**)(void))(*(void *)v29 + 24))();
LABEL_13:
      int v25 = &unk_1F0A3E910;
      unint64_t v28 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v11);
      uint64_t v14 = v11[1];
      uint64_t v15 = *(void *)(*(void *)(v14 + 64) + 8 * v13);
      uint64_t v26 = v15;
      uint64_t v27 = v14 + 8;
      for (i = v28; ; unint64_t v28 = i)
      {
        uint64_t v17 = *(void *)(v15 + 24);
        if (i >= (*(void *)(v15 + 32) - v17) >> 4) {
          break;
        }
        __n128 v24 = *(__n128 *)(v17 + 16 * i);
        if (v24.n128_i32[1] >= 1)
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 88))(__p, a2);
          unint64_t v18 = v23;
          if ((v23 & 0x80u) != 0) {
            unint64_t v18 = (unint64_t)__p[1];
          }
          if (v18)
          {
            v24.n128_u32[1] = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)a3 + 24))(a3, __p, v4);
            uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
          }
          fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v25, &v24);
          if ((char)v23 < 0) {
            operator delete(__p[0]);
          }
          unint64_t i = v28;
          uint64_t v15 = v26;
        }
        ++i;
      }
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 32))(v29);
      }
      else {
        ++v31;
      }
    }
    if (v29) {
      __n128 result = (*(uint64_t (**)(void))(*(void *)v29 + 8))();
    }
LABEL_29:
    unsigned int v19 = (void *)v9[1];
    if (v19)
    {
      do
      {
        uint64_t v20 = v19;
        unsigned int v19 = (void *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        uint64_t v20 = (void *)v9[2];
        BOOL v21 = *v20 == (void)v9;
        uint64_t v9 = v20;
      }
      while (!v21);
    }
    uint64_t v9 = v20;
  }
  while (v20 != v8);
  return result;
}

void sub_1B209E268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8))(a23);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B209E330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::__clear[abi:ne180100](v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  unint64_t v2 = (void *)*result;
  unint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    __n128 result = v4;
    *unint64_t v3 = 0;
    if (v4) {
      __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 48))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void std::vector<std::unordered_map<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::unordered_map<std::string,unsigned long>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 40 * a2;
      do
      {
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 32) = 1065353216;
        v7 += 40;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v11);
    }
    else {
      int v12 = 0;
    }
    uint64_t v14 = &v12[40 * v8];
    v16[0] = v12;
    v16[1] = v14;
    void v16[3] = &v12[40 * v11];
    uint64_t v15 = &v14[40 * a2];
    do
    {
      *(_OWORD *)uint64_t v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 8) = 1065353216;
      v14 += 40;
    }
    while (v14 != v15);
    void v16[2] = v15;
    std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::unordered_map<std::string,unsigned long>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_1B209E5C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unordered_map<std::string,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t *)a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 5;
    uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(result - 40, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unordered_map<std::string,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::vector<std::string>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      int v12 = 0;
    }
    uint64_t v15 = v12;
    int v16 = &v12[24 * v8];
    unint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<std::vector<std::string>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<std::string>>>::~__split_buffer(&v15);
  }
}

void sub_1B209E87C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::string>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<std::string>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>,std::reverse_iterator<std::vector<std::vector<std::string>>*>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>,std::reverse_iterator<std::vector<std::vector<std::string>>*>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  float32x2_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  unint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<std::string>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::vector<std::string>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<std::string>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      char v12 = 0;
    }
    uint64_t v15 = v12;
    int v16 = &v12[24 * v8];
    unint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::string>>::~__split_buffer(&v15);
  }
}

void sub_1B209EC0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LexiconFst::~LexiconFst(void **this)
{
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(this);
}

void std::default_delete<kaldi::quasar::LexiconFst []>::operator()[abi:ne180100]<kaldi::quasar::LexiconFst>(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 - 8);
    if (v3)
    {
      uint64_t v4 = 48 * v3;
      do
      {
        uint64_t v5 = a2 + v4;
        if (*(char *)(a2 + v4 - 9) < 0) {
          operator delete(*(void **)(v5 - 32));
        }
        fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v5 - 48));
        v4 -= 48;
      }
      while (v4);
    }
    JUMPOUT(0x1B3EA8630);
  }
}

void std::default_delete<kaldi::quasar::GrammarFst []>::operator()[abi:ne180100]<kaldi::quasar::GrammarFst>(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a2 - 8);
    if (v2)
    {
      uint64_t v3 = a2 - 24;
      uint64_t v4 = 24 * v2;
      do
      {
        fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v3 + v4));
        v4 -= 24;
      }
      while (v4);
    }
    JUMPOUT(0x1B3EA8630);
  }
}

void std::vector<kaldi::quasar::LmeFst::Stats>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      memset(*(void **)(v4 - 8), 255, 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      size_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v13);
      unint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      size_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    int v16 = &v14[8 * v13];
    memset(v15, 255, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    if (v7 != v8)
    {
      do
      {
        uint64_t v18 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      unint64_t v8 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::vector<std::vector<std::string>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B209EF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t quasar::FeatureExtractor::FeatureExtractor(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_1F0A53370;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  *(_DWORD *)(a1 + 32) = 0;
  quasar::SystemConfig::Version::Version((quasar::SystemConfig::Version *)(a1 + 36));
  return a1;
}

void sub_1B209EFB8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void quasar::FeatureExtractor::init(quasar::FeatureExtractor *this, quasar::SystemConfig *a2)
{
  if (!*((_DWORD *)this + 8))
  {
    *(void *)((char *)this + 36) = quasar::SystemConfig::getConfigFileVersion(a2);
    if (*((char *)this + 31) >= 0) {
      size_t v4 = *((unsigned __int8 *)this + 31);
    }
    else {
      size_t v4 = *((void *)this + 2);
    }
    size_t v5 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 1);
    if (SBYTE7(v16) < 0) {
      size_t v5 = (void **)__p[0];
    }
    if (v4)
    {
      if (*((char *)this + 31) >= 0) {
        uint64_t v6 = (char *)this + 8;
      }
      else {
        uint64_t v6 = (char *)*((void *)this + 1);
      }
      memmove(v5, v6, v4);
    }
    *(_WORD *)((char *)v5 + v4) = 46;
    quasar::SystemConfig::setPrefix((std::string *)a2, (const std::string *)__p);
    if (SBYTE7(v16) < 0) {
      operator delete(__p[0]);
    }
    (**(void (***)(quasar::FeatureExtractor *, quasar::SystemConfig *))this)(this, a2);
    quasar::SystemConfig::readPtree((uint64_t)a2, (uint64_t)this + 8);
  }
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)std::string __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameters for ", 15);
  uint64_t v10 = *((void *)this + 1);
  uint64_t v9 = (char *)this + 8;
  uint64_t v8 = v10;
  int v11 = v9[23];
  if (v11 >= 0) {
    uint64_t v12 = (uint64_t)v9;
  }
  else {
    uint64_t v12 = v8;
  }
  if (v11 >= 0) {
    uint64_t v13 = v9[23];
  }
  else {
    uint64_t v13 = *((void *)v9 + 1);
  }
  size_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v12, v13);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " have already been registered.");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void sub_1B209F1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::FeatureExtractor::init(uint64_t this)
{
  if (*(_DWORD *)(this + 32))
  {
    uint64_t v6 = this;
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Parameters for ", 15);
    int v2 = *(char *)(v6 + 31);
    if (v2 >= 0) {
      uint64_t v3 = v6 + 8;
    }
    else {
      uint64_t v3 = *(void *)(v6 + 8);
    }
    if (v2 >= 0) {
      uint64_t v4 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      uint64_t v4 = *(void *)(v6 + 16);
    }
    size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, v3, v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, " have already been registered.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
  }
  *(_DWORD *)(this + 32) = 1;
  return this;
}

void quasar::FeatureExtractor::createOnlineFeInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 32) != 1)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Must call init() for ", 21);
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v7 = a1 + 8;
    uint64_t v6 = v8;
    int v9 = *(char *)(v7 + 23);
    if (v9 >= 0) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v6;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(v7 + 23);
    }
    else {
      uint64_t v11 = *(void *)(v7 + 8);
    }
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v10, v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, " before calling createOnlineFeInput().");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v13 = *a3;
  size_t v14 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, a2, &v13);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_1B209F388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::FeatureExtractor::~FeatureExtractor(void **this)
{
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t quasar::FeatureExtractor::requiresOutputBuffering(quasar::FeatureExtractor *this)
{
  return 0;
}

uint64_t quasar::OnlineCmnFe::OnlineCmnFe(uint64_t a1, long long *a2)
{
  uint64_t v3 = (void *)quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  v3[7] = 0;
  *uint64_t v3 = &unk_1F0A51D30;
  v3[8] = 0;
  void v3[9] = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)(v3 + 10));
  return a1;
}

void sub_1B209F468(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v3);
  }
  quasar::OnlineCmnFe::OnlineCmnFe(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineCmnFe::requiresOutputBuffering(quasar::OnlineCmnFe *this)
{
  return *((unsigned __int8 *)this + 124);
}

uint64_t quasar::OnlineCmvnFe::OnlineCmvnFe(uint64_t a1, long long *a2)
{
  uint64_t v3 = (void *)quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  v3[7] = 0;
  *uint64_t v3 = &unk_1F0A522F0;
  v3[8] = 0;
  void v3[9] = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)(v3 + 10));
  return a1;
}

void sub_1B209F500(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v3);
  }
  quasar::OnlineCmnFe::OnlineCmnFe(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineCmvnFe::requiresOutputBuffering(quasar::OnlineCmvnFe *this)
{
  return *((unsigned __int8 *)this + 124);
}

void *quasar::OnlineFbankFe::OnlineFbankFe(void *a1, long long *a2)
{
  uint64_t v3 = (void *)quasar::FeatureExtractor::FeatureExtractor((uint64_t)a1, a2);
  *uint64_t v3 = &unk_1F0A525C0;
  kaldi::FbankOptions::FbankOptions((kaldi::FbankOptions *)(v3 + 6));
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)((char *)a1 + 156) = _D0;
  *(void *)((char *)a1 + 164) = 0xA4579F000;
  a1[22] = 0;
  a1[23] = 0;
  return a1;
}

void sub_1B209F594(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F0A53370;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineFbankWithPitchFe::OnlineFbankWithPitchFe(uint64_t a1, long long *a2)
{
  uint64_t v3 = (void *)quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *uint64_t v3 = &unk_1F0A56038;
  kaldi::FbankWithPitchOptions::FbankWithPitchOptions((kaldi::FbankWithPitchOptions *)(v3 + 6));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  return a1;
}

void sub_1B209F618(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F0A53370;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineFbankWithAudioAnalyticsFe::OnlineFbankWithAudioAnalyticsFe(uint64_t a1, long long *a2)
{
  uint64_t v3 = (void *)quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *uint64_t v3 = &unk_1F0A581F8;
  kaldi::FbankWithAudioAnalyticsOptions::FbankWithAudioAnalyticsOptions((kaldi::FbankWithAudioAnalyticsOptions *)(v3 + 6));
  *(_OWORD *)(a1 + 284) = xmmword_1B258D500;
  *(_DWORD *)(a1 + 300) = 10;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  return a1;
}

void sub_1B209F6B8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F0A53370;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineLdaFe::OnlineLdaFe(uint64_t a1, long long *a2)
{
  uint64_t v3 = (void *)quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  v3[6] = 0;
  *uint64_t v3 = &unk_1F0A51D70;
  v3[7] = 0;
  v3[8] = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)(v3 + 10));
  return a1;
}

void sub_1B209F758(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  quasar::OnlineCmnFe::OnlineCmnFe(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineMfccFe::OnlineMfccFe(uint64_t a1, long long *a2)
{
  uint64_t v3 = (void *)quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *uint64_t v3 = &unk_1F0A52330;
  kaldi::MfccOptions::MfccOptions((kaldi::MfccOptions *)(v3 + 6));
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  return a1;
}

void sub_1B209F7CC(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F0A53370;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineNnetForwardFe::OnlineNnetForwardFe(void *a1, long long *a2)
{
  uint64_t v3 = quasar::FeatureExtractor::FeatureExtractor((uint64_t)a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A54940;
  *(_OWORD *)(v3 + 48) = 0u;
  *(void *)(v3 + 104) = 0;
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 144) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 160) = 0;
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 208), "");
  a1[29] = 0x2EDBE6FF3F800000;
  a1[30] = 0;
  a1[31] = 0;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 32));
}

void sub_1B209F8CC(_Unwind_Exception *exception_object)
{
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 248);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*(char *)(v1 + 231) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 207) < 0) {
    operator delete(*v6);
  }
  int v9 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 152) = v9;
    operator delete(v9);
  }
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*(void **)(v1 + 72));
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  *(void *)uint64_t v1 = &unk_1F0A53370;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SpeechActivityDetectorFe::SpeechActivityDetectorFe(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A1C9E0;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 80), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 104), "");
  *(_DWORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 132) = 0;
  return a1;
}

void sub_1B209F9F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 72);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  size_t v5 = *(std::__shared_weak_count **)(v1 + 56);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = &unk_1F0A53370;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::AmFusionEncoderFe::AmFusionEncoderFe(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A539A0;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 112), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 136), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 160), "");
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 256) = -1;
  *(unsigned char *)(a1 + 260) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 268) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = a1 + 328;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 344) = a1 + 352;
  *(_OWORD *)(a1 + 3--*(_DWORD *)(a9 + 76) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(void *)(a1 + 368) = a1 + 376;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 4++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = a1 + 472;
  *(_OWORD *)(a1 + 496) = 0u;
  *(void *)(a1 + 488) = a1 + 496;
  *(_OWORD *)(a1 + 520) = 0u;
  *(void *)(a1 + 512) = a1 + 520;
  *(void *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 572) = 1056964608;
  *(_OWORD *)(a1 + 5--*(_DWORD *)(a9 + 76) = 0u;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 600) = a1 + 608;
  return a1;
}

void sub_1B209FB98(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 159) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 135) < 0) {
    operator delete(*v2);
  }
  size_t v5 = *(std::__shared_weak_count **)(v1 + 104);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 88);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 72);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 56);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)uint64_t v1 = &unk_1F0A53370;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineAcousticEncoderFe::OnlineAcousticEncoderFe(void *a1, long long *a2)
{
  uint64_t v3 = quasar::FeatureExtractor::FeatureExtractor((uint64_t)a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A569E8;
  *(_OWORD *)(v3 + 48) = 0u;
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 144) = 0;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 160) = 0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 168), "");
  a1[24] = 0x2EDBE6FF3F800000;
  a1[25] = 0;
  a1[26] = 0;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 27));
}

void sub_1B209FCE0(_Unwind_Exception *exception_object)
{
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 208);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*(char *)(v1 + 191) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*v5);
  }
  uint64_t v8 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 120) = v8;
    operator delete(v8);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*(void **)(v1 + 72));
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  *(void *)uint64_t v1 = &unk_1F0A53370;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineNnetForwardSkipFe::OnlineNnetForwardSkipFe(void *a1, long long *a2)
{
  uint64_t v3 = quasar::FeatureExtractor::FeatureExtractor((uint64_t)a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A56A28;
  *(_OWORD *)(v3 + 48) = 0u;
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 160) = 0;
  *(void *)(v3 + 168) = 0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 176), "");
  a1[25] = 0x2EDBE6FF3F800000;
  a1[26] = 0;
  a1[27] = 0;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 28));
}

void sub_1B209FE58(_Unwind_Exception *exception_object)
{
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 216);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*(char *)(v1 + 199) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 135) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*(void **)(v1 + 72));
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  *(void *)uint64_t v1 = &unk_1F0A53370;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineStaticTransformFe::OnlineStaticTransformFe(uint64_t a1, long long *a2)
{
  uint64_t v3 = (void *)quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  v3[6] = 0;
  *uint64_t v3 = &unk_1F0A56A68;
  v3[7] = 0;
  v3[8] = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)(v3 + 9));
  return a1;
}

void sub_1B209FF5C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  quasar::OnlineCmnFe::OnlineCmnFe(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineCacheInputFe::OnlineCacheInputFe(uint64_t a1, long long *a2)
{
  uint64_t result = quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *(void *)uint64_t result = &unk_1F0A53FB0;
  *(_WORD *)(result + 44) = 257;
  return result;
}

void quasar::OnlineSubsampleFe::registerParams(quasar::OnlineSubsampleFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "subsample");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 23, 0, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "stride");
  std::string::basic_string[abi:ne180100]<0>(v5, "Take every n'th feature, for this value of stride(with negative value, repeats each feature n times)");
  uint64_t v4 = (_DWORD *)((char *)this + 44);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)v4, (uint64_t)v5, 0, 23, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  *uint64_t v4 = 1;
}

void sub_1B20A0098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

double quasar::OnlineSubsampleFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, kaldi::OnlineFeatInputItf **a2@<X2>, _OWORD *a3@<X8>)
{
  if (!*a2)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = a1 + 8;
    uint64_t v7 = v9;
    int v10 = *(char *)(v8 + 23);
    if (v10 >= 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v7;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      uint64_t v12 = *(void *)(v8 + 8);
    }
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  size_t v14 = *a2;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineSubsampleFe,std::allocator<kaldi::OnlineSubsampleFe>,kaldi::OnlineFeatInputItf *,int &,void>(&v14, (int *)(a1 + 44), v15);
  double result = *(double *)v15;
  *a3 = v15[0];
  return result;
}

void quasar::FeatureExtractorSimpleFactory::createFeatureExtractor(std::string *this@<X0>, void *a2@<X8>)
{
  if (quasar::gLogLevel >= 5)
  {
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v38 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Building FeatureExtractor ", 26);
    int v5 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v5 >= 0) {
      char v6 = this;
    }
    else {
      char v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v5 >= 0) {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, size);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__str);
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__str, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)std::string __str = *(_OWORD *)&this->__r_.__value_.__l.__data_;
    *(void *)&__str[16] = *((void *)&this->__r_.__value_.__l + 2);
  }
  std::string::size_type v8 = std::string::rfind(this, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v8 != -1)
  {
    std::string::basic_string(&v36, this, v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v35);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    *(std::string *)std::string __str = v36;
  }
  std::string::size_type v9 = std::string::find((const std::string *)__str, 58, 0);
  if (v9 != -1)
  {
    std::string::basic_string(&v36, (const std::string *)__str, 0, v9, (std::allocator<char> *)&v35);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    *(std::string *)std::string __str = v36;
  }
  *a2 = 0;
  a2[1] = 0;
  if ((__str[23] & 0x80) != 0)
  {
    uint64_t v10 = *(void *)&__str[8];
    if (*(void *)&__str[8] == 3 && **(_WORD **)__str == 28003 && *(unsigned char *)(*(void *)__str + 2) == 110) {
      goto LABEL_66;
    }
    if (*(void *)&__str[8] == 4)
    {
      if (**(_DWORD **)__str == 1853255011)
      {
LABEL_86:
        std::allocate_shared[abi:ne180100]<quasar::OnlineCmvnFe,std::allocator<quasar::OnlineCmvnFe>,std::string const&,void>((long long *)this, &v36);
        goto LABEL_114;
      }
      uint64_t v10 = *(void *)&__str[8];
    }
    if (v10 == 5)
    {
      if (**(_DWORD **)__str == 1953260900 && *(unsigned char *)(*(void *)__str + 4) == 97) {
        goto LABEL_89;
      }
      uint64_t v10 = *(void *)&__str[8];
      if (*(void *)&__str[8] == 5)
      {
        if (**(_DWORD **)__str == 1851875942 && *(unsigned char *)(*(void *)__str + 4) == 107) {
          goto LABEL_76;
        }
        if ((__str[23] & 0x80) == 0) {
          goto LABEL_59;
        }
      }
    }
    if (v10 == 14)
    {
      if (**(void **)__str == 0x7469776B6E616266 && *(void *)(*(void *)__str + 6) == 0x6863746970687469) {
        goto LABEL_91;
      }
      uint64_t v10 = *(void *)&__str[8];
    }
    if (v10 != 3) {
      goto LABEL_82;
    }
    uint64_t v15 = *(unsigned __int16 **)__str;
LABEL_78:
    int v20 = *v15;
    int v21 = *((unsigned __int8 *)v15 + 2);
    if (v20 == 25708 && v21 == 97)
    {
      std::allocate_shared[abi:ne180100]<quasar::OnlineLdaFe,std::allocator<quasar::OnlineLdaFe>,std::string const&,void>((long long *)this, &v36);
      goto LABEL_114;
    }
    goto LABEL_82;
  }
  if (__str[23] <= 4u)
  {
    if (__str[23] != 3)
    {
      if (__str[23] != 4) {
        goto LABEL_82;
      }
      if (*(_DWORD *)__str == 1853255011) {
        goto LABEL_86;
      }
      goto LABEL_59;
    }
    if (*(unsigned __int16 *)__str != 28003 || __str[2] != 110)
    {
LABEL_77:
      uint64_t v15 = (unsigned __int16 *)__str;
      goto LABEL_78;
    }
LABEL_66:
    std::allocate_shared[abi:ne180100]<quasar::OnlineCmnFe,std::allocator<quasar::OnlineCmnFe>,std::string const&,void>((long long *)this, &v36);
    goto LABEL_114;
  }
  if (__str[23] != 5)
  {
    if (__str[23] != 14) {
      goto LABEL_82;
    }
    if (*(void *)__str != 0x7469776B6E616266 || *(void *)&__str[6] != 0x6863746970687469)
    {
LABEL_59:
      if (__str[23] != 3) {
        goto LABEL_82;
      }
      goto LABEL_77;
    }
LABEL_91:
    std::allocate_shared[abi:ne180100]<quasar::OnlineFbankWithPitchFe,std::allocator<quasar::OnlineFbankWithPitchFe>,std::string const&,void>((long long *)this, &v36);
    goto LABEL_114;
  }
  if (*(_DWORD *)__str == 1953260900 && __str[4] == 97)
  {
LABEL_89:
    std::allocate_shared[abi:ne180100]<quasar::OnlineDeltaFe,std::allocator<quasar::OnlineDeltaFe>,std::string const&,void>((long long *)this, &v36);
    goto LABEL_114;
  }
  if (*(_DWORD *)__str == 1851875942 && __str[4] == 107)
  {
LABEL_76:
    std::allocate_shared[abi:ne180100]<quasar::OnlineFbankFe,std::allocator<quasar::OnlineFbankFe>,std::string const&,void>((long long *)this, &v36);
    goto LABEL_114;
  }
LABEL_82:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "mfcc"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineMfccFe,std::allocator<quasar::OnlineMfccFe>,std::string const&,void>((long long *)this, &v36);
  }
  else
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "nnet-forward")) {
      std::allocate_shared[abi:ne180100]<quasar::OnlineNnetForwardFe,std::allocator<quasar::OnlineNnetForwardFe>,std::string const&,void>((uint64_t)&v35, (long long *)this);
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "am-fusion-encoder"))
    {
      std::allocate_shared[abi:ne180100]<quasar::AmFusionEncoderFe,std::allocator<quasar::AmFusionEncoderFe>,std::string const&,void>((long long *)this, &v36);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "speech-activity-detector"))
    {
      std::allocate_shared[abi:ne180100]<quasar::SpeechActivityDetectorFe,std::allocator<quasar::SpeechActivityDetectorFe>,std::string const&,void>((long long *)this, &v36);
    }
    else
    {
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "acoustic-encoder")) {
        std::allocate_shared[abi:ne180100]<quasar::OnlineAcousticEncoderFe,std::allocator<quasar::OnlineAcousticEncoderFe>,std::string const&,void>((uint64_t)&v35, (long long *)this);
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "nnet-forward-skip")) {
        std::allocate_shared[abi:ne180100]<quasar::OnlineNnetForwardSkipFe,std::allocator<quasar::OnlineNnetForwardSkipFe>,std::string const&,void>((uint64_t)&v35, (long long *)this);
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "splice"))
      {
        std::allocate_shared[abi:ne180100]<quasar::OnlineSpliceFe,std::allocator<quasar::OnlineSpliceFe>,std::string const&,void>((long long *)this, &v36);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "subsample"))
      {
        std::allocate_shared[abi:ne180100]<quasar::OnlineSubsampleFe,std::allocator<quasar::OnlineSubsampleFe>,std::string const&,void>((long long *)this, &v36);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "transform"))
      {
        std::allocate_shared[abi:ne180100]<quasar::OnlineStaticTransformFe,std::allocator<quasar::OnlineStaticTransformFe>,std::string const&,void>((long long *)this, &v36);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "cache-input"))
      {
        std::allocate_shared[abi:ne180100]<quasar::OnlineCacheInputFe,std::allocator<quasar::OnlineCacheInputFe>,std::string const&,void>((long long *)this, &v36);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "compute-ahead-input"))
      {
        std::allocate_shared[abi:ne180100]<quasar::OnlineComputeAheadInputFe,std::allocator<quasar::OnlineComputeAheadInputFe>,std::string const&,void>((long long *)this, &v36);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "fbank-with-audio-analytics"))
      {
        std::allocate_shared[abi:ne180100]<quasar::OnlineFbankWithAudioAnalyticsFe,std::allocator<quasar::OnlineFbankWithAudioAnalyticsFe>,std::string const&,void>((long long *)this, &v36);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "append"))
      {
        std::allocate_shared[abi:ne180100]<quasar::OnlineAppendFe,std::allocator<quasar::OnlineAppendFe>,std::string const&,void>((long long *)this, &v36);
      }
      else
      {
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "simple-waveform-reader"))
        {
          exception = __cxa_allocate_exception(0x20uLL);
          std::operator+<char>();
          long long v24 = std::string::append(&v33, "\" in \"");
          long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v34.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          int v26 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
          if (v26 >= 0) {
            long long v27 = this;
          }
          else {
            long long v27 = (std::string *)this->__r_.__value_.__r.__words[0];
          }
          if (v26 >= 0) {
            std::string::size_type v28 = HIBYTE(this->__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v28 = this->__r_.__value_.__l.__size_;
          }
          long long v29 = std::string::append(&v34, (const std::string::value_type *)v27, v28);
          long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          v35.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          long long v31 = std::string::append(&v35, "\"");
          long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
          v36.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v32;
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          quasar::PTree::Error::Error(exception, &v36);
        }
        std::allocate_shared[abi:ne180100]<quasar::OnlineSimpleWaveformFe,std::allocator<quasar::OnlineSimpleWaveformFe>,std::string const&,void>((long long *)this, &v36);
      }
    }
  }
LABEL_114:
  *(_OWORD *)a2 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
}

void sub_1B20A08E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v43 & 1) == 0)
    {
LABEL_12:
      if (a42 < 0) {
        operator delete(a37);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v42);
  goto LABEL_12;
}

void quasar::readMatrixFile(uint64_t a1, int32x2_t *a2)
{
  unsigned __int8 v12 = 0;
  uint64_t v4 = (kaldi::Input *)kaldi::Input::Input(v11, a1, &v12);
  int v5 = (uint64_t *)kaldi::Input::Stream(v4);
  kaldi::Matrix<float>::Read(a2, v5, v12, 0, 0);
  if (quasar::gLogLevel >= 5)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Finished reading matrix file ", 29);
    int v7 = *(char *)(a1 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *(void *)a1;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v10);
  }
  kaldi::Input::~Input((kaldi::Input *)v11);
}

void sub_1B20A0AE4(_Unwind_Exception *a1)
{
  kaldi::Input::~Input((kaldi::Input *)(v1 - 48));
  _Unwind_Resume(a1);
}

double quasar::OnlineCmnFe::registerParams(quasar::OnlineCmnFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "cmn-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Window in frames for running average CMN computation");
  uint64_t v4 = (void *)((char *)this + 44);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v10, (uint64_t)this + 44, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "min-cmn-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minumum CMN window used at start of decoding (adds latency only at start). ");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v10, (uint64_t)this + 48, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "init-cmvn-stats-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Stats File for warm-start online CMVN");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v10, (uint64_t)this + 56, (uint64_t)__p, 0, 47, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "prior-count");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of frames used from prior CMVN stats file");
  int v5 = (_DWORD *)((char *)this + 120);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v10, (uint64_t)this + 120, (uint64_t)__p, 0, 47, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "buffer-output");
  std::string::basic_string[abi:ne180100]<0>(__p, "Use OnlineBufferingInput");
  char v6 = (char *)this + 124;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v10, (uint64_t)v6, (uint64_t)__p, 0, 81, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  *(void *)&double result = 0x6400000258;
  *uint64_t v4 = 0x6400000258;
  _DWORD *v5 = 0;
  *char v6 = 1;
  return result;
}

void sub_1B20A0D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineCmnFe::finishInit(int32x2_t *this, quasar::SystemConfig *a2)
{
  if ((this[9].i8[7] & 0x80000000) == 0)
  {
    if (!this[9].i8[7]) {
      return;
    }
    goto LABEL_3;
  }
  if (this[8]) {
LABEL_3:
  }
    quasar::readMatrixFile((uint64_t)&this[7], this + 10);
}

double quasar::OnlineCmnFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  if (!*a2)
  {
    memset(v16, 0, sizeof(v16));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"'", 1);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = a1 + 8;
    uint64_t v7 = v9;
    int v10 = *(char *)(v8 + 23);
    if (v10 >= 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v7;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      uint64_t v12 = *(void *)(v8 + 8);
    }
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v16);
  }
  uint64_t v15 = *a2;
  uint64_t v14 = a1 + 80;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineCmnInput,std::allocator<kaldi::OnlineCmnInput>,kaldi::OnlineFeatInputItf *,int &,int &,kaldi::Matrix<float> *,int &,void>(&v15, (int *)(a1 + 44), (int *)(a1 + 48), &v14, (int *)(a1 + 120), v16);
  double result = *(double *)v16;
  *a3 = v16[0];
  return result;
}

double quasar::OnlineCmvnFe::registerParams(quasar::OnlineCmvnFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "cmvn-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Window in frames for running average CMVN computation");
  uint64_t v4 = (void *)((char *)this + 44);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v10, (uint64_t)this + 44, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "min-cmvn-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minumum CMVN window used at start of decoding (adds latency only at start). ");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v10, (uint64_t)this + 48, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "init-cmvn-stats-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Stats File for warm-start online CMVN");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v10, (uint64_t)this + 56, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "prior-count");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of frames used from prior CMVN stats file");
  int v5 = (_DWORD *)((char *)this + 120);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v10, (uint64_t)this + 120, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "buffer-output");
  std::string::basic_string[abi:ne180100]<0>(__p, "Use OnlineBufferingInput");
  char v6 = (char *)this + 124;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v10, (uint64_t)v6, (uint64_t)__p, 0, 81, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  *(void *)&double result = 0x6400000258;
  *uint64_t v4 = 0x6400000258;
  _DWORD *v5 = 0;
  *char v6 = 1;
  return result;
}

void sub_1B20A1164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineCmvnFe::finishInit(int32x2_t *this, quasar::SystemConfig *a2)
{
  if ((this[9].i8[7] & 0x80000000) == 0)
  {
    if (!this[9].i8[7]) {
      return;
    }
    goto LABEL_3;
  }
  if (this[8]) {
LABEL_3:
  }
    quasar::readMatrixFile((uint64_t)&this[7], this + 10);
}

double quasar::OnlineCmvnFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  if (!*a2)
  {
    memset(v17, 0, sizeof(v17));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"'", 1);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = a1 + 8;
    uint64_t v7 = v9;
    int v10 = *(char *)(v8 + 23);
    if (v10 >= 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v7;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      uint64_t v12 = *(void *)(v8 + 8);
    }
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v17);
  }
  uint64_t v16 = *a2;
  char v15 = 1;
  uint64_t v14 = a1 + 80;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineCmvnInput,std::allocator<kaldi::OnlineCmvnInput>,kaldi::OnlineFeatInputItf *,int &,int &,BOOL,kaldi::Matrix<float> *,int &,void>(&v16, (int *)(a1 + 44), (int *)(a1 + 48), &v15, &v14, (int *)(a1 + 120), v17);
  double result = *(double *)v17;
  *a3 = v17[0];
  return result;
}

void quasar::OnlineDeltaFe::registerParams(quasar::OnlineDeltaFe *this, quasar::SystemConfig *a2)
{
}

void kaldi::DeltaFeaturesOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-order");
  std::string::basic_string[abi:ne180100]<0>(__p, "Order of delta computation");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Parameter controlling window for delta computation (actual window size for each delta order is 1 + 2*delta-window-size)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B20A1400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

double quasar::OnlineDeltaFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  if (!*a2)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = a1 + 8;
    uint64_t v7 = v9;
    int v10 = *(char *)(v8 + 23);
    if (v10 >= 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v7;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      uint64_t v12 = *(void *)(v8 + 8);
    }
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  uint64_t v14 = *a2;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineDeltaInput,std::allocator<kaldi::OnlineDeltaInput>,kaldi::DeltaFeaturesOptions &,kaldi::OnlineFeatInputItf *,void>((void *)(a1 + 44), &v14, v15);
  double result = *(double *)v15;
  *a3 = v15[0];
  return result;
}

void quasar::OnlineSimpleWaveformFe::registerParams(quasar::OnlineSimpleWaveformFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "resample-freq");
  std::string::basic_string[abi:ne180100]<0>(__p, "The frequency to resample to.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 48, (uint64_t)__p, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "resample-cutoff-hz");
  std::string::basic_string[abi:ne180100]<0>(__p, "The cutoff for the filter for resampling the audio");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 52, (uint64_t)__p, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "resample-num-zeros");
  std::string::basic_string[abi:ne180100]<0>(__p, "Controls sharpness of filter.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 56, (uint64_t)__p, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "normalize");
  std::string::basic_string[abi:ne180100]<0>(__p, "(default true) converts the native sample to floats between -1 and 1 when set");
  uint64_t v4 = (char *)this + 60;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)v4, (uint64_t)__p, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  *uint64_t v4 = 1;
}

void sub_1B20A1708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

double quasar::OnlineSimpleWaveformFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned int *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v17 = a2;
  if (*a3)
  {
    memset(v16, 0, sizeof(v16));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"'", 1);
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = a1 + 8;
    uint64_t v9 = v11;
    int v12 = *(char *)(v10 + 23);
    if (v12 >= 0) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = v9;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      uint64_t v14 = *(void *)(v10 + 8);
    }
    char v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "' can only occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v16);
  }
  *(float *)(a1 + 44) = (float)*a4;
  std::allocate_shared[abi:ne180100]<kaldi::SimpleWaveformReader,std::allocator<kaldi::SimpleWaveformReader>,kaldi::OnlineAudioSourceItf *&,kaldi::ResamplerOptions &,BOOL &,void>(&v17, a1 + 44, (unsigned __int8 *)(a1 + 60), v16);
  double result = *(double *)v16;
  *a5 = v16[0];
  return result;
}

void quasar::OnlineFbankFe::registerParams(quasar::OnlineFbankFe *this, quasar::SystemConfig *a2)
{
  kaldi::FbankOptions::Register((uint64_t)this + 48, (uint64_t)a2, 0);
  std::string::basic_string[abi:ne180100]<0>(v6, "low-watermark");
  std::string::basic_string[abi:ne180100]<0>(__p, "Low watermark (in number of frames) for audio buffer read. Ignored if <= 0.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 152, (uint64_t)__p, 0, 76, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "resample-freq");
  std::string::basic_string[abi:ne180100]<0>(__p, "The frequency to resample to.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 160, (uint64_t)__p, 0, 123, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "resample-cutoff-hz");
  std::string::basic_string[abi:ne180100]<0>(__p, "The cutoff for the filter for resampling the audio");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 164, (uint64_t)__p, 0, 123, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "resample-num-zeros");
  std::string::basic_string[abi:ne180100]<0>(__p, "Controls sharpness of filter.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 168, (uint64_t)__p, 0, 123, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  *((_DWORD *)this + 38) = 0;
}

void sub_1B20A1A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::FbankOptions::Register(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    kaldi::FrameExtractionOptions::Register(a1 + 8, a2);
  }
  kaldi::MelBanksOptions::Register(a1 + 64, a2);
  std::string::basic_string[abi:ne180100]<0>(v7, "use-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "Add an extra dimension with energy to the FBANK output.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v7, a1 + 88, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "energy-floor");
  std::string::basic_string[abi:ne180100]<0>(__p, "Floor on energy (absolute, not relative) in FBANK computation");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v7, a1 + 92, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "raw-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, compute energy before preemphasis and windowing");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v7, a1 + 96, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "htk-compat");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, put energy last.  Warning: not sufficient to get HTK compatible features (need to change other parameters).");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v7, a1 + 97, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "use-log-fbank");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, produce log-filterbank, else produce linear.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v7, a1 + 98, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "cache-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, cache energy values.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v7, a1 + 99, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_1B20A1D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineFbankFe::createOnlineFeInputImpl(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned int *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v42 = a2;
  if (*a3)
  {
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v27 = 0u;
    memset(v26, 0, sizeof(v26));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"'", 1);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = a1 + 8;
    uint64_t v15 = v17;
    int v18 = *(char *)(v16 + 23);
    if (v18 >= 0) {
      uint64_t v19 = v16;
    }
    else {
      uint64_t v19 = v15;
    }
    if (v18 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(v16 + 23);
    }
    else {
      uint64_t v20 = *(void *)(v16 + 8);
    }
    int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v19, v20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v21, "' can only occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v26);
  }
  v26[0] = &unk_1F0A472F8;
  *(_OWORD *)&v26[1] = *(_OWORD *)(a1 + 56);
  *(void **)((char *)&v26[2] + 5) = *(void **)(a1 + 69);
  if (*(char *)(a1 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v27, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
  }
  else
  {
    long long v27 = *(_OWORD *)(a1 + 80);
    *(void *)&long long v28 = *(void *)(a1 + 96);
  }
  float v8 = (float)*a4;
  *(float *)(a1 + 156) = v8;
  *((void *)&v28 + 1) = *(void *)(a1 + 104);
  long long v9 = *(_OWORD *)(a1 + 128);
  long long v29 = *(_OWORD *)(a1 + 112);
  long long v30 = v9;
  LODWORD(v31) = *(_DWORD *)(a1 + 144);
  *(float *)&v26[1] = v8;
  HIDWORD(v28) = *(_DWORD *)(a1 + 160);
  std::allocate_shared[abi:ne180100]<kaldi::Fbank,std::allocator<kaldi::Fbank>,kaldi::FbankOptions &,void>((const kaldi::FbankOptions *)v26, &v25);
  long long v10 = v25;
  long long v25 = 0uLL;
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 184);
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 76) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (*((void *)&v25 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
    }
  }
  uint64_t v24 = *(void *)(a1 + 176);
  float v12 = *((float *)&v28 + 3);
  if (*((float *)&v28 + 3) <= 0.0) {
    float v12 = *(float *)&v26[1];
  }
  float v13 = v12 / 1000.0;
  float v22 = *((float *)&v26[1] + 1) * v13;
  float v23 = *(float *)&v26[2] * v13;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::Fbank>,std::allocator<kaldi::OnlineFeInput<kaldi::Fbank>>,kaldi::OnlineAudioSourceItf *&,kaldi::Fbank*,float,float,float &,int &,kaldi::ResamplerOptions &,void>(&v42, &v24, &v23, &v22, (float *)&v26[1] + 1, (int *)(a1 + 152), (float *)(a1 + 156), &v25);
  *a5 = v25;
  kaldi::FbankOptions::~FbankOptions(v26);
}

void sub_1B20A1FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::FbankOptions::~FbankOptions((void **)va);
  _Unwind_Resume(a1);
}

void quasar::OnlineFbankWithPitchFe::registerParams(quasar::OnlineFbankWithPitchFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "fbankwithpitch");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 54, 0, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  kaldi::FbankWithPitchOptions::Register((uint64_t)this + 48, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "low-watermark");
  std::string::basic_string[abi:ne180100]<0>(v5, "Low watermark (in number of frames) for audio buffer read. Ignored if <= 0.");
  uint64_t v4 = (_DWORD *)((char *)this + 264);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)v4, (uint64_t)v5, 0, 76, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  *uint64_t v4 = 0;
}

void sub_1B20A20EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::FbankWithPitchOptions::Register(uint64_t a1, uint64_t a2)
{
  kaldi::FrameExtractionOptions::Register(a1, a2);
  kaldi::MelBanksOptions::Register(a1 + 56, a2);
  kaldi::PitchExtractionOptions::Register(a1 + 80, a2);
  kaldi::ProcessPitchOptions::Register(a1 + 156, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "use-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "Add an extra dimension with energy to the FBANK output.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 204, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "energy-floor");
  std::string::basic_string[abi:ne180100]<0>(__p, "Floor on energy (absolute, not relative) in FBANK computation");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 208, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "raw-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, compute energy before preemphasis and windowing");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 212, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "htk-compat");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, put energy last.  Warning: not sufficient to get HTK compatible features (need to change other parameters).");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 213, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "use-log-fbank");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, produce log-filterbank, else produce linear.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 214, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "cache-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, cache energy values.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 215, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B20A2430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineFbankWithPitchFe::createOnlineFeInputImpl(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned int *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v28 = a2;
  if (*a3)
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    memset(v24, 0, sizeof(v24));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    float v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"'", 1);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = a1 + 8;
    uint64_t v13 = v15;
    int v16 = *(char *)(v14 + 23);
    if (v16 >= 0) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = v13;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      uint64_t v18 = *(void *)(v14 + 8);
    }
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v17, v18);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "' can only occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v24);
  }
  *(_OWORD *)uint64_t v24 = *(_OWORD *)(a1 + 48);
  *(void *)&v24[13] = *(void *)(a1 + 61);
  if (*(char *)(a1 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v24[24], *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)&unsigned char v24[24] = *(_OWORD *)(a1 + 72);
    *(void *)&v24[40] = *(void *)(a1 + 88);
  }
  *(void *)&v24[48] = *(void *)(a1 + 96);
  *(_OWORD *)&v24[152] = *(_OWORD *)(a1 + 200);
  *(_OWORD *)&v24[168] = *(_OWORD *)(a1 + 216);
  *(_OWORD *)&v24[184] = *(_OWORD *)(a1 + 232);
  *(_OWORD *)&v24[200] = *(_OWORD *)(a1 + 248);
  *(_OWORD *)&v24[88] = *(_OWORD *)(a1 + 136);
  *(_OWORD *)&v24[104] = *(_OWORD *)(a1 + 152);
  *(_OWORD *)&v24[120] = *(_OWORD *)(a1 + 168);
  *(_OWORD *)&v24[136] = *(_OWORD *)(a1 + 184);
  *(_OWORD *)&v24[56] = *(_OWORD *)(a1 + 104);
  *(_OWORD *)&v24[72] = *(_OWORD *)(a1 + 120);
  *(float *)uint64_t v24 = (float)*a4;
  std::allocate_shared[abi:ne180100]<kaldi::FbankWithPitch,std::allocator<kaldi::FbankWithPitch>,kaldi::FbankWithPitchOptions &,void>((const kaldi::FbankWithPitchOptions *)v24, &v23);
  long long v8 = v23;
  long long v23 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(a1 + 280);
  *(_OWORD *)(a1 + 272) = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (*((void *)&v23 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
    }
  }
  uint64_t v22 = *(void *)(a1 + 272);
  float v10 = *(float *)&v24[52];
  if (*(float *)&v24[52] <= 0.0) {
    float v10 = *(float *)v24;
  }
  float v11 = v10 / 1000.0;
  float v20 = *(float *)&v24[4] * v11;
  float v21 = *(float *)&v24[8] * v11;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::FbankWithPitch>,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>,kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithPitch*,float,float,float &,int &,void>(&v28, &v22, &v21, &v20, (float *)&v24[4], (int *)(a1 + 264), &v23);
  *a5 = v23;
  if ((v24[47] & 0x80000000) != 0) {
    operator delete(*(void **)&v24[24]);
  }
}

void sub_1B20A26B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineFbankWithAudioAnalyticsFe::registerFrameExtractionOptions(quasar::OnlineFbankWithAudioAnalyticsFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "sample-frequency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Waveform data sample frequency (must match the waveform file, if specified there)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 284, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "frame-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame length in milliseconds");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 64, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "frame-shift");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame shift in milliseconds");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 60, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "preemphasis-coefficient");
  std::string::basic_string[abi:ne180100]<0>(__p, "Coefficient for use in signal preemphasis");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 72, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "remove-dc-offset");
  std::string::basic_string[abi:ne180100]<0>(__p, "Subtract mean from waveform on each frame");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 76, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "dither");
  std::string::basic_string[abi:ne180100]<0>(__p, "Dithering constant (0.0 means no dither)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 68, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "window-type");
  std::string::basic_string[abi:ne180100]<0>(__p, "Type of window (\"hamming\"|\"hanning\"|\"povey\"|\"rectangular\")");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 80, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "round-to-power-of-two");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, round window size to power of two.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 104, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "snip-edges");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, end effects will be handled by outputting only frames that completely fit in the file, and the number of frames depends on the frame-length.  If false, the number of frames depends only on the frame-shift, and we reflect the data at the ends.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 105, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B20A2ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineFbankWithAudioAnalyticsFe::registerAudioAnalyticsExtractionOptions(quasar::OnlineFbankWithAudioAnalyticsFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "analytics-sample-frequency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Waveform data sample frequency (must match the waveform file, if specified there)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 148, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "analytics-frame-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame length in milliseconds");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 156, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "analytics-frame-shift");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame shift in milliseconds");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 152, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "analytics-preemphasis-coefficient");
  std::string::basic_string[abi:ne180100]<0>(__p, "Coefficient for use in signal preemphasis (deprecated)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 160, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-f0");
  std::string::basic_string[abi:ne180100]<0>(__p, "min. F0 to search for (Hz)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 164, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-f0");
  std::string::basic_string[abi:ne180100]<0>(__p, "max. F0 to search for (Hz)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 168, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "soft-min-f0");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minimum f0, applied in soft way, must not exceed min-f0");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 172, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "penalty-factor");
  std::string::basic_string[abi:ne180100]<0>(__p, "cost factor for FO change.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 176, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lowpass-cutoff");
  std::string::basic_string[abi:ne180100]<0>(__p, "cutoff frequency for LowPass filter (Hz) ");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 180, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "resample-frequency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frequency that we down-sample the signal to. Must be more than twice lowpass-cutoff");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 184, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "Smallest relative change in pitch that our algorithm measures");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 188, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nccf-ballast");
  std::string::basic_string[abi:ne180100]<0>(__p, "Increasing this factor reduces NCCF for quiet frames");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 192, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nccf-ballast-online");
  std::string::basic_string[abi:ne180100]<0>(__p, "This is useful mainly for debug; it affects how the NCCF ballast is computed.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 220, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lowpass-filter-width");
  std::string::basic_string[abi:ne180100]<0>(__p, "Integer that determines filter width of lowpass filter, more gives sharper filter");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 196, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "upsample-filter-width");
  std::string::basic_string[abi:ne180100]<0>(__p, "Integer that determines filter width when upsampling NCCF");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 200, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "frames-per-chunk");
  std::string::basic_string[abi:ne180100]<0>(__p, "Only relevant for offline pitch extraction (e.g. compute-kaldi-pitch-feats), you can set it to a small nonzero value, such as 10, for better feature compatibility with online decoding (affects energy normalization in the algorithm)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 208, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "simulate-first-pass-online");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, compute-kaldi-pitch-feats will output features that correspond to what an online decoder would see in the first pass of decoding-- not the final version of the features, which is the default.  Relevant if --frames-per-chunk > 0");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 212, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "recompute-frame");
  std::string::basic_string[abi:ne180100]<0>(__p, "Only relevant for online pitch extraction, or for compatibility with online pitch extraction.  A non-critical parameter; the frame at which we recompute some of the forward pointers, after revising our estimate of the signal energy."
    "  Relevant if--frames-per-chunk > 0");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 216, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-frames-latency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of frames of latency that we allow pitch tracking to introduce into the feature processing (affects output only if --frames-per-chunk > 0 and --simulate-first-pass-online=true");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 204, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "analytics-snip-edges");
  std::string::basic_string[abi:ne180100]<0>(__p, "If this is set to false, the incomplete frames near the ending edge won't be snipped, so that the number of frames is the file size divided by the frame-shift. This makes different types of features give the same number of frames.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 221, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "pitch-viterbi-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames over which we want to run viterbi for computing pitch.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 224, (uint64_t)__p, 0, 149, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B20A3448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineFbankWithAudioAnalyticsFe::registerResamplerOptions(quasar::OnlineFbankWithAudioAnalyticsFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "resample-freq");
  std::string::basic_string[abi:ne180100]<0>(__p, "The frequency to resample to.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 292, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "resample-cutoff-hz");
  std::string::basic_string[abi:ne180100]<0>(__p, "The cutoff for the filter for resampling the audio");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 296, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "resample-num-zeros");
  std::string::basic_string[abi:ne180100]<0>(__p, "Controls sharpness of filter.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 300, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B20A368C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineFbankWithAudioAnalyticsFe::registerParams(quasar::OnlineFbankWithAudioAnalyticsFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "fbank-with-audio-analytics");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 98, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  kaldi::FbankWithAudioAnalyticsOptions::Register((uint64_t)this + 48, (void (***)(void, void **, uint64_t, void **))a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "low-watermark");
  std::string::basic_string[abi:ne180100]<0>(v4, "Low watermark (in number of frames) for audio buffer read. Ignored if <= 0.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 280, (uint64_t)v4, 0, 76, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  quasar::OnlineFbankWithAudioAnalyticsFe::registerFrameExtractionOptions(this, a2);
  quasar::OnlineFbankWithAudioAnalyticsFe::registerAudioAnalyticsExtractionOptions(this, a2);
  quasar::OnlineFbankWithAudioAnalyticsFe::registerResamplerOptions(this, a2);
  *((_DWORD *)this + 70) = 0;
}

void sub_1B20A37D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::FbankWithAudioAnalyticsOptions::Register(uint64_t a1, void (***a2)(void, void **, uint64_t, void **))
{
  kaldi::FbankOptions::Register(a1, (uint64_t)a2, 1);
  kaldi::ProcessAudioAnalyticsOptions::Register(a1 + 180, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "use-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "Add extra dimensions for pitch to the FBANK output.");
  (**a2)(a2, v6, a1 + 228, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B20A38BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

double quasar::OnlineFbankWithAudioAnalyticsFe::finishInit(quasar::OnlineFbankWithAudioAnalyticsFe *this, quasar::SystemConfig *a2)
{
  *((_DWORD *)this + 14) = *((_DWORD *)this + 71);
  uint64_t ConfigFileVersion = quasar::SystemConfig::getConfigFileVersion(a2);
  quasar::SystemConfig::Version::Version(&v4, 139, 0);
  if (quasar::SystemConfig::Version::operator<(&ConfigFileVersion, &v4))
  {
    *((_DWORD *)this + 39) = *((_DWORD *)this + 16);
    double result = *((double *)this + 7);
    *(double *)((char *)this + 148) = result;
  }
  return result;
}

void quasar::OnlineFbankWithAudioAnalyticsFe::createOnlineFeInputImpl(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v42 = a2;
  if (*a3)
  {
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    memset(v39, 0, sizeof(v39));
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    memset(v34, 0, sizeof(v34));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"'", 1);
    uint64_t v25 = *(void *)(a1 + 8);
    uint64_t v24 = a1 + 8;
    uint64_t v23 = v25;
    int v26 = *(char *)(v24 + 23);
    if (v26 >= 0) {
      uint64_t v27 = v24;
    }
    else {
      uint64_t v27 = v23;
    }
    if (v26 >= 0) {
      uint64_t v28 = *(unsigned __int8 *)(v24 + 23);
    }
    else {
      uint64_t v28 = *(void *)(v24 + 8);
    }
    long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v27, v28);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "' can only occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v34);
  }
  long long v8 = *(std::__shared_weak_count **)(a1 + 312);
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  long long v9 = *(std::__shared_weak_count **)(a1 + 328);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*(unsigned char *)(a4 + 168) || *(unsigned char *)(a1 + 276))
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      memset(v39, 0, sizeof(v39));
      long long v36 = 0u;
      long long v37 = 0u;
      long long v35 = 0u;
      memset(v34, 0, sizeof(v34));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Creating FbankWithAudioAnalytics", 32);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v34);
    }
    *(void *)&v34[0] = &unk_1F0A472F8;
    *(_OWORD *)((char *)v34 + 8) = *(_OWORD *)(a1 + 56);
    *(void *)((char *)&v34[1] + 5) = *(void *)(a1 + 69);
    if (*(char *)(a1 + 103) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v35, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
    }
    else
    {
      long long v35 = *(_OWORD *)(a1 + 80);
      *(void *)&long long v36 = *(void *)(a1 + 96);
    }
    *((void *)&v36 + 1) = *(void *)(a1 + 104);
    long long v10 = *(_OWORD *)(a1 + 128);
    long long v37 = *(_OWORD *)(a1 + 112);
    long long v38 = v10;
    LODWORD(v39[0]) = *(_DWORD *)(a1 + 144);
    *(void *)&v34[0] = &unk_1F0A48330;
    *(_OWORD *)((char *)&v39[5] + 4) = *(_OWORD *)(a1 + 228);
    *(_OWORD *)((char *)&v39[6] + 4) = *(_OWORD *)(a1 + 244);
    BYTE4(v39[8]) = *(unsigned char *)(a1 + 276);
    *(_OWORD *)((char *)&v39[1] + 4) = *(_OWORD *)(a1 + 164);
    *(_OWORD *)((char *)&v39[2] + 4) = *(_OWORD *)(a1 + 180);
    *(_OWORD *)((char *)&v39[3] + 4) = *(_OWORD *)(a1 + 196);
    *(_OWORD *)((char *)&v39[4] + 4) = *(_OWORD *)(a1 + 212);
    *(_OWORD *)((char *)v39 + 4) = *(_OWORD *)(a1 + 148);
    *(_OWORD *)((char *)&v39[7] + 4) = *(_OWORD *)(a1 + 260);
    float v11 = (float)*(unsigned int *)a4;
    float v12 = *(float *)(a1 + 292);
    *((float *)v34 + 2) = v11;
    *((float *)&v36 + 3) = v12;
    *(float *)(a1 + 288) = v11;
    if (v12 > 0.0) {
      float v11 = v12;
    }
    *((float *)v39 + 1) = v11;
    std::allocate_shared[abi:ne180100]<kaldi::FbankWithAudioAnalytics,std::allocator<kaldi::FbankWithAudioAnalytics>,kaldi::FbankWithAudioAnalyticsOptions &,void>((const kaldi::FbankWithAudioAnalyticsOptions *)v34, &v33);
    long long v13 = v33;
    long long v33 = 0uLL;
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 328);
    *(_OWORD *)(a1 + 320) = v13;
    if (v14)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (*((void *)&v33 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
      }
    }
    uint64_t v32 = *(void *)(a1 + 320);
    float v15 = *((float *)&v36 + 3);
    if (*((float *)&v36 + 3) <= 0.0) {
      float v15 = *((float *)v34 + 2);
    }
    float v16 = v15 / 1000.0;
    float v30 = *((float *)v34 + 3) * v16;
    float v31 = *(float *)&v34[1] * v16;
    std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>,kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithAudioAnalytics*,float,float,float &,int &,kaldi::ResamplerOptions &,void>(&v42, &v32, &v31, &v30, (float *)v34 + 3, (int *)(a1 + 280), (float *)(a1 + 288), &v33);
    *a5 = v33;
    kaldi::FbankOptions::~FbankOptions((void **)v34);
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      memset(v39, 0, sizeof(v39));
      long long v36 = 0u;
      long long v37 = 0u;
      long long v35 = 0u;
      memset(v34, 0, sizeof(v34));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Creating Fbank", 14);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v34);
    }
    *(void *)&v34[0] = &unk_1F0A472F8;
    *(_OWORD *)((char *)v34 + 8) = *(_OWORD *)(a1 + 56);
    *(void *)((char *)&v34[1] + 5) = *(void *)(a1 + 69);
    if (*(char *)(a1 + 103) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v35, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
    }
    else
    {
      long long v35 = *(_OWORD *)(a1 + 80);
      *(void *)&long long v36 = *(void *)(a1 + 96);
    }
    *((void *)&v36 + 1) = *(void *)(a1 + 104);
    long long v17 = *(_OWORD *)(a1 + 128);
    long long v37 = *(_OWORD *)(a1 + 112);
    long long v38 = v17;
    LODWORD(v39[0]) = *(_DWORD *)(a1 + 144);
    *((float *)v34 + 2) = (float)*(unsigned int *)a4;
    HIDWORD(v36) = *(_DWORD *)(a1 + 292);
    *(_DWORD *)(a1 + 288) = DWORD2(v34[0]);
    std::allocate_shared[abi:ne180100]<kaldi::Fbank,std::allocator<kaldi::Fbank>,kaldi::FbankOptions &,void>((const kaldi::FbankOptions *)v34, &v33);
    long long v18 = v33;
    long long v33 = 0uLL;
    uint64_t v19 = *(std::__shared_weak_count **)(a1 + 312);
    *(_OWORD *)(a1 + 304) = v18;
    if (v19)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      if (*((void *)&v33 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
      }
    }
    uint64_t v32 = *(void *)(a1 + 304);
    float v20 = *((float *)&v36 + 3);
    if (*((float *)&v36 + 3) <= 0.0) {
      float v20 = *((float *)v34 + 2);
    }
    float v21 = v20 / 1000.0;
    float v30 = *((float *)v34 + 3) * v21;
    float v31 = *(float *)&v34[1] * v21;
    std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::Fbank>,std::allocator<kaldi::OnlineFeInput<kaldi::Fbank>>,kaldi::OnlineAudioSourceItf *&,kaldi::Fbank*,float,float,float &,int &,kaldi::ResamplerOptions &,void>(&v42, &v32, &v31, &v30, (float *)v34 + 3, (int *)(a1 + 280), (float *)(a1 + 288), &v33);
    *a5 = v33;
    kaldi::FbankOptions::~FbankOptions((void **)v34);
  }
}

void sub_1B20A3E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

double quasar::OnlineLdaFe::registerParams(quasar::OnlineLdaFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "lda-matrix-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "LDA matrix filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 48, (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "left-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames of left context");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 72, (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "right-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames of right context");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 76, (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  *(void *)&double result = 0x400000004;
  *((void *)this + 9) = 0x400000004;
  return result;
}

void sub_1B20A3FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLdaFe::finishInit(int32x2_t *this, quasar::SystemConfig *a2)
{
}

double quasar::OnlineLdaFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  if (!*a2)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = a1 + 8;
    uint64_t v7 = v9;
    int v10 = *(char *)(v8 + 23);
    if (v10 >= 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v7;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      uint64_t v12 = *(void *)(v8 + 8);
    }
    long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  uint64_t v14 = *a2;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineLdaInput,std::allocator<kaldi::OnlineLdaInput>,kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,int &,int &,void>(&v14, a1 + 80, (unsigned int *)(a1 + 72), (unsigned int *)(a1 + 76), v15);
  double result = *(double *)v15;
  *a3 = v15[0];
  return result;
}

void quasar::OnlineMfccFe::registerParams(quasar::OnlineMfccFe *this, quasar::SystemConfig *a2)
{
}

void quasar::OnlineMfccFe::finishInit(quasar::OnlineMfccFe *this, quasar::SystemConfig *a2)
{
  std::allocate_shared[abi:ne180100]<kaldi::Mfcc,std::allocator<kaldi::Mfcc>,kaldi::MfccOptions &,void>((quasar::OnlineMfccFe *)((char *)this + 48), &v5);
  long long v3 = v5;
  long long v5 = 0uLL;
  int v4 = (std::__shared_weak_count *)*((void *)this + 20);
  *(_OWORD *)((char *)this + 152) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (*((void *)&v5 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
    }
  }
}

double quasar::OnlineMfccFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v22 = a2;
  if (*a3)
  {
    memset(v21, 0, sizeof(v21));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"'", 1);
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v12 = a1 + 8;
    uint64_t v11 = v13;
    int v14 = *(char *)(v12 + 23);
    if (v14 >= 0) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = v11;
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      uint64_t v16 = *(void *)(v12 + 8);
    }
    long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v15, v16);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "' can only occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v21);
  }
  uint64_t v20 = *(void *)(a1 + 152);
  float v5 = *(float *)(a1 + 100);
  if (v5 <= 0.0) {
    float v5 = *(float *)(a1 + 48);
  }
  float v6 = v5 / 1000.0;
  float v7 = *(float *)(a1 + 56) * v6;
  float v18 = *(float *)(a1 + 52) * v6;
  float v19 = v7;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::Mfcc>,std::allocator<kaldi::OnlineFeInput<kaldi::Mfcc>>,kaldi::OnlineAudioSourceItf *&,kaldi::Mfcc*,float,float,float &,void>(&v22, &v20, &v19, &v18, (float *)(a1 + 52), v21);
  double result = *(double *)v21;
  *a4 = v21[0];
  return result;
}

void quasar::OnlineNnetForwardFe::registerParams(quasar::OnlineNnetForwardFe *this, quasar::SystemConfig *a2)
{
  int v4 = (char *)this + 208;
  kaldi::nnet1::PdfPriorOptions::Register((uint64_t)this + 208, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v18, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map model into memory (requires aligned models)");
  uint64_t v15 = (char *)this + 98;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v18, (uint64_t)this + 98, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Name of nnet model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v18, (uint64_t)this + 48, (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File for feature transform in front of nnet's main network (in nnet format)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v18, (uint64_t)this + 72, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "no-softmax");
  std::string::basic_string[abi:ne180100]<0>(__p, "No softmax on MLP output (or remove it if found), the pre-softmax activations will be used as log-likelihoods, log-priors will be subtracted");
  int v14 = (char *)this + 96;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v18, (uint64_t)this + 96, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "apply-log");
  std::string::basic_string[abi:ne180100]<0>(__p, "Transform MLP output to logscale");
  float v5 = (char *)this + 97;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v18, (uint64_t)this + 97, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "use-gpu-id");
  std::string::basic_string[abi:ne180100]<0>(__p, "Unused, kaldi is compiled w/o CUDA");
  float v6 = (_DWORD *)((char *)this + 100);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v18, (uint64_t)this + 100, (uint64_t)__p, 0, 14, 2, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "class-frame-counts-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing vector with frame-counts of pdfs to compute log-priors. This is the same as class-frame-counts, but allows paths that are relative to the json config file (class-frame-counts requires absolute paths). If class-frame-counts is also specified, this param will override it.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v18, (uint64_t)v4, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "silence-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Name of nnet model file for computing silence posteriors");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v18, (uint64_t)this + 104, (uint64_t)__p, 0, 75, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "batch-left-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames of left context to prepend to the batch as extra rows");
  float v7 = (void *)((char *)this + 128);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v18, (uint64_t)this + 128, (uint64_t)__p, 0, 148, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "batch-right-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames of right context to append to the batch as extra rows");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v18, (uint64_t)this + 132, (uint64_t)__p, 0, 148, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "strict-batch-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Batch size applied just for this extractor. Ignored if <= 0. Unlike feature-read.batch-size, which is just a hint, this batch size is so strict that even the last batch will be padded to exactly this size with copies of the last frame if the last batch is too small. (The padding is removed from the output). Excludes context frames (actual batch size is strict-batch-size + batch-left-context + batch-right-context).");
  uint64_t v8 = (_DWORD *)((char *)this + 136);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v18, (uint64_t)this + 136, (uint64_t)__p, 0, 164, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "zero-pad");
  std::string::basic_string[abi:ne180100]<0>(__p, "Zero pad the features, instead of last frame padding, to reach the strict-batch-size requirementvalid only when strict-batch-size is also specified");
  uint64_t v9 = (char *)this + 168;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v18, (uint64_t)this + 168, (uint64_t)__p, 0, 166, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "append-pad-info");
  std::string::basic_string[abi:ne180100]<0>(__p, "Append the pad info as an additional row in the input matrixThe first element of the appended row is the number of padded rows, which excludes this extra appended rowvalid only when strict-batch-size is also specified");
  int v10 = (char *)this + 169;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v18, (uint64_t)this + 169, (uint64_t)__p, 0, 176, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "append-context-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Append the context matrix along with the input. Ignored if <= 0Add the specified amount of rows as context to the input features and one additional row which has the batch number. The context is obtained from last N rows of output of the previous inference.Context is ignored by the model for the first inference i.e. batch num is 0valid only when strict-batch-size is also specified");
  uint64_t v11 = (_DWORD *)((char *)this + 172);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v18, (uint64_t)this + 172, (uint64_t)__p, 0, 207, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "strict-batch-sizes");
  std::string::basic_string[abi:ne180100]<0>(__p, "Defines an array of 3 sizes - [ModelInterfaceSize, FirstBatchSize, SubsequentBatchSize]ModelInterfaceSize: defines the size of input expected by the modelFirstBatchSize: defines the batch size used for 1st inference, will be padded with zeros                 if less than than ModelInterfaceSizeSubsequentBatchSize: defines the batch size used for the rest of the inferences, will be                     padded with zeros if less than than ModelInterfaceSize(The padding is removed from the output)This feature is added support streaming Acoustic FTM and Hey Siri checker using the same model");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v18, (uint64_t)this + 184, (uint64_t)__p, 0, 223, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "input-feats-mask");
  std::string::basic_string[abi:ne180100]<0>(__p, "define whether masking is in the input tensorWhen this is define, features tensors with on the effective frames will be used for model compute and previous contexts will also be used as inputThis feature is added supporting streaming Acoustic FTM for aftm_feats_mask_block, input_buffer, mask_buffer, accum_embed, accum_weight, position_encoding_offset as input tensor");
  uint64_t v12 = (char *)this + 176;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v18, (uint64_t)this + 176, (uint64_t)__p, 0, 255, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "single-row-output");
  std::string::basic_string[abi:ne180100]<0>(__p, "define whether the output from forward nnet will is single row or notstrict-batch-sizes needs to be enabled for this option");
  uint64_t v13 = (char *)this + 177;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v18, (uint64_t)v13, (uint64_t)__p, 0, 256, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  unsigned char *v15 = 0;
  *int v14 = 0;
  unsigned char *v5 = 0;
  *float v6 = -2;
  *float v7 = 0;
  *uint64_t v8 = 0;
  unsigned char *v9 = 0;
  *int v10 = 0;
  _DWORD *v11 = 0;
  *uint64_t v12 = 0;
  *uint64_t v13 = 0;
}

void sub_1B20A4A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineNnetForwardFe::finishInit(quasar::OnlineNnetForwardFe *this, quasar::SystemConfig *a2)
{
  ModelLoader = (std::string *)quasar::SystemConfig::getModelLoader(a2);
  if (*((char *)this + 207) < 0) {
    uint64_t v4 = *((void *)this + 24);
  }
  else {
    uint64_t v4 = *((unsigned __int8 *)this + 207);
  }
  if (!v4) {
    goto LABEL_14;
  }
  if (*((_DWORD *)this + 34))
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "cannot set both strict-batch-size & strict-batch-sizes");
    goto LABEL_57;
  }
  kaldi::SplitStringToIntegers<int>((uint64_t)this + 184, ",", 0, (std::vector<unsigned int> *)this + 6);
  float v5 = (int *)*((void *)this + 18);
  if (*((void *)this + 19) - (void)v5 != 12)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "strict-batch-sizes needs 3 sizes");
LABEL_57:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  int v6 = *v5;
  int v7 = v5[1];
  int v8 = v5[2];
  if (v7 > v8) {
    int v8 = v7;
  }
  if (v6 < v8 && quasar::gLogLevel >= 4)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Model input size should greater than batch sizes in most cases", 62);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
LABEL_14:
  quasar::ModelLoader::requestEmbeddedMlock(ModelLoader, (unsigned __int8 *)this + 48, __p, 1.0);
  uint64_t v11 = __p[0];
  int v10 = (std::__shared_weak_count *)__p[1];
  int v12 = *((unsigned __int8 *)this + 98);
  int v13 = *((unsigned __int8 *)this + 96);
  unsigned __int8 isKeepANEModelLoadedEnabled = quasar::ModelLoader::isKeepANEModelLoadedEnabled((uint64_t)ModelLoader, (uint64_t)this + 48);
  uint64_t v28 = v11;
  long long v29 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::ModelLoader::readFeedForwardNetwork((uint64_t)ModelLoader, (uint64_t)this + 48, v12 != 0, v13 != 0, 0, isKeepANEModelLoadedEnabled, (uint64_t)&v28, __p);
  long long v15 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 80);
  *(_OWORD *)((char *)this + 632) = v15;
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  char v17 = (char *)this + 72;
  if (*((unsigned char *)this + 98))
  {
    if ((*((unsigned char *)this + 95) & 0x80) != 0)
    {
      if (!*((void *)this + 10)) {
        goto LABEL_32;
      }
    }
    else if (!*((unsigned char *)this + 95))
    {
      goto LABEL_32;
    }
    fst::FstReadOptions::FstReadOptions(__p, v17, 0, 0, 0);
    LODWORD(v33) = 2;
    kaldi::nnet1::Nnet::ReadMapped((uint64_t)this + 256, (uint64_t)__p);
  }
  if ((*((unsigned char *)this + 95) & 0x80) != 0)
  {
    if (!*((void *)this + 10)) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (*((unsigned char *)this + 95)) {
LABEL_31:
  }
    kaldi::nnet1::Nnet::Read((uint64_t)this + 256, (uint64_t)v17);
LABEL_32:
  if (*((char *)this + 127) < 0)
  {
    if (!*((void *)this + 14)) {
      goto LABEL_49;
    }
  }
  else if (!*((unsigned char *)this + 127))
  {
    goto LABEL_49;
  }
  int v26 = 0;
  uint64_t v27 = 0;
  quasar::ModelLoader::readNeuralNetwork((uint64_t)ModelLoader, (uint64_t)this + 104, 0, 0, 1, &v26, __p);
  long long v18 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  char v19 = (std::__shared_weak_count *)*((void *)this + 82);
  *(_OWORD *)((char *)this + 648) = v18;
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Read model file for computing silence posteriors=", 49);
    int v21 = *((char *)this + 127);
    if (v21 >= 0) {
      uint64_t v22 = (char *)this + 104;
    }
    else {
      uint64_t v22 = (char *)*((void *)this + 13);
    }
    if (v21 >= 0) {
      uint64_t v23 = *((unsigned __int8 *)this + 127);
    }
    else {
      uint64_t v23 = *((void *)this + 14);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v22, v23);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
LABEL_49:
  std::allocate_shared[abi:ne180100]<kaldi::nnet1::PdfPrior,std::allocator<kaldi::nnet1::PdfPrior>,kaldi::nnet1::PdfPriorOptions &,void>(__p);
  long long v24 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v25 = (std::__shared_weak_count *)*((void *)this + 31);
  *((_OWORD *)this + 15) = v24;
  if (v25)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void quasar::OnlineNnetForwardFe::createOnlineFeInputImpl(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  if (!*a2)
  {
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v65 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v65);
    long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"'", 1);
    uint64_t v55 = *(void *)(a1 + 8);
    uint64_t v54 = a1 + 8;
    uint64_t v53 = v55;
    int v56 = *(char *)(v54 + 23);
    if (v56 >= 0) {
      uint64_t v57 = v54;
    }
    else {
      uint64_t v57 = v53;
    }
    if (v56 >= 0) {
      uint64_t v58 = *(unsigned __int8 *)(v54 + 23);
    }
    else {
      uint64_t v58 = *(void *)(v54 + 8);
    }
    unsigned int v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v57, v58);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v59, "' cannot occur at the first stage of feature-extract");
    goto LABEL_81;
  }
  int v6 = *(unsigned __int8 *)(a1 + 97);
  if (*(unsigned char *)(a1 + 97) && *(unsigned char *)(a1 + 96))
  {
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v65 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v65);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v65, "Nonsense option combination : --apply-log=true and --no-softmax=true");
    goto LABEL_81;
  }
  if ((*(char *)(a1 + 231) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 231)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (*(void *)(a1 + 216))
  {
LABEL_8:
    if (*(unsigned __int8 *)(a1 + 96) | v6) {
      goto LABEL_9;
    }
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v65 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v65);
    unint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"Option --class-frame-counts has to be used together with ", 57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v60, "--no-softmax or --apply-log");
LABEL_81:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v65);
  }
LABEL_9:
  int v7 = *(const void **)(a1 + 632);
  if (v7
  {
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 640);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      int v6 = *(unsigned __int8 *)(a1 + 97);
    }
    if (v6)
    {
      uint64_t Component = kaldi::nnet1::Nnet::GetComponent((kaldi::nnet1::Nnet *)(v8 + 1), ((v8[2] - v8[1]) >> 3) - 1);
      if ((*(unsigned int (**)(uint64_t))(*(void *)Component + 24))(Component) != 513)
      {
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v65 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v65);
        uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"Used --apply-log=true, but nnet ", 32);
        uint64_t v14 = *(void *)(a1 + 48);
        uint64_t v13 = a1 + 48;
        uint64_t v12 = v14;
        int v15 = *(char *)(v13 + 23);
        if (v15 >= 0) {
          uint64_t v16 = v13;
        }
        else {
          uint64_t v16 = v12;
        }
        if (v15 >= 0) {
          uint64_t v17 = *(unsigned __int8 *)(v13 + 23);
        }
        else {
          uint64_t v17 = *(void *)(v13 + 8);
        }
        long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v16, v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" does not have <softmax> as last component!", 43);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v65);
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v20 = *(char **)(a1 + 144);
  char v19 = (void **)(a1 + 144);
  if (v20 == *(char **)(a1 + 152))
  {
    uint64_t v22 = (char **)(a1 + 160);
    int v21 = *(char **)(a1 + 160);
    if (v20 >= v21)
    {
      unint64_t v24 = v21 - v20;
      unint64_t v25 = (v21 - v20) >> 1;
      if (v25 <= 1) {
        unint64_t v25 = 1;
      }
      if (v24 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      uint64_t v27 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 160, v26);
      uint64_t v28 = *(char **)(a1 + 144);
      long long v29 = *(char **)(a1 + 152);
      int v21 = (char *)&v27[v30];
      *uint64_t v27 = *(_DWORD *)(a1 + 136);
      uint64_t v23 = (char *)(v27 + 1);
      while (v29 != v28)
      {
        int v31 = *((_DWORD *)v29 - 1);
        v29 -= 4;
        *--uint64_t v27 = v31;
      }
      *(void *)(a1 + 144) = v27;
      *(void *)(a1 + 152) = v23;
      *(void *)(a1 + 160) = v21;
      if (v28)
      {
        operator delete(v28);
        int v21 = *v22;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v20 = *(_DWORD *)(a1 + 136);
      uint64_t v23 = v20 + 4;
    }
    *(void *)(a1 + 152) = v23;
    if (v23 >= v21)
    {
      long long v33 = (char *)*v19;
      uint64_t v34 = (v23 - (unsigned char *)*v19) >> 2;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62) {
        goto LABEL_82;
      }
      uint64_t v36 = v21 - v33;
      if (v36 >> 1 > v35) {
        unint64_t v35 = v36 >> 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37)
      {
        long long v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 160, v37);
        long long v33 = *(char **)(a1 + 144);
        uint64_t v23 = *(char **)(a1 + 152);
      }
      else
      {
        long long v38 = 0;
      }
      long long v39 = &v38[4 * v34];
      int v21 = &v38[4 * v37];
      *(_DWORD *)long long v39 = *(_DWORD *)(a1 + 136);
      long long v32 = v39 + 4;
      while (v23 != v33)
      {
        int v40 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *((_DWORD *)v39 - 1) = v40;
        v39 -= 4;
      }
      *(void *)(a1 + 144) = v39;
      *(void *)(a1 + 152) = v32;
      *(void *)(a1 + 160) = v21;
      if (v33)
      {
        operator delete(v33);
        int v21 = *v22;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v23 = *(_DWORD *)(a1 + 136);
      long long v32 = v23 + 4;
    }
    *(void *)(a1 + 152) = v32;
    if (v32 < v21)
    {
      *(_DWORD *)long long v32 = *(_DWORD *)(a1 + 136);
      long long v41 = v32 + 4;
LABEL_68:
      *(void *)(a1 + 152) = v41;
      goto LABEL_69;
    }
    long long v42 = (char *)*v19;
    uint64_t v43 = (v32 - (unsigned char *)*v19) >> 2;
    unint64_t v44 = v43 + 1;
    if (!((unint64_t)(v43 + 1) >> 62))
    {
      uint64_t v45 = v21 - v42;
      if (v45 >> 1 > v44) {
        unint64_t v44 = v45 >> 1;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46)
      {
        long long v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 160, v46);
        long long v42 = *(char **)(a1 + 144);
        long long v32 = *(char **)(a1 + 152);
      }
      else
      {
        long long v47 = 0;
      }
      long long v48 = &v47[4 * v43];
      long long v49 = &v47[4 * v46];
      *(_DWORD *)long long v48 = *(_DWORD *)(a1 + 136);
      long long v41 = v48 + 4;
      while (v32 != v42)
      {
        int v50 = *((_DWORD *)v32 - 1);
        v32 -= 4;
        *((_DWORD *)v48 - 1) = v50;
        v48 -= 4;
      }
      *(void *)(a1 + 144) = v48;
      *(void *)(a1 + 152) = v41;
      *(void *)(a1 + 160) = v49;
      if (v42) {
        operator delete(v42);
      }
      goto LABEL_68;
    }
LABEL_82:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
LABEL_69:
  uint64_t v51 = *a2;
  uint64_t v63 = a1 + 256;
  uint64_t v64 = v51;
  uint64_t v62 = *(void *)(a1 + 240);
  uint64_t v61 = *(void *)(a1 + 648);
  std::allocate_shared[abi:ne180100]<kaldi::OnlineNnetForwardInput,std::allocator<kaldi::OnlineNnetForwardInput>,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,kaldi::InferenceNetItf *,int &,int &,std::vector<int> &,BOOL &,BOOL &,int &,BOOL &,BOOL &,void>(&v64, &v63, (void *)(a1 + 632), (long long *)(a1 + 208), &v62, (char *)(a1 + 97), (char *)(a1 + 96), &v65, &v61, (int *)(a1 + 128), (int *)(a1 + 132), a1 + 144, (char *)(a1 + 168), (char *)(a1 + 169), (int *)(a1 + 172), (char *)(a1 + 176), (char *)(a1 + 177));
  *a3 = v65;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void quasar::SpeechActivityDetectorFe::registerParams(quasar::SpeechActivityDetectorFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "zero-pad");
  std::string::basic_string[abi:ne180100]<0>(__p, "Zero pad the features, instead of artificial silence, to reach the strict-batch-size requirement");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 132, (uint64_t)__p, 0, 166, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "num-silence-padding-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "pad this many artifical silence frames at the end of audio");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 128, (uint64_t)__p, 0, 207, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "the AM for realigned-am-fusion-decoder");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 80, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "silence-vector-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "the artifical silence fbank that will be padded to the end of the audio to alleviate CTC's delayed decision");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 104, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "align-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "align sad score with fbanks");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 133, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B20A5788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SpeechActivityDetectorFe::finishInit(quasar::SpeechActivityDetectorFe *this, quasar::SystemConfig *a2)
{
  if (*((char *)this + 127) < 0)
  {
    if (!*((void *)this + 14)) {
      goto LABEL_10;
    }
  }
  else if (!*((unsigned char *)this + 127))
  {
    goto LABEL_10;
  }
  uint64_t v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1F0A5F060;
  v4[4] = 0;
  v4[5] = 0;
  char v5 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 9) = v4;
  void v4[3] = 0;
  *((void *)this + 8) = v4 + 3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)&long long v14 = 0;
  kaldi::Input::OpenInternal(&v14, (uint64_t)this + 104, 0, 0);
  uint64_t v6 = *((void *)this + 8);
  char v7 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)&v14);
  kaldi::Vector<float>::Read(v6, v7, 0, 0);
  kaldi::Input::Close((kaldi::Input *)&v14);
  if (quasar::gLogLevel >= 4)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Read a silence vector of ", 25);
    int v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" elements for am-fusion", 23);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v15);
  }
  kaldi::Input::~Input((kaldi::Input *)&v14);
LABEL_10:
  ModelLoader = (quasar::ModelLoader *)quasar::SystemConfig::getModelLoader(a2);
  quasar::ModelLoader::getModelInitializeContext((uint64_t)ModelLoader, &v14);
  BOOL isKeepANEModelLoadedEnabled = quasar::ModelLoader::isKeepANEModelLoadedEnabled((uint64_t)ModelLoader, (uint64_t)this + 80);
  unsigned __int8 IsANEReadyOnLowEnd = quasar::ModelLoader::milIsANEReadyOnLowEnd(ModelLoader);
  std::allocate_shared[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,BOOL,BOOL,void>((uint64_t)this + 80, &v14, (unsigned __int8 *)&isKeepANEModelLoadedEnabled, &IsANEReadyOnLowEnd, v15);
  long long v10 = v15[0];
  v15[0] = 0uLL;
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 7);
  *((_OWORD *)this + 3) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (*((void *)&v15[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15[0] + 1));
    }
  }
  if (*((void *)&v14 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
  }
}

void sub_1B20A59C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::Input::~Input((kaldi::Input *)va);
  _Unwind_Resume(a1);
}

double quasar::SpeechActivityDetectorFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  if (!*a2)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = a1 + 8;
    uint64_t v7 = v9;
    int v10 = *(char *)(v8 + 23);
    if (v10 >= 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v7;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      uint64_t v12 = *(void *)(v8 + 8);
    }
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  uint64_t v14 = *a2;
  std::allocate_shared[abi:ne180100]<kaldi::SpeechActivityDetector,std::allocator<kaldi::SpeechActivityDetector>,kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,BOOL &,void>(&v14, (unsigned int *)(a1 + 128), (unsigned __int8 *)(a1 + 132), a1 + 48, a1 + 64, (unsigned __int8 *)(a1 + 133), v15);
  double result = *(double *)v15;
  *a3 = v15[0];
  return result;
}

void quasar::AmFusionEncoderFe::registerParams(quasar::AmFusionEncoderFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "zero-pad");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Zero pad the features, instead of artificial silence, to reach the strict-batch-size requirement");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 268, (uint64_t)&__p, 0, 166, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "num-silence-padding-frames");
  std::string::basic_string[abi:ne180100]<0>(&__p, "pad this many artifical silence frames at the end of audio");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 264, (uint64_t)&__p, 0, 207, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "model-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the AM for realigned-am-fusion-decoder");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 112, (uint64_t)&__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "fusion-model-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the AM for for realigned-am-fusion-decoder");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 136, (uint64_t)&__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "silence-vector-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the artifical silence fbank that will be padded to the end of the audio to alleviate CTC's delayed decision");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 160, (uint64_t)&__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "fusion-am-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Fusion: Acoustic model (transition model) filename.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 184, (uint64_t)&__p, 0, 261, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "fusion-sil-phone-csl-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Fusion: File containing colon-separated list of silence phones.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 208, (uint64_t)&__p, 0, 261, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "context-embedding-nobias-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Contextual biasing: File contains context embedding for nobias phrase");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 232, (uint64_t)&__p, 0, 261, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "biasing-gating-threshold");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Threshold for the gating in gated contextual biasing model");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 572, (uint64_t)&__p, 0, 261, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "biasing-gating-threshold-map");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Biasing gating threshold configuration. It defines the mapping from task to gating threshold");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 576, (uint64_t)&__p, 0, 261, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  quasar::SystemConfig::getPrefix(a2, &__p);
  uint64_t v4 = std::string::append(&__p, "biasing-gating-threshold-map");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::getPtreeOptional((uint64_t)a2, (uint64_t)v7);
}

void sub_1B20A6030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::AmFusionEncoderFe::finishInit(quasar::AmFusionEncoderFe *this, quasar::SystemConfig *a2)
{
  quasar::SystemConfig::getModelLoader(a2);
  quasar::SystemConfig::getLmeAssetPath(a2, &__str);
  std::string::operator=((std::string *)((char *)this + 544), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo(a2);
  quasar::SpeechModelInfo::operator=((uint64_t)this + 272, SpeechModelInfo);
  quasar::SystemConfig::getLmeAssetPath(a2, &__str);
  std::string::operator=((std::string *)((char *)this + 544), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  quasar::QuasarG2PFactory::isPronGuesserWordpiece(a2, v5);
}

void sub_1B20A6928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void sub_1B20A69E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  JUMPOUT(0x1B20A69F4);
}

uint64_t quasar::AmFusionEncoderFe::readAndCheckLmeData(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v4 = *a2;
  if (!*a2)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME container ", 14);
      uint64_t v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" is null.", 9);
      goto LABEL_18;
    }
    return 2;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Reading LME container ", 22);
    std::string::size_type v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" for user ", 10);
    int v10 = *((char *)*a2 + 39);
    if (v10 >= 0) {
      uint64_t v11 = (uint64_t)(*a2 + 2);
    }
    else {
      uint64_t v11 = (*a2)[2];
    }
    if (v10 >= 0) {
      uint64_t v12 = *((unsigned __int8 *)*a2 + 39);
    }
    else {
      uint64_t v12 = (*a2)[3];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
    uint64_t v4 = *a2;
  }
  uint64_t v13 = *v4;
  if (!*v4)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME container data ", 19);
      uint64_t v17 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" is null.", 9);
      goto LABEL_18;
    }
    return 2;
  }
  uint64_t v14 = *(unsigned int *)(v13 + 268);
  if (v14 == 2)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream ", 16);
      int v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is null.", 9);
LABEL_18:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
      return 2;
    }
    return 2;
  }
  if ((v14 & 0xFFFFFFFD) == 4) {
    return v14;
  }
  uint64_t v19 = *(unsigned __int8 *)(v13 + 199);
  if ((v19 & 0x80u) == 0) {
    uint64_t v20 = *(unsigned __int8 *)(v13 + 199);
  }
  else {
    uint64_t v20 = *(void *)(v13 + 184);
  }
  uint64_t v21 = *(unsigned __int8 *)(a1 + 439);
  int v22 = (char)v21;
  if ((v21 & 0x80u) != 0) {
    uint64_t v21 = *(void *)(a1 + 424);
  }
  if (v20 != v21) {
    goto LABEL_38;
  }
  if (v22 >= 0) {
    uint64_t v23 = (unsigned __int8 *)(a1 + 416);
  }
  else {
    uint64_t v23 = *(unsigned __int8 **)(a1 + 416);
  }
  if ((v19 & 0x80) != 0)
  {
    if (memcmp(*(const void **)(v13 + 176), v23, *(void *)(v13 + 184)))
    {
LABEL_38:
      if (quasar::gLogLevel >= 2)
      {
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v82 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream ", 16);
        unint64_t v25 = (void *)std::ostream::operator<<();
        unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" has phone set version ", 23);
        int v27 = *(char *)(v13 + 199);
        if (v27 >= 0) {
          uint64_t v28 = v13 + 176;
        }
        else {
          uint64_t v28 = *(void *)(v13 + 176);
        }
        if (v27 >= 0) {
          uint64_t v29 = *(unsigned __int8 *)(v13 + 199);
        }
        else {
          uint64_t v29 = *(void *)(v13 + 184);
        }
        uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
        int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" which is different from model phone set version ", 49);
        int v32 = *(char *)(a1 + 439);
        if (v32 >= 0) {
          uint64_t v33 = a1 + 416;
        }
        else {
          uint64_t v33 = *(void *)(a1 + 416);
        }
        if (v32 >= 0) {
          uint64_t v34 = *(unsigned __int8 *)(a1 + 439);
        }
        else {
          uint64_t v34 = *(void *)(a1 + 424);
        }
        unint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)". This data stream will not be used.", 36);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v82);
      }
      return 5;
    }
  }
  else if (*(unsigned char *)(v13 + 199))
  {
    unint64_t v24 = (unsigned __int8 *)(v13 + 176);
    while (*v24 == *v23)
    {
      ++v24;
      ++v23;
      if (!--v19) {
        goto LABEL_53;
      }
    }
    goto LABEL_38;
  }
LABEL_53:
  if (*(unsigned __int8 *)(v13 + 392) != *(unsigned __int8 *)(a1 + 568))
  {
    if (quasar::gLogLevel < 4) {
      return 5;
    }
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream useWordpiece=", 29);
    unsigned int v59 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" does not match model (model useWordpiece=", 42);
    unint64_t v60 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"). This data stream will not be used.", 37);
LABEL_111:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
    return 5;
  }
  if (!*(unsigned char *)(v13 + 392)
    || *(int *)(v13 + 8) < 16
    || !std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(v13 + 296), (unsigned __int8 *)(a1 + 544)))
  {
    goto LABEL_74;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream assetPath=", 26);
    int v37 = *(char *)(v13 + 319);
    if (v37 >= 0) {
      uint64_t v38 = v13 + 296;
    }
    else {
      uint64_t v38 = *(void *)(v13 + 296);
    }
    if (v37 >= 0) {
      uint64_t v39 = *(unsigned __int8 *)(v13 + 319);
    }
    else {
      uint64_t v39 = *(void *)(v13 + 304);
    }
    int v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v38, v39);
    long long v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" does not match model (lmeAssetPath=", 36);
    int v42 = *(char *)(a1 + 567);
    if (v42 >= 0) {
      uint64_t v43 = a1 + 544;
    }
    else {
      uint64_t v43 = *(void *)(a1 + 544);
    }
    if (v42 >= 0) {
      uint64_t v44 = *(unsigned __int8 *)(a1 + 567);
    }
    else {
      uint64_t v44 = *(void *)(a1 + 552);
    }
    uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v43, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)")", 1);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
  }
  if (!a4)
  {
    if (quasar::gLogLevel < 4) {
      return 5;
    }
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"This data stream will not be used.", 34);
    goto LABEL_111;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Check is disabled! Continuing on the assumption that the LME data is actually compatible", 88);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
  }
LABEL_74:
  uint64_t v46 = *(void *)(v13 + 160);
  if (v46 == -1 || (uint64_t v47 = *(void *)(v13 + 168), v47 == -1))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Bad LME data (empty): stream=", 29);
      uint64_t v61 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", symTableFirstKey=", 19);
      uint64_t v62 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)", symTableLastKey=", 18);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
    }
    return 6;
  }
  if (v47 < v46) {
    goto LABEL_114;
  }
  uint64_t v48 = *(void *)(v13 + 224);
  uint64_t v49 = (*(uint64_t (**)(void, unsigned __int8 *))(**(void **)(v48 + 96) + 112))(*(void *)(v48 + 96), v23);
  if ((v49 & 0x8000000000000000) == 0) {
    v49 += *(void *)(v48 + 120);
  }
  if (v47 != v49 - 1)
  {
LABEL_114:
    if (quasar::gLogLevel >= 1)
    {
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Bad LME data (invalid last key): stream=", 40);
      uint64_t v63 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)", symTableFirstKey=", 19);
      uint64_t v64 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)", symTableLastKey=", 18);
      long long v65 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)", symTable->AvailableKey()=", 27);
      (*(void (**)(void))(**(void **)(*(void *)(v13 + 224) + 96) + 112))(*(void *)(*(void *)(v13 + 224) + 96));
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v82);
    }
    return 6;
  }
  if (v14 == 1)
  {
    if (!*(void *)(a1 + 528) || (int v50 = *(void **)(v13 + 240), v50 == (void *)(v13 + 248)))
    {
LABEL_106:
      if (*(_DWORD *)(v13 + 264) >= *(_DWORD *)(a1 + 536)) {
        return 1;
      }
      if (quasar::gLogLevel >= 4)
      {
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v82 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"G2P model version ", 18);
        uint64_t v58 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" in blob is older than datapack's version ", 42);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
      }
    }
    else
    {
      while (1)
      {
        if (*((char *)v50 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v81, (const std::string::value_type *)v50[4], v50[5]);
        }
        else {
          std::string v81 = *(std::string *)(v50 + 4);
        }
        if (*((char *)v50 + 79) < 0) {
          std::string::__init_copy_ctor_external(&v80, (const std::string::value_type *)v50[7], v50[8]);
        }
        else {
          std::string v80 = *(std::string *)(v50 + 7);
        }
        memset(&v79, 0, sizeof(v79));
        uint64_t v51 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 464, (const void **)&v81.__r_.__value_.__l.__data_);
        if (a1 + 472 == v51) {
          long long v52 = &v81;
        }
        else {
          long long v52 = (std::string *)(v51 + 56);
        }
        std::string::operator=(&v79, v52);
        uint64_t v53 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 512, (const void **)&v79.__r_.__value_.__l.__data_);
        uint64_t v54 = v53;
        if (a1 + 520 == v53)
        {
          if (quasar::gLogLevel < 4) {
            goto LABEL_143;
          }
          long long v97 = 0u;
          long long v98 = 0u;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          long long v82 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
          long long v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Category ", 9);
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v67 = &v81;
          }
          else {
            long long v67 = (std::string *)v81.__r_.__value_.__r.__words[0];
          }
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v81.__r_.__value_.__l.__size_;
          }
          long long v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, size);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" in blob is not supported by datapack.", 38);
          goto LABEL_142;
        }
        if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(v53 + 56), (unsigned __int8 *)&v80))
        {
          break;
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        uint64_t v55 = (void *)v50[1];
        if (v55)
        {
          do
          {
            int v56 = v55;
            uint64_t v55 = (void *)*v55;
          }
          while (v55);
        }
        else
        {
          do
          {
            int v56 = (void *)v50[2];
            BOOL v57 = *v56 == (void)v50;
            int v50 = v56;
          }
          while (!v57);
        }
        int v50 = v56;
        if (v56 == (void *)(v13 + 248)) {
          goto LABEL_106;
        }
      }
      if (quasar::gLogLevel < 4) {
        goto LABEL_143;
      }
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      long long v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Category ", 9);
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v71 = &v81;
      }
      else {
        long long v71 = (std::string *)v81.__r_.__value_.__r.__words[0];
      }
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v72 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v72 = v81.__r_.__value_.__l.__size_;
      }
      long long v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
      long long v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" in blob uses different enumeration type (", 42);
      int v75 = *(char *)(v54 + 79);
      if (v75 >= 0) {
        uint64_t v76 = v54 + 56;
      }
      else {
        uint64_t v76 = *(void *)(v54 + 56);
      }
      if (v75 >= 0) {
        uint64_t v77 = *(unsigned __int8 *)(v54 + 79);
      }
      else {
        uint64_t v77 = *(void *)(v54 + 64);
      }
      long long v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, v76, v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)") in datapack.", 14);
LABEL_142:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
LABEL_143:
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
    }
    return 3;
  }
  return v14;
}

void sub_1B20A752C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::AmFusionEncoderFe::getNumLmeContextEmbeddings(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  if (a2[1] == *a2) {
    return 0;
  }
  uint64_t v7 = a2;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  do
  {
    long long v11 = *(_OWORD *)(v4 + 16 * v9);
    long long v29 = v11;
    if (*((void *)&v11 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
      long long v33 = v11;
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      long long v33 = (unint64_t)v11;
    }
    int v12 = quasar::AmFusionEncoderFe::readAndCheckLmeData(a1, (uint64_t **)&v33, v9, a4);
    if (*((void *)&v29 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
    }
    if ((v12 & 0xFFFFFFFD) == 1)
    {
      uint64_t v13 = *(void *)v29;
      uint64_t v14 = *(std::__shared_weak_count **)(v29 + 8);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v30 = v14;
      uint64_t v15 = a1;
      uint64_t v16 = a4;
      quasar::WordPronCache::getPronCache((quasar::WordPronCache *)(v13 + 88), (uint64_t)&v31);
      uint64_t v17 = v31;
      if (v31 != v32)
      {
        do
        {
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v17 + 11));
          uint64_t v20 = v18 + 1;
          uint64_t v19 = (void *)*v18;
          if ((void *)*v18 != v18 + 1)
          {
            do
            {
              BOOL v21 = quasar::PronChoice::compatibleWithEmbeddingDim(*((_DWORD *)v19 + 8), (uint64_t)(v19 + 5), a3);
              int v22 = (void *)v19[1];
              if (v22)
              {
                do
                {
                  uint64_t v23 = v22;
                  int v22 = (void *)*v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  uint64_t v23 = (void *)v19[2];
                  BOOL v24 = *v23 == (void)v19;
                  uint64_t v19 = v23;
                }
                while (!v24);
              }
              uint64_t v10 = (v10 + v21);
              uint64_t v19 = v23;
            }
            while (v23 != v20);
          }
          unint64_t v25 = (void *)v17[1];
          if (v25)
          {
            do
            {
              unint64_t v26 = (void **)v25;
              unint64_t v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              unint64_t v26 = (void **)v17[2];
              BOOL v24 = *v26 == v17;
              uint64_t v17 = v26;
            }
            while (!v24);
          }
          uint64_t v17 = v26;
        }
        while (v26 != v32);
      }
      std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy((uint64_t)&v31, v32[0]);
      a4 = v16;
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      uint64_t v7 = a2;
      a1 = v15;
    }
    if (*((void *)&v29 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
    }
    ++v9;
    uint64_t v4 = *v7;
  }
  while (v9 < (v7[1] - *v7) >> 4);
  return v10;
}

void sub_1B20A77EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::WordPronCache::getPronCache(quasar::WordPronCache *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  long long v3 = (char *)*((void *)this + 3);
  uint64_t v4 = (char *)this + 32;
  if (v3 != (char *)this + 32)
  {
    long long v5 = (quasar::WordPronCache *)((char *)this + 8);
    do
    {
      quasar::LmePackedWord::unpacked((quasar::LmePackedWord *)(v3 + 32), v5, (uint64_t)v9);
      std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__emplace_unique_key_args<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word>((uint64_t **)a2, (const void **)v9, (uint64_t)v9);
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v13, v13[1]);
      if (v12 < 0) {
        operator delete(__p);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      uint64_t v6 = (char *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (char *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          long long v3 = v7;
        }
        while (!v8);
      }
      long long v3 = v7;
    }
    while (v7 != v4);
  }
}

void sub_1B20A7920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)&a9);
  std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy(v9, *(void **)(v9 + 8));
  _Unwind_Resume(a1);
}

void quasar::AmFusionEncoderFe::getLmeContextEmbeddings(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4, int a5)
{
  uint64_t v5 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v9 = a2;
    unint64_t v11 = 0;
    while (1)
    {
      long long v12 = *(_OWORD *)(v5 + 16 * v11);
      long long v29 = v12;
      if (*((void *)&v12 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
        long long v32 = v12;
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        long long v32 = (unint64_t)v12;
      }
      int v13 = quasar::AmFusionEncoderFe::readAndCheckLmeData(a1, (uint64_t **)&v32, v11, a5);
      if (*((void *)&v29 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
      }
      if ((v13 & 0xFFFFFFFD) == 1)
      {
        uint64_t v14 = *(void *)v29;
        uint64_t v15 = *(std::__shared_weak_count **)(v29 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = a1;
        quasar::WordPronCache::getPronCache((quasar::WordPronCache *)(v14 + 88), (uint64_t)&v30);
        uint64_t v17 = v30;
        if (v30 == v31)
        {
LABEL_27:
          int v27 = 0;
        }
        else
        {
          while (1)
          {
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v17 + 11));
            uint64_t v20 = v18 + 1;
            uint64_t v19 = (void *)*v18;
            if ((void *)*v18 != v18 + 1) {
              break;
            }
LABEL_21:
            unint64_t v25 = (void *)v17[1];
            if (v25)
            {
              do
              {
                unint64_t v26 = (void **)v25;
                unint64_t v25 = (void *)*v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                unint64_t v26 = (void **)v17[2];
                BOOL v24 = *v26 == v17;
                uint64_t v17 = v26;
              }
              while (!v24);
            }
            uint64_t v17 = v26;
            if (v26 == v31) {
              goto LABEL_27;
            }
          }
          while (1)
          {
            if (quasar::PronChoice::pronToEmbeddingVector(*((_DWORD *)v19 + 8), (uint64_t)(v19 + 5), (float *)(*(void *)(a3 + 8) + 4 * *(_DWORD *)(a3 + 24) * *a4), *(_DWORD *)(a3 + 16)))
            {
              int v21 = *a4 + 1;
              *a4 = v21;
              if (v21 >= *(_DWORD *)(a3 + 20)) {
                break;
              }
            }
            int v22 = (void *)v19[1];
            if (v22)
            {
              do
              {
                uint64_t v23 = v22;
                int v22 = (void *)*v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                uint64_t v23 = (void *)v19[2];
                BOOL v24 = *v23 == (void)v19;
                uint64_t v19 = v23;
              }
              while (!v24);
            }
            uint64_t v19 = v23;
            if (v23 == v20) {
              goto LABEL_21;
            }
          }
          int v27 = 1;
        }
        std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy((uint64_t)&v30, v31[0]);
        a1 = v16;
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        uint64_t v9 = a2;
        if (!*((void *)&v29 + 1)) {
          goto LABEL_30;
        }
      }
      else
      {
        int v27 = 4;
        if (!*((void *)&v29 + 1)) {
          goto LABEL_30;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
LABEL_30:
      if ((v27 | 4) == 4)
      {
        ++v11;
        uint64_t v5 = *v9;
        if (v11 < (v9[1] - *v9) >> 4) {
          continue;
        }
      }
      return;
    }
  }
}

void sub_1B20A7B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::AmFusionEncoderFe::createOnlineFeInputImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (*a3)
  {
    long long v48 = 0u;
    *(_OWORD *)uint64_t v47 = 0u;
    int32x2_t v46 = (int32x2_t)&unk_1F0A51768;
    char v49 = 0;
    BOOL v8 = (kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 48);
    uint64_t v7 = *(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 48);
    float v45 = *(float *)(a1 + 572);
    BOOL HasContextualBiasing = kaldi::quasar::CEFusedAcousticEncoder::HasContextualBiasing(v7);
    if (*(unsigned char *)(a4 + 120)) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = HasContextualBiasing;
    }
    if (v10)
    {
      ContextEmbeddingDistd::string::size_type m = kaldi::quasar::CEFusedAcousticEncoder::GetContextEmbeddingDim(*v8);
      int NumLmeContextEmbeddings = quasar::AmFusionEncoderFe::getNumLmeContextEmbeddings(a1, (uint64_t *)(a4 + 72), ContextEmbeddingDim, *(unsigned __int8 *)(a4 + 112));
      uint64_t v13 = *(void *)(a4 + 96);
      if (v13 && *(_DWORD *)(v13 + 16) == ContextEmbeddingDim) {
        NumLmeContextEmbeddings += *(_DWORD *)(v13 + 20);
      }
      uint64_t v14 = *(void *)(a1 + 96);
      if (v14 && *(int *)(v14 + 20) >= 1)
      {
        if (*(_DWORD *)(v14 + 16) == ContextEmbeddingDim) {
          int v15 = *(_DWORD *)(v14 + 20);
        }
        else {
          int v15 = 1;
        }
      }
      else
      {
        int v15 = 1;
      }
      LODWORD(v16) = v15 + NumLmeContextEmbeddings;
      if (quasar::gLogLevel >= 4)
      {
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Total number of context embeddings ", 35);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      ContextEmbeddingMaskDistd::string::size_type m = kaldi::quasar::CEFusedAcousticEncoder::GetContextEmbeddingMaskDim(*v8);
      if ((int)v16 <= ContextEmbeddingMaskDim || ContextEmbeddingMaskDim <= 0) {
        uint64_t v16 = v16;
      }
      else {
        uint64_t v16 = ContextEmbeddingMaskDim;
      }
      kaldi::CuMatrix<float>::Resize(&v46, v16, ContextEmbeddingDim, 1, 0);
      uint64_t v19 = *(void *)(a1 + 96);
      if (v19 && *(int *)(v19 + 20) >= 1 && *(_DWORD *)(v19 + 16) == ContextEmbeddingDim)
      {
        if ((int)v16 < 1)
        {
          int v23 = 0;
        }
        else
        {
          int v20 = 1;
          do
          {
            memcpy((char *)v47[0] + 4 * (int)v48 * (v20 - 1), (const void *)(*(void *)(v19 + 8) + 4 * *(_DWORD *)(v19 + 24) * (v20 - 1)), 4 * (int)ContextEmbeddingDim);
            uint64_t v19 = *(void *)(a1 + 96);
            int v21 = v20 + 1;
            BOOL v22 = v20 < *(_DWORD *)(v19 + 20) && v20 < (int)v16;
            ++v20;
          }
          while (v22);
          int v23 = v21 - 1;
        }
      }
      else
      {
        bzero(v47[0], 4 * (int)ContextEmbeddingDim);
        int v23 = 1;
      }
      int v44 = v23;
      if (v23 < (int)v16)
      {
        quasar::AmFusionEncoderFe::getLmeContextEmbeddings(a1, (uint64_t *)(a4 + 72), (uint64_t)&v46, &v44, *(unsigned __int8 *)(a4 + 112));
        int v23 = v44;
      }
      if (v23 < (int)v16)
      {
        uint64_t v24 = *(void *)(a4 + 96);
        if (v24)
        {
          if (*(_DWORD *)(v24 + 16) == ContextEmbeddingDim)
          {
            if (*(int *)(v24 + 20) >= 1)
            {
              size_t v25 = 4 * (int)ContextEmbeddingDim;
              int v26 = 1;
              do
              {
                memcpy((char *)v47[0] + 4 * (int)v48 * (v23 + v26 - 1), (const void *)(*(void *)(v24 + 8) + 4 * *(_DWORD *)(v24 + 24) * (v26 - 1)), v25);
                uint64_t v24 = *(void *)(a4 + 96);
                int v27 = v26 + 1;
                BOOL v28 = v26 < *(_DWORD *)(v24 + 20) && v23 + v26 < (int)v16;
                ++v26;
              }
              while (v28);
              int v23 = v23 + v27 - 1;
            }
            int v44 = v23;
          }
        }
      }
      if (v23 != v16)
      {
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Error in populating context embeddings. Expected ", 49);
        long long v41 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" embeddings. But only populated ", 32);
        int v42 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" embeddings", 11);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      if (SHIDWORD(v47[1]) < 1)
      {
        if (quasar::gLogLevel >= 4)
        {
          long long v65 = 0u;
          long long v66 = 0u;
          long long v63 = 0u;
          long long v64 = 0u;
          long long v61 = 0u;
          long long v62 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No context embeddings", 21);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
        }
      }
      else
      {
        uint64_t v29 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 600, (const void **)(a4 + 144));
        if (a1 + 608 != v29)
        {
          float v30 = *(double *)(v29 + 56);
          float v45 = v30;
        }
        if (quasar::gLogLevel >= 4)
        {
          long long v65 = 0u;
          long long v66 = 0u;
          long long v63 = 0u;
          long long v64 = 0u;
          long long v61 = 0u;
          long long v62 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Use number of context embeddings: ", 34);
          int v31 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", gating threshold: ", 20);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
        }
        uint64_t v32 = *(void *)(a4 + 128);
        if (v32)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "numContextualBiasingEmbeddings");
          double v43 = (double)(int)v16;
          quasar::SpeechRequestResultData::addAA(v32, (long long *)__p, &v43, 1);
          if (SBYTE7(v51) < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    double v43 = *(double *)a3;
    std::allocate_shared[abi:ne180100]<kaldi::AmFusionEncoderInput,std::allocator<kaldi::AmFusionEncoderInput>,kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,int &,kaldi::CuMatrix<float> &,float &,void>((uint64_t)&v44, (uint64_t *)&v43, (int *)(a1 + 264), (char *)(a1 + 268), a1 + 48, a1 + 64, (void *)(a1 + 80));
  }
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  *(_OWORD *)std::string __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"'", 1);
  uint64_t v36 = *(void *)(a1 + 8);
  uint64_t v35 = a1 + 8;
  uint64_t v34 = v36;
  int v37 = *(char *)(v35 + 23);
  if (v37 >= 0) {
    uint64_t v38 = v35;
  }
  else {
    uint64_t v38 = v34;
  }
  if (v37 >= 0) {
    uint64_t v39 = *(unsigned __int8 *)(v35 + 23);
  }
  else {
    uint64_t v39 = *(void *)(v35 + 8);
  }
  int v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v38, v39);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v40, "' cannot occur at the first stage of feature-extract");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void sub_1B20A81F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

double quasar::OnlineAcousticEncoderFe::registerParams(quasar::OnlineAcousticEncoderFe *this, quasar::SystemConfig *a2)
{
  uint64_t v4 = (char *)this + 168;
  kaldi::nnet1::PdfPriorOptions::Register((uint64_t)this + 168, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v8, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map model into memory (requires aligned models)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v8, (uint64_t)this + 98, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Name of nnet model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v8, (uint64_t)this + 48, (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File for feature transform in front of nnet's main network (in nnet format)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v8, (uint64_t)this + 72, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "no-softmax");
  std::string::basic_string[abi:ne180100]<0>(__p, "No softmax on MLP output (or remove it if found), the pre-softmax activations will be used as log-likelihoods, log-priors will be subtracted");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v8, (uint64_t)this + 96, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "apply-log");
  std::string::basic_string[abi:ne180100]<0>(__p, "Transform MLP output to logscale");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v8, (uint64_t)this + 97, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "use-gpu-id");
  std::string::basic_string[abi:ne180100]<0>(__p, "Unused, kaldi is compiled w/o CUDA");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v8, (uint64_t)this + 100, (uint64_t)__p, 0, 14, 2, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "class-frame-counts-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing vector with frame-counts of pdfs to compute log-priors. This is the same as class-frame-counts, but allows paths that are relative to the json config file (class-frame-counts requires absolute paths). If class-frame-counts is also specified, this param will override it.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v8, (uint64_t)v4, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "strict-batch-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Batch size applied just for this extractor. Ignored if <= 0. Unlike feature-read.batch-size, which is just a hint, this batch size is so strict that even the last batch will be padded to exactly this size with copies of the last frame if the last batch is too small. ");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v8, (uint64_t)this + 104, (uint64_t)__p, 0, 164, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "zero-pad");
  std::string::basic_string[abi:ne180100]<0>(__p, "Zero pad the features, instead of last frame padding, to reach the strict-batch-size requirementvalid only when strict-batch-size is also specified");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v8, (uint64_t)this + 136, (uint64_t)__p, 0, 166, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "append-pad-info");
  std::string::basic_string[abi:ne180100]<0>(__p, "Append the pad info as an additional row in the input matrixThe first element of the appended row is the number of padded rows, which excludes this extra appended rowvalid only when strict-batch-size is also specifiedexpect an additional row appended to the output with the valid output length as the first elementthe padding is removed from the output based on the valid output length");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v8, (uint64_t)this + 137, (uint64_t)__p, 0, 176, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "strict-batch-sizes");
  std::string::basic_string[abi:ne180100]<0>(__p, "Defines an array of 3 sizes - [ModelInterfaceSize, FirstBatchSize, SubsequentBatchSize]ModelInterfaceSize: defines the size of input expected by the modelFirstBatchSize: defines the batch size used for 1st inference, will be padded with zeros                 if less than than ModelInterfaceSizeSubsequentBatchSize: defines the batch size used for the rest of the inferenences, will be                     padded with zeros if less than than ModelInterfaceSize");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v8, (uint64_t)this + 144, (uint64_t)__p, 0, 223, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  *((unsigned char *)this + 98) = 0;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 97) = 0;
  *(void *)&double result = 4294967294;
  *(void *)((char *)this + 100) = 4294967294;
  *((unsigned char *)this + 136) = 0;
  *((unsigned char *)this + 137) = 0;
  return result;
}

void sub_1B20A8738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineAcousticEncoderFe::finishInit(quasar::OnlineAcousticEncoderFe *this, quasar::SystemConfig *a2)
{
  uint64_t ModelLoader = quasar::SystemConfig::getModelLoader(a2);
  if (*((char *)this + 167) < 0)
  {
    if (!*((void *)this + 19)) {
      goto LABEL_10;
    }
  }
  else if (!*((unsigned char *)this + 167))
  {
    goto LABEL_10;
  }
  if (*((_DWORD *)this + 26))
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "cannot set both strict-batch-size & strict-batch-sizes");
    goto LABEL_30;
  }
  kaldi::SplitStringToIntegers<int>((uint64_t)this + 144, ",", 0, (std::vector<unsigned int> *)((char *)this + 112));
  uint64_t v4 = (int *)*((void *)this + 14);
  if (*((void *)this + 15) - (void)v4 != 12)
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "strict-batch-sizes needs 3 sizes");
    goto LABEL_30;
  }
  int v5 = *v4;
  int v6 = v4[1];
  int v7 = v4[2];
  if (v6 > v7) {
    int v7 = v6;
  }
  if (v5 < v7)
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Model input size must be greater than batch sizes");
LABEL_30:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_10:
  quasar::ModelLoader::readAcousticEncoder(ModelLoader, (long long *)this + 3, __p);
  long long v8 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  char v9 = (std::__shared_weak_count *)*((void *)this + 75);
  *((_OWORD *)this + 37) = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
  BOOL v10 = (char *)this + 72;
  uint64_t v11 = *((unsigned __int8 *)this + 95);
  if (*((unsigned char *)this + 98))
  {
    if ((v11 & 0x80) != 0)
    {
      if (!*((void *)this + 10)) {
        goto LABEL_23;
      }
    }
    else if (!*((unsigned char *)this + 95))
    {
      goto LABEL_23;
    }
    fst::FstReadOptions::FstReadOptions(__p, v10, 0, 0, 0);
    LODWORD(v17) = 2;
    kaldi::nnet1::Nnet::ReadMapped((uint64_t)this + 216, (uint64_t)__p);
  }
  if ((v11 & 0x80) != 0) {
    uint64_t v11 = *((void *)this + 10);
  }
  if (v11) {
    kaldi::nnet1::Nnet::Read((uint64_t)this + 216, (uint64_t)v10);
  }
LABEL_23:
  std::allocate_shared[abi:ne180100]<kaldi::nnet1::PdfPrior,std::allocator<kaldi::nnet1::PdfPrior>,kaldi::nnet1::PdfPriorOptions &,void>(__p);
  long long v12 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 26);
  *(_OWORD *)((char *)this + 200) = v12;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
}

void sub_1B20A8A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double quasar::OnlineAcousticEncoderFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v5 = *a2;
  if (!*a2)
  {
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
    int v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"'", 1);
    uint64_t v43 = *(void *)(a1 + 8);
    uint64_t v42 = a1 + 8;
    uint64_t v41 = v43;
    int v44 = *(char *)(v42 + 23);
    if (v44 >= 0) {
      uint64_t v45 = v42;
    }
    else {
      uint64_t v45 = v41;
    }
    if (v44 >= 0) {
      uint64_t v46 = *(unsigned __int8 *)(v42 + 23);
    }
    else {
      uint64_t v46 = *(void *)(v42 + 8);
    }
    uint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v45, v46);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v47, "' cannot occur at the first stage of feature-extract");
    goto LABEL_65;
  }
  if (*(unsigned char *)(a1 + 97) && *(unsigned char *)(a1 + 96))
  {
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v52, "Nonsense option combination : --apply-log=true and --no-softmax=true");
    goto LABEL_65;
  }
  if (*(char *)(a1 + 191) < 0)
  {
    if (!*(void *)(a1 + 176)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 191))
  {
LABEL_8:
    if (*(unsigned __int8 *)(a1 + 96) | *(unsigned __int8 *)(a1 + 97)) {
      goto LABEL_9;
    }
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
    long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"Option --class-frame-counts has to be used together with ", 57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v48, "--no-softmax or --apply-log");
LABEL_65:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v52);
  }
LABEL_9:
  long long v8 = *(char **)(a1 + 112);
  int v7 = (void **)(a1 + 112);
  if (v8 == *(char **)(a1 + 120))
  {
    BOOL v10 = (char **)(a1 + 128);
    char v9 = *(char **)(a1 + 128);
    if (v8 >= v9)
    {
      unint64_t v12 = v9 - v8;
      unint64_t v13 = (v9 - v8) >> 1;
      if (v13 <= 1) {
        unint64_t v13 = 1;
      }
      if (v12 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      long long v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 128, v14);
      long long v16 = *(char **)(a1 + 112);
      long long v17 = *(char **)(a1 + 120);
      char v9 = (char *)&v15[v18];
      _DWORD *v15 = *(_DWORD *)(a1 + 104);
      uint64_t v11 = (char *)(v15 + 1);
      while (v17 != v16)
      {
        int v19 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *--long long v15 = v19;
      }
      *(void *)(a1 + 112) = v15;
      *(void *)(a1 + 120) = v11;
      *(void *)(a1 + 128) = v9;
      if (v16)
      {
        operator delete(v16);
        char v9 = *v10;
      }
    }
    else
    {
      *(_DWORD *)long long v8 = *(_DWORD *)(a1 + 104);
      uint64_t v11 = v8 + 4;
    }
    *(void *)(a1 + 120) = v11;
    if (v11 >= v9)
    {
      long long v21 = (char *)*v7;
      uint64_t v22 = (v11 - (unsigned char *)*v7) >> 2;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 62) {
        goto LABEL_66;
      }
      uint64_t v24 = v9 - v21;
      if (v24 >> 1 > v23) {
        unint64_t v23 = v24 >> 1;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        long long v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 128, v25);
        long long v21 = *(char **)(a1 + 112);
        uint64_t v11 = *(char **)(a1 + 120);
      }
      else
      {
        long long v26 = 0;
      }
      long long v27 = &v26[4 * v22];
      char v9 = &v26[4 * v25];
      *(_DWORD *)long long v27 = *(_DWORD *)(a1 + 104);
      long long v20 = v27 + 4;
      while (v11 != v21)
      {
        int v28 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v27 - 1) = v28;
        v27 -= 4;
      }
      *(void *)(a1 + 112) = v27;
      *(void *)(a1 + 120) = v20;
      *(void *)(a1 + 128) = v9;
      if (v21)
      {
        operator delete(v21);
        char v9 = *v10;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v11 = *(_DWORD *)(a1 + 104);
      long long v20 = v11 + 4;
    }
    *(void *)(a1 + 120) = v20;
    if (v20 < v9)
    {
      *(_DWORD *)long long v20 = *(_DWORD *)(a1 + 104);
      long long v29 = v20 + 4;
LABEL_54:
      *(void *)(a1 + 120) = v29;
      uint64_t v5 = *a2;
      goto LABEL_55;
    }
    long long v30 = (char *)*v7;
    uint64_t v31 = (v20 - (unsigned char *)*v7) >> 2;
    unint64_t v32 = v31 + 1;
    if (!((unint64_t)(v31 + 1) >> 62))
    {
      uint64_t v33 = v9 - v30;
      if (v33 >> 1 > v32) {
        unint64_t v32 = v33 >> 1;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34)
      {
        uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 128, v34);
        long long v30 = *(char **)(a1 + 112);
        long long v20 = *(char **)(a1 + 120);
      }
      else
      {
        uint64_t v35 = 0;
      }
      uint64_t v36 = &v35[4 * v31];
      int v37 = &v35[4 * v34];
      *(_DWORD *)uint64_t v36 = *(_DWORD *)(a1 + 104);
      long long v29 = v36 + 4;
      while (v20 != v30)
      {
        int v38 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v36 - 1) = v38;
        v36 -= 4;
      }
      *(void *)(a1 + 112) = v36;
      *(void *)(a1 + 120) = v29;
      *(void *)(a1 + 128) = v37;
      if (v30) {
        operator delete(v30);
      }
      goto LABEL_54;
    }
LABEL_66:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
LABEL_55:
  uint64_t v50 = a1 + 216;
  uint64_t v51 = v5;
  uint64_t v49 = *(void *)(a1 + 200);
  std::allocate_shared[abi:ne180100]<kaldi::OnlineAcousticEncoderInput,std::allocator<kaldi::OnlineAcousticEncoderInput>,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::quasar::CEAcousticEncoderNet> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,std::vector<int> &,BOOL &,BOOL &,void>(&v51, &v50, (void *)(a1 + 592), (long long *)(a1 + 168), &v49, (char *)(a1 + 97), (char *)(a1 + 96), &v52, a1 + 112, (char *)(a1 + 136), (unsigned __int8 *)(a1 + 137));
  double result = *(double *)&v52;
  *a3 = v52;
  return result;
}

void sub_1B20A8E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

void quasar::OnlineNnetForwardSkipFe::registerParams(quasar::OnlineNnetForwardSkipFe *this, quasar::SystemConfig *a2)
{
  uint64_t v4 = (char *)this + 176;
  kaldi::nnet1::PdfPriorOptions::Register((uint64_t)this + 176, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v7, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map model into memory (requires aligned models)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 108, (uint64_t)__p, 0, 16, 2, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Name of nnet model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 48, (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File for feature transform in front of nnet's main network (in nnet format)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 72, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "skip-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames to be skipped in nnet computation (default 0).");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 96, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "no-softmax");
  std::string::basic_string[abi:ne180100]<0>(__p, "No softmax on MLP output (or remove it if found), the pre-softmax activations will be used as log-likelihoods, log-priors will be subtracted");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 100, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "apply-log");
  std::string::basic_string[abi:ne180100]<0>(__p, "Transform MLP output to logscale");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 101, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "use-gpu-id");
  std::string::basic_string[abi:ne180100]<0>(__p, "Unused, kaldi is compiled w/o CUDA");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 104, (uint64_t)__p, 0, 14, 2, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "class-frame-counts-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing vector with frame-counts of pdfs to compute log-priors. This is the same as class-frame-counts, but allows paths that are relative to the json config file (class-frame-counts requires absolute paths). If class-frame-counts is also specified, this param will override it.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)v4, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "silence-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Name of nnet model file for computing silence posteriors");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 112, (uint64_t)__p, 0, 75, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "skip-across-batch");
  std::string::basic_string[abi:ne180100]<0>(__p, "Make skip-frames deterministic by skipping across batches instead of within batches (default: false).");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 136, (uint64_t)__p, 0, 77, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "strict-batch-size");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 140, (uint64_t)__p, 0, 164, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "zero-pad");
  std::string::basic_string[abi:ne180100]<0>(__p, "Zero pad the features, instead of last frame padding, to reach the strict-batch-size requirementvalid only when strict-batch-size is also specified");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 144, (uint64_t)__p, 0, 166, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "append-pad-info");
  std::string::basic_string[abi:ne180100]<0>(__p, "Append the pad info as an additional row in the input matrixThe first element of the appended row is the number of padded rows, which excludes this extra appended rowvalid only when strict-batch-size is also specified");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 145, (uint64_t)__p, 0, 176, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "default-speaker-code");
  std::string::basic_string[abi:ne180100]<0>(__p, "If the nnet requires speaker code as input and speaker code is not set by request data, the default one will be used as a backup");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 152, (uint64_t)__p, 0, 216, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  *((unsigned char *)this + 108) = 0;
  *((unsigned char *)this + 100) = 0;
  *((unsigned char *)this + 101) = 0;
  *((_DWORD *)this + 26) = -2;
  *((unsigned char *)this + 136) = 0;
  *((_DWORD *)this + 35) = 0;
  *((unsigned char *)this + 144) = 0;
  *((unsigned char *)this + 145) = 0;
  *((_DWORD *)this + ++*(_DWORD *)(result + 24) = 0;
}

void sub_1B20A94CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineNnetForwardSkipFe::finishInit(quasar::OnlineNnetForwardSkipFe *this, quasar::SystemConfig *a2)
{
  uint64_t ModelLoader = (std::string *)quasar::SystemConfig::getModelLoader(a2);
  quasar::ModelLoader::requestEmbeddedMlock(ModelLoader, (unsigned __int8 *)this + 48, __p, 1.0);
  uint64_t v5 = __p[0];
  uint64_t v4 = (std::__shared_weak_count *)__p[1];
  if (quasar::ModelLoader::isParallelLoadingEnabled((uint64_t)ModelLoader, (uint64_t **)this + 6))
  {
    DispatchGroup = quasar::ModelLoader::getDispatchGroup((quasar::ModelLoader *)ModelLoader);
    DispatchQueue = quasar::ModelLoader::getDispatchQueue((quasar::ModelLoader *)ModelLoader);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN6quasar23OnlineNnetForwardSkipFe10finishInitERNS_12SystemConfigE_block_invoke;
    block[3] = &__block_descriptor_tmp_0;
    block[4] = this;
    block[5] = ModelLoader;
    block[6] = v5;
    uint64_t v45 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_group_async(DispatchGroup, DispatchQueue, block);
    char v8 = v45;
    if (v45) {
LABEL_5:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    int v10 = *((unsigned __int8 *)this + 108);
    int v11 = *((unsigned __int8 *)this + 100);
    unsigned __int8 isKeepANEModelLoadedEnabled = quasar::ModelLoader::isKeepANEModelLoadedEnabled((uint64_t)ModelLoader, (uint64_t)this + 48);
    uint64_t v42 = v5;
    uint64_t v43 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    quasar::ModelLoader::readFeedForwardNetwork((uint64_t)ModelLoader, (uint64_t)this + 48, v10 != 0, v11 != 0, 0, isKeepANEModelLoadedEnabled, (uint64_t)&v42, __p);
    long long v13 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    unint64_t v14 = (std::__shared_weak_count *)*((void *)this + 76);
    *(_OWORD *)((char *)this + 600) = v13;
    if (v14)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
    }
    char v8 = v43;
    if (v43) {
      goto LABEL_5;
    }
  }
  char v9 = (char *)this + 72;
  if (*((unsigned char *)this + 108))
  {
    if ((*((unsigned char *)this + 95) & 0x80) != 0)
    {
      if (!*((void *)this + 10)) {
        goto LABEL_24;
      }
    }
    else if (!*((unsigned char *)this + 95))
    {
      goto LABEL_24;
    }
    fst::FstReadOptions::FstReadOptions(__p, v9, 0, 0, 0);
    LODWORD(v26) = 2;
    kaldi::nnet1::Nnet::ReadMapped((uint64_t)this + 224, (uint64_t)__p);
  }
  if ((*((unsigned char *)this + 95) & 0x80) != 0)
  {
    if (!*((void *)this + 10)) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (*((unsigned char *)this + 95)) {
LABEL_23:
  }
    kaldi::nnet1::Nnet::Read((uint64_t)this + 224, (uint64_t)v9);
LABEL_24:
  if (*((char *)this + 135) < 0)
  {
    if (!*((void *)this + 15)) {
      goto LABEL_41;
    }
  }
  else if (!*((unsigned char *)this + 135))
  {
    goto LABEL_41;
  }
  int v40 = 0;
  uint64_t v41 = 0;
  quasar::ModelLoader::readNeuralNetwork((uint64_t)ModelLoader, (uint64_t)this + 112, 0, 0, 1, &v40, __p);
  long long v15 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  long long v16 = (std::__shared_weak_count *)*((void *)this + 78);
  *(_OWORD *)((char *)this + 616) = v15;
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Read model file for computing silence posteriors=", 49);
    int v18 = *((char *)this + 135);
    if (v18 >= 0) {
      int v19 = (char *)this + 112;
    }
    else {
      int v19 = (char *)*((void *)this + 14);
    }
    if (v18 >= 0) {
      uint64_t v20 = *((unsigned __int8 *)this + 135);
    }
    else {
      uint64_t v20 = *((void *)this + 15);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
LABEL_41:
  std::allocate_shared[abi:ne180100]<kaldi::nnet1::PdfPrior,std::allocator<kaldi::nnet1::PdfPrior>,kaldi::nnet1::PdfPriorOptions &,void>(__p);
  long long v21 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 27);
  *((_OWORD *)this + 13) = v21;
  if (v22)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1B20A98A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN6quasar23OnlineNnetForwardSkipFe10finishInitERNS_12SystemConfigE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = a1[5];
  int v4 = *(unsigned __int8 *)(v3 + 108);
  int v5 = *(unsigned __int8 *)(v3 + 100);
  unsigned __int8 isKeepANEModelLoadedEnabled = quasar::ModelLoader::isKeepANEModelLoadedEnabled(v2, v3 + 48);
  int v7 = (std::__shared_weak_count *)a1[7];
  uint64_t v10 = a1[6];
  int v11 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::ModelLoader::readFeedForwardNetwork(v2, v3 + 48, v4 != 0, v5 != 0, 0, isKeepANEModelLoadedEnabled, (uint64_t)&v10, &v12);
  long long v8 = v12;
  long long v12 = 0uLL;
  char v9 = *(std::__shared_weak_count **)(v3 + 608);
  *(_OWORD *)(v3 + 600) = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (*((void *)&v12 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1B20A99E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_48c70_ZTSNSt3__110shared_ptrIN6quasar11ModelLoader20EmbeddedMlockContextEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c70_ZTSNSt3__110shared_ptrIN6quasar11ModelLoader20EmbeddedMlockContextEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void quasar::OnlineNnetForwardSkipFe::createOnlineFeInputImpl(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  if (!*a2)
  {
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v47 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"'", 1);
    uint64_t v33 = *(void *)(a1 + 8);
    uint64_t v32 = a1 + 8;
    uint64_t v31 = v33;
    int v34 = *(char *)(v32 + 23);
    if (v34 >= 0) {
      uint64_t v35 = v32;
    }
    else {
      uint64_t v35 = v31;
    }
    if (v34 >= 0) {
      uint64_t v36 = *(unsigned __int8 *)(v32 + 23);
    }
    else {
      uint64_t v36 = *(void *)(v32 + 8);
    }
    long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v35, v36);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, "' cannot occur at the first stage of feature-extract");
LABEL_55:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v47);
  }
  long long v8 = (unsigned char *)(a1 + 101);
  int v9 = *(unsigned __int8 *)(a1 + 101);
  if (*(unsigned char *)(a1 + 101) && *(unsigned char *)(a1 + 100))
  {
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v47 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v47, "Nonsense option combination : --apply-log=true and --no-softmax=true");
    goto LABEL_55;
  }
  uint64_t v10 = *(const void **)(a1 + 600);
  if (v10
  {
    long long v12 = *(std::__shared_weak_count **)(a1 + 608);
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      int v9 = *v8;
    }
    if (v9)
    {
      uint64_t Component = kaldi::nnet1::Nnet::GetComponent((kaldi::nnet1::Nnet *)(v11 + 1), ((v11[2] - v11[1]) >> 3) - 1);
      if ((*(unsigned int (**)(uint64_t))(*(void *)Component + 24))(Component) != 513)
      {
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v47 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
        unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Used --apply-log=true, but nnet ", 32);
        uint64_t v17 = *(void *)(a1 + 48);
        uint64_t v16 = a1 + 48;
        uint64_t v15 = v17;
        int v18 = *(char *)(v16 + 23);
        if (v18 >= 0) {
          uint64_t v19 = v16;
        }
        else {
          uint64_t v19 = v15;
        }
        if (v18 >= 0) {
          uint64_t v20 = *(unsigned __int8 *)(v16 + 23);
        }
        else {
          uint64_t v20 = *(void *)(v16 + 8);
        }
        long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v19, v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" does not have <softmax> as last component!", 43);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v47);
      }
    }
  }
  else
  {
    long long v12 = 0;
  }
  if (*(char *)(a1 + 199) < 0)
  {
    if (!*(void *)(a1 + 184)) {
      goto LABEL_24;
    }
  }
  else if (!*(unsigned char *)(a1 + 199))
  {
    goto LABEL_24;
  }
  if (!*(unsigned char *)(a1 + 100) && !*v8)
  {
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v47 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Option --class-frame-counts has to be used together with ", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"--no-softmax or --apply-log", 27);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v47);
  }
LABEL_24:
  long long v45 = 0u;
  long long v44 = 0u;
  int32x2_t v43 = (int32x2_t)&unk_1F0A51768;
  char v46 = 0;
  uint64_t v22 = *(int32x2_t **)(a3 + 24);
  if (v22)
  {
    kaldi::CuMatrix<float>::operator=(&v43, v22);
    if (quasar::gLogLevel < 4) {
      goto LABEL_42;
    }
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v47 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Set inference speaker code to: ", 31);
    kaldi::operator<<<float>(v23, (uint64_t)&v43);
    goto LABEL_41;
  }
  if (*(char *)(a1 + 175) < 0)
  {
    if (!*(void *)(a1 + 160)) {
      goto LABEL_42;
    }
  }
  else if (!*(unsigned char *)(a1 + 175))
  {
    goto LABEL_42;
  }
  std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string &,void>((const std::string *)(a1 + 152), &v47);
  kaldi::CuMatrix<float>::Read((uint64_t)&v43, (uint64_t *)v47, 0, 0);
  if (*((void *)&v47 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v47 + 1));
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v47 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Set inference speaker code to be default: ", 42);
    int v25 = *(char *)(a1 + 175);
    if (v25 >= 0) {
      uint64_t v26 = a1 + 152;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 152);
    }
    if (v25 >= 0) {
      uint64_t v27 = *(unsigned __int8 *)(a1 + 175);
    }
    else {
      uint64_t v27 = *(void *)(a1 + 160);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
LABEL_41:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v47);
  }
LABEL_42:
  uint64_t v28 = *a2;
  uint64_t v41 = a1 + 224;
  uint64_t v42 = v28;
  uint64_t v40 = *(void *)(a1 + 208);
  uint64_t v39 = *(void *)(a1 + 616);
  std::allocate_shared[abi:ne180100]<kaldi::OnlineNnetForwardSkippedInput,std::allocator<kaldi::OnlineNnetForwardSkippedInput>,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,int &,BOOL &,BOOL &,kaldi::InferenceNetItf *,BOOL &,int &,BOOL &,kaldi::CuMatrix<float> &,BOOL &,std::shared_ptr<std::queue<kaldi::CuMatrix<float>>> const&,unsigned int const&,void>(&v42, &v41, (void *)(a1 + 600), (long long *)(a1 + 176), &v40, (int *)(a1 + 96), (char *)(a1 + 101), &v47, (char *)(a1 + 100), &v39, (char *)(a1 + 136), (int *)(a1 + 140), (char *)(a1 + 144), (uint64_t)&v43, (char *)(a1 + 145), (void *)(a3 + 40), (int *)(a3 + 116));
  long long v29 = *(_DWORD **)(a3 + 56);
  if (v29) {
    _DWORD *v29 = *(_DWORD *)(a1 + 96);
  }
  *a4 = v47;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v43);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

double quasar::OnlineSpliceFe::registerParams(quasar::OnlineSpliceFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "left-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames of left context");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 44, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "right-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames of right context");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 48, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  *(void *)&double result = 0x400000004;
  *(void *)((char *)this + 44) = 0x400000004;
  return result;
}

void sub_1B20AA0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

double quasar::OnlineSpliceFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, kaldi::OnlineFeatInputItf **a2@<X2>, _OWORD *a3@<X8>)
{
  if (!*a2)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = a1 + 8;
    uint64_t v7 = v9;
    int v10 = *(char *)(v8 + 23);
    if (v10 >= 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v7;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      uint64_t v12 = *(void *)(v8 + 8);
    }
    long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  unint64_t v14 = *a2;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineSpliceInput,std::allocator<kaldi::OnlineSpliceInput>,kaldi::OnlineFeatInputItf *,int &,int &,void>(&v14, (int *)(a1 + 44), (int *)(a1 + 48), v15);
  double result = *(double *)v15;
  *a3 = v15[0];
  return result;
}

void quasar::OnlineStaticTransformFe::registerParams(quasar::OnlineStaticTransformFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File for any linear (or affine) feature transformation");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 48, (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B20AA274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineStaticTransformFe::finishInit(int32x2_t *this, quasar::SystemConfig *a2)
{
}

double quasar::OnlineStaticTransformFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  if (!*a2)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = a1 + 8;
    uint64_t v7 = v9;
    int v10 = *(char *)(v8 + 23);
    if (v10 >= 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v7;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      uint64_t v12 = *(void *)(v8 + 8);
    }
    long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  uint64_t v14 = *a2;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineTransformInput,std::allocator<kaldi::OnlineTransformInput>,kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,void>(&v14, v15);
  double result = *(double *)v15;
  *a3 = v15[0];
  return result;
}

void quasar::OnlineCacheInputFe::registerParams(quasar::OnlineCacheInputFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "cache-data");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, cache all data (e.g. fbank feats)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 44, (uint64_t)__p, 0, 132, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "cache-analytics");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, cache all analytics data");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 45, (uint64_t)__p, 0, 132, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B20AA49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

double quasar::OnlineCacheInputFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v4 = *a2;
  if (!*a2)
  {
    memset(v17, 0, sizeof(v17));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"'", 1);
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v11 = a1 + 8;
    uint64_t v10 = v12;
    int v13 = *(char *)(v11 + 23);
    if (v13 >= 0) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v10;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      uint64_t v15 = *(void *)(v11 + 8);
    }
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v14, v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v17);
  }
  char v6 = (char *)operator new(0xA0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)char v6 = &unk_1F0A5E9D0;
  __int16 v7 = *(_WORD *)(a1 + 44);
  *((void *)v6 + 3) = &unk_1F0A47960;
  *((void *)v6 + 4) = v4;
  *((void *)v6 + 5) = 0;
  *((void *)v6 + 6) = 0;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 8) = 850045863;
  double result = 0.0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *((_WORD *)v6 + --*(_DWORD *)(a9 + 76) = v7;
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

uint64_t quasar::OnlineComputeAheadInputFe::registerParams(quasar::OnlineComputeAheadInputFe *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v9, "max-queued-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max number of frames to compute ahead. Use this to limit memory. Note this is not a strict limit: If we are at or above the limit, we will wait to fetch the next batch. If we are under the limit, we will fetch the next batch, which may cause us to exceed the limit. Values <= 0: no limit Value = 1 (default): compute ahead only 1 batch");
  uint64_t v4 = (int *)((char *)this + 44);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v9, (uint64_t)v4, (uint64_t)__p, 0, 199, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  uint64_t result = QuasarC_getSpeechRecognizerDisableOverBuffer();
  if (result) {
    int v6 = 1;
  }
  else {
    int v6 = 250;
  }
  *uint64_t v4 = v6;
  return result;
}

void sub_1B20AA6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

double quasar::OnlineComputeAheadInputFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  if (!*a2)
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"'", 1);
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v11 = a1 + 8;
    uint64_t v10 = v12;
    int v13 = *(char *)(v11 + 23);
    if (v13 >= 0) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v10;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      uint64_t v15 = *(void *)(v11 + 8);
    }
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v14, v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v18);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Creating ComputeAheadFeatInput with maxQueuedFrames=", 52);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v18);
  }
  int v17 = 16;
  std::allocate_shared[abi:ne180100]<quasar::ComputeAheadFeatInput,std::allocator<quasar::ComputeAheadFeatInput>,std::shared_ptr<kaldi::OnlineFeatInputItf> &,BOOL const&,int,int &,void>((uint64_t)a2, (unsigned __int8 *)(a3 + 16), &v17, (unsigned int *)(a1 + 44), &v18);
  double result = *(double *)&v18;
  *a4 = v18;
  return result;
}

void sub_1B20AA870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::OnlineCmnFe::~OnlineCmnFe(void **this)
{
  *this = &unk_1F0A51D30;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A51D30;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineCmvnFe::~OnlineCmvnFe(void **this)
{
  *this = &unk_1F0A522F0;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A522F0;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineDeltaFe::~OnlineDeltaFe(void **this)
{
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineFbankFe::~OnlineFbankFe(quasar::OnlineFbankFe *this)
{
  *(void *)this = &unk_1F0A525C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  kaldi::FbankOptions::~FbankOptions((void **)this + 6);
  *(void *)this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A525C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  kaldi::FbankOptions::~FbankOptions((void **)this + 6);
  *(void *)this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineSimpleWaveformFe::~OnlineSimpleWaveformFe(void **this)
{
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineFbankWithPitchFe::~OnlineFbankWithPitchFe(quasar::OnlineFbankWithPitchFe *this)
{
  *(void *)this = &unk_1F0A56038;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  *(void *)this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A56038;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  *(void *)this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineFbankWithAudioAnalyticsFe::~OnlineFbankWithAudioAnalyticsFe(quasar::OnlineFbankWithAudioAnalyticsFe *this)
{
  *(void *)this = &unk_1F0A581F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  kaldi::FbankOptions::~FbankOptions((void **)this + 6);
  *(void *)this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F0A581F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  kaldi::FbankOptions::~FbankOptions((void **)this + 6);
  *(void *)this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineLdaFe::~OnlineLdaFe(void **this)
{
  *this = &unk_1F0A51D70;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 10));
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A51D70;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 10));
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineMfccFe::~OnlineMfccFe(quasar::OnlineMfccFe *this)
{
  *(void *)this = &unk_1F0A52330;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  *(void *)this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A52330;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  *(void *)this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineNnetForwardFe::~OnlineNnetForwardFe(quasar::OnlineNnetForwardFe *this)
{
  quasar::OnlineNnetForwardFe::~OnlineNnetForwardFe(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void *v5;

  *(void *)this = &unk_1F0A54940;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 82);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  kaldi::nnet1::Nnet::~Nnet((quasar::OnlineNnetForwardFe *)((char *)this + 256));
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  char v5 = (void *)*((void *)this + 18);
  if (v5)
  {
    *((void *)this + 1quasar::readMatrixFile((uint64_t)&this[6], this + 9) = v5;
    operator delete(v5);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  *(void *)this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void quasar::SpeechActivityDetectorFe::~SpeechActivityDetectorFe(void **this)
{
  *this = &unk_1F0A1C9E0;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[7];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *this = &unk_1F0A1C9E0;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[7];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::AmFusionEncoderFe::~AmFusionEncoderFe(quasar::AmFusionEncoderFe *this)
{
  quasar::AmFusionEncoderFe::~AmFusionEncoderFe(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  *(void *)this = &unk_1F0A539A0;
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  if (*((char *)this + 599) < 0) {
    operator delete(*((void **)this + 72));
  }
  if (*((char *)this + 567) < 0) {
    operator delete(*((void **)this + 68));
  }
  quasar::SpeechModelInfo::~SpeechModelInfo((quasar::AmFusionEncoderFe *)((char *)this + 272));
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  char v5 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void quasar::OnlineAcousticEncoderFe::~OnlineAcousticEncoderFe(quasar::OnlineAcousticEncoderFe *this)
{
  quasar::OnlineAcousticEncoderFe::~OnlineAcousticEncoderFe(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;

  *(void *)this = &unk_1F0A569E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  kaldi::nnet1::Nnet::~Nnet((quasar::OnlineAcousticEncoderFe *)((char *)this + 216));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  uint64_t v4 = (void *)*((void *)this + 14);
  if (v4)
  {
    *((void *)this + 15) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  *(void *)this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void quasar::OnlineNnetForwardSkipFe::~OnlineNnetForwardSkipFe(quasar::OnlineNnetForwardSkipFe *this)
{
  quasar::OnlineNnetForwardSkipFe::~OnlineNnetForwardSkipFe(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1F0A56A28;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 632);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 78);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 76);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  kaldi::nnet1::Nnet::~Nnet((quasar::OnlineNnetForwardSkipFe *)((char *)this + 224));
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  *(void *)this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void quasar::OnlineSpliceFe::~OnlineSpliceFe(void **this)
{
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineStaticTransformFe::~OnlineStaticTransformFe(void **this)
{
  *this = &unk_1F0A56A68;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 9));
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A56A68;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 9));
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineCacheInputFe::~OnlineCacheInputFe(void **this)
{
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineComputeAheadInputFe::~OnlineComputeAheadInputFe(void **this)
{
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineSubsampleFe::~OnlineSubsampleFe(void **this)
{
  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A53370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1B3EA8670);
}

kaldi::FbankOptions *kaldi::FbankOptions::FbankOptions(kaldi::FbankOptions *this)
{
  *(void *)this = &unk_1F0A472F8;
  *(_OWORD *)((char *)this + 8) = xmmword_1B255FC70;
  *((_DWORD *)this + 6) = 1064849900;
  *((unsigned char *)this + 28) = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 4, "povey");
  *((_WORD *)this + 28) = 257;
  *(void *)((char *)this + 60) = 0x17BF800000;
  *(_OWORD *)((char *)this + 68) = xmmword_1B257A960;
  *((_WORD *)this + 42) = 0;
  *((unsigned char *)this + 88) = 0;
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + ++*(_DWORD *)(result + 24) = 16842753;
  return this;
}

kaldi::FbankWithPitchOptions *kaldi::FbankWithPitchOptions::FbankWithPitchOptions(kaldi::FbankWithPitchOptions *this)
{
  *(_OWORD *)this = xmmword_1B255FC70;
  *((_DWORD *)this + 4) = 1064849900;
  *((unsigned char *)this + 20) = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 3, "povey");
  *((_WORD *)this + ++*(_DWORD *)(result + 24) = 257;
  *(void *)((char *)this + 52) = 0x17BF800000;
  *(_OWORD *)((char *)this + 60) = xmmword_1B257A960;
  *((_WORD *)this + 38) = 0;
  *((_OWORD *)this + 5) = xmmword_1B255F390;
  *((_OWORD *)this + 6) = xmmword_1B255F3A0;
  *((_OWORD *)this + 7) = xmmword_1B255F3B0;
  *((void *)this + 16) = 0x500000001;
  *((void *)this + 17) = 0;
  *((unsigned char *)this + 144) = 0;
  *((_DWORD *)this + 37) = 500;
  *((_WORD *)this + --*(_DWORD *)(a9 + 76) = 256;
  *(_OWORD *)((char *)this + 156) = xmmword_1B258D510;
  *(void *)((char *)this + 172) = 0x3BA3D70A42C80000;
  *(_OWORD *)((char *)this + 180) = xmmword_1B258D520;
  *((_DWORD *)this + 4quasar::readMatrixFile((uint64_t)&this[6], this + 9) = 65793;
  *((unsigned char *)this + 200) = 0;
  *((unsigned char *)this + 204) = 0;
  *((_DWORD *)this + 52) = 0;
  *((_DWORD *)this + 53) = 16842753;
  return this;
}

double kaldi::FbankWithAudioAnalyticsOptions::FbankWithAudioAnalyticsOptions(kaldi::FbankWithAudioAnalyticsOptions *this)
{
  uint64_t v1 = kaldi::FbankOptions::FbankOptions(this);
  *(void *)uint64_t v1 = &unk_1F0A48330;
  *(_OWORD *)((char *)v1 + 100) = xmmword_1B255F390;
  *(_OWORD *)((char *)v1 + 116) = xmmword_1B255F3A0;
  *(_OWORD *)((char *)v1 + 132) = xmmword_1B255F3B0;
  *(void *)((char *)v1 + 148) = 0x500000001;
  *(void *)((char *)v1 + 156) = 0;
  *((unsigned char *)v1 + 164) = 0;
  *((_DWORD *)v1 + 42) = 500;
  *((_WORD *)v1 + 86) = 256;
  *((_DWORD *)v1 + 44) = -1;
  *(_OWORD *)((char *)v1 + 180) = xmmword_1B258D510;
  *((_DWORD *)v1 + 50) = 1000593162;
  *(_OWORD *)((char *)v1 + 204) = xmmword_1B258D520;
  double result = 7.7485972e-304;
  *(void *)((char *)v1 + 220) = 0x101010000010101;
  *((unsigned char *)v1 + 228) = 0;
  return result;
}

void kaldi::FbankWithAudioAnalyticsOptions::~FbankWithAudioAnalyticsOptions(void **this)
{
  kaldi::FbankOptions::~FbankOptions(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::PitchExtractionOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "sample-frequency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Waveform data sample frequency (must match the waveform file, if specified there)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "frame-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame length in milliseconds");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "frame-shift");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame shift in milliseconds");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "preemphasis-coefficient");
  std::string::basic_string[abi:ne180100]<0>(__p, "Coefficient for use in signal preemphasis (deprecated)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-f0");
  std::string::basic_string[abi:ne180100]<0>(__p, "min. F0 to search for (Hz)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-f0");
  std::string::basic_string[abi:ne180100]<0>(__p, "max. F0 to search for (Hz)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 20, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "soft-min-f0");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minimum f0, applied in soft way, must not exceed min-f0");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 24, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "penalty-factor");
  std::string::basic_string[abi:ne180100]<0>(__p, "cost factor for FO change.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 28, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lowpass-cutoff");
  std::string::basic_string[abi:ne180100]<0>(__p, "cutoff frequency for LowPass filter (Hz) ");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 32, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "resample-frequency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frequency that we down-sample the signal to.  Must be more than twice lowpass-cutoff");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 36, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "Smallest relative change in pitch that our algorithm measures");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 40, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nccf-ballast");
  std::string::basic_string[abi:ne180100]<0>(__p, "Increasing this factor reduces NCCF for quiet frames");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 44, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nccf-ballast-online");
  std::string::basic_string[abi:ne180100]<0>(__p, "This is useful mainly for debug; it affects how the NCCF ballast is computed.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 72, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lowpass-filter-width");
  std::string::basic_string[abi:ne180100]<0>(__p, "Integer that determines filter width of lowpass filter, more gives sharper filter");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 48, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "upsample-filter-width");
  std::string::basic_string[abi:ne180100]<0>(__p, "Integer that determines filter width when upsampling NCCF");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 52, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "frames-per-chunk");
  std::string::basic_string[abi:ne180100]<0>(__p, "Only relevant for offline pitch extraction (e.g. compute-kaldi-pitch-feats), you can set it to a small nonzero value, such as 10, for better feature compatibility with online decoding (affects energy normalization in the algorithm)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 60, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "simulate-first-pass-online");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, compute-kaldi-pitch-feats will output features that correspond to what an online decoder would see in the first pass of decoding-- not the final version of the features, which is the default.  Relevant if --frames-per-chunk > 0");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 64, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "recompute-frame");
  std::string::basic_string[abi:ne180100]<0>(__p, "Only relevant for online pitch extraction, or for compatibility with online pitch extraction.  A non-critical parameter; the frame at which we recompute some of the forward pointers, after revising our estimate of the signal energy."
    "  Relevant if--frames-per-chunk > 0");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 68, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-frames-latency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of frames of latency that we allow pitch tracking to introduce into the feature processing (affects output only if --frames-per-chunk > 0 and --simulate-first-pass-online=true");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 56, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "snip-edges");
  std::string::basic_string[abi:ne180100]<0>(__p, "If this is set to false, the incomplete frames near the ending edge won't be snipped, so that the number of frames is the file size divided by the frame-shift. This makes different types of features give the same number of frames.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 73, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B20AC46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ProcessPitchOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "pitch-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for the final normalized log-pitch value");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "pov-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for final POV (probability of voicing) feature");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "pov-offset");
  std::string::basic_string[abi:ne180100]<0>(__p, "This can be used to add an offset to the POV feature. Intended for use in online decoding as a substitute for  CMN.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-pitch-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Term to scale the final delta log-pitch feature");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "delta2-pitch-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Term to scale the final 2nd-order log-pitch feature");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-pitch-noise-stddev");
  std::string::basic_string[abi:ne180100]<0>(__p, "Standard deviation for noise we add to the delta log-pitch (before scaling); should be about the same as delta-pitch"
    " option to pitch creation.  The purpose is to get rid of peaks in the delta-pitch caused by discretization of pitch values.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 20, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "normalization-left-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Left-context (in frames) for moving window normalization");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 24, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "normalization-right-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Right-context (in frames) for moving window normalization");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 28, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames on each side of central frame, to use for delta window.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 32, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "delay");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames by which the pitch information is delayed.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 36, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "add-pov-feature");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, the warped NCCF is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 40, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "add-normalized-log-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, the log-pitch with POV-weighted mean subtraction over 1.5 second window is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 41, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "add-delta-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, time derivative of log-pitch is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 42, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "add-delta2-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, 2nd order time derivative of log-pitch is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 43, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "add-raw-log-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, log(pitch) is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 44, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B20ACC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ProcessAudioAnalyticsOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "pitch-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for the final normalized log-pitch value");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "pov-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for final POV (probability of voicing) feature");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "pov-offset");
  std::string::basic_string[abi:ne180100]<0>(__p, "This can be used to add an offset to the POV feature. Intended for use in online decoding as a substitute for  CMN.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-pitch-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Term to scale the final delta log-pitch feature");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-pitch-noise-stddev");
  std::string::basic_string[abi:ne180100]<0>(__p, "Standard deviation for noise we add to the delta log-pitch (before scaling); should be about the same as delta-pitch"
    " option to pitch creation.  The purpose is to get rid of peaks in the delta-pitch caused by discretization of pitch values.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 20, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "normalization-left-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Left-context (in frames) for moving window normalization");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 24, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "normalization-right-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Right-context (in frames) for moving window normalization");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 28, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames on each side of central frame, to use for delta window.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 32, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "delay");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames by which the pitch information is delayed.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 36, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "add-pov-feature");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, the warped NCCF is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 40, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "add-normalized-log-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, the log-pitch with POV-weighted mean subtraction over 1.5 second window is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 41, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "add-delta-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, time derivative of log-pitch is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 42, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "add-raw-log-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, log(pitch) is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 44, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "add-pitch-period");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, pitch period is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 45, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "add-pov");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, probability of voicing is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 46, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "add-max-amplitude");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, max amplitude is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 47, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B20AD440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__emplace_unique_key_args<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word>(uint64_t **a1, const void **a2, uint64_t a3)
{
  char v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  int v6 = *v5;
  if (!*v5)
  {
    char v7 = v5;
    std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__construct_node<quasar::LmeDataFactoryBase::Word>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    int v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_OWORD *std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__construct_node<quasar::LmeDataFactoryBase::Word>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  double result = operator new(0x70uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  result[2] = *(_OWORD *)a2;
  *((void *)result + 6) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)((char *)result + 56) = *(_OWORD *)(a2 + 24);
  *((void *)result + quasar::readMatrixFile((uint64_t)&this[6], this + 9) = *(void *)(a2 + 40);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((_DWORD *)result + 20) = *(_DWORD *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  char v7 = (void *)(a2 + 64);
  *((void *)result + 11) = *(void *)(a2 + 56);
  *((void *)result + 12) = v8;
  uint64_t v10 = (char *)(result + 6);
  *((void *)result + 13) = v9;
  if (v9)
  {
    *(void *)(v8 + 16) = v10;
    *(void *)(a2 + 56) = v7;
    *char v7 = 0;
    *(void *)(a2 + 72) = 0;
  }
  else
  {
    *((void *)result + 11) = v10;
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<quasar::LmeDataFactoryBase::Word,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<quasar::LmeDataFactoryBase::Word,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(a1 + 56, *(char **)(a1 + 64));
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy(a1, *a2);
    std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<quasar::LmeDataFactoryBase::Word,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineSubsampleFe,std::allocator<kaldi::OnlineSubsampleFe>,kaldi::OnlineFeatInputItf *,int &,void>@<X0>(kaldi::OnlineFeatInputItf **a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  int v6 = operator new(0x30uLL);
  double result = std::__shared_ptr_emplace<kaldi::OnlineSubsampleFe>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,std::allocator<kaldi::OnlineSubsampleFe>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B20ADB88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineSubsampleFe>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,std::allocator<kaldi::OnlineSubsampleFe>,0>(void *a1, kaldi::OnlineFeatInputItf **a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EB58;
  kaldi::OnlineSubsampleFe::OnlineSubsampleFe((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_1B20ADBEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineSubsampleFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EB58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineSubsampleFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EB58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineSubsampleFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineCmnFe,std::allocator<quasar::OnlineCmnFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x98uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineCmnFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineCmnFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20ADCE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineCmnFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineCmnFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F8B0;
  quasar::OnlineCmnFe::OnlineCmnFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B20ADD40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineCmnFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F8B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineCmnFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F8B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineCmnFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineCmvnFe,std::allocator<quasar::OnlineCmvnFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x98uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineCmvnFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineCmvnFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20ADE38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineCmvnFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineCmvnFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FA38;
  quasar::OnlineCmvnFe::OnlineCmvnFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B20ADE94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineCmvnFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FA38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineCmvnFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FA38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineCmvnFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineDeltaFe,std::allocator<quasar::OnlineDeltaFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x50uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineDeltaFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDeltaFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20ADF8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineDeltaFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDeltaFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FB88;
  quasar::FeatureExtractor::FeatureExtractor((uint64_t)(a1 + 3), a2);
  a1[3] = &unk_1F0A52580;
  *(void *)((char *)a1 + 68) = 0x200000002;
  return a1;
}

void sub_1B20AE00C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineDeltaFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FB88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineDeltaFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FB88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDeltaFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineFbankFe,std::allocator<quasar::OnlineFbankFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD8uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineFbankFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineFbankFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20AE104(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineFbankFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineFbankFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FBC0;
  quasar::OnlineFbankFe::OnlineFbankFe(a1 + 3, a2);
  return a1;
}

void sub_1B20AE160(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineFbankFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FBC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineFbankFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FBC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineFbankFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineFbankWithPitchFe,std::allocator<quasar::OnlineFbankWithPitchFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x138uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineFbankWithPitchFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineFbankWithPitchFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20AE258(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineFbankWithPitchFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineFbankWithPitchFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60FE0;
  quasar::OnlineFbankWithPitchFe::OnlineFbankWithPitchFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B20AE2B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineFbankWithPitchFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60FE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineFbankWithPitchFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60FE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineFbankWithPitchFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineLdaFe,std::allocator<quasar::OnlineLdaFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x90uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineLdaFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLdaFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20AE3AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineLdaFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLdaFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F8E8;
  quasar::OnlineLdaFe::OnlineLdaFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B20AE408(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLdaFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F8E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLdaFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F8E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLdaFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineMfccFe,std::allocator<quasar::OnlineMfccFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xC0uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineMfccFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineMfccFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20AE500(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineMfccFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineMfccFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FA70;
  quasar::OnlineMfccFe::OnlineMfccFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B20AE55C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineMfccFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FA70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineMfccFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FA70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineMfccFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void std::allocate_shared[abi:ne180100]<quasar::OnlineNnetForwardFe,std::allocator<quasar::OnlineNnetForwardFe>,std::string const&,void>(uint64_t a1, long long *a2)
{
  uint64_t v3 = operator new(0x2B0uLL);
  std::__shared_ptr_emplace<quasar::OnlineNnetForwardFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineNnetForwardFe>,0>(v3, a2);
}

void sub_1B20AE654(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineNnetForwardFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineNnetForwardFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60988;
  quasar::OnlineNnetForwardFe::OnlineNnetForwardFe(a1 + 3, a2);
}

void sub_1B20AE6B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineNnetForwardFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineNnetForwardFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60988;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineNnetForwardFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void *std::allocate_shared[abi:ne180100]<quasar::AmFusionEncoderFe,std::allocator<quasar::AmFusionEncoderFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x288uLL);
  double result = std::__shared_ptr_emplace<quasar::AmFusionEncoderFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::AmFusionEncoderFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20AE7A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::AmFusionEncoderFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::AmFusionEncoderFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A602C0;
  quasar::AmFusionEncoderFe::AmFusionEncoderFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B20AE804(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::AmFusionEncoderFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A602C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::AmFusionEncoderFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A602C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::AmFusionEncoderFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void *std::allocate_shared[abi:ne180100]<quasar::SpeechActivityDetectorFe,std::allocator<quasar::SpeechActivityDetectorFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xA0uLL);
  double result = std::__shared_ptr_emplace<quasar::SpeechActivityDetectorFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SpeechActivityDetectorFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20AE8FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SpeechActivityDetectorFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SpeechActivityDetectorFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A1D480;
  quasar::SpeechActivityDetectorFe::SpeechActivityDetectorFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B20AE958(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SpeechActivityDetectorFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SpeechActivityDetectorFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::SpeechActivityDetectorFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void std::allocate_shared[abi:ne180100]<quasar::OnlineAcousticEncoderFe,std::allocator<quasar::OnlineAcousticEncoderFe>,std::string const&,void>(uint64_t a1, long long *a2)
{
  uint64_t v3 = operator new(0x278uLL);
  std::__shared_ptr_emplace<quasar::OnlineAcousticEncoderFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAcousticEncoderFe>,0>(v3, a2);
}

void sub_1B20AEA50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineAcousticEncoderFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAcousticEncoderFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61360;
  quasar::OnlineAcousticEncoderFe::OnlineAcousticEncoderFe(a1 + 3, a2);
}

void sub_1B20AEAAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineAcousticEncoderFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineAcousticEncoderFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineAcousticEncoderFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void std::allocate_shared[abi:ne180100]<quasar::OnlineNnetForwardSkipFe,std::allocator<quasar::OnlineNnetForwardSkipFe>,std::string const&,void>(uint64_t a1, long long *a2)
{
  uint64_t v3 = operator new(0x2C0uLL);
  std::__shared_ptr_emplace<quasar::OnlineNnetForwardSkipFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineNnetForwardSkipFe>,0>(v3, a2);
}

void sub_1B20AEBA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineNnetForwardSkipFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineNnetForwardSkipFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61398;
  quasar::OnlineNnetForwardSkipFe::OnlineNnetForwardSkipFe(a1 + 3, a2);
}

void sub_1B20AEC00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineNnetForwardSkipFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineNnetForwardSkipFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineNnetForwardSkipFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineSpliceFe,std::allocator<quasar::OnlineSpliceFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x50uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineSpliceFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSpliceFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20AECF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineSpliceFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSpliceFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FD48;
  quasar::FeatureExtractor::FeatureExtractor((uint64_t)(a1 + 3), a2);
  a1[3] = &unk_1F0A52968;
  return a1;
}

void sub_1B20AED70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineSpliceFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FD48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineSpliceFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FD48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineSpliceFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineSubsampleFe,std::allocator<quasar::OnlineSubsampleFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x48uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineSubsampleFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSubsampleFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20AEE68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineSubsampleFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSubsampleFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60368;
  quasar::FeatureExtractor::FeatureExtractor((uint64_t)(a1 + 3), a2);
  a1[3] = &unk_1F0A53B60;
  return a1;
}

void sub_1B20AEEE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineSubsampleFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineSubsampleFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineSubsampleFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineStaticTransformFe,std::allocator<quasar::OnlineStaticTransformFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x88uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineStaticTransformFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineStaticTransformFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20AEFD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineStaticTransformFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineStaticTransformFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A613D0;
  quasar::OnlineStaticTransformFe::OnlineStaticTransformFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B20AF034(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineStaticTransformFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A613D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineStaticTransformFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A613D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineStaticTransformFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

uint64_t std::allocate_shared[abi:ne180100]<quasar::OnlineCacheInputFe,std::allocator<quasar::OnlineCacheInputFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::OnlineCacheInputFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineCacheInputFe>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1B20AF12C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineCacheInputFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineCacheInputFe>,0>(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F0A605D0;
  quasar::FeatureExtractor::FeatureExtractor(a1 + 24, a2);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = &unk_1F0A53FB0;
  *(_WORD *)(a1 + 68) = 257;
  return a1;
}

void sub_1B20AF1AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineComputeAheadInputFe,std::allocator<quasar::OnlineComputeAheadInputFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::OnlineComputeAheadInputFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineComputeAheadInputFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20AF208(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineComputeAheadInputFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineComputeAheadInputFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61788;
  quasar::FeatureExtractor::FeatureExtractor((uint64_t)(a1 + 3), a2);
  a1[3] = &unk_1F0A57048;
  return a1;
}

void sub_1B20AF280(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineComputeAheadInputFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineComputeAheadInputFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineComputeAheadInputFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineFbankWithAudioAnalyticsFe,std::allocator<quasar::OnlineFbankWithAudioAnalyticsFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x168uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::OnlineFbankWithAudioAnalyticsFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineFbankWithAudioAnalyticsFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20AF378(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineFbankWithAudioAnalyticsFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineFbankWithAudioAnalyticsFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61DE0;
  quasar::OnlineFbankWithAudioAnalyticsFe::OnlineFbankWithAudioAnalyticsFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B20AF3D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineFbankWithAudioAnalyticsFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61DE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineFbankWithAudioAnalyticsFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61DE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineFbankWithAudioAnalyticsFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineAppendFe,std::allocator<quasar::OnlineAppendFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::OnlineAppendFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAppendFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20AF4CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineAppendFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAppendFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FD10;
  quasar::OnlineAppendFe::OnlineAppendFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B20AF528(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineAppendFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FD10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineAppendFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FD10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineAppendFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineSimpleWaveformFe,std::allocator<quasar::OnlineSimpleWaveformFe>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::OnlineSimpleWaveformFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSimpleWaveformFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20AF620(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineSimpleWaveformFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSimpleWaveformFe>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61050;
  quasar::FeatureExtractor::FeatureExtractor((uint64_t)(a1 + 3), a2);
  a1[3] = &unk_1F0A56140;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)((char *)a1 + 68) = _D0;
  *(void *)((char *)a1 + --*(_DWORD *)(a9 + 76) = 0xA4579F000;
  return a1;
}

void sub_1B20AF6B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineSimpleWaveformFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineSimpleWaveformFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineSimpleWaveformFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineCmnInput,std::allocator<kaldi::OnlineCmnInput>,kaldi::OnlineFeatInputItf *,int &,int &,kaldi::Matrix<float> *,int &,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, int *a3@<X3>, uint64_t *a4@<X4>, int *a5@<X5>, void *a6@<X8>)
{
  uint64_t v12 = operator new(0xB8uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineCmnInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,int &,kaldi::Matrix<float> *,int &,std::allocator<kaldi::OnlineCmnInput>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1B20AF7D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineCmnInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,int &,kaldi::Matrix<float> *,int &,std::allocator<kaldi::OnlineCmnInput>,0>(void *a1, uint64_t *a2, int *a3, int *a4, uint64_t *a5, int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E8B8;
  kaldi::OnlineCmvnInput::OnlineCmvnInput((uint64_t)(a1 + 3), *a2, *a3, *a4, 0, *a5, *a6);
  a1[3] = &unk_1F0A476B0;
  return a1;
}

void sub_1B20AF86C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineCmnInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E8B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineCmnInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E8B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineCmnInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t kaldi::OnlineCmvnInput::OnlineCmvnInput(uint64_t a1, uint64_t a2, int a3, int a4, char a5, uint64_t a6, int a7)
{
  *(void *)a1 = &unk_1F0A47828;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = a5;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  kaldi::Matrix<float>::Matrix(a1 + 32, (a3 + 1), v12, 0, 0);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  kaldi::Vector<double>::Resize((void **)(a1 + 88), v13, 0);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  kaldi::Vector<double>::Resize((void **)(a1 + 112), v14, 0);
  *(void *)(a1 + 136) = a6;
  *(void *)(a1 + 144) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 152) = a7;
  if (a6 && kaldi::MatrixBase<float>::NumRows(a6))
  {
    kaldi::MatrixBase<float>::NumCols(*(void *)(a1 + 136));
    int v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
    uint64_t v16 = *(void *)(a1 + 136);
    int v17 = *(_DWORD *)(v16 + 12);
    *(double *)(a1 + 144) = *(float *)(*(void *)v16 + 4 * v15);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v23, v16, 0, v17, 0, v15);
    kaldi::Matrix<double>::Matrix<float>(v26, &v23, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
    int v18 = *(_DWORD *)(a1 + 152);
    double v19 = *(double *)(a1 + 144);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    long long v23 = (const double *)v26[0];
    LODWORD(v++*(_DWORD *)(result + 24) = kaldi::MatrixBase<float>::NumCols((uint64_t)v26);
    kaldi::VectorBase<double>::AddVec<double>(a1 + 88, &v23, (double)v18 / v19);
    int v20 = *(_DWORD *)(a1 + 152);
    double v21 = *(double *)(a1 + 144);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    long long v23 = (const double *)(v26[0] + 8 * v27);
    LODWORD(v++*(_DWORD *)(result + 24) = kaldi::MatrixBase<float>::NumCols((uint64_t)v26);
    kaldi::VectorBase<double>::AddVec<double>(a1 + 112, &v23, (double)v20 / v21);
    kaldi::Matrix<float>::~Matrix((uint64_t)v26);
  }
  return a1;
}

void sub_1B20AFB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::Vector<float>::Destroy(v9);
  kaldi::Vector<float>::Destroy(v8);
  kaldi::Matrix<float>::~Matrix(v7);
  quasar::Bitmap::~Bitmap(v6);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineCmvnInput,std::allocator<kaldi::OnlineCmvnInput>,kaldi::OnlineFeatInputItf *,int &,int &,BOOL,kaldi::Matrix<float> *,int &,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, int *a3@<X3>, char *a4@<X4>, uint64_t *a5@<X5>, int *a6@<X6>, void *a7@<X8>)
{
  uint64_t v14 = operator new(0xB8uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineCmvnInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,int &,BOOL,kaldi::Matrix<float> *,int &,std::allocator<kaldi::OnlineCmvnInput>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1B20AFC6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineCmvnInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,int &,BOOL,kaldi::Matrix<float> *,int &,std::allocator<kaldi::OnlineCmvnInput>,0>(void *a1, uint64_t *a2, int *a3, int *a4, char *a5, uint64_t *a6, int *a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E960;
  kaldi::OnlineCmvnInput::OnlineCmvnInput((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5, *a6, *a7);
  return a1;
}

void sub_1B20AFCE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineCmvnInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineCmvnInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E960;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineCmvnInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineDeltaInput,std::allocator<kaldi::OnlineDeltaInput>,kaldi::DeltaFeaturesOptions &,kaldi::OnlineFeatInputItf *,void>@<X0>(void *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  int v6 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineDeltaInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::DeltaFeaturesOptions &,kaldi::OnlineFeatInputItf *,std::allocator<kaldi::OnlineDeltaInput>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B20AFDE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineDeltaInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::DeltaFeaturesOptions &,kaldi::OnlineFeatInputItf *,std::allocator<kaldi::OnlineDeltaInput>,0>(void *a1, void *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EA08;
  kaldi::OnlineDeltaInput::OnlineDeltaInput((uint64_t)(a1 + 3), a2, *a3);
  return a1;
}

void sub_1B20AFE40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineDeltaInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EA08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineDeltaInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EA08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineDeltaInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void *std::allocate_shared[abi:ne180100]<kaldi::SimpleWaveformReader,std::allocator<kaldi::SimpleWaveformReader>,kaldi::OnlineAudioSourceItf *&,kaldi::ResamplerOptions &,BOOL &,void>@<X0>(void *a1@<X1>, uint64_t a2@<X2>, unsigned __int8 *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::SimpleWaveformReader>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::ResamplerOptions &,BOOL &,std::allocator<kaldi::SimpleWaveformReader>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B20AFF50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::SimpleWaveformReader>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::ResamplerOptions &,BOOL &,std::allocator<kaldi::SimpleWaveformReader>,0>(void *a1, void *a2, uint64_t a3, unsigned __int8 *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5ECA8;
  kaldi::SimpleWaveformReader::SimpleWaveformReader(a1 + 3, *a2, a3, *a4);
  return a1;
}

void sub_1B20AFFB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::SimpleWaveformReader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5ECA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::SimpleWaveformReader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5ECA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::SimpleWaveformReader>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void *std::allocate_shared[abi:ne180100]<kaldi::Fbank,std::allocator<kaldi::Fbank>,kaldi::FbankOptions &,void>@<X0>(const kaldi::FbankOptions *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD0uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::Fbank>::__shared_ptr_emplace[abi:ne180100]<kaldi::FbankOptions &,std::allocator<kaldi::Fbank>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20B00AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::Fbank>::__shared_ptr_emplace[abi:ne180100]<kaldi::FbankOptions &,std::allocator<kaldi::Fbank>,0>(void *a1, const kaldi::FbankOptions *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EF10;
  kaldi::Fbank::Fbank((kaldi::Fbank *)(a1 + 3), a2);
  return a1;
}

void sub_1B20B0108(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::Fbank>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EF10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::Fbank>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EF10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::Fbank>::__on_zero_shared(uint64_t a1)
{
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::Fbank>,std::allocator<kaldi::OnlineFeInput<kaldi::Fbank>>,kaldi::OnlineAudioSourceItf *&,kaldi::Fbank*,float,float,float &,int &,kaldi::ResamplerOptions &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, float *a3@<X3>, float *a4@<X4>, float *a5@<X5>, int *a6@<X6>, float *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Fbank>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::Fbank*,float,float,float &,int &,kaldi::ResamplerOptions &,std::allocator<kaldi::OnlineFeInput<kaldi::Fbank>>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B20B022C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Fbank>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::Fbank*,float,float,float &,int &,kaldi::ResamplerOptions &,std::allocator<kaldi::OnlineFeInput<kaldi::Fbank>>,0>(void *a1, uint64_t *a2, uint64_t *a3, float *a4, float *a5, float *a6, int *a7, float *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E848;
  kaldi::OnlineFeInput<kaldi::Fbank>::OnlineFeInput((uint64_t)(a1 + 3), *a2, *a3, (int)*a4, (int)*a5, (int)*a6, *a7, a8);
  return a1;
}

void sub_1B20B02AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Fbank>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Fbank>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E848;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Fbank>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t kaldi::OnlineFeInput<kaldi::Fbank>::OnlineFeInput(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, float *a8)
{
  *(void *)uint64_t result = &unk_1F0A47490;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 28) = a5;
  *(_DWORD *)(result + 32) = a6;
  *(_DWORD *)(result + 36) = a7;
  *(_OWORD *)(result + 40) = 0u;
  *(void *)(result + 88) = 0;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  float v8 = a8[1];
  if (v8 > 0.0 && *a8 != v8) {
    operator new();
  }
  return result;
}

void sub_1B20B0424(_Unwind_Exception *a1)
{
  int v6 = *v3;
  *uint64_t v3 = 0;
  if (v6) {
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v3, v6);
  }
  kaldi::Vector<float>::Destroy(v4);
  kaldi::Vector<float>::Destroy(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::Fbank>::Compute(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (int32x2_t *)*a2;
  int v5 = kaldi::MatrixBase<float>::NumRows(*a2);
  if (v5 <= 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"No feature vectors requested?!", 30);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    }
    return 1;
  }
  else
  {
    uint64_t v6 = (*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * (v5 - 1));
    long long v31 = 0;
    v32[0] = 0;
    v32[1] = 0;
    kaldi::Vector<float>::Resize(&v31, v6, 1);
    int v7 = *(_DWORD *)(a1 + 36);
    BOOL v8 = __OFSUB__(v7, 1);
    int v9 = v7 - 1;
    if (v9 < 0 != v8) {
      int v10 = 0;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * v9;
    }
    if ((int)v6 >= v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = v6;
    }
    uint64_t v11 = (*(uint64_t (**)(void, void **, uint64_t))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8), &v31, v12);
    uint64_t v29 = 0;
    v30[0] = 0;
    v30[1] = 0;
    uint64_t v13 = *(uint64_t **)(a1 + 88);
    if (v13)
    {
      char v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
      int v15 = (const void **)&v31;
      kaldi::Resampler::Resample(v13, (uint64_t)&v31, (uint64_t)&v29, v14);
      if (SLODWORD(v30[0]) <= 0)
      {
        uint64_t v16 = v32;
      }
      else
      {
        int v15 = (const void **)&v29;
        uint64_t v16 = v30;
      }
    }
    else
    {
      int v15 = (const void **)&v31;
      uint64_t v16 = v32;
    }
    uint64_t v17 = (*(_DWORD *)v16 + *(_DWORD *)(a1 + 72));
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    long long v26 = 0;
    kaldi::Vector<float>::Resize((void **)&v26, v17, 1);
    unsigned int v18 = *(_DWORD *)(a1 + 72);
    uint64_t v25 = 0;
    long long v23 = v26;
    uint64_t v24 = v18;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v23, (const void **)(a1 + 64));
    uint64_t v19 = *(int *)(a1 + 72);
    unsigned int v20 = *(_DWORD *)v16;
    uint64_t v25 = 0;
    long long v23 = &v26[4 * v19];
    uint64_t v24 = v20;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v23, v15);
    if ((int)v27 < *(_DWORD *)(a1 + 24)) {
      char v21 = v11;
    }
    else {
      char v21 = 0;
    }
    if (v21)
    {
      kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
      kaldi::Vector<float>::Resize((void **)(a1 + 64), v27, 1);
      kaldi::VectorBase<float>::CopyFromVec(a1 + 64, (const void **)&v26);
    }
    else
    {
      kaldi::Fbank::Compute(*(kaldi::Fbank **)(a1 + 16), (uint64_t)&v26, v4, (void **)(a1 + 64), 1.0, a2[2], v11 ^ 1);
    }
    kaldi::Vector<float>::Destroy((uint64_t)&v26);
    kaldi::Vector<float>::Destroy((uint64_t)&v29);
    kaldi::Vector<float>::Destroy((uint64_t)&v31);
  }
  return v11;
}

void sub_1B20B06E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::Fbank>::Dim(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(a1 + 16) + 80) + *(unsigned __int8 *)(*(void *)(a1 + 16) + 104);
}

uint64_t kaldi::OnlineFeInput<kaldi::Fbank>::FrameDurationMs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t kaldi::OnlineFeInput<kaldi::Fbank>::FrameDurationMsForAlignment(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void kaldi::OnlineFeInput<kaldi::Fbank>::~OnlineFeInput(void *a1)
{
  *a1 = &unk_1F0A47490;
  uint64_t v4 = (uint64_t *)a1[11];
  uint64_t v2 = a1 + 11;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t vars8;

  *a1 = &unk_1F0A47490;
  uint64_t v4 = (uint64_t *)a1[11];
  uint64_t v2 = a1 + 11;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineFeInput<kaldi::Fbank>::getSnrTracker@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(uint64_t **)(result + 16);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::allocate_shared[abi:ne180100]<kaldi::FbankWithPitch,std::allocator<kaldi::FbankWithPitch>,kaldi::FbankWithPitchOptions &,void>@<X0>(const kaldi::FbankWithPitchOptions *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x160uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::FbankWithPitch>::__shared_ptr_emplace[abi:ne180100]<kaldi::FbankWithPitchOptions &,std::allocator<kaldi::FbankWithPitch>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20B08DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::FbankWithPitch>::__shared_ptr_emplace[abi:ne180100]<kaldi::FbankWithPitchOptions &,std::allocator<kaldi::FbankWithPitch>,0>(void *a1, const kaldi::FbankWithPitchOptions *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E880;
  kaldi::FbankWithPitch::FbankWithPitch((kaldi::FbankWithPitch *)(a1 + 3), a2);
  return a1;
}

void sub_1B20B0938(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::FbankWithPitch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::FbankWithPitch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E880;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::FbankWithPitch>::__on_zero_shared(uint64_t a1)
{
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::FbankWithPitch>,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>,kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithPitch*,float,float,float &,int &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, float *a3@<X3>, float *a4@<X4>, float *a5@<X5>, int *a6@<X6>, void *a7@<X8>)
{
  char v14 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithPitch*,float,float,float &,int &,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1B20B0A4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithPitch*,float,float,float &,int &,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>,0>(void *a1, uint64_t *a2, uint64_t *a3, float *a4, float *a5, float *a6, int *a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E7A0;
  uint64_t v8 = *a2;
  int v9 = (int)*a4;
  int v10 = (int)*a5;
  int v11 = (int)*a6;
  uint64_t v12 = *a3;
  int v13 = *a7;
  __asm { FMOV            V0.2S, #-1.0 }
  v20[0] = _D0;
  v20[1] = 0xA4579F000;
  kaldi::OnlineFeInput<kaldi::FbankWithPitch>::OnlineFeInput((uint64_t)(a1 + 3), v8, v12, v9, v10, v11, v13, (float *)v20);
  return a1;
}

void sub_1B20B0AF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E7A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E7A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithPitch>::OnlineFeInput(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, float *a8)
{
  *(void *)uint64_t result = &unk_1F0A47358;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 28) = a5;
  *(_DWORD *)(result + 32) = a6;
  *(_DWORD *)(result + 36) = a7;
  *(_OWORD *)(result + 40) = 0u;
  *(void *)(result + 88) = 0;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  float v8 = a8[1];
  if (v8 > 0.0 && *a8 != v8) {
    operator new();
  }
  return result;
}

void sub_1B20B0C68(_Unwind_Exception *a1)
{
  uint64_t v6 = *v3;
  *uint64_t v3 = 0;
  if (v6) {
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v3, v6);
  }
  kaldi::Vector<float>::Destroy(v4);
  kaldi::Vector<float>::Destroy(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithPitch>::Compute(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (int32x2_t *)*a2;
  int v5 = kaldi::MatrixBase<float>::NumRows(*a2);
  if (v5 <= 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"No feature vectors requested?!", 30);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    }
    return 1;
  }
  else
  {
    uint64_t v6 = (*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * (v5 - 1));
    long long v31 = 0;
    v32[0] = 0;
    v32[1] = 0;
    kaldi::Vector<float>::Resize(&v31, v6, 1);
    int v7 = *(_DWORD *)(a1 + 36);
    BOOL v8 = __OFSUB__(v7, 1);
    int v9 = v7 - 1;
    if (v9 < 0 != v8) {
      int v10 = 0;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * v9;
    }
    if ((int)v6 >= v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = v6;
    }
    uint64_t v11 = (*(uint64_t (**)(void, void **, uint64_t))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8), &v31, v12);
    uint64_t v29 = 0;
    v30[0] = 0;
    v30[1] = 0;
    int v13 = *(uint64_t **)(a1 + 88);
    if (v13)
    {
      char v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
      int v15 = (const void **)&v31;
      kaldi::Resampler::Resample(v13, (uint64_t)&v31, (uint64_t)&v29, v14);
      if (SLODWORD(v30[0]) <= 0)
      {
        uint64_t v16 = v32;
      }
      else
      {
        int v15 = (const void **)&v29;
        uint64_t v16 = v30;
      }
    }
    else
    {
      int v15 = (const void **)&v31;
      uint64_t v16 = v32;
    }
    uint64_t v17 = (*(_DWORD *)v16 + *(_DWORD *)(a1 + 72));
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    long long v26 = 0;
    kaldi::Vector<float>::Resize((void **)&v26, v17, 1);
    unsigned int v18 = *(_DWORD *)(a1 + 72);
    uint64_t v25 = 0;
    long long v23 = v26;
    uint64_t v24 = v18;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v23, (const void **)(a1 + 64));
    uint64_t v19 = *(int *)(a1 + 72);
    unsigned int v20 = *(_DWORD *)v16;
    uint64_t v25 = 0;
    long long v23 = &v26[4 * v19];
    uint64_t v24 = v20;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v23, v15);
    if ((int)v27 < *(_DWORD *)(a1 + 24)) {
      char v21 = v11;
    }
    else {
      char v21 = 0;
    }
    if ((v21 & 1) == 0) {
      kaldi::FbankWithPitch::Compute(*(kaldi::FbankWithPitch **)(a1 + 16), (uint64_t)&v26, v4, a1 + 64, 1.0, a2[2], v11 ^ 1);
    }
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    kaldi::Vector<float>::Resize((void **)(a1 + 64), v27, 1);
    kaldi::VectorBase<float>::CopyFromVec(a1 + 64, (const void **)&v26);
    kaldi::Vector<float>::Destroy((uint64_t)&v26);
    kaldi::Vector<float>::Destroy((uint64_t)&v29);
    kaldi::Vector<float>::Destroy((uint64_t)&v31);
  }
  return v11;
}

void sub_1B20B0F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithPitch>::Dim(uint64_t a1, uint8x8_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  a2.i32[0] = *(_DWORD *)(v2 + 212);
  return vaddvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a2)))
       + *(unsigned __int8 *)(v2 + 220)
       + *(_DWORD *)(v2 + 72)
       + *(unsigned __int8 *)(v2 + 216);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithPitch>::FrameDurationMs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithPitch>::FrameDurationMsForAlignment(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void kaldi::OnlineFeInput<kaldi::FbankWithPitch>::~OnlineFeInput(void *a1)
{
  *a1 = &unk_1F0A47358;
  uint64_t v4 = (uint64_t *)a1[11];
  uint64_t v2 = a1 + 11;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t vars8;

  *a1 = &unk_1F0A47358;
  uint64_t v4 = (uint64_t *)a1[11];
  uint64_t v2 = a1 + 11;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithPitch>::getSnrTracker@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(uint64_t **)(result + 16);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::allocate_shared[abi:ne180100]<kaldi::FbankWithAudioAnalytics,std::allocator<kaldi::FbankWithAudioAnalytics>,kaldi::FbankWithAudioAnalyticsOptions &,void>@<X0>(const kaldi::FbankWithAudioAnalyticsOptions *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x178uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::FbankWithAudioAnalytics>::__shared_ptr_emplace[abi:ne180100]<kaldi::FbankWithAudioAnalyticsOptions &,std::allocator<kaldi::FbankWithAudioAnalytics>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20B1140(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::FbankWithAudioAnalytics>::__shared_ptr_emplace[abi:ne180100]<kaldi::FbankWithAudioAnalyticsOptions &,std::allocator<kaldi::FbankWithAudioAnalytics>,0>(void *a1, const kaldi::FbankWithAudioAnalyticsOptions *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5ED50;
  kaldi::FbankWithAudioAnalytics::FbankWithAudioAnalytics((kaldi::FbankWithAudioAnalytics *)(a1 + 3), a2);
  return a1;
}

void sub_1B20B119C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::FbankWithAudioAnalytics>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5ED50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::FbankWithAudioAnalytics>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5ED50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::FbankWithAudioAnalytics>::__on_zero_shared(uint64_t a1)
{
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>,kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithAudioAnalytics*,float,float,float &,int &,kaldi::ResamplerOptions &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, float *a3@<X3>, float *a4@<X4>, float *a5@<X5>, int *a6@<X6>, float *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithAudioAnalytics*,float,float,float &,int &,kaldi::ResamplerOptions &,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B20B12C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithAudioAnalytics*,float,float,float &,int &,kaldi::ResamplerOptions &,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>,0>(void *a1, uint64_t *a2, uint64_t *a3, float *a4, float *a5, float *a6, int *a7, float *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E7D8;
  kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::OnlineFeInput((uint64_t)(a1 + 3), *a2, *a3, (int)*a4, (int)*a5, (int)*a6, *a7, a8);
  return a1;
}

void sub_1B20B1340(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E7D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E7D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::OnlineFeInput(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, float *a8)
{
  *(void *)uint64_t result = &unk_1F0A473C0;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 28) = a5;
  *(_DWORD *)(result + 32) = a6;
  *(_DWORD *)(result + 36) = a7;
  *(_OWORD *)(result + 40) = 0u;
  *(void *)(result + 88) = 0;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  float v8 = a8[1];
  if (v8 > 0.0 && *a8 != v8) {
    operator new();
  }
  return result;
}

void sub_1B20B14B8(_Unwind_Exception *a1)
{
  uint64_t v6 = *v3;
  *uint64_t v3 = 0;
  if (v6) {
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v3, v6);
  }
  kaldi::Vector<float>::Destroy(v4);
  kaldi::Vector<float>::Destroy(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::Compute(uint64_t a1, int32x2_t **a2)
{
  uint64_t v4 = *a2;
  int v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)*a2);
  if (v5 <= 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"No feature vectors requested?!", 30);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    }
    return 1;
  }
  else
  {
    uint64_t v6 = (*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * (v5 - 1));
    long long v31 = 0;
    v32[0] = 0;
    v32[1] = 0;
    kaldi::Vector<float>::Resize(&v31, v6, 1);
    int v7 = *(_DWORD *)(a1 + 36);
    BOOL v8 = __OFSUB__(v7, 1);
    int v9 = v7 - 1;
    if (v9 < 0 != v8) {
      int v10 = 0;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * v9;
    }
    if ((int)v6 >= v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = v6;
    }
    uint64_t v11 = (*(uint64_t (**)(void, void **, uint64_t))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8), &v31, v12);
    uint64_t v29 = 0;
    v30[0] = 0;
    v30[1] = 0;
    int v13 = *(uint64_t **)(a1 + 88);
    if (v13)
    {
      char v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
      int v15 = (const void **)&v31;
      kaldi::Resampler::Resample(v13, (uint64_t)&v31, (uint64_t)&v29, v14);
      if (SLODWORD(v30[0]) <= 0)
      {
        uint64_t v16 = v32;
      }
      else
      {
        int v15 = (const void **)&v29;
        uint64_t v16 = v30;
      }
    }
    else
    {
      int v15 = (const void **)&v31;
      uint64_t v16 = v32;
    }
    uint64_t v17 = (*(_DWORD *)v16 + *(_DWORD *)(a1 + 72));
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    long long v26 = 0;
    kaldi::Vector<float>::Resize((void **)&v26, v17, 1);
    unsigned int v18 = *(_DWORD *)(a1 + 72);
    uint64_t v25 = 0;
    long long v23 = v26;
    uint64_t v24 = v18;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v23, (const void **)(a1 + 64));
    uint64_t v19 = *(int *)(a1 + 72);
    unsigned int v20 = *(_DWORD *)v16;
    uint64_t v25 = 0;
    long long v23 = &v26[4 * v19];
    uint64_t v24 = v20;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v23, v15);
    if ((int)v27 < *(_DWORD *)(a1 + 24)) {
      char v21 = v11;
    }
    else {
      char v21 = 0;
    }
    if ((v21 & 1) == 0) {
      kaldi::FbankWithAudioAnalytics::Compute(*(kaldi::FbankWithAudioAnalytics **)(a1 + 16), (uint64_t)&v26, v4, a1 + 64, a2[2], v11 ^ 1, 1.0);
    }
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    kaldi::Vector<float>::Resize((void **)(a1 + 64), v27, 1);
    kaldi::VectorBase<float>::CopyFromVec(a1 + 64, (const void **)&v26);
    kaldi::Vector<float>::Destroy((uint64_t)&v26);
    kaldi::Vector<float>::Destroy((uint64_t)&v29);
    kaldi::Vector<float>::Destroy((uint64_t)&v31);
  }
  return v11;
}

void sub_1B20B1774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::Dim(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(a1 + 16) + 80)
       + *(unsigned __int8 *)(*(void *)(a1 + 16) + 104)
       + *(_DWORD *)(*(void *)(a1 + 16) + 344);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::FrameDurationMs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::FrameDurationMsForAlignment(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::~OnlineFeInput(void *a1)
{
  *a1 = &unk_1F0A473C0;
  uint64_t v4 = (uint64_t *)a1[11];
  uint64_t v2 = a1 + 11;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t vars8;

  *a1 = &unk_1F0A473C0;
  uint64_t v4 = (uint64_t *)a1[11];
  uint64_t v2 = a1 + 11;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::getSnrTracker@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(uint64_t **)(result + 16);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineLdaInput,std::allocator<kaldi::OnlineLdaInput>,kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,int &,int &,void>@<X0>(void *a1@<X1>, uint64_t a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, void *a5@<X8>)
{
  int v10 = operator new(0xA0uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineLdaInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,int &,int &,std::allocator<kaldi::OnlineLdaInput>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1B20B1998(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineLdaInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,int &,int &,std::allocator<kaldi::OnlineLdaInput>,0>(void *a1, void *a2, uint64_t a3, unsigned int *a4, unsigned int *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E8F0;
  kaldi::OnlineLdaInput::OnlineLdaInput(a1 + 3, *a2, a3, *a4, *a5);
  return a1;
}

void sub_1B20B1A00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineLdaInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E8F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineLdaInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E8F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineLdaInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void *std::allocate_shared[abi:ne180100]<kaldi::Mfcc,std::allocator<kaldi::Mfcc>,kaldi::MfccOptions &,void>@<X0>(const kaldi::MfccOptions *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x110uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::Mfcc>::__shared_ptr_emplace[abi:ne180100]<kaldi::MfccOptions &,std::allocator<kaldi::Mfcc>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20B1AF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::Mfcc>::__shared_ptr_emplace[abi:ne180100]<kaldi::MfccOptions &,std::allocator<kaldi::Mfcc>,0>(void *a1, const kaldi::MfccOptions *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EED8;
  kaldi::Mfcc::Mfcc((kaldi::Mfcc *)(a1 + 3), a2);
  return a1;
}

void sub_1B20B1B54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::Mfcc>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::Mfcc>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EED8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::Mfcc>::__on_zero_shared(uint64_t a1)
{
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::Mfcc>,std::allocator<kaldi::OnlineFeInput<kaldi::Mfcc>>,kaldi::OnlineAudioSourceItf *&,kaldi::Mfcc*,float,float,float &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, float *a3@<X3>, float *a4@<X4>, float *a5@<X5>, void *a6@<X8>)
{
  uint64_t v12 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Mfcc>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::Mfcc*,float,float,float &,std::allocator<kaldi::OnlineFeInput<kaldi::Mfcc>>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1B20B1C60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Mfcc>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::Mfcc*,float,float,float &,std::allocator<kaldi::OnlineFeInput<kaldi::Mfcc>>,0>(void *a1, uint64_t *a2, uint64_t *a3, float *a4, float *a5, float *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E810;
  uint64_t v7 = *a2;
  uint64_t v8 = *a3;
  int v9 = (int)*a4;
  int v10 = (int)*a5;
  int v11 = (int)*a6;
  __asm { FMOV            V0.2S, #-1.0 }
  v18[0] = _D0;
  v18[1] = 0xA4579F000;
  kaldi::OnlineFeInput<kaldi::Mfcc>::OnlineFeInput((uint64_t)(a1 + 3), v7, v8, v9, v10, v11, 0, (float *)v18);
  return a1;
}

void sub_1B20B1D04(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Mfcc>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Mfcc>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Mfcc>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t kaldi::OnlineFeInput<kaldi::Mfcc>::OnlineFeInput(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, float *a8)
{
  *(void *)uint64_t result = &unk_1F0A47428;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 28) = a5;
  *(_DWORD *)(result + 32) = a6;
  *(_DWORD *)(result + 36) = a7;
  *(_OWORD *)(result + 40) = 0u;
  *(void *)(result + 88) = 0;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  float v8 = a8[1];
  if (v8 > 0.0 && *a8 != v8) {
    operator new();
  }
  return result;
}

void sub_1B20B1E7C(_Unwind_Exception *a1)
{
  uint64_t v6 = *v3;
  *uint64_t v3 = 0;
  if (v6) {
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v3, v6);
  }
  kaldi::Vector<float>::Destroy(v4);
  kaldi::Vector<float>::Destroy(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::Mfcc>::Compute(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (int32x2_t *)*a2;
  int v4 = kaldi::MatrixBase<float>::NumRows(*a2);
  if (v4 <= 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"No feature vectors requested?!", 30);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
    }
    return 1;
  }
  else
  {
    uint64_t v5 = (*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * (v4 - 1));
    long long v30 = 0;
    v31[0] = 0;
    v31[1] = 0;
    kaldi::Vector<float>::Resize(&v30, v5, 1);
    int v6 = *(_DWORD *)(a1 + 36);
    BOOL v7 = __OFSUB__(v6, 1);
    int v8 = v6 - 1;
    if (v8 < 0 != v7) {
      int v9 = 0;
    }
    else {
      int v9 = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * v8;
    }
    if ((int)v5 >= v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v5;
    }
    uint64_t v10 = (*(uint64_t (**)(void, void **, uint64_t))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8), &v30, v11);
    uint64_t v28 = 0;
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v12 = *(uint64_t **)(a1 + 88);
    if (v12)
    {
      char v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
      char v14 = (const void **)&v30;
      kaldi::Resampler::Resample(v12, (uint64_t)&v30, (uint64_t)&v28, v13);
      if (SLODWORD(v29[0]) <= 0)
      {
        int v15 = v31;
      }
      else
      {
        char v14 = (const void **)&v28;
        int v15 = v29;
      }
    }
    else
    {
      char v14 = (const void **)&v30;
      int v15 = v31;
    }
    uint64_t v16 = (*(_DWORD *)v15 + *(_DWORD *)(a1 + 72));
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = 0;
    kaldi::Vector<float>::Resize((void **)&v25, v16, 1);
    unsigned int v17 = *(_DWORD *)(a1 + 72);
    uint64_t v24 = 0;
    long long v22 = v25;
    uint64_t v23 = v17;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v22, (const void **)(a1 + 64));
    uint64_t v18 = *(int *)(a1 + 72);
    unsigned int v19 = *(_DWORD *)v15;
    uint64_t v24 = 0;
    long long v22 = &v25[4 * v18];
    uint64_t v23 = v19;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v22, v14);
    if ((int)v26 < *(_DWORD *)(a1 + 24)) {
      char v20 = v10;
    }
    else {
      char v20 = 0;
    }
    if (v20)
    {
      kaldi::Matrix<float>::Resize(v3, 0, 0, 0, 0);
      kaldi::Vector<float>::Resize((void **)(a1 + 64), v26, 1);
      kaldi::VectorBase<float>::CopyFromVec(a1 + 64, (const void **)&v25);
    }
    else
    {
      kaldi::Mfcc::Compute(*(kaldi::Mfcc **)(a1 + 16), (uint64_t)&v25, v3, (void **)(a1 + 64), 1.0);
    }
    kaldi::Vector<float>::Destroy((uint64_t)&v25);
    kaldi::Vector<float>::Destroy((uint64_t)&v28);
    kaldi::Vector<float>::Destroy((uint64_t)&v30);
  }
  return v10;
}

void sub_1B20B2138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::Mfcc>::Dim(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 16) + 96);
}

uint64_t kaldi::OnlineFeInput<kaldi::Mfcc>::FrameDurationMs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t kaldi::OnlineFeInput<kaldi::Mfcc>::FrameDurationMsForAlignment(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void kaldi::OnlineFeInput<kaldi::Mfcc>::~OnlineFeInput(void *a1)
{
  *a1 = &unk_1F0A47428;
  int v4 = (uint64_t *)a1[11];
  uint64_t v2 = a1 + 11;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t vars8;

  *a1 = &unk_1F0A47428;
  int v4 = (uint64_t *)a1[11];
  uint64_t v2 = a1 + 11;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineFeInput<kaldi::Mfcc>::getSnrTracker@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(uint64_t **)(result + 16);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineNnetForwardInput,std::allocator<kaldi::OnlineNnetForwardInput>,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,kaldi::InferenceNetItf *,int &,int &,std::vector<int> &,BOOL &,BOOL &,int &,BOOL &,BOOL &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X3>, long long *a4@<X4>, uint64_t *a5@<X5>, char *a6@<X6>, char *a7@<X7>, void *a8@<X8>, uint64_t *a9, int *a10, int *a11, uint64_t a12, char *a13, char *a14, int *a15, char *a16, char *a17)
{
  uint64_t v25 = operator new(0x148uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineNnetForwardInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,kaldi::InferenceNetItf *,int &,int &,std::vector<int> &,BOOL &,BOOL &,int &,BOOL &,BOOL &,std::allocator<kaldi::OnlineNnetForwardInput>,0>(v25, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  *a8 = v25 + 3;
  a8[1] = v25;
  return result;
}

void sub_1B20B23C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineNnetForwardInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,kaldi::InferenceNetItf *,int &,int &,std::vector<int> &,BOOL &,BOOL &,int &,BOOL &,BOOL &,std::allocator<kaldi::OnlineNnetForwardInput>,0>(void *a1, uint64_t *a2, uint64_t *a3, void *a4, long long *a5, uint64_t *a6, char *a7, char *a8, uint64_t *a9, int *a10, int *a11, uint64_t a12, char *a13, char *a14, int *a15, char *a16, char *a17)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5ED18;
  std::allocator<kaldi::OnlineNnetForwardInput>::construct[abi:ne180100]<kaldi::OnlineNnetForwardInput,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,kaldi::InferenceNetItf *,int &,int &,std::vector<int> &,BOOL &,BOOL &,int &,BOOL &,BOOL &>((uint64_t)&v19, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  return a1;
}

void sub_1B20B246C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineNnetForwardInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5ED18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineNnetForwardInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5ED18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineNnetForwardInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::allocator<kaldi::OnlineNnetForwardInput>::construct[abi:ne180100]<kaldi::OnlineNnetForwardInput,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,kaldi::InferenceNetItf *,int &,int &,std::vector<int> &,BOOL &,BOOL &,int &,BOOL &,BOOL &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, long long *a6, uint64_t *a7, char *a8, char *a9, uint64_t *a10, int *a11, int *a12, uint64_t a13, char *a14, char *a15, int *a16, char *a17, char *a18)
{
  uint64_t v18 = *a3;
  uint64_t v19 = *a4;
  uint64_t v28 = *a7;
  char v26 = *a9;
  char v27 = *a8;
  uint64_t v20 = *a10;
  int v21 = *a11;
  int v22 = *a12;
  long long v33 = 0;
  uint64_t v34 = 0;
  uint64_t v23 = *(const void **)a13;
  uint64_t v24 = *(void *)(a13 + 8);
  unint64_t v25 = (v24 - *(void *)a13) >> 2;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v23, v24, v25);
  kaldi::OnlineNnetForwardInput::OnlineNnetForwardInput(a2, v18, v19, a5, a6, v28, v27, v26, v20, v21, v22, (uint64_t)&__p, *a14, *a15, *a16, *a17, *a18);
  if (__p)
  {
    long long v33 = __p;
    operator delete(__p);
  }
}

void sub_1B20B2624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::OnlineNnetForwardInput::OnlineNnetForwardInput(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, long long *a5, uint64_t a6, char a7, char a8, uint64_t a9, int a10, int a11, uint64_t a12, char a13, char a14, int a15, char a16, char a17)
{
  *(void *)&v53[260] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F0A47FC0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = *a4;
  uint64_t v23 = a4[1];
  *(void *)(a1 + 32) = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v24 = *a5;
    *(void *)(a1 + 56) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 40) = v24;
  }
  uint64_t v25 = *((void *)a5 + 3);
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 64) = v25;
  *(void *)(a1 + 72) = a6;
  *(unsigned char *)(a1 + 80) = a7;
  *(unsigned char *)(a1 + 81) = a8;
  *(void *)(a1 + 88) = a9;
  *(_DWORD *)(a1 + 96) = a11 + a10;
  char v26 = (int **)(a1 + 112);
  *(_OWORD *)(a1 + 120) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 112), *(const void **)a12, *(void *)(a12 + 8), (uint64_t)(*(void *)(a12 + 8) - *(void *)a12) >> 2);
  *(unsigned char *)(a1 + 136) = a13;
  *(unsigned char *)(a1 + 137) = a14;
  *(_DWORD *)(a1 + 140) = a15;
  kaldi::Matrix<float>::Matrix(a1 + 144);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 2++*(_DWORD *)(result + 24) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 248) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 296) = a16;
  *(unsigned char *)(a1 + 297) = a17;
  char v27 = *(int **)(a1 + 112);
  uint64_t v28 = *(int **)(a1 + 120);
  if (v27 == v28)
  {
    uint64_t __src = 0;
    int v52 = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 112), (char *)&__src, (uint64_t)v53, 3uLL);
    int v30 = **v26;
  }
  else
  {
    if ((char *)v28 - (char *)v27 != 12)
    {
      if (!(*(unsigned int (**)(void))(**(void **)(a1 + 24) + 72))(*(void *)(a1 + 24)))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"strict-batch-sizes supports only 3 sizes", 40);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
      }
      char v27 = *v26;
    }
    int v30 = *v27;
    int v29 = v27[1];
    int v31 = v27[2];
    if (v29 > v31) {
      int v31 = v29;
    }
    if (v30 < v31)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"Model input size must be greater than other batch sizes in strict-batch-sizes", 77);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
    }
  }
  if (*(unsigned char *)(a1 + 137) && v30 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"append-pad-info cannot be set if strict-batch-size is <= 0", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  if (*(unsigned char *)(a1 + 136) && v30 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"zero-pad cannot be set if strict-batch-size is <= 0", 51);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  if (*(int *)(a1 + 140) >= 1 && v30 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"append-context-size cannot be set if strict-batch-size is <= 0", 62);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  *(_DWORD *)(a1 + 184) = 0;
  long long v32 = *(const void **)(a1 + 24);
  if (v32
  {
    uint64_t v34 = *(std::__shared_weak_count **)(a1 + 32);
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v50 = v34;
    (*(void (**)(void *))(*(void *)v33 + 152))(v33);
  }
  else
  {
    long long v50 = 0;
  }
  uint64_t v35 = *(kaldi::nnet1::Nnet **)(a1 + 16);
  if (v35 && (int)((*((void *)v35 + 1) - *(void *)v35) >> 3) >= 1)
  {
    int v36 = 0;
    do
    {
      uint64_t Component = kaldi::nnet1::Nnet::GetComponent(v35, v36);
      if ((*(unsigned int (**)(uint64_t))(*(void *)Component + 24))(Component) == 1026)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
        char v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"nnet transformation contains splicing, which is not ", 52);
        long long v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"supported by OnlineNnetForwardInput. Use a separate splice ", 59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"operation to perform splicing.", 30);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
      }
      ++v36;
      uint64_t v35 = *(kaldi::nnet1::Nnet **)(a1 + 16);
    }
    while (v36 < (int)((*((void *)v35 + 1) - *(void *)v35) >> 3));
  }
  long long v38 = *(const void **)(a1 + 24);
  if (v38
  {
    uint64_t v40 = v39;
    uint64_t v41 = *(std::__shared_weak_count **)(a1 + 32);
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((int)((v39[2] - v39[1]) >> 3) >= 1)
    {
      int v42 = 0;
      do
      {
        uint64_t v43 = kaldi::nnet1::Nnet::GetComponent((kaldi::nnet1::Nnet *)(v40 + 1), v42);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v43 + 24))(v43) == 1026)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
          long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"nnet contains splicing, which is not supported by ", 50);
          long long v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"OnlineNnetForwardInput. Use a separate splice operation to ", 59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"perform splicing.", 17);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
        }
        ++v42;
      }
      while (v42 < (int)((v40[2] - v40[1]) >> 3));
    }
  }
  else
  {
    uint64_t v41 = 0;
  }
  if (*a4 && (*(unsigned int (**)(void))(*(void *)*a4 + 72))(*a4))
  {
    uint64_t v44 = *(void *)(a12 + 8);
    if (*(void *)a12 == v44
      || memcmp((const void *)(*(void *)a12 + 4), *(const void **)a12, v44 - (*(void *)a12 + 4)))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"strict-batch-size should be defined or strict-bath-sizes should have same value with streaming model", 100);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
    }
    if (*(unsigned char *)(a1 + 296))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"legacy streaming settings is not supported with streaming model", 63);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
    }
    if ((*(unsigned char *)(a1 + 137) || *(int *)(a1 + 140) >= 1) && (*(unsigned int (**)(void))(*(void *)*a4 + 80))())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"legacy masking is not supported with streaming model specified maskings as input", 80);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
    }
  }
  if (*(int *)(a1 + 96) >= 1) {
    operator new();
  }
  if (v30 >= 1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 297) && !v30)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"one row output can only be applied with fixed batch size input", 62);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  return a1;
}

void sub_1B20B2F14(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B20B3000);
}

void sub_1B20B2F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  kaldi::CuMatrix<float>::~CuMatrix(a11);
  kaldi::CuMatrix<float>::~CuMatrix(a12);
  uint64_t v19 = *(void *)(v16 + 192);
  *(void *)(v16 + 192) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 72))(v19);
  }
  kaldi::Matrix<float>::~Matrix(a13);
  uint64_t v20 = *a14;
  if (*a14)
  {
    *(void *)(v16 + 120) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *v17;
  uint64_t *v17 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 72))(v21);
  }
  if (*(char *)(v16 + 63) < 0) {
    operator delete(*a10);
  }
  int v22 = *(std::__shared_weak_count **)(v16 + 32);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v16);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::Vector<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::Vector<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::Vector<float>>::__on_zero_shared(uint64_t a1)
{
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,BOOL,BOOL,void>@<X0>(uint64_t a1@<X1>, long long *a2@<X2>, unsigned __int8 *a3@<X3>, unsigned __int8 *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x218uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::CEFusedAcousticEncoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,BOOL,BOOL,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1B20B3108(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::CEFusedAcousticEncoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,BOOL,BOOL,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,0>(void *a1, uint64_t a2, long long *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F3E0;
  std::allocator<kaldi::quasar::CEFusedAcousticEncoder>::construct[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,BOOL,BOOL>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1B20B3184(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEFusedAcousticEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F3E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEFusedAcousticEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F3E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEFusedAcousticEncoder>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<kaldi::quasar::CEFusedAcousticEncoder>::construct[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,BOOL,BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  long long v6 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  kaldi::quasar::CEFusedAcousticEncoder::CEFusedAcousticEncoder(a2, a3, &v6, *a5, *a6);
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
}

void sub_1B20B3270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<kaldi::SpeechActivityDetector,std::allocator<kaldi::SpeechActivityDetector>,kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,BOOL &,void>@<X0>(void *a1@<X1>, unsigned int *a2@<X2>, unsigned __int8 *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unsigned __int8 *a6@<X6>, void *a7@<X8>)
{
  char v14 = operator new(0x50uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::SpeechActivityDetector>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,BOOL &,std::allocator<kaldi::SpeechActivityDetector>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1B20B3308(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::SpeechActivityDetector>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,BOOL &,std::allocator<kaldi::SpeechActivityDetector>,0>(void *a1, void *a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A1D330;
  kaldi::SpeechActivityDetector::SpeechActivityDetector(a1 + 3, *a2, *a3, *a4, a5, a6, *a7);
  return a1;
}

void sub_1B20B3374(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::SpeechActivityDetector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::SpeechActivityDetector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D330;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::SpeechActivityDetector>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,void>@<X0>(uint64_t a1@<X1>, long long *a2@<X2>, void *a3@<X8>)
{
  long long v6 = operator new(0x218uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::CEFusedAcousticEncoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B20B3474(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::CEFusedAcousticEncoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,0>(void *a1, uint64_t a2, long long *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F3E0;
  std::allocator<kaldi::quasar::CEFusedAcousticEncoder>::construct[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B20B34E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<kaldi::quasar::CEFusedAcousticEncoder>::construct[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>>(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  long long v4 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  kaldi::quasar::CEFusedAcousticEncoder::CEFusedAcousticEncoder(a2, a3, &v4, 0, 0);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_1B20B3554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<kaldi::AmFusionEncoderInput,std::allocator<kaldi::AmFusionEncoderInput>,kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,int &,kaldi::CuMatrix<float> &,float &,void>(uint64_t a1, uint64_t *a2, int *a3, char *a4, uint64_t a5, uint64_t a6, void *a7)
{
  char v13 = operator new(0x120uLL);
  std::__shared_ptr_emplace<kaldi::AmFusionEncoderInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,int &,kaldi::CuMatrix<float> &,float &,std::allocator<kaldi::AmFusionEncoderInput>,0>(v13, a2, a3, a4, a5, a6, a7);
}

void sub_1B20B360C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::AmFusionEncoderInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,int &,kaldi::CuMatrix<float> &,float &,std::allocator<kaldi::AmFusionEncoderInput>,0>(void *a1, uint64_t *a2, int *a3, char *a4, uint64_t a5, uint64_t a6, void *a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EC00;
  kaldi::AmFusionEncoderInput::AmFusionEncoderInput((uint64_t)(a1 + 3), *a2, *a3, *a4, a5, a6, a7);
}

void sub_1B20B368C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::AmFusionEncoderInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EC00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::AmFusionEncoderInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EC00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::AmFusionEncoderInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineAcousticEncoderInput,std::allocator<kaldi::OnlineAcousticEncoderInput>,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::quasar::CEAcousticEncoderNet> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,std::vector<int> &,BOOL &,BOOL &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X3>, long long *a4@<X4>, uint64_t *a5@<X5>, char *a6@<X6>, char *a7@<X7>, void *a8@<X8>, uint64_t a9, char *a10, unsigned __int8 *a11)
{
  uint64_t v19 = operator new(0xA0uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineAcousticEncoderInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::quasar::CEAcousticEncoderNet> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,std::vector<int> &,BOOL &,BOOL &,std::allocator<kaldi::OnlineAcousticEncoderInput>,0>(v19, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11);
  *a8 = v19 + 3;
  a8[1] = v19;
  return result;
}

void sub_1B20B37EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineAcousticEncoderInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::quasar::CEAcousticEncoderNet> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,std::vector<int> &,BOOL &,BOOL &,std::allocator<kaldi::OnlineAcousticEncoderInput>,0>(void *a1, uint64_t *a2, uint64_t *a3, void *a4, long long *a5, uint64_t *a6, char *a7, char *a8, uint64_t a9, char *a10, unsigned __int8 *a11)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EDF8;
  std::allocator<kaldi::OnlineAcousticEncoderInput>::construct[abi:ne180100]<kaldi::OnlineAcousticEncoderInput,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::quasar::CEAcousticEncoderNet> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,std::vector<int> &,BOOL &,BOOL &>((uint64_t)&v13, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return a1;
}

void sub_1B20B3888(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineAcousticEncoderInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EDF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineAcousticEncoderInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EDF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineAcousticEncoderInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::allocator<kaldi::OnlineAcousticEncoderInput>::construct[abi:ne180100]<kaldi::OnlineAcousticEncoderInput,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::quasar::CEAcousticEncoderNet> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,std::vector<int> &,BOOL &,BOOL &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, long long *a6, uint64_t *a7, char *a8, char *a9, uint64_t a10, char *a11, unsigned __int8 *a12)
{
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  uint64_t v17 = *a7;
  char v18 = *a8;
  char v19 = *a9;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a10, *(void *)(a10 + 8), (uint64_t)(*(void *)(a10 + 8) - *(void *)a10) >> 2);
  kaldi::OnlineAcousticEncoderInput::OnlineAcousticEncoderInput(a2, v15, v16, a5, a6, v17, v18, v19, (char *)&__p, *a11, *a12);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
}

void sub_1B20B3A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::OnlineAcousticEncoderInput::OnlineAcousticEncoderInput(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, long long *a5, uint64_t a6, char a7, char a8, char *a9, char a10, unsigned __int8 a11)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F0A48108;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = *a4;
  uint64_t v16 = a4[1];
  *(void *)(a1 + 32) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v17 = *a5;
    *(void *)(a1 + 56) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 40) = v17;
  }
  int v18 = a11;
  uint64_t v19 = *((void *)a5 + 3);
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a6;
  *(unsigned char *)(a1 + 80) = a7;
  *(unsigned char *)(a1 + 81) = a8;
  *(unsigned char *)(a1 + 96) = a10;
  *(unsigned char *)(a1 + 97) = a11;
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v21 = *(int **)a9;
  uint64_t v20 = (char *)*((void *)a9 + 1);
  if (*(char **)a9 == v20)
  {
    *(void *)&long long __src = 0;
    DWORD2(__src) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a9, (char *)&__src, (uint64_t)&__src + 12, 3uLL);
    uint64_t v21 = *(int **)a9;
    int v22 = **(_DWORD **)a9;
    int v18 = *(unsigned __int8 *)(a1 + 97);
  }
  else
  {
    if (v20 - (char *)v21 != 12)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"strict-batch-sizes supports only 3 sizes", 40);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
    }
    int v22 = *v21;
    int v23 = v21[1];
    if (v23 <= v21[2]) {
      int v23 = v21[2];
    }
    if (v22 < v23)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"Model input size must be greater than other batch sizes in strict-batch-sizes", 77);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
    }
  }
  *(_DWORD *)(a1 + 84) = v22;
  *(_DWORD *)(a1 + 88) = v21[1];
  *(_DWORD *)(a1 + 92) = v21[2];
  if (v18 && v22 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"append-pad-info cannot be set if strict-batch-size is <= 0", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  if (*(unsigned char *)(a1 + 96) && v22 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"zero-pad cannot be set if strict-batch-size is <= 0", 51);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  *(_DWORD *)(a1 + 100) = 0;
  long long v24 = *(kaldi::nnet1::Nnet **)(a1 + 16);
  if (v24 && (int)((*((void *)v24 + 1) - *(void *)v24) >> 3) >= 1)
  {
    int v25 = 0;
    do
    {
      uint64_t Component = kaldi::nnet1::Nnet::GetComponent(v24, v25);
      if ((*(unsigned int (**)(uint64_t))(*(void *)Component + 24))(Component) == 1026)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
        uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"nnet transformation contains splicing, which is not ", 52);
        int v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"supported by OnlineNnetForwardInput. Use a separate splice ", 59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"operation to perform splicing.", 30);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
      }
      ++v25;
      long long v24 = *(kaldi::nnet1::Nnet **)(a1 + 16);
    }
    while (v25 < (int)((*((void *)v24 + 1) - *(void *)v24) >> 3));
    int v22 = *(_DWORD *)(a1 + 84);
  }
  if (v22 >= 1) {
    operator new();
  }
  kaldi::quasar::CEAcousticEncoderNet::InitialStates(*(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 24), &__src);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)(a1 + 112));
  *(_OWORD *)(a1 + 112) = __src;
  *(void *)(a1 + 128) = v32;
  uint64_t v32 = 0;
  p_src = (void **)&__src;
  long long __src = 0uLL;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&p_src);
  return a1;
}

void sub_1B20B3E38(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B20B3EB0);
}

void sub_1B20B3E48(_Unwind_Exception *a1)
{
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v5 = *v3;
  *uint64_t v3 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 72))(v5);
  }
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  uint64_t v6 = *(void *)(v1 + 32);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineNnetForwardSkippedInput,std::allocator<kaldi::OnlineNnetForwardSkippedInput>,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,int &,BOOL &,BOOL &,kaldi::InferenceNetItf *,BOOL &,int &,BOOL &,kaldi::CuMatrix<float> &,BOOL &,std::shared_ptr<std::queue<kaldi::CuMatrix<float>>> const&,unsigned int const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X3>, long long *a4@<X4>, uint64_t *a5@<X5>, int *a6@<X6>, char *a7@<X7>, void *a8@<X8>, char *a9, uint64_t *a10, char *a11, int *a12, char *a13, uint64_t a14, char *a15, void *a16, int *a17)
{
  int v25 = operator new(0x1A8uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineNnetForwardSkippedInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,int &,BOOL &,BOOL &,kaldi::InferenceNetItf *,BOOL &,int &,BOOL &,kaldi::CuMatrix<float> &,BOOL &,std::shared_ptr<std::queue<kaldi::CuMatrix<float>>> const&,unsigned int const&,std::allocator<kaldi::OnlineNnetForwardSkippedInput>,0>(v25, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  *a8 = v25 + 3;
  a8[1] = v25;
  return result;
}

void sub_1B20B3F94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineNnetForwardSkippedInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,int &,BOOL &,BOOL &,kaldi::InferenceNetItf *,BOOL &,int &,BOOL &,kaldi::CuMatrix<float> &,BOOL &,std::shared_ptr<std::queue<kaldi::CuMatrix<float>>> const&,unsigned int const&,std::allocator<kaldi::OnlineNnetForwardSkippedInput>,0>(void *a1, uint64_t *a2, uint64_t *a3, void *a4, long long *a5, uint64_t *a6, int *a7, char *a8, char *a9, uint64_t *a10, char *a11, int *a12, char *a13, uint64_t a14, char *a15, void *a16, int *a17)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EE30;
  std::allocator<kaldi::OnlineNnetForwardSkippedInput>::construct[abi:ne180100]<kaldi::OnlineNnetForwardSkippedInput,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,int &,BOOL &,BOOL &,kaldi::InferenceNetItf *,BOOL &,int &,BOOL &,kaldi::CuMatrix<float> &,BOOL &,std::shared_ptr<std::queue<kaldi::CuMatrix<float>>> const&,unsigned int const&>((uint64_t)&v19, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  return a1;
}

void sub_1B20B4040(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineNnetForwardSkippedInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EE30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineNnetForwardSkippedInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EE30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineNnetForwardSkippedInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t std::allocator<kaldi::OnlineNnetForwardSkippedInput>::construct[abi:ne180100]<kaldi::OnlineNnetForwardSkippedInput,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,int &,BOOL &,BOOL &,kaldi::InferenceNetItf *,BOOL &,int &,BOOL &,kaldi::CuMatrix<float> &,BOOL &,std::shared_ptr<std::queue<kaldi::CuMatrix<float>>> const&,unsigned int const&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, long long *a6, uint64_t *a7, int *a8, char *a9, char *a10, uint64_t *a11, char *a12, int *a13, char *a14, uint64_t a15, char *a16, void *a17, int *a18)
{
  uint64_t v21 = *a3;
  uint64_t v22 = *a4;
  uint64_t v23 = *a7;
  int v24 = *a8;
  char v25 = *a9;
  char v26 = *a10;
  uint64_t v28 = *a11;
  char v29 = *a12;
  int v30 = *a13;
  char v31 = *a14;
  char v32 = *a16;
  int v33 = *a18;
  return kaldi::OnlineNnetForwardSkippedInput::OnlineNnetForwardSkippedInput(a2, v21, v22, a5, a6, v23, v24, v25, v26, v28, v29, v30, v31, a15, v32, a17, v33);
}

uint64_t kaldi::OnlineNnetForwardSkippedInput::OnlineNnetForwardSkippedInput(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, long long *a5, uint64_t a6, int a7, char a8, char a9, uint64_t a10, char a11, int a12, char a13, uint64_t a14, char a15, void *a16, int a17)
{
  *(void *)a1 = &unk_1F0A482C8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = *a4;
  uint64_t v22 = a4[1];
  *(void *)(a1 + 32) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v23 = *a5;
    *(void *)(a1 + 56) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 40) = v23;
  }
  uint64_t v24 = *((void *)a5 + 3);
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 64) = v24;
  *(void *)(a1 + 72) = a6;
  *(_DWORD *)(a1 + 80) = a7 + 1;
  *(unsigned char *)(a1 + 84) = a8;
  *(unsigned char *)(a1 + 85) = a9;
  *(void *)(a1 + 88) = a10;
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 100) = a11;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = a12;
  *(unsigned char *)(a1 + 164) = a13;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 76) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 2++*(_DWORD *)(result + 24) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 272) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 312) = 0;
  kaldi::CuMatrix<float>::CuMatrix(a1 + 320, a14, 111);
  *(unsigned char *)(a1 + 368) = a15;
  *(void *)(a1 + 3--*(_DWORD *)(a9 + 76) = *a16;
  uint64_t v25 = a16[1];
  *(void *)(a1 + 384) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 392) = a17;
  if (a7 >= 5 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Skipping ", 9);
    char v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" frames may not give you good results.", 38);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v44);
  }
  if (*(unsigned char *)(a1 + 100) && *(_DWORD *)(a1 + 80) == 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"skip_across_batch cannot be set if you aren't frame skipping", 60);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v44);
  }
  if (*(unsigned char *)(a1 + 368) && *(int *)(a1 + 160) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"append-pad-info cannot be set if strict-batch-size is <= 0", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v44);
  }
  if (*(unsigned char *)(a1 + 164) && *(int *)(a1 + 160) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"zero-pad cannot be set if strict-batch-size is <= 0", 51);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v44);
  }
  char v27 = *(const void **)(a1 + 24);
  if (v27
  {
    char v29 = *(std::__shared_weak_count **)(a1 + 32);
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *))(*(void *)v28 + 152))(v28);
  }
  else
  {
    char v29 = 0;
  }
  int v30 = *(kaldi::nnet1::Nnet **)(a1 + 16);
  if (v30 && (int)((*((void *)v30 + 1) - *(void *)v30) >> 3) >= 1)
  {
    int v31 = 0;
    do
    {
      uint64_t Component = kaldi::nnet1::Nnet::GetComponent(v30, v31);
      if ((*(unsigned int (**)(uint64_t))(*(void *)Component + 24))(Component) == 1026)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
        uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"nnet transformation contains splicing, which is not ", 52);
        uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"supported by OnlineNnetForwardInput. Use a separate splice ", 59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"operation to perform splicing.", 30);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v44);
      }
      ++v31;
      int v30 = *(kaldi::nnet1::Nnet **)(a1 + 16);
    }
    while (v31 < (int)((*((void *)v30 + 1) - *(void *)v30) >> 3));
  }
  int v33 = *(const void **)(a1 + 24);
  if (v33
  {
    uint64_t v35 = v34;
    int v36 = *(std::__shared_weak_count **)(a1 + 32);
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((int)((v34[2] - v34[1]) >> 3) >= 1)
    {
      int v37 = 0;
      do
      {
        uint64_t v38 = kaldi::nnet1::Nnet::GetComponent((kaldi::nnet1::Nnet *)(v35 + 1), v37);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v38 + 24))(v38) == 1026)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
          int v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"nnet contains splicing, which is not supported by ", 50);
          uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"OnlineNnetForwardInput. Use a separate splice operation to ", 59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"perform splicing.", 17);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v44);
        }
        ++v37;
      }
      while (v37 < (int)((v35[2] - v35[1]) >> 3));
    }
  }
  else
  {
    int v36 = 0;
  }
  if (*(int *)(a1 + 160) >= 1) {
    operator new();
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  return a1;
}

void sub_1B20B47F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v11 + 384);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v15);
  kaldi::CuMatrix<float>::~CuMatrix(v14);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  kaldi::CuMatrix<float>::~CuMatrix(a11);
  uint64_t v19 = *(void *)(v11 + 168);
  *(void *)(v11 + 168) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 72))(v19);
  }
  kaldi::Vector<float>::Destroy(v13 + 24);
  kaldi::Vector<float>::Destroy(v13);
  if (*(char *)(v11 + 63) < 0) {
    operator delete(*v12);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v11 + 32);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v11);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineSpliceInput,std::allocator<kaldi::OnlineSpliceInput>,kaldi::OnlineFeatInputItf *,int &,int &,void>@<X0>(kaldi::OnlineFeatInputItf **a1@<X1>, int *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  int v8 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineSpliceInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,int &,std::allocator<kaldi::OnlineSpliceInput>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B20B4908(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineSpliceInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,int &,std::allocator<kaldi::OnlineSpliceInput>,0>(void *a1, kaldi::OnlineFeatInputItf **a2, int *a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EB20;
  kaldi::OnlineSpliceInput::OnlineSpliceInput((kaldi::OnlineSpliceInput *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_1B20B4970(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineSpliceInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EB20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineSpliceInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EB20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineSpliceInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

kaldi::OnlineSpliceInput *kaldi::OnlineSpliceInput::OnlineSpliceInput(kaldi::OnlineSpliceInput *this, kaldi::OnlineFeatInputItf *a2, int a3, int a4)
{
  *(void *)this = &unk_1F0A47AF0;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 4) = (*(uint64_t (**)(kaldi::OnlineFeatInputItf *))(*(void *)a2 + 8))(a2);
  *((_DWORD *)this + 5) = a3;
  *((_DWORD *)this + 6) = a4;
  kaldi::Matrix<float>::Matrix((uint64_t)this + 32);
  return this;
}

void sub_1B20B4AA8(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineTransformInput,std::allocator<kaldi::OnlineTransformInput>,kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,void>@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x70uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineTransformInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,std::allocator<kaldi::OnlineTransformInput>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20B4B0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineTransformInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,std::allocator<kaldi::OnlineTransformInput>,0>(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EC70;
  kaldi::OnlineTransformInput::OnlineTransformInput(a1 + 3, *a2);
  return a1;
}

void sub_1B20B4B6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineTransformInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EC70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineTransformInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EC70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineTransformInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void std::__shared_ptr_emplace<kaldi::OnlineCacheInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E9D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineCacheInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E9D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineCacheInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void *std::allocate_shared[abi:ne180100]<quasar::ComputeAheadFeatInput,std::allocator<quasar::ComputeAheadFeatInput>,std::shared_ptr<kaldi::OnlineFeatInputItf> &,BOOL const&,int,int &,void>@<X0>(uint64_t a1@<X1>, unsigned __int8 *a2@<X2>, int *a3@<X3>, unsigned int *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x100uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<kaldi::OnlineFeatInputItf> &,BOOL const&,int,int &,std::allocator<quasar::ComputeAheadFeatInput>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1B20B4D20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<kaldi::OnlineFeatInputItf> &,BOOL const&,int,int &,std::allocator<quasar::ComputeAheadFeatInput>,0>(void *a1, uint64_t a2, unsigned __int8 *a3, int *a4, unsigned int *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60D40;
  quasar::ComputeAheadFeatInput::ComputeAheadFeatInput(a1 + 3, a2, *a3, *a4, *a5);
  return a1;
}

void sub_1B20B4D88(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60D40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

uint64_t kaldi::quasar::MinEntropyPartitioning::GetRange(uint64_t this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || (uint64_t)(*(void *)(this + 32) - *(void *)(this + 24)) >> 2 < (unint64_t)a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Invalid partition id ", 21);
    uint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" has to be in range [0,", 23);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "]");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return this;
}

uint64_t TNewWords::TNewWords(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t *TNewWords::findAndAddWords(uint64_t a1, int *a2, uint64_t a3, char *a4, char a5)
{
  if (TLexicon::checkName(*(void *)(a1 + 24), a2, 0, 0xFFFFFFFFFFFFFFFFLL)) {
    return 0;
  }
  std::string __p = 0;
  int v31 = 0;
  uint64_t v32 = 0;
  uint64_t v11 = *(void **)(a1 + 24);
  uint64_t v12 = TStringParam::get((TStringParam *)(*(void *)(a1 + 32) + 10736));
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v13 + 16456));
  size_t v15 = *(int *)(v13 + 4 * TParam::getValidConfig((TParam *)(v13 + 16456), ActiveConfigHandle) + 16616);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = TParam::getActiveConfigHandle((TParam *)(v16 + 16104));
  uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v16 + 16104), v17);
  TLexicon::findHeadClonesCollated(v11, a2, v12, v15, *(int *)(v16 + 4 * ValidConfig + 16264), &__p);
  uint64_t v19 = __p;
  uint64_t v20 = v31;
  if (v31 == __p)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    uint64_t v10 = 0;
    do
    {
      if ((v19[v21 + 16] & 0xC0) == 0)
      {
        if (!v10)
        {
          uint64_t v10 = (uint64_t *)TGraph::addVertex(*(TGraph **)(a1 + 8), a4);
          uint64_t v19 = __p;
        }
        long long v23 = &v19[v21];
        v23[24] += a5;
        uint64_t v24 = *(void **)(a1 + 8);
        uint64_t v25 = *(void *)v23;
        int v27 = 1;
        uint64_t v28 = v25;
        long long v29 = *((_OWORD *)v23 + 1);
        TGraph::addEdge(v24, a3, v10, (uint64_t)&v27);
        uint64_t v19 = __p;
        uint64_t v20 = v31;
      }
      ++v22;
      v21 += 32;
    }
    while (v22 < (v20 - v19) >> 5);
  }
  std::vector<TLexiconMatch>::resize((uint64_t)&__p, 0);
  if (__p)
  {
    int v31 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_1B20B50E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL TNewWords::addAlphanumWord(TNewWords *this)
{
  uint64_t v2 = (TParam *)(*((void *)this + 4) + 1872);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v2);
  if (!*((unsigned char *)v2 + TParam::getValidConfig(v2, ActiveConfigHandle) + 152)) {
    return 0;
  }
  long long v4 = *(char **)(*(void *)this + 16);
  uint64_t v28 = (int *)v30;
  long long v29 = xmmword_1B25607E0;
  char v31 = 1;
  if (!*v4)
  {
    BOOL v12 = 0;
LABEL_36:
    if (v28 != (int *)v30 && v28 != 0) {
      MEMORY[0x1B3EA8630]();
    }
    return v12;
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t Segment = TSegmenter::getSegment(*((TSegmenter **)this + 2), v4);
    uint64_t v7 = Segment;
    int v8 = *(_DWORD *)(Segment + 24);
    if (v8 != 1 && (!v5 || v8 != 2)) {
      break;
    }
    uint64_t v9 = 0;
    uint64_t v10 = *(int **)Segment;
    while (v10[v9++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), v10, v9 - 1);
    ++v5;
    long long v4 = *(char **)(v7 + 8);
  }
  while (*v4);
  BOOL v12 = v5 > 1;
  if (v5 >= 2)
  {
    if (*((void *)&v29 + 1) >= (unint64_t)v29)
    {
      if (v31)
      {
        int v24 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), &v24, 1uLL);
        uint64_t v13 = v28;
        --*((void *)&v29 + 1);
      }
      else
      {
        uint64_t v13 = v28;
        if ((void)v29) {
          v28[(void)v29 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v13 = v28;
      v28[*((void *)&v29 + 1)] = 0;
    }
    if (!TNewWords::findAndAddWords((uint64_t)this, v13, *(void *)this, v4, 0))
    {
      uint64_t v14 = *((void *)this + 3);
      if (*((void *)&v29 + 1) >= (unint64_t)v29)
      {
        if (v31)
        {
          int v24 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), &v24, 1uLL);
          size_t v15 = v28;
          --*((void *)&v29 + 1);
        }
        else
        {
          size_t v15 = v28;
          if ((void)v29) {
            v28[(void)v29 - 1] = 0;
          }
        }
      }
      else
      {
        size_t v15 = v28;
        v28[*((void *)&v29 + 1)] = 0;
      }
      if (!TLexicon::checkName(v14, v15, 0, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v16 = (uint64_t *)TGraph::addVertex(*((TGraph **)this + 1), v4);
        uint64_t v17 = (TAllocator *)*((void *)this + 3);
        if (*((void *)&v29 + 1) >= (unint64_t)v29)
        {
          if (v31)
          {
            int v24 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), &v24, 1uLL);
            uint64_t v18 = v28;
            --*((void *)&v29 + 1);
          }
          else
          {
            uint64_t v18 = v28;
            if ((void)v29) {
              v28[(void)v29 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v18 = v28;
          v28[*((void *)&v29 + 1)] = 0;
        }
        uint64_t v19 = TLexicon::addTempWord(v17, v18, 0, 0, 0);
        uint64_t v20 = *(void *)this;
        uint64_t v21 = (void *)*((void *)this + 1);
        int v24 = 4;
        uint64_t v25 = v19;
        uint64_t v26 = 0;
        char v27 = 0;
        TGraph::addEdge(v21, v20, v16, (uint64_t)&v24);
      }
    }
    *((void *)this + 5) = v4;
  }
  if (v31) {
    goto LABEL_36;
  }
  return v12;
}

void sub_1B20B53E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (LOBYTE(STACK[0x438]))
  {
    if (a13 != v13 && a13 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TNewWords::addHyphenatedWord(TSegmenter **this)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (char *)*((void *)*this + 2);
  if (!*v1) {
    return 0;
  }
  memset(v71, 0, sizeof(v71));
  uint64_t Segment = TSegmenter::getSegment(this[2], v1);
  if (*(_DWORD *)(Segment + 24) == 1)
  {
    char v4 = 0;
    char v5 = 0;
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = v6;
      uint64_t v8 = *(void *)Segment;
      uint64_t v1 = *(char **)(Segment + 8);
      *((void *)v71 + v7) = *(void *)Segment;
      v4 |= *(_DWORD *)(v8 + 4) == 0;
      uint64_t v9 = (const __int32 **)TSegmenter::getSegment(this[2], v1);
      if (!v9) {
        break;
      }
      uint64_t v10 = v9;
      if (wcscmp(*v9, (const __int32 *)"-")) {
        break;
      }
      uint64_t v11 = TSegmenter::getSegment(this[2], (char *)v10[1]);
      if (!v11) {
        break;
      }
      uint64_t v12 = v11;
      if (*(_DWORD *)(v11 + 24) == 5) {
        break;
      }
      int v13 = **(_DWORD **)v11;
      {
        operator new();
      }
      BOOL v14 = v13 == 10 || v13 == 13;
      BOOL v15 = v14;
      v5 |= v15;
      uint64_t v16 = v14 ? (const __int32 **)v12 : v10;
      uint64_t v17 = (char *)v16[1];
      if (!*v17 || v7 >= 0xF) {
        break;
      }
      uint64_t Segment = TSegmenter::getSegment(this[2], v17);
      unint64_t v6 = v7 + 1;
    }
    while (*(_DWORD *)(Segment + 24) == 1);
    unint64_t v19 = v7 + 1;
  }
  else
  {
    char v5 = 0;
    char v4 = 0;
    unint64_t v19 = 0;
  }
  if (v19 < 2) {
    return 0;
  }
  long long v67 = (int *)v69;
  long long v68 = xmmword_1B25607E0;
  char v70 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&v67, *(int **)&v71[0]);
  for (uint64_t i = 1; i != v19; ++i)
  {
    int v63 = 45;
    TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), &v63, 1uLL);
    uint64_t v23 = 0;
    int v24 = (int *)*((void *)v71 + i);
    while (v24[v23++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), v24, v23 - 1);
  }
  if (*((void *)&v68 + 1) >= (unint64_t)v68)
  {
    if (v70)
    {
      int v63 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), &v63, 1uLL);
      uint64_t v26 = v67;
      --*((void *)&v68 + 1);
    }
    else
    {
      uint64_t v26 = v67;
      if ((void)v68) {
        v67[(void)v68 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v26 = v67;
    v67[*((void *)&v68 + 1)] = 0;
  }
  if (TNewWords::findAndAddWords((uint64_t)this, v26, (uint64_t)*this, v1, 0)) {
    goto LABEL_42;
  }
  if (v4) {
    goto LABEL_44;
  }
  if ((v5 & 1) != 0
    || (uint64_t v38 = this[4],
        uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TSegmenter *)((char *)v38 + 1376)),
        *((unsigned char *)v38 + TParam::getValidConfig((TSegmenter *)((char *)v38 + 1376), ActiveConfigHandle) + 1528)))
  {
    TBuffer<wchar_t>::assign((uint64_t)&v67, *(int **)&v71[0]);
    for (uint64_t j = 1; j != v19; ++j)
    {
      uint64_t v41 = 0;
      int v42 = (int *)*((void *)v71 + j);
      while (v42[v41++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), v42, v41 - 1);
    }
    if (*((void *)&v68 + 1) >= (unint64_t)v68)
    {
      if (v70)
      {
        int v63 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), &v63, 1uLL);
        uint64_t v44 = v67;
        --*((void *)&v68 + 1);
      }
      else
      {
        uint64_t v44 = v67;
        if ((void)v68) {
          v67[(void)v68 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v44 = v67;
      v67[*((void *)&v68 + 1)] = 0;
    }
    if (TNewWords::findAndAddWords((uint64_t)this, v44, (uint64_t)*this, v1, 1)) {
      goto LABEL_42;
    }
  }
  long long v51 = this[4];
  uint64_t v52 = TParam::getActiveConfigHandle((TSegmenter *)((char *)v51 + 1624));
  if (!*((unsigned char *)v51 + TParam::getValidConfig((TSegmenter *)((char *)v51 + 1624), v52) + 1776))
  {
LABEL_44:
    int v27 = 4;
  }
  else
  {
    char v53 = 0;
    long long v54 = *this;
    unint64_t v55 = v19 - 1;
    unint64_t v56 = v19;
    long long v57 = (int **)v71;
    do
    {
      if (v55) {
        long long v58 = 0;
      }
      else {
        long long v58 = v1;
      }
      long long v59 = TNewWords::findAndAddWords((uint64_t)this, *v57, (uint64_t)v54, v58, 1);
      if (!v59)
      {
        long long v60 = *v57;
        if (TLexicon::checkName((uint64_t)this[3], *v57, 0, 0xFFFFFFFFFFFFFFFFLL))
        {
          long long v59 = 0;
        }
        else
        {
          long long v61 = TLexicon::addTempWord(this[3], v60, 0, 0, 0);
          long long v59 = (uint64_t *)TGraph::addVertex(this[1], v58);
          long long v62 = this[1];
          int v63 = 0;
          long long v64 = v61;
          uint64_t v65 = 0;
          char v66 = 0;
          TGraph::addEdge(v62, (uint64_t)v54, v59, (uint64_t)&v63);
          char v53 = 1;
        }
      }
      ++v57;
      --v55;
      long long v54 = (TSegmenter *)v59;
      --v56;
    }
    while (v56);
    int v27 = 0;
    uint64_t v20 = 0;
    if ((v53 & 1) == 0) {
      goto LABEL_53;
    }
  }
  uint64_t v28 = this[4];
  uint64_t v29 = TParam::getActiveConfigHandle((TSegmenter *)((char *)v28 + 1872));
  if (!*((unsigned char *)v28 + TParam::getValidConfig((TSegmenter *)((char *)v28 + 1872), v29) + 2024)) {
    goto LABEL_52;
  }
  int v30 = this[4];
  uint64_t v31 = TParam::getActiveConfigHandle((TSegmenter *)((char *)v30 + 1128));
  if (!*((unsigned char *)v30 + TParam::getValidConfig((TSegmenter *)((char *)v30 + 1128), v31) + 1280)) {
    goto LABEL_52;
  }
  TBuffer<wchar_t>::assign((uint64_t)&v67, *(int **)&v71[0]);
  for (uint64_t k = 1; k != v19; ++k)
  {
    int v63 = 45;
    TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), &v63, 1uLL);
    uint64_t v33 = 0;
    uint64_t v34 = (int *)*((void *)v71 + k);
    while (v34[v33++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v67, *((unint64_t *)&v68 + 1), v34, v33 - 1);
  }
  uint64_t v36 = (uint64_t)this[3];
  int v37 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v67);
  if (TLexicon::checkName(v36, v37, 0, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_52:
    uint64_t v20 = 0;
    goto LABEL_53;
  }
  long long v45 = this[3];
  char v46 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v67);
  long long v47 = TLexicon::addTempWord(v45, v46, 0, 0, 0);
  long long v49 = *this;
  long long v48 = this[1];
  long long v50 = (uint64_t *)TGraph::addVertex(v48, v1);
  int v63 = v27;
  long long v64 = v47;
  uint64_t v65 = 0;
  char v66 = 0;
  TGraph::addEdge(v48, (uint64_t)v49, v50, (uint64_t)&v63);
LABEL_42:
  this[5] = (TSegmenter *)v1;
  uint64_t v20 = 1;
LABEL_53:
  if (v70 && v67 != (int *)v69 && v67) {
    MEMORY[0x1B3EA8630]();
  }
  return v20;
}

void sub_1B20B5A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t TNewWords::addContractionWord(TNewWords *this)
{
  uint64_t v2 = (TParam *)(*((void *)this + 4) + 1872);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v2);
  if (!*((unsigned char *)v2 + TParam::getValidConfig(v2, ActiveConfigHandle) + 152)) {
    return 0;
  }
  char v4 = TStringParam::get((TStringParam *)(*((void *)this + 4) + 2368));
  if (!*(_DWORD *)v4) {
    return 0;
  }
  char v5 = (__int32 *)v4;
  uint64_t Segment = (__int32 **)TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(*(void *)this + 16));
  if ((*Segment)[1]) {
    return 0;
  }
  uint64_t v9 = Segment;
  uint64_t v10 = wcschr(v5, **Segment);
  if (!v10) {
    return 0;
  }
  if (*(void *)(*(void *)this + 16) != *(void *)(*(void *)this + 24)) {
    return 0;
  }
  uint64_t v11 = v10;
  uint64_t Vertex = TGraph::getVertex(*((TGraph **)this + 1), (const char *)v9[1]);
  if (!Vertex) {
    return 0;
  }
  uint64_t v13 = Vertex;
  if (*(void *)(Vertex + 16) != *(void *)(Vertex + 24)) {
    return 0;
  }
  uint64_t OutEdge = TVertex::getOutEdge(*(void *)this);
  if (OutEdge)
  {
    if (*(void *)(OutEdge + 24) != v13) {
      return 0;
    }
    while (1)
    {
      uint64_t OutEdge = *(void *)(OutEdge + 8);
      if (!OutEdge) {
        break;
      }
      if (!*(unsigned char *)(OutEdge + 32))
      {
        uint64_t PrevVertex = 0;
        if (*(void *)(OutEdge + 24) != v13) {
          return PrevVertex;
        }
      }
    }
  }
  uint64_t v15 = TVertex::getInEdge(v13);
  uint64_t v16 = *(void *)this;
  if (!v15) {
    goto LABEL_22;
  }
  if (*(void *)(v15 + 16) != v16) {
    return 0;
  }
  while (1)
  {
    uint64_t v15 = *(void *)v15;
    if (!v15) {
      break;
    }
    if (!*(unsigned char *)(v15 + 32))
    {
      uint64_t PrevVertex = 0;
      if (*(void *)(v15 + 16) != v16) {
        return PrevVertex;
      }
    }
  }
LABEL_22:
  uint64_t PrevVertex = TGraph::getPrevVertex(*((TGraph **)this + 1), *(void *)(v16 + 24) - 1);
  if (!PrevVertex) {
    return PrevVertex;
  }
  uint64_t v17 = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(PrevVertex + 16));
  if (!v17 || *(_DWORD *)(v17 + 24) != 1 || *(void *)(v17 + 8) != *(void *)(*(void *)this + 24)) {
    return 0;
  }
  uint64_t v18 = 0;
  uint64_t v38 = v40;
  long long v39 = xmmword_1B25607E0;
  char v41 = 1;
  unint64_t v19 = *(int **)v17;
  while (v19[v18++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&v38, 0, v19, v18 - 1);
  int v34 = *v11;
  TBuffer<wchar_t>::insert((uint64_t)&v38, *((unint64_t *)&v39 + 1), &v34, 1uLL);
  uint64_t v21 = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(v13 + 16));
  uint64_t v22 = v21;
  if (!v21 || *(_DWORD *)(v21 + 24) != 1) {
    goto LABEL_35;
  }
  uint64_t v23 = 0;
  int v24 = *(int **)v21;
  while (v24[v23++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&v38, *((unint64_t *)&v39 + 1), v24, v23 - 1);
  uint64_t v26 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v38);
  if (TNewWords::findAndAddWords((uint64_t)this, v26, PrevVertex, *(char **)(v22 + 8), 0)) {
    goto LABEL_33;
  }
  uint64_t v27 = *((void *)this + 3);
  uint64_t v28 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v38);
  if (TLexicon::checkName(v27, v28, 0, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_35:
    uint64_t PrevVertex = 0;
    goto LABEL_36;
  }
  uint64_t v29 = (TAllocator *)*((void *)this + 3);
  int v30 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v38);
  uint64_t v31 = TLexicon::addTempWord(v29, v30, 0, 0, 0);
  uint64_t v32 = (TGraph *)*((void *)this + 1);
  uint64_t v33 = (uint64_t *)TGraph::addVertex(v32, *(char **)(v22 + 8));
  int v34 = 4;
  uint64_t v35 = v31;
  uint64_t v36 = 0;
  char v37 = 0;
  TGraph::addEdge(v32, PrevVertex, v33, (uint64_t)&v34);
LABEL_33:
  *((void *)this + 5) = *(void *)(v22 + 8);
  uint64_t PrevVertex = 1;
LABEL_36:
  if (v41 && v38 != v40 && v38) {
    MEMORY[0x1B3EA8630]();
  }
  return PrevVertex;
}

void sub_1B20B5E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (LOBYTE(STACK[0x438]) && a13 != v13)
  {
    if (a13) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

BOOL TNewWords::addAcronymWord(TSegmenter **this)
{
  uint64_t v1 = (char *)*((void *)*this + 2);
  long long v39 = (int *)v41;
  long long v40 = xmmword_1B25607E0;
  char v42 = 1;
  if (!*v1)
  {
    BOOL v17 = 0;
LABEL_62:
    if (v39 != (int *)v41 && v39 != 0) {
      MEMORY[0x1B3EA8630]();
    }
    return v17;
  }
  char v3 = 1;
  do
  {
    uint64_t Segment = TSegmenter::getSegment(this[2], v1);
    uint64_t v5 = Segment;
    if (*(_DWORD *)(Segment + 24) != 1) {
      break;
    }
    unint64_t v6 = *(int **)Segment;
    if (wcslen(*(const __int32 **)Segment) != 1) {
      break;
    }
    int v7 = *v6;
    {
      operator new();
    }
    char isUpper = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7);
    uint64_t v9 = 0;
    uint64_t v10 = *(int **)v5;
    while (v10[v9++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), v10, v9 - 1);
    uint64_t v1 = *(char **)(v5 + 8);
    uint64_t v12 = (const __int32 **)TSegmenter::getSegment(this[2], v1);
    uint64_t v13 = v12;
    v3 &= isUpper;
    if (!v12) {
      break;
    }
    if (wcscmp(*v12, (const __int32 *)".")) {
      break;
    }
    uint64_t v14 = 0;
    uint64_t v15 = (int *)*v13;
    while (v15[v14++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), v15, v14 - 1);
    uint64_t v1 = (char *)v13[1];
  }
  while (*v1);
  BOOL v17 = *((void *)&v40 + 1) > 3uLL;
  if (*((void *)&v40 + 1) >= 4uLL)
  {
    if ((v3 & 1) == 0) {
      goto LABEL_38;
    }
    unint64_t v18 = 0;
    uint64_t v35 = (int *)v37;
    long long v36 = xmmword_1B25607E0;
    char v38 = 1;
    do
    {
      signed int v19 = v39[v18];
      {
        operator new();
      }
      if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v19))
      {
        v43[0] = v39[v18];
        TBuffer<wchar_t>::insert((uint64_t)&v35, *((unint64_t *)&v36 + 1), v43, 1uLL);
      }
      ++v18;
    }
    while (v18 < *((void *)&v40 + 1));
    if (*((void *)&v36 + 1) >= (unint64_t)v36)
    {
      if (v38)
      {
        v43[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v35, *((unint64_t *)&v36 + 1), v43, 1uLL);
        uint64_t v20 = v35;
        --*((void *)&v36 + 1);
      }
      else
      {
        uint64_t v20 = v35;
        if ((void)v36) {
          v35[(void)v36 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v20 = v35;
      v35[*((void *)&v36 + 1)] = 0;
    }
    uint64_t v21 = TNewWords::findAndAddWords((uint64_t)this, v20, (uint64_t)*this, v1, 1);
    if (v38 && v35 != (int *)v37 && v35) {
      MEMORY[0x1B3EA8630]();
    }
    if (!v21)
    {
LABEL_38:
      uint64_t v22 = this[4];
      uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TSegmenter *)((char *)v22 + 1872));
      if (*((unsigned char *)v22 + TParam::getValidConfig((TSegmenter *)((char *)v22 + 1872), ActiveConfigHandle) + 2024))
      {
        if (*((void *)&v40 + 1) >= (unint64_t)v40)
        {
          if (v42)
          {
            LODWORD(v35) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), (int *)&v35, 1uLL);
            int v24 = v39;
            --*((void *)&v40 + 1);
          }
          else
          {
            int v24 = v39;
            if ((void)v40) {
              v39[(void)v40 - 1] = 0;
            }
          }
        }
        else
        {
          int v24 = v39;
          v39[*((void *)&v40 + 1)] = 0;
        }
        if (!TNewWords::findAndAddWords((uint64_t)this, v24, (uint64_t)*this, v1, 0))
        {
          uint64_t v25 = (uint64_t)this[3];
          if (*((void *)&v40 + 1) >= (unint64_t)v40)
          {
            if (v42)
            {
              LODWORD(v35) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), (int *)&v35, 1uLL);
              uint64_t v26 = v39;
              --*((void *)&v40 + 1);
            }
            else
            {
              uint64_t v26 = v39;
              if ((void)v40) {
                v39[(void)v40 - 1] = 0;
              }
            }
          }
          else
          {
            uint64_t v26 = v39;
            v39[*((void *)&v40 + 1)] = 0;
          }
          if (!TLexicon::checkName(v25, v26, 0, 0xFFFFFFFFFFFFFFFFLL))
          {
            uint64_t v27 = (uint64_t *)TGraph::addVertex(this[1], v1);
            uint64_t v28 = this[3];
            if (*((void *)&v40 + 1) >= (unint64_t)v40)
            {
              if (v42)
              {
                LODWORD(v35) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), (int *)&v35, 1uLL);
                uint64_t v29 = v39;
                --*((void *)&v40 + 1);
              }
              else
              {
                uint64_t v29 = v39;
                if ((void)v40) {
                  v39[(void)v40 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v29 = v39;
              v39[*((void *)&v40 + 1)] = 0;
            }
            int v30 = TLexicon::addTempWord(v28, v29, 0, 0, 0);
            uint64_t v31 = *this;
            uint64_t v32 = this[1];
            LODWORD(v35) = 4;
            long long v36 = (unint64_t)v30;
            v37[0] = 0;
            TGraph::addEdge(v32, (uint64_t)v31, v27, (uint64_t)&v35);
          }
        }
      }
    }
    this[5] = (TSegmenter *)v1;
  }
  if (v42) {
    goto LABEL_62;
  }
  return v17;
}

void sub_1B20B639C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  MEMORY[0x1B3EA8670](v11, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x428]) && a11 != v13 && a11) {
    MEMORY[0x1B3EA8630]();
  }
  if (LOBYTE(STACK[0x848]))
  {
    if (STACK[0x430] != v12 && STACK[0x430] != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TNewWords::addAbbreviationWord(TNewWords *this)
{
  uint64_t v2 = (TParam *)(*((void *)this + 4) + 1872);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v2);
  if (!*((unsigned char *)v2 + TParam::getValidConfig(v2, ActiveConfigHandle) + 152)) {
    return 0;
  }
  uint64_t result = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(*(void *)this + 16));
  if (!result) {
    return result;
  }
  uint64_t v5 = (int **)result;
  unint64_t v6 = *(char **)(result + 8);
  unint64_t v7 = (unint64_t)&v6[-*(void *)(*(void *)this + 16)];
  BOOL v8 = *(_DWORD *)(result + 24) == 1 && v7 >= 2;
  if (!v8 || v7 > 5) {
    return 0;
  }
  uint64_t result = TSegmenter::getSegment(*((TSegmenter **)this + 2), v6);
  if (!result) {
    return result;
  }
  uint64_t v10 = result;
  if (wcscmp(*(const __int32 **)result, (const __int32 *)".")) {
    return 0;
  }
  uint64_t v11 = *(char **)(v10 + 8);
  if (!*v11) {
    return 0;
  }
  uint64_t OutEdge = TVertex::getOutEdge(*(void *)this);
  if (OutEdge)
  {
    uint64_t v13 = OutEdge;
    if ((*(unsigned char *)(OutEdge + 64) & 0xC0) == 0) {
      return 0;
    }
    while (1)
    {
      uint64_t v13 = *(void *)(v13 + 8);
      if (!v13) {
        break;
      }
      if (!*(unsigned char *)(v13 + 32))
      {
        uint64_t result = 0;
        if ((*(unsigned char *)(v13 + 64) & 0xC0) == 0) {
          return result;
        }
      }
    }
  }
  if (!memchr(";:,!?", *v11, 6uLL))
  {
    uint64_t result = TSegmenter::getSegment(*((TSegmenter **)this + 2), v11);
    if (!result) {
      return result;
    }
    uint64_t Segment = result;
    if (*(_DWORD *)(result + 24)) {
      return 0;
    }
    while (1)
    {
      int v27 = *(_DWORD *)(Segment + 24);
      int v28 = **(_DWORD **)Segment;
      uint64_t GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)result);
      if (v27) {
        break;
      }
      uint64_t result = 0;
      if (v28 <= 8202)
      {
        if (v28 != 32 && v28 != 160) {
          return result;
        }
      }
      else
      {
        BOOL v30 = v28 == 8203 || v28 == 65279;
        if (!v30 && v28 != 12288) {
          return result;
        }
      }
      uint64_t Segment = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(Segment + 8));
      uint64_t result = 0;
      if (!Segment) {
        return result;
      }
    }
    if (TLocaleInfo::isUpper(GlobalLocaleInfo, v28)) {
      return 0;
    }
  }
  uint64_t v35 = v37;
  long long v36 = xmmword_1B25607E0;
  char v38 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&v35, *v5);
  uint64_t v14 = 0;
  uint64_t v15 = *(int **)v10;
  while (v15[v14++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&v35, *((unint64_t *)&v36 + 1), v15, v14 - 1);
  BOOL v17 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v35);
  if (!TNewWords::findAndAddWords((uint64_t)this, v17, *(void *)this, *(char **)(v10 + 8), 0))
  {
    uint64_t v18 = *((void *)this + 3);
    signed int v19 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v35);
    if (!TLexicon::checkName(v18, v19, 0, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v20 = (uint64_t *)TGraph::addVertex(*((TGraph **)this + 1), *(char **)(v10 + 8));
      uint64_t v21 = (TAllocator *)*((void *)this + 3);
      uint64_t v22 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v35);
      uint64_t v23 = TLexicon::addTempWord(v21, v22, 0, 0, 0);
      uint64_t v24 = *(void *)this;
      uint64_t v25 = (void *)*((void *)this + 1);
      int v31 = 4;
      uint64_t v32 = v23;
      uint64_t v33 = 0;
      char v34 = 0;
      TGraph::addEdge(v25, v24, v20, (uint64_t)&v31);
    }
  }
  *((void *)this + 5) = *(void *)(v10 + 8);
  if (v38 && v35 != v37 && v35) {
    MEMORY[0x1B3EA8630]();
  }
  return 1;
}

void sub_1B20B6784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (LOBYTE(STACK[0x438]) && a13 != v13)
  {
    if (a13) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TNewWords::addWords(uint64_t this, TVertex *a2, TGraph *a3, TSegmenter *a4, TLexicon *a5)
{
  *(void *)this = a2;
  *(void *)(this + 8) = a3;
  *(void *)(this + 16) = a4;
  *(void *)(this + ++*(_DWORD *)(result + 24) = a5;
  if (*((void *)a2 + 2) >= *(void *)(this + 40))
  {
    uint64_t v5 = (TSegmenter **)this;
    this = TNewWords::addAlphanumWord((TNewWords *)this);
    if ((this & 1) == 0)
    {
      this = TNewWords::addHyphenatedWord(v5);
      if ((this & 1) == 0)
      {
        this = TNewWords::addContractionWord((TNewWords *)v5);
        if ((this & 1) == 0)
        {
          this = TNewWords::addAcronymWord(v5);
          if ((this & 1) == 0)
          {
            return TNewWords::addAbbreviationWord((TNewWords *)v5);
          }
        }
      }
    }
  }
  return this;
}

double kaldi::quasar::ErrorRegion::ErrorRegion(kaldi::quasar::ErrorRegion *this, int a2, int a3)
{
  *(void *)this = &unk_1F0A50010;
  *((void *)this + 1) = 0x7F800000FFFFFFFFLL;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + quasar::readMatrixFile((uint64_t)&this[6], this + 10) = a2;
  *((_DWORD *)this + 11) = a3;
  *((_DWORD *)this + 12) = a2;
  *((_DWORD *)this + 13) = a3;
  *((void *)this + 3quasar::readMatrixFile((uint64_t)&this[6], this + 9) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 38) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 74) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  return result;
}

kaldi::quasar::ErrorRegion *kaldi::quasar::ErrorRegion::ErrorRegion(kaldi::quasar::ErrorRegion *this, const kaldi::quasar::ErrorRegion *a2)
{
  *(void *)this = &unk_1F0A50010;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 3quasar::readMatrixFile((uint64_t)&this[6], this + 9) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 38) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  kaldi::quasar::ErrorRegion::CopyAndAssign(this, a2);
  return this;
}

void sub_1B20B698C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = v3;
  unint64_t v7 = *v5;
  if (*v5)
  {
    v2[39] = v7;
    operator delete(v7);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  BOOL v8 = (void *)v2[28];
  if (v8)
  {
    v2[29] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)v2[25];
  if (v9)
  {
    v2[26] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)v2[22];
  if (v10)
  {
    v2[23] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)v2[19];
  if (v11)
  {
    v2[20] = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)v2[16];
  if (v12)
  {
    v2[17] = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)v2[13];
  if (v13)
  {
    v2[14] = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)v2[10];
  if (v14)
  {
    v2[11] = v14;
    operator delete(v14);
  }
  uint64_t v15 = *v4;
  if (*v4)
  {
    v2[8] = v15;
    operator delete(v15);
  }
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

float kaldi::quasar::ErrorRegion::CopyAndAssign(kaldi::quasar::ErrorRegion *this, const kaldi::quasar::ErrorRegion *a2)
{
  char v4 = (void *)((char *)this + 16);
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::resize((uint64_t *)this + 2, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3));
  uint64_t v6 = *((void *)this + 2);
  uint64_t v5 = *((void *)this + 3);
  if (v5 != v6)
  {
    unint64_t v7 = 0;
    do
    {
      BOOL v8 = *(uint64_t ***)(*((void *)a2 + 2) + 40 * v7 + 16);
      if (v8)
      {
        do
        {
          uint64_t v9 = *v4 + 40 * v7;
          uint64_t v11 = (*(uint64_t (**)(uint64_t *))(*v8[2] + 32))(v8[2]);
          std::__hash_table<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AbstractAttribute * const&>(v9, &v11, &v11);
          BOOL v8 = (uint64_t **)*v8;
        }
        while (v8);
        uint64_t v6 = *((void *)this + 2);
        uint64_t v5 = *((void *)this + 3);
      }
      ++v7;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 3) > v7);
  }
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  if (this == a2)
  {
    float result = *((float *)a2 + 74);
    *((float *)this + 74) = result;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 56, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 104, *((char **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 128, *((char **)a2 + 16), *((void *)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 152, *((char **)a2 + 19), *((void *)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 176, *((char **)a2 + 22), *((void *)a2 + 23), (uint64_t)(*((void *)a2 + 23) - *((void *)a2 + 22)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 200, *((char **)a2 + 25), *((void *)a2 + 26), (uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 224, *((char **)a2 + 28), *((void *)a2 + 29), (uint64_t)(*((void *)a2 + 29) - *((void *)a2 + 28)) >> 2);
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)this + 248, *((void *)a2 + 31), *((void *)a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 32) - *((void *)a2 + 31)) >> 3));
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)this + 272, *((void *)a2 + 34), *((void *)a2 + 35), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 35) - *((void *)a2 + 34)) >> 3));
    *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 304, *((char **)a2 + 38), *((void *)a2 + 39), (uint64_t)(*((void *)a2 + 39) - *((void *)a2 + 38)) >> 2);
  }
  return result;
}

kaldi::quasar::ErrorRegion *kaldi::quasar::ErrorRegion::operator=(kaldi::quasar::ErrorRegion *this, const kaldi::quasar::ErrorRegion *a2)
{
  if (this != a2)
  {
    kaldi::quasar::ErrorRegion::FreeAttributes(this);
    kaldi::quasar::ErrorRegion::CopyAndAssign(this, a2);
  }
  return this;
}

void *kaldi::quasar::ErrorRegion::FreeAttributes(void *this)
{
  uint64_t v1 = this[2];
  if (this[3] != v1)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    do
    {
      char v4 = *(void **)(v1 + 40 * v3 + 16);
      if (v4)
      {
        do
        {
          if (((*(uint64_t (**)(void))(*(void *)v4[2] + 56))(v4[2]) & 1) == 0)
          {
            uint64_t v5 = v4[2];
            if (v5) {
              (*(void (**)(uint64_t))(*(void *)v5 + 72))(v5);
            }
          }
          char v4 = (void *)*v4;
        }
        while (v4);
        uint64_t v1 = v2[2];
      }
      this = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((void *)(v1 + 40 * v3++));
      uint64_t v1 = v2[2];
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v2[3] - v1) >> 3) > v3);
  }
  return this;
}

void kaldi::quasar::ErrorRegion::~ErrorRegion(kaldi::quasar::ErrorRegion *this)
{
  *(void *)this = &unk_1F0A50010;
  kaldi::quasar::ErrorRegion::FreeAttributes(this);
  uint64_t v2 = (void *)*((void *)this + 38);
  if (v2)
  {
    *((void *)this + 3quasar::readMatrixFile((uint64_t)&this[6], this + 9) = v2;
    operator delete(v2);
  }
  uint64_t v11 = (void **)((char *)this + 272);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v11 = (void **)((char *)this + 248);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v11);
  unint64_t v3 = (void *)*((void *)this + 28);
  if (v3)
  {
    *((void *)this + 2quasar::readMatrixFile((uint64_t)&this[6], this + 9) = v3;
    operator delete(v3);
  }
  char v4 = (void *)*((void *)this + 25);
  if (v4)
  {
    *((void *)this + 26) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 22);
  if (v5)
  {
    *((void *)this + 23) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 19);
  if (v6)
  {
    *((void *)this + 20) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 16);
  if (v7)
  {
    *((void *)this + 17) = v7;
    operator delete(v7);
  }
  BOOL v8 = (void *)*((void *)this + 13);
  if (v8)
  {
    *((void *)this + 14) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 10);
  if (v9)
  {
    *((void *)this + 11) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 7);
  if (v10)
  {
    *((void *)this + 8) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void **)((char *)this + 16);
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100](&v11);
}

{
  uint64_t vars8;

  kaldi::quasar::ErrorRegion::~ErrorRegion(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((result - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 40 * a2;
    while (result != v7)
      uint64_t result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(result - 40);
    a1[1] = v7;
  }
  return result;
}

uint64_t kaldi::quasar::ErrorRegion::AddRefArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 72;
  unint64_t v7 = *(void *)(a1 + 72);
  BOOL v8 = *(char **)(a1 + 64);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = *(char **)(a1 + 56);
    uint64_t v11 = (v8 - v10) >> 2;
    if ((unint64_t)(v11 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = v7 - (void)v10;
    unint64_t v13 = (uint64_t)(v7 - (void)v10) >> 1;
    if (v13 <= v11 + 1) {
      unint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v14);
      uint64_t v10 = *(char **)(a1 + 56);
      BOOL v8 = *(char **)(a1 + 64);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[4 * v11];
    BOOL v17 = &v15[4 * v14];
    *(_DWORD *)uint64_t v16 = *(_DWORD *)(a2 + 4);
    uint64_t v9 = v16 + 4;
    while (v8 != v10)
    {
      int v18 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *(void *)(a1 + 56) = v16;
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(_DWORD *)BOOL v8 = *(_DWORD *)(a2 + 4);
    uint64_t v9 = v8 + 4;
  }
  unint64_t v19 = *(void *)(a1 + 120);
  *(void *)(a1 + 64) = v9;
  int v20 = *(_DWORD *)(a2 + 12);
  uint64_t v21 = *(char **)(a1 + 112);
  if ((unint64_t)v21 >= v19)
  {
    uint64_t v23 = *(char **)(a1 + 104);
    uint64_t v24 = (v21 - v23) >> 2;
    if ((unint64_t)(v24 + 1) >> 62) {
      goto LABEL_69;
    }
    unint64_t v25 = v19 - (void)v23;
    unint64_t v26 = (uint64_t)(v19 - (void)v23) >> 1;
    if (v26 <= v24 + 1) {
      unint64_t v26 = v24 + 1;
    }
    if (v25 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v26;
    }
    if (v27)
    {
      int v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 120, v27);
      uint64_t v23 = *(char **)(a1 + 104);
      uint64_t v21 = *(char **)(a1 + 112);
    }
    else
    {
      int v28 = 0;
    }
    uint64_t v29 = &v28[4 * v24];
    BOOL v30 = &v28[4 * v27];
    *(_DWORD *)uint64_t v29 = v20;
    uint64_t v22 = v29 + 4;
    while (v21 != v23)
    {
      int v31 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v29 - 1) = v31;
      v29 -= 4;
    }
    *(void *)(a1 + 104) = v29;
    *(void *)(a1 + 112) = v22;
    *(void *)(a1 + 120) = v30;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v21 = v20;
    uint64_t v22 = v21 + 4;
  }
  unint64_t v32 = *(void *)(a1 + 168);
  *(void *)(a1 + 112) = v22;
  int v33 = *(_DWORD *)(a3 + 8);
  char v34 = *(char **)(a1 + 160);
  if ((unint64_t)v34 >= v32)
  {
    long long v36 = *(char **)(a1 + 152);
    uint64_t v37 = (v34 - v36) >> 2;
    if ((unint64_t)(v37 + 1) >> 62) {
      goto LABEL_69;
    }
    unint64_t v38 = v32 - (void)v36;
    unint64_t v39 = (uint64_t)(v32 - (void)v36) >> 1;
    if (v39 <= v37 + 1) {
      unint64_t v39 = v37 + 1;
    }
    if (v38 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v40 = v39;
    }
    if (v40)
    {
      char v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v40);
      long long v36 = *(char **)(a1 + 152);
      char v34 = *(char **)(a1 + 160);
    }
    else
    {
      char v41 = 0;
    }
    char v42 = &v41[4 * v37];
    uint64_t v43 = &v41[4 * v40];
    *(_DWORD *)char v42 = v33;
    uint64_t v35 = v42 + 4;
    while (v34 != v36)
    {
      int v44 = *((_DWORD *)v34 - 1);
      v34 -= 4;
      *((_DWORD *)v42 - 1) = v44;
      v42 -= 4;
    }
    *(void *)(a1 + 152) = v42;
    *(void *)(a1 + 160) = v35;
    *(void *)(a1 + 168) = v43;
    if (v36) {
      operator delete(v36);
    }
  }
  else
  {
    *(_DWORD *)char v34 = v33;
    uint64_t v35 = v34 + 4;
  }
  unint64_t v45 = *(void *)(a1 + 216);
  *(void *)(a1 + 160) = v35;
  float v46 = *(float *)(a2 + 8) - *(float *)(a3 + 8);
  long long v47 = *(float **)(a1 + 208);
  if ((unint64_t)v47 < v45)
  {
    *long long v47 = v46;
    long long v48 = v47 + 1;
    goto LABEL_65;
  }
  long long v49 = *(float **)(a1 + 200);
  uint64_t v50 = v47 - v49;
  if ((unint64_t)(v50 + 1) >> 62) {
LABEL_69:
  }
    std::vector<int>::__throw_length_error[abi:ne180100]();
  unint64_t v51 = v45 - (void)v49;
  unint64_t v52 = (uint64_t)(v45 - (void)v49) >> 1;
  if (v52 <= v50 + 1) {
    unint64_t v52 = v50 + 1;
  }
  if (v51 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v53 = v52;
  }
  if (v53)
  {
    long long v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 216, v53);
    long long v49 = *(float **)(a1 + 200);
    long long v47 = *(float **)(a1 + 208);
  }
  else
  {
    long long v54 = 0;
  }
  unint64_t v55 = (float *)&v54[4 * v50];
  unint64_t v56 = &v54[4 * v53];
  *unint64_t v55 = v46;
  long long v48 = v55 + 1;
  while (v47 != v49)
  {
    int v57 = *((_DWORD *)v47-- - 1);
    *((_DWORD *)v55-- - 1) = v57;
  }
  *(void *)(a1 + 200) = v55;
  *(void *)(a1 + 208) = v48;
  *(void *)(a1 + 216) = v56;
  if (v49) {
    operator delete(v49);
  }
LABEL_65:
  *(void *)(a1 + 208) = v48;
  long long v58 = (uint64_t *)(a1 + 248);
  uint64_t v59 = a2 + 16;
  unint64_t v60 = *(void *)(a1 + 256);
  if (v60 >= *(void *)(a1 + 264))
  {
    uint64_t result = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v58, v59);
  }
  else
  {
    std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v58, v59);
    uint64_t result = v60 + 24;
  }
  *(void *)(a1 + 256) = result;
  *(_DWORD *)(a1 + 48) += (*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2;
  return result;
}

uint64_t kaldi::quasar::ErrorRegion::AddHypoArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 96;
  unint64_t v7 = *(void *)(a1 + 96);
  BOOL v8 = *(char **)(a1 + 88);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = *(char **)(a1 + 80);
    uint64_t v11 = (v8 - v10) >> 2;
    if ((unint64_t)(v11 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = v7 - (void)v10;
    unint64_t v13 = (uint64_t)(v7 - (void)v10) >> 1;
    if (v13 <= v11 + 1) {
      unint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v14);
      uint64_t v10 = *(char **)(a1 + 80);
      BOOL v8 = *(char **)(a1 + 88);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[4 * v11];
    BOOL v17 = &v15[4 * v14];
    *(_DWORD *)uint64_t v16 = *(_DWORD *)(a2 + 4);
    uint64_t v9 = v16 + 4;
    while (v8 != v10)
    {
      int v18 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *(void *)(a1 + 80) = v16;
    *(void *)(a1 + 88) = v9;
    *(void *)(a1 + 96) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(_DWORD *)BOOL v8 = *(_DWORD *)(a2 + 4);
    uint64_t v9 = v8 + 4;
  }
  unint64_t v19 = *(void *)(a1 + 144);
  *(void *)(a1 + 88) = v9;
  int v20 = *(_DWORD *)(a2 + 12);
  uint64_t v21 = *(char **)(a1 + 136);
  if ((unint64_t)v21 >= v19)
  {
    uint64_t v23 = *(char **)(a1 + 128);
    uint64_t v24 = (v21 - v23) >> 2;
    if ((unint64_t)(v24 + 1) >> 62) {
      goto LABEL_69;
    }
    unint64_t v25 = v19 - (void)v23;
    unint64_t v26 = (uint64_t)(v19 - (void)v23) >> 1;
    if (v26 <= v24 + 1) {
      unint64_t v26 = v24 + 1;
    }
    if (v25 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v26;
    }
    if (v27)
    {
      int v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 144, v27);
      uint64_t v23 = *(char **)(a1 + 128);
      uint64_t v21 = *(char **)(a1 + 136);
    }
    else
    {
      int v28 = 0;
    }
    uint64_t v29 = &v28[4 * v24];
    BOOL v30 = &v28[4 * v27];
    *(_DWORD *)uint64_t v29 = v20;
    uint64_t v22 = v29 + 4;
    while (v21 != v23)
    {
      int v31 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v29 - 1) = v31;
      v29 -= 4;
    }
    *(void *)(a1 + 128) = v29;
    *(void *)(a1 + 136) = v22;
    *(void *)(a1 + 144) = v30;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v21 = v20;
    uint64_t v22 = v21 + 4;
  }
  unint64_t v32 = *(void *)(a1 + 192);
  *(void *)(a1 + 136) = v22;
  int v33 = *(_DWORD *)(a3 + 8);
  char v34 = *(char **)(a1 + 184);
  if ((unint64_t)v34 >= v32)
  {
    long long v36 = *(char **)(a1 + 176);
    uint64_t v37 = (v34 - v36) >> 2;
    if ((unint64_t)(v37 + 1) >> 62) {
      goto LABEL_69;
    }
    unint64_t v38 = v32 - (void)v36;
    unint64_t v39 = (uint64_t)(v32 - (void)v36) >> 1;
    if (v39 <= v37 + 1) {
      unint64_t v39 = v37 + 1;
    }
    if (v38 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v40 = v39;
    }
    if (v40)
    {
      char v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 192, v40);
      long long v36 = *(char **)(a1 + 176);
      char v34 = *(char **)(a1 + 184);
    }
    else
    {
      char v41 = 0;
    }
    char v42 = &v41[4 * v37];
    uint64_t v43 = &v41[4 * v40];
    *(_DWORD *)char v42 = v33;
    uint64_t v35 = v42 + 4;
    while (v34 != v36)
    {
      int v44 = *((_DWORD *)v34 - 1);
      v34 -= 4;
      *((_DWORD *)v42 - 1) = v44;
      v42 -= 4;
    }
    *(void *)(a1 + 1--*(_DWORD *)(a9 + 76) = v42;
    *(void *)(a1 + 184) = v35;
    *(void *)(a1 + 192) = v43;
    if (v36) {
      operator delete(v36);
    }
  }
  else
  {
    *(_DWORD *)char v34 = v33;
    uint64_t v35 = v34 + 4;
  }
  unint64_t v45 = *(void *)(a1 + 240);
  *(void *)(a1 + 184) = v35;
  float v46 = *(float *)(a2 + 8) - *(float *)(a3 + 8);
  long long v47 = *(float **)(a1 + 232);
  if ((unint64_t)v47 < v45)
  {
    *long long v47 = v46;
    long long v48 = v47 + 1;
    goto LABEL_65;
  }
  long long v49 = *(float **)(a1 + 224);
  uint64_t v50 = v47 - v49;
  if ((unint64_t)(v50 + 1) >> 62) {
LABEL_69:
  }
    std::vector<int>::__throw_length_error[abi:ne180100]();
  unint64_t v51 = v45 - (void)v49;
  unint64_t v52 = (uint64_t)(v45 - (void)v49) >> 1;
  if (v52 <= v50 + 1) {
    unint64_t v52 = v50 + 1;
  }
  if (v51 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v53 = v52;
  }
  if (v53)
  {
    long long v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 240, v53);
    long long v49 = *(float **)(a1 + 224);
    long long v47 = *(float **)(a1 + 232);
  }
  else
  {
    long long v54 = 0;
  }
  unint64_t v55 = (float *)&v54[4 * v50];
  unint64_t v56 = &v54[4 * v53];
  *unint64_t v55 = v46;
  long long v48 = v55 + 1;
  while (v47 != v49)
  {
    int v57 = *((_DWORD *)v47-- - 1);
    *((_DWORD *)v55-- - 1) = v57;
  }
  *(void *)(a1 + 2++*(_DWORD *)(result + 24) = v55;
  *(void *)(a1 + 232) = v48;
  *(void *)(a1 + 240) = v56;
  if (v49) {
    operator delete(v49);
  }
LABEL_65:
  *(void *)(a1 + 232) = v48;
  long long v58 = (uint64_t *)(a1 + 272);
  uint64_t v59 = a2 + 16;
  unint64_t v60 = *(void *)(a1 + 280);
  if (v60 >= *(void *)(a1 + 288))
  {
    uint64_t result = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v58, v59);
  }
  else
  {
    std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v58, v59);
    uint64_t result = v60 + 24;
  }
  *(void *)(a1 + 280) = result;
  *(_DWORD *)(a1 + 52) += (*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2;
  return result;
}

void kaldi::quasar::ErrorRegion::AddRefWord(uint64_t a1, void *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a2[1] + 64) + 8 * (int)*a4) + 48);
  v20[0] = *(void *)v8;
  v20[1] = *(void *)(v8 + 8);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, *(const void **)(v8 + 16), *(void *)(v8 + 24), (uint64_t)(*(void *)(v8 + 24) - *(void *)(v8 + 16)) >> 2);
  unsigned int v24 = *(_DWORD *)(v8 + 40);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(*(void *)(a3 + 8) + 64) + 8 * (int)*a4) + 48);
  v15[0] = *(void *)v9;
  v15[1] = *(void *)(v9 + 8);
  BOOL v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v16, *(const void **)(v9 + 16), *(void *)(v9 + 24), (uint64_t)(*(void *)(v9 + 24) - *(void *)(v9 + 16)) >> 2);
  int v19 = *(_DWORD *)(v9 + 40);
  kaldi::quasar::ErrorRegion::AddRefArc(a1, (uint64_t)v20, (uint64_t)v15);
  *a4 = v24;
  (*(void (**)(uint64_t *__return_ptr, void *))(*a2 + 32))(&v12, a2);
  float v27 = *((float *)&v12 + 1);
  int v28 = v12;
  int v26 = 2139095040;
  float v25 = INFINITY;
  v10.n128_u32[0] = v12;
  BOOL v11 = *(float *)&v12 != INFINITY || (v10.n128_f32[0] = v27, v27 != v25) || v14 != __p;
  if (__p)
  {
    unint64_t v14 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    (*(void (**)(uint64_t *__return_ptr, void *, void, __n128))(*a2 + 32))(&v12, a2, *a4, v10);
    *(float *)(*(void *)(a1 + 208) - 4) = *(float *)&v12 + *(float *)(*(void *)(a1 + 208) - 4);
    if (__p)
    {
      unint64_t v14 = __p;
      operator delete(__p);
    }
  }
  if (v16)
  {
    BOOL v17 = v16;
    operator delete(v16);
  }
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
}

void sub_1B20B7834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorRegion::AddHypoWord(uint64_t *a1, void *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a2[1] + 64) + 8 * (int)*a4) + 48);
  v20[0] = *(void *)v8;
  v20[1] = *(void *)(v8 + 8);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, *(const void **)(v8 + 16), *(void *)(v8 + 24), (uint64_t)(*(void *)(v8 + 24) - *(void *)(v8 + 16)) >> 2);
  unsigned int v24 = *(_DWORD *)(v8 + 40);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(*(void *)(a3 + 8) + 64) + 8 * (int)*a4) + 48);
  v15[0] = *(void *)v9;
  v15[1] = *(void *)(v9 + 8);
  BOOL v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v16, *(const void **)(v9 + 16), *(void *)(v9 + 24), (uint64_t)(*(void *)(v9 + 24) - *(void *)(v9 + 16)) >> 2);
  int v19 = *(_DWORD *)(v9 + 40);
  kaldi::quasar::ErrorRegion::AddHypoArc((uint64_t)a1, (uint64_t)v20, (uint64_t)v15);
  *a4 = v24;
  (*(void (**)(uint64_t *__return_ptr, void *))(*a2 + 32))(&v12, a2);
  float v27 = *((float *)&v12 + 1);
  int v28 = v12;
  int v26 = 2139095040;
  float v25 = INFINITY;
  v10.n128_u32[0] = v12;
  BOOL v11 = *(float *)&v12 != INFINITY || (v10.n128_f32[0] = v27, v27 != v25) || v14 != __p;
  if (__p)
  {
    unint64_t v14 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    (*(void (**)(uint64_t *__return_ptr, void *, void, __n128))(*a2 + 32))(&v12, a2, *a4, v10);
    *(float *)(a1[29] - 4) = *(float *)&v12 + *(float *)(a1[29] - 4);
    if (__p)
    {
      unint64_t v14 = __p;
      operator delete(__p);
    }
  }
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::resize(a1 + 2, (a1[11] - a1[10]) >> 2);
  if (v16)
  {
    BOOL v17 = v16;
    operator delete(v16);
  }
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
}

void sub_1B20B7A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

char *kaldi::quasar::ErrorRegion::AddAcousticOnlyDecoding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(float **)a3;
  unint64_t v4 = *(void *)(a3 + 8) - *(void *)a3;
  if ((v4 >> 2))
  {
    uint64_t v5 = (v4 >> 2);
    float v6 = 0.0;
    do
    {
      float v7 = *v3++;
      float v6 = v6 + v7;
      --v5;
    }
    while (v5);
  }
  else
  {
    float v6 = 0.0;
  }
  *(float *)(a1 + 296) = v6;
  uint64_t result = (char *)(a1 + 304);
  if (result != (char *)a2) {
    return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

float kaldi::quasar::ErrorRegion::Overlap(kaldi::quasar::ErrorRegion *this)
{
  float result = 0.0;
  if (*((void *)this + 7) != *((void *)this + 8) && *((void *)this + 10) != *((void *)this + 11))
  {
    float v2 = (float)*((int *)this + 10);
    float v3 = (float)*((int *)this + 12);
    float v4 = (float)*((int *)this + 11);
    float v5 = (float)*((int *)this + 13);
    if (v4 >= v2) {
      float v6 = (float)*((int *)this + 10);
    }
    else {
      float v6 = (float)*((int *)this + 11);
    }
    if (v3 >= v5) {
      float v7 = (float)*((int *)this + 12);
    }
    else {
      float v7 = (float)*((int *)this + 13);
    }
    if (v2 < v4) {
      float v2 = (float)*((int *)this + 11);
    }
    if (v5 >= v3) {
      float v8 = (float)*((int *)this + 12);
    }
    else {
      float v8 = (float)*((int *)this + 13);
    }
    return (float)(v8 - v2) / (float)(v7 - v6);
  }
  return result;
}

BOOL kaldi::quasar::ErrorRegion::HaveSameWordSequence(kaldi::quasar::ErrorRegion *this)
{
  float v3 = (char *)this + 56;
  float v2 = (const void *)*((void *)this + 7);
  size_t v4 = *((void *)v3 + 1) - (void)v2;
  float v5 = (const void *)*((void *)this + 10);
  return v4 == *((void *)this + 11) - (void)v5 && memcmp(v2, v5, v4) == 0;
}

float kaldi::quasar::ErrorRegion::GetScoreSum(uint64_t a1, signed int a2, int a3, void *a4)
{
  float result = 0.0;
  if (a2 < a3)
  {
    float v5 = (float *)(*a4 + 4 * a2);
    do
    {
      float v6 = *v5++;
      float result = result + v6;
      ++a2;
    }
    while (a2 < a3);
  }
  return result;
}

BOOL kaldi::quasar::ErrorRegion::HasErrors(kaldi::quasar::ErrorRegion *this)
{
  v3[0] = &unk_1F0A4FF88;
  v3[1] = 0x3F80000000000000;
  int v4 = 0;
  BOOL v1 = !kaldi::quasar::ErrorRegion::HasAttribute(this, (kaldi::quasar::AbstractAttribute *)v3);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v3);
  return v1;
}

void sub_1B20B7C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::ErrorRegion::HasAttribute(kaldi::quasar::ErrorRegion *this, kaldi::quasar::AbstractAttribute *a2)
{
  if (*((void *)this + 11) == *((void *)this + 10)) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  do
  {
    float v6 = (void *)(*((void *)this + 2) + v4);
    uint64_t v9 = a2;
    float v7 = std::__hash_table<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>::find<kaldi::quasar::AbstractAttribute *>(v6, &v9);
    BOOL result = v7 != 0;
    if (v7) {
      break;
    }
    ++v5;
    v4 += 40;
  }
  while (v5 < (uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 2);
  return result;
}

BOOL kaldi::quasar::ErrorRegion::HasWordConfusion(kaldi::quasar::ErrorRegion *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0
    || a2 >= (unint64_t)((uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Requested word position is out of bounds ", 41);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  float v2 = (void *)(*((void *)this + 2) + 40 * a2 + 16);
  do
  {
    float v2 = (void *)*v2;
    if (!v2) {
      break;
    }
    float v3 = (void *)v2[2];
    if ((*(unsigned int (**)(void *))(*v3 + 40))(v3) == 7) {
      float v3 = (void *)v3[2];
    }
  }
  while ((*(unsigned int (**)(void *))(*v3 + 40))(v3) != 6);
  return v2 != 0;
}

uint64_t **kaldi::quasar::ErrorRegion::AddAttribute(uint64_t **this, kaldi::quasar::AbstractAttribute *a2)
{
  if (this[3] != this[2])
  {
    float v3 = this;
    unint64_t v4 = 0;
    do
      this = kaldi::quasar::ErrorRegion::AddAttribute((kaldi::quasar::ErrorRegion *)v3, a2, v4++);
    while (0xCCCCCCCCCCCCCCCDLL * (v3[3] - v3[2]) > v4);
  }
  return this;
}

uint64_t **kaldi::quasar::ErrorRegion::AddAttribute(kaldi::quasar::ErrorRegion *this, kaldi::quasar::AbstractAttribute *a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0
    || (uint64_t v4 = *((void *)this + 2), 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 3) - v4) >> 3) <= a3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Supplied word position index ", 29);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", is out of bounds in ErrorRegion, should be in range [0,", 57);
    __n128 v10 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, ").");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  v11[0] = a2;
  BOOL result = std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::find<kaldi::quasar::AbstractAttribute *>((void *)(v4 + 40 * a3), v11);
  if (!result)
  {
    uint64_t v8 = *((void *)this + 2) + 40 * a3;
    v11[0] = (*(uint64_t (**)(kaldi::quasar::AbstractAttribute *))(*(void *)a2 + 32))(a2);
    return (uint64_t **)std::__hash_table<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AbstractAttribute * const&>(v8, v11, v11);
  }
  return result;
}

uint64_t kaldi::quasar::ErrorRegion::RemoveAttribute(uint64_t this, kaldi::quasar::AbstractAttribute *a2)
{
  uint64_t v2 = *(void *)(this + 16);
  if (*(void *)(this + 24) != v2)
  {
    uint64_t v4 = this;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v8 = a2;
      this = (uint64_t)std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::find<kaldi::quasar::AbstractAttribute *>((void *)(v2 + v5), &v8);
      if (this)
      {
        uint64_t v7 = *(void *)(this + 16);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase((void *)(*(void *)(v4 + 16) + v5), (uint64_t *)this);
        this = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
        if ((this & 1) == 0) {
          this = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 72))(v7);
        }
      }
      ++v6;
      uint64_t v2 = *(void *)(v4 + 16);
      v5 += 40;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v4 + 24) - v2) >> 3) > v6);
  }
  return this;
}

BOOL kaldi::quasar::ErrorRegion::IsHomophoneRegion(kaldi::quasar::ErrorRegion *this, const kaldi::TransitionModel *a2)
{
  kaldi::quasar::ErrorRegion::GetSequence(a2, (uint64_t *)this + 31, 2, 0, &v10);
  kaldi::quasar::ErrorRegion::GetSequence(a2, (uint64_t *)this + 34, 2, 0, &v8);
  uint64_t v4 = v10;
  uint64_t v5 = v8;
  if ((char *)v11 - (char *)v10 != (char *)v9 - (char *)v8)
  {
    BOOL v6 = 0;
    if (!v8) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v6 = memcmp(v10, v8, (char *)v11 - (char *)v10) == 0;
  if (v5)
  {
LABEL_5:
    uint64_t v9 = v5;
    operator delete(v5);
    uint64_t v4 = v10;
  }
LABEL_6:
  if (v4)
  {
    BOOL v11 = v4;
    operator delete(v4);
  }
  return v6;
}

void sub_1B20B8160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorRegion::GetSequence(kaldi::TransitionModel *this@<X2>, uint64_t *a2@<X1>, int a3@<W3>, int a4@<W4>, int **a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    unint64_t v11 = 0;
    uint64_t v12 = a5 + 2;
    do
    {
      unint64_t v13 = (uint64_t *)(v7 + 24 * v11);
      uint64_t v14 = *v13;
      if (v13[1] != *v13)
      {
        unint64_t v30 = v11;
        unint64_t v15 = 0;
        do
        {
          int v16 = *(_DWORD *)(v14 + 4 * v15);
          int v17 = kaldi::TransitionModel::TransitionIdToTransitionState(this, v16);
          if (a3)
          {
            if (a3 == 1)
            {
              int v18 = kaldi::TransitionModel::TransitionStateToForwardPdf(this, v17);
            }
            else
            {
              if (a3 != 2)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Algorithmic error, do not know what to do with level ", 53);
                std::ostream::operator<<();
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
              }
              int v18 = kaldi::TransitionModel::TransitionStateToPhone(this, v17);
            }
            int v16 = v18;
          }
          int v19 = a5[1];
          if (!a4 || *a5 == v19 || *(v19 - 1) != v16)
          {
            if ((unint64_t)v19 >= *v12)
            {
              uint64_t v21 = *a5;
              uint64_t v22 = v19 - *a5;
              unint64_t v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v24 = *v12 - (void)v21;
              if (v24 >> 1 > v23) {
                unint64_t v23 = v24 >> 1;
              }
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v23;
              }
              if (v25)
              {
                int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a5 + 2), v25);
                uint64_t v21 = *a5;
                int v19 = a5[1];
              }
              else
              {
                int v26 = 0;
              }
              float v27 = (int *)&v26[4 * v22];
              *float v27 = v16;
              int v20 = v27 + 1;
              while (v19 != v21)
              {
                int v28 = *--v19;
                *--float v27 = v28;
              }
              *a5 = v27;
              a5[1] = v20;
              a5[2] = (int *)&v26[4 * v25];
              if (v21) {
                operator delete(v21);
              }
            }
            else
            {
              *int v19 = v16;
              int v20 = v19 + 1;
            }
            a5[1] = v20;
          }
          ++v15;
          uint64_t v14 = *v13;
        }
        while (v15 < (v13[1] - *v13) >> 2);
        unint64_t v11 = v30;
        uint64_t v7 = *a2;
        uint64_t v6 = a2[1];
      }
      ++v11;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) > v11);
  }
}

void sub_1B20B83A4(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorRegion::ComputePhoneAlignment(uint64_t a1, int a2, void *a3, int a4, int a5, void **a6, uint64_t a7)
{
  uint64_t v12 = *(_DWORD **)a1;
  unint64_t v11 = *(_DWORD **)(a1 + 8);
  if (v11 == *(_DWORD **)a1)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = ((uint64_t)v11 - *(void *)a1) >> 2;
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    while (v12[v13] == *v12)
    {
      if (v14 == ++v13)
      {
        LODWORD(v13) = v14;
        break;
      }
    }
  }
  uint64_t v15 = a3[1];
  uint64_t v16 = v15 - *a3;
  if (v15 != *a3)
  {
    uint64_t v17 = 0;
    int v18 = v13 - 1;
    unint64_t v19 = v16 >> 2;
    if (v19 <= 1) {
      unint64_t v19 = 1;
    }
    while (*(_DWORD *)(*a3 + 4 * v17) == *(_DWORD *)*a3)
    {
      if (v19 == ++v17)
      {
        LODWORD(v17) = v19;
        break;
      }
    }
    if (v11 != v12)
    {
      int v20 = v18 + a2;
      if (v18 + a2 >= 0)
      {
        int v21 = v17 - 1;
        int v22 = v17 - 1 + a4;
        if ((v22 & 0x80000000) == 0)
        {
          unint64_t v23 = *(void *)(a7 + 16);
          uint64_t v147 = a7 + 16;
          uint64_t v24 = *(_DWORD **)(a7 + 8);
          if ((unint64_t)v24 >= v23)
          {
            int v26 = *(_DWORD **)a7;
            uint64_t v27 = ((uint64_t)v24 - *(void *)a7) >> 2;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62) {
LABEL_194:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v29 = v23 - (void)v26;
            if (v29 >> 1 > v28) {
              unint64_t v28 = v29 >> 1;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30)
            {
              int v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v147, v30);
              int v26 = *(_DWORD **)a7;
              uint64_t v24 = *(_DWORD **)(a7 + 8);
            }
            else
            {
              int v31 = 0;
            }
            unint64_t v32 = &v31[4 * v27];
            int v33 = &v31[4 * v30];
            *(_DWORD *)unint64_t v32 = v22;
            unint64_t v25 = v32 + 4;
            while (v24 != v26)
            {
              int v34 = *--v24;
              *((_DWORD *)v32 - 1) = v34;
              v32 -= 4;
            }
            *(void *)a7 = v32;
            *(void *)(a7 + 8) = v25;
            *(void *)(a7 + 16) = v33;
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *uint64_t v24 = v22;
            unint64_t v25 = v24 + 1;
          }
          *(void *)(a7 + 8) = v25;
          unint64_t v35 = *(unsigned int *)(*(void *)a1 + 4 * v18) | ((unint64_t)*(unsigned int *)(*a3 + 4 * v21) << 32);
          unint64_t v36 = (unint64_t)a6[2];
          uint64_t v146 = (uint64_t)(a6 + 2);
          uint64_t v37 = (unint64_t *)a6[1];
          if ((unint64_t)v37 >= v36)
          {
            uint64_t v39 = ((char *)v37 - (unsigned char *)*a6) >> 3;
            if ((unint64_t)(v39 + 1) >> 61) {
LABEL_193:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v40 = v36 - (void)*a6;
            uint64_t v41 = v40 >> 2;
            if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
              uint64_t v41 = v39 + 1;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v41;
            }
            if (v42) {
              uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v146, v42);
            }
            else {
              uint64_t v43 = 0;
            }
            int v44 = (unint64_t *)&v43[8 * v39];
            unint64_t v45 = &v43[8 * v42];
            unint64_t *v44 = v35;
            unint64_t v38 = v44 + 1;
            long long v47 = (char *)*a6;
            float v46 = (char *)a6[1];
            if (v46 != *a6)
            {
              do
              {
                unint64_t v48 = *((void *)v46 - 1);
                v46 -= 8;
                *--int v44 = v48;
              }
              while (v46 != v47);
              float v46 = (char *)*a6;
            }
            *a6 = v44;
            a6[1] = v38;
            a6[2] = v45;
            if (v46) {
              operator delete(v46);
            }
          }
          else
          {
            *uint64_t v37 = v35;
            unint64_t v38 = v37 + 1;
          }
          unint64_t v49 = v18;
          a6[1] = v38;
          uint64_t v50 = *(_DWORD **)a1;
          uint64_t v51 = *(void *)(a1 + 8);
          unint64_t v52 = (v51 - *(void *)a1) >> 2;
          unint64_t v53 = v52 - 1;
          if (v52 - 1 > v18)
          {
            long long v54 = (_DWORD *)*a3;
            unint64_t v55 = (uint64_t)(a3[1] - *a3) >> 2;
            for (unint64_t i = v55 - 1; ; unint64_t i = v55 - 1)
            {
              if (i <= v21)
              {
                unint64_t v49 = v18;
                unint64_t v52 = (v51 - (uint64_t)v50) >> 2;
                unint64_t v53 = v52 - 1;
                goto LABEL_114;
              }
              int v57 = v20 - v22;
              if (v20 - v22 < 0) {
                int v57 = v22 - v20;
              }
              if (v57 <= a5) {
                break;
              }
              if (v20 >= v22)
              {
                unint64_t v62 = v21 + 1;
                if (v55 > v62)
                {
                  int v64 = v54[v62];
                  while (v54[v62] == v64)
                  {
                    if (v55 == ++v62)
                    {
                      LODWORD(v62) = v55;
                      break;
                    }
                  }
                }
LABEL_78:
                int v21 = v62 - 1;
                int v22 = v62 - 1 + a4;
                goto LABEL_79;
              }
              unint64_t v58 = v18 + 1;
              if (v52 > v58)
              {
                int v59 = v50[v58];
                while (v50[v58] == v59)
                {
                  if (v52 == ++v58)
                  {
                    LODWORD(v58) = v52;
                    break;
                  }
                }
              }
              int v18 = v58 - 1;
              int v20 = v58 - 1 + a2;
LABEL_79:
              char v66 = *(_DWORD **)(a7 + 8);
              unint64_t v65 = *(void *)(a7 + 16);
              if ((unint64_t)v66 >= v65)
              {
                long long v68 = *(_DWORD **)a7;
                uint64_t v69 = ((uint64_t)v66 - *(void *)a7) >> 2;
                unint64_t v70 = v69 + 1;
                if ((unint64_t)(v69 + 1) >> 62) {
                  goto LABEL_194;
                }
                uint64_t v71 = v65 - (void)v68;
                if (v71 >> 1 > v70) {
                  unint64_t v70 = v71 >> 1;
                }
                if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v72 = v70;
                }
                if (v72)
                {
                  long long v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v147, v72);
                  long long v68 = *(_DWORD **)a7;
                  char v66 = *(_DWORD **)(a7 + 8);
                }
                else
                {
                  long long v73 = 0;
                }
                long long v74 = &v73[4 * v69];
                *(_DWORD *)long long v74 = v22;
                long long v67 = v74 + 4;
                while (v66 != v68)
                {
                  int v75 = *--v66;
                  *((_DWORD *)v74 - 1) = v75;
                  v74 -= 4;
                }
                *(void *)a7 = v74;
                *(void *)(a7 + 8) = v67;
                *(void *)(a7 + 16) = &v73[4 * v72];
                if (v68) {
                  operator delete(v68);
                }
              }
              else
              {
                *char v66 = v22;
                long long v67 = v66 + 1;
              }
              *(void *)(a7 + 8) = v67;
              unint64_t v76 = *(unsigned int *)(*(void *)a1 + 4 * v18) | ((unint64_t)*(unsigned int *)(*a3 + 4 * v21) << 32);
              long long v78 = (unint64_t *)a6[1];
              unint64_t v77 = (unint64_t)a6[2];
              if ((unint64_t)v78 >= v77)
              {
                uint64_t v80 = ((char *)v78 - (unsigned char *)*a6) >> 3;
                if ((unint64_t)(v80 + 1) >> 61) {
                  goto LABEL_193;
                }
                uint64_t v81 = v77 - (void)*a6;
                uint64_t v82 = v81 >> 2;
                if (v81 >> 2 <= (unint64_t)(v80 + 1)) {
                  uint64_t v82 = v80 + 1;
                }
                if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v83 = v82;
                }
                if (v83) {
                  long long v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v146, v83);
                }
                else {
                  long long v84 = 0;
                }
                long long v85 = (unint64_t *)&v84[8 * v80];
                *long long v85 = v76;
                std::string v79 = v85 + 1;
                long long v87 = (char *)*a6;
                long long v86 = (char *)a6[1];
                if (v86 != *a6)
                {
                  do
                  {
                    unint64_t v88 = *((void *)v86 - 1);
                    v86 -= 8;
                    *--long long v85 = v88;
                  }
                  while (v86 != v87);
                  long long v86 = (char *)*a6;
                }
                *a6 = v85;
                a6[1] = v79;
                a6[2] = &v84[8 * v83];
                if (v86) {
                  operator delete(v86);
                }
              }
              else
              {
                *long long v78 = v76;
                std::string v79 = v78 + 1;
              }
              unint64_t v49 = v18;
              a6[1] = v79;
              uint64_t v50 = *(_DWORD **)a1;
              uint64_t v51 = *(void *)(a1 + 8);
              unint64_t v52 = (v51 - *(void *)a1) >> 2;
              unint64_t v53 = v52 - 1;
              if (v52 - 1 <= v18) {
                goto LABEL_114;
              }
              long long v54 = (_DWORD *)*a3;
              unint64_t v55 = (uint64_t)(a3[1] - *a3) >> 2;
            }
            unint64_t v60 = v18 + 1;
            if (v52 > v60)
            {
              int v61 = v50[v60];
              while (v50[v60] == v61)
              {
                if (v52 == ++v60)
                {
                  LODWORD(v60) = v52;
                  break;
                }
              }
            }
            unint64_t v62 = v21 + 1;
            if (v55 > v62)
            {
              int v63 = v54[v62];
              while (v54[v62] == v63)
              {
                if (v55 == ++v62)
                {
                  LODWORD(v62) = v55;
                  break;
                }
              }
            }
            int v18 = v60 - 1;
            int v20 = v60 - 1 + a2;
            goto LABEL_78;
          }
LABEL_114:
          if (v53 > v49)
          {
            do
            {
              LODWORD(v8quasar::readMatrixFile((uint64_t)&this[6], this + 9) = v18 + 1;
              if (v52 > (int)v89)
              {
                uint64_t v89 = (int)v89;
                int v90 = v50[(int)v89];
                while (v50[v89] == v90)
                {
                  if (v52 == ++v89)
                  {
                    LODWORD(v8quasar::readMatrixFile((uint64_t)&this[6], this + 9) = v52;
                    break;
                  }
                }
              }
              long long v92 = *(_DWORD **)(a7 + 8);
              unint64_t v91 = *(void *)(a7 + 16);
              if ((unint64_t)v92 >= v91)
              {
                long long v94 = *(_DWORD **)a7;
                uint64_t v95 = ((uint64_t)v92 - *(void *)a7) >> 2;
                unint64_t v96 = v95 + 1;
                if ((unint64_t)(v95 + 1) >> 62) {
                  goto LABEL_194;
                }
                uint64_t v97 = v91 - (void)v94;
                if (v97 >> 1 > v96) {
                  unint64_t v96 = v97 >> 1;
                }
                if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v98 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v98 = v96;
                }
                if (v98)
                {
                  unint64_t v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v147, v98);
                  long long v94 = *(_DWORD **)a7;
                  long long v92 = *(_DWORD **)(a7 + 8);
                }
                else
                {
                  unint64_t v99 = 0;
                }
                uint64_t v100 = &v99[4 * v95];
                *(_DWORD *)uint64_t v100 = v22;
                long long v93 = v100 + 4;
                while (v92 != v94)
                {
                  int v101 = *--v92;
                  *((_DWORD *)v100 - 1) = v101;
                  v100 -= 4;
                }
                *(void *)a7 = v100;
                *(void *)(a7 + 8) = v93;
                *(void *)(a7 + 16) = &v99[4 * v98];
                if (v94) {
                  operator delete(v94);
                }
              }
              else
              {
                _DWORD *v92 = v22;
                long long v93 = v92 + 1;
              }
              int v18 = v89 - 1;
              *(void *)(a7 + 8) = v93;
              unint64_t v102 = *(unsigned int *)(*(void *)a1 + 4 * v18) | ((unint64_t)*(unsigned int *)(a3[1] - 4) << 32);
              uint64_t v104 = (unint64_t *)a6[1];
              unint64_t v103 = (unint64_t)a6[2];
              if ((unint64_t)v104 >= v103)
              {
                uint64_t v106 = ((char *)v104 - (unsigned char *)*a6) >> 3;
                if ((unint64_t)(v106 + 1) >> 61) {
                  goto LABEL_193;
                }
                uint64_t v107 = v103 - (void)*a6;
                uint64_t v108 = v107 >> 2;
                if (v107 >> 2 <= (unint64_t)(v106 + 1)) {
                  uint64_t v108 = v106 + 1;
                }
                if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v109 = v108;
                }
                if (v109) {
                  uint64_t v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v146, v109);
                }
                else {
                  uint64_t v110 = 0;
                }
                unsigned int v111 = (unint64_t *)&v110[8 * v106];
                *unsigned int v111 = v102;
                unint64_t v105 = v111 + 1;
                uint64_t v113 = (char *)*a6;
                uint64_t v112 = (char *)a6[1];
                if (v112 != *a6)
                {
                  do
                  {
                    unint64_t v114 = *((void *)v112 - 1);
                    v112 -= 8;
                    *--unsigned int v111 = v114;
                  }
                  while (v112 != v113);
                  uint64_t v112 = (char *)*a6;
                }
                *a6 = v111;
                a6[1] = v105;
                a6[2] = &v110[8 * v109];
                if (v112) {
                  operator delete(v112);
                }
              }
              else
              {
                unint64_t *v104 = v102;
                unint64_t v105 = v104 + 1;
              }
              a6[1] = v105;
              uint64_t v50 = *(_DWORD **)a1;
              unint64_t v52 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
            }
            while (v52 - 1 > v18);
          }
          unint64_t v115 = (_DWORD *)*a3;
          for (unint64_t j = (uint64_t)(a3[1] - *a3) >> 2; j - 1 > v21; unint64_t j = (uint64_t)(a3[1] - *a3) >> 2)
          {
            LODWORD(v117) = v21 + 1;
            if (j > v21 + 1)
            {
              uint64_t v117 = (int)v117;
              int v118 = v115[(int)v117];
              while (v115[v117] == v118)
              {
                if (j == ++v117)
                {
                  LODWORD(v117) = j;
                  break;
                }
              }
            }
            int v21 = v117 - 1;
            int v119 = v117 - 1 + a4;
            uint64_t v121 = *(_DWORD **)(a7 + 8);
            unint64_t v120 = *(void *)(a7 + 16);
            if ((unint64_t)v121 >= v120)
            {
              int v123 = *(_DWORD **)a7;
              uint64_t v124 = ((uint64_t)v121 - *(void *)a7) >> 2;
              unint64_t v125 = v124 + 1;
              if ((unint64_t)(v124 + 1) >> 62) {
                goto LABEL_194;
              }
              uint64_t v126 = v120 - (void)v123;
              if (v126 >> 1 > v125) {
                unint64_t v125 = v126 >> 1;
              }
              if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v127 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v127 = v125;
              }
              if (v127)
              {
                int32x2_t v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v147, v127);
                int v123 = *(_DWORD **)a7;
                uint64_t v121 = *(_DWORD **)(a7 + 8);
              }
              else
              {
                int32x2_t v128 = 0;
              }
              int v129 = &v128[4 * v124];
              *(_DWORD *)int v129 = v119;
              uint64_t v122 = v129 + 4;
              while (v121 != v123)
              {
                int v130 = *--v121;
                *((_DWORD *)v129 - 1) = v130;
                v129 -= 4;
              }
              *(void *)a7 = v129;
              *(void *)(a7 + 8) = v122;
              *(void *)(a7 + 16) = &v128[4 * v127];
              if (v123) {
                operator delete(v123);
              }
            }
            else
            {
              _DWORD *v121 = v119;
              uint64_t v122 = v121 + 1;
            }
            *(void *)(a7 + 8) = v122;
            unint64_t v131 = *(unsigned int *)(*(void *)(a1 + 8) - 4) | ((unint64_t)*(unsigned int *)(*a3 + 4 * v21) << 32);
            BOOL v133 = (unint64_t *)a6[1];
            unint64_t v132 = (unint64_t)a6[2];
            if ((unint64_t)v133 >= v132)
            {
              uint64_t v135 = ((char *)v133 - (unsigned char *)*a6) >> 3;
              if ((unint64_t)(v135 + 1) >> 61) {
                goto LABEL_193;
              }
              uint64_t v136 = v132 - (void)*a6;
              uint64_t v137 = v136 >> 2;
              if (v136 >> 2 <= (unint64_t)(v135 + 1)) {
                uint64_t v137 = v135 + 1;
              }
              if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v138 = v137;
              }
              if (v138) {
                long long v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v146, v138);
              }
              else {
                long long v139 = 0;
              }
              uint64_t v140 = (unint64_t *)&v139[8 * v135];
              *uint64_t v140 = v131;
              unint64_t v134 = v140 + 1;
              long long v142 = (char *)*a6;
              long long v141 = (char *)a6[1];
              if (v141 != *a6)
              {
                do
                {
                  unint64_t v143 = *((void *)v141 - 1);
                  v141 -= 8;
                  *--uint64_t v140 = v143;
                }
                while (v141 != v142);
                long long v141 = (char *)*a6;
              }
              *a6 = v140;
              a6[1] = v134;
              a6[2] = &v139[8 * v138];
              if (v141) {
                operator delete(v141);
              }
            }
            else
            {
              *BOOL v133 = v131;
              unint64_t v134 = v133 + 1;
            }
            a6[1] = v134;
            unint64_t v115 = (_DWORD *)*a3;
          }
        }
      }
    }
  }
}

void kaldi::quasar::ErrorRegion::ComputeWordAlignment(uint64_t a1, kaldi::TransitionModel *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 44);
  int v78 = *(_DWORD *)(a1 + 40);
  memset(&v85, 0, sizeof(v85));
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)uint64_t v82 = 0u;
  long long v83 = 0u;
  *(_OWORD *)long long __src = 0u;
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6 == v7)
  {
    LODWORD(vquasar::readMatrixFile((uint64_t)&this[6], this + 9) = 0;
    int v10 = 0;
    uint64_t v7 = *(void *)(a1 + 88);
  }
  else
  {
    if (*(void *)(a1 + 64) != *(void *)(a1 + 56))
    {
      int v79 = v5;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      int v10 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        if (v82[1] == (void *)v83)
        {
          kaldi::quasar::ErrorRegion::GetSequence(*(void *)(a1 + 272) + 24 * v11, a2, 2, 1, &v80.__begin_);
          if (__p.__begin_)
          {
            __p.__end_ = __p.__begin_;
            operator delete(__p.__begin_);
          }
          std::vector<int> __p = v80;
LABEL_37:
          uint64_t v34 = *(void *)(a1 + 80);
          unint64_t v35 = (char *)v83;
          if ((unint64_t)v83 >= *((void *)&v83 + 1))
          {
            uint64_t v37 = (char *)v82[1];
            uint64_t v38 = (uint64_t)(v83 - (unint64_t)v82[1]) >> 2;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 62) {
LABEL_133:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            int64_t v40 = *((void *)&v83 + 1) - (unint64_t)v82[1];
            if ((uint64_t)(*((void *)&v83 + 1) - (unint64_t)v82[1]) >> 1 > v39) {
              unint64_t v39 = v40 >> 1;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v39;
            }
            if (v41)
            {
              unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v83 + 8, v41);
              uint64_t v37 = (char *)v82[1];
              unint64_t v35 = (char *)v83;
            }
            else
            {
              unint64_t v42 = 0;
            }
            uint64_t v43 = &v42[4 * v38];
            *(_DWORD *)uint64_t v43 = *(_DWORD *)(v34 + 4 * v11);
            unint64_t v36 = v43 + 4;
            while (v35 != v37)
            {
              int v44 = *((_DWORD *)v35 - 1);
              v35 -= 4;
              *((_DWORD *)v43 - 1) = v44;
              v43 -= 4;
            }
            v82[1] = v43;
            *(void *)&long long v83 = v36;
            *((void *)&v83 + 1) = &v42[4 * v41];
            if (v37) {
              operator delete(v37);
            }
          }
          else
          {
            *(_DWORD *)long long v83 = *(_DWORD *)(v34 + 4 * v11);
            unint64_t v36 = v35 + 4;
          }
          *(void *)&long long v83 = v36;
          v79 += (*(void *)(*(void *)(a1 + 272) + 24 * v11 + 8) - *(void *)(*(void *)(a1 + 272) + 24 * v11)) >> 2;
          uint64_t v9 = (v9 + 1);
          goto LABEL_71;
        }
        if (__src[0] == __src[1]) {
          break;
        }
        uint64_t v12 = v9;
        uint64_t v13 = a3;
        if (v79 - v78 >= 0) {
          unsigned int v14 = v79 - v78;
        }
        else {
          unsigned int v14 = v78 - v79;
        }
        unsigned int v76 = v14;
        int v15 = kaldi::LevenshteinEditDistance<int>((uint64_t *)&v85, &__p.__begin_);
        if (v79 >= v78)
        {
          uint64_t v9 = v12;
          if (v79 > v78)
          {
            kaldi::quasar::ErrorRegion::GetSequence(*(void *)(a1 + 248) + 24 * v8, a2, 2, 1, &v80.__begin_);
            std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v85, (uint64_t)v85.__end_, (char *)v80.__begin_, (char *)v80.__end_, v80.__end_ - v80.__begin_);
            unint64_t v23 = (uint64_t *)(*(void *)(a1 + 248) + 24 * v8);
            uint64_t v25 = *v23;
            uint64_t v24 = v23[1];
            if (v15 <= (int)kaldi::LevenshteinEditDistance<int>((uint64_t *)&v85, &__p.__begin_))
            {
              int v47 = v79 - v78 - ((unint64_t)(v24 - v25) >> 2);
              if (v47 < 0) {
                int v47 = ((unint64_t)(v24 - v25) >> 2) - (v79 - v78);
              }
              BOOL v26 = v76 > v47;
            }
            else
            {
              BOOL v26 = 1;
            }
            if (v80.__begin_)
            {
              v80.__end_ = v80.__begin_;
              operator delete(v80.__begin_);
            }
            if (v26) {
              goto LABEL_18;
            }
          }
        }
        else
        {
          kaldi::quasar::ErrorRegion::GetSequence(*(void *)(a1 + 272) + 24 * v11, a2, 2, 1, &v80.__begin_);
          std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (uint64_t)__p.__end_, (char *)v80.__begin_, (char *)v80.__end_, v80.__end_ - v80.__begin_);
          uint64_t v16 = (uint64_t *)(*(void *)(a1 + 272) + 24 * v11);
          uint64_t v18 = *v16;
          uint64_t v17 = v16[1];
          if (v15 <= (int)kaldi::LevenshteinEditDistance<int>((uint64_t *)&v85, &__p.__begin_))
          {
            int v33 = v79 - v78 + ((unint64_t)(v17 - v18) >> 2);
            if (v33 < 0) {
              int v33 = -v33;
            }
            BOOL v19 = v76 > v33;
          }
          else
          {
            BOOL v19 = 1;
          }
          a3 = v13;
          uint64_t v9 = v12;
          if (v80.__begin_)
          {
            v80.__end_ = v80.__begin_;
            operator delete(v80.__begin_);
          }
          if (v19) {
            goto LABEL_37;
          }
        }
        unint64_t v48 = a3[1];
        if (v48 >= a3[2])
        {
          uint64_t v49 = std::vector<std::pair<std::vector<int>,std::vector<int>>>::__push_back_slow_path<std::pair<std::vector<int>,std::vector<int>> const&>(a3, (uint64_t)__src);
        }
        else
        {
          std::pair<std::vector<int>,std::vector<int>>::pair[abi:ne180100]((void *)a3[1], (uint64_t)__src);
          uint64_t v49 = v48 + 48;
          a3[1] = v48 + 48;
        }
        a3[1] = v49;
        __src[1] = __src[0];
        *(void **)&long long v83 = v82[1];
        v85.__end_ = v85.__begin_;
        __p.__end_ = __p.__begin_;
LABEL_71:
        uint64_t v11 = (int)v9;
        uint64_t v7 = *(void *)(a1 + 80);
        uint64_t v6 = *(void *)(a1 + 88);
        if ((int)v9 < (unint64_t)((v6 - v7) >> 2))
        {
          uint64_t v8 = v10;
          if (v10 < (unint64_t)((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 2)) {
            continue;
          }
        }
        goto LABEL_76;
      }
      kaldi::quasar::ErrorRegion::GetSequence(*(void *)(a1 + 248) + 24 * v8, a2, 2, 1, &v80.__begin_);
      if (v85.__begin_)
      {
        v85.__end_ = v85.__begin_;
        operator delete(v85.__begin_);
      }
      std::vector<int> v85 = v80;
LABEL_18:
      uint64_t v20 = *(void *)(a1 + 56);
      int v21 = (char *)__src[1];
      if (__src[1] >= v82[0])
      {
        uint64_t v27 = (char *)__src[0];
        int64_t v28 = ((char *)__src[1] - (char *)__src[0]) >> 2;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62) {
          goto LABEL_133;
        }
        int64_t v30 = (char *)v82[0] - (char *)__src[0];
        if (((char *)v82[0] - (char *)__src[0]) >> 1 > v29) {
          unint64_t v29 = v30 >> 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v82, v31);
          uint64_t v27 = (char *)__src[0];
          int v21 = (char *)__src[1];
        }
        else
        {
          unint64_t v32 = 0;
        }
        unint64_t v45 = &v32[4 * v28];
        *(_DWORD *)unint64_t v45 = *(_DWORD *)(v20 + 4 * v8);
        int v22 = v45 + 4;
        while (v21 != v27)
        {
          int v46 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        __src[0] = v45;
        __src[1] = v22;
        v82[0] = &v32[4 * v31];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(_DWORD *)__src[1] = *(_DWORD *)(v20 + 4 * v8);
        int v22 = v21 + 4;
      }
      __src[1] = v22;
      v78 += (*(void *)(*(void *)(a1 + 248) + 24 * v8 + 8) - *(void *)(*(void *)(a1 + 248) + 24 * v8)) >> 2;
      ++v10;
      goto LABEL_71;
    }
    LODWORD(vquasar::readMatrixFile((uint64_t)&this[6], this + 9) = 0;
    int v10 = 0;
  }
LABEL_76:
  unint64_t v50 = (int)v9;
  if ((int)v9 < (unint64_t)((v6 - v7) >> 2))
  {
    uint64_t v51 = (char *)v83;
    do
    {
      if ((unint64_t)v51 >= *((void *)&v83 + 1))
      {
        unint64_t v53 = (char *)v82[1];
        uint64_t v54 = (v51 - (char *)v82[1]) >> 2;
        unint64_t v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 62) {
LABEL_132:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        int64_t v56 = *((void *)&v83 + 1) - (unint64_t)v82[1];
        if ((uint64_t)(*((void *)&v83 + 1) - (unint64_t)v82[1]) >> 1 > v55) {
          unint64_t v55 = v56 >> 1;
        }
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v55;
        }
        if (v57)
        {
          unint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v83 + 8, v57);
          unint64_t v53 = (char *)v82[1];
          uint64_t v51 = (char *)v83;
        }
        else
        {
          unint64_t v58 = 0;
        }
        int v59 = &v58[4 * v54];
        *(_DWORD *)int v59 = *(_DWORD *)(v7 + 4 * v50);
        unint64_t v52 = v59 + 4;
        while (v51 != v53)
        {
          int v60 = *((_DWORD *)v51 - 1);
          v51 -= 4;
          *((_DWORD *)v59 - 1) = v60;
          v59 -= 4;
        }
        v82[1] = v59;
        *(void *)&long long v83 = v52;
        *((void *)&v83 + 1) = &v58[4 * v57];
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v51 = *(_DWORD *)(v7 + 4 * v50);
        unint64_t v52 = v51 + 4;
      }
      *(void *)&long long v83 = v52;
      ++v50;
      uint64_t v7 = *(void *)(a1 + 80);
      uint64_t v51 = v52;
    }
    while (v50 < (*(void *)(a1 + 88) - v7) >> 2);
  }
  unint64_t v61 = v10;
  uint64_t v62 = *(void *)(a1 + 56);
  if (v10 >= (unint64_t)((*(void *)(a1 + 64) - v62) >> 2))
  {
    int v64 = __src[1];
  }
  else
  {
    int v63 = (char *)__src[1];
    do
    {
      if (v63 >= v82[0])
      {
        unint64_t v65 = (char *)__src[0];
        uint64_t v66 = (v63 - (char *)__src[0]) >> 2;
        unint64_t v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 62) {
          goto LABEL_132;
        }
        int64_t v68 = (char *)v82[0] - (char *)__src[0];
        if (((char *)v82[0] - (char *)__src[0]) >> 1 > v67) {
          unint64_t v67 = v68 >> 1;
        }
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v69 = v67;
        }
        if (v69)
        {
          unint64_t v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v82, v69);
          unint64_t v65 = (char *)__src[0];
          int v63 = (char *)__src[1];
        }
        else
        {
          unint64_t v70 = 0;
        }
        uint64_t v71 = &v70[4 * v66];
        *(_DWORD *)uint64_t v71 = *(_DWORD *)(v62 + 4 * v61);
        int v64 = v71 + 4;
        while (v63 != v65)
        {
          int v72 = *((_DWORD *)v63 - 1);
          v63 -= 4;
          *((_DWORD *)v71 - 1) = v72;
          v71 -= 4;
        }
        __src[0] = v71;
        __src[1] = v64;
        v82[0] = &v70[4 * v69];
        if (v65) {
          operator delete(v65);
        }
      }
      else
      {
        *(_DWORD *)int v63 = *(_DWORD *)(v62 + 4 * v61);
        int v64 = v63 + 4;
      }
      __src[1] = v64;
      ++v61;
      uint64_t v62 = *(void *)(a1 + 56);
      int v63 = (char *)v64;
    }
    while (v61 < (*(void *)(a1 + 64) - v62) >> 2);
  }
  if (__src[0] == v64 || v82[1] == (void *)v83)
  {
    uint64_t v75 = a3[1];
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)(v75 - 48), *(void *)(v75 - 40), (char *)__src[0], (char *)v64, (int64_t)((uint64_t)v64 - (unint64_t)__src[0]) >> 2);
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)(v75 - 24), *(void *)(v75 - 16), (char *)v82[1], (char *)v83, (uint64_t)(v83 - (unint64_t)v82[1]) >> 2);
  }
  else
  {
    unint64_t v73 = a3[1];
    if (v73 >= a3[2])
    {
      uint64_t v74 = std::vector<std::pair<std::vector<int>,std::vector<int>>>::__push_back_slow_path<std::pair<std::vector<int>,std::vector<int>> const&>(a3, (uint64_t)__src);
    }
    else
    {
      std::pair<std::vector<int>,std::vector<int>>::pair[abi:ne180100]((void *)a3[1], (uint64_t)__src);
      uint64_t v74 = v73 + 48;
      a3[1] = v73 + 48;
    }
    a3[1] = v74;
  }
  if (v82[1])
  {
    *(void **)&long long v83 = v82[1];
    operator delete(v82[1]);
  }
  if (__src[0])
  {
    __src[1] = __src[0];
    operator delete(__src[0]);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v85.__begin_)
  {
    v85.__end_ = v85.__begin_;
    operator delete(v85.__begin_);
  }
}

void sub_1B20B9494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  *(void *)(v27 + 8) = v26;
  kaldi::LatticeWordAligner::ComputationState::~ComputationState((kaldi::LatticeWordAligner::ComputationState *)&a19);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  int64_t v30 = *(void **)(v28 - 112);
  if (v30)
  {
    *(void *)(v28 - 104) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorRegion::GetSequence(uint64_t a1@<X1>, kaldi::TransitionModel *a2@<X2>, int a3@<W3>, int a4@<W4>, int **a5@<X8>)
{
  std::vector<std::vector<int>>::vector(v9, 1uLL, a1);
  kaldi::quasar::ErrorRegion::GetSequence(a2, v9, a3, a4, a5);
  int v10 = (void **)v9;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v10);
}

void sub_1B20B95AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::LevenshteinEditDistance<int>(uint64_t *a1, int **a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = (char *)a2[1] - (char *)*a2;
  std::vector<int>::vector(&v32, (uint64_t)((v6 << 30) + 0x100000000) >> 32);
  std::vector<int>::vector(&__p, (uint64_t)((v6 << 30) + 0x100000000) >> 32);
  unint64_t v7 = (unint64_t)(v4 - v5) >> 2;
  std::vector<int>::pointer begin = v32.__begin_;
  std::vector<int>::pointer end = v32.__end_;
  if (v32.__end_ != v32.__begin_)
  {
    uint64_t v10 = 0;
    unint64_t v11 = v32.__end_ - v32.__begin_;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    do
    {
      begin[v10] = v10;
      ++v10;
    }
    while (v11 != v10);
  }
  if ((int)v7 >= 1)
  {
    unint64_t v12 = v6 >> 2;
    uint64_t v13 = (v6 >> 2) + 1;
    uint64_t v14 = (v7 + 1);
    uint64_t v15 = v13 - 1;
    uint64_t v16 = 1;
    do
    {
      std::vector<int>::pointer v17 = v32.__begin_;
      int v18 = *v32.__begin_ + 1;
      BOOL v19 = (char *)__p.__begin_;
      *__p.__begin_ = v18;
      if ((int)v12 >= 1)
      {
        uint64_t v20 = *a1;
        int v21 = *a2;
        int v22 = v17 + 1;
        unint64_t v23 = (int *)(v19 + 4);
        uint64_t v24 = v15;
        do
        {
          int v25 = *(v22 - 1);
          int v26 = *v21++;
          if (*(_DWORD *)(v20 + 4 * (v16 - 1)) != v26) {
            ++v25;
          }
          int v28 = *v22++;
          int v27 = v28;
          if (v18 >= v28) {
            int v18 = v27;
          }
          if (v18 + 1 < v25) {
            ++v18;
          }
          else {
            int v18 = v25;
          }
          *v23++ = v18;
          --v24;
        }
        while (v24);
      }
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v32, v19, (uint64_t)__p.__end_, ((char *)__p.__end_ - v19) >> 2);
      ++v16;
    }
    while (v16 != v14);
    std::vector<int>::pointer end = v32.__end_;
  }
  uint64_t v29 = *(end - 1);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v32.__begin_)
  {
    v32.__end_ = v32.__begin_;
    operator delete(v32.__begin_);
  }
  return v29;
}

void sub_1B20B9738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::quasar::ErrorRegion::GetWordConfusionFromErrorRegion(kaldi::quasar::ErrorRegion *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0
    || a2 >= (unint64_t)((uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Supplied region_id is out of bound, have only ", 46);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" regions, asked for ", 20);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, ".");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  if (!kaldi::quasar::ErrorRegion::HasWordConfusion(this, a2)) {
    return 0;
  }
  uint64_t v4 = *(void **)(*((void *)this + 2) + 40 * a2 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    unint64_t v6 = (void *)v4[2];
    if ((*(unsigned int (**)(void *))(*v6 + 40))(v6) == 7) {
      unint64_t v6 = (void *)v6[2];
    }
    if ((*(unsigned int (**)(void *))(*v6 + 40))(v6) == 6) {
      uint64_t v5 = v6;
    }
    uint64_t v4 = (void *)*v4;
  }
  while (v4);
  return v5;
}

uint64_t kaldi::quasar::ErrorRegion::PrintDetailedErrorInformation(uint64_t result, void *a2, kaldi::TransitionModel *a3, kaldi::quasar::ErrorProfile *a4, kaldi::LatticeScoreCache *a5, kaldi::LatticeScoreCache *a6)
{
  if (*(void *)(result + 88) != *(void *)(result + 80))
  {
    uint64_t v8 = 0;
    int v145 = *(_DWORD *)(result + 44);
    if (a5) {
      BOOL v9 = a6 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    int v10 = !v9;
    int v139 = v10;
    long long v141 = (uint64_t *)(result + 248);
    uint64_t v146 = result;
    do
    {
      uint64_t v142 = v8;
      WordConfusionFromErrorRegion = kaldi::quasar::ErrorRegion::GetWordConfusionFromErrorRegion((kaldi::quasar::ErrorRegion *)result, v8);
      if (WordConfusionFromErrorRegion)
      {
        unint64_t v12 = WordConfusionFromErrorRegion;
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
        uint64_t v13 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"--------------------------------------------", 44);
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
        uint64_t v15 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
        uint64_t v16 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        std::vector<int>::pointer v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        kaldi::quasar::ErrorProfile::ToWordString(a4, *(_DWORD *)(*(void *)(v146 + 80) + 4 * v142), (std::string *)&v166);
        if (SHIBYTE(v166.__end_) >= 0) {
          first = &v166;
        }
        else {
          first = v166.__first_;
        }
        if (SHIBYTE(v166.__end_) >= 0) {
          uint64_t end_high = HIBYTE(v166.__end_);
        }
        else {
          uint64_t end_high = (uint64_t)v166.__begin_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)first, end_high);
        if (SHIBYTE(v166.__end_) < 0) {
          operator delete(v166.__first_);
        }
        kaldi::quasar::ErrorRegion::GetTransitionIds(v146, v145, v145+ ((*(void *)(*(void *)(v146 + 272) + 24 * v142 + 8) - *(void *)(*(void *)(v146 + 272) + 24 * v142)) >> 2), *(_DWORD *)(v146 + 40), v141, &v164);
        uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
        (*(void (**)(std::__split_buffer<std::wstring> *__return_ptr, void *, kaldi::quasar::ErrorProfile *))(*v12 + 8))(&v166, v12, a4);
        if (SHIBYTE(v166.__end_) >= 0) {
          int v21 = &v166;
        }
        else {
          int v21 = v166.__first_;
        }
        if (SHIBYTE(v166.__end_) >= 0) {
          uint64_t begin = HIBYTE(v166.__end_);
        }
        else {
          uint64_t begin = (uint64_t)v166.__begin_;
        }
        unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, begin);
        std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
        uint64_t v24 = std::locale::use_facet(&v162, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
        std::locale::~locale(&v162);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(v166.__end_) < 0) {
          operator delete(v166.__first_);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"From frame ", 11);
        int v25 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" to ", 4);
        int v26 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
        int v27 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
        int v28 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LM scores:", 10);
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
        int64_t v30 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Ref", 3);
        unint64_t v31 = (unsigned char *)v12[2];
        std::vector<int> v32 = (unsigned char *)v12[3];
        int v33 = *(char **)(v146 + 56);
        int v34 = -1;
        do
        {
          int v35 = memcmp(v31, v33, v32 - v31);
          ++v34;
          v33 += 4;
        }
        while (v35);
        if (v32 != v31)
        {
          unint64_t v36 = 0;
          do
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
            std::ostream::operator<<();
            ++v36;
          }
          while (v36 < (uint64_t)(v12[3] - v12[2]) >> 2);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
        uint64_t v37 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Hyp ", 4);
        uint64_t v38 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
        unint64_t v39 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
        int64_t v40 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        kaldi::quasar::ErrorRegion::GetSequence((uint64_t)&v164, a3, 1, 0, (int **)&v162);
        kaldi::quasar::ErrorRegion::GetSequence(*(void *)(v146 + 272) + 24 * v142, a3, 1, 0, v161);
        kaldi::quasar::ErrorRegion::GetSequence((uint64_t)&v164, a3, 2, 0, (int **)v160);
        kaldi::quasar::ErrorRegion::GetSequence(*(void *)(v146 + 272) + 24 * v142, a3, 2, 0, (int **)v159);
        std::vector<int> __p = 0;
        long long v157 = 0;
        long long v158 = 0;
        long long v153 = 0;
        long long v154 = 0;
        long long v155 = 0;
        memset(&v152, 0, sizeof(v152));
        long long v149 = 0;
        long long v150 = 0;
        uint64_t v151 = 0;
        if (v139)
        {
          locale = v162.__locale_;
          if (v163 != v162.__locale_)
          {
            unint64_t v42 = 0;
            while (1)
            {
              float Score = kaldi::LatticeScoreCache::GetScore(a5, v145 + v42, *((_DWORD *)locale + v42));
              float v44 = Score;
              unint64_t v45 = v157;
              if (v157 >= v158)
              {
                int v47 = (float *)__p;
                uint64_t v48 = ((char *)v157 - (unsigned char *)__p) >> 2;
                unint64_t v49 = v48 + 1;
                if ((unint64_t)(v48 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v50 = (char *)v158 - (unsigned char *)__p;
                if (((char *)v158 - (unsigned char *)__p) >> 1 > v49) {
                  unint64_t v49 = v50 >> 1;
                }
                if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v51 = v49;
                }
                if (v51)
                {
                  unint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v51);
                  int v47 = (float *)__p;
                  unint64_t v45 = v157;
                }
                else
                {
                  unint64_t v52 = 0;
                }
                unint64_t v53 = (float *)&v52[4 * v48];
                *unint64_t v53 = v44;
                int v46 = v53 + 1;
                while (v45 != v47)
                {
                  int v54 = *((_DWORD *)v45-- - 1);
                  *((_DWORD *)v53-- - 1) = v54;
                }
                std::vector<int> __p = v53;
                long long v157 = v46;
                long long v158 = (float *)&v52[4 * v51];
                if (v47) {
                  operator delete(v47);
                }
              }
              else
              {
                float *v157 = Score;
                int v46 = v45 + 1;
              }
              long long v157 = v46;
              float v55 = kaldi::LatticeScoreCache::GetScore(a6, v145 + v42, v161[0][v42]);
              float v56 = v55;
              unint64_t v57 = v154;
              if (v154 >= v155)
              {
                int v59 = (float *)v153;
                uint64_t v60 = ((char *)v154 - (unsigned char *)v153) >> 2;
                unint64_t v61 = v60 + 1;
                if ((unint64_t)(v60 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v62 = (char *)v155 - (unsigned char *)v153;
                if (((char *)v155 - (unsigned char *)v153) >> 1 > v61) {
                  unint64_t v61 = v62 >> 1;
                }
                if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v63 = v61;
                }
                if (v63)
                {
                  int v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v63);
                  int v59 = (float *)v153;
                  unint64_t v57 = v154;
                }
                else
                {
                  int v64 = 0;
                }
                unint64_t v65 = (float *)&v64[4 * v60];
                float *v65 = v56;
                unint64_t v58 = v65 + 1;
                while (v57 != v59)
                {
                  int v66 = *((_DWORD *)v57-- - 1);
                  *((_DWORD *)v65-- - 1) = v66;
                }
                long long v153 = v65;
                long long v154 = v58;
                long long v155 = (float *)&v64[4 * v63];
                if (v59) {
                  operator delete(v59);
                }
              }
              else
              {
                *long long v154 = v55;
                unint64_t v58 = v57 + 1;
              }
              long long v154 = v58;
              unint64_t v67 = (float *)v149;
              int64_t v68 = v150;
              if (v149 == v150) {
                float v69 = 0.0;
              }
              else {
                float v69 = *(v150 - 1);
              }
              float v70 = (float)(v69 + *(v157 - 1)) - *(v58 - 1);
              if (v150 >= v151)
              {
                uint64_t v72 = ((char *)v150 - (unsigned char *)v149) >> 2;
                unint64_t v73 = v72 + 1;
                if ((unint64_t)(v72 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v74 = (char *)v151 - (unsigned char *)v149;
                if (((char *)v151 - (unsigned char *)v149) >> 1 > v73) {
                  unint64_t v73 = v74 >> 1;
                }
                if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v75 = v73;
                }
                if (v75)
                {
                  unsigned int v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v151, v75);
                  unint64_t v67 = (float *)v149;
                  int64_t v68 = v150;
                }
                else
                {
                  unsigned int v76 = 0;
                }
                unint64_t v77 = (float *)&v76[4 * v72];
                *unint64_t v77 = v70;
                uint64_t v71 = v77 + 1;
                while (v68 != v67)
                {
                  int v78 = *((_DWORD *)v68-- - 1);
                  *((_DWORD *)v77-- - 1) = v78;
                }
                long long v149 = v77;
                long long v150 = v71;
                uint64_t v151 = (float *)&v76[4 * v75];
                if (v67) {
                  operator delete(v67);
                }
              }
              else
              {
                *long long v150 = v70;
                uint64_t v71 = v68 + 1;
              }
              long long v150 = v71;
              float v79 = *(v157 - 1);
              float v80 = *(v154 - 1);
              if (vabds_f32(v79, v80) <= 0.01)
              {
                std::string::basic_string[abi:ne180100]<0>(v147, "");
                std::vector<std::string>::pointer end = v152.__end_;
                if (v152.__end_ >= v152.__end_cap_.__value_)
                {
                  unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * (((char *)v152.__end_ - (char *)v152.__begin_) >> 3);
                  unint64_t v85 = v82 + 1;
                  if (v82 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x5555555555555556 * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3) > v85) {
                    unint64_t v85 = 0x5555555555555556 * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3) >= 0x555555555555555) {
                    unint64_t v84 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v84 = v85;
                  }
                  v166.__end_cap_.__value_ = (std::allocator<std::wstring> *)&v152.__end_cap_;
                  if (v84) {
LABEL_114:
                  }
                    unint64_t v88 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v152.__end_cap_, v84);
                  else {
                    unint64_t v88 = 0;
                  }
LABEL_118:
                  uint64_t v89 = v88 + v82;
                  v166.__first_ = v88;
                  v166.__begin_ = v89;
                  v166.__end_cap_.__value_ = &v88[v84];
                  long long v90 = *(_OWORD *)v147;
                  v89->__r_.__value_.__r.__words[2] = v148;
                  *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v90;
                  v147[1] = 0;
                  std::wstring::size_type v148 = 0;
                  v147[0] = 0;
                  v166.__end_ = v89 + 1;
                  std::vector<std::string>::__swap_out_circular_buffer(&v152, (std::__split_buffer<std::string> *)&v166);
                  unint64_t v91 = v152.__end_;
                  std::__split_buffer<std::string>::~__split_buffer(&v166);
                  v152.__end_ = v91;
                  if (SHIBYTE(v148) < 0) {
                    operator delete(v147[0]);
                  }
                  goto LABEL_120;
                }
              }
              else if (v80 >= v79)
              {
                std::string::basic_string[abi:ne180100]<0>(v147, "REF");
                std::vector<std::string>::pointer end = v152.__end_;
                if (v152.__end_ >= v152.__end_cap_.__value_)
                {
                  unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * (((char *)v152.__end_ - (char *)v152.__begin_) >> 3);
                  unint64_t v87 = v82 + 1;
                  if (v82 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x5555555555555556 * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3) > v87) {
                    unint64_t v87 = 0x5555555555555556 * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3) >= 0x555555555555555) {
                    unint64_t v84 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v84 = v87;
                  }
                  v166.__end_cap_.__value_ = (std::allocator<std::wstring> *)&v152.__end_cap_;
                  if (v84) {
                    goto LABEL_114;
                  }
                  unint64_t v88 = 0;
                  goto LABEL_118;
                }
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(v147, "HYP");
                std::vector<std::string>::pointer end = v152.__end_;
                if (v152.__end_ >= v152.__end_cap_.__value_)
                {
                  unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * (((char *)v152.__end_ - (char *)v152.__begin_) >> 3);
                  unint64_t v83 = v82 + 1;
                  if (v82 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x5555555555555556 * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3) > v83) {
                    unint64_t v83 = 0x5555555555555556 * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3) >= 0x555555555555555) {
                    unint64_t v84 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v84 = v83;
                  }
                  v166.__end_cap_.__value_ = (std::allocator<std::wstring> *)&v152.__end_cap_;
                  if (v84) {
                    goto LABEL_114;
                  }
                  unint64_t v88 = 0;
                  goto LABEL_118;
                }
              }
              long long v86 = *(_OWORD *)v147;
              end->__r_.__value_.__r.__words[2] = v148;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v86;
              v152.__end_ = end + 1;
LABEL_120:
              ++v42;
              locale = v162.__locale_;
              if (v42 >= (v163 - v162.__locale_) >> 2)
              {
                if (__p != v157)
                {
                  long long v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"AM scores: ", 11);
                  std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(void *)(*v92 - 24)));
                  long long v93 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
                  ((void (*)(const std::locale::facet *, uint64_t))v93->__vftable[2].~facet_0)(v93, 10);
                  std::locale::~locale((std::locale *)&v166);
                  std::ostream::put();
                  std::ostream::flush();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Ref: ", 5);
                  long long v94 = (float *)__p;
                  if (((unint64_t)((char *)v157 - (unsigned char *)__p) >> 2))
                  {
                    uint64_t v95 = ((unint64_t)((char *)v157 - (unsigned char *)__p) >> 2);
                    float v96 = 0.0;
                    do
                    {
                      float v97 = *v94++;
                      float v96 = v96 + v97;
                      --v95;
                    }
                    while (v95);
                  }
                  unint64_t v98 = (void *)std::ostream::operator<<();
                  std::ios_base::getloc((const std::ios_base *)((char *)v98 + *(void *)(*v98 - 24)));
                  unint64_t v99 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
                  ((void (*)(const std::locale::facet *, uint64_t))v99->__vftable[2].~facet_0)(v99, 10);
                  std::locale::~locale((std::locale *)&v166);
                  std::ostream::put();
                  std::ostream::flush();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Hyp: ", 5);
                  uint64_t v100 = (float *)v153;
                  if (((unint64_t)((char *)v154 - (unsigned char *)v153) >> 2))
                  {
                    uint64_t v101 = ((unint64_t)((char *)v154 - (unsigned char *)v153) >> 2);
                    float v102 = 0.0;
                    do
                    {
                      float v103 = *v100++;
                      float v102 = v102 + v103;
                      --v101;
                    }
                    while (v101);
                  }
                  uint64_t v104 = (void *)std::ostream::operator<<();
                  std::ios_base::getloc((const std::ios_base *)((char *)v104 + *(void *)(*v104 - 24)));
                  unint64_t v105 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
                  ((void (*)(const std::locale::facet *, uint64_t))v105->__vftable[2].~facet_0)(v105, 10);
                  std::locale::~locale((std::locale *)&v166);
                  std::ostream::put();
                  std::ostream::flush();
                  std::ios_base::getloc((const std::ios_base *)((char *)v104 + *(void *)(*v104 - 24)));
                  uint64_t v106 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
                  ((void (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 10);
                  std::locale::~locale((std::locale *)&v166);
                  std::ostream::put();
                  std::ostream::flush();
                }
                break;
              }
            }
          }
        }
        uint64_t v107 = 0;
        uint64_t v108 = 0;
        if ((int)((unint64_t)(v165 - v164) >> 2) >= 20) {
          int v109 = 20;
        }
        else {
          int v109 = (unint64_t)(v165 - v164) >> 2;
        }
        while (v109 > (int)v108)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Ref Models:", 11);
          uint64_t v110 = v109;
          uint64_t v111 = v108;
          do
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
            std::ostream::operator<<();
            ++v111;
          }
          while (v109 != v111);
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
          uint64_t v112 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v112->__vftable[2].~facet_0)(v112, 10);
          std::locale::~locale((std::locale *)&v166);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Hyp Models:", 11);
          uint64_t v113 = v108;
          do
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
            std::ostream::operator<<();
            ++v113;
          }
          while (v109 != v113);
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
          unint64_t v114 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v114->__vftable[2].~facet_0)(v114, 10);
          std::locale::~locale((std::locale *)&v166);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Ref Phones:", 11);
          uint64_t v115 = v108;
          do
          {
            unint64_t v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
            kaldi::quasar::ErrorProfile::ToPhoneString(a4, *((_DWORD *)v160[0] + v115), (std::string *)&v166);
            if (SHIBYTE(v166.__end_) >= 0) {
              uint64_t v117 = &v166;
            }
            else {
              uint64_t v117 = v166.__first_;
            }
            if (SHIBYTE(v166.__end_) >= 0) {
              uint64_t v118 = HIBYTE(v166.__end_);
            }
            else {
              uint64_t v118 = (uint64_t)v166.__begin_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)v117, v118);
            if (SHIBYTE(v166.__end_) < 0) {
              operator delete(v166.__first_);
            }
            ++v115;
          }
          while (v109 != v115);
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
          int v119 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v119->__vftable[2].~facet_0)(v119, 10);
          std::locale::~locale((std::locale *)&v166);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Hyp Phones:", 11);
          uint64_t v120 = v108;
          do
          {
            uint64_t v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
            kaldi::quasar::ErrorProfile::ToPhoneString(a4, *((_DWORD *)v159[0] + v120), (std::string *)&v166);
            if (SHIBYTE(v166.__end_) >= 0) {
              uint64_t v122 = &v166;
            }
            else {
              uint64_t v122 = v166.__first_;
            }
            if (SHIBYTE(v166.__end_) >= 0) {
              uint64_t v123 = HIBYTE(v166.__end_);
            }
            else {
              uint64_t v123 = (uint64_t)v166.__begin_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)v122, v123);
            if (SHIBYTE(v166.__end_) < 0) {
              operator delete(v166.__first_);
            }
            ++v120;
          }
          while (v109 != v120);
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
          uint64_t v124 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v124->__vftable[2].~facet_0)(v124, 10);
          std::locale::~locale((std::locale *)&v166);
          std::ostream::put();
          std::ostream::flush();
          if (__p != v157)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Ref Scores:", 11);
            uint64_t v125 = v108;
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
              std::ostream::operator<<();
              ++v125;
            }
            while (v109 != v125);
            std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
            uint64_t v126 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v126->__vftable[2].~facet_0)(v126, 10);
            std::locale::~locale((std::locale *)&v166);
            std::ostream::put();
            std::ostream::flush();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Hyp Scores:", 11);
            uint64_t v127 = v108;
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
              std::ostream::operator<<();
              ++v127;
            }
            while (v109 != v127);
            std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
            int32x2_t v128 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v128->__vftable[2].~facet_0)(v128, 10);
            std::locale::~locale((std::locale *)&v166);
            std::ostream::put();
            std::ostream::flush();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"           ", 11);
            uint64_t v129 = v108;
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
              int v130 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)"%", 1);
              ++v129;
            }
            while (v109 != v129);
            std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
            unint64_t v131 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v131->__vftable[2].~facet_0)(v131, 10);
            std::locale::~locale((std::locale *)&v166);
            std::ostream::put();
            std::ostream::flush();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"           ", 11);
            uint64_t v132 = v107;
            do
            {
              BOOL v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
              int v134 = *((char *)&v152.__begin_->__r_.__value_.__r.__words[2] + v132 + 7);
              if (v134 >= 0) {
                uint64_t v135 = (char *)v152.__begin_ + v132;
              }
              else {
                uint64_t v135 = *(std::string::pointer *)((char *)&v152.__begin_->__r_.__value_.__l.__data_ + v132);
              }
              if (v134 >= 0) {
                uint64_t v136 = *((unsigned __int8 *)&v152.__begin_->__r_.__value_.__r.__words[2] + v132 + 7);
              }
              else {
                uint64_t v136 = *(std::string::size_type *)((char *)&v152.__begin_->__r_.__value_.__l.__size_ + v132);
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)v135, v136);
              v132 += 24;
              --v110;
            }
            while (v108 != v110);
            std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
            uint64_t v137 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v137->__vftable[2].~facet_0)(v137, 10);
            std::locale::~locale((std::locale *)&v166);
            std::ostream::put();
            std::ostream::flush();
          }
          if (v109 + 20 >= (int)((unint64_t)(v165 - v164) >> 2)) {
            int v109 = (unint64_t)(v165 - v164) >> 2;
          }
          else {
            v109 += 20;
          }
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
          unint64_t v138 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v138->__vftable[2].~facet_0)(v138, 10);
          std::locale::~locale((std::locale *)&v166);
          std::ostream::put();
          v108 += 20;
          v107 += 480;
          std::ostream::flush();
        }
        if (v149)
        {
          long long v150 = (float *)v149;
          operator delete(v149);
        }
        v166.__first_ = (std::__split_buffer<std::wstring>::pointer)&v152;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
        if (v153)
        {
          long long v154 = (float *)v153;
          operator delete(v153);
        }
        if (__p)
        {
          long long v157 = (float *)__p;
          operator delete(__p);
        }
        if (v159[0])
        {
          v159[1] = v159[0];
          operator delete(v159[0]);
        }
        if (v160[0])
        {
          v160[1] = v160[0];
          operator delete(v160[0]);
        }
        if (v161[0])
        {
          v161[1] = v161[0];
          operator delete(v161[0]);
        }
        if (v162.__locale_)
        {
          long long v163 = v162.__locale_;
          operator delete(v162.__locale_);
        }
        if (v164)
        {
          long long v165 = v164;
          operator delete(v164);
        }
      }
      BOOL result = v146;
      v145 += (*(void *)(*(void *)(v146 + 272) + 24 * v142 + 8) - *(void *)(*(void *)(v146 + 272) + 24 * v142)) >> 2;
      uint64_t v8 = v142 + 1;
    }
    while (v142 + 1 < (unint64_t)((uint64_t)(*(void *)(v146 + 88) - *(void *)(v146 + 80)) >> 2));
  }
  return result;
}

void sub_1B20BB194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char *__p,char *a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  std::locale::~locale((std::locale *)(v43 - 144));
  if (__p)
  {
    a28 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  unint64_t v45 = *(void **)(v43 - 216);
  if (v45)
  {
    *(void *)(v43 - 208) = v45;
    operator delete(v45);
  }
  int v46 = *(void **)(v43 - 192);
  if (v46)
  {
    *(void *)(v43 - 184) = v46;
    operator delete(v46);
  }
  int v47 = *(void **)(v43 - 168);
  if (v47)
  {
    *(void *)(v43 - 160) = v47;
    operator delete(v47);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorRegion::GetTransitionIds(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X4>, char **a6@<X8>)
{
  if (a2 == a3)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
  else
  {
    int v9 = a2;
    unint64_t LocationOfTransIdInList = kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList(a1, a2, a4, a5);
    a6[1] = 0;
    a6[2] = 0;
    *a6 = 0;
    if (v9 < a3)
    {
      unint64_t v11 = 0;
      unint64_t v12 = HIDWORD(LocationOfTransIdInList);
      uint64_t v13 = a6 + 2;
      uint64_t v14 = *a5;
      uint64_t v15 = a5[1];
      int v16 = LocationOfTransIdInList;
      do
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3) <= v16) {
          break;
        }
        unint64_t v17 = v16;
        uint64_t v18 = *(void *)(v14 + 24 * v16);
        if ((unint64_t)v11 >= *v13)
        {
          BOOL v19 = *a6;
          uint64_t v20 = (v11 - *a6) >> 2;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = *v13 - (void)v19;
          if (v22 >> 1 > v21) {
            unint64_t v21 = v22 >> 1;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v13, v23);
            BOOL v19 = *a6;
            unint64_t v11 = a6[1];
            uint64_t v13 = a6 + 2;
          }
          else
          {
            uint64_t v24 = 0;
          }
          int v25 = &v24[4 * v20];
          *(_DWORD *)int v25 = *(_DWORD *)(v18 + 4 * (int)v12);
          int v26 = v25 + 4;
          while (v11 != v19)
          {
            int v27 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v25 - 1) = v27;
            v25 -= 4;
          }
          *a6 = v25;
          a6[1] = v26;
          a6[2] = &v24[4 * v23];
          if (v19)
          {
            operator delete(v19);
            uint64_t v13 = a6 + 2;
          }
          unint64_t v11 = v26;
        }
        else
        {
          *(_DWORD *)unint64_t v11 = *(_DWORD *)(v18 + 4 * (int)v12);
          v11 += 4;
        }
        a6[1] = v11;
        LODWORD(v12) = v12 + 1;
        uint64_t v14 = *a5;
        uint64_t v15 = a5[1];
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v15 - *a5) >> 3);
        if (v28 > v16)
        {
          uint64_t v29 = (void *)(v14 + 24 * v16 + 8);
          while ((int)v12 >= (unint64_t)((uint64_t)(*v29 - *(v29 - 1)) >> 2))
          {
            LODWORD(v12) = 0;
            int v30 = 0;
            ++v17;
            v29 += 3;
            if (v28 <= v17) {
              goto LABEL_29;
            }
          }
          int v30 = v12;
LABEL_29:
          LODWORD(v12) = v30;
          int v16 = v17;
        }
        ++v9;
      }
      while (v9 != a3);
    }
  }
}

void sub_1B20BB5C8(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorRegion::Analyze(kaldi::quasar::ErrorRegion *this, kaldi::quasar::AttributeFactory *a2, const kaldi::TransitionModel *a3, int a4)
{
  v9[0] = &unk_1F0A4FF88;
  v9[1] = 0x3F80000000000000;
  int v10 = 0;
  BOOL HasAttribute = kaldi::quasar::ErrorRegion::HasAttribute(this, (kaldi::quasar::AbstractAttribute *)v9);
  kaldi::quasar::ErrorRegion::AddPdfAttributes(this, a2, a3, HasAttribute);
  kaldi::quasar::ErrorRegion::AddPhoneAttributes(this, a2, a3, HasAttribute);
  kaldi::quasar::ErrorRegion::AddWordAttributes(this, a2, a3, a4, HasAttribute);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v9);
}

void sub_1B20BB6A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorRegion::AddPdfAttributes(kaldi::quasar::ErrorRegion *this, kaldi::quasar::AttributeFactory *a2, const kaldi::TransitionModel *a3, int a4)
{
  kaldi::quasar::ErrorRegion::GetSequence(a3, (uint64_t *)this + 31, 1, 0, (int **)&__p);
  kaldi::quasar::ErrorRegion::GetSequence(a3, (uint64_t *)this + 34, 1, 0, &v26);
  if (a4)
  {
    uint64_t v8 = v27;
    if (v27 != v26)
    {
      unint64_t v9 = 0;
      uint64_t v8 = v26;
      do
      {
        BaseAttribute = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, v8[v9], 1, 0, 1);
        unsigned int LocationOfTransIdInList = kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList((uint64_t)BaseAttribute, (int)v9 + *((_DWORD *)this + 11), *((_DWORD *)this + 11), (void *)this + 34);
        kaldi::quasar::ErrorRegion::AddAttribute(this, (kaldi::quasar::AbstractAttribute *)BaseAttribute, LocationOfTransIdInList);
        ++v9;
        uint64_t v8 = v26;
      }
      while (v9 < v27 - v26);
    }
  }
  else
  {
    int v12 = *((_DWORD *)this + 10);
    int v13 = *((_DWORD *)this + 11);
    int v14 = v12 - v13;
    unint64_t v15 = v14 & ~(v14 >> 31);
    unint64_t v17 = __p;
    int v16 = v29;
    unint64_t v18 = ((v29 - (unsigned char *)__p) >> 2) + v12 - v13;
    uint64_t v8 = v26;
    BOOL v19 = v27;
    if (v27 - v26 < v18) {
      unint64_t v18 = v27 - v26;
    }
    if (v18 > v15)
    {
      uint64_t v20 = v14;
      int v21 = v13 - v12;
      do
      {
        int v22 = v8[v15];
        if (v17[v21 + (int)v15] != v22)
        {
          unint64_t v23 = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, v22, 1, 0, 1);
          unsigned int v24 = kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList((uint64_t)v23, (int)v15 + *((_DWORD *)this + 11), *((_DWORD *)this + 11), (void *)this + 34);
          kaldi::quasar::ErrorRegion::AddAttribute(this, (kaldi::quasar::AbstractAttribute *)v23, v24);
          unint64_t v17 = __p;
          int v16 = v29;
          uint64_t v8 = v26;
          BOOL v19 = v27;
        }
        ++v15;
        unint64_t v25 = v20 + ((v16 - (unsigned char *)v17) >> 2);
        if (v19 - v8 < v25) {
          unint64_t v25 = v19 - v8;
        }
      }
      while (v25 > v15);
    }
  }
  if (v8)
  {
    int v27 = v8;
    operator delete(v8);
  }
  if (__p)
  {
    uint64_t v29 = __p;
    operator delete(__p);
  }
}

void sub_1B20BB878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorRegion::AddPhoneAttributes(kaldi::quasar::ErrorRegion *this, kaldi::quasar::AttributeFactory *a2, const kaldi::TransitionModel *a3, int a4)
{
  uint64_t v43 = 0;
  float v44 = 0;
  uint64_t v45 = 0;
  int64_t v40 = 0;
  unint64_t v41 = 0;
  uint64_t v8 = (void *)((char *)this + 272);
  uint64_t v42 = 0;
  kaldi::quasar::ErrorRegion::GetSequence(a3, (uint64_t *)this + 34, 2, 0, (int **)v39);
  kaldi::quasar::ErrorRegion::GetSequence(a3, (uint64_t *)this + 31, 2, 0, (int **)&__p);
  kaldi::quasar::ErrorRegion::ComputePhoneAlignment((uint64_t)&__p, *((_DWORD *)this + 10), v39, *((_DWORD *)this + 11), 1, (void **)&v43, (uint64_t)&v40);
  if (__p)
  {
    uint64_t v37 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  int v33 = 0;
  int v34 = 0;
  uint64_t v35 = 0;
  if (*((void *)this + 38) != *((void *)this + 39))
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v9 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(&v30, (uint64_t)this + 304);
    int v10 = *((_DWORD *)this + 11);
    uint64_t v31 = v9;
    kaldi::quasar::ErrorRegion::GetSequence(a3, &v30, 2, 0, (int **)v29);
    kaldi::quasar::ErrorRegion::ComputePhoneAlignment((uint64_t)v39, v10, v29, *((_DWORD *)this + 11), 1, &__p, (uint64_t)&v33);
    if (v29[0])
    {
      v29[1] = v29[0];
      operator delete(v29[0]);
    }
    v29[0] = &v30;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
  }
  unint64_t v11 = v43;
  if (v44 != (unsigned char *)v43)
  {
    unint64_t v12 = 0;
    LODWORD(i) = 0;
    int v14 = __p;
    unint64_t v15 = v37;
    while (1)
    {
      if (v14 != v15)
      {
        unint64_t v16 = (v15 - v14) >> 3;
        if (v16 > (int)i)
        {
          unint64_t i = (int)i;
          unint64_t v17 = (int *)&v14[8 * (int)i];
          do
          {
            int v18 = *v17;
            v17 += 2;
            if (v18 == v11[2 * v12 + 1]) {
              break;
            }
            ++i;
          }
          while (v16 > i);
        }
      }
      if (a4) {
        break;
      }
      uint64_t v20 = &v11[2 * v12];
      int v19 = v20[1];
      if (*v20 != v19) {
        goto LABEL_17;
      }
LABEL_26:
      ++v12;
      unint64_t v11 = v43;
      if (v12 >= (v44 - (unsigned char *)v43) >> 3) {
        goto LABEL_27;
      }
    }
    int v19 = v11[2 * v12 + 1];
LABEL_17:
    BaseAttribute = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, v19, 2, 0, 1);
    unsigned int LocationOfTransIdInList = kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList((uint64_t)BaseAttribute, *((_DWORD *)v40 + v12), *((_DWORD *)this + 11), v8);
    kaldi::quasar::ErrorRegion::AddAttribute(this, (kaldi::quasar::AbstractAttribute *)BaseAttribute, LocationOfTransIdInList);
    unint64_t v15 = __p;
    if (__p == v37)
    {
      int v14 = __p;
    }
    else
    {
      uint64_t v23 = 8 * (int)i;
      for (unint64_t i = (int)i; ; ++i)
      {
        int v14 = __p;
        unint64_t v15 = v37;
        if (i >= (v37 - (unsigned char *)__p) >> 3 || *(_DWORD *)((char *)__p + v23) != v43[2 * v12 + 1]) {
          break;
        }
        if (*(_DWORD *)((char *)__p + v23 + 8) == *(_DWORD *)((char *)__p + v23 + 12)) {
          int v24 = 7;
        }
        else {
          int v24 = 6;
        }
        unint64_t v25 = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, *((_DWORD *)__p + 2 * v12 + 1), 2, v24, 2);
        unint64_t v26 = kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList((uint64_t)v25, *((_DWORD *)v40 + v12), *((_DWORD *)this + 11), v8);
        unint64_t v27 = kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList(v26, *((_DWORD *)v33 + i + 1), *((_DWORD *)this + 11), v8);
        unsigned int v28 = kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList(v27, *((_DWORD *)v40 + v12), *((_DWORD *)this + 11), v8);
        v23 += 8;
        kaldi::quasar::ErrorRegion::AddAttribute(this, (kaldi::quasar::AbstractAttribute *)v25, v28);
      }
    }
    goto LABEL_26;
  }
LABEL_27:
  if (v33)
  {
    int v34 = v33;
    operator delete(v33);
  }
  if (__p)
  {
    uint64_t v37 = __p;
    operator delete(__p);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  if (v40)
  {
    unint64_t v41 = v40;
    operator delete(v40);
  }
  if (v43)
  {
    float v44 = v43;
    operator delete(v43);
  }
}

void sub_1B20BBBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  std::vector<int> __p = &a13;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a16)
  {
    a17 = (uint64_t)a16;
    operator delete(a16);
  }
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  unsigned int v28 = *(void **)(v26 - 104);
  if (v28)
  {
    *(void *)(v26 - 96) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorRegion::AddWordAttributes(kaldi::quasar::ErrorRegion *this, kaldi::quasar::AttributeFactory *a2, const kaldi::TransitionModel *a3, int a4, char a5)
{
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  kaldi::quasar::ErrorRegion::ComputeWordAlignment((uint64_t)this, a3, &v68);
  unint64_t v8 = (uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 2;
  LOBYTE(v64) = 0;
  std::vector<BOOL>::vector(v67, v8, (unsigned __int8 *)&v64);
  uint64_t v9 = v68;
  if (v69 != v68)
  {
    unint64_t v10 = 0;
    int v53 = 0;
    do
    {
      int v64 = 0;
      unint64_t v65 = 0;
      uint64_t v66 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v64, *(const void **)(v9 + 48 * v10), *(void *)(v9 + 48 * v10 + 8), (uint64_t)(*(void *)(v9 + 48 * v10 + 8) - *(void *)(v9 + 48 * v10)) >> 2);
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      unint64_t v61 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v61, *(const void **)(v68 + 48 * v10 + 24), *(void *)(v68 + 48 * v10 + 32), (uint64_t)(*(void *)(v68 + 48 * v10 + 32) - *(void *)(v68 + 48 * v10 + 24)) >> 2);
      std::vector<int> __p = 0;
      int v59 = 0;
      uint64_t v60 = 0;
      unint64_t v12 = v64;
      unint64_t v11 = v65;
      if (v65 == v64)
      {
        int v13 = 0;
      }
      else
      {
        int v13 = 0;
        unint64_t v14 = 0;
        do
        {
          int v15 = v12[v14];
          BOOL v16 = v15 == a4 || v15 == 0;
          if (!v16)
          {
            if (v13 >= v60)
            {
              int v18 = (char *)__p;
              uint64_t v19 = (v13 - (unsigned char *)__p) >> 2;
              unint64_t v20 = v19 + 1;
              if ((unint64_t)(v19 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v21 = v60 - (unsigned char *)__p;
              if ((v60 - (unsigned char *)__p) >> 1 > v20) {
                unint64_t v20 = v21 >> 1;
              }
              if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v22 = v20;
              }
              if (v22)
              {
                uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v60, v22);
                int v18 = (char *)__p;
                int v13 = v59;
                int v15 = v12[v14];
              }
              else
              {
                uint64_t v23 = 0;
              }
              int v24 = &v23[4 * v19];
              *(_DWORD *)int v24 = v15;
              unint64_t v17 = v24 + 4;
              while (v13 != v18)
              {
                int v25 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v24 - 1) = v25;
                v24 -= 4;
              }
              std::vector<int> __p = v24;
              int v59 = v17;
              uint64_t v60 = &v23[4 * v22];
              if (v18) {
                operator delete(v18);
              }
            }
            else
            {
              *(_DWORD *)int v13 = v15;
              unint64_t v17 = v13 + 4;
            }
            int v59 = v17;
            int v13 = v17;
            unint64_t v12 = v64;
            unint64_t v11 = v65;
          }
          ++v14;
        }
        while (v14 < (v11 - (unsigned char *)v12) >> 2);
      }
      float v55 = 0;
      float v56 = 0;
      unint64_t v57 = 0;
      unint64_t v27 = v61;
      uint64_t v26 = v62;
      if (v62 == v61)
      {
        uint64_t v42 = 0;
        unsigned int v28 = 0;
        uint64_t v30 = v62;
      }
      else
      {
        unsigned int v28 = 0;
        unint64_t v29 = 0;
        uint64_t v30 = v62;
        do
        {
          int v31 = v27[v29];
          if (v31 != a4 && v31 != 0)
          {
            if (v28 >= v57)
            {
              int v34 = v55;
              uint64_t v35 = (v28 - v55) >> 2;
              unint64_t v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v37 = v57 - v55;
              if ((v57 - v55) >> 1 > v36) {
                unint64_t v36 = v37 >> 1;
              }
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v57, v38);
                int v34 = v55;
                unsigned int v28 = v56;
                int v31 = v27[v29];
              }
              else
              {
                unint64_t v39 = 0;
              }
              int64_t v40 = &v39[4 * v35];
              *(_DWORD *)int64_t v40 = v31;
              int v33 = v40 + 4;
              while (v28 != v34)
              {
                int v41 = *((_DWORD *)v28 - 1);
                v28 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }
              float v55 = v40;
              unint64_t v57 = &v39[4 * v38];
              if (v34) {
                operator delete(v34);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v28 = v31;
              int v33 = v28 + 4;
            }
            float v56 = v33;
            unsigned int v28 = v33;
            unint64_t v27 = v61;
            uint64_t v30 = v62;
          }
          ++v29;
        }
        while (v29 < (v30 - (unsigned char *)v27) >> 2);
        int v13 = v59;
        uint64_t v42 = v55;
        uint64_t v26 = v27;
      }
      if (v13 - (unsigned char *)__p == v28 - v42)
      {
        int v43 = memcmp(__p, v42, v13 - (unsigned char *)__p);
        BOOL v44 = v43 != 0;
        if ((a5 & 1) == 0 && !v43) {
          goto LABEL_69;
        }
      }
      else
      {
        BOOL v44 = 1;
      }
      if (v30 == (unsigned char *)v26)
      {
        uint64_t v30 = v26;
        if (v44) {
          goto LABEL_66;
        }
      }
      else
      {
        BOOL v51 = v44;
        unint64_t v52 = v10;
        unint64_t v45 = 0;
        uint64_t v46 = 24 * v53;
        do
        {
          BaseAttribute = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, v26[v45], 3, 0, 1);
          kaldi::quasar::ErrorRegion::AddAttribute(this, (kaldi::quasar::AbstractAttribute *)BaseAttribute, v53 + v45);
          kaldi::quasar::ErrorRegion::AddMinDurationAttributes(this, a2, (uint64_t *)(*((void *)this + 34) + v46), *((_DWORD *)v61 + v45), v53 + v45, 3, 1, a3);
          ++v45;
          uint64_t v26 = v61;
          uint64_t v30 = v62;
          v46 += 24;
        }
        while (v45 < ((char *)v62 - (unsigned char *)v61) >> 2);
        unint64_t v10 = v52;
        if (v51)
        {
LABEL_66:
          BOOL v16 = v30 == (unsigned char *)v26;
          uint64_t v30 = v26;
          if (!v16)
          {
            unint64_t v48 = 0;
            do
            {
              WordConfusionAttribute = kaldi::quasar::AttributeFactory::CreateWordConfusionAttribute(a2, v48, (uint64_t)&v64, (uint64_t)&v61);
              kaldi::quasar::ErrorRegion::AddAttribute(this, (kaldi::quasar::AbstractAttribute *)WordConfusionAttribute, v53 + v48++);
              uint64_t v26 = v61;
              uint64_t v30 = v62;
            }
            while (v48 < ((char *)v62 - (unsigned char *)v61) >> 2);
          }
        }
      }
LABEL_69:
      if (v55) {
        operator delete(v55);
      }
      if (__p)
      {
        int v59 = (char *)__p;
        operator delete(__p);
      }
      if (v61)
      {
        uint64_t v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        unint64_t v65 = v64;
        operator delete(v64);
      }
      v53 += (unint64_t)(v30 - (unsigned char *)v26) >> 2;
      ++v10;
      uint64_t v9 = v68;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v69 - v68) >> 4) > v10);
  }
  if (v67[0]) {
    operator delete(v67[0]);
  }
  v67[0] = (void **)&v68;
  std::vector<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::__destroy_vector::operator()[abi:ne180100](v67);
}

void sub_1B20BC180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  *(void *)(v26 - 136) = v26 - 112;
  std::vector<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 136));
  _Unwind_Resume(a1);
}

uint64_t **kaldi::quasar::ErrorRegion::AddMinDurationAttributes(kaldi::quasar::ErrorRegion *a1, kaldi::quasar::AttributeFactory *a2, uint64_t *a3, int a4, unsigned int a5, int a6, int a7, kaldi::TransitionModel *this)
{
  uint64_t v13 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v16 = 0;
    int v17 = 1;
LABEL_3:
    char v27 = v17;
    do
    {
      int v18 = *(_DWORD *)(v13 + 4 * v16);
      BOOL result = (uint64_t **)kaldi::TransitionModel::IsSelfLoop(this, v18);
      if (result)
      {
        int v17 = 0;
        ++v16;
        uint64_t v13 = *a3;
        if (v16 < (a3[1] - *a3) >> 2) {
          goto LABEL_3;
        }
        return result;
      }
      BOOL result = (uint64_t **)kaldi::TransitionModel::IsFinal(this, v18);
      if ((result & v17) == 1)
      {
        int v20 = kaldi::TransitionModel::TransitionIdToTransitionState(this, v18);
        int v21 = kaldi::TransitionModel::TransitionStateToPhone(this, v20);
        BaseAttribute = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, v21, 2, 0, a7);
        BOOL result = (uint64_t **)kaldi::quasar::ErrorRegion::HasAttribute(a1, (kaldi::quasar::AbstractAttribute *)BaseAttribute);
        if (result)
        {
          int v23 = kaldi::TransitionModel::TransitionStateToPhone(this, v20);
          int v24 = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, v23, 2, a6, a7);
          BOOL result = kaldi::quasar::ErrorRegion::AddAttribute(a1, (kaldi::quasar::AbstractAttribute *)v24, a5);
        }
        int v17 = 1;
      }
      else
      {
        v17 |= result;
      }
      ++v16;
      uint64_t v13 = *a3;
    }
    while (v16 < (a3[1] - *a3) >> 2);
    if ((v27 & 1) == 0) {
      return result;
    }
  }
  int v25 = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, a4, 3, a6, a7);
  return kaldi::quasar::ErrorRegion::AddAttribute(a1, (kaldi::quasar::AbstractAttribute *)v25, a5);
}

unint64_t kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList(uint64_t a1, int a2, int a3, void *a4)
{
  if (a2 < a3) {
    goto LABEL_12;
  }
  uint64_t v4 = *a4;
  int v5 = ((*(void *)(*a4 + 8) - *(void *)*a4) >> 2) + a3;
  unint64_t v6 = (a4[1] - *a4) / 24;
  if (v5 <= a2)
  {
    unint64_t v7 = 0;
    unint64_t v8 = (void *)(v4 + 32);
    while (v6 != v7)
    {
      ++v7;
      v5 += (*v8 - *(v8 - 1)) >> 2;
      v8 += 3;
      if (v5 > a2) {
        goto LABEL_9;
      }
    }
    unint64_t v7 = (a4[1] - *a4) / 24;
LABEL_9:
    unint64_t v7 = v7;
  }
  else
  {
    unint64_t v7 = 0;
  }
  if (v6 <= v7)
  {
LABEL_12:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Supplied frame is not part of given transition ids");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return v7 | ((unint64_t)(a2
                                - v5
                                + ((*(void *)(v4 + 24 * v7 + 8)
                                                - *(void *)(v4 + 24 * v7)) >> 2)) << 32);
}

void kaldi::quasar::ErrorRegion::AddErrorRegion(kaldi::quasar::ErrorRegion *this, const kaldi::quasar::ErrorRegion *a2)
{
  *((void *)this + 6) = *((void *)a2 + 6);
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)((char *)this + 56), *((void *)this + 8), *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)((char *)this + 80), *((void *)this + 11), *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 104, *((void *)this + 14), *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 128, *((void *)this + 17), *((char **)a2 + 16), *((char **)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 152, *((void *)this + 20), *((char **)a2 + 19), *((char **)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 176, *((void *)this + 23), *((char **)a2 + 22), *((char **)a2 + 23), (uint64_t)(*((void *)a2 + 23) - *((void *)a2 + 22)) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 200, *((void *)this + 26), *((char **)a2 + 25), *((char **)a2 + 26), (uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 224, *((void *)this + 29), *((char **)a2 + 28), *((char **)a2 + 29), (uint64_t)(*((void *)a2 + 29) - *((void *)a2 + 28)) >> 2);
  std::vector<std::vector<int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<int> const*>,std::__wrap_iter<std::vector<int> const*>>((uint64_t *)this + 31, *((__n128 **)this + 32), *((void *)a2 + 31), *((void *)a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 32) - *((void *)a2 + 31)) >> 3));
  std::vector<std::vector<int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<int> const*>,std::__wrap_iter<std::vector<int> const*>>((uint64_t *)this + 34, *((__n128 **)this + 35), *((void *)a2 + 34), *((void *)a2 + 35), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 35) - *((void *)a2 + 34)) >> 3));
  if (*((void *)a2 + 3) != *((void *)a2 + 2))
  {
    unint64_t v4 = 0;
    do
    {
      long long v8 = 0u;
      long long v9 = 0u;
      int v10 = 1065353216;
      std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::push_back[abi:ne180100]((uint64_t *)this + 2, (uint64_t *)&v8);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v8);
      uint64_t v5 = *((void *)a2 + 2);
      unint64_t v6 = *(uint64_t ***)(v5 + 40 * v4 + 16);
      if (v6)
      {
        do
        {
          uint64_t v7 = *((void *)this + 3) - 40;
          *(void *)&long long v8 = (*(uint64_t (**)(uint64_t *))(*v6[2] + 32))(v6[2]);
          std::__hash_table<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AbstractAttribute * const&>(v7, &v8, &v8);
          unint64_t v6 = (uint64_t **)*v6;
        }
        while (v6);
        uint64_t v5 = *((void *)a2 + 2);
      }
      ++v4;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((*((void *)a2 + 3) - v5) >> 3) > v4);
  }
  *(void *)&long long v8 = &unk_1F0A4FF88;
  *((void *)&v8 + 1) = 0x3F80000000000000;
  LODWORD(vquasar::readMatrixFile((uint64_t)&this[6], this + 9) = 0;
  if (kaldi::quasar::ErrorRegion::HaveSameWordSequence(this)) {
    kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)this, (kaldi::quasar::AbstractAttribute *)&v8);
  }
  else {
    kaldi::quasar::ErrorRegion::RemoveAttribute((uint64_t)this, (kaldi::quasar::AbstractAttribute *)&v8);
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v8);
}

void sub_1B20BC764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v4, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    int v15 = v14;
    unint64_t v16 = &v14[40 * v10];
    int v18 = &v14[40 * v13];
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table((uint64_t)v16, a2);
    int v17 = v16 + 40;
    std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_1B20BC898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<int>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    long long v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      *unint64_t v6 = 0;
      v6[1] = 0;
      void v6[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1B20BC948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 40 * a2;
      do
      {
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 32) = 1065353216;
        v7 += 40;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v14 = &v12[40 * v8];
    v16[0] = v12;
    v16[1] = v14;
    void v16[3] = &v12[40 * v11];
    int v15 = &v14[40 * a2];
    do
    {
      *(_OWORD *)unint64_t v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 8) = 1065353216;
      v14 += 40;
    }
    while (v14 != v15);
    void v16[2] = v15;
    std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_1B20BCB2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::pair<std::vector<int>,std::vector<int>>>::__push_back_slow_path<std::pair<std::vector<int>,std::vector<int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  unint64_t v14 = &v10[48 * v4];
  unint64_t v16 = &v10[48 * v9];
  std::pair<std::vector<int>,std::vector<int>>::pair[abi:ne180100](v14, a2);
  int v15 = v14 + 48;
  std::vector<std::pair<std::vector<int>,std::vector<int>>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,std::vector<int>>>::~__split_buffer(&v13);
  return v11;
}

void sub_1B20BCC84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,std::vector<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::pair<std::vector<int>,std::vector<int>>::pair[abi:ne180100](void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 3, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  return a1;
}

void sub_1B20BCCF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::vector<int>,std::vector<int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  float32x2_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      long long v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(v7 - 32) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 8) = *(void *)(a3 + 40);
      *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::vector<int>,std::vector<int>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::vector<int>,std::vector<int>>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::destroy[abi:ne180100](v4, i - 48);
  }
}

uint64_t TDataManager::getBoolVar(TDataManager *this, const char *a2, uint64_t a3)
{
  if ((*(uint64_t (**)(TDataManager *))(*(void *)this + 40))(this)) {
    operator new[]();
  }
  return a3;
}

void sub_1B20BD238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

uint64_t TDataManager::getIntVar(TDataManager *this, const char *a2, uint64_t a3)
{
  if ((*(uint64_t (**)(TDataManager *))(*(void *)this + 40))(this)) {
    operator new[]();
  }
  return a3;
}

void TDataManager::getStringVar(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1)) {
    operator new[]();
  }
  JUMPOUT(0x1B3EA7B20);
}

off_t TDataManager::getVar(TDataManager *this, char *a2, char *a3, size_t a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  __filename = v20;
  long long v19 = xmmword_1B25607E0;
  char v21 = 1;
  uint64_t v7 = (char *)this + 16;
  if (*((char *)this + 39) < 0) {
    uint64_t v7 = *(char **)v7;
  }
  TBuffer<char>::assign((uint64_t)&__filename, v7);
  char DirSep = getDirSep();
  TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v19 + 1), &DirSep, 1uLL);
  uint64_t v8 = 0;
  while (a2[v8++])
    ;
  TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v19 + 1), a2, v8 - 1);
  uint64_t v10 = 0;
  while (*(unsigned __int8 *)(FILE_EXTENSION + v10++))
    ;
  TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v19 + 1), (char *)FILE_EXTENSION, v10 - 1);
  if (*((void *)&v19 + 1) >= (unint64_t)v19)
  {
    if (v21)
    {
      char DirSep = 0;
      TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v19 + 1), &DirSep, 1uLL);
      --*((void *)&v19 + 1);
    }
    else if ((void)v19)
    {
      __filename[(void)v19 - 1] = 0;
    }
  }
  else
  {
    __filename[*((void *)&v19 + 1)] = 0;
  }
  char v12 = fopen(__filename, "rb");
  long long v13 = v12;
  if (v12)
  {
    fseek(v12, 0, 2);
    off_t v14 = ftello(v13);
    off_t v15 = v14;
    if (a4 && v14)
    {
      fseek(v13, 0, 0);
      fread(a3, 1uLL, a4, v13);
    }
    fclose(v13);
  }
  else
  {
    off_t v15 = 0;
  }
  if (v21 && __filename != v20 && __filename) {
    MEMORY[0x1B3EA8630]();
  }
  return v15;
}

void sub_1B20BD738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a45 && a10 != v45)
  {
    if (a10) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(exception_object);
}

void TDataSaver::~TDataSaver(char **this)
{
  uint64_t v2 = (char *)(this + 1);
  uint64_t v3 = *this;
  if (*this != (char *)(this + 1))
  {
    do
    {
      uint64_t v4 = *((void *)v3 + 7);
      if (v4) {
        MEMORY[0x1B3EA8670](v4, 0x1000C4077774924);
      }
      uint64_t v5 = (char *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (char *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != v2);
  }
  std::__tree<std::string>::destroy((uint64_t)this, this[1]);
}

void TDataSaver::load(uint64_t **this, const TDataManager *a2, char *a3, char *a4)
{
  if (a4) {
    uint64_t v5 = a4;
  }
  else {
    uint64_t v5 = a3;
  }
  if ((*(uint64_t (**)(const TDataManager *, char *, void, void))(*(void *)a2 + 40))(a2, a3, 0, 0))
  {
    operator new[]();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  uint64_t v9 = __p;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::pair<char *,unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<char *,unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<char *,unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9);
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 8) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B20BD960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TDataManager::~TDataManager(void **this)
{
  *this = &unk_1F0A336E8;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A336E8;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t TDataManager::isOpen(TDataManager *this)
{
  return 1;
}

uint64_t TBuffer<char>::assign(uint64_t a1, char *a2)
{
  TBuffer<char>::resize(a1, 0);
  uint64_t v4 = 0;
  while (a2[v4++])
    ;
  return TBuffer<char>::insert(a1, 0, a2, v4 - 1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::pair<char *,unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<char *,unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<char *,unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  BOOL v7 = *v6;
  if (!*v6)
  {
    char v8 = (uint64_t **)v6;
    BOOL v7 = operator new(0x48uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    _DWORD v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    void *v9 = 0;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

BOOL quasar::WordSet::containsWord(void *a1, uint64_t a2)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (char *)a2;
  }
  else {
    uint64_t v5 = *(char **)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  quasar::utf8::convertToLowerCase(v5, v6, (uint64_t)v19);
  if (!v21)
  {
    memset(v18, 0, sizeof(v18));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Unable to convert string: '", 27);
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    off_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    off_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"' to lower case, error: ", 24);
    if ((v20 & 0x80u) == 0) {
      unint64_t v16 = v19;
    }
    else {
      unint64_t v16 = (void **)v19[0];
    }
    if ((v20 & 0x80u) == 0) {
      uint64_t v17 = v20;
    }
    else {
      uint64_t v17 = (uint64_t)v19[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
  }
  BOOL v7 = (unsigned __int8 *)tl::expected<std::string,std::string>::value<std::string,(void *)0>((uint64_t)v19);
  char v8 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, v7);
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  return v8 != 0;
}

void sub_1B20BDC84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 41) < 0) {
    operator delete(*(void **)(v1 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_1B20BDD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::exception a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void quasar::NgramFstConfig::NgramFstConfig(uint64_t a1, std::string *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0x3F80000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)a1 = &unk_1F0A528B0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  quasar::LmBuildConfig::readSysConfig(a1, a2, a3);
}

void sub_1B20BE01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::pair<std::string,std::string>::~pair(v23);
  quasar::LmBuildConfig::~LmBuildConfig(v22);
  _Unwind_Resume(a1);
}

void quasar::NgramFstConfig::makeFstFileName(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v44 = *(std::string *)a2;
  }
  uint64_t v5 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  char v6 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v44.__r_.__value_.__l.__size_;
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = v44.__r_.__value_.__l.__size_;
  }
  if (!v8)
  {
    MEMORY[0x1B3EA7B20](&v44, "squeezed_acceptor");
    uint64_t v5 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v44.__r_.__value_.__l.__size_;
    char v6 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  uint64_t v9 = 0;
  std::string::size_type v10 = v44.__r_.__value_.__r.__words[0];
  while (1)
  {
    size_t v11 = strlen(&quasar::NgramFstConfig::FstOptions[v9]);
    size_t v12 = v11;
    if (v6 < 0) {
      break;
    }
    if (v11 == v5)
    {
      uint64_t v13 = &v44;
      goto LABEL_15;
    }
LABEL_16:
    v9 += 30;
    if (v9 == 360)
    {
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v29 = 0u;
      memset(v28, 0, sizeof(v28));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
      off_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Unsupported FST type: ", 22);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        off_t v15 = &v44;
      }
      else {
        off_t v15 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v16 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v16 = v44.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v28);
    }
  }
  if (v11 != size) {
    goto LABEL_16;
  }
  uint64_t v13 = (std::string *)v10;
  if (size == -1) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_15:
  if (memcmp(v13, &quasar::NgramFstConfig::FstOptions[v9], v12)) {
    goto LABEL_16;
  }
  if (*((char *)a1 + 23) >= 0) {
    size_t v17 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v17 = (size_t)a1[1];
  }
  if (v17)
  {
    int v18 = &v27;
    std::string::basic_string[abi:ne180100]((uint64_t)&v27, v17 + 1);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v18 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    if (*((char *)a1 + 23) >= 0) {
      long long v19 = a1;
    }
    else {
      long long v19 = *a1;
    }
    memmove(v18, v19, v17);
    *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 46;
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v20 = &v44;
    }
    else {
      unsigned __int8 v20 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = v44.__r_.__value_.__l.__size_;
    }
    uint64_t v22 = std::string::append(&v27, (const std::string::value_type *)v20, v21);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    *(void *)&v28[16] = *((void *)&v22->__r_.__value_.__l + 2);
    *(_OWORD *)unsigned int v28 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    int v24 = std::string::append((std::string *)v28, ".fst");
  }
  else
  {
    std::operator+<char>();
    int v25 = std::string::append(&v27, ".fst");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    *(void *)&v28[16] = *((void *)&v25->__r_.__value_.__l + 2);
    *(_OWORD *)unsigned int v28 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    int v24 = std::string::insert((std::string *)v28, 0, "bigG");
  }
  *(_OWORD *)a3 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  *(void *)(a3 + 16) = *((void *)&v24->__r_.__value_.__l + 2);
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if ((v28[23] & 0x80000000) != 0) {
    operator delete(*(void **)v28);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
}

uint64_t quasar::NgramFstConfig::getType(quasar::NgramFstConfig *this)
{
  return 1;
}

uint64_t quasar::NgramSrilmCountConfig::getType(quasar::NgramSrilmCountConfig *this)
{
  return 2;
}

void quasar::NgramSrilmCountConfig::NgramSrilmCountConfig(uint64_t a1, std::string *a2, uint64_t a3)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  quasar::NgramFstConfig::NgramFstConfig(a1, a2, a3);
}

void sub_1B20BEAA0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B20BEAE8);
}

void sub_1B20BEAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  if (a18 < 0) {
    operator delete(__p);
  }
  quasar::NgramSrilmCountConfig::NgramCountSysConfigParameters::~NgramCountSysConfigParameters(v19);
  quasar::NgramFstConfig::~NgramFstConfig(v18);
  _Unwind_Resume(a1);
}

void sub_1B20BEAF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B20BEABCLL);
}

void quasar::NgramSrilmCountConfig::NgramCountSysConfigParameters::~NgramCountSysConfigParameters(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::NgramFstConfig::~NgramFstConfig(void **this)
{
  *this = &unk_1F0A528B0;
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  quasar::LmBuildConfig::~LmBuildConfig(this);
}

{
  uint64_t vars8;

  *this = &unk_1F0A528B0;
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  quasar::LmBuildConfig::~LmBuildConfig(this);
}

{
  uint64_t vars8;

  *this = &unk_1F0A528B0;
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  quasar::LmBuildConfig::~LmBuildConfig(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::NgramSrilmInterpolationConfig::getType(quasar::NgramSrilmInterpolationConfig *this)
{
  return 3;
}

void quasar::NgramSrilmInterpolationConfig::NgramSrilmInterpolationConfig(uint64_t a1, std::string *a2, uint64_t a3)
{
}

void sub_1B20BEF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v17 - 49) < 0) {
    operator delete(*(void **)(v17 - 72));
  }
  quasar::NgramFstConfig::~NgramFstConfig(v16);
  _Unwind_Resume(a1);
}

void quasar::NgramSrilmAdaptationConfig::NgramSrilmAdaptationConfig(uint64_t a1, std::string *a2, uint64_t a3)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  quasar::NgramFstConfig::NgramFstConfig(a1, a2, a3);
}

void sub_1B20BF688(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B20BF6D0);
}

void sub_1B20BF6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  if (a18 < 0) {
    operator delete(__p);
  }
  quasar::NgramSrilmCountConfig::NgramCountSysConfigParameters::~NgramCountSysConfigParameters(v19);
  quasar::NgramFstConfig::~NgramFstConfig(v18);
  _Unwind_Resume(a1);
}

void sub_1B20BF6D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B20BF6A4);
}

uint64_t quasar::NgramSrilmAdaptationConfig::getType(quasar::NgramSrilmAdaptationConfig *this)
{
  return 4;
}

BOOL quasar::addUnseenWords(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 100)) {
    int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16)) - 5;
  }
  else {
    int v4 = *(_DWORD *)(a1 + 72);
  }
  int v5 = *(_DWORD *)(a1 + 76) - 1;
  unsigned int v6 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 120))(v8);
  unint64_t v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 128))(v8, 0);
  if (*(unsigned char *)(a1 + 100))
  {
    if (!v9) {
      goto LABEL_32;
    }
    uint64_t v11 = 0;
    while (1)
    {
      if (v10)
      {
        BOOL v12 = v10 == *(_DWORD *)(a1 + 88) || v10 == *(_DWORD *)(a1 + 80);
        BOOL v13 = v12 || v10 == *(_DWORD *)(a1 + 84);
        BOOL v14 = v13 || v10 == *(_DWORD *)(a1 + 92);
        if (!v14 && ((*(void *)(*(void *)(a1 + 48) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          break;
        }
      }
      if (++v11 < v9) {
        unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 128))(v8, v11);
      }
      if (v9 == v11) {
        goto LABEL_32;
      }
    }
    LODWORD(v16) = v10;
    if ((v10 & 0x80000000) != 0) {
      goto LABEL_32;
    }
LABEL_37:
    unint64_t v17 = *(void *)(a2[1] + 72) - *(void *)(a2[1] + 64);
    if ((int)(v17 >> 3) < 1) {
      goto LABEL_71;
    }
    float v18 = logf((float)v6);
    uint64_t v19 = 0;
    uint64_t v37 = (v17 >> 3);
    uint64_t v20 = 0xFFFFFFFFLL;
    while (2)
    {
      long long v38 = &unk_1F0A3E910;
      unint64_t v41 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)a2);
      uint64_t v21 = a2[1];
      uint64_t v22 = *(void *)(*(void *)(v21 + 64) + 8 * v19);
      uint64_t v39 = v22;
      uint64_t v40 = v21 + 8;
      for (i = v41; ; unint64_t v41 = ++i)
      {
        uint64_t v24 = *(void *)(v22 + 24);
        if (i >= (*(void *)(v22 + 32) - v24) >> 4) {
          break;
        }
        uint64_t v25 = v24 + 16 * i;
        if (*(_DWORD *)v25 == *(_DWORD *)(a1 + 88))
        {
          if (v20 != -1)
          {
            if (quasar::gLogLevel >= 1)
            {
              long long v58 = 0u;
              long long v59 = 0u;
              long long v56 = 0u;
              long long v57 = 0u;
              long long v54 = 0u;
              long long v55 = 0u;
              long long v52 = 0u;
              long long v53 = 0u;
              long long v50 = 0u;
              long long v51 = 0u;
              long long v48 = 0u;
              long long v49 = 0u;
              long long v46 = 0u;
              long long v47 = 0u;
              long long v44 = 0u;
              long long v45 = 0u;
              long long v43 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Encountered more than 1 arc with <unseen>", 41);
              quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v43);
            }
            return 0;
          }
          v42.n128_u64[1] = *(void *)(v25 + 8);
          v42.n128_u32[0] = v16;
          v42.n128_u32[1] = v16;
          v42.n128_f32[2] = v18 + *(float *)(v24 + 16 * i + 8);
          fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v38, &v42);
          unint64_t i = v41;
          uint64_t v22 = v39;
          uint64_t v20 = v19;
        }
      }
      if (++v19 != v37) {
        continue;
      }
      break;
    }
    if (v20 == -1)
    {
LABEL_71:
      if (quasar::gLogLevel >= 4)
      {
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v43 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"No arc with <unseen>", 20);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v43);
      }
      return 1;
    }
    uint64_t v26 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 40))(a2, v20);
    unsigned int v27 = v6 - 1;
    (*(void (**)(void *, uint64_t, uint64_t))(*a2 + 256))(a2, v20, v26 + (int)(v6 - 1));
    if (*(unsigned char *)(a1 + 100))
    {
      uint64_t v28 = v11 + 1;
      if (v11 + 1 < v9) {
        unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 128))(v8, v11 + 1);
      }
      if (v28 != v9)
      {
        int v29 = 0;
        do
        {
          if (v10)
          {
            BOOL v30 = v10 == *(_DWORD *)(a1 + 88) || v10 == *(_DWORD *)(a1 + 80);
            BOOL v31 = v30 || v10 == *(_DWORD *)(a1 + 84);
            BOOL v32 = v31 || v10 == *(_DWORD *)(a1 + 92);
            if (!v32 && ((*(void *)(*(void *)(a1 + 48) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
            {
              v42.n128_u32[0] = v10;
              v42.n128_u32[1] = v10;
              (*(void (**)(void *, uint64_t, __n128 *))(*a2 + 208))(a2, v20, &v42);
              ++v29;
            }
          }
          if (++v28 < v9) {
            unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 128))(v8, v28);
          }
        }
        while (v9 != v28);
        goto LABEL_81;
      }
    }
    else
    {
      unint64_t v33 = *(void *)(a1 + 32);
      if (v33 > (int)v16 + 1)
      {
        int v29 = 0;
        unint64_t v34 = (int)v16 + 1;
        do
        {
          if ((*(void *)(*(void *)(a1 + 24) + 8 * (v34 >> 6)) & (1 << v34)) != 0
            && (*(void *)(*(void *)(a1 + 48) + 8 * (v34 >> 6)) & (1 << v34)) == 0)
          {
            v42.n128_u32[0] = v34;
            v42.n128_u32[1] = v34;
            (*(void (**)(void *, uint64_t, __n128 *))(*a2 + 208))(a2, v20, &v42);
            ++v29;
            unint64_t v33 = *(void *)(a1 + 32);
          }
          ++v34;
        }
        while (v33 > v34);
LABEL_81:
        int v35 = quasar::gLogLevel;
        if (quasar::gLogLevel >= 4)
        {
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v43 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"numArcsAdded ", 13);
          long long v36 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" numArcsToAdd ", 14);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v43);
          int v35 = quasar::gLogLevel;
        }
        BOOL result = v29 == v27;
        if (v29 != v27 && v35 >= 1)
        {
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v43 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Incorrect number of arcs added. This is a bug.", 46);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v43);
          return 0;
        }
        return result;
      }
    }
    int v29 = 0;
    goto LABEL_81;
  }
  uint64_t v15 = *(void *)(a1 + 32);
  if (v15)
  {
    unint64_t v16 = 0;
    while ((*(void *)(*(void *)(a1 + 24) + 8 * (v16 >> 6)) & (1 << v16)) == 0
         || (*(void *)(*(void *)(a1 + 48) + 8 * (v16 >> 6)) & (1 << v16)) != 0)
    {
      if (v15 == ++v16) {
        goto LABEL_32;
      }
    }
    uint64_t v11 = 0;
    goto LABEL_37;
  }
LABEL_32:
  if (quasar::gLogLevel >= 1)
  {
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"There are no unseen words in vocab", 34);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v43);
  }
  return 0;
}

void sub_1B20BFE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t quasar::NgramLmModel2::NgramLmModel2(uint64_t a1, uint64_t *a2, void ***a3, uint64_t *a4, const std::string **a5)
{
  uint64_t v10 = *a4 + *(void *)(*(void *)*a4 - 24);
  *(void *)(a1 + 1048) = &unk_1F0A51710;
  uint64_t v11 = *(void *)(v10 + 8);
  *(_DWORD *)(a1 + 1064) = *(_DWORD *)(v10 + 16);
  *(void *)(a1 + 1056) = v11;
  uint64_t v12 = quasar::FstLmHandle::FstLmHandle(a1, (uint64_t *)&off_1F0A326C8, a4);
  BOOL v13 = (quasar::LmModel2 *)(v12 + 656);
  if (*a4) {
    uint64_t v14 = *a4 + *(void *)(*(void *)*a4 - 24);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = a4[1];
  *(void *)&v23[0] = v14;
  *((void *)&v23[0] + 1) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  quasar::LmModel2::LmModel2(v12 + 656, (uint64_t *)&off_1F0A326D8);
  if (*((void *)&v23[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23[0] + 1));
  }
  *(void *)a1 = &off_1F0A524D0;
  *(void *)(a1 + 1048) = off_1F0A52558;
  *(void *)(a1 + 656) = off_1F0A52510;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 9--*(_DWORD *)(a9 + 76) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1001) = 0u;
  *(void *)(a1 + 10++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 1040) = 0;
  *(void *)(a1 + 1032) = 0;
  quasar::LmModel2::setModelSysConfigParams(v13, (const quasar::LmBuildConfig::ModelSysConfigParameters *)&(*a5)->__r_.__value_.__r.__words[1]);
  std::string::operator=((std::string *)(a1 + 920), *a5 + 6);
  std::string::operator=((std::string *)(a1 + 896), *a5 + 5);
  uint64_t v17 = *a2;
  uint64_t v16 = a2[1];
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 10++*(_DWORD *)(result + 24) = v17;
  float v18 = *(std::__shared_weak_count **)(a1 + 1032);
  *(void *)(a1 + 1032) = v16;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t v19 = *a3;
  *a3 = 0;
  std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100]((void ***)(a1 + 1040), v19);
  switch((*(unsigned int (**)(const std::string *))((*a5)->__r_.__value_.__r.__words[0] + 16))(*a5))
  {
    case 1u:
    case 3u:
      return a1;
    case 2u:
      uint64_t v21 = *a5;
      uint64_t v20 = (std::__shared_weak_count *)a5[1];
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::operator=((std::string *)(a1 + 992), v21 + 9);
      std::string::operator=((std::string *)(a1 + 968), v21 + 8);
      goto LABEL_19;
    case 4u:
      uint64_t v21 = *a5;
      uint64_t v20 = (std::__shared_weak_count *)a5[1];
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::operator=((std::string *)(a1 + 968), v21 + 9);
LABEL_19:
      *(unsigned char *)(a1 + 1016) = v21[10].__r_.__value_.__s.__data_[0];
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      return a1;
    default:
      memset(v23, 0, sizeof(v23));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unsupported LmBuildConfig type", 30);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v23);
  }
}

void sub_1B20C0194(_Unwind_Exception *a1)
{
  std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100](v4, 0);
  unsigned int v6 = *(std::__shared_weak_count **)(v1 + 1032);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  quasar::NgramSrilmCountConfig::NgramCountSysConfigParameters::~NgramCountSysConfigParameters((void **)(v1 + 944));
  std::pair<std::string,std::string>::~pair(v3);
  quasar::LmModel2::~LmModel2(v2, (uint64_t *)&off_1F0A326D8);
  quasar::FstLmHandle::~FstLmHandle((quasar::FstLmHandle *)v1, (uint64_t *)&off_1F0A326C8);
  _Unwind_Resume(a1);
}

uint64_t quasar::NgramLmModel2::NgramLmModel2(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2 + *(void *)(*(void *)*a2 - 24);
  *(void *)(a1 + 1048) = &unk_1F0A51710;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_DWORD *)(a1 + 1064) = *(_DWORD *)(v4 + 16);
  *(void *)(a1 + 1056) = v5;
  uint64_t v6 = quasar::FstLmHandle::FstLmHandle(a1, (uint64_t *)&off_1F0A326C8, a2);
  BOOL v7 = (std::__shared_weak_count *)a2[1];
  unint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::LmModel2::LmModel2(v6 + 656, (uint64_t *)&off_1F0A326D8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(void *)a1 = &off_1F0A524D0;
  *(void *)(a1 + 1048) = off_1F0A52558;
  *(void *)(a1 + 656) = off_1F0A52510;
  *(unsigned char *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 9--*(_DWORD *)(a9 + 76) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1001) = 0u;
  *(void *)(a1 + 10++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 1040) = 0;
  *(void *)(a1 + 1032) = 0;
  return a1;
}

void sub_1B20C03A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  quasar::FstLmHandle::~FstLmHandle(v10, (uint64_t *)&off_1F0A326C8);
  _Unwind_Resume(a1);
}

void quasar::NgramLmModel2::writeImpl(uint64_t a1, const void **a2)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  uint64_t v5 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v4 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v5 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *a2;
    }
    memmove(v5, v6, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 47;
  quasar::NgramFstConfig::makeFstFileName((const void **)(a1 + 920), a1 + 896, (uint64_t)v13);
  if ((v14 & 0x80u) == 0) {
    BOOL v7 = v13;
  }
  else {
    BOOL v7 = (void **)v13[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v8 = v14;
  }
  else {
    std::string::size_type v8 = (std::string::size_type)v13[1];
  }
  unint64_t v9 = std::string::append(&v15, (const std::string::value_type *)v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  std::string::size_type v12 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::vector<int> __p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  quasar::filesystem::Path::Path(&v16, __p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if ((char)v14 < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_1B20C064C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  *(void *)(v32 - 64) = &unk_1F0A51998;
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::NgramLmModel2::writeFst(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 1024);
  uint64_t v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v7 = __p;
  }
  int v8 = 16777217;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *))(*(void *)v2 + 96))(v2, v3, &v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1B20C0850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::NgramLmModel2::getArpaFileName(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 1016))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::size_type v5 = *(void *)(a2 + 8);
      if (v5)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)a2, v5);
        goto LABEL_11;
      }
    }
    else if (*(unsigned char *)(a2 + 23))
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      *(void *)&long long v17 = *(void *)(a2 + 16);
      goto LABEL_11;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "/current");
LABEL_11:
    if (*(char *)(a1 + 991) < 0)
    {
      if (*(void *)(a1 + 976)) {
        goto LABEL_13;
      }
    }
    else if (*(unsigned char *)(a1 + 991))
    {
LABEL_13:
      if ((SBYTE7(v17) & 0x80u) == 0) {
        size_t v6 = BYTE7(v17);
      }
      else {
        size_t v6 = (size_t)__p[1];
      }
      std::string v7 = &v33;
      std::string::basic_string[abi:ne180100]((uint64_t)&v33, v6 + 1);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v7 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      if (v6)
      {
        if ((SBYTE7(v17) & 0x80u) == 0) {
          int v8 = __p;
        }
        else {
          int v8 = (void **)__p[0];
        }
        memmove(v7, v8, v6);
      }
      *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
      int v9 = *(char *)(a1 + 991);
      if (v9 >= 0) {
        long long v10 = (const std::string::value_type *)(a1 + 968);
      }
      else {
        long long v10 = *(const std::string::value_type **)(a1 + 968);
      }
      if (v9 >= 0) {
        std::string::size_type v11 = *(unsigned __int8 *)(a1 + 991);
      }
      else {
        std::string::size_type v11 = *(void *)(a1 + 976);
      }
      std::string::size_type v12 = std::string::append(&v33, v10, v11);
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      a3[2] = *((void *)&v12->__r_.__value_.__l + 2);
      *(_OWORD *)a3 = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
LABEL_43:
      if (SBYTE7(v17) < 0) {
        operator delete(__p[0]);
      }
      return;
    }
    if ((SBYTE7(v17) & 0x80u) == 0) {
      size_t v14 = BYTE7(v17);
    }
    else {
      size_t v14 = (size_t)__p[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)a3, v14 + 8);
    if (*((char *)a3 + 23) < 0) {
      a3 = (void *)*a3;
    }
    if (v14)
    {
      if ((SBYTE7(v17) & 0x80u) == 0) {
        std::string v15 = __p;
      }
      else {
        std::string v15 = (void **)__p[0];
      }
      memmove(a3, v15, v14);
    }
    strcpy((char *)a3 + v14, "/lm.arpa");
    goto LABEL_43;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Config not set to write ARPA file", 33);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
}

void sub_1B20C0AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

BOOL quasar::NgramLmModel2::writeArpa(quasar::NgramLmModel2 *this, const quasar::filesystem::Path *a2)
{
  if (*(void *)(*((void *)this + 130) + 48))
  {
    kaldi::quasar::Vocab::OOvWord(a2, (std::string *)__p);
    if ((SBYTE7(v10) & 0x80u) == 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    File::File((File *)v8, (const char *)v3, "w", 0);
    if (SBYTE7(v10) < 0) {
      operator delete(__p[0]);
    }
    int v4 = (*(uint64_t (**)(void, unsigned char *))(**(void **)(*((void *)this + 130) + 48) + 248))(*(void *)(*((void *)this + 130) + 48), v8);
    BOOL v5 = v4 != 0;
    if (v4) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = quasar::gLogLevel < 1;
    }
    if (!v6)
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v10 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ARPA LM write error", 19);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    File::close((File *)v8);
    File::~File((File *)v8);
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v10 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ngramCountCtx is null", 21);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    return 0;
  }
  return v5;
}

void sub_1B20C0CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void non-virtual thunk to'quasar::NgramLmModel2::writeImpl(uint64_t a1, const void **a2)
{
}

void quasar::NgramLmModel2::AddTo(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
}

void virtual thunk to'quasar::NgramLmModel2::AddTo(void *a1, uint64_t a2, uint64_t *a3, unsigned int a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
}

BOOL quasar::NgramLmModel2::writeArpa(quasar::NgramLmModel2 *a1, uint64_t *a2)
{
  v14[19] = *MEMORY[0x1E4F143B8];
  quasar::filesystem::TemporaryDirectoryPath::TemporaryDirectoryPath((quasar::filesystem::TemporaryDirectoryPath *)v10);
  std::string::basic_string[abi:ne180100]<0>(__p, "arpa");
  quasar::filesystem::Path::operator/((uint64_t)v10, (long long *)__p, v8);
  if ((v13[7] & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
  BOOL v4 = quasar::NgramLmModel2::writeArpa(a1, (const quasar::filesystem::Path *)v8);
  if (v4)
  {
    kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v8, &v11);
    std::ifstream::basic_ifstream((uint64_t *)__p);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    *(_DWORD *)((char *)&__p[1] + *((void *)__p[0] - 3)) &= ~0x1000u;
    std::istream_iterator<unsigned char,char,std::char_traits<char>,long>::istream_iterator[abi:ne180100]((uint64_t)v7, __p);
    v5.n128_f64[0] = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::istream_iterator<unsigned char,char,std::char_traits<char>,long>,std::istream_iterator<unsigned char,char,std::char_traits<char>,long>,std::ostream_iterator<unsigned char,char,std::char_traits<char>>>(v7[0], v7[1], 0, *a2, 0, &v11);
    __p[0] = *(void **)MEMORY[0x1E4FBA3F8];
    *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA3F8] + 24);
    MEMORY[0x1B3EA7CF0](v13, v5);
    std::istream::~istream();
    MEMORY[0x1B3EA8520](v14);
  }
  v8[0] = &unk_1F0A51998;
  if (v9 < 0) {
    operator delete((void *)v8[1]);
  }
  quasar::filesystem::TemporaryDirectoryPath::~TemporaryDirectoryPath((quasar::filesystem::TemporaryDirectoryPath *)v10);
  return v4;
}

void sub_1B20C0F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  quasar::filesystem::TemporaryDirectoryPath::~TemporaryDirectoryPath((quasar::filesystem::TemporaryDirectoryPath *)&a19);
  _Unwind_Resume(a1);
}

void sub_1B20C0FE4()
{
}

void quasar::NgramLmModel2::getMetadata(quasar::PTree *a1@<X8>)
{
}

void sub_1B20C10B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::PTree::~PTree((quasar::PTree *)va);
  if (*(char *)(v3 - 17) < 0) {
    operator delete(*(void **)(v3 - 40));
  }
  quasar::PTree::~PTree(v2);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'quasar::NgramLmModel2::getMetadata(quasar::PTree *a1@<X8>)
{
}

void quasar::_populateNgramCountArgv(void **a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 2);
    do
    {
      BOOL v6 = v2;
      if (*((char *)v2 + 23) < 0) {
        BOOL v6 = (uint64_t *)*v2;
      }
      int v8 = a1[1];
      unint64_t v7 = (unint64_t)a1[2];
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v10 = ((char *)v8 - (unsigned char *)*a1) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = v7 - (void)*a1;
        uint64_t v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v13);
        }
        else {
          long long v14 = 0;
        }
        long long v15 = &v14[8 * v10];
        *(void *)long long v15 = v6;
        char v9 = v15 + 8;
        long long v17 = (char *)*a1;
        long long v16 = (char *)a1[1];
        if (v16 != *a1)
        {
          do
          {
            uint64_t v18 = *((void *)v16 - 1);
            v16 -= 8;
            *((void *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          long long v16 = (char *)*a1;
        }
        *a1 = v15;
        a1[1] = v9;
        a1[2] = &v14[8 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *int v8 = v6;
        char v9 = v8 + 1;
      }
      a1[1] = v9;
      v2 += 3;
    }
    while (v2 != v3);
  }
}

void quasar::_populateNgramCountContext(std::string **a1, const std::string *a2, std::string *__str, quasar::LmData *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v7 = *((_DWORD *)a4 + 26);
  int v8 = *a1;
  LODWORD((*a1)[3].__r_.__value_.__r.__words[2]) = v7;
  if ((v7 | 2) == 2)
  {
    std::string::operator=(v8 + 4, a2);
    int v8 = *a1;
  }
  std::string::operator=(v8 + 6, __str);
  SymbolTableData = (std::string::size_type *)quasar::LmData::getSymbolTableData(a4);
  uint64_t v10 = *a1;
  std::string::size_type v12 = *SymbolTableData;
  std::string::size_type v11 = SymbolTableData[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = (std::__shared_weak_count *)v10[1].__r_.__value_.__r.__words[2];
  v10[1].__r_.__value_.__l.__size_ = v12;
  v10[1].__r_.__value_.__r.__words[2] = v11;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  quasar::LmData::getSentences((uint64_t)a4, 0);
  operator new();
}

void sub_1B20C14DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<quasar::lm::TokenStringAndCount * ()(long long)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  MEMORY[0x1B3EA8670](v2, 0x10A1C4014ADDB9CLL);
  _Unwind_Resume(a1);
}

void quasar::_generateArpaLm(quasar::LmData *a1, std::string **a2, uint64_t **a3, const std::string *a4)
{
  if (*((_DWORD *)a1 + 26) < 3u)
  {
    memset(v7, 0, sizeof(v7));
    quasar::_populateNgramCountArgv(v7, a3);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::_populateNgramCountContext(a2, a4, (std::string *)__p, a1);
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)std::string __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "other input types not yet implemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void quasar::_adaptArpaLm(quasar::LmData *a1, std::string **a2, uint64_t **a3, std::string *a4)
{
  if (*((_DWORD *)a1 + 26) < 3u)
  {
    memset(v7, 0, sizeof(v7));
    quasar::_populateNgramCountArgv(v7, a3);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::_populateNgramCountContext(a2, (const std::string *)__p, a4, a1);
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)std::string __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "other input types not yet implemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void sub_1B20C1F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  JUMPOUT(0x1B20C1F20);
}

void sub_1B20C1F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B20C1F30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B20C1F5CLL);
}

void sub_1B20C1F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::generateNgramCountsStr(uint64_t ***a1, const quasar::NgramSrilmCountConfig *a2, quasar::LmData *a3)
{
}

void quasar::generateNgramCountsStr(uint64_t **this, const quasar::NgramSrilmCountConfig *a2, quasar::LmData *a3)
{
  if ((*((_DWORD *)a2 + 26) | 2) == 2)
  {
    memset(v3, 0, sizeof(v3));
    quasar::_populateNgramCountArgv(v3, this + 21);
    operator new();
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Ngram counts can only be generated from plain text or phrase counts");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
}

void sub_1B20C21C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void quasar::_buildFst(quasar::lm::SymbolTableData *a1, uint64_t a2, void ***a3, uint64_t a4, uint64_t a5, int a6, const kaldi::Timer *a7, uint64_t **a8, uint64_t a9, uint64_t a10, char a11)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "Arpa2Fst");
  v48[0] = __p;
  long long v17 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, v48);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v49, a7, v17 + 7);
  if (SBYTE7(v30) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "conversion");
  v50[0] = __p;
  long long v18 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, v50);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v48, a7, v18 + 7);
  if (SBYTE7(v30) < 0)
  {
    operator delete(__p[0]);
    if (a11)
    {
LABEL_5:
      quasar::lm::SymbolTableData::generateTrainToBigGIdRemapping(a1, __p);
      long long v19 = (std::__shared_weak_count *)__p[1];
      uint64_t v20 = *((void *)a1 + 2);
      long long v46 = __p[0];
      long long v47 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        char v21 = 0;
        atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
      }
      else
      {
        char v21 = 1;
      }
LABEL_10:
      uint64_t v22 = quasar::lm::arpa2fst::ConvertToFST::create((quasar::lm *)1, v20, (uint64_t)&v46, 0, 0, 0);
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }
      long long v23 = (const void *)(**(uint64_t (***)(uint64_t, uint64_t))v22)(v22, a2);
      if (v23) {
      else
      }
        long long v24 = 0;
      if (quasar::gLogLevel >= 4)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Arpa2Fst", 8);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
      if ((v21 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v48);
      quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v49);
      if (a6)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "free");
        v48[0] = __p;
        long long v25 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, v48);
        quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v49, a7, v25 + 7);
        if (SBYTE7(v30) < 0) {
          operator delete(__p[0]);
        }
        std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100](a3, 0);
        long long v26 = (std::__shared_weak_count *)*((void *)a1 + 1);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
        LMThreads::freeThread((LMThreads *)v26);
        if (quasar::gLogLevel >= 4)
        {
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"free", 4);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
        }
        quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v49);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "MinimizeEncoded");
      v48[0] = __p;
      long long v27 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, v48);
      quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v49, a7, v27 + 7);
      if (SBYTE7(v30) < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "optimization");
      v50[0] = __p;
      long long v28 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, v50);
      quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v48, a7, v28 + 7);
      if (SBYTE7(v30) < 0) {
        operator delete(__p[0]);
      }
      fst::MinimizeEncoded<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)v24, 0.00097656);
    }
  }
  else if (a11)
  {
    goto LABEL_5;
  }
  long long v19 = 0;
  uint64_t v20 = *((void *)a1 + 2);
  char v21 = 1;
  long long v46 = 0;
  long long v47 = 0;
  goto LABEL_10;
}

void sub_1B20C33D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)(v17 - 168));
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)(v17 - 144));
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  _Unwind_Resume(a1);
}

void sub_1B20C36E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B20C36DCLL);
}

uint64_t fst::Verify<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, char a2, int a3)
{
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  LODWORD(v82) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 128))(a1, &__p);
  int v9 = 0;
  while (1)
  {
    while (!__p)
    {
      if ((int)v82 >= (int)v81) {
        goto LABEL_11;
      }
      ++v9;
LABEL_8:
      LODWORD(v82) = v82 + 1;
    }
    if ((*(unsigned int (**)(void *))(*(void *)__p + 16))(__p)) {
      break;
    }
    ++v9;
    if (!__p) {
      goto LABEL_8;
    }
    (*(void (**)(void))(*(void *)__p + 32))();
  }
  if (__p) {
    (*(void (**)(void))(*(void *)__p + 8))();
  }
LABEL_11:
  if (v6 == -1 && v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    long long v10 = fst::LogMessage::LogMessage((fst *)&v85, (uint64_t)&__p);
    long long v11 = (void *)fst::cerr(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Verify: Fst start state ID unset", 32);
    goto LABEL_69;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    BOOL v12 = v6 < v9;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    long long v24 = fst::LogMessage::LogMessage((fst *)&v85, (uint64_t)&__p);
    long long v25 = (void *)fst::cerr(v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Verify: Fst start state ID exceeds number of states ", 52);
    goto LABEL_69;
  }
  int v87 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v85);
  while (2)
  {
    if (!v85)
    {
      if (v87 < v86) {
        goto LABEL_25;
      }
LABEL_99:
      unint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
      if ((v65 & 4) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        unint64_t v67 = fst::LogMessage::LogMessage((fst *)&v85, (uint64_t)&__p);
        uint64_t v68 = (void *)fst::cerr(v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Verify: Fst error property is set", 33);
      }
      else
      {
        if (a3)
        {
          uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 1);
        }
        else
        {
          std::string __p = 0;
          uint64_t v66 = fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, 0x3FFFFFFF0007, (uint64_t *)&__p, 0);
        }
        if (fst::CompatProperties(v65, v66)) {
          return 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        uint64_t v69 = fst::LogMessage::LogMessage((fst *)&v85, (uint64_t)&__p);
        uint64_t v70 = (void *)fst::cerr(v69);
        uint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Verify: stored Fst properties incorrect ", 40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"(props1 = stored props, props2 = tested)", 40);
      }
LABEL_69:
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v85);
      if (SHIBYTE(v82) < 0) {
        operator delete(__p);
      }
      return 0;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v85 + 16))(v85))
    {
      if (v85) {
        (*(void (**)(void))(*(void *)v85 + 8))();
      }
      goto LABEL_99;
    }
    if (v85)
    {
      unsigned int v13 = (*(uint64_t (**)(void))(*(void *)v85 + 24))();
      goto LABEL_26;
    }
LABEL_25:
    unsigned int v13 = v87;
LABEL_26:
    unint64_t v84 = 0;
    unsigned int v75 = v13;
    (*(void (**)(uint64_t))(*(void *)a1 + 136))(a1);
    uint64_t v14 = 0;
    while (2)
    {
      if (!__p)
      {
        if (v84 >= v82) {
          goto LABEL_61;
        }
        goto LABEL_32;
      }
      if (((*(uint64_t (**)(void *))(*(void *)__p + 24))(__p) & 1) == 0)
      {
        if (__p)
        {
          uint64_t v15 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
          goto LABEL_33;
        }
LABEL_32:
        uint64_t v15 = v81 + 16 * v84;
LABEL_33:
        int v16 = *(_DWORD *)v15;
        if ((a2 & 1) == 0 && v16 < 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v76, "ERROR");
          long long v26 = fst::LogMessage::LogMessage((fst *)&v79, (uint64_t)&v76);
          long long v27 = (void *)fst::cerr(v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Verify: Fst input label ID of arc at position ", 46);
          long long v28 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" of state ", 10);
          long long v29 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" is negative", 12);
          goto LABEL_88;
        }
        if (v7)
        {
          (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)v7 + 88))(&v76, v7, v16);
          if (v78 < 0)
          {
            uint64_t v17 = v77;
            operator delete(v76);
            if (!v17)
            {
LABEL_75:
              std::string::basic_string[abi:ne180100]<0>(&v76, "ERROR");
              long long v46 = fst::LogMessage::LogMessage((fst *)&v79, (uint64_t)&v76);
              long long v47 = (void *)fst::cerr(v46);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"Verify: Fst input label ID ", 27);
              long long v48 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" of arc at position ", 20);
              long long v49 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" of state ", 10);
              long long v50 = (void *)std::ostream::operator<<();
              long long v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" is missing from input symbol table \"", 37);
              uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
              int v53 = *(char *)(v52 + 23);
              if (v53 >= 0) {
                uint64_t v54 = v52;
              }
              else {
                uint64_t v54 = *(void *)v52;
              }
              if (v53 >= 0) {
                uint64_t v55 = *(unsigned __int8 *)(v52 + 23);
              }
              else {
                uint64_t v55 = *(void *)(v52 + 8);
              }
LABEL_87:
              uint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v54, v55);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"\"", 1);
              goto LABEL_88;
            }
          }
          else if (!v78)
          {
            goto LABEL_75;
          }
        }
        int v18 = *(_DWORD *)(v15 + 4);
        if ((a2 & 1) == 0 && v18 < 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v76, "ERROR");
          long long v30 = fst::LogMessage::LogMessage((fst *)&v79, (uint64_t)&v76);
          long long v31 = (void *)fst::cerr(v30);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Verify: Fst output label ID of arc at position ", 47);
          long long v32 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" of state ", 10);
          long long v33 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" is negative", 12);
          goto LABEL_88;
        }
        if (v8)
        {
          (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)v8 + 88))(&v76, v8, v18);
          if (v78 < 0)
          {
            uint64_t v19 = v77;
            operator delete(v76);
            if (!v19)
            {
LABEL_81:
              std::string::basic_string[abi:ne180100]<0>(&v76, "ERROR");
              long long v56 = fst::LogMessage::LogMessage((fst *)&v79, (uint64_t)&v76);
              long long v57 = (void *)fst::cerr(v56);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Verify: Fst output label ID ", 28);
              long long v58 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" of arc at position ", 20);
              long long v59 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" of state ", 10);
              uint64_t v60 = (void *)std::ostream::operator<<();
              long long v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" is missing from output symbol table \"", 38);
              uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
              int v62 = *(char *)(v61 + 23);
              if (v62 >= 0) {
                uint64_t v54 = v61;
              }
              else {
                uint64_t v54 = *(void *)v61;
              }
              if (v62 >= 0) {
                uint64_t v55 = *(unsigned __int8 *)(v61 + 23);
              }
              else {
                uint64_t v55 = *(void *)(v61 + 8);
              }
              goto LABEL_87;
            }
          }
          else if (!v78)
          {
            goto LABEL_81;
          }
        }
        float v20 = *(float *)(v15 + 8);
        if (v20 >= -INFINITY && v20 <= -INFINITY)
        {
          std::string::basic_string[abi:ne180100]<0>(&v76, "ERROR");
          long long v34 = fst::LogMessage::LogMessage((fst *)&v79, (uint64_t)&v76);
          long long v35 = (void *)fst::cerr(v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Verify: Fst weight of arc at position ", 38);
          long long v36 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" of state ", 10);
          long long v37 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" is invalid", 11);
LABEL_88:
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v79);
          if (v78 < 0) {
            operator delete(v76);
          }
          if (__p)
          {
            (*(void (**)(void *))(*(void *)__p + 8))(__p);
          }
          else if (v83)
          {
            --*v83;
          }
          goto LABEL_94;
        }
        if ((*(_DWORD *)(v15 + 12) & 0x80000000) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v76, "ERROR");
          long long v38 = fst::LogMessage::LogMessage((fst *)&v79, (uint64_t)&v76);
          long long v39 = (void *)fst::cerr(v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Verify: Fst destination state ID of arc at position ", 52);
          long long v40 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" of state ", 10);
          long long v41 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" is negative", 12);
          goto LABEL_88;
        }
        int v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
        if (*(_DWORD *)(v15 + 12) >= v9) {
          int v22 = v21;
        }
        else {
          int v22 = 0;
        }
        if (v22 == 1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v76, "ERROR");
          long long v42 = fst::LogMessage::LogMessage((fst *)&v79, (uint64_t)&v76);
          long long v43 = (void *)fst::cerr(v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Verify: Fst destination state ID of arc at position ", 52);
          long long v44 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" of state ", 10);
          long long v45 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" exceeds number of states", 25);
          goto LABEL_88;
        }
        if (__p) {
          (*(void (**)(void *))(*(void *)__p + 40))(__p);
        }
        else {
          ++v84;
        }
        ++v14;
        continue;
      }
      break;
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
    }
    else
    {
LABEL_61:
      if (v83) {
        --*v83;
      }
    }
    float v23 = (*(float (**)(uint64_t, void))(*(void *)a1 + 32))(a1, v75);
    if (v23 < -INFINITY || v23 > -INFINITY)
    {
      if (v85) {
        (*(void (**)(uint64_t))(*(void *)v85 + 32))(v85);
      }
      else {
        ++v87;
      }
      continue;
    }
    break;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
  uint64_t v72 = fst::LogMessage::LogMessage((fst *)&v76, (uint64_t)&__p);
  unint64_t v73 = (void *)fst::cerr(v72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Verify: Fst final weight of state ", 34);
  uint64_t v74 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" is invalid", 11);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v76);
  if (SHIBYTE(v82) < 0) {
    operator delete(__p);
  }
LABEL_94:
  if (v85) {
    (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
  }
  return 0;
}

void sub_1B20C42DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a29) {
    (*(void (**)(uint64_t))(*(void *)a29 + 8))(a29);
  }
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<quasar::FstLmHandle>::operator=[abi:ne180100]<quasar::FstLmHandle,std::default_delete<quasar::FstLmHandle>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<quasar::FstLmHandle>::shared_ptr[abi:ne180100]<quasar::FstLmHandle,std::default_delete<quasar::FstLmHandle>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void quasar::trainOrAdaptNgramSrilmModel()
{
  quasar::PTree::PTree((quasar::PTree *)v5);
  v3[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v3, v0);
  uint64_t v4 = 0;
  v2[0] = 0;
  v2[1] = 0;
  uint64_t v1 = v2;
  operator new();
}

void sub_1B20C4D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  quasar::PTree::~PTree((quasar::PTree *)&a37);
  if (a36 < 0) {
    operator delete(__p);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)&v40);
  std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100]((void ***)(v38 - 240), 0);
  std::__tree<std::string>::destroy(v38 - 232, *(char **)(v38 - 224));
  quasar::PTree::~PTree((quasar::PTree *)(v38 - 168));
  _Unwind_Resume(a1);
}

void sub_1B20C4DE4()
{
}

void sub_1B20C4E24()
{
}

void sub_1B20C4E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100]((void ***)(v29 - 240), 0);
  JUMPOUT(0x1B20C4ECCLL);
}

void sub_1B20C4E68()
{
}

void sub_1B20C4E70()
{
}

void sub_1B20C4E78()
{
  MEMORY[0x1B3EA8670](v0, 0x1032C40A1079DF8);
  JUMPOUT(0x1B20C4ECCLL);
}

void sub_1B20C4E98()
{
}

void sub_1B20C4EA0()
{
}

void sub_1B20C4EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    JUMPOUT(0x1B20C4EF8);
  }
  JUMPOUT(0x1B20C4EC0);
}

void quasar::loadNgramSrilmModel(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v2, "fst-basename");
  quasar::PTree::getStringOptional(a1, (uint64_t)v2);
}

void sub_1B20C5220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a36 && a35 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v36 - 57) < 0) {
    operator delete(*(void **)(v36 - 80));
  }
  _Unwind_Resume(exception_object);
}

void quasar::interpolateNgramSrilmArpaFiles(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  v17[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v17, (clockid_t)v4);
  uint64_t v18 = 0;
  v16[1] = 0;
  v16[0] = 0;
  std::exception v15[3] = v16;
  memset(v15, 0, 24);
  memset(v14, 0, sizeof(v14));
  if (*(char *)(v3 + 23) < 0)
  {
    std::string::size_type v6 = *(void *)(v3 + 8);
    if (v6)
    {
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)v3, v6);
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(v3 + 23))
  {
    std::string v13 = *(std::string *)v3;
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "lm-personalize.data");
LABEL_7:
  v10[1] = 0;
  v10[0] = 0;
  uint64_t v11 = 0;
  long long __p = 0u;
  long long v20 = 0u;
  LODWORD(v21) = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v12, v5, (uint64_t *)v10, (uint64_t)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&__p);
  *(void *)&long long __p = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 1);
  if (SBYTE7(v20) < 0) {
    p_p = (long long *)__p;
  }
  if (size)
  {
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v9 = &v13;
    }
    else {
      int v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    memmove(p_p, v9, size);
  }
  *(_WORD *)((char *)p_p + size) = 46;
  quasar::SystemConfig::setPrefix(v12, (const std::string *)&__p);
  if (SBYTE7(v20) < 0) {
    operator delete((void *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "decoder-chain-name");
  std::string::basic_string[abi:ne180100]<0>(v10, "Name of the decoder for the given task from which to take the bigG FST, e.g., msg");
  quasar::SystemConfig::Register<std::string>((uint64_t)v12, (const void **)&__p, (uint64_t)v15, (uint64_t)v10, 0, 190, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  if (SBYTE7(v20) < 0) {
    operator delete((void *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "task-name");
  std::string::basic_string[abi:ne180100]<0>(v10, "Name of the task to lookup, e.g., Dictation");
  quasar::SystemConfig::Register<std::string>((uint64_t)v12, (const void **)&__p, (uint64_t)v14, (uint64_t)v10, 0, 190, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  if (SBYTE7(v20) < 0) {
    operator delete((void *)__p);
  }
  quasar::SystemConfig::readPtree((uint64_t)v12, (uint64_t)&v13);
}

void sub_1B20C5C5C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void quasar::lm::srilm::Interpolate::~Interpolate(quasar::lm::srilm::Interpolate *this)
{
  *(void *)this = &unk_1F0A57D28;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_1F0A57D28;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x1B3EA8670](this, 0xA1C40D2948F72);
}

void quasar::lm::SymbolTableData::~SymbolTableData(quasar::lm::SymbolTableData *this)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 144);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 104);
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void quasar::NgramSrilmCountConfig::~NgramSrilmCountConfig(void **this)
{
  *this = &unk_1F0A55C70;
  uint64_t v2 = this + 21;
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  uint64_t v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  *this = &unk_1F0A528B0;
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  quasar::LmBuildConfig::~LmBuildConfig(this);
}

{
  void **v2;
  void **v3;

  *this = &unk_1F0A55C70;
  uint64_t v2 = this + 21;
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  uint64_t v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  *this = &unk_1F0A528B0;
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  quasar::LmBuildConfig::~LmBuildConfig(this);
  MEMORY[0x1B3EA8670]();
}

void quasar::NgramSrilmInterpolationConfig::~NgramSrilmInterpolationConfig(void **this)
{
  *this = &unk_1F0A528B0;
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  quasar::LmBuildConfig::~LmBuildConfig(this);
}

{
  uint64_t vars8;

  *this = &unk_1F0A528B0;
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  quasar::LmBuildConfig::~LmBuildConfig(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::NgramSrilmAdaptationConfig::~NgramSrilmAdaptationConfig(void **this)
{
  *this = &unk_1F0A57428;
  uint64_t v2 = this + 21;
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  uint64_t v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  *this = &unk_1F0A528B0;
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  quasar::LmBuildConfig::~LmBuildConfig(this);
}

{
  void **v2;
  void **v3;

  *this = &unk_1F0A57428;
  uint64_t v2 = this + 21;
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  uint64_t v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  *this = &unk_1F0A528B0;
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  quasar::LmBuildConfig::~LmBuildConfig(this);
  MEMORY[0x1B3EA8670]();
}

void quasar::NgramLmModel2::~NgramLmModel2(quasar::NgramLmModel2 *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'quasar::NgramLmModel2::~NgramLmModel2(quasar::NgramLmModel2 *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::NgramLmModel2::~NgramLmModel2(quasar::NgramLmModel2 *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x1B3EA8670);
}

void quasar::lm::WeightOptimizationStrategy::~WeightOptimizationStrategy(quasar::lm::WeightOptimizationStrategy *this)
{
}

void quasar::NgramLmModel2::~NgramLmModel2(quasar::NgramLmModel2 *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[5];
  *((void *)this + 82) = a2[6];
  std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100]((void ***)this + 130, 0);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 129);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 1015) < 0) {
    operator delete(*((void **)this + 124));
  }
  if (*((char *)this + 991) < 0) {
    operator delete(*((void **)this + 121));
  }
  uint64_t v8 = (void **)((char *)this + 944);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 943) < 0) {
    operator delete(*((void **)this + 115));
  }
  if (*((char *)this + 919) < 0) {
    operator delete(*((void **)this + 112));
  }
  quasar::LmModel2::~LmModel2((quasar::NgramLmModel2 *)((char *)this + 656), a2 + 3);
  uint64_t v6 = a2[1];
  *(void *)this = v6;
  *(void *)((char *)this + *(void *)(v6 - 24)) = a2[2];
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 80);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  quasar::ModelLoader::~ModelLoader((quasar::NgramLmModel2 *)((char *)this + 8));
}

uint64_t std::istream_iterator<unsigned char,char,std::char_traits<char>,long>::istream_iterator[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)a1 = a2;
  uint64_t v3 = std::operator>>[abi:ne180100]<char,std::char_traits<char>>(a2, (unsigned char *)(a1 + 8));
  if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0) {
    *(void *)a1 = 0;
  }
  return a1;
}

void *std::operator>>[abi:ne180100]<char,std::char_traits<char>>(void *a1, unsigned char *a2)
{
  MEMORY[0x1B3EA7D80](&v8, a1, 0);
  if (v8)
  {
    uint64_t v4 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v5 = (unsigned char *)v4[3];
    if (v5 == (unsigned char *)v4[4])
    {
      LODWORD(v4) = (*(uint64_t (**)(void *))(*v4 + 80))(v4);
      if (v4 == -1)
      {
        int v6 = 6;
        goto LABEL_6;
      }
    }
    else
    {
      void v4[3] = v5 + 1;
      LOBYTE(v4) = *v5;
    }
    int v6 = 0;
    *a2 = (_BYTE)v4;
LABEL_6:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v6);
  }
  return a1;
}

void sub_1B20C695C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1B20C691CLL);
  }
  __cxa_rethrow();
}

void sub_1B20C69D4(_Unwind_Exception *a1)
{
}

double std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::istream_iterator<unsigned char,char,std::char_traits<char>,long>,std::istream_iterator<unsigned char,char,std::char_traits<char>,long>,std::ostream_iterator<unsigned char,char,std::char_traits<char>>>@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, _OWORD *a6@<X8>)
{
  *(void *)&long long v11 = a1;
  *((void *)&v11 + 1) = a2;
  *(void *)&long long v10 = a4;
  *((void *)&v10 + 1) = a5;
  if (a1 != a3)
  {
    do
    {
      std::ostream_iterator<unsigned char,char,std::char_traits<char>>::operator=[abi:ne180100]((uint64_t)&v10, (char *)&v11 + 8);
      std::istream_iterator<unsigned char,char,std::char_traits<char>,long>::operator++[abi:ne180100]((uint64_t)&v11);
    }
    while ((void)v11 != a3);
  }
  long long v9 = v10;
  double result = *(double *)&v11;
  *a6 = v11;
  a6[1] = v9;
  return result;
}

uint64_t std::ostream_iterator<unsigned char,char,std::char_traits<char>>::operator=[abi:ne180100](uint64_t a1, char *a2)
{
  uint64_t v3 = *(void **)a1;
  char v7 = *a2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v7, 1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    size_t v5 = strlen(*(const char **)(a1 + 8));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)a1, v4, v5);
  }
  return a1;
}

uint64_t std::istream_iterator<unsigned char,char,std::char_traits<char>,long>::operator++[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = std::operator>>[abi:ne180100]<char,std::char_traits<char>>(*(void **)a1, (unsigned char *)(a1 + 8));
  if ((*((unsigned char *)v2 + *(void *)(*v2 - 24) + 32) & 5) != 0) {
    *(void *)a1 = 0;
  }
  return a1;
}

void std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0>,quasar::lm::TokenStringAndCount * ()(long long)>::~__func()
{
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0>,quasar::lm::TokenStringAndCount * ()(long long)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F0A5B888;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0>,quasar::lm::TokenStringAndCount * ()(long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5B888;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0>,quasar::lm::TokenStringAndCount * ()(long long)>::operator()()
{
}

void sub_1B20C6C10(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1032C40D9E35CA9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0>,quasar::lm::TokenStringAndCount * ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0>,quasar::lm::TokenStringAndCount * ()(long long)>::target_type()
{
}

quasar::lm::TokenStringAndCount *quasar::lm::TokenStringAndCount::TokenStringAndCount(quasar::lm::TokenStringAndCount *this, const quasar::lm::TokenStringAndCount *a2)
{
  *(void *)this = *(void *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 32), *((long long **)a2 + 4), *((long long **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + quasar::readMatrixFile((uint64_t)&this[6], this + 9) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 7, *((const void **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  *((void *)this + quasar::readMatrixFile((uint64_t)&this[6], this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)this + 10, *((const void **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 104), *((long long **)a2 + 13), *((long long **)a2 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3));
  return this;
}

void sub_1B20C6D8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  char v7 = *v5;
  if (*v5)
  {
    *(void *)(v3 + 88) = v7;
    operator delete(v7);
  }
  char v8 = *v4;
  if (*v4)
  {
    *(void *)(v3 + 64) = v8;
    operator delete(v8);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v3 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<quasar::lm::TokenStringAndCount * ()(long long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1>,BOOL ()(long long)>::~__func()
{
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1>,BOOL ()(long long)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F0A5B8E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1>,BOOL ()(long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5B8E0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1>,BOOL ()(long long)>::operator()(uint64_t a1, void *a2)
{
  return *a2 < (unint64_t)((uint64_t)(*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8)) >> 7);
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1>,BOOL ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1>,BOOL ()(long long)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2>,void ()(void)>::~__func()
{
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F0A5B938;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5B938;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2>,void ()(void)>::target_type()
{
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *quasar::lm::Generator<quasar::lm::TokenStringAndCount>::Generator(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_1F0A57F50;
  uint64_t v7 = (uint64_t)(a1 + 5);
  std::__function::__value_func<quasar::lm::TokenStringAndCount * ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a2);
  std::__function::__value_func<BOOL ()(long long)>::__value_func[abi:ne180100](v7, a3);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 9), a4);
  a1[13] = 0;
  a1[14] = 0;
  return a1;
}

void sub_1B20C71CC(_Unwind_Exception *a1)
{
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<quasar::lm::TokenStringAndCount * ()(long long)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *quasar::lm::Generator<quasar::lm::TokenStringAndCount>::~Generator(void *a1)
{
  *a1 = &unk_1F0A57F50;
  uint64_t v2 = a1 + 1;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a1 + 9);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](a1 + 5);
  std::__function::__value_func<quasar::lm::TokenStringAndCount * ()(long long)>::~__value_func[abi:ne180100](v2);
  return a1;
}

void quasar::lm::Generator<quasar::lm::TokenStringAndCount>::~Generator(void *a1)
{
  *a1 = &unk_1F0A57F50;
  uint64_t v2 = a1 + 1;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a1 + 9);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](a1 + 5);
  std::__function::__value_func<quasar::lm::TokenStringAndCount * ()(long long)>::~__value_func[abi:ne180100](v2);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::lm::Generator<quasar::lm::TokenStringAndCount>::next(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v2 + 1;
  *(void *)(a1 + 112) = std::function<quasar::lm::TokenStringAndCount * ()(long long)>::operator()(a1 + 8, v2);
  return a1 + 112;
}

uint64_t quasar::lm::Generator<quasar::lm::TokenStringAndCount>::has_next(uint64_t a1)
{
  FstCheck(*(void *)(a1 + 104) >= 0, "(current_idx_) >= (0)", "../libquasar/liblm/include/lm/streams_liblm.h");
  uint64_t v2 = *(void *)(a1 + 104);
  return std::function<BOOL ()(long long)>::operator()(a1 + 40, v2);
}

uint64_t quasar::lm::Generator<quasar::lm::TokenStringAndCount>::reset(void *a1)
{
  uint64_t v2 = a1[12];
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  a1[13] = 0;
  a1[14] = 0;
  return result;
}

uint64_t std::__function::__value_func<quasar::lm::TokenStringAndCount * ()(long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  return a1;
}

uint64_t std::function<quasar::lm::TokenStringAndCount * ()(long long)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t std::function<BOOL ()(long long)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3>,quasar::lm::TokenStringAndCount * ()(long long)>::~__func()
{
}

__n128 std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3>,quasar::lm::TokenStringAndCount * ()(long long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5B990;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3>,quasar::lm::TokenStringAndCount * ()(long long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5B990;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3>,quasar::lm::TokenStringAndCount * ()(long long)>::operator()()
{
}

void sub_1B20C780C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1032C40D9E35CA9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3>,quasar::lm::TokenStringAndCount * ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3>,quasar::lm::TokenStringAndCount * ()(long long)>::target_type()
{
}

void std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4>,BOOL ()(long long)>::~__func()
{
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4>,BOOL ()(long long)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F0A5B9E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4>,BOOL ()(long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5B9E8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4>,BOOL ()(long long)>::operator()(uint64_t a1, void *a2)
{
  return *a2 < (unint64_t)((uint64_t)(*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8)) >> 7);
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4>,BOOL ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4>,BOOL ()(long long)>::target_type()
{
}

void std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5>,void ()(void)>::~__func()
{
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F0A5BA40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5BA40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5>,void ()(void)>::target_type()
{
}

void std::allocate_shared[abi:ne180100]<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,std::allocator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>()
{
  uint64_t v0 = operator new(0x28uLL);
  std::__shared_ptr_emplace<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,0>(v0);
}

void sub_1B20C7A94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E570;
  fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFst();
}

void sub_1B20C7AF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E570;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFst()
{
}

{
  operator new();
}

void sub_1B20C7C10(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C402D64F9CALL);
  _Unwind_Resume(a1);
}

void fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A384E0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "const");
  std::string::operator=(v4, &__str);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v5);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v6);
  *(_DWORD *)(a1 + 112) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  unsigned int v17 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v15);
  while (v15)
  {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
    uint64_t v8 = v15;
    if (v7)
    {
      if (v15) {
        (*(void (**)(void))(*(void *)v15 + 8))();
      }
LABEL_26:
      fst::MappedFile::Allocate((fst::MappedFile *)(20 * *(int *)(a1 + 96)), 16);
    }
    ++*(_DWORD *)(a1 + 96);
    if (!v8) {
      goto LABEL_8;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
LABEL_9:
    unint64_t v14 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 136))(a2, v9, v12);
    while (1)
    {
      while (!v12[0])
      {
        if (v14 >= v12[2]) {
          goto LABEL_19;
        }
        ++*(void *)(a1 + 104);
LABEL_16:
        ++v14;
      }
      int v10 = (*(uint64_t (**)(void))(*(void *)v12[0] + 24))(v12[0]);
      uint64_t v11 = v12[0];
      if (v10) {
        break;
      }
      ++*(void *)(a1 + 104);
      if (!v11) {
        goto LABEL_16;
      }
      (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
    }
    if (v12[0])
    {
      (*(void (**)(void))(*(void *)v12[0] + 8))();
    }
    else
    {
LABEL_19:
      if (v13) {
        --*v13;
      }
    }
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 32))(v15);
    }
    else {
      ++v17;
    }
  }
  if ((int)v17 >= v16) {
    goto LABEL_26;
  }
  ++*(_DWORD *)(a1 + 96);
LABEL_8:
  uint64_t v9 = v17;
  goto LABEL_9;
}

void sub_1B20C8264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v23);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,std::allocator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>()
{
  uint64_t v0 = operator new(0x70uLL);
  std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>,0>(v0);
}

void sub_1B20C83A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E5A8;
  fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFst();
}

void sub_1B20C83FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E5A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E5A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFst()
{
}

void sub_1B20C8538(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40C4ACC742);
  _Unwind_Resume(a1);
}

void *fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::~NGramFst(void *a1)
{
  *a1 = &unk_1F0A400E0;
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  return fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
}

void fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::~NGramFst(void *a1)
{
  *a1 = &unk_1F0A400E0;
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start()
{
  return 1;
}

float fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Final(*(void *)(a1 + 8), a2);
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NumArcs(uint64_t a1, int a2)
{
  if (a2) {
    return *(void *)(a1 + 24) + 1;
  }
  else {
    return *(void *)(a1 + 24);
  }
}

BOOL fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return a2 != 0;
}

BOOL fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return a2 != 0;
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Copy()
{
}

BOOL fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Write(uint64_t a1, void *a2, unsigned char *a3)
{
  return fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Write(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(void *)(v2 + 104);
  return result;
}

void fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::InitArcIterator(uint64_t a1, int a2)
{
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(*(void *)(a1 + 8), a2, a1 + 16);
  int v3 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 48) != v3)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 48) = v3;
    *(void *)(a1 + 40) = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v4 + 216), v3);
  }
  operator new();
}

void sub_1B20C88C4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C40D85477E9);
  _Unwind_Resume(a1);
}

void fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::InitMatcher()
{
}

void sub_1B20C8940(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C40F1851BD1);
  _Unwind_Resume(a1);
}

BOOL fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::IsMemoryMapped(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 8) + 80) + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 104);
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 68) = _D0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38518;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 3--*(_DWORD *)(a9 + 76) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__str, "ngram");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v11);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x25A555550001;
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10011050000, 1) == 0x10011050000)
  {
    fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2);
    operator new[]();
  }
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
  }
  BOOL v12 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)&__str);
  std::string v13 = (void *)fst::cerr(v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"NGramFst only accepts OpenGRM langauge models as input", 54);
  fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) |= 4uLL;
  return a1;
}

void sub_1B20C9EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v46 - 216));
  if (a37 < 0) {
    operator delete(__p);
  }
  std::deque<int>::~deque[abi:ne180100](&a40);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v46 - 200));
  long long v48 = *(void **)(v46 - 184);
  if (v48) {
    operator delete(v48);
  }
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)(v46 - 160));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((void *)(a13 + 344));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((void *)(a13 + 280));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer(a9);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(a13);
  _Unwind_Resume(a1);
}

void fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, _DWORD *a2, unsigned int *a3, _DWORD *a4, _DWORD *a5)
{
  unsigned int v24 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v22);
  signed int v10 = 0;
  while (1)
  {
    if (!v22)
    {
      if ((int)v24 >= v23) {
        goto LABEL_37;
      }
LABEL_7:
      uint64_t v11 = v24;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 16))(v22)) {
      break;
    }
    if (!v22) {
      goto LABEL_7;
    }
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v22 + 24))();
LABEL_8:
    if (v11 == -1) {
      goto LABEL_32;
    }
    unint64_t v21 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v11, &__p);
    while (1)
    {
      if (!__p)
      {
        if (v21 >= v19) {
          goto LABEL_30;
        }
LABEL_23:
        if (*(_DWORD *)(v18 + 16 * v21) > v10) {
          signed int v10 = *(_DWORD *)(v18 + 16 * v21);
        }
        goto LABEL_25;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      if (!__p) {
        goto LABEL_23;
      }
      (*(void (**)(void))(*(void *)__p + 32))();
      if (!__p) {
        goto LABEL_23;
      }
      (*(void (**)(void *))(*(void *)__p + 32))(__p);
      if (!__p) {
        goto LABEL_23;
      }
      signed int v12 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)__p + 32))(__p);
      if (v12 > v10) {
        signed int v10 = v12;
      }
      if (__p)
      {
        signed int v13 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)__p + 32))() + 4);
        if (v13 > v10) {
          signed int v10 = v13;
        }
        if (!__p) {
          goto LABEL_27;
        }
        (*(void (**)(void))(*(void *)__p + 40))();
      }
      else
      {
LABEL_25:
        if (*(_DWORD *)(v18 + 16 * v21 + 4) > v10) {
          signed int v10 = *(_DWORD *)(v18 + 16 * v21 + 4);
        }
LABEL_27:
        ++v21;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
      goto LABEL_32;
    }
LABEL_30:
    if (v20) {
      --*v20;
    }
LABEL_32:
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 32))(v22);
    }
    else {
      ++v24;
    }
  }
  if (v22) {
    (*(void (**)(void))(*(void *)v22 + 8))();
  }
LABEL_37:
  unsigned int v14 = __clz(v10);
  *a3 = v14;
  if (v10 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    uint64_t v15 = fst::LogMessage::LogMessage((fst *)&v22, (uint64_t)&__p);
    int v16 = (void *)fst::cerr(v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v22);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p);
    }
    unsigned int v14 = *a3;
  }
  *a4 = 1065353216;
  *a5 = 1065353216;
  *a2 = 2 * ~(-1 << (v14 - 1));
}

void sub_1B20CA614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Init(uint64_t a1, const unint64_t *a2, char a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v8 = *(void *)(a1 + 88);
    if (v8) {
      MEMORY[0x1B3EA8630](v8, 0x1000C8077774924);
    }
  }
  uint64_t v9 = *(void *)(a1 + 80);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *(unsigned char *)(a1 + 96) = a3;
  *(void *)(a1 + 80) = a4;
  *(void *)(a1 + 88) = a2;
  unint64_t v10 = *a2;
  *(void *)(a1 + 104) = *a2;
  unint64_t v11 = a2[1];
  *(void *)(a1 + 112) = v11;
  *(void *)(a1 + 120) = a2[2];
  uint64_t v12 = (2 * v10) | 1;
  uint64_t v13 = v11 + v10 + 1;
  unint64_t v14 = 2 * v10 + 64;
  *(void *)(a1 + 144) = a2 + 3;
  *(void *)(a1 + 152) = &a2[(v14 >> 6) + 3];
  unint64_t v15 = ((v11 + v10 + 64) >> 6) + (v14 >> 6);
  *(void *)(a1 + 160) = &a2[v15 + 3];
  unint64_t v16 = 8 * (v15 + ((v10 + 63) >> 6)) + 24;
  uint64_t v17 = (uint64_t)a2 + v16;
  uint64_t v18 = 4 * v10 + 4;
  unint64_t v19 = v16 + v18;
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 76) = v17;
  *(void *)(a1 + 184) = (char *)a2 + v19;
  unint64_t v20 = v19 + 4 * v11;
  unint64_t v21 = v20 + v18;
  *(void *)(a1 + 192) = (char *)a2 + v20;
  *(void *)(a1 + 200) = (char *)a2 + v21;
  *(void *)(a1 + 208) = (char *)a2 + 4 * v11 + v21;
  fst::BitmapIndex::BuildIndex((fst::BitmapIndex *)(a1 + 216), a2 + 3, v12);
  fst::BitmapIndex::BuildIndex((fst::BitmapIndex *)(a1 + 280), *(const unint64_t **)(a1 + 152), v13);
  fst::BitmapIndex::BuildIndex((fst::BitmapIndex *)(a1 + 344), *(const unint64_t **)(a1 + 160), *(void *)(a1 + 104));
  *(void *)(a1 + 128) = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(a1 + 216), 0);
  *(void *)(a1 + 136) = v22;
  if (!fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), 0)
    && *(void *)(a1 + 128) == 1
    && (**(unsigned char **)(a1 + 216) & 4) != 0)
  {
    uint64_t v25 = *(void *)(a1 + 176);
    *(void *)(a1 + 168) = v25 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), 2uLL);
  }
  else
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v23 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)__p);
    unsigned int v24 = (void *)fst::cerr(v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Malformed file", 14);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v28);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
  }
}

void sub_1B20CA910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::~NGramFstImpl(uint64_t a1)
{
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::~NGramFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::deque<std::pair<int,int>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<int,int>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<std::pair<int,int>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B20CACDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::~NGramFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A38518;
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v2 = *(void *)(a1 + 88);
    if (v2) {
      MEMORY[0x1B3EA8630](v2, 0x1000C8077774924);
    }
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = *(void **)(a1 + 384);
  if (v4)
  {
    *(void *)(a1 + 392) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 360);
  if (v5)
  {
    *(void *)(a1 + 368) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(void *)(a1 + 328) = v6;
    operator delete(v6);
  }
  unint64_t v7 = *(void **)(a1 + 296);
  if (v7)
  {
    *(void *)(a1 + 304) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 256);
  if (v8)
  {
    *(void *)(a1 + 264) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 232);
  if (v9)
  {
    *(void *)(a1 + 240) = v9;
    operator delete(v9);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(a1);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (a2)
  {
    uint64_t v3 = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(v2 + 35), a2);
  }
  else
  {
    uint64_t v3 = v2[16];
    uint64_t v4 = v2[17];
  }
  return v4 + ~v3;
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(uint64_t result, int a2, uint64_t a3)
{
  if (*(_DWORD *)a3 != a2)
  {
    *(_DWORD *)a3 = a2;
    uint64_t v4 = (fst::BitmapIndex *)(result + 280);
    uint64_t v5 = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(result + 280), a2);
    *(void *)(a3 + 8) = v6 + ~v5;
    __n128 result = fst::BitmapIndex::Rank1(v4, v5 + 1);
    *(void *)(a3 + 16) = result;
  }
  return result;
}

void *fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A41090;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

float fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Final(uint64_t a1, int a2)
{
  if (((*(void *)(*(void *)(a1 + 344) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    return INFINITY;
  }
  uint64_t v2 = *(void *)(a1 + 208);
  return *(float *)(v2 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 344), a2));
}

BOOL fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Write(uint64_t a1, void *a2, unsigned char *a3)
{
  long long v17 = 0u;
  long long v16 = 0u;
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)BOOL v14 = 0u;
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v18 = 1;
  uint64_t v19 = v5;
  uint64_t v20 = 0;
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteHeader(a1, (uint64_t)a2, a3, 4, (uint64_t)v13);
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    unint64_t v7 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    uint64_t v8 = (void *)fst::cerr(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Could not align file during write after header", 46);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    BOOL v6 = 0;
  }
  else
  {
    std::ostream::write();
    BOOL v6 = (*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0;
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[1]);
  }
  if (SHIBYTE(v15[0]) < 0) {
    operator delete(v14[0]);
  }
  return v6;
}

void sub_1B20CB0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::ArcIterator(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_1F0A37968;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 72) = -1;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 15;
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v8 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  if (a1 + 40 != a2 + 16)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 80), *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
    uint64_t v6 = *(void *)(a1 + 32);
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 80);
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(v6, a3, a1 + 40);
  int v9 = *(_DWORD *)(a1 + 40);
  if (*(_DWORD *)(a1 + 72) != v9)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)(a1 + 72) = v9;
    *(void *)(a1 + 64) = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v10 + 216), v9);
  }
  return a1;
}

void sub_1B20CB23C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 88) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::~ArcIterator(void *a1)
{
  *a1 = &unk_1F0A37968;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  return a1;
}

void fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::~ArcIterator(void *a1)
{
  *a1 = &unk_1F0A37968;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

BOOL fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::Done_(void *a1)
{
  unint64_t v1 = a1[6];
  if (a1[8]) {
    ++v1;
  }
  return a1[14] >= v1;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::Next_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = -1;
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 112) = 0;
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = -1;
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::Seek_(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 112) != a2)
  {
    *(void *)(result + ++*(void *)(result + 112) = a2;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = -1;
  }
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::Flags_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::SetFlags_(uint64_t result, char a2, int a3)
{
  *(_DWORD *)(result + 120) = *(_DWORD *)(result + 120) & ~a3 | a2 & 0xF;
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::Value(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 112);
  if (v2)
  {
    BOOL v4 = v3 == 0;
    LODWORD(v5) = v3 - 1;
    int v6 = *(_DWORD *)(a1 + 120);
    unsigned int v7 = *(_DWORD *)(a1 + 24);
    if ((v6 & v7 & 3) == 0) {
      goto LABEL_9;
    }
    if (!v3)
    {
      int v8 = 0;
      LODWORD(v3) = -1;
      BOOL v4 = 1;
      goto LABEL_8;
    }
    LODWORD(v3) = v3 - 1;
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 120);
    unsigned int v7 = *(_DWORD *)(a1 + 24);
    if ((v6 & v7 & 3) == 0)
    {
      if ((v6 & v7 & 8) == 0)
      {
        if ((v6 & v7 & 4) == 0) {
          return a1 + 8;
        }
        goto LABEL_22;
      }
      uint64_t v5 = *(void *)(a1 + 112);
LABEL_14:
      if ((v7 & 8) != 0) {
        fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstContext(*(void *)(a1 + 32), (int *)(a1 + 40));
      }
      int v12 = fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Transition(*(void **)(a1 + 32), (void *)(a1 + 80), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 184) + 4 * (*(void *)(a1 + 56) + (int)v5)));
      BOOL v4 = 0;
      goto LABEL_17;
    }
  }
  BOOL v4 = 0;
  int v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 184) + 4 * (*(void *)(a1 + 56) + (int)v3));
LABEL_8:
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v8;
  v7 &= 0xFFFFFFFC;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = v7;
  LODWORD(v5) = v3;
LABEL_9:
  if ((v6 & v7 & 8) == 0) {
    goto LABEL_18;
  }
  if (!v4) {
    goto LABEL_14;
  }
  int v9 = (fst::BitmapIndex *)(*(void *)(a1 + 32) + 216);
  uint64_t v10 = fst::BitmapIndex::Rank1(v9, v2);
  unint64_t v11 = fst::BitmapIndex::Select1(v9, v2 + ~v10);
  int v12 = fst::BitmapIndex::Rank1(v9, v11);
  BOOL v4 = 1;
LABEL_17:
  unsigned int v7 = *(_DWORD *)(a1 + 24) & 0xFFFFFFF7;
  *(_DWORD *)(a1 + 20) = v12;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = v7;
  int v6 = *(_DWORD *)(a1 + 120);
LABEL_18:
  if ((v6 & v7 & 4) != 0)
  {
    if (v4)
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 192);
      uint64_t v14 = *(int *)(a1 + 40);
LABEL_23:
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(v13 + 4 * v14);
      *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = v7 & 0xFFFFFFFB;
      return a1 + 8;
    }
    LODWORD(v3) = v5;
LABEL_22:
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 200);
    uint64_t v14 = *(void *)(a1 + 56) + (int)v3;
    goto LABEL_23;
  }
  return a1 + 8;
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstContext(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  int v4 = a2[8];
  int v5 = *a2;
  if (v4 != *a2)
  {
    a2[8] = v5;
    __n128 result = fst::BitmapIndex::Select1((fst::BitmapIndex *)(result + 216), v5);
    *((void *)a2 + 3) = result;
    int v4 = *a2;
  }
  if (a2[16] != v4)
  {
    unsigned int v7 = (void **)(a2 + 10);
    uint64_t v6 = *((void *)a2 + 5);
    a2[16] = v4;
    *((void *)a2 + 6) = v6;
    unint64_t v8 = *((void *)a2 + 3);
    if (v8)
    {
      do
      {
        uint64_t v9 = *(void *)(v3 + 176);
        int v10 = *(_DWORD *)(v9 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(v3 + 216), v8));
        int v12 = (char *)*((void *)a2 + 6);
        unint64_t v11 = *((void *)a2 + 7);
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v14 = (char *)*v7;
          uint64_t v15 = (v12 - (unsigned char *)*v7) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v11 - (void)v14;
          if (v17 >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 14), v18);
            uint64_t v14 = (char *)*((void *)a2 + 5);
            int v12 = (char *)*((void *)a2 + 6);
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v20 = &v19[4 * v15];
          *(_DWORD *)uint64_t v20 = v10;
          uint64_t v13 = v20 + 4;
          while (v12 != v14)
          {
            int v21 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          *((void *)a2 + 5) = v20;
          *((void *)a2 + 6) = v13;
          *((void *)a2 + 7) = &v19[4 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(_DWORD *)int v12 = v10;
          uint64_t v13 = v12 + 4;
        }
        *((void *)a2 + 6) = v13;
        uint64_t v22 = fst::BitmapIndex::Rank1((fst::BitmapIndex *)(v3 + 216), v8);
        __n128 result = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v3 + 216), v8 + ~v22);
        unint64_t v8 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Transition(void *a1, void *a2, int a3)
{
  uint64_t v4 = a1[17];
  unint64_t v5 = v4 - 2;
  if (v4 == 2) {
    goto LABEL_11;
  }
  unsigned int v7 = (char *)a1[21];
  unint64_t v8 = &v7[4 * v5];
  uint64_t v9 = v7;
  do
  {
    unint64_t v10 = v5 >> 1;
    unint64_t v11 = &v9[4 * (v5 >> 1)];
    int v13 = *(_DWORD *)v11;
    int v12 = v11 + 4;
    v5 += ~(v5 >> 1);
    if (v13 < a3) {
      uint64_t v9 = v12;
    }
    else {
      unint64_t v5 = v10;
    }
  }
  while (v5);
  if (v9 == v8 || *(_DWORD *)v9 != a3)
  {
LABEL_11:
    uint64_t v20 = (fst::BitmapIndex *)(a1 + 27);
    unint64_t v21 = 0;
  }
  else
  {
    unint64_t v14 = (v9 - v7 + 8) >> 2;
    uint64_t v15 = a1 + 27;
    unint64_t v16 = fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 27), v14);
    if (v16)
    {
      uint64_t v17 = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(a1 + 27), v16);
      uint64_t v19 = v18;
    }
    else
    {
      uint64_t v17 = a1[16];
      uint64_t v19 = a1[17];
    }
    uint64_t v23 = v17 + 1;
    if ((*(void *)(*v15 + (((unint64_t)(v17 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 + 1)))
    {
      int v24 = ((a2[1] - *a2) >> 2) - 1;
      if (v24 >= 0)
      {
        uint64_t v25 = a1[22];
        uint64_t v26 = (_DWORD *)(v25 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 27), v17 + 1));
        uint64_t v27 = (uint64_t)&v26[v19 + ~v17];
        if ((_DWORD *)v27 != v26)
        {
          uint64_t v28 = (int *)(*a2 + 4 * v24);
          do
          {
            int v29 = *v28;
            unint64_t v30 = (v27 - (uint64_t)v26) >> 2;
            long long v31 = v26;
            do
            {
              unint64_t v32 = v30 >> 1;
              unint64_t v33 = &v31[v30 >> 1];
              int v35 = *v33;
              long long v34 = v33 + 1;
              v30 += ~(v30 >> 1);
              if (v35 < v29) {
                long long v31 = v34;
              }
              else {
                unint64_t v30 = v32;
              }
            }
            while (v30);
            if (v31 == (_DWORD *)v27 || *v31 != v29) {
              break;
            }
            unint64_t v14 = &v31[v23] - v26;
            unint64_t v36 = fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 27), v14);
            if (v36)
            {
              uint64_t v37 = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(a1 + 27), v36);
              uint64_t v39 = v38;
            }
            else
            {
              uint64_t v37 = a1[16];
              uint64_t v39 = a1[17];
            }
            uint64_t v23 = v37 + 1;
            if (((*(void *)(*v15 + (((unint64_t)(v37 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v37 + 1)) & 1) == 0) {
              break;
            }
            if (v24 <= 0) {
              break;
            }
            --v24;
            uint64_t v40 = a1[22];
            uint64_t v26 = (_DWORD *)(v40 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 27), v37 + 1));
            uint64_t v27 = (uint64_t)&v26[v39 + ~v37];
            uint64_t v28 = (int *)(*a2 + 4 * v24);
          }
          while ((_DWORD *)v27 != v26);
        }
      }
    }
    uint64_t v20 = (fst::BitmapIndex *)(a1 + 27);
    unint64_t v21 = v14;
  }
  return fst::BitmapIndex::Rank1(v20, v21);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFstMatcher(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_1F0A3C230;
  *(void *)(a1 + 8) = a2;
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v7 = *(_OWORD *)(a2 + 32);
  int v8 = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  uint64_t v9 = a1 + 56;
  *(_DWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  *(_DWORD *)(v9 + ++*(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(v9 + 32) = a3;
  *(unsigned char *)(v9 + 56) = 0;
  *(_OWORD *)(v9 + 60) = xmmword_1B25616E0;
  if (a3 == 1) {
    *(void *)(a1 + 116) = 0xFFFFFFFF00000000;
  }
  return a1;
}

void *fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::~NGramFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3C230;
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  return a1;
}

void fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::~NGramFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3C230;
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Copy()
{
}

void sub_1B20CBAA4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C40F1851BD1);
  _Unwind_Resume(a1);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Type(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Properties(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetState_(uint64_t a1, int a2)
{
  uint64_t result = fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(*(void *)(*(void *)(a1 + 8) + 8), a2, a1 + 16);
  *(unsigned char *)(a1 + ++*(void *)(result + 112) = 0;
  return result;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Find_(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 92) = 1;
  if ((a2 + 1) > 1)
  {
    *(unsigned char *)(a1 + ++*(void *)(result + 112) = 0;
    unint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = *(void *)(v6 + 8);
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(v7 + 184) + 4 * v8;
      unint64_t v10 = (_DWORD *)(v9 + 4 * v5);
      unint64_t v11 = (_DWORD *)v9;
      do
      {
        unint64_t v12 = v5 >> 1;
        int v13 = &v11[v5 >> 1];
        int v15 = *v13;
        unint64_t v14 = v13 + 1;
        v5 += ~(v5 >> 1);
        if (v15 < a2) {
          unint64_t v11 = v14;
        }
        else {
          unint64_t v5 = v12;
        }
      }
      while (v5);
      if (v11 != v10 && *v11 == a2)
      {
        *(_DWORD *)(a1 + 96) = a2;
        *(_DWORD *)(a1 + 100) = a2;
        *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)(v7 + 200) + 4 * (v8 + (((unint64_t)v11 - v9) >> 2)));
        fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstContext(*(void *)(v6 + 8), (int *)(a1 + 16));
        *(_DWORD *)(a1 + 108) = fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Transition(*(void **)(*(void *)(a1 + 8) + 8), (void *)(a1 + 56), a2);
LABEL_19:
        *(unsigned char *)(a1 + 92) = 0;
      }
    }
  }
  else
  {
    if (a2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      if (!v4) {
        return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1) ^ 1;
      }
      goto LABEL_15;
    }
    *(unsigned char *)(a1 + ++*(void *)(result + 112) = 1;
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 128) = v4;
    if (v4)
    {
LABEL_15:
      *(void *)(a1 + 96) = 0;
      if (*(_DWORD *)(a1 + 48) == v4)
      {
        unint64_t v16 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v17 = *(void *)(*(void *)(a1 + 8) + 8);
        *(_DWORD *)(a1 + 48) = v4;
        unint64_t v16 = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v17 + 216), v4);
        *(void *)(a1 + 40) = v16;
      }
      uint64_t v18 = (fst::BitmapIndex *)(*(void *)(*(void *)(a1 + 8) + 8) + 216);
      uint64_t v19 = fst::BitmapIndex::Rank1(v18, v16);
      unint64_t v20 = fst::BitmapIndex::Select1(v18, v16 + ~v19);
      *(_DWORD *)(a1 + 108) = fst::BitmapIndex::Rank1(v18, v20);
      *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 192)
                                        + 4 * *(int *)(a1 + 16));
      goto LABEL_19;
    }
  }
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1) ^ 1;
}

BOOL fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Done_(uint64_t a1)
{
  return !*(unsigned char *)(a1 + 112) && *(unsigned char *)(a1 + 92) != 0;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112)) {
    return a1 + 116;
  }
  else {
    return a1 + 96;
  }
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 112)) {
    *(unsigned char *)(result + ++*(void *)(result + 112) = 0;
  }
  else {
    *(unsigned char *)(result + 92) = 1;
  }
  return result;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFstMatcher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A3C230;
  *(void *)(a1 + 8) = v4;
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  uint64_t v7 = a1 + 56;
  *(_DWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  *(_DWORD *)(v7 + ++*(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 80);
  int v8 = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(v7 + 32) = v8;
  *(unsigned char *)(v7 + 56) = 0;
  *(_OWORD *)(v7 + 60) = xmmword_1B25616E0;
  if (v8 == 1) {
    *(void *)(a1 + 116) = 0xFFFFFFFF00000000;
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,std::allocator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>()
{
  uint64_t v0 = operator new(0x70uLL);
  std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>,0>(v0);
}

void sub_1B20CBE50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E5E0;
  fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFst();
}

void sub_1B20CBEAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E5E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E5E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFst()
{
}

void sub_1B20CBFE8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C407D00F10ALL);
  _Unwind_Resume(a1);
}

void *fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::~NGramFst(void *a1)
{
  *a1 = &unk_1F0A40198;
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  return fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
}

void fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::~NGramFst(void *a1)
{
  *a1 = &unk_1F0A40198;
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start()
{
  return 1;
}

float fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Final(*(void *)(a1 + 8), a2);
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NumArcs(uint64_t a1, int a2)
{
  if (a2) {
    return *(void *)(a1 + 24) + 1;
  }
  else {
    return *(void *)(a1 + 24);
  }
}

BOOL fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return a2 != 0;
}

BOOL fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return a2 != 0;
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Copy()
{
}

BOOL fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Write(uint64_t a1, void *a2, unsigned char *a3)
{
  return fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Write(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(void *)(v2 + 104);
  return result;
}

void fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::InitArcIterator(uint64_t a1, int a2)
{
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(*(void *)(a1 + 8), a2, a1 + 16);
  int v3 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 48) != v3)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 48) = v3;
    *(void *)(a1 + 40) = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v4 + 216), v3);
  }
  operator new();
}

void sub_1B20CC374(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C40D85477E9);
  _Unwind_Resume(a1);
}

void fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::InitMatcher()
{
}

void sub_1B20CC3F0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C40F1851BD1);
  _Unwind_Resume(a1);
}

BOOL fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::IsMemoryMapped(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 8) + 80) + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 104);
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 68) = _D0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38550;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 3--*(_DWORD *)(a9 + 76) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::TypeString(&__str);
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v11);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x25A555550001;
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10011050000, 1) == 0x10011050000)
  {
    fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2);
    operator new[]();
  }
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
  }
  unint64_t v12 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)&__str);
  int v13 = (void *)fst::cerr(v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"NGramFst only accepts OpenGRM langauge models as input", 54);
  fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) |= 4uLL;
  return a1;
}

void sub_1B20CD9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v44 - 216));
  if (a35 < 0) {
    operator delete(__p);
  }
  std::deque<int>::~deque[abi:ne180100](&a38);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v44 - 200));
  unint64_t v46 = *(void **)(v44 - 184);
  if (v46) {
    operator delete(v46);
  }
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((void *)(v44 - 160));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((void *)(a14 + 344));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((void *)(a14 + 280));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer(a10);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(a14);
  _Unwind_Resume(a1);
}

std::string *fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::TypeString@<X0>(std::string *a1@<X8>)
{
  return std::string::append(a1, "_quantized");
}

void sub_1B20CDD80(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

float fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, _DWORD *a2, unsigned int *a3, float *a4, float *a5)
{
  unsigned int v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v32);
  signed int v10 = 0;
  float v11 = -INFINITY;
  float v12 = INFINITY;
  while (1)
  {
    if (!v32)
    {
      if ((int)v34 >= v33) {
        goto LABEL_45;
      }
LABEL_7:
      uint64_t v13 = v34;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v32 + 16))(v32)) {
      break;
    }
    if (!v32) {
      goto LABEL_7;
    }
    uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v32 + 24))();
LABEL_8:
    if (v13 == -1) {
      goto LABEL_40;
    }
    unint64_t v31 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v13, &__p);
    while (1)
    {
      if (!__p)
      {
        if (v31 >= v29) {
          goto LABEL_38;
        }
LABEL_27:
        if (*(float *)(v28 + 16 * v31 + 8) >= v11) {
          float v11 = *(float *)(v28 + 16 * v31 + 8);
        }
LABEL_29:
        if (v12 >= *(float *)(v28 + 16 * v31 + 8)) {
          float v12 = *(float *)(v28 + 16 * v31 + 8);
        }
LABEL_31:
        if (*(_DWORD *)(v28 + 16 * v31) > v10) {
          signed int v10 = *(_DWORD *)(v28 + 16 * v31);
        }
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      if (!__p) {
        goto LABEL_27;
      }
      uint64_t v14 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (*(float *)(v14 + 8) >= v11) {
        float v11 = *(float *)(v14 + 8);
      }
      if (!__p) {
        goto LABEL_29;
      }
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v12 >= *(float *)(v15 + 8)) {
        float v12 = *(float *)(v15 + 8);
      }
      if (!__p) {
        goto LABEL_31;
      }
      signed int v16 = *(_DWORD *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v16 > v10) {
        signed int v10 = v16;
      }
      if (__p)
      {
        signed int v17 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)__p + 32))() + 4);
        if (v17 > v10) {
          signed int v10 = v17;
        }
        if (!__p) {
          goto LABEL_35;
        }
        (*(void (**)(void))(*(void *)__p + 40))();
      }
      else
      {
LABEL_33:
        if (*(_DWORD *)(v28 + 16 * v31 + 4) > v10) {
          signed int v10 = *(_DWORD *)(v28 + 16 * v31 + 4);
        }
LABEL_35:
        ++v31;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v30) {
      --*v30;
    }
LABEL_40:
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 32))(v32);
    }
    else {
      ++v34;
    }
  }
  if (v32) {
    (*(void (**)(void))(*(void *)v32 + 8))();
  }
LABEL_45:
  unsigned int v18 = __clz(v10);
  *a3 = v18;
  if (v10 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    uint64_t v19 = fst::LogMessage::LogMessage((fst *)&v32, (uint64_t)&__p);
    unint64_t v20 = (void *)fst::cerr(v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v32);
    if (SHIBYTE(v29) < 0) {
      operator delete(__p);
    }
    unsigned int v18 = *a3;
  }
  char v21 = v18 - 1;
  float v22 = fabsf(v11);
  float v23 = fabsf(v12);
  if (v22 < v23) {
    float v22 = v23;
  }
  if (v22 <= 0.0) {
    double v24 = (double)(1 << v21) + -1.0;
  }
  else {
    double v24 = v22;
  }
  float v25 = ((double)(1 << v21) + -1.0) / v24;
  *a4 = v25;
  float result = 1.0 / v25;
  *a5 = result;
  *a2 = (2 << v21) - 2;
  return result;
}

void sub_1B20CE21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Init(uint64_t a1, const unint64_t *a2, char a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v8 = *(void *)(a1 + 88);
    if (v8) {
      MEMORY[0x1B3EA8630](v8, 0x1000C8077774924);
    }
  }
  uint64_t v9 = *(void *)(a1 + 80);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *(unsigned char *)(a1 + 96) = a3;
  *(void *)(a1 + 80) = a4;
  *(void *)(a1 + 88) = a2;
  unint64_t v10 = *a2;
  *(void *)(a1 + 104) = *a2;
  unint64_t v11 = a2[1];
  *(void *)(a1 + ++*(void *)(result + 112) = v11;
  *(void *)(a1 + 120) = a2[2];
  uint64_t v12 = (2 * v10) | 1;
  uint64_t v13 = v11 + v10 + 1;
  unint64_t v14 = 2 * v10 + 64;
  *(void *)(a1 + 144) = a2 + 3;
  *(void *)(a1 + 152) = &a2[(v14 >> 6) + 3];
  unint64_t v15 = ((v11 + v10 + 64) >> 6) + (v14 >> 6);
  *(void *)(a1 + 160) = &a2[v15 + 3];
  unint64_t v16 = 8 * (v15 + ((v10 + 63) >> 6)) + 24;
  uint64_t v17 = v16 + 4 * v10 + 4;
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 76) = (char *)a2 + v16;
  *(void *)(a1 + 184) = (char *)a2 + v17;
  *(void *)(a1 + 192) = (char *)a2 + v16;
  *(void *)(a1 + 200) = (char *)a2 + v17;
  *(void *)(a1 + 208) = (char *)a2 + 4 * v11 + v17;
  fst::BitmapIndex::BuildIndex((fst::BitmapIndex *)(a1 + 216), a2 + 3, v12);
  fst::BitmapIndex::BuildIndex((fst::BitmapIndex *)(a1 + 280), *(const unint64_t **)(a1 + 152), v13);
  fst::BitmapIndex::BuildIndex((fst::BitmapIndex *)(a1 + 344), *(const unint64_t **)(a1 + 160), *(void *)(a1 + 104));
  *(void *)(a1 + 128) = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(a1 + 216), 0);
  *(void *)(a1 + 136) = v18;
  if (!fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), 0)
    && *(void *)(a1 + 128) == 1
    && (**(unsigned char **)(a1 + 216) & 4) != 0)
  {
    uint64_t v21 = *(void *)(a1 + 176);
    *(void *)(a1 + 168) = v21 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), 2uLL);
  }
  else
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v19 = fst::LogMessage::LogMessage((fst *)&v24, (uint64_t)__p);
    unint64_t v20 = (void *)fst::cerr(v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Malformed file", 14);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v24);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
  }
}

void sub_1B20CE504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::~NGramFstImpl(uint64_t a1)
{
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::~NGramFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::~NGramFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A38550;
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v2 = *(void *)(a1 + 88);
    if (v2) {
      MEMORY[0x1B3EA8630](v2, 0x1000C8077774924);
    }
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void **)(a1 + 384);
  if (v4)
  {
    *(void *)(a1 + 392) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a1 + 360);
  if (v5)
  {
    *(void *)(a1 + 368) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(void *)(a1 + 328) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 296);
  if (v7)
  {
    *(void *)(a1 + 304) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 256);
  if (v8)
  {
    *(void *)(a1 + 264) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 232);
  if (v9)
  {
    *(void *)(a1 + 240) = v9;
    operator delete(v9);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(a1);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (a2)
  {
    uint64_t v3 = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(v2 + 35), a2);
  }
  else
  {
    uint64_t v3 = v2[16];
    uint64_t v4 = v2[17];
  }
  return v4 + ~v3;
}

void *fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A41148;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

BOOL fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Write(uint64_t a1, void *a2, unsigned char *a3)
{
  long long v18 = 0u;
  long long v17 = 0u;
  *(_OWORD *)unint64_t v16 = 0u;
  *(_OWORD *)unint64_t v15 = 0u;
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v19 = 1;
  uint64_t v20 = v6;
  uint64_t v21 = 0;
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteHeader(a1, (uint64_t)a2, a3, 4, (uint64_t)v14);
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
    uint64_t v9 = (void *)fst::cerr(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Could not align file during write after header", 46);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    BOOL v7 = 0;
  }
  else
  {
    LODWORD(__p[0]) = *(_DWORD *)(a1 + 68);
    std::ostream::write();
    LODWORD(__p[0]) = *(_DWORD *)(a1 + 72);
    std::ostream::write();
    LODWORD(__p[0]) = *(_DWORD *)(a1 + 60);
    std::ostream::write();
    LODWORD(__p[0]) = *(_DWORD *)(a1 + 64);
    std::ostream::write();
    std::ostream::write();
    BOOL v7 = (*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0;
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[1]);
  }
  if (SHIBYTE(v16[0]) < 0) {
    operator delete(v15[0]);
  }
  return v7;
}

void sub_1B20CE8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::ArcIterator(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_1F0A379D0;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 72) = -1;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  *(void *)(a1 + ++*(void *)(result + 112) = 0;
  *(_DWORD *)(a1 + 120) = 15;
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v8 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  if (a1 + 40 != a2 + 16)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 80), *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
    uint64_t v6 = *(void *)(a1 + 32);
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 80);
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(v6, a3, a1 + 40);
  int v9 = *(_DWORD *)(a1 + 40);
  if (*(_DWORD *)(a1 + 72) != v9)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)(a1 + 72) = v9;
    *(void *)(a1 + 64) = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v10 + 216), v9);
  }
  return a1;
}

void sub_1B20CEA30(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 88) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::~ArcIterator(void *a1)
{
  *a1 = &unk_1F0A379D0;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  return a1;
}

void fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::~ArcIterator(void *a1)
{
  *a1 = &unk_1F0A379D0;
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

BOOL fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::Done_(void *a1)
{
  unint64_t v1 = a1[6];
  if (a1[8]) {
    ++v1;
  }
  return a1[14] >= v1;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::Next_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = -1;
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 112) = 0;
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = -1;
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::Seek_(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 112) != a2)
  {
    *(void *)(result + ++*(void *)(result + 112) = a2;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = -1;
  }
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::Flags_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::SetFlags_(uint64_t result, char a2, int a3)
{
  *(_DWORD *)(result + 120) = *(_DWORD *)(result + 120) & ~a3 | a2 & 0xF;
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::Value(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 112);
  if (v2)
  {
    BOOL v4 = v3 == 0;
    LODWORD(v5) = v3 - 1;
    int v6 = *(_DWORD *)(a1 + 120);
    unsigned int v7 = *(_DWORD *)(a1 + 24);
    if ((v6 & v7 & 3) == 0) {
      goto LABEL_9;
    }
    if (!v3)
    {
      int v8 = 0;
      LODWORD(v3) = -1;
      BOOL v4 = 1;
      goto LABEL_8;
    }
    LODWORD(v3) = v3 - 1;
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 120);
    unsigned int v7 = *(_DWORD *)(a1 + 24);
    if ((v6 & v7 & 3) == 0)
    {
      if ((v6 & v7 & 8) == 0)
      {
        if ((v6 & v7 & 4) == 0) {
          return a1 + 8;
        }
        goto LABEL_22;
      }
      uint64_t v5 = *(void *)(a1 + 112);
LABEL_14:
      if ((v7 & 8) != 0) {
        fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::SetInstContext(*(void *)(a1 + 32), (int *)(a1 + 40));
      }
      int v12 = fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Transition(*(void *)(a1 + 32), (void *)(a1 + 80), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 184) + 4 * (*(void *)(a1 + 56) + (int)v5)) >> *(_DWORD *)(*(void *)(a1 + 32) + 60));
      BOOL v4 = 0;
      goto LABEL_17;
    }
  }
  BOOL v4 = 0;
  int v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 184) + 4 * (*(void *)(a1 + 56) + (int)v3)) >> *(_DWORD *)(*(void *)(a1 + 32) + 60);
LABEL_8:
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v8;
  v7 &= 0xFFFFFFFC;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = v7;
  LODWORD(v5) = v3;
LABEL_9:
  if ((v6 & v7 & 8) == 0) {
    goto LABEL_18;
  }
  if (!v4) {
    goto LABEL_14;
  }
  int v9 = (fst::BitmapIndex *)(*(void *)(a1 + 32) + 216);
  uint64_t v10 = fst::BitmapIndex::Rank1(v9, v2);
  unint64_t v11 = fst::BitmapIndex::Select1(v9, v2 + ~v10);
  int v12 = fst::BitmapIndex::Rank1(v9, v11);
  BOOL v4 = 1;
LABEL_17:
  unsigned int v7 = *(_DWORD *)(a1 + 24) & 0xFFFFFFF7;
  *(_DWORD *)(a1 + 20) = v12;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = v7;
  int v6 = *(_DWORD *)(a1 + 120);
LABEL_18:
  if ((v6 & v7 & 4) == 0) {
    return a1 + 8;
  }
  if (!v4)
  {
    LODWORD(v3) = v5;
LABEL_22:
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 200);
    uint64_t v15 = *(void *)(a1 + 56) + (int)v3;
    goto LABEL_23;
  }
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(v13 + 192);
  uint64_t v15 = *(int *)(a1 + 40);
LABEL_23:
  unsigned int v16 = *(_DWORD *)(v14 + 4 * v15);
  float v17 = (float)((*(_DWORD *)(v13 + 64) & v16) >> 1);
  if (v16) {
    float v17 = -v17;
  }
  *(float *)(a1 + 16) = *(float *)(v13 + 72) * v17;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = v7 & 0xFFFFFFFB;
  return a1 + 8;
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::SetInstContext(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  int v4 = a2[8];
  int v5 = *a2;
  if (v4 != *a2)
  {
    a2[8] = v5;
    float result = fst::BitmapIndex::Select1((fst::BitmapIndex *)(result + 216), v5);
    *((void *)a2 + 3) = result;
    int v4 = *a2;
  }
  if (a2[16] != v4)
  {
    unsigned int v7 = (void **)(a2 + 10);
    uint64_t v6 = *((void *)a2 + 5);
    a2[16] = v4;
    *((void *)a2 + 6) = v6;
    unint64_t v8 = *((void *)a2 + 3);
    if (v8)
    {
      do
      {
        uint64_t v9 = *(void *)(v3 + 176);
        int v10 = *(_DWORD *)(v9 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(v3 + 216), v8)) >> *(_DWORD *)(v3 + 60);
        int v12 = (char *)*((void *)a2 + 6);
        unint64_t v11 = *((void *)a2 + 7);
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v14 = (char *)*v7;
          uint64_t v15 = (v12 - (unsigned char *)*v7) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v11 - (void)v14;
          if (v17 >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 14), v18);
            uint64_t v14 = (char *)*((void *)a2 + 5);
            int v12 = (char *)*((void *)a2 + 6);
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v20 = &v19[4 * v15];
          *(_DWORD *)uint64_t v20 = v10;
          uint64_t v13 = v20 + 4;
          while (v12 != v14)
          {
            int v21 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          *((void *)a2 + 5) = v20;
          *((void *)a2 + 6) = v13;
          *((void *)a2 + 7) = &v19[4 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(_DWORD *)int v12 = v10;
          uint64_t v13 = v12 + 4;
        }
        *((void *)a2 + 6) = v13;
        uint64_t v22 = fst::BitmapIndex::Rank1((fst::BitmapIndex *)(v3 + 216), v8);
        float result = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v3 + 216), v8 + ~v22);
        unint64_t v8 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Transition(uint64_t a1, void *a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 136);
  unint64_t v5 = v4 - 2;
  if (v4 == 2) {
    goto LABEL_11;
  }
  unsigned int v7 = *(char **)(a1 + 168);
  unint64_t v8 = &v7[4 * v5];
  int v9 = *(_DWORD *)(a1 + 60);
  int v10 = v7;
  do
  {
    unint64_t v11 = v5 >> 1;
    int v12 = &v10[4 * (v5 >> 1)];
    unsigned int v14 = *(_DWORD *)v12;
    uint64_t v13 = v12 + 4;
    v5 += ~(v5 >> 1);
    if (v14 < a3 << v9) {
      int v10 = v13;
    }
    else {
      unint64_t v5 = v11;
    }
  }
  while (v5);
  if (v10 == v8 || *(_DWORD *)v10 >> v9 != a3)
  {
LABEL_11:
    int v21 = (fst::BitmapIndex *)(a1 + 216);
    unint64_t v22 = 0;
  }
  else
  {
    unint64_t v15 = (v10 - v7 + 8) >> 2;
    unint64_t v16 = (void *)(a1 + 216);
    unint64_t v17 = fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), v15);
    if (v17)
    {
      uint64_t v18 = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(a1 + 216), v17);
      uint64_t v20 = v19;
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 128);
      uint64_t v20 = *(void *)(a1 + 136);
    }
    uint64_t v24 = v18 + 1;
    if ((*(void *)(*v16 + (((unint64_t)(v18 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v18 + 1)))
    {
      int v25 = ((a2[1] - *a2) >> 2) - 1;
      if (v25 >= 0)
      {
        uint64_t v26 = *(void *)(a1 + 176);
        uint64_t v27 = (_DWORD *)(v26 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), v18 + 1));
        uint64_t v28 = (uint64_t)&v27[v20 + ~v18];
        if ((_DWORD *)v28 != v27)
        {
          int v29 = *(_DWORD *)(*a2 + 4 * v25);
          int v30 = *(_DWORD *)(a1 + 60);
          unsigned int v31 = v29 << v30;
          do
          {
            unint64_t v32 = (v28 - (uint64_t)v27) >> 2;
            int v33 = v27;
            do
            {
              unint64_t v34 = v32 >> 1;
              int v35 = &v33[v32 >> 1];
              unsigned int v37 = *v35;
              unint64_t v36 = v35 + 1;
              v32 += ~(v32 >> 1);
              if (v37 < v31) {
                int v33 = v36;
              }
              else {
                unint64_t v32 = v34;
              }
            }
            while (v32);
            if (v33 == (_DWORD *)v28 || *v33 >> v30 != v29) {
              break;
            }
            unint64_t v15 = &v33[v24] - v27;
            unint64_t v38 = fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), v15);
            if (v38)
            {
              uint64_t v39 = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(a1 + 216), v38);
              uint64_t v41 = v40;
            }
            else
            {
              uint64_t v39 = *(void *)(a1 + 128);
              uint64_t v41 = *(void *)(a1 + 136);
            }
            uint64_t v24 = v39 + 1;
            if (((*(void *)(*v16 + (((unint64_t)(v39 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v39 + 1)) & 1) == 0) {
              break;
            }
            if (v25 <= 0) {
              break;
            }
            --v25;
            uint64_t v42 = *(void *)(a1 + 176);
            uint64_t v27 = (_DWORD *)(v42 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), v39 + 1));
            uint64_t v28 = (uint64_t)&v27[v41 + ~v39];
            int v29 = *(_DWORD *)(*a2 + 4 * v25);
            int v30 = *(_DWORD *)(a1 + 60);
            unsigned int v31 = v29 << v30;
          }
          while ((_DWORD *)v28 != v27);
        }
      }
    }
    int v21 = (fst::BitmapIndex *)(a1 + 216);
    unint64_t v22 = v15;
  }
  return fst::BitmapIndex::Rank1(v21, v22);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFstMatcher(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_1F0A3C2B0;
  *(void *)(a1 + 8) = a2;
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v7 = *(_OWORD *)(a2 + 32);
  int v8 = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  uint64_t v9 = a1 + 56;
  *(_DWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  *(_DWORD *)(v9 + ++*(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(v9 + 32) = a3;
  *(unsigned char *)(v9 + 56) = 0;
  *(_OWORD *)(v9 + 60) = xmmword_1B25616E0;
  if (a3 == 1) {
    *(void *)(a1 + 116) = 0xFFFFFFFF00000000;
  }
  return a1;
}

void *fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::~NGramFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3C2B0;
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  return a1;
}

void fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::~NGramFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3C2B0;
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Copy()
{
}

void sub_1B20CF2EC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C40F1851BD1);
  _Unwind_Resume(a1);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Type(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Properties(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::SetState_(uint64_t a1, int a2)
{
  uint64_t result = fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(*(void *)(*(void *)(a1 + 8) + 8), a2, a1 + 16);
  *(unsigned char *)(a1 + ++*(void *)(result + 112) = 0;
  return result;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Find_(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 92) = 1;
  if ((a2 + 1) > 1)
  {
    *(unsigned char *)(a1 + ++*(void *)(result + 112) = 0;
    unint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = *(void *)(v6 + 8);
      int v8 = (int *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(v7 + 184) + 4 * v9;
      unint64_t v11 = (_DWORD *)(v10 + 4 * v5);
      int v12 = *(_DWORD *)(v7 + 60);
      uint64_t v13 = (_DWORD *)v10;
      do
      {
        unint64_t v14 = v5 >> 1;
        unint64_t v15 = &v13[v5 >> 1];
        unsigned int v17 = *v15;
        unint64_t v16 = v15 + 1;
        v5 += ~(v5 >> 1);
        if (v17 < a2 << v12) {
          uint64_t v13 = v16;
        }
        else {
          unint64_t v5 = v14;
        }
      }
      while (v5);
      if (v13 != v11 && *v13 >> v12 == a2)
      {
        *(_DWORD *)(a1 + 96) = a2;
        *(_DWORD *)(a1 + 100) = a2;
        unsigned int v18 = *(_DWORD *)(*(void *)(v7 + 200) + 4 * (v9 + (((unint64_t)v13 - v10) >> 2)));
        float v19 = (float)((*(_DWORD *)(v7 + 64) & v18) >> 1);
        if (v18) {
          float v19 = -v19;
        }
        *(float *)(a1 + 104) = *(float *)(v7 + 72) * v19;
        fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::SetInstContext(*(void *)(v6 + 8), v8);
        *(_DWORD *)(a1 + 108) = fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Transition(*(void *)(*(void *)(a1 + 8) + 8), (void *)(a1 + 56), a2);
        goto LABEL_23;
      }
    }
  }
  else
  {
    if (a2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      if (!v4) {
        return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1) ^ 1;
      }
      goto LABEL_17;
    }
    *(unsigned char *)(a1 + ++*(void *)(result + 112) = 1;
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 128) = v4;
    if (v4)
    {
LABEL_17:
      *(void *)(a1 + 96) = 0;
      if (*(_DWORD *)(a1 + 48) == v4)
      {
        unint64_t v20 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v21 = *(void *)(*(void *)(a1 + 8) + 8);
        *(_DWORD *)(a1 + 48) = v4;
        unint64_t v20 = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v21 + 216), v4);
        *(void *)(a1 + 40) = v20;
      }
      unint64_t v22 = (fst::BitmapIndex *)(*(void *)(*(void *)(a1 + 8) + 8) + 216);
      uint64_t v23 = fst::BitmapIndex::Rank1(v22, v20);
      unint64_t v24 = fst::BitmapIndex::Select1(v22, v20 + ~v23);
      *(_DWORD *)(a1 + 108) = fst::BitmapIndex::Rank1(v22, v24);
      uint64_t v25 = *(void *)(*(void *)(a1 + 8) + 8);
      unsigned int v26 = *(_DWORD *)(*(void *)(v25 + 192) + 4 * *(int *)(a1 + 16));
      float v27 = (float)((*(_DWORD *)(v25 + 64) & v26) >> 1);
      if (v26) {
        float v27 = -v27;
      }
      *(float *)(a1 + 104) = *(float *)(v25 + 72) * v27;
LABEL_23:
      *(unsigned char *)(a1 + 92) = 0;
    }
  }
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1) ^ 1;
}

BOOL fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Done_(uint64_t a1)
{
  return !*(unsigned char *)(a1 + 112) && *(unsigned char *)(a1 + 92) != 0;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112)) {
    return a1 + 116;
  }
  else {
    return a1 + 96;
  }
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 112)) {
    *(unsigned char *)(result + ++*(void *)(result + 112) = 0;
  }
  else {
    *(unsigned char *)(result + 92) = 1;
  }
  return result;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFstMatcher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A3C2B0;
  *(void *)(a1 + 8) = v4;
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  uint64_t v7 = a1 + 56;
  *(_DWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  *(_DWORD *)(v7 + ++*(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 80);
  int v8 = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(v7 + 32) = v8;
  *(unsigned char *)(v7 + 56) = 0;
  *(_OWORD *)(v7 + 60) = xmmword_1B25616E0;
  if (v8 == 1) {
    *(void *)(a1 + 116) = 0xFFFFFFFF00000000;
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>()
{
  uint64_t v0 = operator new(0x28uLL);
  std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>,0>(v0);
}

void sub_1B20CF6EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E030;
  fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ReducedFst();
}

void sub_1B20CF748(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ReducedFst()
{
}

void sub_1B20CF868(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C4097CFB54CLL);
  _Unwind_Resume(a1);
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~ReducedFst(void *a1)
{
  fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 96);
}

float fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return *(float *)(*(void *)(*(void *)(a1 + 8) + 72) + a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 72) + a2 + 4);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 72);
  uint64_t v3 = *(unsigned int *)(v2 + a2 + 4);
  if ((int)v3 <= 0) {
    return 0;
  }
  uint64_t result = 0;
  long long v5 = (int *)(a2 + v2 + 8);
  do
  {
    int v6 = *v5;
    v5 += 4;
    if (!v6) {
      ++result;
    }
    --v3;
  }
  while (v3);
  return result;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 72);
  uint64_t v3 = *(unsigned int *)(v2 + a2 + 4);
  if ((int)v3 <= 0) {
    return 0;
  }
  uint64_t result = 0;
  long long v5 = (int *)(a2 + v2 + 12);
  do
  {
    int v6 = *v5;
    v5 += 4;
    if (!v6) {
      ++result;
    }
    --v3;
  }
  while (v3);
  return result;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Copy()
{
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::InitStateIterator()
{
}

uint64_t fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 8) + 72) + a2;
  *a3 = 0;
  a3[1] = v3 + 8;
  a3[2] = *(unsigned int *)(v3 + 4);
  a3[3] = 0;
  return result;
}

BOOL fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::IsMemoryMapped(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 80);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ReducedFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3BAB0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString((std::string *)__str);
  std::string::operator=(v4, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v5);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v6);
  memset(__str, 0, sizeof(__str));
  int v10 = 1065353216;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (void *)(a1 + 88), (int *)(a1 + 80), __str, (_DWORD *)(a1 + 112), (_DWORD *)(a1 + 108), (_DWORD *)(a1 + 104), (_DWORD *)(a1 + 100));
  LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  uint64_t v7 = &v8;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, (int *)&v8, (uint64_t)&std::piecewise_construct, (_DWORD **)&v7)+ 5);
  fst::MappedFile::Allocate((fst::MappedFile *)(8 * *(int *)(a1 + 80) + 16 * *(void *)(a1 + 88)), 16);
}

void sub_1B20D010C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&__p);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v24);
  _Unwind_Resume(a1);
}

std::string *fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString@<X0>(std::string *a1@<X8>)
{
  return std::string::append(a1, "_transducer");
}

void sub_1B20D0228(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, void *a2, int *a3, void *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  signed int v36 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v34);
  signed int v13 = 0;
  uint64_t v14 = 0;
  while (1)
  {
    if (!v34)
    {
      if (v36 >= v35) {
        goto LABEL_39;
      }
LABEL_7:
      unsigned int v15 = v36;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v34 + 16))(v34)) {
      break;
    }
    unsigned int v33 = 0;
    if (!v34) {
      goto LABEL_7;
    }
    unsigned int v15 = (*(uint64_t (**)(void))(*(void *)v34 + 24))();
LABEL_8:
    unsigned int v33 = v15;
    if (v15 == -1) {
      goto LABEL_34;
    }
    ++*a3;
    long long __p = &v33;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v33, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v14;
    unint64_t v32 = 0;
    (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 136))(a1, v33, &__p);
    uint64_t v16 = 0;
    uint64_t v17 = v14 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v32 >= v30) {
          goto LABEL_31;
        }
        ++v16;
LABEL_24:
        if (*(_DWORD *)(v29 + 16 * v32) > v13) {
          signed int v13 = *(_DWORD *)(v29 + 16 * v32);
        }
        goto LABEL_26;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      ++v16;
      if (!__p) {
        goto LABEL_24;
      }
      (*(void (**)(void))(*(void *)__p + 32))();
      if (!__p) {
        goto LABEL_24;
      }
      (*(void (**)(void *))(*(void *)__p + 32))(__p);
      if (!__p) {
        goto LABEL_24;
      }
      signed int v18 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)__p + 32))(__p);
      if (v18 > v13) {
        signed int v13 = v18;
      }
      if (__p)
      {
        signed int v19 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)__p + 32))() + 4);
        if (v19 > v13) {
          signed int v13 = v19;
        }
        if (!__p) {
          goto LABEL_28;
        }
        (*(void (**)(void))(*(void *)__p + 40))();
      }
      else
      {
LABEL_26:
        if (*(_DWORD *)(v29 + 16 * v32 + 4) > v13) {
          signed int v13 = *(_DWORD *)(v29 + 16 * v32 + 4);
        }
LABEL_28:
        ++v32;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
      goto LABEL_33;
    }
LABEL_31:
    if (v31) {
      --*v31;
    }
LABEL_33:
    *a2 += v16;
    uint64_t v14 = v17 + 16 * v16;
LABEL_34:
    if (v34) {
      (*(void (**)(uint64_t))(*(void *)v34 + 32))(v34);
    }
    else {
      ++v36;
    }
  }
  if (v34) {
    (*(void (**)(void))(*(void *)v34 + 8))();
  }
LABEL_39:
  if ((unint64_t)(8 * *a3 + 16 * *a2) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    unint64_t v20 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    uint64_t v21 = (void *)fst::cerr(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(v30) < 0) {
      operator delete(__p);
    }
  }
  unsigned int v22 = __clz(v13);
  if (v13 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    uint64_t v23 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    uint64_t v24 = (void *)fst::cerr(v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(v30) < 0) {
      operator delete(__p);
    }
  }
  *a6 = v22 - 1;
  *a7 = 1065353216;
  *a8 = 1065353216;
  *a5 = 2 * ~(-1 << (v22 - 1));
}

void sub_1B20D0724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~ReducedFstImpl(void *a1)
{
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~ReducedFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::HasSequentialStates()
{
  return 0;
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~ReducedFstImpl(void *a1)
{
  *a1 = &unk_1F0A3BAB0;
  uint64_t v2 = a1[8];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void *fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A43648;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::WriteFst<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>(void *a1, void *a2, unsigned char *a3)
{
  int v6 = a3[27];
  uint64_t v49 = 0;
  int v48 = 0;
  if (v6) {
    int v7 = 3;
  }
  else {
    int v7 = 4;
  }
  memset(v46, 0, sizeof(v46));
  int v47 = 1065353216;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>(a1, &v49, &v48, v46, (_DWORD *)&v45 + 1, &v45, (_DWORD *)&v44 + 1, &v44);
  long long v40 = 0u;
  long long v39 = 0u;
  long long v38 = 0u;
  long long v37 = 0u;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v41 = -1;
  LODWORD(v2quasar::readMatrixFile((uint64_t)&this[6], this + 9) = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  v25[0] = &v29;
  uint64_t v41 = *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v46, (int *)&v29, (uint64_t)&std::piecewise_construct, (_DWORD **)v25)+ 5);
  uint64_t v42 = v48;
  uint64_t v43 = v49;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString(&__str);
  uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x3FFFFFFF0004, 1);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, a3, v7, &__str, v8 | 1, (uint64_t)v36);
  LODWORD(v25[0]) = HIDWORD(v44);
  std::ostream::write();
  LODWORD(v25[0]) = v44;
  std::ostream::write();
  LODWORD(v25[0]) = v45;
  std::ostream::write();
  LODWORD(v25[0]) = HIDWORD(v45);
  std::ostream::write();
  if (!a3[27] || fst::AlignOutput(a2))
  {
    float v33 = INFINITY;
    uint64_t v29 = &unk_1F0A39608;
    int v30 = 0;
    uint64_t v9 = a1[1];
    unint64_t v10 = 8 * *(int *)(v9 + 80) + 16 * *(void *)(v9 + 88);
    uint64_t v31 = v9;
    unint64_t v32 = v10;
    if (!v10) {
      goto LABEL_33;
    }
    uint64_t v11 = 0;
    while (1)
    {
      if (v11 == -1)
      {
        int v17 = -1;
        goto LABEL_32;
      }
      float v33 = (*(float (**)(void *, uint64_t))(*a1 + 32))(a1, v11);
      int v34 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v11);
      std::ostream::write();
      unint64_t v28 = 0;
      (*(void (**)(void *, uint64_t, void **))(*a1 + 136))(a1, v11, v25);
      while (1)
      {
        if (!v25[0])
        {
          if (v28 >= v26) {
            goto LABEL_28;
          }
          goto LABEL_15;
        }
        if ((*(unsigned int (**)(void *))(*(void *)v25[0] + 24))(v25[0])) {
          break;
        }
        if (v25[0])
        {
          int v12 = (long long *)(*(uint64_t (**)(void))(*(void *)v25[0] + 32))();
          goto LABEL_16;
        }
LABEL_15:
        int v12 = (long long *)((char *)v25[1] + 16 * v28);
LABEL_16:
        long long v24 = *v12;
        if (HIDWORD(v24) != -1)
        {
          if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v46, (int *)&v24 + 3))
          {
            __p[0] = (char *)&v24 + 12;
            int v13 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v46, (int *)&v24 + 3, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)+ 5);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
            uint64_t v14 = fst::LogMessage::LogMessage((fst *)&v50, (uint64_t)__p);
            unsigned int v15 = (void *)fst::cerr(v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"State ", 6);
            uint64_t v16 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" missing in new FST!", 20);
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v50);
            if (v23 < 0) {
              operator delete(__p[0]);
            }
            int v13 = -1;
          }
          HIDWORD(v++*(_DWORD *)(result + 24) = v13;
        }
        *(_OWORD *)long long __p = v24;
        std::ostream::write();
        if (v25[0]) {
          (*(void (**)(void *))(*(void *)v25[0] + 40))(v25[0]);
        }
        else {
          ++v28;
        }
      }
      if (v25[0])
      {
        (*(void (**)(void))(*(void *)v25[0] + 8))();
        goto LABEL_30;
      }
LABEL_28:
      if (v27) {
        --*v27;
      }
LABEL_30:
      int v17 = v30;
      uint64_t v9 = v31;
      unint64_t v10 = v32;
LABEL_32:
      uint64_t v11 = (v17 + 16 * *(_DWORD *)(*(void *)(v9 + 72) + v17 + 4) + 8);
      int v30 = v11;
      if (v10 <= (int)v11)
      {
LABEL_33:
        uint64_t v18 = 1;
        goto LABEL_37;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v25, "ERROR");
  signed int v19 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)v25);
  unint64_t v20 = (void *)fst::cerr(v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Could not align file during write after header", 46);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  uint64_t v18 = 0;
LABEL_37:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete(*((void **)&v38 + 1));
  }
  if (SBYTE7(v38) < 0) {
    operator delete((void *)v37);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v46);
  return v18;
}

void sub_1B20D0EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  fst::FstHeader::~FstHeader(&a38);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v38 - 144);
  _Unwind_Resume(a1);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>(void *a1, void *a2, int *a3, void *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  signed int v36 = &unk_1F0A39608;
  int v37 = 0;
  uint64_t v13 = a1[1];
  unint64_t v14 = 8 * *(int *)(v13 + 80) + 16 * *(void *)(v13 + 88);
  uint64_t v38 = v13;
  unint64_t v39 = v14;
  if (!v14)
  {
    signed int v16 = 0;
    goto LABEL_32;
  }
  uint64_t v15 = 0;
  signed int v16 = 0;
  for (i = 0; i < v14; int v37 = i)
  {
    unsigned int v35 = i;
    if (i == -1) {
      goto LABEL_29;
    }
    ++*a3;
    long long __p = &v35;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v35, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v15;
    unint64_t v34 = 0;
    (*(void (**)(void *, void, void **))(*a1 + 136))(a1, v35, &__p);
    uint64_t v18 = 0;
    uint64_t v19 = v15 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v34 >= v32) {
          goto LABEL_26;
        }
        ++v18;
LABEL_19:
        if (*(_DWORD *)(v31 + 16 * v34) > v16) {
          signed int v16 = *(_DWORD *)(v31 + 16 * v34);
        }
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      ++v18;
      if (!__p) {
        goto LABEL_19;
      }
      (*(void (**)(void))(*(void *)__p + 32))();
      if (!__p) {
        goto LABEL_19;
      }
      (*(void (**)(void *))(*(void *)__p + 32))(__p);
      if (!__p) {
        goto LABEL_19;
      }
      signed int v20 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)__p + 32))(__p);
      if (v20 > v16) {
        signed int v16 = v20;
      }
      if (__p)
      {
        signed int v21 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)__p + 32))() + 4);
        if (v21 > v16) {
          signed int v16 = v21;
        }
        if (!__p) {
          goto LABEL_23;
        }
        (*(void (**)(void))(*(void *)__p + 40))();
      }
      else
      {
LABEL_21:
        if (*(_DWORD *)(v31 + 16 * v34 + 4) > v16) {
          signed int v16 = *(_DWORD *)(v31 + 16 * v34 + 4);
        }
LABEL_23:
        ++v34;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
      goto LABEL_28;
    }
LABEL_26:
    if (v33) {
      --*v33;
    }
LABEL_28:
    *a2 += v18;
    uint64_t v15 = v19 + 16 * v18;
    int i = v37;
    uint64_t v13 = v38;
    unint64_t v14 = v39;
LABEL_29:
    i += 16 * *(_DWORD *)(*(void *)(v13 + 72) + i + 4) + 8;
  }
LABEL_32:
  if ((unint64_t)(8 * *a3 + 16 * *a2) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    unsigned int v22 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)&__p);
    char v23 = (void *)fst::cerr(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
  }
  unsigned int v24 = __clz(v16);
  if (v16 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    uint64_t v25 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)&__p);
    unint64_t v26 = (void *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
  }
  *a6 = v24 - 1;
  *a7 = 1065353216;
  *a8 = 1065353216;
  *a5 = 2 * ~(-1 << (v24 - 1));
}

void sub_1B20D13F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::~StateIterator()
{
}

BOOL fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) <= (unint64_t)*(int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::Next_(uint64_t result)
{
  *(_DWORD *)(result + 8) += 16 * *(_DWORD *)(*(void *)(*(void *)(result + 16) + 72) + *(int *)(result + 8) + 4)
                           + 8;
  return result;
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

void std::allocate_shared[abi:ne180100]<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>()
{
  uint64_t v0 = operator new(0x28uLL);
  std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,0>(v0);
}

void sub_1B20D152C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E0A0;
  fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ReducedFst();
}

void sub_1B20D1588(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E0A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E0A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ReducedFst()
{
}

void sub_1B20D16A8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C4097CFB54CLL);
  _Unwind_Resume(a1);
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~ReducedFst(void *a1)
{
  fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 96);
}

float fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return *(float *)(*(void *)(*(void *)(a1 + 8) + 72) + a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 72) + a2 + 4);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 72);
  uint64_t v3 = *(unsigned int *)(v2 + a2 + 4);
  if ((int)v3 <= 0) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = (int *)(a2 + v2 + 12);
  do
  {
    int v6 = *v5;
    v5 += 3;
    if (!v6) {
      ++result;
    }
    --v3;
  }
  while (v3);
  return result;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 72);
  uint64_t v3 = *(unsigned int *)(v2 + a2 + 4);
  if ((int)v3 <= 0) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = (int *)(a2 + v2 + 12);
  do
  {
    int v6 = *v5;
    v5 += 3;
    if (!v6) {
      ++result;
    }
    --v3;
  }
  while (v3);
  return result;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Copy()
{
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::InitStateIterator()
{
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::InitArcIterator()
{
}

BOOL fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::IsMemoryMapped(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 80);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ReducedFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3BB20;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString((std::string *)__str);
  std::string::operator=(v4, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v5);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v6);
  memset(__str, 0, sizeof(__str));
  int v10 = 1065353216;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (void *)(a1 + 88), (int *)(a1 + 80), __str, (_DWORD *)(a1 + 112), (_DWORD *)(a1 + 108), (_DWORD *)(a1 + 104), (_DWORD *)(a1 + 100));
  LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  int v7 = &v8;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, (int *)&v8, (uint64_t)&std::piecewise_construct, (_DWORD **)&v7)+ 5);
  fst::MappedFile::Allocate((fst::MappedFile *)(12 * *(void *)(a1 + 88) + 8 * *(int *)(a1 + 80)), 16);
}

void sub_1B20D1F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&__p);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v24);
  _Unwind_Resume(a1);
}

std::string *fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString@<X0>(std::string *a1@<X8>)
{
  return std::string::append(a1, "_acceptor");
}

void sub_1B20D2064(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, void *a2, int *a3, void *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  signed int v36 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v34);
  signed int v12 = 0;
  uint64_t v13 = 0;
  while (1)
  {
    if (!v34)
    {
      if (v36 >= v35) {
        goto LABEL_39;
      }
LABEL_7:
      unsigned int v14 = v36;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v34 + 16))(v34)) {
      break;
    }
    unsigned int v33 = 0;
    if (!v34) {
      goto LABEL_7;
    }
    unsigned int v14 = (*(uint64_t (**)(void))(*(void *)v34 + 24))();
LABEL_8:
    unsigned int v33 = v14;
    if (v14 == -1) {
      goto LABEL_34;
    }
    ++*a3;
    long long __p = &v33;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v33, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v13;
    unint64_t v32 = 0;
    (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 136))(a1, v33, &__p);
    uint64_t v15 = 0;
    uint64_t v16 = v13 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v32 >= v30) {
          goto LABEL_31;
        }
        ++v15;
LABEL_24:
        if (*(_DWORD *)(v29 + 16 * v32) > v12) {
          signed int v12 = *(_DWORD *)(v29 + 16 * v32);
        }
        goto LABEL_26;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      ++v15;
      if (!__p) {
        goto LABEL_24;
      }
      (*(void (**)(void))(*(void *)__p + 32))();
      if (!__p) {
        goto LABEL_24;
      }
      (*(void (**)(void *))(*(void *)__p + 32))(__p);
      if (!__p) {
        goto LABEL_24;
      }
      signed int v17 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)__p + 32))(__p);
      if (v17 > v12) {
        signed int v12 = v17;
      }
      if (__p)
      {
        signed int v18 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)__p + 32))() + 4);
        if (v18 > v12) {
          signed int v12 = v18;
        }
        if (!__p) {
          goto LABEL_28;
        }
        (*(void (**)(void))(*(void *)__p + 40))();
      }
      else
      {
LABEL_26:
        if (*(_DWORD *)(v29 + 16 * v32 + 4) > v12) {
          signed int v12 = *(_DWORD *)(v29 + 16 * v32 + 4);
        }
LABEL_28:
        ++v32;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
      goto LABEL_33;
    }
LABEL_31:
    if (v31) {
      --*v31;
    }
LABEL_33:
    *a2 += v15;
    uint64_t v13 = v16 + 12 * v15;
LABEL_34:
    if (v34) {
      (*(void (**)(uint64_t))(*(void *)v34 + 32))(v34);
    }
    else {
      ++v36;
    }
  }
  if (v34) {
    (*(void (**)(void))(*(void *)v34 + 8))();
  }
LABEL_39:
  if ((unint64_t)(12 * *a2 + 8 * *a3) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    uint64_t v19 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    signed int v20 = (void *)fst::cerr(v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(v30) < 0) {
      operator delete(__p);
    }
  }
  unsigned int v21 = __clz(v12);
  if (v12 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    unsigned int v22 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    char v23 = (void *)fst::cerr(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(v30) < 0) {
      operator delete(__p);
    }
  }
  *a6 = v21 - 1;
  *a7 = 1065353216;
  *a8 = 1065353216;
  *a5 = 2 * ~(-1 << (v21 - 1));
}

void sub_1B20D2568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~ReducedFstImpl(void *a1)
{
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~ReducedFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::HasSequentialStates()
{
  return 0;
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~ReducedFstImpl(void *a1)
{
  *a1 = &unk_1F0A3BB20;
  uint64_t v2 = a1[8];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void *fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A437B8;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::WriteFst<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>(void *a1, void *a2, unsigned char *a3)
{
  int v6 = a3[27];
  uint64_t v50 = 0;
  int v49 = 0;
  if (v6) {
    int v7 = 3;
  }
  else {
    int v7 = 4;
  }
  memset(v47, 0, sizeof(v47));
  int v48 = 1065353216;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>(a1, &v50, &v49, v47, (_DWORD *)&v46 + 1, &v46, (_DWORD *)&v45 + 1, &v45);
  long long v41 = 0u;
  long long v40 = 0u;
  long long v39 = 0u;
  long long v38 = 0u;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = -1;
  LODWORD(v30) = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  v26[0] = &v30;
  uint64_t v42 = *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v47, (int *)&v30, (uint64_t)&std::piecewise_construct, (_DWORD **)v26)+ 5);
  uint64_t v43 = v49;
  uint64_t v44 = v50;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString(&__str);
  uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x3FFFFFFF0004, 1);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, a3, v7, &__str, v8 | 1, (uint64_t)v37);
  LODWORD(v26[0]) = HIDWORD(v45);
  std::ostream::write();
  LODWORD(v26[0]) = v45;
  std::ostream::write();
  LODWORD(v26[0]) = v46;
  std::ostream::write();
  LODWORD(v26[0]) = HIDWORD(v46);
  std::ostream::write();
  if (!a3[27] || fst::AlignOutput(a2))
  {
    float v34 = INFINITY;
    unint64_t v30 = &unk_1F0A39688;
    int v31 = 0;
    uint64_t v9 = a1[1];
    unint64_t v10 = 12 * *(void *)(v9 + 88) + 8 * *(int *)(v9 + 80);
    uint64_t v32 = v9;
    unint64_t v33 = v10;
    if (!v10) {
      goto LABEL_33;
    }
    uint64_t v11 = 0;
    while (1)
    {
      if (v11 == -1)
      {
        int v17 = -1;
        goto LABEL_32;
      }
      float v34 = (*(float (**)(void *, uint64_t))(*a1 + 32))(a1, v11);
      int v35 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v11);
      std::ostream::write();
      unint64_t v29 = 0;
      (*(void (**)(void *, uint64_t, void **))(*a1 + 136))(a1, v11, v26);
      while (1)
      {
        if (!v26[0])
        {
          if (v29 >= v27) {
            goto LABEL_28;
          }
          goto LABEL_15;
        }
        if ((*(unsigned int (**)(void *))(*(void *)v26[0] + 24))(v26[0])) {
          break;
        }
        if (v26[0])
        {
          signed int v12 = (long long *)(*(uint64_t (**)(void))(*(void *)v26[0] + 32))();
          goto LABEL_16;
        }
LABEL_15:
        signed int v12 = (long long *)((char *)v26[1] + 16 * v29);
LABEL_16:
        long long v25 = *v12;
        int v13 = HIDWORD(v25);
        if (HIDWORD(v25) != -1)
        {
          if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v47, (int *)&v25 + 3))
          {
            long long __p = (char *)&v25 + 12;
            int v13 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v47, (int *)&v25 + 3, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
            unsigned int v14 = fst::LogMessage::LogMessage((fst *)&v51, (uint64_t)&__p);
            uint64_t v15 = (void *)fst::cerr(v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"State ", 6);
            uint64_t v16 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" missing in new FST!", 20);
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v51);
            if (v24 < 0) {
              operator delete(__p);
            }
            int v13 = -1;
          }
          HIDWORD(v25) = v13;
        }
        long long __p = (void *)__PAIR64__(v25, DWORD2(v25));
        int v23 = v13;
        std::ostream::write();
        if (v26[0]) {
          (*(void (**)(void *))(*(void *)v26[0] + 40))(v26[0]);
        }
        else {
          ++v29;
        }
      }
      if (v26[0])
      {
        (*(void (**)(void))(*(void *)v26[0] + 8))();
        goto LABEL_30;
      }
LABEL_28:
      if (v28) {
        --*v28;
      }
LABEL_30:
      int v17 = v31;
      uint64_t v9 = v32;
      unint64_t v10 = v33;
LABEL_32:
      uint64_t v11 = (v17 + 12 * *(_DWORD *)(*(void *)(v9 + 72) + v17 + 4) + 8);
      int v31 = v11;
      if (v10 <= (int)v11)
      {
LABEL_33:
        uint64_t v18 = 1;
        goto LABEL_37;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v26, "ERROR");
  uint64_t v19 = fst::LogMessage::LogMessage((fst *)&v30, (uint64_t)v26);
  signed int v20 = (void *)fst::cerr(v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Could not align file during write after header", 46);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v30);
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  uint64_t v18 = 0;
LABEL_37:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(*((void **)&v39 + 1));
  }
  if (SBYTE7(v39) < 0) {
    operator delete((void *)v38);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v47);
  return v18;
}

void sub_1B20D2D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  fst::FstHeader::~FstHeader(&a38);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v38 - 144);
  _Unwind_Resume(a1);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>(void *a1, void *a2, int *a3, void *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  signed int v36 = &unk_1F0A39688;
  int v37 = 0;
  uint64_t v12 = a1[1];
  unint64_t v13 = 12 * *(void *)(v12 + 88) + 8 * *(int *)(v12 + 80);
  uint64_t v38 = v12;
  unint64_t v39 = v13;
  if (!v13)
  {
    signed int v15 = 0;
    goto LABEL_32;
  }
  uint64_t v14 = 0;
  signed int v15 = 0;
  for (i = 0; i < v13; int v37 = i)
  {
    unsigned int v35 = i;
    if (i == -1) {
      goto LABEL_29;
    }
    ++*a3;
    long long __p = &v35;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v35, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v14;
    unint64_t v34 = 0;
    (*(void (**)(void *, void, void **))(*a1 + 136))(a1, v35, &__p);
    uint64_t v17 = 0;
    uint64_t v18 = v14 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v34 >= v32) {
          goto LABEL_26;
        }
        ++v17;
LABEL_19:
        if (*(_DWORD *)(v31 + 16 * v34) > v15) {
          signed int v15 = *(_DWORD *)(v31 + 16 * v34);
        }
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      ++v17;
      if (!__p) {
        goto LABEL_19;
      }
      (*(void (**)(void))(*(void *)__p + 32))();
      if (!__p) {
        goto LABEL_19;
      }
      (*(void (**)(void *))(*(void *)__p + 32))(__p);
      if (!__p) {
        goto LABEL_19;
      }
      signed int v19 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)__p + 32))(__p);
      if (v19 > v15) {
        signed int v15 = v19;
      }
      if (__p)
      {
        signed int v20 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)__p + 32))() + 4);
        if (v20 > v15) {
          signed int v15 = v20;
        }
        if (!__p) {
          goto LABEL_23;
        }
        (*(void (**)(void))(*(void *)__p + 40))();
      }
      else
      {
LABEL_21:
        if (*(_DWORD *)(v31 + 16 * v34 + 4) > v15) {
          signed int v15 = *(_DWORD *)(v31 + 16 * v34 + 4);
        }
LABEL_23:
        ++v34;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
      goto LABEL_28;
    }
LABEL_26:
    if (v33) {
      --*v33;
    }
LABEL_28:
    *a2 += v17;
    uint64_t v14 = v18 + 12 * v17;
    int i = v37;
    uint64_t v12 = v38;
    unint64_t v13 = v39;
LABEL_29:
    i += 12 * *(_DWORD *)(*(void *)(v12 + 72) + i + 4) + 8;
  }
LABEL_32:
  if ((unint64_t)(12 * *a2 + 8 * *a3) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    unsigned int v21 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)&__p);
    unsigned int v22 = (void *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
  }
  unsigned int v23 = __clz(v15);
  if (v15 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    char v24 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)&__p);
    long long v25 = (void *)fst::cerr(v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
  }
  *a6 = v23 - 1;
  *a7 = 1065353216;
  *a8 = 1065353216;
  *a5 = 2 * ~(-1 << (v23 - 1));
}

void sub_1B20D3248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~StateIterator()
{
}

BOOL fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) <= (unint64_t)*(int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Next_(uint64_t result)
{
  *(_DWORD *)(result + 8) += 12 * *(_DWORD *)(*(void *)(*(void *)(result + 16) + 72) + *(int *)(result + 8) + 4)
                           + 8;
  return result;
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::InitArcIterator()
{
}

void sub_1B20D33CC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C402B94B19BLL);
  _Unwind_Resume(a1);
}

void *fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(void *result)
{
  unint64_t v1 = result[4];
  if (v1 < result[3])
  {
    uint64_t v2 = (unsigned int *)(result[2] + 12 * v1);
    unint64_t v3 = v2[1] | ((unint64_t)v2[1] << 32);
    unint64_t v4 = *v2 | ((unint64_t)v2[2] << 32);
    result[5] = v3;
    result[6] = v4;
  }
  return result;
}

void fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~ArcIterator()
{
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Reinit(void *a1, int a2)
{
  uint64_t v2 = *(void *)(a1[1] + 72) + a2;
  uint64_t v3 = v2 + 8;
  uint64_t v4 = *(unsigned int *)(v2 + 4);
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = 0;
  fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(a1);
  return 1;
}

BOOL fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 32) >= *(void *)(a1 + 24);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Value_(uint64_t a1)
{
  return a1 + 40;
}

void *fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Next_(void *result)
{
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(result);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void *fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Reset_(void *result)
{
  result[4] = 0;
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(result);
}

void *fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Seek_(void *result, uint64_t a2)
{
  result[4] = a2;
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(result);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Flags_()
{
  return 15;
}

void std::allocate_shared[abi:ne180100]<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>()
{
  uint64_t v0 = operator new(0x28uLL);
  std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,0>(v0);
}

void sub_1B20D3504(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E068;
  fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ReducedFst();
}

void sub_1B20D3560(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ReducedFst()
{
}

void sub_1B20D3680(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40D5640F62);
  _Unwind_Resume(a1);
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~ReducedFst(void *a1)
{
  fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 96);
}

float fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return *(float *)(*(void *)(*(void *)(a1 + 8) + 72) + a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 72) + a2 + 4);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Copy()
{
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::InitStateIterator()
{
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::InitArcIterator()
{
}

BOOL fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::IsMemoryMapped(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 80);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ReducedFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3BAE8;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::TypeString((std::string *)__str);
  std::string::operator=(v4, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v5);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v6);
  memset(__str, 0, sizeof(__str));
  int v11 = 1065353216;
  float v7 = fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (void *)(a1 + 88), (int *)(a1 + 80), __str, (void *)(a1 + 120), (void *)(a1 + 112), (float *)(a1 + 104), (float *)(a1 + 100));
  LODWORD(vquasar::readMatrixFile((uint64_t)&this[6], this + 9) = (*(uint64_t (**)(uint64_t, float))(*(void *)a2 + 24))(a2, v7);
  uint64_t v8 = &v9;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, (int *)&v9, (uint64_t)&std::piecewise_construct, (_DWORD **)&v8)+ 5);
  fst::MappedFile::Allocate((fst::MappedFile *)(12 * *(void *)(a1 + 88) + 8 * *(int *)(a1 + 80)), 16);
}

void sub_1B20D3F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&__p);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v24);
  _Unwind_Resume(a1);
}

std::string *fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::TypeString@<X0>(std::string *a1@<X8>)
{
  return std::string::append(a1, "_transducer");
}

void sub_1B20D4038(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

float fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, void *a2, int *a3, void *a4, void *a5, void *a6, float *a7, float *a8)
{
  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  signed int v46 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v44);
  signed int v12 = 0;
  uint64_t v13 = 0;
  float v14 = -INFINITY;
  float v15 = INFINITY;
  while (1)
  {
    if (!v44)
    {
      if (v46 >= v45) {
        goto LABEL_47;
      }
LABEL_7:
      unsigned int v16 = v46;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v44 + 16))(v44)) {
      break;
    }
    unsigned int v43 = 0;
    if (!v44) {
      goto LABEL_7;
    }
    unsigned int v16 = (*(uint64_t (**)(void))(*(void *)v44 + 24))();
LABEL_8:
    unsigned int v43 = v16;
    if (v16 == -1) {
      goto LABEL_42;
    }
    ++*a3;
    long long __p = &v43;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v43, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v13;
    unint64_t v42 = 0;
    (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 136))(a1, v43, &__p);
    uint64_t v17 = 0;
    uint64_t v18 = v13 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v42 >= v40) {
          goto LABEL_39;
        }
        ++v17;
LABEL_28:
        if (*(float *)(v39 + 16 * v42 + 8) >= v14) {
          float v14 = *(float *)(v39 + 16 * v42 + 8);
        }
LABEL_30:
        if (v15 >= *(float *)(v39 + 16 * v42 + 8)) {
          float v15 = *(float *)(v39 + 16 * v42 + 8);
        }
LABEL_32:
        if (*(_DWORD *)(v39 + 16 * v42) > v12) {
          signed int v12 = *(_DWORD *)(v39 + 16 * v42);
        }
        goto LABEL_34;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      ++v17;
      if (!__p) {
        goto LABEL_28;
      }
      uint64_t v19 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (*(float *)(v19 + 8) >= v14) {
        float v14 = *(float *)(v19 + 8);
      }
      if (!__p) {
        goto LABEL_30;
      }
      uint64_t v20 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v15 >= *(float *)(v20 + 8)) {
        float v15 = *(float *)(v20 + 8);
      }
      if (!__p) {
        goto LABEL_32;
      }
      signed int v21 = *(_DWORD *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v21 > v12) {
        signed int v12 = v21;
      }
      if (__p)
      {
        signed int v22 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)__p + 32))() + 4);
        if (v22 > v12) {
          signed int v12 = v22;
        }
        if (!__p) {
          goto LABEL_36;
        }
        (*(void (**)(void))(*(void *)__p + 40))();
      }
      else
      {
LABEL_34:
        if (*(_DWORD *)(v39 + 16 * v42 + 4) > v12) {
          signed int v12 = *(_DWORD *)(v39 + 16 * v42 + 4);
        }
LABEL_36:
        ++v42;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
      goto LABEL_41;
    }
LABEL_39:
    if (v41) {
      --*v41;
    }
LABEL_41:
    *a2 += v17;
    uint64_t v13 = v18 + 12 * v17;
LABEL_42:
    if (v44) {
      (*(void (**)(uint64_t))(*(void *)v44 + 32))(v44);
    }
    else {
      ++v46;
    }
  }
  if (v44) {
    (*(void (**)(void))(*(void *)v44 + 8))();
  }
LABEL_47:
  if ((unint64_t)(12 * *a2 + 8 * *a3) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    unsigned int v23 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&__p);
    uint64_t v24 = (void *)fst::cerr(v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
    if (SHIBYTE(v40) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v25 = __clz(v12);
  if (v12 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    unint64_t v26 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&__p);
    unint64_t v27 = (void *)fst::cerr(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
    if (SHIBYTE(v40) < 0) {
      operator delete(__p);
    }
  }
  *a6 = v25 - 1;
  int v28 = 1 << (v25 - 1);
  float v29 = fabsf(v14);
  float v30 = fabsf(v15);
  if (v29 < v30) {
    float v29 = v30;
  }
  if (v29 <= 0.0) {
    double v31 = (double)v28 + -1.0;
  }
  else {
    double v31 = v29;
  }
  float v32 = ((double)v28 + -1.0) / v31;
  *a7 = v32;
  float result = 1.0 / v32;
  *a8 = result;
  *a5 = 2 * ~(-1 << (v25 - 1));
  return result;
}

void sub_1B20D45E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~ReducedFstImpl(void *a1)
{
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~ReducedFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::HasSequentialStates()
{
  return 0;
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~ReducedFstImpl(void *a1)
{
  *a1 = &unk_1F0A3BAE8;
  uint64_t v2 = a1[8];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void *fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A43700;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(unsigned int *)(v2 + a2 + 4);
  if ((int)v3 <= 0) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = (uint64_t *)(a2 + v2 + 8);
  uint64_t v7 = 0xFFFFFFFFLL << (*(void *)(a1 + 112)
                      + ((unint64_t)(63 - *(void *)(a1 + 112)) >> 1)
                      + 1);
  do
  {
    uint64_t v8 = *v6;
    uint64_t v6 = (uint64_t *)((char *)v6 + 12);
    if ((v7 & v8) == 0) {
      ++result;
    }
    --v3;
  }
  while (v3);
  return result;
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(unsigned int *)(v2 + a2 + 4);
  if ((int)v3 <= 0) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = (unint64_t *)(a2 + v2 + 8);
  uint64_t v7 = *(void *)(a1 + 112);
  int v8 = ~(-1 << ((unint64_t)(63 - v7) >> 1));
  char v9 = v7 + 1;
  do
  {
    unint64_t v10 = *v6;
    uint64_t v6 = (unint64_t *)((char *)v6 + 12);
    if ((v8 & (v10 >> v9)) == 0) {
      ++result;
    }
    --v3;
  }
  while (v3);
  return result;
}

uint64_t fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::WriteFst<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>(void *a1, void *a2, unsigned char *a3)
{
  int v6 = a3[27];
  uint64_t v52 = 0;
  int v51 = 0;
  v49[1] = 0u;
  if (v6) {
    int v7 = 3;
  }
  else {
    int v7 = 4;
  }
  v49[0] = 0uLL;
  int v50 = 1065353216;
  int v47 = 0;
  int v48 = 0;
  uint64_t v46 = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>(a1, &v52, &v51, v49, &v48, &v47, (float *)&v46 + 1, (float *)&v46);
  long long v42 = 0u;
  long long v41 = 0u;
  long long v40 = 0u;
  long long v39 = 0u;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v43 = -1;
  LODWORD(v31) = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  v27[0] = &v31;
  uint64_t v43 = *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v49, (int *)&v31, (uint64_t)&std::piecewise_construct, (_DWORD **)v27)+ 5);
  uint64_t v44 = v51;
  uint64_t v45 = v52;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::TypeString(&__str);
  uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x3FFFFFFF0004, 1);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, a3, v7, &__str, v8 | 1, (uint64_t)v38);
  LODWORD(v27[0]) = HIDWORD(v46);
  std::ostream::write();
  LODWORD(v27[0]) = v46;
  std::ostream::write();
  v27[0] = v47;
  std::ostream::write();
  v27[0] = v48;
  std::ostream::write();
  if (!a3[27] || fst::AlignOutput(a2))
  {
    float v35 = INFINITY;
    double v31 = &unk_1F0A39648;
    int v32 = 0;
    uint64_t v9 = a1[1];
    unint64_t v10 = 12 * *(void *)(v9 + 88) + 8 * *(int *)(v9 + 80);
    uint64_t v33 = v9;
    unint64_t v34 = v10;
    if (!v10) {
      goto LABEL_35;
    }
    uint64_t v11 = 0;
    while (1)
    {
      if (v11 == -1)
      {
        int v18 = -1;
        goto LABEL_34;
      }
      float v35 = (*(float (**)(void *, uint64_t))(*a1 + 32))(a1, v11);
      int v36 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v11);
      std::ostream::write();
      unint64_t v30 = 0;
      (*(void (**)(void *, uint64_t, void **))(*a1 + 136))(a1, v11, v27);
      while (1)
      {
        if (!v27[0])
        {
          if (v30 >= v28) {
            goto LABEL_30;
          }
          goto LABEL_15;
        }
        if ((*(unsigned int (**)(void *))(*(void *)v27[0] + 24))(v27[0])) {
          break;
        }
        if (v27[0])
        {
          signed int v12 = (long long *)(*(uint64_t (**)(void))(*(void *)v27[0] + 32))();
          goto LABEL_16;
        }
LABEL_15:
        signed int v12 = (long long *)((char *)v27[1] + 16 * v30);
LABEL_16:
        long long v26 = *v12;
        int v13 = HIDWORD(v26);
        if (HIDWORD(v26) != -1)
        {
          if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v49, (int *)&v26 + 3))
          {
            long long __p = (char *)&v26 + 12;
            int v13 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v49, (int *)&v26 + 3, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
            float v14 = fst::LogMessage::LogMessage((fst *)v53, (uint64_t)&__p);
            float v15 = (void *)fst::cerr(v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"State ", 6);
            unsigned int v16 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" missing in new FST!", 20);
            fst::LogMessage::~LogMessage((fst::LogMessage *)v53);
            if (v25 < 0) {
              operator delete(__p);
            }
            int v13 = -1;
          }
          HIDWORD(v26) = v13;
        }
        double v17 = roundf(fabsf(*((float *)&v46 + 1) * *((float *)&v26 + 2)));
        if ((double)(unint64_t)(1 << (char)v47) + -1.0 < v17) {
          double v17 = (double)(unint64_t)(1 << (char)v47) + -1.0;
        }
        long long __p = (void *)(((((uint64_t)(int)v26 << ((unint64_t)(63 - (void)v47) >> 1)) | SDWORD1(v26)) << (v47 + 1)) | ((float)(*((float *)&v46 + 1) * *((float *)&v26 + 2)) < 0.0) | (2 * (unint64_t)v17));
        int v24 = v13;
        std::ostream::write();
        if (v27[0]) {
          (*(void (**)(void *))(*(void *)v27[0] + 40))(v27[0]);
        }
        else {
          ++v30;
        }
      }
      if (v27[0])
      {
        (*(void (**)(void))(*(void *)v27[0] + 8))();
        goto LABEL_32;
      }
LABEL_30:
      if (v29) {
        --*v29;
      }
LABEL_32:
      int v18 = v32;
      uint64_t v9 = v33;
      unint64_t v10 = v34;
LABEL_34:
      uint64_t v11 = (v18 + 12 * *(_DWORD *)(*(void *)(v9 + 72) + v18 + 4) + 8);
      int v32 = v11;
      if (v10 <= (int)v11)
      {
LABEL_35:
        uint64_t v19 = 1;
        goto LABEL_39;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "ERROR");
  uint64_t v20 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)v27);
  signed int v21 = (void *)fst::cerr(v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Could not align file during write after header", 46);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  uint64_t v19 = 0;
LABEL_39:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(*((void **)&v40 + 1));
  }
  if (SBYTE7(v40) < 0) {
    operator delete((void *)v39);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v49);
  return v19;
}

void sub_1B20D4ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  fst::FstHeader::~FstHeader(&a37);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v37 - 176);
  _Unwind_Resume(a1);
}

float fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>(void *a1, void *a2, int *a3, void *a4, void *a5, void *a6, float *a7, float *a8)
{
  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  uint64_t v46 = &unk_1F0A39648;
  int v47 = 0;
  uint64_t v12 = a1[1];
  unint64_t v13 = 12 * *(void *)(v12 + 88) + 8 * *(int *)(v12 + 80);
  uint64_t v48 = v12;
  unint64_t v49 = v13;
  if (!v13)
  {
    signed int v15 = 0;
    float v18 = -INFINITY;
    float v17 = INFINITY;
    goto LABEL_40;
  }
  uint64_t v14 = 0;
  signed int v15 = 0;
  int v16 = 0;
  float v17 = INFINITY;
  float v18 = -INFINITY;
  do
  {
    unsigned int v45 = v16;
    if (v16 == -1) {
      goto LABEL_37;
    }
    ++*a3;
    long long __p = &v45;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v45, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v14;
    unint64_t v44 = 0;
    (*(void (**)(void *, void, void **))(*a1 + 136))(a1, v45, &__p);
    uint64_t v19 = 0;
    uint64_t v20 = v14 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v44 >= v42) {
          goto LABEL_34;
        }
        ++v19;
LABEL_23:
        if (*(float *)(v41 + 16 * v44 + 8) >= v18) {
          float v18 = *(float *)(v41 + 16 * v44 + 8);
        }
LABEL_25:
        if (v17 >= *(float *)(v41 + 16 * v44 + 8)) {
          float v17 = *(float *)(v41 + 16 * v44 + 8);
        }
LABEL_27:
        if (*(_DWORD *)(v41 + 16 * v44) > v15) {
          signed int v15 = *(_DWORD *)(v41 + 16 * v44);
        }
        goto LABEL_29;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      ++v19;
      if (!__p) {
        goto LABEL_23;
      }
      uint64_t v21 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (*(float *)(v21 + 8) >= v18) {
        float v18 = *(float *)(v21 + 8);
      }
      if (!__p) {
        goto LABEL_25;
      }
      uint64_t v22 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v17 >= *(float *)(v22 + 8)) {
        float v17 = *(float *)(v22 + 8);
      }
      if (!__p) {
        goto LABEL_27;
      }
      signed int v23 = *(_DWORD *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v23 > v15) {
        signed int v15 = v23;
      }
      if (__p)
      {
        signed int v24 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)__p + 32))() + 4);
        if (v24 > v15) {
          signed int v15 = v24;
        }
        if (!__p) {
          goto LABEL_31;
        }
        (*(void (**)(void))(*(void *)__p + 40))();
      }
      else
      {
LABEL_29:
        if (*(_DWORD *)(v41 + 16 * v44 + 4) > v15) {
          signed int v15 = *(_DWORD *)(v41 + 16 * v44 + 4);
        }
LABEL_31:
        ++v44;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
      goto LABEL_36;
    }
LABEL_34:
    if (v43) {
      --*v43;
    }
LABEL_36:
    *a2 += v19;
    uint64_t v14 = v20 + 12 * v19;
    int v16 = v47;
    uint64_t v12 = v48;
    unint64_t v13 = v49;
LABEL_37:
    v16 += 12 * *(_DWORD *)(*(void *)(v12 + 72) + v16 + 4) + 8;
    int v47 = v16;
  }
  while (v13 > v16);
LABEL_40:
  if ((unint64_t)(12 * *a2 + 8 * *a3) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    char v25 = fst::LogMessage::LogMessage((fst *)&v46, (uint64_t)&__p);
    long long v26 = (void *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v46);
    if (SHIBYTE(v42) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v27 = __clz(v15);
  if (v15 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    unint64_t v28 = fst::LogMessage::LogMessage((fst *)&v46, (uint64_t)&__p);
    float v29 = (void *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v46);
    if (SHIBYTE(v42) < 0) {
      operator delete(__p);
    }
  }
  *a6 = v27 - 1;
  int v30 = 1 << (v27 - 1);
  float v31 = fabsf(v18);
  float v32 = fabsf(v17);
  if (v31 < v32) {
    float v31 = v32;
  }
  if (v31 <= 0.0) {
    double v33 = (double)v30 + -1.0;
  }
  else {
    double v33 = v31;
  }
  float v34 = ((double)v30 + -1.0) / v33;
  *a7 = v34;
  float result = 1.0 / v34;
  *a8 = result;
  *a5 = 2 * ~(-1 << (v27 - 1));
  return result;
}

void sub_1B20D54D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~StateIterator()
{
}

BOOL fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) <= (unint64_t)*(int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Next_(uint64_t result)
{
  *(_DWORD *)(result + 8) += 12 * *(_DWORD *)(*(void *)(*(void *)(result + 16) + 72) + *(int *)(result + 8) + 4)
                           + 8;
  return result;
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::InitArcIterator()
{
}

void sub_1B20D5658(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C402B94B19BLL);
  _Unwind_Resume(a1);
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(void *a1, float result)
{
  unint64_t v2 = a1[4];
  if (v2 < a1[3])
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = a1[2] + 12 * v2;
    float v5 = *(float *)(v3 + 100);
    uint64_t v7 = *(void *)(v3 + 112);
    unint64_t v6 = *(void *)(v3 + 120);
    unint64_t v8 = 63 - v7;
    unint64_t v9 = (unint64_t)(63 - v7) >> 1;
    LOBYTE(v7) = v7 + 1;
    uint64_t v10 = *(void *)v4 >> (v7 + (v8 >> 1));
    float v11 = (float)((*(void *)v4 & v6) >> 1);
    uint64_t v12 = (*(void *)v4 >> v7) & ~(-1 << v9);
    if (*(void *)v4) {
      float v11 = -v11;
    }
    float result = v5 * v11;
    unint64_t v13 = LODWORD(result) | ((unint64_t)*(unsigned int *)(v4 + 8) << 32);
    a1[5] = v10 | (unint64_t)(v12 << 32);
    a1[6] = v13;
  }
  return result;
}

void fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~ArcIterator()
{
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Reinit(void *a1, int a2, float a3)
{
  uint64_t v3 = *(void *)(a1[1] + 72) + a2;
  uint64_t v4 = v3 + 8;
  uint64_t v5 = *(unsigned int *)(v3 + 4);
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = 0;
  fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1, a3);
  return 1;
}

BOOL fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 32) >= *(void *)(a1 + 24);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Value_(uint64_t a1)
{
  return a1 + 40;
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Next_(void *a1, float result)
{
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1, result);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Reset_(void *a1, float result)
{
  a1[4] = 0;
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1, result);
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Seek_(void *a1, float result, uint64_t a3)
{
  a1[4] = a3;
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1, result);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Flags_()
{
  return 15;
}

void std::allocate_shared[abi:ne180100]<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>()
{
  uint64_t v0 = operator new(0x28uLL);
  std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,0>(v0);
}

void sub_1B20D57E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E0D8;
  fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ReducedFst();
}

void sub_1B20D5840(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E0D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E0D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ReducedFst()
{
}

void sub_1B20D5960(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C4097CFB54CLL);
  _Unwind_Resume(a1);
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~ReducedFst(void *a1)
{
  fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 96);
}

float fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return *(float *)(*(void *)(*(void *)(a1 + 8) + 72) + a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 72) + a2 + 4);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Copy()
{
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::InitStateIterator()
{
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::InitArcIterator()
{
}

BOOL fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::IsMemoryMapped(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 80);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ReducedFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3BB58;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString((std::string *)__str);
  std::string::operator=(v4, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v5);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v6);
  memset(__str, 0, sizeof(__str));
  int v11 = 1065353216;
  float v7 = fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (void *)(a1 + 88), (int *)(a1 + 80), __str, (_DWORD *)(a1 + 112), (_DWORD *)(a1 + 108), (float *)(a1 + 104), (float *)(a1 + 100));
  LODWORD(vquasar::readMatrixFile((uint64_t)&this[6], this + 9) = (*(uint64_t (**)(uint64_t, float))(*(void *)a2 + 24))(a2, v7);
  uint64_t v8 = &v9;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, (int *)&v9, (uint64_t)&std::piecewise_construct, (_DWORD **)&v8)+ 5);
  fst::MappedFile::Allocate((fst::MappedFile *)(8 * (*(void *)(a1 + 88) + *(int *)(a1 + 80))), 16);
}

void sub_1B20D61C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&__p);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v24);
  _Unwind_Resume(a1);
}

std::string *fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString@<X0>(std::string *a1@<X8>)
{
  return std::string::append(a1, "_acceptor");
}

void sub_1B20D62F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

float fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, void *a2, int *a3, void *a4, _DWORD *a5, _DWORD *a6, float *a7, float *a8)
{
  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  signed int v46 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v44);
  signed int v13 = 0;
  uint64_t v14 = 0;
  float v15 = -INFINITY;
  float v16 = INFINITY;
  while (1)
  {
    if (!v44)
    {
      if (v46 >= v45) {
        goto LABEL_47;
      }
LABEL_7:
      unsigned int v17 = v46;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v44 + 16))(v44)) {
      break;
    }
    unsigned int v43 = 0;
    if (!v44) {
      goto LABEL_7;
    }
    unsigned int v17 = (*(uint64_t (**)(void))(*(void *)v44 + 24))();
LABEL_8:
    unsigned int v43 = v17;
    if (v17 == -1) {
      goto LABEL_42;
    }
    ++*a3;
    long long __p = &v43;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v43, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v14;
    unint64_t v42 = 0;
    (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 136))(a1, v43, &__p);
    uint64_t v18 = 0;
    uint64_t v19 = v14 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v42 >= v40) {
          goto LABEL_39;
        }
        ++v18;
LABEL_28:
        if (*(float *)(v39 + 16 * v42 + 8) >= v15) {
          float v15 = *(float *)(v39 + 16 * v42 + 8);
        }
LABEL_30:
        if (v16 >= *(float *)(v39 + 16 * v42 + 8)) {
          float v16 = *(float *)(v39 + 16 * v42 + 8);
        }
LABEL_32:
        if (*(_DWORD *)(v39 + 16 * v42) > v13) {
          signed int v13 = *(_DWORD *)(v39 + 16 * v42);
        }
        goto LABEL_34;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      ++v18;
      if (!__p) {
        goto LABEL_28;
      }
      uint64_t v20 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (*(float *)(v20 + 8) >= v15) {
        float v15 = *(float *)(v20 + 8);
      }
      if (!__p) {
        goto LABEL_30;
      }
      uint64_t v21 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v16 >= *(float *)(v21 + 8)) {
        float v16 = *(float *)(v21 + 8);
      }
      if (!__p) {
        goto LABEL_32;
      }
      signed int v22 = *(_DWORD *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v22 > v13) {
        signed int v13 = v22;
      }
      if (__p)
      {
        signed int v23 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)__p + 32))() + 4);
        if (v23 > v13) {
          signed int v13 = v23;
        }
        if (!__p) {
          goto LABEL_36;
        }
        (*(void (**)(void))(*(void *)__p + 40))();
      }
      else
      {
LABEL_34:
        if (*(_DWORD *)(v39 + 16 * v42 + 4) > v13) {
          signed int v13 = *(_DWORD *)(v39 + 16 * v42 + 4);
        }
LABEL_36:
        ++v42;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
      goto LABEL_41;
    }
LABEL_39:
    if (v41) {
      --*v41;
    }
LABEL_41:
    *a2 += v18;
    uint64_t v14 = v19 + 8 * v18;
LABEL_42:
    if (v44) {
      (*(void (**)(uint64_t))(*(void *)v44 + 32))(v44);
    }
    else {
      ++v46;
    }
  }
  if (v44) {
    (*(void (**)(void))(*(void *)v44 + 8))();
  }
LABEL_47:
  if ((((unint64_t)(*a2 + *a3) >> 28) & 0x1FFFFFFFFLL) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    uint64_t v24 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&__p);
    char v25 = (void *)fst::cerr(v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
    if (SHIBYTE(v40) < 0) {
      operator delete(__p);
    }
  }
  unsigned int v26 = __clz(v13);
  if (v13 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    uint64_t v27 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&__p);
    unint64_t v28 = (void *)fst::cerr(v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
    if (SHIBYTE(v40) < 0) {
      operator delete(__p);
    }
  }
  *a6 = v26 - 1;
  int v29 = 1 << (v26 - 1);
  float v30 = fabsf(v15);
  float v31 = fabsf(v16);
  if (v30 < v31) {
    float v30 = v31;
  }
  if (v30 <= 0.0) {
    double v32 = (double)v29 + -1.0;
  }
  else {
    double v32 = v30;
  }
  float v33 = ((double)v29 + -1.0) / v32;
  *a7 = v33;
  float result = 1.0 / v33;
  *a8 = result;
  *a5 = 2 * ~(-1 << (v26 - 1));
  return result;
}

void sub_1B20D6890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~ReducedFstImpl(void *a1)
{
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~ReducedFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::HasSequentialStates()
{
  return 0;
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~ReducedFstImpl(void *a1)
{
  *a1 = &unk_1F0A3BB58;
  uint64_t v2 = a1[8];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void *fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A43870;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(unsigned int *)(v2 + a2 + 4);
  if ((int)v3 <= 0) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = (unsigned int *)(a2 + v2 + 8);
  int v7 = *(_DWORD *)(a1 + 108) + 1;
  do
  {
    unsigned int v8 = *v6;
    v6 += 2;
    if (!(v8 >> v7)) {
      ++result;
    }
    --v3;
  }
  while (v3);
  return result;
}

uint64_t fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::WriteFst<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>(void *a1, void *a2, unsigned char *a3)
{
  int v6 = a3[27];
  uint64_t v50 = 0;
  int v49 = 0;
  if (v6) {
    int v7 = 3;
  }
  else {
    int v7 = 4;
  }
  memset(v47, 0, sizeof(v47));
  int v48 = 1065353216;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>(a1, &v50, &v49, v47, (_DWORD *)&v46 + 1, &v46, (float *)&v45 + 1, (float *)&v45);
  long long v41 = 0u;
  long long v40 = 0u;
  long long v39 = 0u;
  long long v38 = 0u;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = -1;
  LODWORD(v30) = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  v26[0] = &v30;
  uint64_t v42 = *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v47, (int *)&v30, (uint64_t)&std::piecewise_construct, (_DWORD **)v26)+ 5);
  uint64_t v43 = v49;
  uint64_t v44 = v50;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString(&__str);
  uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x3FFFFFFF0004, 1);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, a3, v7, &__str, v8 | 1, (uint64_t)v37);
  LODWORD(v26[0]) = HIDWORD(v45);
  std::ostream::write();
  LODWORD(v26[0]) = v45;
  std::ostream::write();
  LODWORD(v26[0]) = v46;
  std::ostream::write();
  LODWORD(v26[0]) = HIDWORD(v46);
  std::ostream::write();
  if (!a3[27] || fst::AlignOutput(a2))
  {
    float v34 = INFINITY;
    float v30 = &unk_1F0A396C8;
    int v31 = 0;
    uint64_t v9 = a1[1];
    unint64_t v10 = 8 * (*(void *)(v9 + 88) + *(int *)(v9 + 80));
    uint64_t v32 = v9;
    unint64_t v33 = v10;
    if (!v10) {
      goto LABEL_35;
    }
    uint64_t v11 = 0;
    while (1)
    {
      if (v11 == -1)
      {
        int v18 = -1;
        goto LABEL_34;
      }
      float v34 = (*(float (**)(void *, uint64_t))(*a1 + 32))(a1, v11);
      int v35 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v11);
      std::ostream::write();
      unint64_t v29 = 0;
      (*(void (**)(void *, uint64_t, void **))(*a1 + 136))(a1, v11, v26);
      while (1)
      {
        if (!v26[0])
        {
          if (v29 >= v27) {
            goto LABEL_30;
          }
          goto LABEL_15;
        }
        if ((*(unsigned int (**)(void *))(*(void *)v26[0] + 24))(v26[0])) {
          break;
        }
        if (v26[0])
        {
          uint64_t v12 = (long long *)(*(uint64_t (**)(void))(*(void *)v26[0] + 32))();
          goto LABEL_16;
        }
LABEL_15:
        uint64_t v12 = (long long *)((char *)v26[1] + 16 * v29);
LABEL_16:
        long long v25 = *v12;
        int v13 = HIDWORD(v25);
        if (HIDWORD(v25) != -1)
        {
          if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v47, (int *)&v25 + 3))
          {
            __p[0] = (char *)&v25 + 12;
            int v13 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v47, (int *)&v25 + 3, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)+ 5);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
            uint64_t v14 = fst::LogMessage::LogMessage((fst *)&v51, (uint64_t)__p);
            float v15 = (void *)fst::cerr(v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"State ", 6);
            float v16 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" missing in new FST!", 20);
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v51);
            if (v24 < 0) {
              operator delete(__p[0]);
            }
            int v13 = -1;
          }
          HIDWORD(v25) = v13;
        }
        double v17 = roundf(fabsf(*((float *)&v45 + 1) * *((float *)&v25 + 2)));
        if ((double)(1 << v46) + -1.0 < v17) {
          double v17 = (double)(1 << v46) + -1.0;
        }
        LODWORD(__p[0]) = (v25 << (v46 + 1)) | ((float)(*((float *)&v45 + 1) * *((float *)&v25 + 2)) < 0.0) | (2 * v17);
        HIDWORD(__p[0]) = v13;
        std::ostream::write();
        if (v26[0]) {
          (*(void (**)(void *))(*(void *)v26[0] + 40))(v26[0]);
        }
        else {
          ++v29;
        }
      }
      if (v26[0])
      {
        (*(void (**)(void))(*(void *)v26[0] + 8))();
        goto LABEL_32;
      }
LABEL_30:
      if (v28) {
        --*v28;
      }
LABEL_32:
      int v18 = v31;
      uint64_t v9 = v32;
      unint64_t v10 = v33;
LABEL_34:
      uint64_t v11 = (v18 + 8 * *(_DWORD *)(*(void *)(v9 + 72) + v18 + 4) + 8);
      int v31 = v11;
      if (v10 <= (int)v11)
      {
LABEL_35:
        uint64_t v19 = 1;
        goto LABEL_39;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v26, "ERROR");
  uint64_t v20 = fst::LogMessage::LogMessage((fst *)&v30, (uint64_t)v26);
  uint64_t v21 = (void *)fst::cerr(v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Could not align file during write after header", 46);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v30);
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  uint64_t v19 = 0;
LABEL_39:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(*((void **)&v39 + 1));
  }
  if (SBYTE7(v39) < 0) {
    operator delete((void *)v38);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v47);
  return v19;
}

void sub_1B20D70D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  fst::FstHeader::~FstHeader(&a38);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v38 - 160);
  _Unwind_Resume(a1);
}

float fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>(void *a1, void *a2, int *a3, void *a4, _DWORD *a5, _DWORD *a6, float *a7, float *a8)
{
  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  uint64_t v46 = &unk_1F0A396C8;
  int v47 = 0;
  uint64_t v13 = a1[1];
  unint64_t v14 = 8 * (*(void *)(v13 + 88) + *(int *)(v13 + 80));
  uint64_t v48 = v13;
  unint64_t v49 = v14;
  if (!v14)
  {
    signed int v16 = 0;
    float v19 = -INFINITY;
    float v18 = INFINITY;
    goto LABEL_40;
  }
  uint64_t v15 = 0;
  signed int v16 = 0;
  int v17 = 0;
  float v18 = INFINITY;
  float v19 = -INFINITY;
  do
  {
    unsigned int v45 = v17;
    if (v17 == -1) {
      goto LABEL_37;
    }
    ++*a3;
    long long __p = &v45;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v45, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v15;
    unint64_t v44 = 0;
    (*(void (**)(void *, void, void **))(*a1 + 136))(a1, v45, &__p);
    uint64_t v20 = 0;
    uint64_t v21 = v15 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v44 >= v42) {
          goto LABEL_34;
        }
        ++v20;
LABEL_23:
        if (*(float *)(v41 + 16 * v44 + 8) >= v19) {
          float v19 = *(float *)(v41 + 16 * v44 + 8);
        }
LABEL_25:
        if (v18 >= *(float *)(v41 + 16 * v44 + 8)) {
          float v18 = *(float *)(v41 + 16 * v44 + 8);
        }
LABEL_27:
        if (*(_DWORD *)(v41 + 16 * v44) > v16) {
          signed int v16 = *(_DWORD *)(v41 + 16 * v44);
        }
        goto LABEL_29;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      ++v20;
      if (!__p) {
        goto LABEL_23;
      }
      uint64_t v22 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (*(float *)(v22 + 8) >= v19) {
        float v19 = *(float *)(v22 + 8);
      }
      if (!__p) {
        goto LABEL_25;
      }
      uint64_t v23 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v18 >= *(float *)(v23 + 8)) {
        float v18 = *(float *)(v23 + 8);
      }
      if (!__p) {
        goto LABEL_27;
      }
      signed int v24 = *(_DWORD *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v24 > v16) {
        signed int v16 = v24;
      }
      if (__p)
      {
        signed int v25 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)__p + 32))() + 4);
        if (v25 > v16) {
          signed int v16 = v25;
        }
        if (!__p) {
          goto LABEL_31;
        }
        (*(void (**)(void))(*(void *)__p + 40))();
      }
      else
      {
LABEL_29:
        if (*(_DWORD *)(v41 + 16 * v44 + 4) > v16) {
          signed int v16 = *(_DWORD *)(v41 + 16 * v44 + 4);
        }
LABEL_31:
        ++v44;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
      goto LABEL_36;
    }
LABEL_34:
    if (v43) {
      --*v43;
    }
LABEL_36:
    *a2 += v20;
    uint64_t v15 = v21 + 8 * v20;
    int v17 = v47;
    uint64_t v13 = v48;
    unint64_t v14 = v49;
LABEL_37:
    v17 += 8 * *(_DWORD *)(*(void *)(v13 + 72) + v17 + 4) + 8;
    int v47 = v17;
  }
  while (v14 > v17);
LABEL_40:
  if ((((unint64_t)(*a2 + *a3) >> 28) & 0x1FFFFFFFFLL) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    unsigned int v26 = fst::LogMessage::LogMessage((fst *)&v46, (uint64_t)&__p);
    unint64_t v27 = (void *)fst::cerr(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v46);
    if (SHIBYTE(v42) < 0) {
      operator delete(__p);
    }
  }
  unsigned int v28 = __clz(v16);
  if (v16 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    unint64_t v29 = fst::LogMessage::LogMessage((fst *)&v46, (uint64_t)&__p);
    float v30 = (void *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v46);
    if (SHIBYTE(v42) < 0) {
      operator delete(__p);
    }
  }
  *a6 = v28 - 1;
  int v31 = 1 << (v28 - 1);
  float v32 = fabsf(v19);
  float v33 = fabsf(v18);
  if (v32 < v33) {
    float v32 = v33;
  }
  if (v32 <= 0.0) {
    double v34 = (double)v31 + -1.0;
  }
  else {
    double v34 = v32;
  }
  float v35 = ((double)v31 + -1.0) / v34;
  *a7 = v35;
  float result = 1.0 / v35;
  *a8 = result;
  *a5 = 2 * ~(-1 << (v28 - 1));
  return result;
}

void sub_1B20D76C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~StateIterator()
{
}

BOOL fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) <= (unint64_t)*(int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Next_(uint64_t result)
{
  *(_DWORD *)(result + 8) += 8 * *(_DWORD *)(*(void *)(*(void *)(result + 16) + 72) + *(int *)(result + 8) + 4)
                           + 8;
  return result;
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::InitArcIterator()
{
}

void sub_1B20D7840(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C402B94B19BLL);
  _Unwind_Resume(a1);
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(void *a1, float result)
{
  unint64_t v2 = a1[4];
  if (v2 < a1[3])
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (unsigned int *)(a1[2] + 8 * v2);
    float v5 = *(float *)(v3 + 100);
    uint64_t v6 = v3 + 108;
    unsigned int v8 = *v4;
    uint64_t v7 = v4[1];
    uint64_t v9 = v8 >> (*(_DWORD *)(v3 + 108) + 1);
    float v10 = (float)((v8 & *(_DWORD *)(v6 + 4)) >> 1);
    if (v8) {
      float v10 = -v10;
    }
    float result = v5 * v10;
    a1[5] = v9 | (v9 << 32);
    a1[6] = LODWORD(result) | (unint64_t)(v7 << 32);
  }
  return result;
}

void fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~ArcIterator()
{
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Reinit(void *a1, int a2, float a3)
{
  uint64_t v3 = *(void *)(a1[1] + 72) + a2;
  uint64_t v4 = v3 + 8;
  uint64_t v5 = *(unsigned int *)(v3 + 4);
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = 0;
  fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1, a3);
  return 1;
}

BOOL fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 32) >= *(void *)(a1 + 24);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Value_(uint64_t a1)
{
  return a1 + 40;
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Next_(void *a1, float result)
{
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1, result);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Reset_(void *a1, float result)
{
  a1[4] = 0;
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1, result);
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Seek_(void *a1, float result, uint64_t a3)
{
  a1[4] = a3;
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1, result);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Flags_()
{
  return 15;
}

void std::allocate_shared[abi:ne180100]<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>()
{
  uint64_t v0 = operator new(0x28uLL);
  std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>,0>(v0);
}

void sub_1B20D79A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E110;
  fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::SqueezedFst();
}

void sub_1B20D79FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::SqueezedFst()
{
}

void sub_1B20D7B1C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40CC721279);
  _Unwind_Resume(a1);
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~SqueezedFst(void *a1)
{
  fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 136);
}

float fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(*(void *)(v2 + 72) + 4 * a2);
  if (v3 <= 0) {
    return *(float *)(*(void *)(v2 + 104) + 8 * -v3);
  }
  else {
    return INFINITY;
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v2 + 112) - 1 == a2)
  {
    int v7 = *(_DWORD *)(*(void *)(v2 + 72) + 4 * a2);
    if (v7 <= 0) {
      int v7 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v7 + 4);
    }
    return *(void *)(v2 + 120) - v7 + 1;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 72);
    int v4 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v4 + 4);
    }
    int v5 = *(_DWORD *)(v3 + 4 * a2);
    if (v5 <= 0) {
      int v5 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v5 + 4);
    }
    return v4 - v5;
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Copy()
{
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v2 + 112);
  return result;
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

BOOL fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::IsMemoryMapped(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  return *(void *)(v1[8] + 16) && *(void *)(v1[10] + 16) && *(void *)(v1[12] + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 112);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::SqueezedFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  int v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3C330;
  *(_DWORD *)(a1 + ++*(void *)(result + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString(&__p);
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v5);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v6);
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (void *)(a1 + 120), (int *)(a1 + 112), (void *)(a1 + 128));
}

void sub_1B20D83C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v19 = *(void *)(v17 + 144);
  *(void *)(v17 + 144) = 0;
  if (v19) {
    MEMORY[0x1B3EA8670](v19, 0x1000C40451B5BE8);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v17);
  _Unwind_Resume(a1);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, void *a2, int *a3, void *a4)
{
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  unsigned int v28 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v26);
  signed int v8 = 0;
  float v9 = -INFINITY;
  float v10 = INFINITY;
  while (v26)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v26 + 16))(v26))
    {
      if (v26) {
        (*(void (**)(void))(*(void *)v26 + 8))();
      }
LABEL_53:
      if ((unint64_t)(4 * *a3 + 16 * *a2 + 8 * *a4) >> 31)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
        uint64_t v19 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)&__p);
        uint64_t v20 = (void *)fst::cerr(v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Too much data for squeezed file format: ", 40);
        std::ostream::operator<<();
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
        if (SHIBYTE(v23) < 0) {
          operator delete(__p);
        }
      }
      fst::SqueezedQuantizationOptions<false,false>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v8);
    }
    if (!v26) {
      goto LABEL_7;
    }
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v26 + 24))();
LABEL_8:
    float v12 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v11);
    if (v12 > INFINITY || (float)(v12 + 0.00097656) < INFINITY) {
      ++*a4;
    }
    if (v11 == -1) {
      goto LABEL_48;
    }
    ++*a3;
    unint64_t v25 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v11, &__p);
    uint64_t v14 = 0;
    while (1)
    {
      if (!__p)
      {
        if (v25 >= v23) {
          goto LABEL_45;
        }
        ++v14;
LABEL_34:
        if (*(float *)(v22 + 16 * v25 + 8) >= v9) {
          float v9 = *(float *)(v22 + 16 * v25 + 8);
        }
LABEL_36:
        if (v10 >= *(float *)(v22 + 16 * v25 + 8)) {
          float v10 = *(float *)(v22 + 16 * v25 + 8);
        }
LABEL_38:
        if (*(_DWORD *)(v22 + 16 * v25) > v8) {
          signed int v8 = *(_DWORD *)(v22 + 16 * v25);
        }
        goto LABEL_40;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      ++v14;
      if (!__p) {
        goto LABEL_34;
      }
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (*(float *)(v15 + 8) >= v9) {
        float v9 = *(float *)(v15 + 8);
      }
      if (!__p) {
        goto LABEL_36;
      }
      uint64_t v16 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v10 >= *(float *)(v16 + 8)) {
        float v10 = *(float *)(v16 + 8);
      }
      if (!__p) {
        goto LABEL_38;
      }
      signed int v17 = *(_DWORD *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v17 > v8) {
        signed int v8 = v17;
      }
      if (__p)
      {
        signed int v18 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)__p + 32))() + 4);
        if (v18 > v8) {
          signed int v8 = v18;
        }
        if (!__p) {
          goto LABEL_42;
        }
        (*(void (**)(void))(*(void *)__p + 40))();
      }
      else
      {
LABEL_40:
        if (*(_DWORD *)(v22 + 16 * v25 + 4) > v8) {
          signed int v8 = *(_DWORD *)(v22 + 16 * v25 + 4);
        }
LABEL_42:
        ++v25;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
    }
    else
    {
LABEL_45:
      if (v24) {
        --*v24;
      }
    }
    *a2 += v14;
LABEL_48:
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 32))(v26);
    }
    else {
      ++v28;
    }
  }
  if ((int)v28 >= v27) {
    goto LABEL_53;
  }
LABEL_7:
  uint64_t v11 = v28;
  goto LABEL_8;
}

void sub_1B20D8994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~SqueezedFstImpl(void *a1)
{
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~SqueezedFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::HasSequentialStates()
{
  return 1;
}

void fst::SqueezedQuantizationOptions<false,false>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(signed int a1)
{
  unsigned int v1 = __clz(a1);
  if (a1 <= 0) {
    unsigned int v2 = 31;
  }
  else {
    unsigned int v2 = v1;
  }
  if (v2 <= 4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
    int v4 = (void *)fst::cerr(v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_1B20D8B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~SqueezedFstImpl(void *a1)
{
  *a1 = &unk_1F0A3C330;
  uint64_t v2 = a1[8];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[10];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[12];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[18];
  a1[18] = 0;
  if (v5) {
    MEMORY[0x1B3EA8670](v5, 0x1000C40451B5BE8);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void *fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A439D8;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::NumInputEpsilons(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 112) - 1 == a2)
  {
    uint64_t v5 = *(void *)(a1 + 120);
    uint64_t v2 = *(void *)(a1 + 72);
    int v10 = *(_DWORD *)(v2 + 4 * a2);
    if (v10 <= 0) {
      int v10 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v10 + 4);
    }
    LODWORD(v5) = v5 - v10 + 1;
    if (!v5) {
      return 0;
    }
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 72);
    int v3 = *(_DWORD *)(v2 + 4 * (a2 + 1));
    if (v3 <= 0) {
      int v3 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v3 + 4);
    }
    int v4 = *(_DWORD *)(v2 + 4 * a2);
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v4 + 4);
    }
    LODWORD(v5) = v3 - v4;
    if (!v5) {
      return 0;
    }
  }
  int v6 = *(_DWORD *)(v2 + 4 * a2);
  if (v6 <= 0) {
    int v6 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v6 + 4);
  }
  if ((int)v5 < 1) {
    return 0;
  }
  uint64_t v7 = 0;
  signed int v8 = (int *)(*(void *)(a1 + 88) + 16 * (v6 - 1));
  uint64_t v5 = v5;
  do
  {
    int v9 = *v8;
    v8 += 4;
    if (!v9) {
      ++v7;
    }
    --v5;
  }
  while (v5);
  return v7;
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 112) - 1 == a2)
  {
    uint64_t v5 = *(void *)(a1 + 120);
    uint64_t v2 = *(void *)(a1 + 72);
    int v10 = *(_DWORD *)(v2 + 4 * a2);
    if (v10 <= 0) {
      int v10 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v10 + 4);
    }
    LODWORD(v5) = v5 - v10 + 1;
    if (!v5) {
      return 0;
    }
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 72);
    int v3 = *(_DWORD *)(v2 + 4 * (a2 + 1));
    if (v3 <= 0) {
      int v3 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v3 + 4);
    }
    int v4 = *(_DWORD *)(v2 + 4 * a2);
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v4 + 4);
    }
    LODWORD(v5) = v3 - v4;
    if (!v5) {
      return 0;
    }
  }
  int v6 = *(_DWORD *)(v2 + 4 * a2);
  if (v6 <= 0) {
    int v6 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v6 + 4);
  }
  if ((int)v5 < 1) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v5 = v5;
  signed int v8 = (int *)(16 * (v6 - 1) + *(void *)(a1 + 88) + 4);
  do
  {
    int v9 = *v8;
    v8 += 4;
    if (!v9) {
      ++v7;
    }
    --v5;
  }
  while (v5);
  return v7;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::WriteFst<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>(uint64_t a1)
{
  v3[0] = 0;
  int v2 = 0;
  uint64_t v1 = 0;
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, v3, &v2, &v1);
}

void sub_1B20D982C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  fst::FstHeader::~FstHeader(&a35);
  uint64_t v37 = *(void *)(v35 - 128);
  *(void *)(v35 - 128) = 0;
  if (v37) {
    MEMORY[0x1B3EA8670](v37, 0x1000C40451B5BE8);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  *a3 = 0;
  uint64_t v3 = *(void *)(result + 72);
  int v4 = *(_DWORD *)(v3 + 4 * a2);
  int v5 = v4;
  if (v4 <= 0) {
    int v5 = *(_DWORD *)(*(void *)(result + 104) + 8 * -v4 + 4);
  }
  a3[1] = *(void *)(result + 88) + 16 * (v5 - 1);
  if (*(_DWORD *)(result + 112) - 1 == a2)
  {
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(result + 104) + 8 * -v4 + 4);
    }
    uint64_t v7 = *(void *)(result + 120) - v4 + 1;
  }
  else
  {
    int v6 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v6 <= 0) {
      int v6 = *(_DWORD *)(*(void *)(result + 104) + 8 * -v6 + 4);
    }
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(result + 104) + 8 * -v4 + 4);
    }
    uint64_t v7 = v6 - v4;
  }
  a3[2] = v7;
  a3[3] = 0;
  return result;
}

void std::allocate_shared[abi:ne180100]<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>()
{
  uint64_t v0 = operator new(0x28uLL);
  std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,0>(v0);
}

void sub_1B20D9AB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E180;
  fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::SqueezedFst();
}

void sub_1B20D9B14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E180;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::SqueezedFst()
{
}

void sub_1B20D9C34(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40CC721279);
  _Unwind_Resume(a1);
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~SqueezedFst(void *a1)
{
  fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 136);
}

float fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(*(void *)(v2 + 72) + 4 * a2);
  if (v3 <= 0) {
    return *(float *)(*(void *)(v2 + 104) + 8 * -v3);
  }
  else {
    return INFINITY;
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v2 + 112) - 1 == a2)
  {
    int v7 = *(_DWORD *)(*(void *)(v2 + 72) + 4 * a2);
    if (v7 <= 0) {
      int v7 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v7 + 4);
    }
    return *(void *)(v2 + 120) - v7 + 1;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 72);
    int v4 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v4 + 4);
    }
    int v5 = *(_DWORD *)(v3 + 4 * a2);
    if (v5 <= 0) {
      int v5 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v5 + 4);
    }
    return v4 - v5;
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

char *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::GetArcs(uint64_t a1, int a2, void **a3, int a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v6 + 112) - 1 == a2)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    int v22 = *(_DWORD *)(v7 + 4 * a2);
    if (v22 <= 0) {
      int v22 = *(_DWORD *)(*(void *)(v6 + 104) + 8 * -v22 + 4);
    }
    uint64_t v10 = *(void *)(v6 + 120) - v22 + 1;
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 72);
    int v8 = *(_DWORD *)(v7 + 4 * (a2 + 1));
    if (v8 <= 0) {
      int v8 = *(_DWORD *)(*(void *)(v6 + 104) + 8 * -v8 + 4);
    }
    int v9 = *(_DWORD *)(v7 + 4 * a2);
    if (v9 <= 0) {
      int v9 = *(_DWORD *)(*(void *)(v6 + 104) + 8 * -v9 + 4);
    }
    uint64_t v10 = v8 - v9;
  }
  uint64_t v11 = 2;
  if (!a4) {
    uint64_t v11 = 0;
  }
  unint64_t v12 = v10 + v11;
  if ((unint64_t)a3[1] < v10 + v11)
  {
    if (*a3) {
      free(*a3);
    }
    uint64_t v23 = 0x4000;
    if (v12 > 0x4000) {
      uint64_t v23 = v12;
    }
    a3[1] = (void *)v23;
    float result = (char *)malloc_type_malloc(16 * v23, 0x1000040451B5BE8uLL);
    *a3 = result;
    a3[2] = result;
    uint64_t v7 = *(void *)(v6 + 72);
    uint64_t v13 = result;
  }
  else
  {
    uint64_t v13 = (char *)a3[2];
    float result = (char *)*a3;
  }
  a3[3] = &v13[16 * v12];
  int v15 = *(_DWORD *)(v7 + 4 * a2);
  if (v15 <= 0) {
    int v15 = *(_DWORD *)(*(void *)(v6 + 104) + 8 * -v15 + 4);
  }
  if (v10)
  {
    uint64_t v16 = 12 * (v15 - 1);
    signed int v17 = (unint64_t *)(result + 8);
    signed int v18 = (unsigned int *)(v16 + *(void *)(v6 + 88) + 8);
    do
    {
      uint64_t v19 = *(v18 - 2);
      unint64_t v20 = *(v18 - 1) | ((unint64_t)*(v18 - 1) << 32);
      unsigned int v21 = *v18;
      v18 += 3;
      *(v17 - 1) = v20;
      unint64_t *v17 = v19 | ((unint64_t)v21 << 32);
      v17 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Copy()
{
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v2 + 112);
  return result;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::InitArcIterator()
{
}

BOOL fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::IsMemoryMapped(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  return *(void *)(v1[8] + 16) && *(void *)(v1[10] + 16) && *(void *)(v1[12] + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 112);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::SqueezedFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  int v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3C3A0;
  *(_DWORD *)(a1 + ++*(void *)(result + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString(&__p);
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v5);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v6);
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (void *)(a1 + 120), (int *)(a1 + 112), (void *)(a1 + 128));
}

void sub_1B20DA664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v19 = *(void *)(v17 + 144);
  *(void *)(v17 + 144) = 0;
  if (v19) {
    MEMORY[0x1B3EA8670](v19, 0x1000C40451B5BE8);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v17);
  _Unwind_Resume(a1);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, void *a2, int *a3, void *a4)
{
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  unsigned int v28 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v26);
  signed int v8 = 0;
  float v9 = -INFINITY;
  float v10 = INFINITY;
  while (v26)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v26 + 16))(v26))
    {
      if (v26) {
        (*(void (**)(void))(*(void *)v26 + 8))();
      }
LABEL_53:
      if ((unint64_t)(12 * *a2 + 4 * *a3 + 8 * *a4) >> 31)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
        uint64_t v19 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)&__p);
        unint64_t v20 = (void *)fst::cerr(v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Too much data for squeezed file format: ", 40);
        std::ostream::operator<<();
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
        if (SHIBYTE(v23) < 0) {
          operator delete(__p);
        }
      }
      fst::SqueezedQuantizationOptions<true,false>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v8);
    }
    if (!v26) {
      goto LABEL_7;
    }
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v26 + 24))();
LABEL_8:
    float v12 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v11);
    if (v12 > INFINITY || (float)(v12 + 0.00097656) < INFINITY) {
      ++*a4;
    }
    if (v11 == -1) {
      goto LABEL_48;
    }
    ++*a3;
    unint64_t v25 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v11, &__p);
    uint64_t v14 = 0;
    while (1)
    {
      if (!__p)
      {
        if (v25 >= v23) {
          goto LABEL_45;
        }
        ++v14;
LABEL_34:
        if (*(float *)(v22 + 16 * v25 + 8) >= v9) {
          float v9 = *(float *)(v22 + 16 * v25 + 8);
        }
LABEL_36:
        if (v10 >= *(float *)(v22 + 16 * v25 + 8)) {
          float v10 = *(float *)(v22 + 16 * v25 + 8);
        }
LABEL_38:
        if (*(_DWORD *)(v22 + 16 * v25) > v8) {
          signed int v8 = *(_DWORD *)(v22 + 16 * v25);
        }
        goto LABEL_40;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      ++v14;
      if (!__p) {
        goto LABEL_34;
      }
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (*(float *)(v15 + 8) >= v9) {
        float v9 = *(float *)(v15 + 8);
      }
      if (!__p) {
        goto LABEL_36;
      }
      uint64_t v16 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v10 >= *(float *)(v16 + 8)) {
        float v10 = *(float *)(v16 + 8);
      }
      if (!__p) {
        goto LABEL_38;
      }
      signed int v17 = *(_DWORD *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v17 > v8) {
        signed int v8 = v17;
      }
      if (__p)
      {
        signed int v18 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)__p + 32))() + 4);
        if (v18 > v8) {
          signed int v8 = v18;
        }
        if (!__p) {
          goto LABEL_42;
        }
        (*(void (**)(void))(*(void *)__p + 40))();
      }
      else
      {
LABEL_40:
        if (*(_DWORD *)(v22 + 16 * v25 + 4) > v8) {
          signed int v8 = *(_DWORD *)(v22 + 16 * v25 + 4);
        }
LABEL_42:
        ++v25;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
    }
    else
    {
LABEL_45:
      if (v24) {
        --*v24;
      }
    }
    *a2 += v14;
LABEL_48:
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 32))(v26);
    }
    else {
      ++v28;
    }
  }
  if ((int)v28 >= v27) {
    goto LABEL_53;
  }
LABEL_7:
  uint64_t v11 = v28;
  goto LABEL_8;
}

void sub_1B20DAC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~SqueezedFstImpl(void *a1)
{
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~SqueezedFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::HasSequentialStates()
{
  return 1;
}

void fst::SqueezedQuantizationOptions<true,false>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(signed int a1)
{
  unsigned int v1 = __clz(a1);
  if (a1 <= 0) {
    unsigned int v2 = 31;
  }
  else {
    unsigned int v2 = v1;
  }
  if (v2 <= 4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
    int v4 = (void *)fst::cerr(v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_1B20DAE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~SqueezedFstImpl(void *a1)
{
  *a1 = &unk_1F0A3C3A0;
  uint64_t v2 = a1[8];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[10];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[12];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[18];
  a1[18] = 0;
  if (v5) {
    MEMORY[0x1B3EA8670](v5, 0x1000C40451B5BE8);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void *fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A43B48;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::NumInputEpsilons(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 112) - 1 == a2)
  {
    uint64_t v5 = *(void *)(a1 + 120);
    uint64_t v2 = *(void *)(a1 + 72);
    int v10 = *(_DWORD *)(v2 + 4 * a2);
    if (v10 <= 0) {
      int v10 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v10 + 4);
    }
    LODWORD(v5) = v5 - v10 + 1;
    if (!v5) {
      return 0;
    }
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 72);
    int v3 = *(_DWORD *)(v2 + 4 * (a2 + 1));
    if (v3 <= 0) {
      int v3 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v3 + 4);
    }
    int v4 = *(_DWORD *)(v2 + 4 * a2);
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v4 + 4);
    }
    LODWORD(v5) = v3 - v4;
    if (!v5) {
      return 0;
    }
  }
  int v6 = *(_DWORD *)(v2 + 4 * a2);
  if (v6 <= 0) {
    int v6 = *(_DWORD *)(*(void *)(a1 + 104) + 8 * -v6 + 4);
  }
  if ((int)v5 < 1) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v5 = v5;
  signed int v8 = (int *)(12 * (v6 - 1) + *(void *)(a1 + 88) + 4);
  do
  {
    int v9 = *v8;
    v8 += 3;
    if (!v9) {
      ++v7;
    }
    --v5;
  }
  while (v5);
  return v7;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::WriteFst<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>(uint64_t a1)
{
  uint64_t v3 = 0;
  int v2 = 0;
  uint64_t v1 = 0;
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, &v3, &v2, &v1);
}

void sub_1B20DB9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  fst::FstHeader::~FstHeader(&a32);
  uint64_t v45 = a44;
  a44 = 0;
  if (v45) {
    MEMORY[0x1B3EA8670](v45, 0x1000C40451B5BE8);
  }
  _Unwind_Resume(a1);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::InitArcIterator()
{
}

void sub_1B20DBC20(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C402D792D55);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ArcIterator(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_1F0A37690;
  *(void *)(a1 + 8) = a2;
  uint64_t v4 = *(void *)(a2 + 72);
  int v5 = *(_DWORD *)(v4 + 4 * a3);
  int v6 = v5;
  if (v5 <= 0) {
    int v6 = *(_DWORD *)(*(void *)(a2 + 104) + 8 * -v5 + 4);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 88) + 12 * (v6 - 1);
  if (*(_DWORD *)(a2 + 112) - 1 == a3)
  {
    if (v5 <= 0) {
      int v5 = *(_DWORD *)(*(void *)(a2 + 104) + 8 * -v5 + 4);
    }
    uint64_t v8 = *(void *)(a2 + 120) - v5 + 1;
  }
  else
  {
    int v7 = *(_DWORD *)(v4 + 4 * (a3 + 1));
    if (v7 <= 0) {
      int v7 = *(_DWORD *)(*(void *)(a2 + 104) + 8 * -v7 + 4);
    }
    if (v5 <= 0) {
      int v5 = *(_DWORD *)(*(void *)(a2 + 104) + 8 * -v5 + 4);
    }
    uint64_t v8 = v7 - v5;
  }
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(a1);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A37690;
  *(void *)(a1 + 8) = v4;
  int v5 = *(void *)(v4 + 72);
  int v6 = *(_DWORD *)(v5 + 4 * a3);
  int v7 = v6;
  if (v6 <= 0) {
    int v7 = *(_DWORD *)(*(void *)(v4 + 104) + 8 * -v6 + 4);
  }
  *(void *)(a1 + 16) = *(void *)(v4 + 88) + 12 * (v7 - 1);
  if (*(_DWORD *)(v4 + 112) - 1 == a3)
  {
    if (v6 <= 0) {
      int v6 = *(_DWORD *)(*(void *)(v4 + 104) + 8 * -v6 + 4);
    }
    int v9 = *(void *)(v4 + 120) - v6 + 1;
  }
  else
  {
    uint64_t v8 = *(_DWORD *)(v5 + 4 * (a3 + 1));
    if (v8 <= 0) {
      uint64_t v8 = *(_DWORD *)(*(void *)(v4 + 104) + 8 * -v8 + 4);
    }
    if (v6 <= 0) {
      int v6 = *(_DWORD *)(*(void *)(v4 + 104) + 8 * -v6 + 4);
    }
    int v9 = v8 - v6;
  }
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(a1);
  return a1;
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 48);
  if (v1 < *(void *)(result + 40))
  {
    uint64_t v2 = *(void *)(result + 16);
    if ((*(_DWORD *)(result + 56) & 0xF) == 2)
    {
      *(_DWORD *)(result + 28) = *(_DWORD *)(v2 + 12 * v1 + 4);
    }
    else if ((*(_DWORD *)(result + 56) & 0xF) == 1)
    {
      *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = *(_DWORD *)(v2 + 12 * v1 + 4);
    }
    else
    {
      uint64_t v3 = (unsigned int *)(v2 + 12 * v1);
      unint64_t v4 = v3[1] | ((unint64_t)v3[1] << 32);
      unint64_t v5 = *v3 | ((unint64_t)v3[2] << 32);
      *(void *)(result + ++*(_DWORD *)(result + 24) = v4;
      *(void *)(result + 32) = v5;
    }
  }
  return result;
}

void fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~ArcIterator()
{
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Reinit(void *a1, int a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *(void *)(v2 + 72);
  int v4 = *(_DWORD *)(v3 + 4 * a2);
  int v5 = v4;
  if (v4 <= 0) {
    int v5 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v4 + 4);
  }
  a1[2] = *(void *)(v2 + 88) + 12 * (v5 - 1);
  if (*(_DWORD *)(v2 + 112) - 1 == a2)
  {
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v4 + 4);
    }
    uint64_t v7 = *(void *)(v2 + 120) - v4 + 1;
  }
  else
  {
    int v6 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v6 <= 0) {
      int v6 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v6 + 4);
    }
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v4 + 4);
    }
    uint64_t v7 = v6 - v4;
  }
  a1[5] = v7;
  a1[6] = 0;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc((uint64_t)a1);
  return 1;
}

BOOL fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 48) >= *(void *)(a1 + 40);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Value_(uint64_t a1)
{
  return a1 + 24;
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Next_(uint64_t result)
{
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(result);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 48) = 0;
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(result);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 48) = a2;
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(result);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Flags_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFlags_(uint64_t result, char a2, int a3)
{
  int v3 = *(_DWORD *)(result + 56);
  int v4 = v3 & ~a3 | a2 & 0xF;
  *(_DWORD *)(result + 56) = v4;
  if (v3 != 15 && v3 != v4) {
    return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(result);
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>()
{
  uint64_t v0 = operator new(0x28uLL);
  std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,0>(v0);
}

void sub_1B20DBF5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E148;
  fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::SqueezedFst();
}

void sub_1B20DBFB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E148;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E148;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::SqueezedFst()
{
}

void sub_1B20DC0D8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40CC721279);
  _Unwind_Resume(a1);
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~SqueezedFst(void *a1)
{
  fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 136);
}

float fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(*(void *)(v2 + 72) + 4 * a2);
  if (v3 <= 0) {
    return *(float *)(*(void *)(v2 + 104) + 8 * -v3);
  }
  else {
    return INFINITY;
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v2 + 112) - 1 == a2)
  {
    int v7 = *(_DWORD *)(*(void *)(v2 + 72) + 4 * a2);
    if (v7 <= 0) {
      int v7 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v7 + 4);
    }
    return *(void *)(v2 + 120) - v7 + 1;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 72);
    int v4 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v4 + 4);
    }
    int v5 = *(_DWORD *)(v3 + 4 * a2);
    if (v5 <= 0) {
      int v5 = *(_DWORD *)(*(void *)(v2 + 104) + 8 * -v5 + 4);
    }
    return v4 - v5;
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

char *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::GetArcs(uint64_t a1, int a2, void **a3, int a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v6 + 112) - 1 == a2)
  {
    uint64_t v7 = *(void *)(v6 + 72);
    int v32 = *(_DWORD *)(v7 + 4 * a2);
    if (v32 <= 0) {
      int v32 = *(_DWORD *)(*(void *)(v6 + 104) + 8 * -v32 + 4);
    }
    uint64_t v10 = *(void *)(v6 + 120) - v32 + 1;
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 72);
    int v8 = *(_DWORD *)(v7 + 4 * (a2 + 1));
    if (v8 <= 0) {
      int v8 = *(_DWORD *)(*(void *)(v6 + 104) + 8 * -v8 + 4);
    }
    int v9 = *(_DWORD *)(v7 + 4 * a2);
    if (v9 <= 0) {
      int v9 = *(_DWORD *)(*(void *)(v6 + 104) + 8 * -v9 + 4);
    }
    uint64_t v10 = v8 - v9;
  }
  uint64_t v11 = 2;
  if (!a4) {
    uint64_t v11 = 0;
  }
  unint64_t v12 = v10 + v11;
  if ((unint64_t)a3[1] < v10 + v11)
  {
    if (*a3) {
      free(*a3);
    }
    uint64_t v33 = 0x4000;
    if (v12 > 0x4000) {
      uint64_t v33 = v12;
    }
    a3[1] = (void *)v33;
    float result = (char *)malloc_type_malloc(16 * v33, 0x1000040451B5BE8uLL);
    *a3 = result;
    a3[2] = result;
    uint64_t v7 = *(void *)(v6 + 72);
    uint64_t v13 = result;
  }
  else
  {
    uint64_t v13 = (char *)a3[2];
    float result = (char *)*a3;
  }
  a3[3] = &v13[16 * v12];
  int v15 = *(_DWORD *)(v7 + 4 * a2);
  if (v15 <= 0) {
    int v15 = *(_DWORD *)(*(void *)(v6 + 104) + 8 * -v15 + 4);
  }
  if (v10)
  {
    uint64_t v16 = 12 * (v15 - 1);
    uint64_t v17 = *(void *)(v6 + 144);
    float v18 = *(float *)(v17 + 4);
    uint64_t v21 = v17 + 8;
    uint64_t v20 = *(void *)(v17 + 8);
    unint64_t v19 = *(void *)(v21 + 8);
    unint64_t v22 = 63 - v20;
    unint64_t v23 = (unint64_t)(63 - v20) >> 1;
    uint64_t v24 = v20 + 1;
    uint64_t v25 = v24 + (v22 >> 1);
    int v26 = ~(-1 << v23);
    int v27 = (unint64_t *)(result + 8);
    unsigned int v28 = (_DWORD *)(v16 + *(void *)(v6 + 88) + 8);
    do
    {
      unint64_t v29 = *((void *)v28 - 1);
      float v30 = (float)((v29 & v19) >> 1);
      if (v29) {
        float v30 = -v30;
      }
      unsigned int v31 = *v28;
      v28 += 3;
      *(v27 - 1) = (v29 >> v25) | ((unint64_t)((v29 >> v24) & v26) << 32);
      *int v27 = COERCE_UNSIGNED_INT(v18 * v30) | ((unint64_t)v31 << 32);
      v27 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Copy()
{
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v2 + 112);
  return result;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::InitArcIterator()
{
}

BOOL fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::IsMemoryMapped(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  return *(void *)(v1[8] + 16) && *(void *)(v1[10] + 16) && *(void *)(v1[12] + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 112);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::SqueezedFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  int v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3C368;
  *(_DWORD *)(a1 + ++*(void *)(result + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::TypeString(&__p);
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v5);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v6);
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (void *)(a1 + 120), (int *)(a1 + 112), (void *)(a1 + 128));
}

void sub_1B20DCBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v19 = *(void *)(v17 + 144);
  *(void *)(v17 + 144) = 0;
  if (v19) {
    MEMORY[0x1B3EA8670](v19, 0x1000C40504FFAC1);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v17);
  _Unwind_Resume(a1);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, void *a2, int *a3, void *a4)
{
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  unsigned int v28 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v26);
  signed int v8 = 0;
  float v9 = -INFINITY;
  float v10 = INFINITY;
  while (v26)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v26 + 16))(v26))
    {
      if (v26) {
        (*(void (**)(void))(*(void *)v26 + 8))();
      }
LABEL_53:
      if ((unint64_t)(12 * *a2 + 4 * *a3 + 8 * *a4) >> 31)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
        uint64_t v19 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)&__p);
        uint64_t v20 = (void *)fst::cerr(v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Too much data for squeezed file format: ", 40);
        std::ostream::operator<<();
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
        if (SHIBYTE(v23) < 0) {
          operator delete(__p);
        }
      }
      fst::SqueezedQuantizationOptions<false,true>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v8);
    }
    if (!v26) {
      goto LABEL_7;
    }
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v26 + 24))();
LABEL_8:
    float v12 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v11);
    if (v12 > INFINITY || (float)(v12 + 0.00097656) < INFINITY) {
      ++*a4;
    }
    if (v11 == -1) {
      goto LABEL_48;
    }
    ++*a3;
    unint64_t v25 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v11, &__p);
    uint64_t v14 = 0;
    while (1)
    {
      if (!__p)
      {
        if (v25 >= v23) {
          goto LABEL_45;
        }
        ++v14;
LABEL_34:
        if (*(float *)(v22 + 16 * v25 + 8) >= v9) {
          float v9 = *(float *)(v22 + 16 * v25 + 8);
        }
LABEL_36:
        if (v10 >= *(float *)(v22 + 16 * v25 + 8)) {
          float v10 = *(float *)(v22 + 16 * v25 + 8);
        }
LABEL_38:
        if (*(_DWORD *)(v22 + 16 * v25) > v8) {
          signed int v8 = *(_DWORD *)(v22 + 16 * v25);
        }
        goto LABEL_40;
      }
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p)) {
        break;
      }
      ++v14;
      if (!__p) {
        goto LABEL_34;
      }
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (*(float *)(v15 + 8) >= v9) {
        float v9 = *(float *)(v15 + 8);
      }
      if (!__p) {
        goto LABEL_36;
      }
      uint64_t v16 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v10 >= *(float *)(v16 + 8)) {
        float v10 = *(float *)(v16 + 8);
      }
      if (!__p) {
        goto LABEL_38;
      }
      signed int v17 = *(_DWORD *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
      if (v17 > v8) {
        signed int v8 = v17;
      }
      if (__p)
      {
        signed int v18 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)__p + 32))() + 4);
        if (v18 > v8) {
          signed int v8 = v18;
        }
        if (!__p) {
          goto LABEL_42;
        }
        (*(void (**)(void))(*(void *)__p + 40))();
      }
      else
      {
LABEL_40:
        if (*(_DWORD *)(v22 + 16 * v25 + 4) > v8) {
          signed int v8 = *(_DWORD *)(v22 + 16 * v25 + 4);
        }
LABEL_42:
        ++v25;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(void *)__p + 8))();
    }
    else
    {
LABEL_45:
      if (v24) {
        --*v24;
      }
    }
    *a2 += v14;
LABEL_48:
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 32))(v26);
    }
    else {
      ++v28;
    }
  }
  if ((int)v28 >= v27) {
    goto LABEL_53;
  }
LABEL_7:
  uint64_t v11 = v28;
  goto LABEL_8;
}

void sub_1B20DD1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~SqueezedFstImpl(void *a1)
{
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~SqueezedFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::HasSequentialStates()
{
  return 1;
}

std::string *fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::TypeString@<X0>(std::string *a1@<X8>)
{
  return std::string::append(a1, "_transducer");
}

void sub_1B20DD304(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void fst::SqueezedQuantizationOptions<false,true>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(signed int a1)
{
  unsigned int v1 = __clz(a1);
  if (a1 <= 0) {
    unsigned int v2 = 31;
  }
  else {
    unsigned int v2 = v1;
  }
  if (v2 <= 4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
    int v4 = (void *)fst::cerr(v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}