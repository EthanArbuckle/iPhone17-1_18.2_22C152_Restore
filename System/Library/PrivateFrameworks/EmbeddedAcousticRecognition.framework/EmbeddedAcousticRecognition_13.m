void sub_1B2204C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::anonymous namespace'::TranslationPhraseSpan>::emplace_back<quasar::anonymous namespace'::TranslationPhraseSpan&>(uint64_t *a1, uint64_t a2)
{
  v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - *a1) >> 3);
    if ((unint64_t)(v9 + 1) > 0x492492492492492) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v12 = 0x492492492492492;
    }
    else {
      unint64_t v12 = v11;
    }
    v18 = v4;
    if (v12) {
    else
    }
      uint64_t v13 = 0;
    unint64_t v14 = v12;
    v15 = (void *)(v12 + 56 * v9);
    unint64_t v17 = v12 + 56 * v13;
    v16 = v15 + 7;
    uint64_t v8 = a1[1];
  }
  else
  {
    uint64_t v8 = v6 + 56;
    a1[1] = v6 + 56;
  }
  a1[1] = v8;
  return result;
}

void sub_1B2204DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<quasar::AlternativeSelectionSpan::Range,std::vector<quasar::anonymous namespace'::TranslationPhraseSpan>>,std::__map_value_compare<quasar::AlternativeSelectionSpan::Range,std::__value_type<quasar::AlternativeSelectionSpan::Range,std::vector<quasar::anonymous namespace'::TranslationPhraseSpan>>,std::less<quasar::AlternativeSelectionSpan::Range>,true>,std::allocator<std::__value_type<quasar::AlternativeSelectionSpan::Range,std::vector<quasar::anonymous namespace'::TranslationPhraseSpan>>>>::__find_equal<quasar::AlternativeSelectionSpan::Range>(uint64_t a1, void *a2, _DWORD *a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (void *)v4;
        uint64_t v8 = (_DWORD *)(v4 + 32);
        if (!quasar::operator<(a3, (_DWORD *)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!quasar::operator<(v8, a3)) {
        break;
      }
      unint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__emplace_unique_key_args<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        return (uint64_t *)v8;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = a3[1];
    v10[4] = *a3;
    v10[5] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
  }
  return v10;
}

uint64_t *std::allocator_traits<std::allocator<quasar::anonymous namespace'::TranslationPhraseSpan>>::construct[abi:ne180100]<quasar::anonymous namespace'::TranslationPhraseSpan,quasar::anonymous namespace'::TranslationPhraseSpan&,void>(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  std::vector<quasar::AlternativeSelectionSpan::Range>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Range*,quasar::AlternativeSelectionSpan::Range*>(a1 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  return std::set<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::set[abi:ne180100](a1 + 4, a2 + 32);
}

void sub_1B2204F90(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<quasar::AlternativeSelectionSpan::Range,std::vector<quasar::anonymous namespace'::TranslationPhraseSpan>>,std::__map_value_compare<quasar::AlternativeSelectionSpan::Range,std::__value_type<quasar::AlternativeSelectionSpan::Range,std::vector<quasar::anonymous namespace'::TranslationPhraseSpan>>,std::less<quasar::AlternativeSelectionSpan::Range>,true>,std::allocator<std::__value_type<quasar::AlternativeSelectionSpan::Range,std::vector<quasar::anonymous namespace'::TranslationPhraseSpan>>>>::destroy(void **a1)
{
  if (a1)
  {
    v2 = a1 + 5;
    operator delete(a1);
  }
}

uint64_t std::vector<std::unordered_set<int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 40 * v6;
    std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B22050B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<quasar::AlternativeSelectionSpan>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<quasar::AlternativeSelectionSpan>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B2205164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::AlternativeSelectionSpan>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_set<int>>::emplace_back<std::unordered_set<int>>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v9 + 1 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    v15 = v13;
    v16 = &v13[40 * v9];
    v18 = &v13[40 * v12];
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table((uint64_t)v16, a2);
    unint64_t v17 = v16 + 40;
    std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v8;
  return v8 - 40;
}

void sub_1B220528C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<quasar::AlternativeSelectionSpan>>::emplace_back<std::vector<quasar::AlternativeSelectionSpan>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  unint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    unint64_t v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)unint64_t v14 = 0;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__swap_out_circular_buffer(a1, v17);
    uint64_t v8 = (void *)a1[1];
    std::__split_buffer<std::vector<quasar::AlternativeSelectionSpan>>::~__split_buffer(v17);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1B22053D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::AlternativeSelectionSpan>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::AlternativeSelectionSpan>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<quasar::AlternativeSelectionSpan>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void **std::vector<quasar::AlternativeSelectionSpan::Alternative>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<quasar::AlternativeSelectionSpan::Alternative>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B22056AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *quasar::anonymous namespace'::ProcessedTranslation::getSpanForSourceRange(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 24);
  v3 = *(_DWORD **)(a1 + 32);
  if (v2 == v3)
  {
    uint64_t v6 = *(_DWORD **)(a1 + 24);
  }
  else
  {
    while (!quasar::operator==(v2, a2))
    {
      v2 += 14;
      if (v2 == v3)
      {
        uint64_t v2 = v3;
        break;
      }
    }
    uint64_t v6 = v2;
    uint64_t v2 = *(_DWORD **)(a1 + 32);
  }
  if (v6 == v2) {
    return 0;
  }
  else {
    return v6;
  }
}

void quasar::anonymous namespace'::getDifferentValuesForSameDescriptions(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v12[0] = 0;
  v12[1] = 0;
  unint64_t v11 = v12;
  std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::insert_iterator<std::set<int>>>((void *)v15, (void *)&v15 + 1, v13, &v14, (uint64_t)&v11, (uint64_t)v12, (uint64_t)&v17);
  std::__tree<int>::destroy((uint64_t)&v13, v14);
  std::__tree<int>::destroy((uint64_t)&v15, *((void **)&v15 + 1));
  uint64_t v6 = v11;
  if (v11 != v12)
  {
    do
    {
      int v7 = v19;
      if (v19) {
        BOOL v8 = v16 == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        if ((v19 != 0) == (v16 != 0))
        {
          if (v16) {
            goto LABEL_12;
          }
          goto LABEL_14;
        }
      }
      else if (v17 == (void)v15)
      {
        goto LABEL_12;
      }
      std::vector<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::emplace_back<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&>(a3, &v15);
      if (v16)
      {
LABEL_12:
        if (*((void *)&v15 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
        }
      }
LABEL_14:
      if (v7 && v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      uint64_t v9 = v6[1];
      if (v9)
      {
        do
        {
          unint64_t v10 = (void **)v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          unint64_t v10 = (void **)v6[2];
          BOOL v8 = *v10 == v6;
          uint64_t v6 = v10;
        }
        while (!v8);
      }
      uint64_t v6 = v10;
    }
    while (v10 != v12);
  }
  std::__tree<int>::destroy((uint64_t)&v11, v12[0]);
}

void sub_1B22058C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void **a12, void *a13, uint64_t a14, char a15, void *a16)
{
}

void quasar::anonymous namespace'::ProcessedTranslation::getSpansWithoutSource(uint64_t a1@<X0>, _DWORD *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *(_DWORD **)(a1 + 24);
  uint64_t v4 = *(_DWORD **)(a1 + 32);
  if (v3 != v4)
  {
    int v7 = 0;
    do
    {
      if (!quasar::operator==(v3, a2))
      {
        unint64_t v8 = (unint64_t)a3[2];
        if ((unint64_t)v7 >= v8)
        {
          unint64_t v10 = *a3;
          uint64_t v11 = (v7 - *a3) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            if (v14 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v15 = (char *)operator new(8 * v14);
          }
          else
          {
            long long v15 = 0;
          }
          char v16 = &v15[8 * v11];
          *(void *)char v16 = v3;
          uint64_t v9 = v16 + 8;
          if (v7 != v10)
          {
            do
            {
              uint64_t v17 = *((void *)v7 - 1);
              v7 -= 8;
              *((void *)v16 - 1) = v17;
              v16 -= 8;
            }
            while (v7 != v10);
            int v7 = *a3;
          }
          *a3 = v16;
          a3[1] = v9;
          a3[2] = &v15[8 * v14];
          if (v7) {
            operator delete(v7);
          }
        }
        else
        {
          *(void *)int v7 = v3;
          uint64_t v9 = v7 + 8;
        }
        a3[1] = v9;
        int v7 = v9;
      }
      v3 += 14;
    }
    while (v3 != v4);
  }
}

void sub_1B2205A84(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::anonymous namespace'::TranslationPhraseSpan::getAltValue@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v3 = *(void **)(this + 32);
  uint64_t v4 = (void *)(this + 40);
  if (v3 != (void *)(this + 40))
  {
    while (1)
    {
      uint64_t v5 = *(unsigned int *)(v3[4] + 24);
      if (v5 == -1) {
        uint64_t v5 = -1;
      }
      if (v5 == a2) {
        break;
      }
      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
      if (v7 == v4) {
        goto LABEL_15;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_15:
    char v11 = 0;
    *(unsigned char *)a3 = 0;
  }
  else
  {
    uint64_t v9 = v3[5];
    *(void *)a3 = v3[4];
    *(void *)(a3 + 8) = v9;
    if (v9)
    {
      unint64_t v10 = (atomic_ullong *)(v9 + 8);
      char v11 = 1;
      atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
    else
    {
      char v11 = 1;
    }
  }
  *(unsigned char *)(a3 + 16) = v11;
  return this;
}

void *std::vector<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::emplace_back<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&>(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  int v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v4, v13);
    long long v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    std::vector<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__swap_out_circular_buffer(a1, v19);
    uint64_t v9 = (void *)a1[1];
    std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v19);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_1B2205C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *quasar::anonymous namespace'::TranslationPhraseSpan::getAltTypes@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  v3 = (uint64_t *)this[4];
  uint64_t v4 = this + 5;
  if (v3 != this + 5)
  {
    do
    {
      uint64_t v5 = *(unsigned int *)(v3[4] + 24);
      if (v5 == -1) {
        uint64_t v5 = -1;
      }
      uint64_t v9 = v5;
      this = std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>((uint64_t **)a2, (unint64_t *)&v9, &v9);
      unint64_t v6 = (uint64_t *)v3[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          unint64_t v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (uint64_t *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  return this;
}

void sub_1B2205D18(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

double std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::insert_iterator<std::set<int>>>@<D0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)&long long v23 = a5;
  *((void *)&v23 + 1) = a6;
  if (a1 != a2)
  {
    uint64_t v10 = a3;
    if (a3 != a4)
    {
      unint64_t v11 = a1;
      do
      {
        unint64_t v12 = v11[4];
        unint64_t v13 = v10[4];
        if (v12 >= v13)
        {
          if (v13 >= v12)
          {
            int v22 = v11[4];
            std::insert_iterator<std::set<int>>::operator=[abi:ne180100]((uint64_t)&v23, &v22);
            long long v17 = (void *)v11[1];
            if (v17)
            {
              do
              {
                uint64_t v16 = v17;
                long long v17 = (void *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                uint64_t v16 = (void *)v11[2];
                BOOL v18 = *v16 == (void)v11;
                unint64_t v11 = v16;
              }
              while (!v18);
            }
          }
          else
          {
            uint64_t v16 = v11;
          }
          unsigned __int8 v19 = (void *)v10[1];
          if (v19)
          {
            do
            {
              uint64_t v10 = v19;
              unsigned __int8 v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = v10;
              uint64_t v10 = (void *)v10[2];
            }
            while ((void *)*v10 != v20);
          }
          unint64_t v11 = v16;
        }
        else
        {
          unint64_t v14 = (void *)v11[1];
          if (v14)
          {
            do
            {
              unint64_t v11 = v14;
              unint64_t v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              long long v15 = v11;
              unint64_t v11 = (void *)v11[2];
            }
            while ((void *)*v11 != v15);
          }
        }
      }
      while (v11 != a2 && v10 != a4);
    }
  }
  *(void *)a7 = a2;
  *(void *)(a7 + 8) = a4;
  double result = *(double *)&v23;
  *(_OWORD *)(a7 + 16) = v23;
  return result;
}

uint64_t std::insert_iterator<std::set<int>>::operator=[abi:ne180100](uint64_t a1, int *a2)
{
  v3 = std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t std::vector<quasar::AlternativeSelectionSpan::Alternative>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,std::reverse_iterator<quasar::AlternativeSelectionSpan::Alternative*>,std::reverse_iterator<quasar::AlternativeSelectionSpan::Alternative*>,std::reverse_iterator<quasar::AlternativeSelectionSpan::Alternative*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,std::reverse_iterator<quasar::AlternativeSelectionSpan::Alternative*>,std::reverse_iterator<quasar::AlternativeSelectionSpan::Alternative*>,std::reverse_iterator<quasar::AlternativeSelectionSpan::Alternative*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *a3 = 0;
      a3[1] = 0;
      *(void *)(v7 - 8) = a3[2];
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,std::reverse_iterator<quasar::AlternativeSelectionSpan::Alternative*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,std::reverse_iterator<quasar::AlternativeSelectionSpan::Alternative*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>,std::reverse_iterator<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::__emplace_unique_key_args<std::string,std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>>(uint64_t a1, unsigned __int8 *a2, long long *a3, uint64_t a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    long long v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::__construct_node_hash<std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    void *v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_1B220628C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::__construct_node_hash<std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x40uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>::pair[abi:ne180100]<std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>,0>((std::string *)(v10 + 16), a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_1B2206314(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>::pair[abi:ne180100]<std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  this[1].__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void *std::vector<quasar::AlternativeSelectionSpan::Alternative>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::AlternativeSelectionSpan::Alternative const*>,std::__wrap_iter<quasar::AlternativeSelectionSpan::Alternative const*>>(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  long long v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        unint64_t v21 = &a3[3 * a5];
      }
      else
      {
        unint64_t v21 = &a3[(uint64_t)(v12 - (void)a2) >> 3];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<quasar::AlternativeSelectionSpan::Alternative>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[3 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      v26[4] = v9;
      if (v18) {
        float v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v9, v18);
      }
      else {
        float v19 = 0;
      }
      unint64_t v22 = (uint64_t *)&v19[24 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v26[3] = &v19[24 * v18];
      size_t v23 = &v22[3 * a5];
      do
      {
        *unint64_t v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22[2] = v7[2];
        v22 += 3;
        v7 += 3;
      }
      while (v22 != v23);
      v26[2] = v23;
      long long v5 = (void *)std::vector<quasar::AlternativeSelectionSpan::Alternative>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_1B2206618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::AlternativeSelectionSpan::Alternative>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(void *)unint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      v8 += 24;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *>((uint64_t)&v11, a2, v7, v6);
}

uint64_t std::vector<quasar::AlternativeSelectionSpan::Alternative>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,std::reverse_iterator<quasar::AlternativeSelectionSpan::Alternative*>,std::reverse_iterator<quasar::AlternativeSelectionSpan::Alternative*>,std::reverse_iterator<quasar::AlternativeSelectionSpan::Alternative*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>(v7, (uint64_t)a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      long long v9 = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      uint64_t v10 = *(std::__shared_weak_count **)(a4 + v7 - 16);
      *(_OWORD *)(a4 + v7 - 24) = v9;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      *(void *)(a4 + v7 - 8) = *(void *)(v8 - 8);
      v7 -= 24;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(v4 + 16) = *(void *)(a2 + 16);
      v4 += 24;
      a2 += 24;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,quasar::AlternativeSelectionSpan::Alternative*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::vector<quasar::AlternativeSelectionSpan::Alternative>::__emplace_back_slow_path<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&,int &,int &>(uint64_t *a1, uint64_t *a2, int *a3, int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v6;
  }
  unint64_t v18 = a1 + 2;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 2), v10);
  }
  else {
    uint64_t v11 = 0;
  }
  unint64_t v14 = v11;
  unint64_t v15 = &v11[24 * v5];
  uint64_t v17 = &v11[24 * v10];
  std::allocator<quasar::AlternativeSelectionSpan::Alternative>::construct[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&,int &,int &>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  unint64_t v16 = v15 + 24;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer(&v14);
  return v12;
}

void sub_1B2206A00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::AlternativeSelectionSpan::Alternative>::construct[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&,int &,int &>(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4, int *a5)
{
  uint64_t v6 = *a3;
  unint64_t v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    int v7 = *a4;
    int v8 = *a5;
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *(_DWORD *)(a2 + 16) = v7;
    *(_DWORD *)(a2 + 20) = v8;
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    int v9 = *a4;
    int v10 = *a5;
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = v9;
    *(_DWORD *)(a2 + 20) = v10;
  }
}

uint64_t std::vector<quasar::AlternativeSelectionSpan>::__emplace_back_slow_path<quasar::AlternativeSelectionSpan::Range const&,quasar::AlternativeSelectionSpan::Range const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, long long *a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x333333333333333) {
    unint64_t v13 = 0x666666666666666;
  }
  else {
    unint64_t v13 = v7;
  }
  v23[4] = a1 + 2;
  unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v11, v13);
  unint64_t v15 = &v14[40 * v6];
  v23[0] = v14;
  v23[1] = v15;
  v23[3] = &v14[40 * v16];
  uint64_t v17 = *a2;
  uint64_t v18 = *a3;
  uint64_t v19 = *((void *)a4 + 2);
  long long v20 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)unint64_t v15 = v17;
  *((void *)v15 + 1) = v18;
  *((_OWORD *)v15 + 1) = v20;
  *((void *)v15 + 4) = v19;
  memset(v24, 0, sizeof(v24));
  unint64_t v25 = (void **)v24;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v25);
  v23[2] = v15 + 40;
  std::vector<quasar::AlternativeSelectionSpan>::__swap_out_circular_buffer(a1, v23);
  uint64_t v21 = a1[1];
  std::__split_buffer<quasar::AlternativeSelectionSpan>::~__split_buffer(v23);
  return v21;
}

void sub_1B2206B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::AlternativeSelectionSpan>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::AlternativeSelectionSpan>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    uint64_t v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v13 + 1) - 40;
      *((void *)&v13 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    uint64_t v8 = v13;
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = (void **)(v1 + 16);
    std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 40;
  }
}

void **std::__split_buffer<quasar::AlternativeSelectionSpan>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::AlternativeSelectionSpan>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    uint64_t v4 = (void **)(i - 24);
    std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

void *std::pair<std::vector<std::unordered_set<int>>,std::vector<std::vector<quasar::AlternativeSelectionSpan>>>::pair[abi:ne180100]<std::vector<std::unordered_set<int>>&,std::vector<std::vector<quasar::AlternativeSelectionSpan>>&,0>(void *a1, uint64_t *a2, uint64_t **a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::unordered_set<int>>::__init_with_size[abi:ne180100]<std::unordered_set<int>*,std::unordered_set<int>*>(a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__init_with_size[abi:ne180100]<std::vector<quasar::AlternativeSelectionSpan>*,std::vector<quasar::AlternativeSelectionSpan>*>(a1 + 3, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  return a1;
}

void sub_1B2206E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::unordered_set<int>>::__init_with_size[abi:ne180100]<std::unordered_set<int>*,std::unordered_set<int>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_set<int>>,std::unordered_set<int>*,std::unordered_set<int>*,std::unordered_set<int>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B2206ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_set<int>>,std::unordered_set<int>*,std::unordered_set<int>*,std::unordered_set<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::unordered_set<int>::unordered_set(a4 + v7, a2 + v7);
      v7 += 40;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B2206F4C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 40;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + v2);
      v2 -= 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__init_with_size[abi:ne180100]<std::vector<quasar::AlternativeSelectionSpan>*,std::vector<quasar::AlternativeSelectionSpan>*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::vector<quasar::AlternativeSelectionSpan>*,std::vector<quasar::AlternativeSelectionSpan>*,std::vector<quasar::AlternativeSelectionSpan>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B2206FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::vector<quasar::AlternativeSelectionSpan>*,std::vector<quasar::AlternativeSelectionSpan>*,std::vector<quasar::AlternativeSelectionSpan>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  char v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<quasar::AlternativeSelectionSpan>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(v4, *v6, v6[1], 0xCCCCCCCCCCCCCCCDLL * ((v6[1] - *v6) >> 3));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::vector<quasar::AlternativeSelectionSpan>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B22070A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::vector<quasar::AlternativeSelectionSpan>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::vector<quasar::AlternativeSelectionSpan>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::vector<quasar::AlternativeSelectionSpan>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::TranslationPhraseInternal>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x8F5C28F5C28F5C29 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x147AE147AE147AFLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 200 * v6;
    std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B220725C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,int const&,unsigned long>(uint64_t **a1, int *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    int v9 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (uint64_t **)v7;
        int v11 = *((_DWORD *)v7 + 7);
        if (v9 >= v11) {
          break;
        }
        uint64_t v7 = *v10;
        uint64_t v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      uint64_t v7 = v10[1];
      if (!v7)
      {
        uint64_t v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v10 = a1 + 1;
LABEL_10:
    long long v12 = (uint64_t *)operator new(0x28uLL);
    uint64_t v13 = *a4;
    *((_DWORD *)v12 + 7) = *a3;
    *((_DWORD *)v12 + 8) = v13;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v8, v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t std::vector<quasar::TranslationPhraseInternal>::__emplace_back_slow_path<quasar::TranslationPhraseInternal>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x147AE147AE147AELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8F5C28F5C28F5C29 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xA3D70A3D70A3D7) {
    unint64_t v9 = 0x147AE147AE147AELL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  unint64_t v14 = &v10[200 * v4];
  uint64_t v16 = &v10[200 * v9];
  quasar::TranslationPhraseInternal::TranslationPhraseInternal((uint64_t)v14, a2);
  unint64_t v15 = v14 + 200;
  std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B2207440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::LinkAlternativesOptions::~LinkAlternativesOptions(quasar::LinkAlternativesOptions *this)
{
  *((void *)this + 21) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 288, *((char **)this + 37));
  *((void *)this + 21) = &unk_1F0A52FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 247) < 0) {
    operator delete(*((void **)this + 28));
  }
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  *((void *)this + 2) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 136, *((char **)this + 18));
  *((void *)this + 2) = &unk_1F0A52FB8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

void quasar::TextSanitizer::TextSanitizer(quasar::TextSanitizer *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F0A52660;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[1],0>(v2, "ـ", "");
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)this + 80, (unsigned __int8 *)v2, 1);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  operator new();
}

void sub_1B22077F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v25);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v24);
  v27 = (std::__shared_weak_count *)v23[8];
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  v28 = (std::__shared_weak_count *)v23[6];
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  v29 = (std::__shared_weak_count *)v23[4];
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  v30 = (std::__shared_weak_count *)v23[2];
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(a1);
}

void quasar::TextSanitizer::init(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 72))
  {
    int v3 = 0;
    uint64_t v2 = (UErrorCode *)&v3;
    std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,char const(&)[17],UErrorCode *,void>((uint64_t)&v1, "[^\\u0000-\\uFFEF]", &v2);
  }
  memset(v4, 0, sizeof(v4));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "TextSanitizer is already initialized");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
}

void sub_1B2207B10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B2207B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

void quasar::TextSanitizer::~TextSanitizer(quasar::TextSanitizer *this)
{
  *(void *)this = &unk_1F0A52660;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 80);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  char v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t quasar::TextSanitizer::sanitize(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 72) != 1)
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long c = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&c);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&c, "TextSanitizer is not initialized");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&c);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::size_type v2 = *(void *)(a2 + 8);
    if (v2)
    {
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a2, v2);
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    std::string v35 = *(std::string *)a2;
LABEL_7:
    char v3 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    }
    if (!size) {
LABEL_44:
    }
      operator new();
    std::string::size_type v5 = 0;
    unsigned int v6 = SHIBYTE(v35.__r_.__value_.__r.__words[2]) >> 31;
    while (1)
    {
      std::string::size_type v7 = v35.__r_.__value_.__r.__words[0];
      if (v6) {
        unint64_t v8 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      else {
        unint64_t v8 = &v35;
      }
      int v9 = v8->__r_.__value_.__s.__data_[v5];
      if (v9 == 13 || v9 == 10)
      {
        v8->__r_.__value_.__s.__data_[v5] = 32;
        char v3 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
        std::string::size_type v7 = v35.__r_.__value_.__r.__words[0];
      }
      if (v3 >= 0) {
        uint64_t v11 = &v35;
      }
      else {
        uint64_t v11 = (std::string *)v7;
      }
      unsigned int v12 = v11->__r_.__value_.__s.__data_[v5];
      if (v12 > 0x1F) {
        goto LABEL_30;
      }
      if (v12 > 0xD || ((1 << v12) & 0x2600) == 0) {
        break;
      }
LABEL_38:
      ++v5;
      char v3 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
      unsigned int v6 = SHIBYTE(v35.__r_.__value_.__r.__words[2]) >> 31;
      std::string::size_type v16 = v35.__r_.__value_.__l.__size_;
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v16 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
      }
      if (v16 <= v5) {
        goto LABEL_44;
      }
    }
    v11->__r_.__value_.__s.__data_[v5] = 32;
LABEL_30:
    BOOL v14 = v12 > 0x1B || ((1 << v12) & 0xA12000C) == 0;
    if (!v14 || v12 == 127)
    {
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v15 = &v35;
      }
      else {
        unint64_t v15 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      v15->__r_.__value_.__s.__data_[v5] = 32;
    }
    goto LABEL_38;
  }
  if (quasar::gLogLevel >= 6)
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long c = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&c);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&c, (uint64_t)"Empty string received.", 22);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&c);
  }
  return 2;
}

void sub_1B22087A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

void sub_1B22087B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

void sub_1B220896C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&STACK[0x2F0]);
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  _Unwind_Resume(a1);
}

void quasar::BasicTextSanitizer::~BasicTextSanitizer(quasar::BasicTextSanitizer *this)
{
  quasar::TextSanitizer::~TextSanitizer(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::BasicTextSanitizer::sanitizeImpl(int a1, const std::string *a2, std::string *this)
{
  std::string::operator=(this, a2);
  return 0;
}

void std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,char const(&)[17],UErrorCode *,void>(uint64_t a1, const char *a2, UErrorCode **a3)
{
  std::string::size_type v5 = operator new(0x20uLL);
  std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const(&)[17],UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(v5, a2, a3);
}

void sub_1B2208A78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const(&)[17],UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(void *a1, const char *a2, UErrorCode **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61830;
  quasar::URegularExpressionWrapper::URegularExpressionWrapper((quasar::URegularExpressionWrapper *)(a1 + 3), a2, *a3);
}

void sub_1B2208AD8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,char const(&)[6],UErrorCode *,void>(uint64_t a1, const char *a2, UErrorCode **a3)
{
  std::string::size_type v5 = operator new(0x20uLL);
  std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(v5, a2, a3);
}

void sub_1B2208B3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(void *a1, const char *a2, UErrorCode **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61830;
  quasar::URegularExpressionWrapper::URegularExpressionWrapper((quasar::URegularExpressionWrapper *)(a1 + 3), a2, *a3);
}

void sub_1B2208B9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,char const(&)[9],UErrorCode *,void>(uint64_t a1, const char *a2, UErrorCode **a3)
{
  std::string::size_type v5 = operator new(0x20uLL);
  std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const(&)[9],UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(v5, a2, a3);
}

void sub_1B2208C00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const(&)[9],UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(void *a1, const char *a2, UErrorCode **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61830;
  quasar::URegularExpressionWrapper::URegularExpressionWrapper((quasar::URegularExpressionWrapper *)(a1 + 3), a2, *a3);
}

void sub_1B2208C60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void quasar::EagerTriggerConfig::Register(uint64_t a1, uint64_t a2, const void **a3)
{
  if (*((char *)a3 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v5 = (size_t)a3[1];
  }
  if (v5)
  {
    std::string::size_type v7 = (char *)&v22;
    std::string::basic_string[abi:ne180100]((uint64_t)&v22, v5 + 1);
    if ((v24 & 0x80u) != 0) {
      std::string::size_type v7 = (char *)v22;
    }
    if (*((char *)a3 + 23) >= 0) {
      unint64_t v8 = a3;
    }
    else {
      unint64_t v8 = *a3;
    }
    memmove(v7, v8, v5);
    *(_WORD *)&v7[v5] = 45;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "");
  }
  if ((v24 & 0x80u) == 0) {
    size_t v9 = v24;
  }
  else {
    size_t v9 = v23;
  }
  uint64_t v10 = v20;
  std::string::basic_string[abi:ne180100]((uint64_t)v20, v9 + 17);
  if (v21 < 0) {
    uint64_t v10 = (void **)v20[0];
  }
  if (v9)
  {
    if ((v24 & 0x80u) == 0) {
      uint64_t v11 = &v22;
    }
    else {
      uint64_t v11 = v22;
    }
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "silence-posterior");
  std::string::basic_string[abi:ne180100]<0>(__p, "If silence posteriors are available, trigger only when the average silence posterior is >= this value. Otherwise, ignore this value.");
  quasar::SystemConfig::Register<float>(a2, (const void **)v20, a1, (uint64_t)__p, 0, 41, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if ((v24 & 0x80u) == 0) {
    size_t v12 = v24;
  }
  else {
    size_t v12 = v23;
  }
  uint64_t v13 = v20;
  std::string::basic_string[abi:ne180100]((uint64_t)v20, v12 + 14);
  if (v21 < 0) {
    uint64_t v13 = (void **)v20[0];
  }
  if (v12)
  {
    if ((v24 & 0x80u) == 0) {
      BOOL v14 = &v22;
    }
    else {
      BOOL v14 = v22;
    }
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, "silence-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Sliding window size (in frames) for silence posterior average. Silence posterior is ignored if this value is <= 0.");
  quasar::SystemConfig::Register<int>(a2, (const void **)v20, a1 + 4, (uint64_t)__p, 0, 41, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if ((v24 & 0x80u) == 0) {
    size_t v15 = v24;
  }
  else {
    size_t v15 = v23;
  }
  std::string::size_type v16 = v20;
  std::string::basic_string[abi:ne180100]((uint64_t)v20, v15 + 15);
  if (v21 < 0) {
    std::string::size_type v16 = (void **)v20[0];
  }
  if (v15)
  {
    if ((v24 & 0x80u) == 0) {
      uint64_t v17 = &v22;
    }
    else {
      uint64_t v17 = v22;
    }
    memmove(v16, v17, v15);
  }
  strcpy((char *)v16 + v15, "stable-partials");
  std::string::basic_string[abi:ne180100]<0>(__p, "Trigger only after the number of stable partial results (one per frame) exceeds this value. (Eager's stabilization is unrelated to ResultStreamStabilizer stabilization). Regardless of this value, the trigger always looks for at least 1 stable partial result.");
  quasar::SystemConfig::Register<int>(a2, (const void **)v20, a1 + 8, (uint64_t)__p, 0, 41, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if ((char)v24 < 0) {
    operator delete(v22);
  }
}

void sub_1B2208FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void quasar::EagerConfig::Register(quasar::EagerConfig *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "early");
  quasar::EagerTriggerConfig::Register((uint64_t)this, (uint64_t)a2, (const void **)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "backoff");
  quasar::EagerTriggerConfig::Register((uint64_t)this + 12, (uint64_t)a2, (const void **)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "max-triggers");
  std::string::basic_string[abi:ne180100]<0>(v4, "Ignored if <= 0: Maximum number of eager result triggers. Once exceeded, no more eager results are created.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 24, (uint64_t)v4, 0, 41, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "require-silence-posterior");
  std::string::basic_string[abi:ne180100]<0>(v4, "If true, disable eager for requests that don't have silence posteriors. Defaults to true since 'false eager results' increase without silence posteriors. Set this to false for experimentation or if the number of 'false eager results' is acceptable.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 28, (uint64_t)v4, 0, 41, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "debug");
  std::string::basic_string[abi:ne180100]<0>(v4, "Debug mode: require-silence-posterior=false and trigger every frame without affecting state machine");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 29, (uint64_t)v4, 0, 14, 2, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B22091FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2209540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

quasar::EagerDecision *quasar::EagerDecision::EagerDecision(quasar::EagerDecision *this, const quasar::EagerConfig *a2, int a3)
{
  long long v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = v5;
  *((unsigned char *)this + 32) = a3;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 40);
  *((unsigned char *)this + 304) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((void *)this + 46) = 0;
  *(void *)((char *)this + 308) = 0;
  *((unsigned char *)this + 316) = 0;
  *((_WORD *)this + 188) = 1;
  *((unsigned char *)this + 378) = 0;
  *((_DWORD *)this + 98) = 0;
  *((unsigned char *)this + 396) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((void *)this + 56) = 0;
  *((_WORD *)this + 228) = 1;
  *((unsigned char *)this + 458) = 0;
  *((_DWORD *)this + 116) = 0;
  *((unsigned char *)this + 468) = 0;
  *((void *)this + 65) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_WORD *)this + 264) = 1;
  *((unsigned char *)this + 530) = 0;
  *((void *)this + 67) = 0;
  *((_DWORD *)this + 136) = 0;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_DWORD *)this + 150) = 0;
  if (quasar::gLogLevel >= 5)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    unsigned int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ENABLED ", 8);
    char v7 = quasar::operator<<(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" hasSilencePosterior=", 21);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v10);
  }
  *((void *)this + 48) = this;
  if (a3)
  {
    uint64_t v8 = *((unsigned int *)this + 1);
    if ((int)v8 >= 1) {
      quasar::MovingAverage::init((quasar::EagerDecision *)((char *)this + 536), v8);
    }
  }
  return this;
}

void sub_1B22096F8(_Unwind_Exception *a1)
{
  std::deque<int>::~deque[abi:ne180100](v4);
  quasar::EagerFeatures::~EagerFeatures(v3);
  quasar::EagerFeatures::~EagerFeatures((quasar::EagerFeatures *)(v2 + 392));
  quasar::EagerFeatures::~EagerFeatures((quasar::EagerFeatures *)(v2 + 312));
  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

void quasar::EagerFeatures::~EagerFeatures(quasar::EagerFeatures *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  char v3 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t quasar::EagerDecision::eval(quasar::EagerDecision *this, const quasar::EagerFeatures *a2, BOOL *a3, int *a4)
{
  *a3 = 0;
  *a4 = 0;
  uint64_t v8 = (quasar::EagerDecision *)((char *)this + 464);
  size_t v9 = (char *)this + 392;
  *((_DWORD *)this + 98) = *((_DWORD *)this + 116);
  *((unsigned char *)this + 396) = *((unsigned char *)this + 468);
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)((char *)this + 400), *((std::string **)this + 59), *((long long **)this + 60), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 60) - *((void *)this + 59)) >> 3));
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 424, *((char **)this + 62), *((void *)this + 63), (uint64_t)(*((void *)this + 63) - *((void *)this + 62)) >> 2);
  uint64_t v10 = (void *)((char *)this + 520);
  *((void *)this + 56) = *((void *)this + 65);
  *(_DWORD *)(v9 + 63) = *(_DWORD *)((char *)v8 + 63);
  char v11 = *((unsigned char *)a2 + 4);
  *((_DWORD *)this + 116) = *(_DWORD *)a2;
  *((unsigned char *)this + 468) = v11;
  if (v8 != a2)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)((char *)this + 472), *((std::string **)a2 + 1), *((long long **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 496, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  uint64_t v12 = *((void *)a2 + 7);
  *(_DWORD *)((char *)this + 527) = *(_DWORD *)((char *)a2 + 63);
  *uint64_t v10 = v12;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v55);
  if (quasar::gLogLevel >= 5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"trigger=", 8);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" numTriggers=", 13);
    BOOL v14 = (void *)std::ostream::operator<<();
    size_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" thisFrame=", 11);
    quasar::operator<<(v15, (uint64_t)v8);
  }
  if (*((unsigned char *)this + 32) && *(int *)(*((void *)this + 48) + 4) >= 1)
  {
    quasar::MovingAverage::add((quasar::EagerDecision *)((char *)this + 536), *((float *)this + 131));
    if (quasar::gLogLevel < 5)
    {
      int v18 = 1;
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" avgSilPost={", 13);
      quasar::MovingAverage::getAverage((quasar::EagerDecision *)((char *)this + 536));
      std::string::size_type v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)",", 1);
      quasar::MovingAverage::getCount((quasar::EagerDecision *)((char *)this + 536));
      uint64_t v17 = (void *)std::ostream::operator<<();
      int v18 = 1;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"}", 1);
    }
  }
  else
  {
    int v18 = 0;
  }
  if (*((unsigned char *)this + 304))
  {
    char v19 = (const void *)*((void *)this + 43);
    size_t v20 = *((void *)this + 44) - (void)v19;
    char v21 = (const void *)*((void *)this + 62);
    if (v20 != *((void *)this + 63) - (void)v21 || memcmp(v19, v21, v20))
    {
      quasar::MovingAverage::clear((quasar::EagerDecision *)((char *)this + 536));
      *((_DWORD *)this + 150) = 0;
      quasar::EagerDecision::setTrigger(this, 0, v8);
      *a3 = 1;
    }
  }
  else if (!*a3)
  {
    int v29 = *((_DWORD *)this + 6);
    if (v29 < 1 || *((_DWORD *)this + 77) < v29)
    {
      if (v18) {
        BOOL v30 = quasar::MovingAverage::full((quasar::EagerDecision *)((char *)this + 536))
      }
           && quasar::MovingAverage::getAverage((quasar::EagerDecision *)((char *)this + 536)) >= **((float **)this + 48);
      else {
        BOOL v30 = 1;
      }
      if (*((unsigned char *)this + 468)
        && (long long v31 = (unsigned char *)*((void *)this + 62), v32 = (unsigned char *)*((void *)this + 63), v31 != v32)
        && (long long v33 = (const void *)*((void *)this + 53), v32 - v31 == *((void *)this + 54) - (void)v33)
        && !memcmp(v31, v33, v32 - v31)
        && *(int *)v10 >= 1
        && (int v35 = *((_DWORD *)this + 112), v35 >= 1))
      {
        if (*(_DWORD *)v10 > v35) {
          ++*((_DWORD *)this + 150);
        }
      }
      else
      {
        *((_DWORD *)this + 150) = 0;
      }
      if (quasar::gLogLevel >= 5)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" numStable=", 11);
        std::ostream::operator<<();
      }
      int v34 = *((_DWORD *)this + 150);
      if (v34 >= 1
        && *((unsigned char *)a2 + 66)
        && v30
        && v34 >= *(_DWORD *)(*((void *)this + 48) + 8)
        && *((unsigned char *)this + 528))
      {
        quasar::EagerDecision::setTrigger(this, 1, v8);
        *a4 = *((_DWORD *)this + 77);
      }
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v38 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::stringbuf::str();
    if ((v37 & 0x80u) == 0) {
      long long v22 = __p;
    }
    else {
      long long v22 = (void **)__p[0];
    }
    if ((v37 & 0x80u) == 0) {
      uint64_t v23 = v37;
    }
    else {
      uint64_t v23 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)v22, v23);
    if ((char)v37 < 0) {
      operator delete(__p[0]);
    }
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
  }
  if (*a3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 5, (uint64_t)"INVALID ", 8);
    unsigned __int8 v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" ", 1);
    if (quasar::gLogLevel >= 5)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"INVALIDATED ", 12);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
    }
  }
  if (*a4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 5, (uint64_t)"TRIGGER ", 8);
    long long v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" ", 1);
    if (quasar::gLogLevel >= 5)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"TRIGGERED ", 10);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
    }
  }
  int v26 = *a4;
  if (*a3 && v26)
  {
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v38 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Invalidate and trigger shouldn't happen on the same frame", 57);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v38);
  }
  if (*((unsigned char *)this + 529))
  {
    if (!v26)
    {
      quasar::EagerDecision::setTrigger(this, 1, v8);
      *a4 = *((_DWORD *)this + 77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 5, (uint64_t)"FORCE TRIGGER ", 14);
      long long v27 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ", 1);
      if (quasar::gLogLevel >= 5)
      {
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"FORCE TRIGGERED ", 16);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
      }
    }
  }
  v55[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v55 + *(void *)(v55[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v55[1] = MEMORY[0x1E4FBA470] + 16;
  if (v56 < 0) {
    operator delete((void *)v55[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v57);
}

void sub_1B2209F0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_1B2209F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
}

void quasar::EagerDecision::setTrigger(quasar::EagerDecision *this, int a2, const quasar::EagerFeatures *a3)
{
  if (*((unsigned __int8 *)this + 304) == a2)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Bad state transition: triggered ", 32);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" -> ", 4);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
  }
  *((unsigned char *)this + 304) = a2;
  int v5 = *(_DWORD *)a3;
  *((unsigned char *)this + 316) = *((unsigned char *)a3 + 4);
  *((_DWORD *)this + 78) = v5;
  if ((quasar::EagerDecision *)((char *)this + 312) != a3)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)((char *)this + 320), *((std::string **)a3 + 1), *((long long **)a3 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 2) - *((void *)a3 + 1)) >> 3));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 344, *((char **)a3 + 4), *((void *)a3 + 5), (uint64_t)(*((void *)a3 + 5) - *((void *)a3 + 4)) >> 2);
    a2 = *((unsigned __int8 *)this + 304);
  }
  uint64_t v6 = *((void *)a3 + 7);
  *(_DWORD *)((char *)this + 375) = *(_DWORD *)((char *)a3 + 63);
  *((void *)this + 46) = v6;
  if (a2)
  {
    ++*((_DWORD *)this + 77);
    *((void *)this + 48) = (char *)this + 12;
    if (*((unsigned char *)this + 32))
    {
      uint64_t v7 = *((unsigned int *)this + 4);
      if ((int)v7 >= 1)
      {
        quasar::MovingAverage::init((quasar::EagerDecision *)((char *)this + 536), v7);
      }
    }
  }
}

BOOL quasar::EagerDecision::matches(const void **this, int a2)
{
  if (*((unsigned char *)this + 304)
    && *((_DWORD *)this + 77) == a2
    && (size_t v2 = (unsigned char *)this[63] - (unsigned char *)this[62], v3 = this[43], v2 == (unsigned char *)this[44] - (unsigned char *)v3))
  {
    return memcmp(this[62], v3, v2) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t quasar::EagerDecision::getLog(quasar::EagerDecision *this)
{
  return std::stringbuf::str();
}

uint64_t quasar::TransformerForClassificationConfig::HandleToken(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4)
{
  if (*((char *)a4 + 23) < 0)
  {
    uint64_t v9 = a4[1];
    if (v9 != 27)
    {
      if (v9 != 30) {
        return 0;
      }
      BOOL v10 = *(void *)*a4 == 0x636E65757165533CLL && *(void *)(*a4 + 8) == 0x66697373616C4365;
      BOOL v11 = v10 && *(void *)(*a4 + 16) == 0x4F6E6F6974616369;
      if (!v11 || *(void *)(*a4 + 22) != 0x3E74757074754F6ELL) {
        return 0;
      }
LABEL_42:
      memset(&__str, 0, sizeof(__str));
      kaldi::ReadToken(a2, a3, (uint64_t)&__str);
      int v19 = 0;
      char v21 = &v19;
      int v18 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 16, &v19, (uint64_t)&std::piecewise_construct, &v21);
      std::string::operator=(v18 + 1, &__str);
      goto LABEL_43;
    }
    a4 = (uint64_t *)*a4;
  }
  else
  {
    int v5 = *((unsigned __int8 *)a4 + 23);
    if (v5 != 27)
    {
      if (v5 != 30) {
        return 0;
      }
      BOOL v6 = *a4 == 0x636E65757165533CLL && a4[1] == 0x66697373616C4365;
      BOOL v7 = v6 && a4[2] == 0x4F6E6F6974616369;
      if (!v7 || *(uint64_t *)((char *)a4 + 22) != 0x3E74757074754F6ELL) {
        return 0;
      }
      goto LABEL_42;
    }
  }
  if (*a4 != 0x6C436E656B6F543CLL
    || a4[1] != 0x6163696669737361
    || a4[2] != 0x7074754F6E6F6974
    || *(uint64_t *)((char *)a4 + 19) != 0x3E74757074754F6ELL)
  {
    return 0;
  }
  memset(&__str, 0, sizeof(__str));
  kaldi::ReadToken(a2, a3, (uint64_t)&__str);
  int v19 = 1;
  char v21 = &v19;
  uint64_t v17 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 16, &v19, (uint64_t)&std::piecewise_construct, &v21);
  std::string::operator=(v17 + 1, &__str);
LABEL_43:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1B220A38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::TransformerForClassification::TransformerForClassification(void *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1F0A1CA60;
  a1[1] = 0;
  LODWORD(v11) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "classifications");
  std::unordered_map<quasar::TransformerClassificationType,std::string>::unordered_map((uint64_t)(a1 + 2), (int *)&v11, 1);
  if (v14 < 0) {
    operator delete(__p);
  }
  a1[7] = 0;
  if (*(char *)(a2 + 23) >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  int v5 = &v11;
  std::string::basic_string[abi:ne180100]((uint64_t)&v11, v4 + 7);
  if (v13 < 0) {
    int v5 = v11;
  }
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0) {
      BOOL v6 = (const void *)a2;
    }
    else {
      BOOL v6 = *(const void **)a2;
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::quasar::WrappedComputeEngineConfig::Read((uint64_t)a1, a2, (uint64_t)&v11);
  if (v13 < 0) {
    operator delete(v11);
  }
  (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 24))(&v11);
  BOOL v7 = v11;
  BOOL v11 = 0;
  uint64_t v8 = a1[7];
  a1[7] = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    uint64_t v9 = v11;
    BOOL v11 = 0;
    if (v9) {
      (*(void (**)(void *))(*(void *)v9 + 8))(v9);
    }
  }
  return a1;
}

void sub_1B220A59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v21 = *((void *)v19 + 7);
  *((void *)v19 + 7) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  quasar::TransformerForClassificationConfig::~TransformerForClassificationConfig(v19);
  _Unwind_Resume(a1);
}

void quasar::TransformerForClassificationConfig::~TransformerForClassificationConfig(quasar::TransformerForClassificationConfig *this)
{
  *(void *)this = &unk_1F0A1CA60;
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table((uint64_t)this + 16);
  kaldi::quasar::WrappedComputeEngineConfig::~WrappedComputeEngineConfig(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A1CA60;
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table((uint64_t)this + 16);
  kaldi::quasar::WrappedComputeEngineConfig::~WrappedComputeEngineConfig(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::TransformerForClassification::~TransformerForClassification(quasar::TransformerForClassification *this)
{
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_1F0A1CA60;
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table((uint64_t)this + 16);
  kaldi::quasar::WrappedComputeEngineConfig::~WrappedComputeEngineConfig(this);
}

void quasar::TransformerForClassification::run(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int32x2_t *a5)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  int v38 = a2;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 56) + 40))(v39);
  uint64_t v8 = (void *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<char const(&)[10],std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v35, "input_ids", (uint64_t *)v39);
  uint64_t v9 = *(void *)v39;
  uint64_t v36 = v8;
  *(void *)long long v39 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 56) + 40))(v39);
  BOOL v10 = v36;
  if ((unint64_t)v36 >= v37)
  {
    BOOL v11 = (void *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<char const(&)[15],std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v35, "attention_mask", (uint64_t *)v39);
    uint64_t v12 = *(void *)v39;
    uint64_t v36 = v11;
    *(void *)long long v39 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "attention_mask");
    void v10[3] = *(void *)v39;
    uint64_t v36 = v10 + 4;
  }
  char v13 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 16), &v38);
  if (!v13) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (*((char *)v13 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v39, (const std::string::value_type *)v13[3], v13[4]);
  }
  else
  {
    *(_OWORD *)long long v39 = *(_OWORD *)(v13 + 3);
    *(void *)&v39[16] = v13[5];
  }
  long long v32 = 0;
  long long v33 = 0;
  int v34 = 0;
  int v29 = &v32;
  LOBYTE(v30) = 0;
  long long v32 = (std::string *)operator new(0x18uLL);
  long long v33 = v32;
  int v34 = v32 + 1;
  long long v33 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v34, (long long *)v39, (long long *)&v39[24], v32);
  if ((v39[23] & 0x80000000) != 0) {
    operator delete(*(void **)v39);
  }
  int v29 = 0;
  BOOL v30 = 0;
  uint64_t v31 = 0;
  uint64_t v14 = *(void *)(a1 + 56);
  memset(v39, 0, 24);
  (*(void (**)(uint64_t, uint64_t *, std::string **, unsigned char *, std::string ***))(*(void *)v14 + 120))(v14, &v35, &v32, v39, &v29);
  __p = v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v15 = v29;
  if (v30 == v29) {
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  int v16 = (*(uint64_t (**)(void))((*v29)->__r_.__value_.__r.__words[0] + 176))();
  std::string::size_type v17 = (*v15)->__r_.__value_.__r.__words[0];
  if (v16 > 2)
  {
    if ((*(unsigned int (**)(void))(v17 + 176))() != 3)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v40 = 0u;
      memset(v39, 0, sizeof(v39));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Unsupported number of dimensions in transformer output", 54);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v39);
    }
    if ((*(unsigned int (**)(std::string *, void))((*v15)->__r_.__value_.__r.__words[0] + 184))(*v15, 0) != 1)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v40 = 0u;
      memset(v39, 0, sizeof(v39));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Unsupported first dimension size for 3-dim transformer output", 61);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v39);
    }
    if (kaldi::MatrixBase<float>::NumRows(a3) != 1)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v40 = 0u;
      memset(v39, 0, sizeof(v39));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Unsupported batch size for 3-dim transformer output", 51);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v39);
    }
    __p = 0;
    long long v27 = 0;
    uint64_t v28 = 0;
    (*(void (**)(std::string *, void **))((*v15)->__r_.__value_.__r.__words[0] + 56))(*v15, &__p);
    uint64_t v18 = (*(uint64_t (**)(std::string *, uint64_t))((*v15)->__r_.__value_.__r.__words[0] + 184))(*v15, 1);
    uint64_t v19 = (*(uint64_t (**)(std::string *, uint64_t))((*v15)->__r_.__value_.__r.__words[0] + 184))(*v15, 2);
    kaldi::Matrix<float>::Resize(a5, v18, v19, 1, 0);
    size_t v20 = __p;
    uint64_t v21 = v27;
    if (__p == v27
      || (int v22 = kaldi::MatrixBase<float>::NumRows((uint64_t)a5),
          (v21 - v20) >> 2 != kaldi::MatrixBase<float>::NumCols((uint64_t)a5) * v22))
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v40 = 0u;
      memset(v39, 0, sizeof(v39));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Failed to flatten transformer output", 36);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v39);
    }
    for (int i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)a5); ++i)
    {
      for (uint64_t j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)a5); ++j)
      {
        unint64_t v25 = (int)(j + i * kaldi::MatrixBase<float>::NumCols((uint64_t)a5));
        if (v25 >= (v27 - (unsigned char *)__p) >> 2) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        *(_DWORD *)(*(void *)a5 + 4 * i * a5[2].i32[0] + 4 * j) = *((_DWORD *)__p + v25);
      }
    }
    if (__p)
    {
      long long v27 = __p;
      operator delete(__p);
    }
  }
  else
  {
    (*(void (**)(void))(v17 + 24))();
  }
  *(void *)long long v39 = &v29;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  *(void *)long long v39 = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  *(void *)long long v39 = &v35;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
}

void sub_1B220ADB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  a23 = &a13;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a19;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<quasar::TransformerClassificationType,std::string>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::__unordered_map_hasher<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::hash<quasar::TransformerClassificationType>,std::equal_to<quasar::TransformerClassificationType>,true>,std::__unordered_map_equal<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::equal_to<quasar::TransformerClassificationType>,std::hash<quasar::TransformerClassificationType>,true>,std::allocator<std::__hash_value_type<quasar::TransformerClassificationType,std::string>>>::__emplace_unique_key_args<quasar::TransformerClassificationType,std::pair<quasar::TransformerClassificationType const,std::string> const&>(a1, a2, (uint64_t)a2);
      a2 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_1B220AFA8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::__unordered_map_hasher<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::hash<quasar::TransformerClassificationType>,std::equal_to<quasar::TransformerClassificationType>,true>,std::__unordered_map_equal<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::equal_to<quasar::TransformerClassificationType>,std::hash<quasar::TransformerClassificationType>,true>,std::allocator<std::__hash_value_type<quasar::TransformerClassificationType,std::string>>>::__emplace_unique_key_args<quasar::TransformerClassificationType,std::pair<quasar::TransformerClassificationType const,std::string> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      for (uint64_t result = *v8; result; uint64_t result = (uint64_t *)*result)
      {
        unint64_t v10 = result[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)result + 4) == v5) {
            return result;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::__unordered_map_hasher<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::hash<quasar::TransformerClassificationType>,std::equal_to<quasar::TransformerClassificationType>,true>,std::__unordered_map_equal<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::equal_to<quasar::TransformerClassificationType>,std::hash<quasar::TransformerClassificationType>,true>,std::allocator<std::__hash_value_type<quasar::TransformerClassificationType,std::string>>>::__construct_node_hash<std::pair<quasar::TransformerClassificationType const,std::string> const&>(a1, *a2, a3, (uint64_t)v19);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  std::string::size_type v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v19[0] = *v17;
    *std::string::size_type v17 = v19[0];
  }
  else
  {
    *(void *)v19[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v19[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v19[0])
    {
      unint64_t v18 = *(void *)(*(void *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18) = v19[0];
    }
  }
  uint64_t result = (uint64_t *)v19[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1B220B1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::string>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::__unordered_map_hasher<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::hash<quasar::TransformerClassificationType>,std::equal_to<quasar::TransformerClassificationType>,true>,std::__unordered_map_equal<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::equal_to<quasar::TransformerClassificationType>,std::hash<quasar::TransformerClassificationType>,true>,std::allocator<std::__hash_value_type<quasar::TransformerClassificationType,std::string>>>::__construct_node_hash<std::pair<quasar::TransformerClassificationType const,std::string> const&>(uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (std::string *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = a2;
  LODWORD(v8->__r_.__value_.__r.__words[2]) = *(_DWORD *)a3;
  uint64_t v9 = v8 + 1;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 8);
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 24);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B220B28C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<char const(&)[10],std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(uint64_t *a1, char *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v21 = a1 + 2;
  if (v11) {
    float v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    float v12 = 0;
  }
  std::string::size_type v17 = v12;
  unint64_t v18 = &v12[32 * v5];
  uint64_t v19 = v18;
  size_t v20 = &v12[32 * v11];
  BOOL v13 = std::string::basic_string[abi:ne180100]<0>(v18, a2);
  uint64_t v14 = *a3;
  *a3 = 0;
  v13[3] = v14;
  v19 += 32;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, &v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(&v17);
  return v15;
}

void sub_1B220B38C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<char const(&)[15],std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(uint64_t *a1, char *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v21 = a1 + 2;
  if (v11) {
    float v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    float v12 = 0;
  }
  std::string::size_type v17 = v12;
  unint64_t v18 = &v12[32 * v5];
  uint64_t v19 = v18;
  size_t v20 = &v12[32 * v11];
  BOOL v13 = std::string::basic_string[abi:ne180100]<0>(v18, a2);
  uint64_t v14 = *a3;
  *a3 = 0;
  v13[3] = v14;
  v19 += 32;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, &v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(&v17);
  return v15;
}

void sub_1B220B484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LexiconFst::LexiconFst()
{
}

void sub_1B220B628(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LexiconFst::CreateFst(kaldi::quasar::LexiconFst *this, const kaldi::quasar::Lexicon *a2, fst::SymbolTable *a3, fst::SymbolTable *a4, int a5)
{
  uint64_t v7 = (uint64_t *)a2;
  if ((**(uint64_t (***)(const kaldi::quasar::Lexicon *))a2)(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "<eps>");
    (*(void (**)(fst::SymbolTable *, std::string *))(*(void *)a3 + 32))(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "<eps>");
    (*(void (**)(fst::SymbolTable *, std::string *))(*(void *)a4 + 32))(a4, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    (*(void (**)(fst::SymbolTable *, const char *))(*(void *)a3 + 104))(a3, "<eps>");
    (*(void (**)(fst::SymbolTable *, const char *))(*(void *)a4 + 104))(a4, "<eps>");
    memset(&v86, 0, sizeof(v86));
    kaldi::quasar::Lexicon::GetPhoneSymbols((uint64_t)v7, &v86);
    if ((kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols((uint64_t)v7) & 0x80000000) != 0)
    {
      uint64_t v36 = 0;
LABEL_139:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      return v36;
    }
    if ((int)((*(void *)(*((void *)this + 1) + 72) - *(void *)(*((void *)this + 1) + 64)) >> 3) >= 1) {
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeleteStates((uint64_t)this);
    }
    v76 = this;
    memset(v84, 0, sizeof(v84));
    int v85 = 1065353216;
    std::vector<std::string>::pointer begin = v86.__begin_;
    v74 = v7;
    if (v86.__begin_ != v86.__end_)
    {
      uint64_t v70 = *(void *)(MEMORY[0x1E4FBA418] + 24);
      uint64_t v72 = *MEMORY[0x1E4FBA418];
      uint64_t v10 = "can not find symbol ";
      while (1)
      {
        if (!a5
          || !kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols((uint64_t)v7)
          || *std::string::at(begin, 0) != 35)
        {
LABEL_57:
          uint64_t v26 = (*(uint64_t (**)(fst::SymbolTable *, std::vector<std::string>::pointer))(*(void *)a3 + 32))(a3, begin);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)begin;
          *((void *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v84, (unsigned __int8 *)begin, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 5) = v26;
          goto LABEL_58;
        }
        std::string::basic_string(&v83, begin, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
        unint64_t v11 = (v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v83
            : (std::string *)v83.__r_.__value_.__r.__words[0];
        std::string::size_type v12 = (v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v83.__r_.__value_.__r.__words[2])
            : v83.__r_.__value_.__l.__size_;
        if (v12)
        {
          uint64_t v13 = 0;
          while (memchr("0123456789", v11->__r_.__value_.__s.__data_[v13], 0xAuLL))
          {
            if (v12 == ++v13) {
              goto LABEL_27;
            }
          }
          if (v13 != -1) {
            break;
          }
        }
LABEL_27:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v79);
        uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"/WORD-DIS-", 10);
        uint64_t v7 = v74;
        if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v16 = &v83;
        }
        else {
          size_t v16 = (std::string *)v83.__r_.__value_.__r.__words[0];
        }
        if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v83.__r_.__value_.__l.__size_;
        }
        unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"/", 1);
        std::stringbuf::str();
        uint64_t v19 = (*(uint64_t (**)(fst::SymbolTable *, std::string *))(*(void *)a3 + 96))(a3, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v19 == -1)
        {
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            size_t v20 = v10;
            uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v10, 20);
            std::stringbuf::str();
            if ((v78 & 0x80u) == 0) {
              int v22 = v77;
            }
            else {
              int v22 = (void **)v77[0];
            }
            if ((v78 & 0x80u) == 0) {
              uint64_t v23 = v78;
            }
            else {
              uint64_t v23 = (uint64_t)v77[1];
            }
            unsigned __int8 v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" in the input symbol table", 26);
            uint64_t v10 = v20;
            if ((char)v78 < 0) {
              operator delete(v77[0]);
            }
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          }
          int v14 = 0;
        }
        else
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)begin;
          *((void *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v84, (unsigned __int8 *)begin, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 5) = v19;
          int v14 = 1;
        }
        *(void *)&v79[0] = v72;
        *(void *)((char *)v79 + *(void *)(v72 - 24)) = v70;
        *((void *)&v79[0] + 1) = MEMORY[0x1E4FBA470] + 16;
        if (v81 < 0) {
          operator delete(v80);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1B3EA8520](v82);
        if (v19 != -1) {
          goto LABEL_51;
        }
        char v25 = 0;
LABEL_53:
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v83.__r_.__value_.__l.__data_);
        }
        if ((v25 & 1) == 0) {
          goto LABEL_86;
        }
        if (!v14) {
          goto LABEL_57;
        }
LABEL_58:
        if (++begin == v86.__end_) {
          goto LABEL_59;
        }
      }
      int v14 = 0;
      uint64_t v7 = v74;
LABEL_51:
      char v25 = 1;
      goto LABEL_53;
    }
LABEL_59:
    uint64_t v27 = (uint64_t)v76;
    if (!*((unsigned char *)v76 + 44))
    {
      LODWORD(v30) = -1;
      goto LABEL_88;
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v79);
    uint64_t v28 = (void *)MEMORY[0x1E4FBA418];
    if (a5 && kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols((uint64_t)v7))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"/WORD-DIS-", 10);
      int v29 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/", 1);
      std::stringbuf::str();
      uint64_t v30 = (*(uint64_t (**)(fst::SymbolTable *, std::string *))(*(void *)a3 + 96))(a3, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v30 == -1)
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"can not find symbol ", 20);
          std::stringbuf::str();
          if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v32 = &v83;
          }
          else {
            long long v32 = (std::string *)v83.__r_.__value_.__r.__words[0];
          }
          if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v33 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v33 = v83.__r_.__value_.__l.__size_;
          }
          int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" in the input symbol table", 26);
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v83.__r_.__value_.__l.__data_);
          }
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        }
        char v35 = 0;
        LODWORD(v30) = -1;
LABEL_83:
        *(void *)&v79[0] = *v28;
        *(void *)((char *)v79 + *(void *)(*(void *)&v79[0] - 24)) = v28[3];
        *((void *)&v79[0] + 1) = MEMORY[0x1E4FBA470] + 16;
        if (v81 < 0) {
          operator delete(v80);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1B3EA8520](v82);
        uint64_t v7 = v74;
        if ((v35 & 1) == 0)
        {
LABEL_86:
          uint64_t v36 = 0;
LABEL_138:
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v84);
          goto LABEL_139;
        }
LABEL_88:
        int v37 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)v76);
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetStart((uint64_t)v76, v37);
        int v38 = *(_DWORD *)(*((void *)v76 + 1) + 88);
        if (*((float *)v76 + 10) == 0.0)
        {
          kaldi::quasar::Lexicon::begin(v7, (uint64_t *)v79);
          while (1)
          {
            kaldi::quasar::Lexicon::end((uint64_t)v7, &__p);
            if (!(*(void *)&v79[0] | __p.__r_.__value_.__r.__words[0])
              || *(_OWORD *)&__p.__r_.__value_.__l.__data_ == v79[0])
            {
              break;
            }
            kaldi::quasar::Lexicon::const_iterator::operator*(v79, &__p);
            if (v89 != v88)
            {
              uint64_t v39 = 0;
              unint64_t v40 = 0;
              unint64_t v41 = (v89 - v88) / 24;
              unint64_t v42 = v41 - 1;
              if (v41 <= 1) {
                uint64_t v43 = 1;
              }
              else {
                uint64_t v43 = (v89 - v88) / 24;
              }
              int v44 = v38;
              do
              {
                int v45 = v38;
                if (v42 != v40) {
                  int v45 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)v76);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v89 - v88) >> 3) <= v40) {
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                }
                v77[0] = (void *)(v88 + v39);
                int v46 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v84, (unsigned __int8 *)(v88 + v39), (uint64_t)&std::piecewise_construct, (long long **)v77)+ 10);
                if (v40) {
                  unsigned int v47 = 0;
                }
                else {
                  unsigned int v47 = (*(uint64_t (**)(fst::SymbolTable *, std::string *))(*(void *)a4 + 32))(a4, &__p);
                }
                LODWORD(v83.__r_.__value_.__l.__data_) = v46;
                *(std::string::size_type *)((char *)v83.__r_.__value_.__r.__words + 4) = v47;
                HIDWORD(v83.__r_.__value_.__r.__words[1]) = v45;
                fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v76);
                fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((void **)v76 + 1), v44, (float *)&v83);
                ++v40;
                v39 += 24;
                int v44 = v45;
              }
              while (v43 != v40);
            }
            v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            kaldi::quasar::Lexicon::const_iterator::operator++((int **)v79);
            uint64_t v27 = (uint64_t)v76;
            uint64_t v7 = v74;
          }
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(v27);
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFinal(*(void **)(v27 + 8), v38, 0.0);
        }
        else
        {
          int v73 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)v76);
          int v71 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)v76);
          float v48 = *((float *)v76 + 10);
          float v49 = logf(v48);
          double v50 = log(1.0 - v48);
          unsigned int v51 = (*(uint64_t (**)(fst::SymbolTable *, uint64_t))(*(void *)a3 + 32))(a3, (uint64_t)v76 + 16);
          float v52 = v50;
          __p.__r_.__value_.__r.__words[0] = 0;
          *(float *)&__p.__r_.__value_.__r.__words[1] = -v52;
          HIDWORD(__p.__r_.__value_.__r.__words[1]) = v73;
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v76);
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((void **)v76 + 1), v38, (float *)&__p);
          if (*((unsigned char *)v76 + 44))
          {
            int v53 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)v76);
            __p.__r_.__value_.__r.__words[0] = v51;
            *(float *)&__p.__r_.__value_.__r.__words[1] = -v49;
            HIDWORD(__p.__r_.__value_.__r.__words[1]) = v53;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v76);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((void **)v76 + 1), v38, (float *)&__p);
            __p.__r_.__value_.__r.__words[0] = v51;
            LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
            HIDWORD(__p.__r_.__value_.__r.__words[1]) = v53;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v76);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((void **)v76 + 1), v71, (float *)&__p);
            __p.__r_.__value_.__r.__words[0] = v30;
            LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
            HIDWORD(__p.__r_.__value_.__r.__words[1]) = v73;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v76);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((void **)v76 + 1), v53, (float *)&__p);
            uint64_t v27 = (uint64_t)v76;
          }
          else
          {
            __p.__r_.__value_.__r.__words[0] = v51;
            *(float *)&__p.__r_.__value_.__r.__words[1] = -v49;
            HIDWORD(__p.__r_.__value_.__r.__words[1]) = v73;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v76);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((void **)v76 + 1), v38, (float *)&__p);
            __p.__r_.__value_.__r.__words[0] = v51;
            LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
            HIDWORD(__p.__r_.__value_.__r.__words[1]) = v73;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v76);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((void **)v76 + 1), v71, (float *)&__p);
          }
          kaldi::quasar::Lexicon::begin(v7, (uint64_t *)v79);
          float v54 = 0.0 - v52;
          float v55 = 0.0 - v49;
          while (1)
          {
            kaldi::quasar::Lexicon::end((uint64_t)v7, &__p);
            if (!(*(void *)&v79[0] | __p.__r_.__value_.__r.__words[0])
              || *(_OWORD *)&__p.__r_.__value_.__l.__data_ == v79[0])
            {
              break;
            }
            kaldi::quasar::Lexicon::const_iterator::operator*(v79, &__p);
            uint64_t v56 = v88;
            if (v89 != v88)
            {
              unint64_t v57 = -1 - 0x5555555555555555 * ((v89 - v88) >> 3);
              if (v57)
              {
                uint64_t v58 = 0;
                unint64_t v59 = 0;
                int v60 = v73;
                do
                {
                  int v61 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)v76);
                  if (0xAAAAAAAAAAAAAAABLL * ((v89 - v88) >> 3) <= v59) {
                    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                  }
                  int v62 = v61;
                  v77[0] = (void *)(v88 + v58);
                  int v63 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v84, (unsigned __int8 *)(v88 + v58), (uint64_t)&std::piecewise_construct, (long long **)v77)+ 10);
                  if (v59) {
                    unsigned int v64 = 0;
                  }
                  else {
                    unsigned int v64 = (*(uint64_t (**)(fst::SymbolTable *, std::string *))(*(void *)a4 + 32))(a4, &__p);
                  }
                  LODWORD(v83.__r_.__value_.__l.__data_) = v63;
                  *(std::string::size_type *)((char *)v83.__r_.__value_.__r.__words + 4) = v64;
                  HIDWORD(v83.__r_.__value_.__r.__words[1]) = v62;
                  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v76);
                  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((void **)v76 + 1), v60, (float *)&v83);
                  ++v59;
                  v58 += 24;
                  int v60 = v62;
                }
                while (v57 != v59);
                uint64_t v56 = v88;
                uint64_t v27 = (uint64_t)v76;
                uint64_t v7 = v74;
                if (0xAAAAAAAAAAAAAAABLL * ((v89 - v88) >> 3) <= v57) {
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                }
              }
              else
              {
                int v62 = v73;
              }
              v77[0] = (void *)(v56 + 24 * v57);
              unsigned int v65 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v84, (unsigned __int8 *)v77[0], (uint64_t)&std::piecewise_construct, (long long **)v77)+ 10);
              if (v57) {
                unsigned int v66 = 0;
              }
              else {
                unsigned int v66 = (*(uint64_t (**)(fst::SymbolTable *, std::string *))(*(void *)a4 + 32))(a4, &__p);
              }
              v83.__r_.__value_.__r.__words[0] = __PAIR64__(v66, v65);
              v83.__r_.__value_.__l.__size_ = __PAIR64__(v73, LODWORD(v54));
              fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(v27);
              fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(void **)(v27 + 8), v62, (float *)&v83);
              if (0xAAAAAAAAAAAAAAABLL * ((v89 - v88) >> 3) <= v57) {
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              }
              v77[0] = (void *)(v88 + 24 * v57);
              unsigned int v67 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v84, (unsigned __int8 *)v77[0], (uint64_t)&std::piecewise_construct, (long long **)v77)+ 10);
              if (v57) {
                unsigned int v68 = 0;
              }
              else {
                unsigned int v68 = (*(uint64_t (**)(fst::SymbolTable *, std::string *))(*(void *)a4 + 32))(a4, &__p);
              }
              v83.__r_.__value_.__r.__words[0] = __PAIR64__(v68, v67);
              v83.__r_.__value_.__l.__size_ = __PAIR64__(v71, LODWORD(v55));
              fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(v27);
              fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(void **)(v27 + 8), v62, (float *)&v83);
            }
            v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            kaldi::quasar::Lexicon::const_iterator::operator++((int **)v79);
          }
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(v27);
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFinal(*(void **)(v27 + 8), v73, 0.0);
        }
        uint64_t v36 = 1;
        goto LABEL_138;
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"#", 1);
      std::ostream::operator<<();
      std::stringbuf::str();
      LODWORD(v30) = (*(uint64_t (**)(fst::SymbolTable *, std::string *))(*(void *)a3 + 32))(a3, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    char v35 = 1;
    goto LABEL_83;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"the input lexicon is empty", 26);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  }
  return 0;
}

void sub_1B220C59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a66);
  std::ostringstream::~ostringstream((uint64_t)&a21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a57);
  a21 = (uint64_t)&a63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Lexicon::const_iterator::operator*(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (!*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Cannot dereference iterator that is already at the end");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  memset(v5, 0, 24);
  kaldi::quasar::Lexicon::GetPron(a1[2], *(_DWORD *)(v3 + 40), *(void *)(a1[1] + 32), (uint64_t)v5);
  std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string const&,std::vector<std::string>&,0>(a2, (long long *)(*a1 + 16), v5);
  unint64_t v6 = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
}

void sub_1B220C828(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

int **kaldi::quasar::Lexicon::const_iterator::operator++(int **a1)
{
  uint64_t v1 = *a1;
  if (!*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Cannot increment iterator that is already at the end");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v5 = (int *)*((void *)v4 + 1);
  if (v5)
  {
    do
    {
      unint64_t v6 = v5;
      uint64_t v5 = *(int **)v5;
    }
    while (v5);
  }
  else
  {
    do
    {
      unint64_t v6 = (int *)*((void *)v4 + 2);
      BOOL v7 = *(void *)v6 == (void)v4;
      uint64_t v4 = v6;
    }
    while (!v7);
  }
  a1[1] = v6;
  if (a1[1] == (int *)(std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)v3 + 30, v1 + 10)+ 4))
  {
    uint64_t v8 = *(int **)*a1;
    *a1 = v8;
    if (v8) {
      a1[1] = (int *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)a1[2] + 30, v8 + 10)[3];
    }
  }
  return a1;
}

BOOL kaldi::quasar::LexiconFst::CreateFst(uint64_t a1, unsigned int **a2, unsigned int a3)
{
  uint64_t v3 = a2[1];
  unsigned int v47 = *a2;
  if (v3 == *a2)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      size_t v20 = a2[1];
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"the input word pron pair is empty", 33);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v51);
      uint64_t v3 = v20;
    }
  }
  else
  {
    int v46 = a2[1];
    memset(v51, 0, 24);
    if ((int)((*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3) >= 1) {
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeleteStates(a1);
    }
    int v7 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(a1);
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetStart(a1, v7);
    int v8 = *(_DWORD *)(*(void *)(a1 + 8) + 88);
    if (*(float *)(a1 + 40) == 0.0)
    {
      uint64_t v10 = *a2;
      uint64_t v9 = a2[1];
      while (v10 != v9)
      {
        uint64_t v11 = *((void *)v10 + 2) - *((void *)v10 + 1);
        if (v11)
        {
          unint64_t v12 = 0;
          uint64_t v13 = (v11 >> 2) - 1;
          if ((unint64_t)(v11 >> 2) <= 1) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = v11 >> 2;
          }
          int v15 = v8;
          do
          {
            int v16 = v8;
            if (v13 != v12) {
              int v16 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(a1);
            }
            uint64_t v17 = *((void *)v10 + 1);
            if (v12 >= (*((void *)v10 + 2) - v17) >> 2) {
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            }
            unsigned int v18 = *(_DWORD *)(v17 + 4 * v12);
            unsigned int v19 = *v10;
            if (v12) {
              unsigned int v19 = 0;
            }
            unint64_t v48 = __PAIR64__(v19, v18);
            float v49 = 0.0;
            int v50 = v16;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(void **)(a1 + 8), v15, (float *)&v48);
            ++v12;
            int v15 = v16;
          }
          while (v14 != v12);
          uint64_t v9 = a2[1];
        }
        v10 += 8;
      }
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFinal(*(void **)(a1 + 8), v8, 0.0);
    }
    else
    {
      int v21 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(a1);
      int v22 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(a1);
      float v23 = *(float *)(a1 + 40);
      float v24 = logf(v23);
      float v25 = log(1.0 - v23);
      unint64_t v48 = 0;
      float v49 = -v25;
      int v50 = v21;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(void **)(a1 + 8), v8, (float *)&v48);
      unint64_t v48 = a3;
      float v49 = -v24;
      int v50 = v21;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(void **)(a1 + 8), v8, (float *)&v48);
      unint64_t v48 = a3;
      float v49 = 0.0;
      int v50 = v21;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(void **)(a1 + 8), v22, (float *)&v48);
      uint64_t v27 = *a2;
      uint64_t v26 = a2[1];
      if (*a2 != v26)
      {
        float v28 = 0.0 - v25;
        float v29 = 0.0 - v24;
        do
        {
          uint64_t v30 = *((void *)v27 + 1);
          uint64_t v31 = *((void *)v27 + 2) - v30;
          if (v31)
          {
            unint64_t v32 = (v31 >> 2) - 1;
            if (v31 >> 2 == 1)
            {
              int v37 = v21;
            }
            else
            {
              unint64_t v33 = 0;
              int v34 = v21;
              do
              {
                int v35 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(a1);
                uint64_t v36 = *((void *)v27 + 1);
                if (v33 >= (*((void *)v27 + 2) - v36) >> 2) {
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                }
                int v37 = v35;
                unsigned int v38 = *(_DWORD *)(v36 + 4 * v33);
                unsigned int v39 = *v27;
                if (v33) {
                  unsigned int v39 = 0;
                }
                unint64_t v48 = __PAIR64__(v39, v38);
                float v49 = 0.0;
                int v50 = v35;
                fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
                fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(void **)(a1 + 8), v34, (float *)&v48);
                ++v33;
                int v34 = v37;
              }
              while (v32 != v33);
              uint64_t v30 = *((void *)v27 + 1);
              if (v32 >= (*((void *)v27 + 2) - v30) >> 2) {
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              }
            }
            unsigned int v40 = *(_DWORD *)(v30 + 4 * v32);
            unsigned int v41 = *v27;
            if (v32) {
              unsigned int v41 = 0;
            }
            unint64_t v48 = __PAIR64__(v41, v40);
            float v49 = v28;
            int v50 = v21;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(void **)(a1 + 8), v37, (float *)&v48);
            uint64_t v42 = *((void *)v27 + 1);
            if (v32 >= (*((void *)v27 + 2) - v42) >> 2) {
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            }
            unsigned int v43 = *(_DWORD *)(v42 + 4 * v32);
            unsigned int v44 = *v27;
            if (v32) {
              unsigned int v44 = 0;
            }
            unint64_t v48 = __PAIR64__(v44, v43);
            float v49 = v29;
            int v50 = v22;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(void **)(a1 + 8), v37, (float *)&v48);
            uint64_t v26 = a2[1];
          }
          v27 += 8;
        }
        while (v27 != v26);
      }
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetFinal(*(void **)(a1 + 8), v21, 0.0);
    }
    unint64_t v48 = (unint64_t)v51;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
    uint64_t v3 = v46;
  }
  return v3 != v47;
}

void sub_1B220CD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string const&,std::vector<std::string>&,0>(std::string *this, long long *a2, long long **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return this;
}

void sub_1B220CE18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ForceAlignDecoderBase::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  kaldi::TrainingGraphCompilerOptions::Register((uint64_t)(this + 78), (uint64_t)a2);
  kaldi::WordBoundaryInfoNewOpts::Register((uint64_t)this + 644, (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[71], a2, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v6, "dict-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Text lexicon file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 56), (uint64_t)__p, 0, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "dict-mapped-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Text lexicon file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 59), (uint64_t)__p, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "optional-silence");
  std::string::basic_string[abi:ne180100]<0>(__p, "Optional silence phone");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 62), (uint64_t)__p, 1, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "silence-prob");
  std::string::basic_string[abi:ne180100]<0>(__p, "Silence probability (0.0 to 1.0)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 65), (uint64_t)__p, 1, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "phone-syms-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Phone table file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 66), (uint64_t)__p, 1, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "tree-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Tree file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 75), (uint64_t)__p, 1, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoding beam");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 636, (uint64_t)__p, 0, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "maximum number of tokens");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 80), (uint64_t)__p, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "word-boundary-int-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word boundary file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 82), (uint64_t)__p, 1, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "align-lattice-expand-limit");
  std::string::basic_string[abi:ne180100]<0>(__p, "Lattice expansion limit when doing word alignment(0 for none)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 90), (uint64_t)__p, 0, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "sil-phone-csl-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing colon-separated list of silence phones.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 91), (uint64_t)__p, 1, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B220D33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::TrainingGraphCompilerOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "transition-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scale of transition probabilities (excluding self-loops)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "self-loop-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scale of self-loop vs. non-self-loop probability mass ");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "reorder");
  std::string::basic_string[abi:ne180100]<0>(__p, "Reorder transition ids for greater decoding efficiency.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 9, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "rm-eps");
  std::string::basic_string[abi:ne180100]<0>(__p, "Remove [most] epsilons before minimization (only applicable if disambig symbols present)");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B220D5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ForceAlignDecoderBase::finishInit(quasar::ForceAlignDecoderBase *this)
{
  memset(&v42, 0, sizeof(v42));
  char v41 = 0;
  uint64_t v2 = (kaldi::Input *)kaldi::Input::Input(v40, (char *)this + 728, &v41);
  int v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v3 = (void *)kaldi::Input::Stream(v2);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  uint64_t v4 = std::locale::use_facet((const std::locale *)&v20, MEMORY[0x1E4FBA258]);
  unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale((std::locale *)&v20);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, (uint64_t)&v37, v5);
  if (kaldi::SplitStringToIntegers<int>((uint64_t)&v37, ":", 1, &v42))
  {
    kaldi::SilencePhoneSet::SilencePhoneSet(&v20, &v42);
    *((_DWORD *)this + 188) = v20;
    *((void *)this + 95) = *((void *)&v20 + 1);
    *((_WORD *)this + 384) = v21[0];
    std::vector<BOOL>::operator=((void **)this + 97, (uint64_t)&v21[1]);
    if ((long long *)((char *)this + 752) != &v20) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 800, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v21[1]) {
      operator delete(v21[1]);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(v37);
    }
    kaldi::Input::~Input((kaldi::Input *)v40);
    if (v42.__begin_)
    {
      v42.__end_ = v42.__begin_;
      operator delete(v42.__begin_);
    }
    quasar::ModelLoader::readContextDependency(*((void *)this + 46), (unsigned __int8 *)this + 600, &v20);
    long long v6 = v20;
    long long v20 = 0uLL;
    char v7 = (std::__shared_weak_count *)*((void *)this + 74);
    *(_OWORD *)((char *)this + 584) = v6;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      if (*((void *)&v20 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
      }
    }
    quasar::QsrTextSymbolTable::init(*((const std::string **)this + 71), (quasar::ForceAlignDecoderBase *)((char *)this + 32), 1, *((unsigned __int8 *)this + 441), 1);
    uint64_t v8 = quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 71), "<?>");
    if (v8 != -1)
    {
      int v9 = v8;
      uint64_t v10 = *((int *)this + 161);
      if (v10 && v8 != v10 && quasar::gLogLevel >= 2)
      {
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v24 = 0u;
        *(_OWORD *)int v21 = 0u;
        long long v22 = 0u;
        long long v20 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Silence label is set to ", 24);
        uint64_t v11 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" but does not match the auto-determined silence label ", 54);
        unint64_t v12 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)". Will use latter.", 18);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v20);
      }
      *((_DWORD *)this + 161) = v9;
    }
    quasar::ModelLoader::readWordBoundaryInfo(*((void **)this + 46), (unsigned int *)this + 161, (uint64_t)this + 656, (uint64_t)this + 680, (uint64_t *)&v20);
    long long v13 = v20;
    long long v20 = 0uLL;
    uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 89);
    *((_OWORD *)this + 44) = v13;
    if (v14)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (*((void *)&v20 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
      }
    }
    quasar::ModelLoader::readSymbolTable(*((void *)this + 46), (uint64_t)this + 528, 4, 0, &v20);
    long long v15 = v20;
    long long v20 = 0uLL;
    int v16 = (std::__shared_weak_count *)*((void *)this + 70);
    *(_OWORD *)((char *)this + 552) = v15;
    if (v16)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      if (*((void *)&v20 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
      }
    }
    quasar::ForceAlignDecoderBase::setDisambigPhoneIds(this);
    quasar::Lexicon::create((uint64_t)this + 472, (uint64_t)this + 448);
  }
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v24 = 0u;
  *(_OWORD *)int v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Invalid silence-phones string ", 30);
  if (v39 >= 0) {
    unsigned int v18 = &v37;
  }
  else {
    unsigned int v18 = (void **)v37;
  }
  if (v39 >= 0) {
    uint64_t v19 = HIBYTE(v39);
  }
  else {
    uint64_t v19 = v38;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v20);
}

void sub_1B220D9DC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 73) < 0) {
    operator delete(*(void **)(v1 - 96));
  }
  kaldi::Input::~Input((kaldi::Input *)(v1 - 72));
  uint64_t v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(void *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

unint64_t quasar::ForceAlignDecoderBase::setDisambigPhoneIds(quasar::ForceAlignDecoderBase *this)
{
  *((void *)this + 104) = *((void *)this + 103);
  unint64_t result = (*(uint64_t (**)(void))(**((void **)this + 69) + 120))(*((void *)this + 69));
  if (result)
  {
    unint64_t v3 = 0;
    uint64_t v4 = (void **)((char *)this + 824);
    do
    {
      (*(void (**)(void **__return_ptr))(**((void **)this + 69) + 88))(&__p);
      if (v18 < 0)
      {
        int v5 = *(unsigned __int8 *)__p;
        operator delete(__p);
        if (v5 == 35)
        {
LABEL_7:
          long long v6 = (char *)*((void *)this + 104);
          unint64_t v7 = *((void *)this + 105);
          if ((unint64_t)v6 >= v7)
          {
            int v9 = (char *)*v4;
            uint64_t v10 = (v6 - (unsigned char *)*v4) >> 2;
            unint64_t v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v12 = v7 - (void)v9;
            if (v12 >> 1 > v11) {
              unint64_t v11 = v12 >> 1;
            }
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v13 = v11;
            }
            if (v13)
            {
              uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 840, v13);
              long long v6 = (char *)*((void *)this + 104);
              int v9 = (char *)*((void *)this + 103);
            }
            else
            {
              uint64_t v14 = 0;
            }
            long long v15 = &v14[4 * v10];
            *(_DWORD *)long long v15 = v3;
            uint64_t v8 = v15 + 4;
            while (v6 != v9)
            {
              int v16 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v15 - 1) = v16;
              v15 -= 4;
            }
            *((void *)this + 103) = v15;
            *((void *)this + 104) = v8;
            *((void *)this + 105) = &v14[4 * v13];
            if (v9) {
              operator delete(v9);
            }
          }
          else
          {
            *(_DWORD *)long long v6 = v3;
            uint64_t v8 = v6 + 4;
          }
          *((void *)this + 104) = v8;
        }
      }
      else if (__p == 35)
      {
        goto LABEL_7;
      }
      ++v3;
      unint64_t result = (*(uint64_t (**)(void))(**((void **)this + 69) + 120))(*((void *)this + 69));
    }
    while (result > v3);
  }
  return result;
}

uint64_t quasar::ForceAlignDecoderBase::wordAlignLattice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = *(_DWORD *)(a1 + 720);
  if (v10 < 1) {
    int v11 = 0;
  }
  else {
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 160))(a3) * v10 + 1000;
  }
  uint64_t v12 = *(void *)(a1 + 704);
  unint64_t v13 = *(std::__shared_weak_count **)(a1 + 712);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a5)
  {
    std::allocate_shared[abi:ne180100]<kaldi::WordBoundaryInfo,std::allocator<kaldi::WordBoundaryInfo>,kaldi::WordBoundaryInfo&,void>(*(void *)(a1 + 704), &v17);
    uint64_t v14 = (std::__shared_weak_count *)*((void *)&v17 + 1);
    uint64_t v12 = v17;
    long long v17 = 0uLL;
    if (v13)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      if (*((void *)&v17 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
      }
    }
    if (v12 + 32 != a5) {
      std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t **)(v12 + 32), *(int **)a5, (int *)(a5 + 8));
    }
  }
  else
  {
    uint64_t v14 = v13;
  }
  if (kaldi::WordAlignLattice(a3, a2, v12, v11, a4))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a4 + 24))(a4) != -1)
    {
      kaldi::TopSortCompactLatticeIfNeeded(a4);
      uint64_t v15 = 1;
      if (!v14) {
        return v15;
      }
      goto LABEL_22;
    }
    if (quasar::gLogLevel >= 2)
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v17 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Word alignment lattice empty.", 29);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v17);
    }
  }
  else if (quasar::gLogLevel >= 2)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Word alignment failed.", 22);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v17);
  }
  uint64_t v15 = 0;
  if (v14) {
LABEL_22:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  return v15;
}

void sub_1B220DE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ForceAlignDecoderBase::align(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  memset(&v27, 0, sizeof(v27));
  uint64_t v5 = *a4;
  uint64_t v6 = a4[1];
  if (*a4 == v6)
  {
LABEL_32:
    kaldi::quasar::Lexicon::Lexicon(__p, &v27, 1, 0, 0);
    kaldi::quasar::Lexicon::SetPronView((uint64_t)__p, 2u, 1);
    v23[0] = 0;
    std::allocate_shared[abi:ne180100]<kaldi::quasar::LexiconFst,std::allocator<kaldi::quasar::LexiconFst>,float &,std::string &,BOOL,void>((float *)(a1 + 520), a1 + 496, v23, &v24);
    int v16 = (kaldi::quasar::LexiconFst *)v24;
    long long v17 = *(fst::SymbolTable **)(a1 + 552);
    uint64_t v18 = *(void *)(a1 + 568);
    long long v19 = *(fst::SymbolTable **)(v18 + 96);
    long long v20 = *(std::__shared_weak_count **)(v18 + 104);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    kaldi::quasar::LexiconFst::CreateFst(v16, (const kaldi::quasar::Lexicon *)__p, v17, v19, 0);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    quasar::Bitmap::~Bitmap(v16);
    fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v21);
    kaldi::quasar::Lexicon::~Lexicon((kaldi::quasar::Lexicon *)__p);
    __p[0] = &v27;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    uint64_t v28 = 0;
    operator new();
  }
  while (1)
  {
    quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)(a1 + 568), &v46);
    uint64_t v7 = v47;
    if ((v47 & 0x80u) != 0) {
      uint64_t v7 = *((void *)&v46 + 1);
    }
    if (v7)
    {
      long long v24 = 0u;
      long long v25 = 0u;
      int v26 = 1065353216;
      uint64_t v8 = *(void **)(a1 + 848);
      std::string::basic_string[abi:ne180100]<0>(__p, " ");
      quasar::Lexicon::lookUpProns(v8, (uint64_t)&v46, (uint64_t)&v24, (char *)__p);
      if (SBYTE7(v30) < 0) {
        operator delete(__p[0]);
      }
      if (*((void *)&v25 + 1))
      {
        for (int i = (long long *)v25; i; int i = *(long long **)i)
        {
          std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string const&,0>((std::string *)__p, &v46, i + 1);
          std::vector<std::pair<std::string,std::string>>::emplace_back<std::pair<std::string,std::string>>(&v27, (long long *)__p);
          if (SHIBYTE(v31) < 0) {
            operator delete(*((void **)&v30 + 1));
          }
          if (SBYTE7(v30) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else
      {
        if ((quasar::gLogLevel & 0x80000000) == 0)
        {
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find wordId=", 22);
          int v11 = (void *)std::ostream::operator<<();
          uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" word=", 6);
          if ((v47 & 0x80u) == 0) {
            unint64_t v13 = &v46;
          }
          else {
            unint64_t v13 = (long long *)v46;
          }
          if ((v47 & 0x80u) == 0) {
            uint64_t v14 = v47;
          }
          else {
            uint64_t v14 = *((void *)&v46 + 1);
          }
          uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" in lexicon", 11);
          quasar::QuasarFatalMessage::~QuasarFatalMessage((quasar::QuasarFatalMessage *)__p);
        }
        LODWORD(i) = 1;
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v24);
    }
    else
    {
      if ((quasar::gLogLevel & 0x80000000) == 0)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find word Id ", 23);
        int v10 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" in word symbol table", 21);
        quasar::QuasarFatalMessage::~QuasarFatalMessage((quasar::QuasarFatalMessage *)__p);
      }
      LODWORD(i) = 1;
    }
    if ((char)v47 < 0) {
      operator delete((void *)v46);
    }
    if (i) {
      break;
    }
    v5 += 4;
    if (v5 == v6) {
      goto LABEL_32;
    }
  }
  __p[0] = &v27;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return 2;
}

void sub_1B220E508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(&a13);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&a15);
  kaldi::ScoreCacheFasterDecoder::~ScoreCacheFasterDecoder((kaldi::ScoreCacheFasterDecoder *)&a17);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v60 - 120));
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  _Unwind_Resume(a1);
}

std::pair<std::string, std::string> *std::vector<std::pair<std::string,std::string>>::emplace_back<std::pair<std::string,std::string>>(std::vector<std::pair<std::string, std::string>> *a1, long long *a2)
{
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  uint64_t v5 = value;
  unint64_t v7 = *((void *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14) {
      uint64_t v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)p_end_cap, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    int v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    long long v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
  return end - 1;
}

void sub_1B220E81C(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t quasar::ForceAlignDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1 + 752;
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a1 + 752);
  uint64_t v9 = a2 + 96;
  uint64_t v10 = *(void *)(a1 + 760);
  *(_WORD *)(a2 + 112) = *(_WORD *)(a1 + 768);
  *(void *)(a2 + 104) = v10;
  std::vector<BOOL>::operator=((void **)(a2 + 120), a1 + 776);
  if (v9 != v8) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 + 144), *(char **)(a1 + 800), *(void *)(a1 + 808), (uint64_t)(*(void *)(a1 + 808) - *(void *)(a1 + 800)) >> 2);
  }
  uint64_t v11 = *(void *)(a1 + 552);
  uint64_t v12 = *(void *)(a1 + 560);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = *(std::__shared_weak_count **)(a2 + 176);
  *(void *)(a2 + 168) = v11;
  *(void *)(a2 + 176) = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = *(void *)(a1 + 704);
  uint64_t v15 = *(void *)(a1 + 712);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  int v16 = *(std::__shared_weak_count **)(a2 + 224);
  *(void *)(a2 + 216) = v14;
  *(void *)(a2 + 224) = v15;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v17 = *(void *)(a1 + 644);
  *(unsigned char *)(a2 + 208) = *(unsigned char *)(a1 + 652);
  *(void *)(a2 + 200) = v17;
  quasar::SymbolTableList::clear(*(quasar::SymbolTableList **)(*(void *)a3 + 472));
  long long v18 = *(uint64_t **)(*(void *)a3 + 472);
  long long v19 = *(std::__shared_weak_count **)(a1 + 576);
  uint64_t v70 = *(void *)(a1 + 568);
  int v71 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SymbolTableList::addSymbolTable(v18, &v70, 0, -1);
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  long long v20 = kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::RandomAccessTableReader(&v69, (std::string *)(a1 + 856));
  if (kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HasKey(v20, *(void *)(*(void *)a4 + 24) + 128))
  {
    uint64_t v21 = *(void *)(*(void *)a4 + 24);
    kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CheckImpl(&v69);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v69 + 16))(v69, v21 + 128);
    if (*(char *)(v22 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v22, *(void *)(v22 + 8));
    }
    else
    {
      long long v23 = *(_OWORD *)v22;
      *(void *)&__str[16] = *(void *)(v22 + 16);
      *(_OWORD *)std::string __str = v23;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, " ");
    quasar::splitAndTrimNoEmpty((const std::string *)__str, (char *)&__p, &v51);
    if (SHIBYTE(v50) < 0) {
      operator delete(__p);
    }
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    std::string __p = 0;
    float v49 = 0;
    int v50 = 0;
    long long v32 = v51;
    for (int i = v52; v32 != i; v32 = (long long *)((char *)v32 + 24))
    {
      if (*((char *)v32 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v32, *((void *)v32 + 1));
      }
      else
      {
        long long v34 = *v32;
        *(void *)&__str[16] = *((void *)v32 + 2);
        *(_OWORD *)std::string __str = v34;
      }
      int v35 = std::stoi((const std::string *)__str, 0, 10);
      int v36 = v35;
      long long v37 = v49;
      if (v49 >= v50)
      {
        long long v39 = (int *)__p;
        uint64_t v40 = ((char *)v49 - (unsigned char *)__p) >> 2;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v42 = (char *)v50 - (unsigned char *)__p;
        if (((char *)v50 - (unsigned char *)__p) >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          long long v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v50, v43);
          long long v39 = (int *)__p;
          long long v37 = v49;
        }
        else
        {
          long long v44 = 0;
        }
        long long v45 = (int *)&v44[4 * v40];
        *long long v45 = v36;
        long long v38 = v45 + 1;
        while (v37 != v39)
        {
          int v46 = *--v37;
          *--long long v45 = v46;
        }
        std::string __p = v45;
        float v49 = v38;
        int v50 = (int *)&v44[4 * v43];
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *float v49 = v35;
        long long v38 = v37 + 1;
      }
      float v49 = v38;
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
    }
    _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v54 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"No word ID sequence found for utterance ", 40);
    uint64_t v25 = *(void *)(*(void *)a4 + 24);
    uint64_t v28 = *(void *)(v25 + 128);
    uint64_t v26 = v25 + 128;
    uint64_t v27 = v28;
    int v29 = *(char *)(v26 + 23);
    if (v29 >= 0) {
      uint64_t v30 = v26;
    }
    else {
      uint64_t v30 = v27;
    }
    if (v29 >= 0) {
      uint64_t v31 = *(unsigned __int8 *)(v26 + 23);
    }
    else {
      uint64_t v31 = *(void *)(v26 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v30, v31);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__str);
  }
  kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReader(&v69);
  return 2;
}

void sub_1B220EDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a24);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&a11);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  a24 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReader((void *)(v29 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HasKey(void *a1, uint64_t a2)
{
  kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CheckImpl(a1);
  if (!kaldi::IsToken((uint64_t *)a2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"RandomAccessTableReader::HasKey, invalid key \"", 46);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)*a1 + 8);
  return v4();
}

void quasar::ForceAlignDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  quasar::ForceAlignDecoderBase::registerParams(this, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "ref-rspec");
  std::string::basic_string[abi:ne180100]<0>(__p, "Rspec containing reference word ID sequence for every utt");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 107), (uint64_t)__p, 0, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B220F01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ForceAlignDecoder::~ForceAlignDecoder(void **this)
{
  *this = &unk_1F0A53A18;
  if (*((char *)this + 879) < 0) {
    operator delete(this[107]);
  }
  quasar::ForceAlignDecoderBase::~ForceAlignDecoderBase((quasar::ForceAlignDecoderBase *)this);
}

{
  uint64_t vars8;

  *this = &unk_1F0A53A18;
  if (*((char *)this + 879) < 0) {
    operator delete(this[107]);
  }
  quasar::ForceAlignDecoderBase::~ForceAlignDecoderBase((quasar::ForceAlignDecoderBase *)this);
  JUMPOUT(0x1B3EA8670);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string const&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1B220F1A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<kaldi::WordBoundaryInfo,std::allocator<kaldi::WordBoundaryInfo>,kaldi::WordBoundaryInfo&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x58uLL);
  unint64_t result = std::__shared_ptr_emplace<kaldi::WordBoundaryInfo>::__shared_ptr_emplace[abi:ne180100]<kaldi::WordBoundaryInfo&,std::allocator<kaldi::WordBoundaryInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B220F204(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::WordBoundaryInfo>::__shared_ptr_emplace[abi:ne180100]<kaldi::WordBoundaryInfo&,std::allocator<kaldi::WordBoundaryInfo>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EA40;
  std::allocator<kaldi::WordBoundaryInfo>::construct[abi:ne180100]<kaldi::WordBoundaryInfo,kaldi::WordBoundaryInfo&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B220F274(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::WordBoundaryInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EA40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::WordBoundaryInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EA40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::WordBoundaryInfo>::__on_zero_shared(uint64_t a1)
{
  std::allocator<kaldi::WordBoundaryInfo>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

uint64_t *std::allocator<kaldi::WordBoundaryInfo>::construct[abi:ne180100]<kaldi::WordBoundaryInfo,kaldi::WordBoundaryInfo&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<kaldi::WordBoundaryInfo::PhoneType>::__init_with_size[abi:ne180100]<kaldi::WordBoundaryInfo::PhoneType*,kaldi::WordBoundaryInfo::PhoneType*>((void *)a2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  unint64_t result = std::set<int>::set[abi:ne180100]((uint64_t *)(a2 + 32), a3 + 32);
  *(unsigned char *)(a2 + 56) = *(unsigned char *)(a3 + 56);
  return result;
}

void sub_1B220F384(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<kaldi::WordBoundaryInfo>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__tree<int>::destroy(a2 + 32, *(void **)(a2 + 40));
  unint64_t v3 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

void *kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::RandomAccessTableReader(void *a1, std::string *this)
{
  *a1 = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this->__r_.__value_.__l.__size_) {
      return a1;
    }
  }
  else if (!*((unsigned char *)&this->__r_.__value_.__s + 23))
  {
    return a1;
  }
  if ((kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Open(a1, this) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Error opening RandomAccessTableReader object  (rspecifier is: ", 62);
    int v6 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v6 >= 0) {
      long long v7 = this;
    }
    else {
      long long v7 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v6 >= 0) {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, size);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, ")");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return a1;
}

uint64_t kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Open(void *a1, std::string *this)
{
  if (*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "RandomAccessTableReader::Open(): already open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  int v9 = 0;
  int v3 = kaldi::ClassifyRspecifier(this, 0, (uint64_t)&v9);
  if (v3 == 1)
  {
    if (BYTE1(v9))
    {
      if (BYTE2(v9)) {
        operator new();
      }
      operator new();
    }
    operator new();
  }
  if (v3 == 2) {
    operator new();
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    char v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"RandomAccessTableReader::Open(), invalid rspecifier: ", 53);
    int v5 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v5 >= 0) {
      int v6 = this;
    }
    else {
      int v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v5 >= 0) {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, size);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
  }
  return 0;
}

void sub_1B220F7AC(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

BOOL kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Open(uint64_t a1, std::string *this)
{
  if ((*(_DWORD *)(a1 + 136) - 2) <= 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v40, " Opening already open RandomAccessTableReader: call Close first.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  char v4 = (std::string *)(a1 + 48);
  kaldi::ClassifyRspecifier(this, a1 + 48, a1 + 16);
  int v5 = 1;
  BOOL result = kaldi::ReadScriptFile((uint64_t)v4, 1, (std::vector<std::pair<std::string, std::string>> *)(a1 + 104));
  if (result)
  {
    std::string::operator=((std::string *)(a1 + 24), this);
    if (!*(unsigned char *)(a1 + 17))
    {
      unint64_t v7 = *(void *)(a1 + 104);
      uint64_t v8 = *(const void ***)(a1 + 112);
      unint64_t v9 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v8 - v7) >> 4));
      if (v8 == (const void **)v7) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v9;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *,false>(v7, v8, (uint64_t)v40, v10, 1);
    }
    uint64_t v11 = *(void *)(a1 + 104);
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 112) - v11) >> 4) <= 1) {
      unint64_t v12 = 1;
    }
    else {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 112) - v11) >> 4);
    }
    uint64_t v13 = -48;
    do
    {
      if (!--v12)
      {
        BOOL result = 1;
        int v5 = 2;
        goto LABEL_67;
      }
      uint64_t v14 = v11 + v13 + 96;
      uint64_t v15 = (void *)(v11 + v13 + 48);
      uint64_t v16 = *(unsigned __int8 *)(v11 + v13 + 71);
      if (*(char *)(v11 + v13 + 71) < 0)
      {
        size_t v17 = *(void *)(v11 + v13 + 56);
        uint64_t v15 = (void *)*v15;
      }
      else
      {
        size_t v17 = *(unsigned __int8 *)(v11 + v13 + 71);
      }
      v13 += 48;
      int v18 = *(char *)(v14 + 23);
      if (v18 >= 0) {
        size_t v19 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        size_t v19 = *(void *)(v14 + 8);
      }
      if (v18 >= 0) {
        long long v20 = (unsigned __int8 *)v14;
      }
      else {
        long long v20 = *(unsigned __int8 **)v14;
      }
      if (v19 >= v17) {
        size_t v21 = v17;
      }
      else {
        size_t v21 = v19;
      }
      int v22 = memcmp(v15, v20, v21);
      if (v17 >= v19) {
        int v23 = 0;
      }
      else {
        int v23 = -1;
      }
      if (v22) {
        int v23 = v22;
      }
    }
    while (v23 < 0);
    long long v24 = (const void **)(v11 + v13);
    size_t v25 = *(void *)(v11 + v13 + 8);
    if ((v16 & 0x80u) == 0) {
      uint64_t v26 = v16;
    }
    else {
      uint64_t v26 = *(void *)(v11 + v13 + 8);
    }
    uint64_t v27 = " is not sorted (remove s, option or add ns, option): key is ";
    if (v26 == v19)
    {
      if ((v16 & 0x80) != 0)
      {
        if (!memcmp(*v24, v20, v25)) {
          uint64_t v27 = " contains duplicate key: ";
        }
      }
      else if (v16)
      {
        while (*(unsigned __int8 *)v24 == *v20)
        {
          long long v24 = (const void **)((char *)v24 + 1);
          ++v20;
          if (!--v16)
          {
            uint64_t v27 = " contains duplicate key: ";
            break;
          }
        }
      }
      else
      {
        uint64_t v27 = " contains duplicate key: ";
      }
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Script file ", 12);
      if (*(char *)(a1 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
      }
      else {
        std::string v38 = *v4;
      }
      kaldi::PrintableRxfilename((uint64_t)&v38, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)p_p, size);
      size_t v32 = strlen(v27);
      long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v27, v32);
      uint64_t v34 = *(void *)(a1 + 104) + v13;
      int v35 = *(char *)(v34 + 23);
      if (v35 >= 0) {
        uint64_t v36 = *(void *)(a1 + 104) + v13;
      }
      else {
        uint64_t v36 = *(void *)v34;
      }
      if (v35 >= 0) {
        uint64_t v37 = *(unsigned __int8 *)(v34 + 23);
      }
      else {
        uint64_t v37 = *(void *)(v34 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v36, v37);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    }
    BOOL result = 0;
    int v5 = 1;
  }
LABEL_67:
  *(_DWORD *)(a1 + 136) = v5;
  return result;
}

void sub_1B220FB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HasKey(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(unsigned __int8 *, uint64_t, void))(*(void *)a1 + 56))(a1, a2, a1[19]);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Value(uint64_t a1, const void **a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "RandomAccessTableReaderWriter: Value() called on not-open object.");
    goto LABEL_46;
  }
  int v4 = *(_DWORD *)(a1 + 136);
  if ((v4 - 3) > 1) {
    goto LABEL_19;
  }
  uint64_t v5 = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) == 0) {
    int v6 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    int v6 = a2[1];
  }
  unint64_t v7 = (const void *)*(unsigned __int8 *)(a1 + 95);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    unint64_t v7 = *(const void **)(a1 + 80);
  }
  if (v6 != v7) {
    goto LABEL_19;
  }
  if (v8 >= 0) {
    unint64_t v9 = (unsigned __int8 *)(a1 + 72);
  }
  else {
    unint64_t v9 = *(unsigned __int8 **)(a1 + 72);
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*a2, v9, (size_t)a2[1]))
    {
LABEL_19:
      if ((*(uint64_t (**)(uint64_t, const void **, uint64_t))(*(void *)a1 + 56))(a1, a2, 1))
      {
        uint64_t v11 = *((unsigned __int8 *)a2 + 23);
        unint64_t v12 = a2[1];
        if ((v11 & 0x80u) == 0) {
          unint64_t v12 = (const void *)*((unsigned __int8 *)a2 + 23);
        }
        uint64_t v13 = (const void *)*(unsigned __int8 *)(a1 + 95);
        int v14 = (char)v13;
        if ((char)v13 < 0) {
          uint64_t v13 = *(const void **)(a1 + 80);
        }
        if (v12 == v13)
        {
          uint64_t v15 = v14 >= 0 ? (unsigned __int8 *)(a1 + 72) : *(unsigned __int8 **)(a1 + 72);
          if ((v11 & 0x80) == 0 && *((unsigned char *)a2 + 23))
          {
            uint64_t v16 = v11 - 1;
            size_t v17 = a2;
            do
            {
              int v19 = *(unsigned __int8 *)v17;
              size_t v17 = (const void **)((char *)v17 + 1);
              int v18 = v19;
              int v21 = *v15++;
              int v20 = v21;
              BOOL v23 = v16-- != 0;
            }
            while (v18 == v20 && v23);
          }
        }
        goto LABEL_38;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
      size_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"RandomAccessTableReader::Value(), could not get item for key ", 61);
      int v26 = *((char *)a2 + 23);
      if (v26 >= 0) {
        uint64_t v27 = a2;
      }
      else {
        uint64_t v27 = (void *)*a2;
      }
      if (v26 >= 0) {
        uint64_t v28 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        uint64_t v28 = (uint64_t)a2[1];
      }
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
      uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", rspecifier is ", 16);
      uint64_t v33 = *(void *)(a1 + 24);
      uint64_t v32 = a1 + 24;
      uint64_t v31 = v33;
      int v34 = *(char *)(v32 + 23);
      if (v34 >= 0) {
        uint64_t v35 = v32;
      }
      else {
        uint64_t v35 = v31;
      }
      if (v34 >= 0) {
        uint64_t v36 = *(unsigned __int8 *)(v32 + 23);
      }
      else {
        uint64_t v36 = *(void *)(v32 + 8);
      }
      uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v35, v36);
      std::string v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"[to ignore this ", 16);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v38, ", add the p, (permissive) option to the rspecifier.");
LABEL_46:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
    }
  }
  else if (*((unsigned char *)a2 + 23))
  {
    uint64_t v10 = a2;
    while (*(unsigned __int8 *)v10 == *v9)
    {
      uint64_t v10 = (const void **)((char *)v10 + 1);
      ++v9;
      if (!--v5) {
        goto LABEL_37;
      }
    }
    goto LABEL_19;
  }
LABEL_37:
  if (v4 != 3)
  {
    if (!*(unsigned char *)(a1 + 16)) {
      goto LABEL_40;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "Value called twice for the same key\n");
    goto LABEL_46;
  }
LABEL_38:
  *(_DWORD *)(a1 + 136) = 4;
  if (*(unsigned char *)(a1 + 16)) {
    kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::MakeTombstone((void *)a1, (unsigned __int8 *)a2);
  }
LABEL_40:
  return kaldi::KaldiObjectHolder<quasar::KaldiString>::Value((uint64_t *)(a1 + 96));
}

void sub_1B220FDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Close(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Close() called on RandomAccessTableReader that was not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  kaldi::KaldiObjectHolder<quasar::KaldiString>::Clear((void *)(a1 + 96));
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = 0;
  uint64_t v3 = *(void *)(a1 + 104);
  for (uint64_t i = *(void *)(a1 + 112);
        i != v3;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](a1 + 120, i))
  {
    i -= 48;
  }
  *(void *)(a1 + 112) = v3;
  MEMORY[0x1B3EA7B20](a1 + 72, "");
  return 1;
}

void kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderScriptImpl(uint64_t a1)
{
  kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderScriptImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

BOOL kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::IsOpen(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 136) - 2) < 3;
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HasKeyInternal(uint64_t a1, uint64_t *a2, int a3)
{
  if (*(_DWORD *)(a1 + 136) <= 1u)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "HasKey called on RandomAccessTableReader object that is not open.");
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  kaldi::IsToken(a2);
  unint64_t v16 = 0;
  uint64_t result = kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::LookupKey((void *)a1, (unsigned __int8 *)a2, &v16);
  if (!result) {
    return result;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v7 = *(void *)(a1 + 104) + 48 * v16;
    if ((*(char *)(v7 + 47) & 0x80000000) == 0)
    {
      if (*(unsigned char *)(v7 + 47)) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
    if (!*(void *)(v7 + 32))
    {
LABEL_16:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"HasKey called on key whose value was already read, and  you specified the \"once\" option (o,): try removing o, or adding no, : rspecifier is ", 141);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, a1 + 24);
      goto LABEL_32;
    }
  }
LABEL_6:
  if (!a3) {
    return 1;
  }
  if (kaldi::Input::OpenInternal((void *)(a1 + 8), *(void *)(a1 + 104) + 48 * v16 + 24, 1, 0))
  {
    if ((*(_DWORD *)(a1 + 136) - 3) <= 1) {
      kaldi::KaldiObjectHolder<quasar::KaldiString>::Clear((void *)(a1 + 96));
    }
    kaldi::Input::Stream((kaldi::Input *)(a1 + 8));
    kaldi::KaldiObjectHolder<quasar::KaldiString>::Read((uint64_t *)(a1 + 96));
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"RandomAccessTableReader: error opening stream ", 46);
    unint64_t v9 = *(void *)(a1 + 104) + 48 * v16;
    if (*(char *)(v9 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(v9 + 24), *(void *)(v9 + 32));
    }
    else
    {
      long long v10 = *(_OWORD *)(v9 + 24);
      v14.__r_.__value_.__r.__words[2] = *(void *)(v9 + 40);
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
    }
    kaldi::PrintableRxfilename((uint64_t)&v14, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
  }
  return 0;
}

void sub_1B22102C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::MakeTombstone(void *a1, unsigned __int8 *a2)
{
  unint64_t v5 = 0;
  if ((kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::LookupKey(a1, a2, &v5) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "RandomAccessTableReader object in inconsistent state.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return MEMORY[0x1B3EA7B20](a1[13] + 48 * v5 + 24, "");
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::LookupKey(void *a1, unsigned __int8 *a2, unint64_t *a3)
{
  int v4 = a2;
  unint64_t v6 = a1[16];
  uint64_t v7 = a1[13];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[14] - v7) >> 4);
  if (v6 < v8)
  {
    unint64_t v9 = (unsigned __int8 *)(v7 + 48 * v6);
    uint64_t v10 = v9[23];
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = v9[23];
    }
    else {
      uint64_t v11 = *((void *)v9 + 1);
    }
    uint64_t v12 = a2[23];
    int v13 = (char)v12;
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *((void *)a2 + 1);
    }
    if (v11 == v12)
    {
      if (v13 < 0) {
        a2 = *(unsigned __int8 **)a2;
      }
      if ((v10 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v9, a2, *((void *)v9 + 1))) {
          goto LABEL_48;
        }
      }
      else
      {
        if (!v9[23]) {
          goto LABEL_48;
        }
        while (*v9 == *a2)
        {
          ++v9;
          ++a2;
          if (!--v10) {
            goto LABEL_48;
          }
        }
      }
    }
  }
  a1[16] = ++v6;
  if (v6 >= v8) {
    goto LABEL_32;
  }
  std::string v14 = (unsigned __int8 *)(v7 + 48 * v6);
  uint64_t v15 = v14[23];
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v14[23];
  }
  else {
    uint64_t v16 = *((void *)v14 + 1);
  }
  uint64_t v17 = v4[23];
  int v18 = (char)v17;
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *((void *)v4 + 1);
  }
  if (v16 != v17) {
    goto LABEL_32;
  }
  if (v18 >= 0) {
    int v19 = v4;
  }
  else {
    int v19 = *(unsigned __int8 **)v4;
  }
  if ((v15 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v14, v19, *((void *)v14 + 1))) {
      goto LABEL_32;
    }
LABEL_48:
    *a3 = v6;
    return 1;
  }
  if (!v14[23]) {
    goto LABEL_48;
  }
  while (*v14 == *v19)
  {
    ++v14;
    ++v19;
    if (!--v15) {
      goto LABEL_48;
    }
  }
LABEL_32:
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[1],0>(&v33, (long long *)v4, "");
  int v20 = (const void **)a1[13];
  int v21 = (const void **)a1[14];
  char v36 = 0;
  int v22 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<std::string,std::string> *>,std::__wrap_iter<std::pair<std::string,std::string> *>,std::pair<std::string,std::string>,std::__identity,std::__less<void,void>>(v20, v21, (const void **)&v33.__r_.__value_.__l.__data_, (uint64_t)&v37);
  BOOL v23 = v22;
  if ((const void **)a1[14] != v22)
  {
    uint64_t v24 = *((unsigned __int8 *)v22 + 23);
    if ((v24 & 0x80u) == 0) {
      size_t v25 = (const void *)*((unsigned __int8 *)v22 + 23);
    }
    else {
      size_t v25 = v22[1];
    }
    int v26 = (const void *)v4[23];
    int v27 = (char)v26;
    if ((char)v26 < 0) {
      int v26 = (const void *)*((void *)v4 + 1);
    }
    if (v25 == v26)
    {
      if (v27 >= 0) {
        uint64_t v28 = v4;
      }
      else {
        uint64_t v28 = *(unsigned __int8 **)v4;
      }
      if ((v24 & 0x80) == 0)
      {
        if (*((unsigned char *)v22 + 23))
        {
          uint64_t v29 = v22;
          while (*(unsigned __int8 *)v29 == *v28)
          {
            uint64_t v29 = (const void **)((char *)v29 + 1);
            ++v28;
            if (!--v24) {
              goto LABEL_56;
            }
          }
          goto LABEL_50;
        }
LABEL_56:
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - a1[13]) >> 4);
        *a3 = v32;
        a1[16] = v32;
        uint64_t v30 = 1;
        goto LABEL_51;
      }
      if (!memcmp(*v22, v28, (size_t)v22[1])) {
        goto LABEL_56;
      }
    }
  }
LABEL_50:
  uint64_t v30 = 0;
LABEL_51:
  if (v35 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  return v30;
}

void sub_1B22105E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderScriptImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A48500;
  if ((*(_DWORD *)(a1 + 136) - 3) <= 1) {
    kaldi::KaldiObjectHolder<quasar::KaldiString>::Clear((void *)(a1 + 96));
  }
  uint64_t v3 = (void **)(a1 + 104);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder((uint64_t *)(a1 + 96));
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  kaldi::Input::~Input((kaldi::Input *)(a1 + 8));
  return a1;
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Open(uint64_t a1, std::string *this)
{
  if (*(_DWORD *)(a1 + 76) && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "TableReader::Open, error closing previous input.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  kaldi::ClassifyRspecifier(this, a1 + 48, a1 + 72);
  int v4 = 1;
  uint64_t v5 = kaldi::Input::OpenInternal((void *)(a1 + 8), a1 + 48, 1, 0);
  if ((v5 & 1) == 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"TableReader: failed to open stream ", 35);
      if (*(char *)(a1 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
      }
      else {
        std::string v10 = *(std::string *)(a1 + 48);
      }
      kaldi::PrintableRxfilename((uint64_t)&v10, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    }
    int v4 = 0;
  }
  *(_DWORD *)(a1 + 76) = v4;
  return v5;
}

void sub_1B2210870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Value(uint64_t a1, std::string *a2)
{
  uint64_t v2 = a2;
  if (!kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(a1, a2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"RandomAccessTableReader: Value() called but no such key ", 56);
    int v19 = SHIBYTE(v2->__r_.__value_.__r.__words[2]);
    if (v19 >= 0) {
      uint64_t v20 = (uint64_t)v2;
    }
    else {
      uint64_t v20 = v2->__r_.__value_.__r.__words[0];
    }
    if (v19 >= 0) {
      uint64_t size = HIBYTE(v2->__r_.__value_.__r.__words[2]);
    }
    else {
      uint64_t size = v2->__r_.__value_.__l.__size_;
    }
    int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, size);
    BOOL v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" in archive ", 12);
    if (*(char *)(a1 + 71) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else {
      std::string __p = *(std::string *)(a1 + 48);
    }
    kaldi::PrintableRxfilename((uint64_t)&__p, &v25);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, (uint64_t)&v25);
    std::string::~string(&v25);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
  }
  uint64_t v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  std::string::size_type v5 = v2->__r_.__value_.__l.__size_;
  if ((v4 & 0x80u) == 0) {
    std::string::size_type v5 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 39);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 24);
  }
  if (v5 == v6)
  {
    unint64_t v8 = v7 >= 0 ? (unsigned __int8 *)(a1 + 16) : *(unsigned __int8 **)(a1 + 16);
    if ((v4 & 0x80) == 0 && *((unsigned char *)&v2->__r_.__value_.__s + 23))
    {
      uint64_t v9 = v4 - 1;
      do
      {
        int v11 = v2->__r_.__value_.__s.__data_[0];
        uint64_t v2 = (std::string *)((char *)v2 + 1);
        int v10 = v11;
        int v13 = *v8++;
        int v12 = v13;
        BOOL v15 = v9-- != 0;
      }
      while (v10 == v12 && v15);
    }
  }
  uint64_t v16 = *(uint64_t **)(a1 + 40);
  return kaldi::KaldiObjectHolder<quasar::KaldiString>::Value(v16);
}

void kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderDSortedArchiveImpl(uint64_t a1)
{
  kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderDSortedArchiveImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::IsOpen(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 76);
  if (v1 >= 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "IsOpen() called on invalid object.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return (0x1Eu >> v1) & 1;
}

BOOL kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(uint64_t a1, std::string *__str)
{
  uint64_t v4 = (std::string *)(a1 + 80);
  size_t v5 = *(unsigned __int8 *)(a1 + 103);
  if (*(char *)(a1 + 103) < 0)
  {
    if (!*(void *)(a1 + 88)) {
      goto LABEL_23;
    }
  }
  else if (!*(unsigned char *)(a1 + 103))
  {
    goto LABEL_23;
  }
  int v6 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (v6 >= 0) {
    unint64_t v8 = __str;
  }
  else {
    unint64_t v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  if ((v5 & 0x80u) == 0) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = *(void *)(a1 + 88);
  }
  if ((v5 & 0x80u) == 0) {
    int v10 = v4;
  }
  else {
    int v10 = *(std::string **)(a1 + 80);
  }
  if (v9 >= size) {
    size_t v11 = size;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = size < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
    long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"RandomAccessTableReader: you provided the \"cs\" option ", 54);
    int v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"but are not calling with keys in sorted order: ", 47);
    int v47 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v47 >= 0) {
      unint64_t v48 = __str;
    }
    else {
      unint64_t v48 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v47 >= 0) {
      std::string::size_type v49 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v49 = __str->__r_.__value_.__l.__size_;
    }
    int v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v48, v49);
    unsigned int v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" < ", 3);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51, (uint64_t)v4);
LABEL_93:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v53);
  }
LABEL_23:
  std::string::operator=(v4, __str);
  int v14 = *(_DWORD *)(a1 + 76);
  if (v14 == 1)
  {
    kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::ReadNextObject(a1);
    int v14 = *(_DWORD *)(a1 + 76);
  }
  if ((v14 - 3) < 2) {
    return 0;
  }
  if (!v14)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v53, "Trying to access a RandomAccessTableReader object that is not open.");
    goto LABEL_93;
  }
  char v16 = 0;
  memset(&__p, 0, sizeof(__p));
  std::string::size_type v17 = *(unsigned __int8 *)(a1 + 39);
  while (1)
  {
    int v18 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v18 >= 0) {
      std::string::size_type v19 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v19 = __str->__r_.__value_.__l.__size_;
    }
    if (v18 >= 0) {
      uint64_t v20 = __str;
    }
    else {
      uint64_t v20 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    int v21 = (char)v17;
    if ((v17 & 0x80u) != 0) {
      std::string::size_type v17 = *(void *)(a1 + 24);
    }
    int v22 = v21 >= 0 ? (const void *)(a1 + 16) : *(const void **)(a1 + 16);
    size_t v23 = v17 >= v19 ? v19 : v17;
    int v24 = memcmp(v20, v22, v23);
    int v25 = v19 < v17 ? -1 : v17 < v19;
    int v26 = v24 ? v24 : v25;
    if (v26 < 1) {
      break;
    }
    std::string::operator=(&__p, (const std::string *)(a1 + 16));
    int v27 = kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(*(uint64_t **)(a1 + 40));
    MEMORY[0x1B3EA8670](v27, 0x20C4093837F09);
    *(void *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 76) = 1;
    kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::ReadNextObject(a1);
    char v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*(_DWORD *)(a1 + 76) != 2) {
      break;
    }
    std::string::size_type v17 = *(unsigned __int8 *)(a1 + 39);
    if (*(char *)(a1 + 39) < 0)
    {
      uint64_t v29 = *(const void **)(a1 + 16);
      size_t v28 = *(void *)(a1 + 24);
    }
    else
    {
      size_t v28 = *(unsigned __int8 *)(a1 + 39);
      uint64_t v29 = (const void *)(a1 + 16);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v30 >= v28) {
      size_t v32 = v28;
    }
    else {
      size_t v32 = v30;
    }
    int v33 = memcmp(v29, p_p, v32);
    if (v28 < v30) {
      int v34 = -1;
    }
    else {
      int v34 = v30 < v28;
    }
    if (v33) {
      int v34 = v33;
    }
    if (v34 <= 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
      char v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"RandomAccessTableReader: you provided the \"s\" option ", 53);
      char v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" (sorted order), but keys are out of order or duplicated: ", 58);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v37 = &__p;
      }
      else {
        char v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = __p.__r_.__value_.__l.__size_;
      }
      long long v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
      uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" is followed by ", 16);
      int v41 = *(char *)(a1 + 39);
      if (v41 >= 0) {
        uint64_t v42 = a1 + 16;
      }
      else {
        uint64_t v42 = *(void *)(a1 + 16);
      }
      if (v41 >= 0) {
        uint64_t v43 = *(unsigned __int8 *)(a1 + 39);
      }
      else {
        uint64_t v43 = *(void *)(a1 + 24);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v53);
    }
  }
  BOOL v15 = v26 == 0;
  if (v16 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v15;
}

void sub_1B2210E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::ReadNextObject(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "TableReader: ReadNextObject() called from wrong state.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  uint64_t v2 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)(a1 + 8));
  std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, a1 + 16);
  int v3 = *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32);
  if ((v3 & 2) == 0)
  {
    if ((v3 & 5) != 0)
    {
      if (kaldi::g_kaldi_verbose_level < -1)
      {
LABEL_26:
        int v5 = 4;
        goto LABEL_27;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Error reading archive ", 22);
      if (*(char *)(a1 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
      }
      else {
        std::string v25 = *(std::string *)(a1 + 48);
      }
      kaldi::PrintableRxfilename((uint64_t)&v25, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
        goto LABEL_26;
      }
      size_t v9 = (void *)v25.__r_.__value_.__r.__words[0];
LABEL_24:
      operator delete(v9);
      goto LABEL_25;
    }
    int v6 = std::istream::peek();
    if (v6 != 9)
    {
      if (v6 == 10) {
        goto LABEL_12;
      }
      if (v6 != 32)
      {
        if (kaldi::g_kaldi_verbose_level < -1) {
          goto LABEL_26;
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
        int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Invalid archive file format: expected space after key ", 54);
        int v11 = *(char *)(a1 + 39);
        if (v11 >= 0) {
          uint64_t v12 = a1 + 16;
        }
        else {
          uint64_t v12 = *(void *)(a1 + 16);
        }
        if (v11 >= 0) {
          uint64_t v13 = *(unsigned __int8 *)(a1 + 39);
        }
        else {
          uint64_t v13 = *(void *)(a1 + 24);
        }
        int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
        BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", got character ", 16);
        char v24 = std::istream::peek();
        kaldi::CharToString((kaldi *)&v24, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v16 = &__p;
        }
        else {
          char v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
        }
        int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
        std::string::size_type v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", reading ", 10);
        if (*(char *)(a1 + 71) < 0) {
          std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
        }
        else {
          std::string v22 = *(std::string *)(a1 + 48);
        }
        kaldi::PrintableRxfilename((uint64_t)&v22, &v23);
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v20 = &v23;
        }
        else {
          uint64_t v20 = (std::string *)v23.__r_.__value_.__r.__words[0];
        }
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v21 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v21 = v23.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_25;
        }
        size_t v9 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_24;
      }
    }
    std::istream::get();
LABEL_12:
    operator new();
  }
  int v5 = 3;
LABEL_27:
  *(_DWORD *)(a1 + 76) = v5;
}

void sub_1B221132C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CloseInternal(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Close() called on TableReader twice or otherwise wrongly.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  if (*(void *)(a1 + 8)) {
    kaldi::Input::Close((kaldi::Input *)(a1 + 8));
  }
  int v2 = *(_DWORD *)(a1 + 76);
  if (v2 == 2)
  {
    int v3 = kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(*(uint64_t **)(a1 + 40));
    MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
    *(void *)(a1 + 40) = 0;
    int v2 = *(_DWORD *)(a1 + 76);
  }
  *(_DWORD *)(a1 + 76) = 0;
  if (v2 == 4)
  {
    if (!*(unsigned char *)(a1 + 75)) {
      return 0;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"RandomAccessTableReader, error state detected closing reader.  ", 63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Ignoring it because you specified permissive mode.", 50);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    }
  }
  return 1;
}

void sub_1B2211468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderDSortedArchiveImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A487C0;
  if (kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::IsOpen(a1)
    && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Error closing RandomAccessTableReader\n", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderArchiveImplBase(a1);
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderArchiveImplBase(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A486A0;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  kaldi::Input::~Input((kaldi::Input *)(a1 + 8));
  return a1;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HasKey(uint64_t a1, unsigned __int8 *a2)
{
  kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HandlePendingDelete(a1);
  uint64_t v10 = 0;
  uint64_t result = kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(a1, a2, &v10);
  if (result && *(unsigned char *)(a1 + 72) && !*(void *)(*(void *)(a1 + 80) + 32 * v10 + 24))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Error: HasKey called after Value() already called for ", 54);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" that key, and once (o) option specified: ", 42);
    if (*(char *)(a1 + 71) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else {
      std::string __p = *(std::string *)(a1 + 48);
    }
    kaldi::PrintableRxfilename((uint64_t)&__p, &v8);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, (uint64_t)&v8);
    std::string::~string(&v8);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return result;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Value(uint64_t a1, uint64_t a2)
{
  kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HandlePendingDelete(a1);
  uint64_t v23 = 0;
  if (!kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(a1, (unsigned __int8 *)a2, &v23))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"RandomAccessTableReader: Value() called but no such key ", 56);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" in archive ", 12);
    if (*(char *)(a1 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else {
      std::string v19 = *(std::string *)(a1 + 48);
    }
    kaldi::PrintableRxfilename((uint64_t)&v19, &v21);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, (uint64_t)&v21);
    std::string::~string(&v21);
    int v18 = &v19;
LABEL_26:
    std::string::~string(v18);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  uint64_t v4 = *(uint64_t **)(*(void *)(a1 + 80) + 32 * v23 + 24);
  if (!v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Error: Value() called more than once for key ", 45);
    int v13 = *(char *)(a2 + 23);
    if (v13 >= 0) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = *(void *)a2;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v15 = *(void *)(a2 + 8);
    }
    char v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    std::string::size_type v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" and once (o) option specified: ", 32);
    if (*(char *)(a1 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else {
      std::string v20 = *(std::string *)(a1 + 48);
    }
    kaldi::PrintableRxfilename((uint64_t)&v20, &v21);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, (uint64_t)&v21);
    std::string::~string(&v21);
    int v18 = &v20;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 72)) {
    *(void *)(a1 + 112) = v23;
  }
  return kaldi::KaldiObjectHolder<quasar::KaldiString>::Value(v4);
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Close(void *a1)
{
  uint64_t v2 = a1[10];
  uint64_t v3 = a1[11];
  uint64_t v4 = a1 + 10;
  if (v3 != v2)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 24;
    do
    {
      int v7 = *(uint64_t **)(v2 + v6);
      if (v7)
      {
        uint64_t v8 = kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(v7);
        MEMORY[0x1B3EA8670](v8, 0x20C4093837F09);
        uint64_t v2 = a1[10];
        uint64_t v3 = a1[11];
      }
      ++v5;
      v6 += 32;
    }
    while (v5 < (v3 - v2) >> 5);
  }
  std::vector<quasar::TextTokenizer::Token>::__clear[abi:ne180100](v4);
  a1[13] = -1;
  a1[14] = -1;
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CloseInternal((uint64_t)a1);
}

void kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderSortedArchiveImpl(void **a1)
{
  kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderSortedArchiveImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HandlePendingDelete(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 112);
  if (v1 != -1)
  {
    uint64_t v2 = result;
    uint64_t v3 = kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(*(uint64_t **)(*(void *)(result + 80)
                                                                                       + 32 * v1
                                                                                       + 24));
    uint64_t result = MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
    *(void *)(*(void *)(v2 + 80) + 32 * *(void *)(v2 + 112) + 24) = 0;
    *(void *)(v2 + 112) = -1;
  }
  return result;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a1 + 80);
  unint64_t v7 = *(void *)(a1 + 104);
  v82 = (uint64_t *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 88);
  if (v7 >= (v8 - v6) >> 5) {
    goto LABEL_16;
  }
  uint64_t v9 = (unsigned __int8 *)(v6 + 32 * v7);
  uint64_t v10 = v9[23];
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v9[23];
  }
  else {
    uint64_t v11 = *((void *)v9 + 1);
  }
  uint64_t v12 = a2[23];
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *((void *)a2 + 1);
  }
  if (v11 != v12) {
    goto LABEL_16;
  }
  if (v13 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v9, a2, *((void *)v9 + 1))) {
      goto LABEL_16;
    }
LABEL_111:
    *a3 = v7;
    return 1;
  }
  if (!v9[23]) {
    goto LABEL_111;
  }
  while (*v9 == *a2)
  {
    ++v9;
    ++a2;
    if (!--v10) {
      goto LABEL_111;
    }
  }
LABEL_16:
  int v14 = *(_DWORD *)(a1 + 76);
  if (v14 == 1)
  {
    char v16 = 0;
    std::string v83 = (_OWORD *)(a1 + 16);
    std::string::size_type v17 = (unint64_t *)(a1 + 96);
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 80);
      uint64_t v8 = *(void *)(a1 + 88);
      if (v6 != v8)
      {
        int v18 = *(char *)(v8 - 9);
        int v15 = (char)v4[23];
        if (v15 >= 0) {
          size_t v19 = v4[23];
        }
        else {
          size_t v19 = *((void *)v4 + 1);
        }
        if (v15 >= 0) {
          std::string v20 = (const std::string::value_type *)v4;
        }
        else {
          std::string v20 = *(const std::string::value_type **)v4;
        }
        if (v18 >= 0) {
          size_t v21 = *(unsigned __int8 *)(v8 - 9);
        }
        else {
          size_t v21 = *(void *)(v8 - 24);
        }
        if (v18 >= 0) {
          std::string v22 = (const void *)(v8 - 32);
        }
        else {
          std::string v22 = *(const void **)(v8 - 32);
        }
        if (v21 >= v19) {
          size_t v23 = v19;
        }
        else {
          size_t v23 = v21;
        }
        int v24 = memcmp(v20, v22, v23);
        if (v19 < v21) {
          int v25 = -1;
        }
        else {
          int v25 = v21 < v19;
        }
        if (v24) {
          int v25 = v24;
        }
        if (v25 < 1) {
          break;
        }
      }
      kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::ReadNextObject(a1);
      int v26 = *(_DWORD *)(a1 + 76);
      if (v26 == 2)
      {
        unint64_t v27 = *(void *)(a1 + 88);
        char v28 = *(unsigned char *)(a1 + 39);
        if (*(void *)(a1 + 80) != v27)
        {
          size_t v29 = *(unsigned __int8 *)(a1 + 39);
          std::string::size_type v30 = (const void *)(a1 + 16);
          if ((*(unsigned char *)(a1 + 39) & 0x80) != 0)
          {
            std::string::size_type v30 = *(const void **)(a1 + 16);
            size_t v29 = *(void *)(a1 + 24);
          }
          int v31 = *(char *)(v27 - 9);
          if (v31 >= 0) {
            size_t v32 = *(unsigned __int8 *)(v27 - 9);
          }
          else {
            size_t v32 = *(void *)(v27 - 24);
          }
          if (v31 >= 0) {
            int v33 = (const void *)(v27 - 32);
          }
          else {
            int v33 = *(const void **)(v27 - 32);
          }
          if (v32 >= v29) {
            size_t v34 = v29;
          }
          else {
            size_t v34 = v32;
          }
          int v35 = memcmp(v30, v33, v34);
          if (v29 < v32) {
            int v36 = -1;
          }
          else {
            int v36 = v32 < v29;
          }
          if (v35) {
            int v36 = v35;
          }
          if (v36 <= 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
            long long v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"RandomAccessTableReader: you provide the sorted (s) ", 52);
            long long v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"option but keys in archive ", 27);
            if (*(char *)(a1 + 71) < 0) {
              std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
            }
            else {
              std::string v86 = *(std::string *)(a1 + 48);
            }
            kaldi::PrintableRxfilename((uint64_t)&v86, &v84);
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v68 = &v84;
            }
            else {
              long long v68 = (std::string *)v84.__r_.__value_.__r.__words[0];
            }
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v84.__r_.__value_.__l.__size_;
            }
            uint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, size);
            int v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)" are not ", 9);
            uint64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"in sorted order: ", 17);
            uint64_t v73 = *(void *)(a1 + 88);
            uint64_t v76 = *(void *)(v73 - 32);
            uint64_t v74 = v73 - 32;
            uint64_t v75 = v76;
            int v77 = *(char *)(v74 + 23);
            if (v77 >= 0) {
              uint64_t v78 = v74;
            }
            else {
              uint64_t v78 = v75;
            }
            if (v77 >= 0) {
              uint64_t v79 = *(unsigned __int8 *)(v74 + 23);
            }
            else {
              uint64_t v79 = *(void *)(v74 + 8);
            }
            v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, v78, v79);
            char v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)" is followed by ", 16);
            std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v81, (uint64_t)v83);
            std::string::~string(&v84);
            std::string::~string(&v86);
LABEL_126:
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v87);
          }
        }
        if (v28 < 0)
        {
          std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
          uint64_t v37 = *(void *)(a1 + 40);
          unint64_t v27 = *(void *)(a1 + 88);
        }
        else
        {
          uint64_t v37 = *(void *)(a1 + 40);
          *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *v83;
          v84.__r_.__value_.__r.__words[2] = *(void *)(a1 + 32);
        }
        uint64_t v85 = v37;
        if (v27 >= *v17)
        {
          uint64_t v39 = (uint64_t)(v27 - *v82) >> 5;
          if ((unint64_t)(v39 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v40 = *v17 - *v82;
          uint64_t v41 = v40 >> 4;
          if (v40 >> 4 <= (unint64_t)(v39 + 1)) {
            uint64_t v41 = v39 + 1;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v42 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v41;
          }
          uint64_t v89 = a1 + 96;
          uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 96, v42);
          std::string::size_type v44 = (std::string::size_type)&v43[32 * v39];
          v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
          v87.__r_.__value_.__l.__size_ = v44;
          uint64_t v88 = &v43[32 * v45];
          long long v46 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
          *(void *)(v44 + 16) = *((void *)&v84.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v44 = v46;
          memset(&v84, 0, sizeof(v84));
          *(void *)(v44 + 24) = v85;
          v87.__r_.__value_.__r.__words[2] = v44 + 32;
          std::vector<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>::__swap_out_circular_buffer(v82, &v87);
          uint64_t v47 = *(void *)(a1 + 88);
          std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v87);
          int v48 = SHIBYTE(v84.__r_.__value_.__r.__words[2]);
          *(void *)(a1 + 88) = v47;
          if (v48 < 0) {
            operator delete(v84.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v38 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
          *(void *)(v27 + 16) = *((void *)&v84.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v27 = v38;
          memset(&v84, 0, sizeof(v84));
          *(void *)(v27 + 24) = v85;
          *(void *)(a1 + 88) = v27 + 32;
        }
        *(void *)(a1 + 40) = 0;
        int v26 = 1;
        *(_DWORD *)(a1 + 76) = 1;
      }
      char v16 = 1;
      if (v26 != 1)
      {
        uint64_t v6 = *(void *)(a1 + 80);
        uint64_t v8 = *(void *)(a1 + 88);
        goto LABEL_96;
      }
    }
    if ((v16 & 1) == 0) {
      goto LABEL_19;
    }
LABEL_96:
    if (v6 == v8) {
      return 0;
    }
    uint64_t v56 = *(unsigned __int8 *)(v8 - 9);
    if ((v56 & 0x80u) == 0) {
      uint64_t v57 = *(unsigned __int8 *)(v8 - 9);
    }
    else {
      uint64_t v57 = *(void *)(v8 - 24);
    }
    uint64_t v58 = v4[23];
    int v59 = (char)v58;
    if ((v58 & 0x80u) != 0) {
      uint64_t v58 = *((void *)v4 + 1);
    }
    if (v57 != v58) {
      return 0;
    }
    long long v60 = (const void **)(v8 - 32);
    if (v59 >= 0) {
      long long v61 = v4;
    }
    else {
      long long v61 = *(unsigned __int8 **)v4;
    }
    if ((v56 & 0x80) != 0)
    {
      if (memcmp(*v60, v61, *(void *)(v8 - 24))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v8 - 9))
    {
      while (*(unsigned __int8 *)v60 == *v61)
      {
        long long v60 = (const void **)((char *)v60 + 1);
        ++v61;
        if (!--v56) {
          goto LABEL_119;
        }
      }
      return 0;
    }
LABEL_119:
    uint64_t v64 = ((v8 - v6) >> 5) - 1;
    *a3 = v64;
    *(void *)(a1 + 104) = v64;
    return 1;
  }
  if (!v14)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v87, "Trying to access a RandomAccessTableReader object that is not open.");
    goto LABEL_126;
  }
  LOBYTE(v15) = v4[23];
LABEL_19:
  if ((v15 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    uint64_t v6 = *(void *)(a1 + 80);
    uint64_t v8 = *(void *)(a1 + 88);
  }
  else
  {
    std::string v87 = *(std::string *)v4;
  }
  uint64_t v88 = 0;
  char v90 = 0;
  uint64_t v49 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *> *>,std::__wrap_iter<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *> *>,std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__identity,kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::PairCompare>(v6, v8, (const void **)&v87.__r_.__value_.__l.__data_);
  uint64_t v50 = v49;
  if (*(void *)(a1 + 88) == v49) {
    goto LABEL_113;
  }
  uint64_t v51 = v4[23];
  if ((v51 & 0x80u) == 0) {
    uint64_t v52 = v4[23];
  }
  else {
    uint64_t v52 = *((void *)v4 + 1);
  }
  uint64_t v53 = *(unsigned __int8 *)(v49 + 23);
  int v54 = (char)v53;
  if ((v53 & 0x80u) != 0) {
    uint64_t v53 = *(void *)(v49 + 8);
  }
  if (v52 != v53) {
    goto LABEL_113;
  }
  if (v54 >= 0) {
    long long v55 = (unsigned __int8 *)v49;
  }
  else {
    long long v55 = *(unsigned __int8 **)v49;
  }
  if ((v51 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, v55, *((void *)v4 + 1)))
    {
LABEL_113:
      uint64_t v62 = 0;
      goto LABEL_114;
    }
  }
  else if (v4[23])
  {
    while (*v4 == *v55)
    {
      ++v4;
      ++v55;
      if (!--v51) {
        goto LABEL_116;
      }
    }
    goto LABEL_113;
  }
LABEL_116:
  uint64_t v63 = (v50 - *(void *)(a1 + 80)) >> 5;
  *a3 = v63;
  *(void *)(a1 + 104) = v63;
  uint64_t v62 = 1;
LABEL_114:
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  return v62;
}

void sub_1B2212054(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

void sub_1B22120A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    JUMPOUT(0x1B22120C8);
  }
  JUMPOUT(0x1B22120CCLL);
}

uint64_t std::vector<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v8 - 8) = *(void *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *> *>,std::__wrap_iter<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *> *>,std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__identity,kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::PairCompare>(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v3 = a1;
  if (a2 != a1)
  {
    unint64_t v4 = (a2 - a1) >> 5;
    int v5 = *((char *)a3 + 23);
    if (v5 >= 0) {
      size_t v6 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v6 = (size_t)a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = v3 + 32 * (v4 >> 1);
      int v9 = *(char *)(v8 + 23);
      if (v9 >= 0) {
        size_t v10 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        size_t v10 = *(void *)(v8 + 8);
      }
      if (v9 >= 0) {
        uint64_t v11 = (const void *)(v3 + 32 * (v4 >> 1));
      }
      else {
        uint64_t v11 = *(const void **)v8;
      }
      if (v6 >= v10) {
        size_t v12 = v10;
      }
      else {
        size_t v12 = v6;
      }
      int v13 = memcmp(v11, v7, v12);
      BOOL v14 = v10 < v6;
      if (v13) {
        BOOL v14 = v13 < 0;
      }
      if (v14) {
        v4 += ~(v4 >> 1);
      }
      else {
        v4 >>= 1;
      }
      if (v14) {
        uint64_t v3 = v8 + 32;
      }
    }
    while (v4);
  }
  return v3;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderSortedArchiveImpl(void **a1)
{
  *a1 = &unk_1F0A48730;
  if (kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::IsOpen((uint64_t)a1)
    && ((*((uint64_t (**)(void **))*a1 + 3))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Error closing RandomAccessTableReader\n", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  v3[0] = a1 + 10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v3);
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderArchiveImplBase((uint64_t)a1);
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HasKey(uint64_t a1, unsigned __int8 *a2)
{
  kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HandlePendingDelete(a1);
  return kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(a1, a2, 0);
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Value(uint64_t a1, uint64_t a2)
{
  kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HandlePendingDelete(a1);
  uint64_t v14 = 0;
  if (!kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(a1, (unsigned __int8 *)a2, &v14))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"RandomAccessTableReader: Value() called but no such key ", 56);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    size_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" in archive ", 12);
    if (*(char *)(a1 + 71) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else {
      std::string __p = *(std::string *)(a1 + 48);
    }
    kaldi::PrintableRxfilename((uint64_t)&__p, &v12);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (uint64_t)&v12);
    std::string::~string(&v12);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  return v14;
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Close(uint64_t a1)
{
  for (uint64_t i = *(void **)(a1 + 96); i; uint64_t i = (void *)*i)
  {
    uint64_t v3 = (uint64_t *)i[5];
    if (v3)
    {
      unint64_t v4 = kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(v3);
      MEMORY[0x1B3EA8670](v4, 0x20C4093837F09);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(a1 + 80);
  MEMORY[0x1B3EA7B20](a1 + 136, "");
  *(unsigned char *)(a1 + 128) = 0;
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CloseInternal(a1);
}

void kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderUnsortedArchiveImpl(uint64_t a1)
{
  kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderUnsortedArchiveImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HandlePendingDelete(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    *(unsigned char *)(a1 + 128) = 0;
    uint64_t v2 = *(uint64_t **)(*(void *)(a1 + 120) + 40);
    if (v2)
    {
      uint64_t v3 = kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(v2);
      MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
    }
    if (*(char *)(a1 + 159) < 0) {
      uint64_t v4 = *(void *)(a1 + 144);
    }
    else {
      uint64_t v4 = *(unsigned __int8 *)(a1 + 159);
    }
    uint64_t v5 = *(void *)(a1 + 120);
    if (!v4)
    {
      std::string::operator=((std::string *)(a1 + 136), (const std::string *)(v5 + 16));
      uint64_t v5 = *(void *)(a1 + 120);
    }
    if (*(char *)(v5 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(v5 + 16), *(void *)(v5 + 24));
      uint64_t v5 = *(void *)(a1 + 120);
    }
    else
    {
      std::string v12 = *(std::string *)(v5 + 16);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::erase((void *)(a1 + 80), (uint64_t *)v5);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11, 3);
      int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"After deleting holder for key: ", 31);
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v7 = &v12;
      }
      else {
        uint64_t v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
      }
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v12.__r_.__value_.__l.__size_;
      }
      int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", map std::string::size_type size = ", 13);
      size_t v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)".", 1);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B2212744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 - 25) < 0) {
    operator delete(*(void **)(v10 - 48));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 80;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::find<std::string>((void *)(a1 + 80), (char *)a2);
  if (v7)
  {
    if (!a3) {
      return 1;
    }
    uint64_t v8 = v7;
    goto LABEL_4;
  }
  if (*(_DWORD *)(a1 + 76) != 1)
  {
LABEL_33:
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v20 = a2[23];
      if ((v20 & 0x80u) == 0) {
        uint64_t v21 = a2[23];
      }
      else {
        uint64_t v21 = *((void *)a2 + 1);
      }
      uint64_t v22 = *(unsigned __int8 *)(a1 + 159);
      int v23 = (char)v22;
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *(void *)(a1 + 144);
      }
      if (v21 == v22)
      {
        if (v23 >= 0) {
          int v24 = (unsigned __int8 *)(a1 + 136);
        }
        else {
          int v24 = *(unsigned __int8 **)(a1 + 136);
        }
        if ((v20 & 0x80) == 0)
        {
          if (a2[23])
          {
            int v25 = a2;
            while (*v25 == *v24)
            {
              ++v25;
              ++v24;
              if (!--v20) {
                goto LABEL_48;
              }
            }
            return 0;
          }
LABEL_48:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
          int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"RandomAccessTableReader: you specified the once (o) option but you are calling using key ", 89);
          int v27 = (char)a2[23];
          if (v27 >= 0) {
            uint64_t v28 = (uint64_t)a2;
          }
          else {
            uint64_t v28 = *(void *)a2;
          }
          if (v27 >= 0) {
            uint64_t v29 = a2[23];
          }
          else {
            uint64_t v29 = *((void *)a2 + 1);
          }
          std::string::size_type v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
          int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" more than once: archive is ", 28);
          if (*(char *)(a1 + 71) < 0) {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
          }
          else {
            std::string __p = *(std::string *)(a1 + 48);
          }
          kaldi::PrintableRxfilename((uint64_t)&__p, &v41);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v31, (uint64_t)&v41);
          std::string::~string(&v41);
          std::string::~string(&__p);
          goto LABEL_71;
        }
        if (!memcmp(*(const void **)a2, v24, *((void *)a2 + 1))) {
          goto LABEL_48;
        }
      }
    }
    return 0;
  }
  uint64_t v10 = (const void **)(a1 + 16);
  while (1)
  {
    kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::ReadNextObject(a1);
    int v11 = *(_DWORD *)(a1 + 76);
    if (v11 == 2) {
      break;
    }
LABEL_32:
    if (v11 != 1) {
      goto LABEL_33;
    }
  }
  *(_DWORD *)(a1 + 76) = 1;
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)v10;
    v42.__r_.__value_.__r.__words[2] = *(void *)(a1 + 32);
  }
  uint64_t v43 = *(void *)(a1 + 40);
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>(v6, (char *)&v42, (uint64_t)&v42);
  char v13 = v12;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (!v13)
  {
    size_t v32 = *(uint64_t **)(a1 + 40);
    if (v32)
    {
      int v33 = kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(v32);
      MEMORY[0x1B3EA8670](v33, 0x20C4093837F09);
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    size_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Error in RandomAccessTableReader: duplicate key ", 48);
    int v35 = *(char *)(a1 + 39);
    if (v35 >= 0) {
      uint64_t v36 = a1 + 16;
    }
    else {
      uint64_t v36 = *(void *)(a1 + 16);
    }
    if (v35 >= 0) {
      uint64_t v37 = *(unsigned __int8 *)(a1 + 39);
    }
    else {
      uint64_t v37 = *(void *)(a1 + 24);
    }
    long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
    uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" in archive ", 12);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v39, a1 + 48);
LABEL_71:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42);
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v14 = *(unsigned __int8 *)(a1 + 39);
  if ((v14 & 0x80u) == 0) {
    uint64_t v15 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v15 = *(void *)(a1 + 24);
  }
  uint64_t v16 = a2[23];
  int v17 = (char)v16;
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *((void *)a2 + 1);
  }
  if (v15 != v16) {
    goto LABEL_31;
  }
  if (v17 >= 0) {
    int v18 = a2;
  }
  else {
    int v18 = *(unsigned __int8 **)a2;
  }
  if ((v14 & 0x80) == 0)
  {
    if (!*(unsigned char *)(a1 + 39)) {
      goto LABEL_56;
    }
    size_t v19 = (unsigned __int8 *)(a1 + 16);
    while (*v19 == *v18)
    {
      ++v19;
      ++v18;
      if (!--v14) {
        goto LABEL_56;
      }
    }
    goto LABEL_31;
  }
  if (memcmp(*v10, v18, *(void *)(a1 + 24)))
  {
LABEL_31:
    int v11 = *(_DWORD *)(a1 + 76);
    goto LABEL_32;
  }
LABEL_56:
  if (!a3) {
    return 1;
  }
LABEL_4:
  *a3 = kaldi::KaldiObjectHolder<quasar::KaldiString>::Value(*((uint64_t **)v8 + 5));
  if (!*(unsigned char *)(a1 + 72)) {
    return 1;
  }
  *(void *)(a1 + 120) = v8;
  uint64_t result = 1;
  *(unsigned char *)(a1 + 128) = 1;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::find<std::string>(void *a1, char *a2)
{
  uint64_t v3 = a2[23];
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *((void *)a2 + 1);
  }
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(char **)a2;
  }
  for (unint64_t i = 0; v3; --v3)
  {
    uint64_t v7 = *v5++;
    unint64_t i = v7 + 7853 * i;
  }
  int8x8_t v8 = (int8x8_t)a1[1];
  if (!*(void *)&v8) {
    return 0;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = i;
    if (i >= *(void *)&v8) {
      unint64_t v11 = i % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v8 - 1) & i;
  }
  char v12 = *(unsigned __int8 ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  char v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v15 = *((void *)v13 + 1);
      if (v15 == i)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v14, v13 + 16, (unsigned __int8 *)a2)) {
          return v13;
        }
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(void *)&v8) {
            v15 %= *(void *)&v8;
          }
        }
        else
        {
          v15 &= *(void *)&v8 - 1;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      char v13 = *(unsigned __int8 **)v13;
    }
    while (v13);
  }
  return v13;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v7 = a2[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (v8 >= 0) {
    uint8x8_t v9 = a2;
  }
  else {
    uint8x8_t v9 = *(char **)a2;
  }
  for (unint64_t i = 0; v7; --v7)
  {
    uint64_t v11 = *v9++;
    unint64_t i = v11 + 7853 * i;
  }
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v3 = i;
      if (i >= v12) {
        unint64_t v3 = i % v12;
      }
    }
    else
    {
      unint64_t v3 = (v12 - 1) & i;
    }
    unint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v15)
    {
      for (uint64_t j = *v15; j; uint64_t j = *(unsigned __int8 **)j)
      {
        unint64_t v17 = *((void *)j + 1);
        if (v17 == i)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, j + 16, (unsigned __int8 *)a2)) {
            return j;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::__construct_node_hash<std::pair<std::string const,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>(a1, i, a3, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (i >= v12) {
        unint64_t v3 = i % v12;
      }
      else {
        unint64_t v3 = i;
      }
    }
    else
    {
      unint64_t v3 = (v12 - 1) & i;
    }
  }
  int v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    void *v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t j = (unsigned __int8 *)v27[0];
  ++*(void *)(a1 + 24);
  return j;
}

void sub_1B2212EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::__construct_node_hash<std::pair<std::string const,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int v8 = operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *int v8 = 0;
  v8[1] = a2;
  uint8x8_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v8[4] = *(void *)(a3 + 16);
  }
  v8[5] = *(void *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B2212F70(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderUnsortedArchiveImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A48850;
  if (kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::IsOpen(a1)
    && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Error closing RandomAccessTableReader\n", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 80);
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderArchiveImplBase(a1);
}

uint64_t simple_sort(int a1, int a2)
{
  return (a1 - a2);
}

void reverseTrie(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  Trie<unsigned int,unsigned int>::Trie(a3, 0);
  *(_DWORD *)&v17[8] = 0;
  int v18 = 0;
  int v16 = 0;
  *(void *)unint64_t v17 = (a2 + 1);
  if (a2 == -1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = 0;
    int v6 = 0;
    char v12 = 0;
    while (1)
    {
      TrieIter2<unsigned int,unsigned int>::TrieIter2(v11, a1, *(void *)&v17[4] - 4 * v16, (v6 - 1), 0);
      while (1)
      {
        uint64_t v8 = TrieIter2<unsigned int,unsigned int>::next((uint64_t)v11);
        if (!v8) {
          break;
        }
        Vocab::copy(v14 - 4 * (int)v13, (unsigned int *)(*(void *)&v17[4] - 4 * v16), v7);
        Vocab::reverse(v14 - 4 * (int)v13, v9);
        int v10 = *(_DWORD *)(v8 + 8);
        *((_DWORD *)Trie<unsigned int,unsigned int>::insertTrie(a3, (unsigned int *)(v14 - 4 * (int)v13), &v12) + 2) = v10;
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(v11);
      ++v6;
    }
  }
  Array<unsigned int>::alloc();
}

void sub_1B22131D0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v2 - 64);
  if (v4) {
    MEMORY[0x1B3EA8630](v4, 0x1000C8052888210);
  }
  Trie<unsigned int,unsigned int>::~Trie(v1);
  _Unwind_Resume(a1);
}

void MEModel::MEModel(MEModel *this, Vocab *a2, int a3)
{
  LM::LM(this, a2);
  *(void *)uint64_t v5 = &unk_1F0A34B48;
  *(_DWORD *)(v5 + 152) = a3;
  *(unsigned char *)(v5 + 176) = 0;
  *(void *)(v5 + 184) = 0;
  Trie<unsigned int,unsigned int>::Trie(v5 + 192, 0);
  Trie<unsigned int,unsigned int>::Trie((char *)this + 208, 0);
  *((void *)this + 28) = 0;
  *((_DWORD *)this + 58) = 1000;
}

void sub_1B22132C0(_Unwind_Exception *a1)
{
  Trie<unsigned int,unsigned int>::~Trie(v2);
  LM::~LM(v1);
  _Unwind_Resume(a1);
}

void MEModel::~MEModel(MEModel *this)
{
  *(void *)this = &unk_1F0A34B48;
  MEModel::clear(this);
  LHash<unsigned int,double>::clear((void *)this + 28, 0);
  Trie<unsigned int,unsigned int>::~Trie((char *)this + 208);
  Trie<unsigned int,unsigned int>::~Trie((char *)this + 192);
  LM::~LM(this);
}

{
  uint64_t vars8;

  MEModel::~MEModel(this);
  JUMPOUT(0x1B3EA8670);
}

void MEModel::clear(MEModel *this)
{
  uint64_t v2 = (hmaxent::model *)*((void *)this + 23);
  if (v2)
  {
    hmaxent::model::~model(v2);
    MEMORY[0x1B3EA8670]();
  }
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::clear((void *)this + 26, 0);
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::clear((void *)this + 24, 0);
  LHash<unsigned int,double>::clear((void *)this + 28, 0);
}

float MEModel::wordProb(uint64_t a1, const unsigned int *a2, Vocab *this)
{
  int v6 = Vocab::length((uint64_t)this, a2);
  if (*(unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 344))(a1))
  {
    if (*(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24)) == a2
      || *(_DWORD *)(a1 + 152) >= 2u
      && ((int v7 = *(_DWORD *)this,
           v7 == *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24)))
       || *(_DWORD *)(a1 + 152) >= 3u
       && v6
       && (int v8 = *((_DWORD *)this + 1),
           v8 == *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24)))))
    {
      if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 264))(a1)
        || *(unsigned char *)(a1 + 8)
        || Debug::debugAll <= 1 && *(_DWORD *)(a1 + 12) < 2u)
      {
        return -INFINITY;
      }
      uint8x8_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      int v10 = "[OOV context]";
      uint64_t v11 = 13;
LABEL_25:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      return -INFINITY;
    }
  }
  unsigned int v18 = 0;
  if (!LHash<unsigned int,double>::locate((_DWORD **)(a1 + 224), a2, &v18))
  {
    if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 264))(a1)
      || *(unsigned char *)(a1 + 8)
      || Debug::debugAll <= 1 && *(_DWORD *)(a1 + 12) < 2u)
    {
      return -INFINITY;
    }
    uint8x8_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v10 = "[OOV]";
    uint64_t v11 = 5;
    goto LABEL_25;
  }
  char v12 = (unint64_t *)(*(void *)(a1 + 224) + 16 * v18 + 8);
  int v17 = 0;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, const unsigned int *, Vocab *, int *))(*(void *)a1 + 208))(a1, a2, this, &v17);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 264))(a1)
    && !*(unsigned char *)(a1 + 8)
    && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
  {
    uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"[", 1);
    int v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"gram]", 5);
  }
  return hmaxent::model::log_prob_context(*(unint64_t ***)(a1 + 184), *(unsigned int *)(v13 + 8), *v12)
       / 2.30258509;
}

_DWORD **MEModel::contextID(MEModel *this, unsigned int a2, const unsigned int *a3, unsigned int *a4)
{
  uint64_t v5 = (_DWORD **)((char *)this + 192);
  if (*((_DWORD *)this + 38) == 1)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    unint64_t v6 = 0;
    do
    {
      unsigned int v9 = a3[v6];
      if (v9 == -1) {
        break;
      }
      int v11 = 0;
      if (!LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(v5, v9, &v11)) {
        break;
      }
      uint64_t v5 = (_DWORD **)&(*v5)[6 * v11 + 2];
      ++v6;
    }
    while (v6 < (*((_DWORD *)this + 38) - 1));
  }
  *a4 = v6;
  return v5;
}

uint64_t MEModel::read(MEModel *this, File *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = File::getline(a2);
  if (!strncmp(v3, "H-MAXENT 0.1", 0xCuLL))
  {
    uint64_t v11 = 0;
    char v12 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    int v8 = File::getline(a2);
    if (sscanf(v8, "# %ld %ld %ld %ld", &v12, &v11, &v10, &v9)) {
      operator new();
    }
  }
  uint64_t v4 = File::position((const char **)a2, MEMORY[0x1E4FBA240]);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"format error in H-MAXENT file", 29);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  unint64_t v6 = std::locale::use_facet(v13, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(v13);
  std::ostream::put();
  std::ostream::flush();
  return 0;
}

void sub_1B2213FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  Trie<unsigned int,unsigned int>::~Trie(va);
  _Unwind_Resume(a1);
}

uint64_t MEModel::write(MEModel *this, File *a2)
{
  LHashIter<unsigned int,unsigned long>::LHashIter((uint64_t)v37, (_DWORD **)this + 28, 0);
  int v36 = 0;
  int v31 = (void *)((char *)this + 192);
  while (1)
  {
    uint64_t v4 = (unsigned int *)LHashIter<unsigned int,unsigned long>::next((uint64_t)v37, &v36);
    if (!v4) {
      break;
    }
    int v5 = v36;
    unsigned int v6 = *v4;
    v32[0] = 0;
    int v7 = (_DWORD *)LHash<unsigned int,Trie<unsigned int,unsigned int>>::insert(v31, v6, v32);
    if (!v32[0]) {
      _DWORD *v7 = 0;
    }
    v7[2] = v5;
  }
  File::fprintf(a2, "H-MAXENT 0.1\n");
  int v8 = *(void **)(*((void *)this + 23) + 16);
  File::fprintf(a2, "# %ld %ld %ld %ld\n", *v8, v8[1], (uint64_t)(*(void *)(v8[4] + 8) - *(void *)v8[4]) >> 5, (uint64_t)(*(void *)(v8[3] + 8) - *(void *)v8[3]) >> 3);
  uint64_t v9 = *(void **)(*((void *)this + 23) + 120);
  int v10 = *((_DWORD *)this + 38);
  *(_DWORD *)&v34[8] = 0;
  int v35 = 0;
  int v33 = 0;
  *(void *)size_t v34 = (v10 + 1);
  if (v10 != -1) {
    Array<unsigned int>::alloc();
  }
  uint64_t v11 = 0;
  do
  {
    TrieIter2<unsigned int,unsigned int>::TrieIter2(v32, (char *)this + 208, *(void *)&v34[4] - 4 * v33, v11, 0);
    while (1)
    {
      uint64_t v12 = TrieIter2<unsigned int,unsigned int>::next((uint64_t)v32);
      if (!v12) {
        break;
      }
      uint64_t v13 = *(unsigned int *)(v12 + 8);
      uint64_t v14 = *(void *)v8[4];
      uint64_t v15 = v14 + 32 * v13;
      uint64_t v17 = *(void *)(v15 + 24);
      int v16 = (void *)(v15 + 24);
      File::fprintf(a2, "%ld", v17);
      if (v11)
      {
        int v18 = 0;
        do
        {
          float v19 = (const char *)(*(uint64_t (**)(void, void))(**((void **)this + 3) + 32))(*((void *)this + 3), *(unsigned int *)(*(void *)&v34[4] + 4 * (v18 - v33)));
          File::fprintf(a2, " %s", v19);
          ++v18;
        }
        while (v11 != v18);
      }
      File::fprintf(a2, "\n");
      uint64_t v20 = v14 + 32 * v13;
      uint64_t v23 = *(void *)(v20 + 16);
      unint64_t v22 = (void *)(v20 + 16);
      unsigned int v21 = v23;
      if (*v16 + v23 > (unint64_t)v23)
      {
        uint64_t v24 = v21;
        unsigned int v25 = v21 + 1;
        do
        {
          uint64_t v26 = *((void *)this + 3);
          int v27 = (unsigned int *)Trie<unsigned int,unsigned int>::find((_DWORD **)v31, *(void *)(*(void *)v8[3] + 8 * v24));
          uint64_t v28 = (const char *)(*(uint64_t (**)(uint64_t, void))(*(void *)v26 + 32))(v26, *v27);
          File::fprintf(a2, "%s %f\n", v28, *(double *)(*v9 + 8 * v24));
          uint64_t v24 = v25;
        }
        while (*v16 + *v22 > (unint64_t)v25++);
      }
      File::fprintf(a2, "\n");
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v32);
    uint64_t v11 = (v11 + 1);
  }
  while (v11 < *((_DWORD *)this + 38));
  if (*(void *)&v34[4]) {
    MEMORY[0x1B3EA8630](*(void *)&v34[4], 0x1000C8052888210);
  }
  if (v38) {
    MEMORY[0x1B3EA8630](v38, 0x1000C8052888210);
  }
  return 1;
}

void sub_1B2214360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v29 = *(void *)(v27 - 96);
  if (v29) {
    MEMORY[0x1B3EA8630](v29, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void MEModel::getNgramLM(MEModel *this)
{
}

void sub_1B2214790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v32 = *(void *)(v30 - 128);
  if (v32) {
    MEMORY[0x1B3EA8630](v32, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MEModel::contextID(MEModel *this, const unsigned int *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(MEModel *, uint64_t, const unsigned int *, unsigned int *))(*(void *)this + 208))(this, 0xFFFFFFFFLL, a2, a3);
}

uint64_t MEModel::skipOOVs(MEModel *this)
{
  return (uint64_t)this + 176;
}

void MEModel::_estimate<double>(uint64_t a1, uint64_t a2)
{
  VocabIter::VocabIter((VocabIter *)v33, *(const Vocab **)(a1 + 24), 1);
  int v4 = *(_DWORD *)(a1 + 152);
  *(_DWORD *)&v31[8] = 0;
  int v32 = 0;
  int v30 = 0;
  *(void *)int v31 = (v4 + 1);
  if (v4 == -1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    MEModel::modifyCounts<double>(a1, a2);
    char v26 = 0;
    if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
    {
      int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Counting counts of order 1 ", 27);
      std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
      unsigned int v6 = std::locale::use_facet(&v25, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
      std::locale::~locale(&v25);
      std::ostream::put();
      std::ostream::flush();
    }
    int v7 = 0;
    unsigned int v8 = 0;
    for (uint64_t i = 0;
          i <= (*(unsigned int (**)(void))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24));
          uint64_t i = (i + 1))
    {
      if ((*(unsigned char *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 152))(*(void *)(a1 + 24))
         || i != *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24)))
        && i != *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 136))(*(void *)(a1 + 24))
        && !(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 24) + 176))(*(void *)(a1 + 24), i))
      {
        LOBYTE(v25.__locale_) = 0;
        *(void *)LHash<unsigned int,double>::insert((void *)(a1 + 224), i, &v25) = v8;
        ++v7;
        ++v8;
      }
    }
    uint64_t v10 = *(void *)&v31[4];
    *(_DWORD *)(*(void *)&v31[4] - 4 * v30) = -1;
    uint64_t v23 = (void *)(a1 + 208);
    *((_DWORD *)Trie<unsigned int,unsigned int>::insertTrie((void *)(a1 + 208), (unsigned int *)(v10 - 4 * v30), &v26)+ 2) = 0;
    if (*(_DWORD *)(a1 + 152) >= 2u)
    {
      uint64_t v11 = (void *)(a2 + 160);
      int v12 = 1;
      unsigned int v13 = 2;
      do
      {
        if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Counting counts of order ", 25);
          uint64_t v14 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
          uint64_t v15 = std::locale::use_facet(&v25, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
          std::locale::~locale(&v25);
          std::ostream::put();
          std::ostream::flush();
        }
        TrieIter2<unsigned int,double>::TrieIter2(&v25, v11, *(void *)&v31[4] - 4 * v30, v13 - 1, simple_sort);
        while (TrieIter2<unsigned int,double>::next((uint64_t)&v25))
        {
          uint64_t v16 = v28;
          uint64_t v17 = (int)v27;
          LOBYTE(v34[0]) = 0;
          inserted = Trie<unsigned int,unsigned long>::insertTrie(v11, (unsigned int *)(*(void *)&v31[4] - 4 * v30), v34);
          TrieIter2<unsigned int,double>::TrieIter2(v24, inserted, v16 - 4 * v17, 1, simple_sort);
          char v19 = 1;
          while (TrieIter2<unsigned int,double>::next((uint64_t)v24))
          {
            char v19 = 0;
            if (!(*(unsigned int (**)(void, void))(**(void **)(a1 + 24) + 176))(*(void *)(a1 + 24), *(unsigned int *)(v28 - 4 * (int)v27)))++v7; {
          }
            }
          if ((v19 & 1) == 0)
          {
            uint64_t v20 = Trie<unsigned int,unsigned int>::insertTrie(v23, (unsigned int *)(*(void *)&v31[4] - 4 * v30), &v26);
            if (!v26) {
              *((_DWORD *)v20 + 2) = v12++;
            }
          }
          TrieIter2<unsigned int,unsigned int>::~TrieIter2(v24);
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2(&v25);
        ++v13;
      }
      while (v13 <= *(_DWORD *)(a1 + 152));
    }
    if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll > 9 || *(_DWORD *)(a1 + 12) >= 0xAu))
    {
      unsigned int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Contexts:", 9);
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
      unint64_t v22 = std::locale::use_facet(&v25, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v25);
      std::ostream::put();
      std::ostream::flush();
      Trie<unsigned int,unsigned int>::dump((_DWORD **)v23, 0);
    }
    operator new();
  }
  Array<unsigned int>::alloc();
}

uint64_t sub_1B2215444(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  if (v59) {
    MEMORY[0x1B3EA8670](v59, 0x20C40960023A9);
  }
  if (!*(unsigned char *)(v58 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(v58 + 12) >= 2u))
  {
    long long v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Creating reverse context index...", 33);
    std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(void *)(*v61 - 24)));
    uint64_t v62 = std::locale::use_facet(&v67, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
    std::locale::~locale(&v67);
    std::ostream::put();
    std::ostream::flush();
  }
  reverseTrie(v66, *(_DWORD *)(v58 + 152), &v67);
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::operator=((void *)(v58 + 192), &v67);
  *(_DWORD *)(v58 + 200) = v68;
  Trie<unsigned int,unsigned int>::~Trie(&v67);
  if (v69) {
    MEMORY[0x1B3EA8630](v69, 0x1000C8052888210);
  }
  uint64_t v63 = *(void *)(v60 - 160);
  if (v63) {
    MEMORY[0x1B3EA8630](v63, 0x1000C8052888210);
  }
  uint64_t v64 = *(void *)(v60 - 120);
  if (v64) {
    MEMORY[0x1B3EA8630](v64, 0x50C80EE9192B6);
  }
  return 1;
}

void sub_1B22155C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v36 = *(void *)(v34 - 160);
  if (v36) {
    MEMORY[0x1B3EA8630](v36, 0x1000C8052888210);
  }
  uint64_t v37 = *(void *)(v34 - 120);
  if (v37) {
    MEMORY[0x1B3EA8630](v37, 0x50C80EE9192B6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MEModel::modifyCounts<double>(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 152);
  *(_DWORD *)&v17[8] = 0;
  int v18 = 0;
  int v16 = 0;
  *(void *)uint64_t v17 = (v4 + 1);
  if (v4 != -1) {
    Array<unsigned int>::alloc();
  }
  uint64_t v5 = 0xFFFFFFFFLL;
  unsigned int v6 = (unsigned int **)(a2 + 160);
  do
  {
    TrieIter2<unsigned int,double>::TrieIter2(v15, v6, *(void *)&v17[4] - 4 * v16, v5, 0);
LABEL_5:
    while (TrieIter2<unsigned int,double>::next((uint64_t)v15))
    {
      int v7 = 0;
      while (1)
      {
        if (!*(unsigned char *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 152))(*(void *)(a1 + 24)))
        {
          int v8 = *(_DWORD *)(*(void *)&v17[4] + 4 * (v7 - v16));
          if (v8 == *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24))) {
            break;
          }
        }
        if (v5 == ++v7) {
          goto LABEL_5;
        }
      }
      Trie<unsigned int,double>::remove(v6, (unsigned int *)(*(void *)&v17[4] - 4 * v16), 0);
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v15);
    uint64_t v5 = (v5 - 1);
  }
  while (v5);
  if (*(_DWORD *)(a1 + 152) >= 2u)
  {
    uint64_t v9 = 2;
    do
    {
      TrieIter2<unsigned int,double>::TrieIter2(v15, v6, *(void *)&v17[4] - 4 * v16, v9, 0);
      while (1)
      {
        uint64_t v10 = TrieIter2<unsigned int,double>::next((uint64_t)v15);
        if (!v10) {
          break;
        }
        double v11 = *(double *)(v10 + 8);
        char v19 = 0;
        uint64_t Trie = Trie<unsigned int,unsigned int>::findTrie(v6, (unsigned int *)(*(void *)&v17[4] - 4 * v16 + 4), &v19);
        unsigned int v13 = (double *)(Trie + 8);
        if (!Trie) {
          unsigned int v13 = 0;
        }
        *unsigned int v13 = *v13 - v11;
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(v15);
      uint64_t v9 = (v9 + 1);
    }
    while (v9 <= *(_DWORD *)(a1 + 152));
  }
  uint64_t result = *(void *)&v17[4];
  if (*(void *)&v17[4]) {
    return MEMORY[0x1B3EA8630](*(void *)&v17[4], 0x1000C8052888210);
  }
  return result;
}

void sub_1B2215950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20) {
    MEMORY[0x1B3EA8630](a20, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void MEModel::createDataFromCounts<double>(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 152);
  int v7 = 0;
  int v8 = 0;
  int v5 = 0;
  uint64_t v6 = (v1 + 1);
  if (v1 == -1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    int v4 = 0;
    operator new();
  }
  Array<unsigned int>::alloc();
}

void sub_1B2216254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v37 = *(void *)(v35 - 128);
  if (v37) {
    MEMORY[0x1B3EA8630](v37, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<hmaxent::feature_context_t>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_1B2216400(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MEModel::_estimate<unsigned long>(uint64_t a1, uint64_t a2)
{
  VocabIter::VocabIter((VocabIter *)v33, *(const Vocab **)(a1 + 24), 1);
  int v4 = *(_DWORD *)(a1 + 152);
  *(_DWORD *)&v31[8] = 0;
  int v32 = 0;
  int v30 = 0;
  *(void *)int v31 = (v4 + 1);
  if (v4 == -1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    MEModel::modifyCounts<unsigned long>(a1, a2);
    char v26 = 0;
    if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
    {
      int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Counting counts of order 1 ", 27);
      std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
      uint64_t v6 = std::locale::use_facet(&v25, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
      std::locale::~locale(&v25);
      std::ostream::put();
      std::ostream::flush();
    }
    int v7 = 0;
    unsigned int v8 = 0;
    for (uint64_t i = 0;
          i <= (*(unsigned int (**)(void))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24));
          uint64_t i = (i + 1))
    {
      if ((*(unsigned char *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 152))(*(void *)(a1 + 24))
         || i != *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24)))
        && i != *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 136))(*(void *)(a1 + 24))
        && !(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 24) + 176))(*(void *)(a1 + 24), i))
      {
        LOBYTE(v25.__locale_) = 0;
        *(void *)LHash<unsigned int,double>::insert((void *)(a1 + 224), i, &v25) = v8;
        ++v7;
        ++v8;
      }
    }
    uint64_t v10 = *(void *)&v31[4];
    *(_DWORD *)(*(void *)&v31[4] - 4 * v30) = -1;
    uint64_t v23 = (void *)(a1 + 208);
    *((_DWORD *)Trie<unsigned int,unsigned int>::insertTrie((void *)(a1 + 208), (unsigned int *)(v10 - 4 * v30), &v26)+ 2) = 0;
    if (*(_DWORD *)(a1 + 152) >= 2u)
    {
      double v11 = (void *)(a2 + 160);
      int v12 = 1;
      unsigned int v13 = 2;
      do
      {
        if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Counting counts of order ", 25);
          uint64_t v14 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
          uint64_t v15 = std::locale::use_facet(&v25, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
          std::locale::~locale(&v25);
          std::ostream::put();
          std::ostream::flush();
        }
        TrieIter2<unsigned int,unsigned long>::TrieIter2(&v25, v11, *(void *)&v31[4] - 4 * v30, v13 - 1, simple_sort);
        while (TrieIter2<unsigned int,unsigned long>::next((uint64_t)&v25))
        {
          uint64_t v16 = v28;
          uint64_t v17 = (int)v27;
          LOBYTE(v34[0]) = 0;
          inserted = Trie<unsigned int,unsigned long>::insertTrie(v11, (unsigned int *)(*(void *)&v31[4] - 4 * v30), v34);
          TrieIter2<unsigned int,unsigned long>::TrieIter2(v24, inserted, v16 - 4 * v17, 1, simple_sort);
          char v19 = 1;
          while (TrieIter2<unsigned int,unsigned long>::next((uint64_t)v24))
          {
            char v19 = 0;
            if (!(*(unsigned int (**)(void, void))(**(void **)(a1 + 24) + 176))(*(void *)(a1 + 24), *(unsigned int *)(v28 - 4 * (int)v27)))++v7; {
          }
            }
          if ((v19 & 1) == 0)
          {
            uint64_t v20 = Trie<unsigned int,unsigned int>::insertTrie(v23, (unsigned int *)(*(void *)&v31[4] - 4 * v30), &v26);
            if (!v26) {
              *((_DWORD *)v20 + 2) = v12++;
            }
          }
          TrieIter2<unsigned int,unsigned int>::~TrieIter2(v24);
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2(&v25);
        ++v13;
      }
      while (v13 <= *(_DWORD *)(a1 + 152));
    }
    if (!*(unsigned char *)(a1 + 8) && (Debug::debugAll > 9 || *(_DWORD *)(a1 + 12) >= 0xAu))
    {
      unsigned int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Contexts:", 9);
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
      unint64_t v22 = std::locale::use_facet(&v25, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v25);
      std::ostream::put();
      std::ostream::flush();
      Trie<unsigned int,unsigned int>::dump((_DWORD **)v23, 0);
    }
    operator new();
  }
  Array<unsigned int>::alloc();
}

uint64_t sub_1B2216FA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  if (v59) {
    MEMORY[0x1B3EA8670](v59, 0x20C40960023A9);
  }
  if (!*(unsigned char *)(v58 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(v58 + 12) >= 2u))
  {
    long long v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Creating reverse context index...", 33);
    std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(void *)(*v61 - 24)));
    uint64_t v62 = std::locale::use_facet(&v67, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
    std::locale::~locale(&v67);
    std::ostream::put();
    std::ostream::flush();
  }
  reverseTrie(v66, *(_DWORD *)(v58 + 152), &v67);
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::operator=((void *)(v58 + 192), &v67);
  *(_DWORD *)(v58 + 200) = v68;
  Trie<unsigned int,unsigned int>::~Trie(&v67);
  if (v69) {
    MEMORY[0x1B3EA8630](v69, 0x1000C8052888210);
  }
  uint64_t v63 = *(void *)(v60 - 160);
  if (v63) {
    MEMORY[0x1B3EA8630](v63, 0x1000C8052888210);
  }
  uint64_t v64 = *(void *)(v60 - 120);
  if (v64) {
    MEMORY[0x1B3EA8630](v64, 0x50C80EE9192B6);
  }
  return 1;
}

void sub_1B2217124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v36 = *(void *)(v34 - 160);
  if (v36) {
    MEMORY[0x1B3EA8630](v36, 0x1000C8052888210);
  }
  uint64_t v37 = *(void *)(v34 - 120);
  if (v37) {
    MEMORY[0x1B3EA8630](v37, 0x50C80EE9192B6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MEModel::modifyCounts<unsigned long>(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 152);
  *(_DWORD *)&v17[8] = 0;
  int v18 = 0;
  int v16 = 0;
  *(void *)uint64_t v17 = (v4 + 1);
  if (v4 != -1) {
    Array<unsigned int>::alloc();
  }
  uint64_t v5 = 0xFFFFFFFFLL;
  uint64_t v6 = (unsigned int **)(a2 + 160);
  do
  {
    TrieIter2<unsigned int,unsigned long>::TrieIter2(v15, v6, *(void *)&v17[4] - 4 * v16, v5, 0);
LABEL_5:
    while (TrieIter2<unsigned int,unsigned long>::next((uint64_t)v15))
    {
      int v7 = 0;
      while (1)
      {
        if (!*(unsigned char *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 152))(*(void *)(a1 + 24)))
        {
          int v8 = *(_DWORD *)(*(void *)&v17[4] + 4 * (v7 - v16));
          if (v8 == *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24))) {
            break;
          }
        }
        if (v5 == ++v7) {
          goto LABEL_5;
        }
      }
      Trie<unsigned int,unsigned long>::remove(v6, (unsigned int *)(*(void *)&v17[4] - 4 * v16), 0);
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v15);
    uint64_t v5 = (v5 - 1);
  }
  while (v5);
  if (*(_DWORD *)(a1 + 152) >= 2u)
  {
    uint64_t v9 = 2;
    do
    {
      TrieIter2<unsigned int,unsigned long>::TrieIter2(v15, v6, *(void *)&v17[4] - 4 * v16, v9, 0);
      while (1)
      {
        uint64_t v10 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v15);
        if (!v10) {
          break;
        }
        uint64_t v11 = *(void *)(v10 + 8);
        char v19 = 0;
        uint64_t Trie = Trie<unsigned int,unsigned int>::findTrie(v6, (unsigned int *)(*(void *)&v17[4] - 4 * v16 + 4), &v19);
        unsigned int v13 = (void *)(Trie + 8);
        if (!Trie) {
          unsigned int v13 = 0;
        }
        *v13 -= v11;
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(v15);
      uint64_t v9 = (v9 + 1);
    }
    while (v9 <= *(_DWORD *)(a1 + 152));
  }
  uint64_t result = *(void *)&v17[4];
  if (*(void *)&v17[4]) {
    return MEMORY[0x1B3EA8630](*(void *)&v17[4], 0x1000C8052888210);
  }
  return result;
}

void sub_1B22174A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20) {
    MEMORY[0x1B3EA8630](a20, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void MEModel::createDataFromCounts<unsigned long>(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 152);
  int v7 = 0;
  int v8 = 0;
  int v5 = 0;
  uint64_t v6 = (v1 + 1);
  if (v1 == -1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    int v4 = 0;
    operator new();
  }
  Array<unsigned int>::alloc();
}

void sub_1B2217DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v37 = *(void *)(v35 - 112);
  if (v37) {
    MEMORY[0x1B3EA8630](v37, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void MEModel::_adapt<double>(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1B2217FFC()
{
  if (v1) {
    MEMORY[0x1B3EA8670](v1, 0x20C40960023A9);
  }
  if (!*(unsigned char *)(v0 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(v0 + 12) >= 2u))
  {
    uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Creating reverse context index...", 33);
    std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
    uint64_t v3 = std::locale::use_facet(&v5, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale(&v5);
    std::ostream::put();
    std::ostream::flush();
  }
  reverseTrie(v0 + 208, *(_DWORD *)(v0 + 152), &v5);
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::operator=((void *)(v0 + 192), &v5);
  *(_DWORD *)(v0 + 200) = v6;
  Trie<unsigned int,unsigned int>::~Trie(&v5);
  return 1;
}

void sub_1B221811C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void hmaxent::model::init_prior_params(hmaxent::model *this)
{
}

void sub_1B2218188(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x80C40803F642BLL);
  _Unwind_Resume(a1);
}

void MEModel::_adapt<unsigned long>(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1B22182B8()
{
  if (v1) {
    MEMORY[0x1B3EA8670](v1, 0x20C40960023A9);
  }
  if (!*(unsigned char *)(v0 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(v0 + 12) >= 2u))
  {
    uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Creating reverse context index...", 33);
    std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
    uint64_t v3 = std::locale::use_facet(&v5, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale(&v5);
    std::ostream::put();
    std::ostream::flush();
  }
  reverseTrie(v0 + 208, *(_DWORD *)(v0 + 152), &v5);
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::operator=((void *)(v0 + 192), &v5);
  *(_DWORD *)(v0 + 200) = v6;
  Trie<unsigned int,unsigned int>::~Trie(&v5);
  return 1;
}

void sub_1B22183D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

uint64_t quasar::SyncDecoder::SyncDecoder(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_1F0A520D8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  *(unsigned char *)(a1 + 32) = 0;
  quasar::SystemConfig::Version::Version((quasar::SystemConfig::Version *)(a1 + 36));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_1B2218484(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SyncDecoder::init(quasar::SyncDecoder *this, quasar::SystemConfig *a2)
{
  if (!*((unsigned char *)this + 32))
  {
    *(void *)((char *)this + 36) = quasar::SystemConfig::getConfigFileVersion(a2);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = (unint64_t)&v23 + 8;
    long long v25 = 0uLL;
    *(void *)&long long v24 = 0;
    *((void *)&v24 + 1) = &v25;
    long long v26 = (unint64_t)&v26 + 8;
    memset(v27, 0, sizeof(v27));
    *(void *)&long long v28 = (char *)&v28 + 8;
    *((void *)&v28 + 1) = 0;
    *(void *)&long long v29 = 0;
    long long v30 = 0uLL;
    *((void *)&v29 + 1) = &v30;
    *((void *)&v31 + 1) = 0;
    *(void *)&long long v32 = 0;
    *(void *)&long long v31 = (char *)&v31 + 8;
    ModelLoaderPtr = (uint64_t *)quasar::SystemConfig::getModelLoaderPtr(a2);
    uint64_t v6 = *ModelLoaderPtr;
    uint64_t v5 = ModelLoaderPtr[1];
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    int v7 = (std::__shared_weak_count *)*((void *)this + 7);
    *((void *)this + 6) = v6;
    *((void *)this + 7) = v5;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (*((char *)this + 31) >= 0) {
      size_t v8 = *((unsigned __int8 *)this + 31);
    }
    else {
      size_t v8 = *((void *)this + 2);
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v8 + 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (*((char *)this + 31) >= 0) {
        uint64_t v10 = (char *)this + 8;
      }
      else {
        uint64_t v10 = (char *)*((void *)this + 1);
      }
      memmove(p_p, v10, v8);
    }
    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v8) = 46;
    quasar::SystemConfig::setPrefix((std::string *)a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    (*(void (**)(quasar::SyncDecoder *, quasar::SystemConfig *))(*(void *)this + 40))(this, a2);
    quasar::SystemConfig::readPtree((uint64_t)a2, (uint64_t)this + 8);
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  memset(v27, 0, sizeof(v27));
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Coding error: SyncDecoder ", 26);
  uint64_t v14 = *((void *)this + 1);
  unsigned int v13 = (char *)this + 8;
  uint64_t v12 = v14;
  int v15 = v13[23];
  if (v15 >= 0) {
    uint64_t v16 = (uint64_t)v13;
  }
  else {
    uint64_t v16 = v12;
  }
  if (v15 >= 0) {
    uint64_t v17 = v13[23];
  }
  else {
    uint64_t v17 = *((void *)v13 + 1);
  }
  int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v16, v17);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, " has already been initialized.");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v20);
}

void sub_1B2218700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  quasar::SpeechModelInfo::~SpeechModelInfo((quasar::SpeechModelInfo *)&a16);
  _Unwind_Resume(a1);
}

void quasar::SyncDecoder::~SyncDecoder(quasar::SyncDecoder *this)
{
  *(void *)this = &unk_1F0A520D8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void quasar::SyncDecoder::createDecoder(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  quasar::Decoder::getDecoderTypeName((std::string *)a1, (uint64_t)&v34);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    if (HIBYTE(v36) != 24)
    {
      if (HIBYTE(v36) == 29)
      {
        int v4 = &v34;
LABEL_15:
        uint64_t v7 = (uint64_t)*v4;
        size_t v8 = v4[1];
        uint64_t v9 = v4[2];
        uint64_t v10 = *(uint64_t *)((char *)v4 + 21);
        if (v7 != 0x2D64726F7779656BLL
          || v8 != (void *)0x6F2D746365726964
          || v9 != (void *)0x65642D7475707475
          || v10 != 0x7265646F6365642DLL)
        {
          goto LABEL_34;
        }
        std::allocate_shared[abi:ne180100]<quasar::KeywordDirectOutputsSyncDecoder,std::allocator<quasar::KeywordDirectOutputsSyncDecoder>,std::string const&,void>((long long *)a1, v33);
LABEL_58:
        *(_OWORD *)a2 = v33[0];
        goto LABEL_59;
      }
      goto LABEL_34;
    }
    if (v34 != (void *)0x2D64726F7779656BLL || v35 != 0x676E6974746F7073 || v36 != 0x7265646F6365642DLL) {
      goto LABEL_34;
    }
LABEL_57:
    std::allocate_shared[abi:ne180100]<quasar::KeywordSpottingSyncDecoder,std::allocator<quasar::KeywordSpottingSyncDecoder>,std::string const&,void>(v33);
    goto LABEL_58;
  }
  if (v35 == 24)
  {
    BOOL v5 = *v34 == 0x2D64726F7779656BLL && v34[1] == 0x676E6974746F7073;
    if (v5 && v34[2] == 0x7265646F6365642DLL) {
      goto LABEL_57;
    }
  }
  if (v35 == 29)
  {
    int v4 = (void **)v34;
    goto LABEL_15;
  }
LABEL_34:
  if (quasar::gLogLevel >= 2)
  {
    memset(v33, 0, sizeof(v33));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
    std::operator+<char>();
    uint64_t v16 = std::string::append(&v28, "\" in \"");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    int v18 = *(char *)(a1 + 23);
    if (v18 >= 0) {
      char v19 = (const std::string::value_type *)a1;
    }
    else {
      char v19 = *(const std::string::value_type **)a1;
    }
    if (v18 >= 0) {
      std::string::size_type v20 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v20 = *(void *)(a1 + 8);
    }
    long long v21 = std::string::append(&v29, v19, v20);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    long long v23 = std::string::append(&v30, "\". ");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    int64_t v32 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (v32 >= 0) {
      long long v25 = __p;
    }
    else {
      long long v25 = (void **)__p[0];
    }
    if (v32 >= 0) {
      uint64_t v26 = HIBYTE(v32);
    }
    else {
      uint64_t v26 = (uint64_t)__p[1];
    }
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v25, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Recognition will crash if you try to use it", 43);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v33);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
LABEL_59:
  if (SHIBYTE(v36) < 0) {
    operator delete(v34);
  }
}

void sub_1B2218AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (*(char *)(v37 - 33) < 0) {
    operator delete(*(void **)(v37 - 56));
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<quasar::KeywordSpottingSyncDecoder,std::allocator<quasar::KeywordSpottingSyncDecoder>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x1B8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::KeywordSpottingSyncDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::KeywordSpottingSyncDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B2218B84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::KeywordSpottingSyncDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::KeywordSpottingSyncDecoder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A618A0;
  quasar::KeywordSpottingSyncDecoder::KeywordSpottingSyncDecoder(a1 + 3);
  return a1;
}

void sub_1B2218BE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::KeywordSpottingSyncDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A618A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::KeywordSpottingSyncDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A618A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::KeywordSpottingSyncDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<quasar::KeywordDirectOutputsSyncDecoder,std::allocator<quasar::KeywordDirectOutputsSyncDecoder>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0xC8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::KeywordDirectOutputsSyncDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::KeywordDirectOutputsSyncDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2218CD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::KeywordDirectOutputsSyncDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::KeywordDirectOutputsSyncDecoder>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A1D4B8;
  quasar::KeywordDirectOutputsSyncDecoder::KeywordDirectOutputsSyncDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B2218D34(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::KeywordDirectOutputsSyncDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D4B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::KeywordDirectOutputsSyncDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D4B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::KeywordDirectOutputsSyncDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *quasar::AlignmentProcessorOptions::options@<X0>(quasar::AlignmentProcessorOptions *this@<X0>, void *a2@<X8>)
{
  long long v3 = (char *)this + 16;
  uint64_t v4 = *(void *)(*((void *)this + 2) - 24);
  BOOL v5 = (char *)this + 456;
  uint64_t v6 = *(void *)(*((void *)this + 57) - 24);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t result = operator new(0x20uLL);
  a2[1] = result + 4;
  a2[2] = result + 4;
  *uint64_t result = &v3[v4];
  result[1] = v3 + 152;
  result[2] = v3 + 296;
  result[3] = &v5[v6];
  *a2 = result;
  return result;
}

void quasar::AlignmentProcessorBlock::init(quasar::AlignmentProcessorBlock *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v4, "AlignmentProcessorBlock");
  uint64_t v2 = std::string::append(&v4, "Config:");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  std::string::size_type v6 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  quasar::OptionsBase::debugLog((void (***)(void **__return_ptr, void))this + 1, (uint64_t)__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_1B2218F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'quasar::AlignmentProcessorBlock::init(quasar::AlignmentProcessorBlock *this)
{
  quasar::AlignmentProcessorBlock::init((quasar::AlignmentProcessorBlock *)((char *)this
                                                                          + *(void *)(*(void *)this - 88)));
}

void quasar::AlignmentProcessorBlock::computeTokenWordMapping(uint64_t *a1@<X0>, int **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v5 = 0;
    int v6 = -1;
    do
    {
      uint64_t v7 = (unsigned __int8 *)(v3 + 24 * v5);
      if ((char)v7[23] < 0)
      {
        uint64_t v9 = v7;
        uint64_t v7 = *(unsigned __int8 **)v7;
        size_t v8 = (unsigned __int8 *)*((void *)v9 + 1);
        if (!v5) {
          goto LABEL_8;
        }
      }
      else
      {
        size_t v8 = (unsigned __int8 *)v7[23];
        if (!v5) {
          goto LABEL_8;
        }
      }
      v21[0] = v7;
      v21[1] = v8;
      if (!std::string_view::rfind[abi:ne180100](v21, "▁", 3uLL, 0)) {
LABEL_8:
      }
        ++v6;
      uint64_t v11 = a2[1];
      unint64_t v10 = (unint64_t)a2[2];
      if ((unint64_t)v11 >= v10)
      {
        unsigned int v13 = *a2;
        uint64_t v14 = v11 - *a2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v17);
          unsigned int v13 = *a2;
          uint64_t v11 = a2[1];
        }
        else
        {
          int v18 = 0;
        }
        char v19 = (int *)&v18[4 * v14];
        *char v19 = v6;
        uint64_t v12 = v19 + 1;
        while (v11 != v13)
        {
          int v20 = *--v11;
          *--char v19 = v20;
        }
        *a2 = v19;
        a2[1] = v12;
        a2[2] = (int *)&v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *uint64_t v11 = v6;
        uint64_t v12 = v11 + 1;
      }
      a2[1] = v12;
      ++v5;
      uint64_t v3 = *a1;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v5);
  }
}

void sub_1B22190E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::AlignmentProcessorBlock::computeWordLevelAlignments(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  quasar::AlignmentProcessorBlock::computeTokenWordMapping(a1, (int **)v31);
  quasar::AlignmentProcessorBlock::computeTokenWordMapping(a2, (int **)&__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (__p != v30) {
    std::vector<std::vector<int>>::resize(a4, *(v30 - 1) + 1);
  }
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6 != *a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = (int **)(v7 + 24 * v8);
      uint64_t v11 = *v9;
      unint64_t v10 = v9[1];
      if (*v9 != v10)
      {
        do
        {
          uint64_t v12 = *a4 + 24 * *((int *)__p + v8);
          uint64_t v13 = *v11;
          uint64_t v14 = v31[0];
          uint64_t v16 = (_DWORD **)(v12 + 8);
          unint64_t v15 = *(_DWORD **)(v12 + 8);
          int v18 = (void *)(v12 + 16);
          unint64_t v17 = *(void *)(v12 + 16);
          if ((unint64_t)v15 >= v17)
          {
            int v20 = *(_DWORD **)v12;
            uint64_t v21 = ((uint64_t)v15 - *(void *)v12) >> 2;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v23 = v17 - (void)v20;
            if (v23 >> 1 > v22) {
              unint64_t v22 = v23 >> 1;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              long long v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v18, v24);
              unint64_t v15 = *v16;
              int v20 = *(_DWORD **)v12;
            }
            else
            {
              long long v25 = 0;
            }
            uint64_t v26 = &v25[4 * v21];
            *(_DWORD *)uint64_t v26 = v14[v13];
            char v19 = v26 + 4;
            while (v15 != v20)
            {
              int v27 = *--v15;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(void *)uint64_t v12 = v26;
            std::string *v16 = v19;
            void *v18 = &v25[4 * v24];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            _DWORD *v15 = *((_DWORD *)v31[0] + v13);
            char v19 = v15 + 1;
          }
          std::string *v16 = v19;
          ++v11;
        }
        while (v11 != v10);
        uint64_t v7 = *a3;
        uint64_t v6 = a3[1];
      }
      ++v8;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) > v8);
  }
  if (__p)
  {
    std::string v30 = (int *)__p;
    operator delete(__p);
  }
  if (v31[0])
  {
    v31[1] = v31[0];
    operator delete(v31[0]);
  }
}

void sub_1B22192EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

void quasar::AlignmentProcessorBlock::computeTokenCharMapping(uint64_t a1@<X0>, long long **a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  std::string v4 = a4;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v5 = *a2;
  char v90 = a2[1];
  if (*a2 != v90)
  {
    signed int v89 = 0;
    int v85 = 0;
    uint64_t v86 = (uint64_t)(a4 + 2);
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v6 = *v5;
        v95.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v6;
      }
      if (a3) {
        goto LABEL_30;
      }
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v7 = &v95;
      }
      else {
        uint64_t v7 = (std::string *)v95.__r_.__value_.__r.__words[0];
      }
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v95.__r_.__value_.__l.__size_;
      }
      *(void *)&long long __dst = v7;
      *((void *)&__dst + 1) = size;
      uint64_t v9 = std::string_view::rfind[abi:ne180100]((unsigned __int8 **)&__dst, "▁", 3uLL, 0);
      if (v9) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = 3;
      }
      if (v9) {
        size_t v11 = size;
      }
      else {
        size_t v11 = size - 3;
      }
      if (v11 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v11 >= 0x17)
      {
        uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v13 = v11 | 7;
        }
        uint64_t v14 = v13 + 1;
        p_dst = (long long *)operator new(v13 + 1);
        *((void *)&__dst + 1) = v11;
        *(void *)&long long v99 = v14 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        BYTE7(v99) = v11;
        p_dst = &__dst;
        if (!v11) {
          goto LABEL_27;
        }
      }
      memmove(p_dst, (char *)v7 + v10, v11);
LABEL_27:
      *((unsigned char *)p_dst + v11) = 0;
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v95.__r_.__value_.__l.__data_ = __dst;
      v95.__r_.__value_.__r.__words[2] = v99;
LABEL_30:
      unint64_t v15 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
      std::string::size_type v16 = v95.__r_.__value_.__l.__size_;
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v17 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t v17 = v95.__r_.__value_.__l.__size_;
      }
      if (v17)
      {
        unint64_t v18 = *(unsigned __int8 *)(a1 + 23);
        if ((v18 & 0x80u) == 0) {
          char v19 = (char *)a1;
        }
        else {
          char v19 = *(char **)a1;
        }
        if ((v18 & 0x80u) != 0) {
          unint64_t v18 = *(void *)(a1 + 8);
        }
        std::string::size_type v20 = v95.__r_.__value_.__r.__words[0];
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v21 = &v95;
        }
        else {
          uint64_t v21 = (std::string *)v95.__r_.__value_.__r.__words[0];
        }
        if (v18 >= v89)
        {
          unint64_t v22 = &v19[v89];
          uint64_t v23 = &v19[v18];
          int64_t v24 = v18 - v89;
          if (v24 >= v17)
          {
            int v45 = v21->__r_.__value_.__s.__data_[0];
            do
            {
              int64_t v46 = v24 - v17;
              if (v46 == -1) {
                break;
              }
              uint64_t v47 = (char *)memchr(v22, v45, v46 + 1);
              if (!v47) {
                break;
              }
              int v48 = v47;
              if (!memcmp(v47, v21, v17))
              {
                if (v48 == v23) {
                  break;
                }
                int v55 = v48 - v19;
                if (v48 - v19 == -1) {
                  break;
                }
                if ((v15 & 0x80u) == 0) {
                  uint64_t v56 = &v95;
                }
                else {
                  uint64_t v56 = (std::string *)v20;
                }
                if ((v15 & 0x80u) == 0) {
                  unint64_t v57 = v15;
                }
                else {
                  unint64_t v57 = v16;
                }
                quasar::utf8::codepointsCtr(v56, v57, 0, v17, (unint64_t)v92);
                std::string v4 = a4;
                if (v94)
                {
                  int v58 = (int)v92[0];
                  unint64_t v59 = v84 & 0xFFFFFFFF00000000 | LODWORD(v92[0]);
                }
                else
                {
                  *(_OWORD *)std::string __p = *(_OWORD *)v92;
                  uint64_t v97 = v93;
                  v92[0] = 0;
                  v92[1] = 0;
                  uint64_t v93 = 0;
                  if (quasar::gLogLevel >= 1)
                  {
                    long long v113 = 0u;
                    long long v114 = 0u;
                    long long v111 = 0u;
                    long long v112 = 0u;
                    long long v109 = 0u;
                    long long v110 = 0u;
                    long long v107 = 0u;
                    long long v108 = 0u;
                    long long v105 = 0u;
                    long long v106 = 0u;
                    long long v103 = 0u;
                    long long v104 = 0u;
                    long long v101 = 0u;
                    long long v102 = 0u;
                    long long v99 = 0u;
                    long long v100 = 0u;
                    long long __dst = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__dst);
                    if (v97 >= 0) {
                      uint64_t v60 = __p;
                    }
                    else {
                      uint64_t v60 = (void **)__p[0];
                    }
                    if (v97 >= 0) {
                      uint64_t v61 = HIBYTE(v97);
                    }
                    else {
                      uint64_t v61 = (uint64_t)__p[1];
                    }
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)v60, v61);
                    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__dst);
                  }
                  if (SHIBYTE(v97) < 0) {
                    operator delete(__p[0]);
                  }
                  int v58 = 0;
                  unint64_t v59 = v84 & 0xFFFFFFFF00000000;
                  if (!v94 && SHIBYTE(v93) < 0)
                  {
                    operator delete(v92[0]);
                    int v58 = 0;
                  }
                }
                int v62 = *(char *)(a1 + 23);
                if (v62 >= 0) {
                  uint64_t v63 = (char *)a1;
                }
                else {
                  uint64_t v63 = *(char **)a1;
                }
                if (v62 >= 0) {
                  unint64_t v64 = *(unsigned __int8 *)(a1 + 23);
                }
                else {
                  unint64_t v64 = *(void *)(a1 + 8);
                }
                quasar::utf8::codepointsCtr(v63, v64, v89, v48 - v19, (unint64_t)v92);
                unint64_t v84 = v59;
                if (v94)
                {
                  int v65 = (int)v92[0];
                  unint64_t v83 = v83 & 0xFFFFFFFF00000000 | LODWORD(v92[0]);
                }
                else
                {
                  *(_OWORD *)std::string __p = *(_OWORD *)v92;
                  uint64_t v97 = v93;
                  v92[0] = 0;
                  v92[1] = 0;
                  uint64_t v93 = 0;
                  if (quasar::gLogLevel >= 1)
                  {
                    long long v113 = 0u;
                    long long v114 = 0u;
                    long long v111 = 0u;
                    long long v112 = 0u;
                    long long v109 = 0u;
                    long long v110 = 0u;
                    long long v107 = 0u;
                    long long v108 = 0u;
                    long long v105 = 0u;
                    long long v106 = 0u;
                    long long v103 = 0u;
                    long long v104 = 0u;
                    long long v101 = 0u;
                    long long v102 = 0u;
                    long long v99 = 0u;
                    long long v100 = 0u;
                    long long __dst = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__dst);
                    if (v97 >= 0) {
                      uint64_t v66 = __p;
                    }
                    else {
                      uint64_t v66 = (void **)__p[0];
                    }
                    if (v97 >= 0) {
                      uint64_t v67 = HIBYTE(v97);
                    }
                    else {
                      uint64_t v67 = (uint64_t)__p[1];
                    }
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)v66, v67);
                    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__dst);
                  }
                  if (SHIBYTE(v97) < 0) {
                    operator delete(__p[0]);
                  }
                  int v65 = 0;
                  v83 &= 0xFFFFFFFF00000000;
                  if (!v94 && SHIBYTE(v93) < 0)
                  {
                    operator delete(v92[0]);
                    int v65 = 0;
                  }
                }
                uint64_t v68 = (v85 + v65);
                int v85 = v68 + v58;
                uint64_t v69 = (v68 + v58 - 1);
                int v71 = (uint64_t *)a4[1];
                unint64_t v70 = (unint64_t)a4[2];
                if ((unint64_t)v71 >= v70)
                {
                  uint64_t v73 = ((char *)v71 - (unsigned char *)*a4) >> 3;
                  if ((unint64_t)(v73 + 1) >> 61) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v74 = v70 - (void)*a4;
                  uint64_t v75 = v74 >> 2;
                  if (v74 >> 2 <= (unint64_t)(v73 + 1)) {
                    uint64_t v75 = v73 + 1;
                  }
                  if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v76 = v75;
                  }
                  if (v76) {
                    int v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v86, v76);
                  }
                  else {
                    int v77 = 0;
                  }
                  uint64_t v78 = &v77[8 * v73];
                  *(void *)uint64_t v78 = v68 | (v69 << 32);
                  uint64_t v72 = v78 + 8;
                  v80 = (char *)*a4;
                  uint64_t v79 = (char *)a4[1];
                  if (v79 != *a4)
                  {
                    do
                    {
                      uint64_t v81 = *((void *)v79 - 1);
                      v79 -= 8;
                      *((void *)v78 - 1) = v81;
                      v78 -= 8;
                    }
                    while (v79 != v80);
                    uint64_t v79 = (char *)*a4;
                  }
                  *a4 = v78;
                  a4[1] = v72;
                  a4[2] = &v77[8 * v76];
                  if (v79) {
                    operator delete(v79);
                  }
                }
                else
                {
                  *int v71 = v68 | (v69 << 32);
                  uint64_t v72 = v71 + 1;
                }
                a4[1] = v72;
                int v82 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
                if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  int v82 = v95.__r_.__value_.__r.__words[1];
                }
                signed int v89 = v82 + v55;
                goto LABEL_94;
              }
              unint64_t v22 = v48 + 1;
              int64_t v24 = v23 - (v48 + 1);
            }
            while (v24 >= v17);
          }
        }
        std::string v4 = a4;
        if (quasar::gLogLevel >= 4)
        {
          long long v113 = 0u;
          long long v114 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          long long v107 = 0u;
          long long v108 = 0u;
          long long v105 = 0u;
          long long v106 = 0u;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          long long v99 = 0u;
          long long v100 = 0u;
          long long __dst = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__dst);
          long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"Token: ", 7);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v26 = &v95;
          }
          else {
            uint64_t v26 = (std::string *)v95.__r_.__value_.__r.__words[0];
          }
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v27 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v27 = v95.__r_.__value_.__l.__size_;
          }
          std::string v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
          std::string v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" not found in raw string input: ", 32);
          int v30 = *(char *)(a1 + 23);
          if (v30 >= 0) {
            uint64_t v31 = a1;
          }
          else {
            uint64_t v31 = *(void *)a1;
          }
          if (v30 >= 0) {
            uint64_t v32 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            uint64_t v32 = *(void *)(a1 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__dst);
        }
        uint64_t v34 = a4[1];
        unint64_t v33 = (unint64_t)a4[2];
        if ((unint64_t)v34 < v33)
        {
LABEL_68:
          *uint64_t v34 = -1;
          std::string v41 = v34 + 1;
          goto LABEL_93;
        }
        uint64_t v35 = ((char *)v34 - (unsigned char *)*a4) >> 3;
        if ((unint64_t)(v35 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v36 = v33 - (void)*a4;
        uint64_t v37 = v36 >> 2;
        if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
          uint64_t v37 = v35 + 1;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v37;
        }
        if (v38) {
          uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v86, v38);
        }
        else {
          uint64_t v39 = 0;
        }
        uint64_t v49 = &v39[8 * v35];
        *(void *)uint64_t v49 = -1;
        std::string v41 = v49 + 8;
        uint64_t v51 = (char *)*a4;
        uint64_t v50 = (char *)a4[1];
        if (v50 != *a4)
        {
          do
          {
            uint64_t v52 = *((void *)v50 - 1);
            v50 -= 8;
            *((void *)v49 - 1) = v52;
            v49 -= 8;
          }
          while (v50 != v51);
LABEL_90:
          uint64_t v50 = (char *)*v4;
        }
      }
      else
      {
        uint64_t v34 = v4[1];
        unint64_t v40 = (unint64_t)v4[2];
        if ((unint64_t)v34 < v40) {
          goto LABEL_68;
        }
        uint64_t v42 = ((char *)v34 - (unsigned char *)*v4) >> 3;
        if ((unint64_t)(v42 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v43 = v40 - (void)*v4;
        uint64_t v44 = v43 >> 2;
        if (v43 >> 2 <= (unint64_t)(v42 + 1)) {
          uint64_t v44 = v42 + 1;
        }
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v44;
        }
        if (v38) {
          uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v86, v38);
        }
        else {
          uint64_t v39 = 0;
        }
        uint64_t v49 = &v39[8 * v42];
        *(void *)uint64_t v49 = -1;
        std::string v41 = v49 + 8;
        uint64_t v53 = (char *)*v4;
        uint64_t v50 = (char *)v4[1];
        if (v50 != *v4)
        {
          do
          {
            uint64_t v54 = *((void *)v50 - 1);
            v50 -= 8;
            *((void *)v49 - 1) = v54;
            v49 -= 8;
          }
          while (v50 != v53);
          goto LABEL_90;
        }
      }
      void *v4 = v49;
      v4[1] = v41;
      v4[2] = &v39[8 * v38];
      if (v50) {
        operator delete(v50);
      }
LABEL_93:
      v4[1] = v41;
LABEL_94:
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      unint64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != v90);
  }
}

void sub_1B2219AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a40);
  if (a38 < 0) {
    operator delete(__p);
  }
  if (!a25 && a24 < 0) {
    operator delete(a19);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  std::string v41 = *(void **)a14;
  if (*(void *)a14)
  {
    *(void *)(a14 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

void quasar::AlignmentProcessorBlock::computeCharLevelSpans(int **a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *a1;
  std::string v4 = a1[1];
  if (*a1 == v4) {
    return;
  }
  uint64_t v7 = 0;
  unint64_t v8 = a3 + 2;
  do
  {
    int v9 = *v3;
    int v10 = v3[1];
    if (*v3 > v10) {
      goto LABEL_35;
    }
    uint64_t v11 = *a2;
    while (1)
    {
      uint64_t v12 = (unsigned int *)(v11 + 8 * v9);
      uint64_t v14 = *v12;
      unsigned int v13 = v12[1];
      if (v14 == -1 && v13 == -1)
      {
        ++v9;
        goto LABEL_16;
      }
      std::string::size_type v16 = (_DWORD *)(v11 + 8 * v10);
      uint64_t v17 = v16[1];
      if (*v16 != -1 || v17 != -1) {
        break;
      }
      --v10;
LABEL_16:
      if (v9 > v10) {
        goto LABEL_35;
      }
    }
    if ((unint64_t)v7 >= *v8)
    {
      uint64_t v19 = ((char *)v7 - *a3) >> 3;
      if ((unint64_t)(v19 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = *v8 - (void)*a3;
      uint64_t v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
        uint64_t v21 = v19 + 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22) {
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v8, v22);
      }
      else {
        uint64_t v23 = 0;
      }
      int64_t v24 = &v23[8 * v19];
      *(void *)int64_t v24 = v14 | (v17 << 32);
      uint64_t v7 = (uint64_t *)(v24 + 8);
      uint64_t v26 = *a3;
      long long v25 = a3[1];
      if (v25 != *a3)
      {
        do
        {
          uint64_t v27 = *((void *)v25 - 1);
          v25 -= 8;
          *((void *)v24 - 1) = v27;
          v24 -= 8;
        }
        while (v25 != v26);
        long long v25 = *a3;
      }
      *a3 = v24;
      a3[1] = (char *)v7;
      a3[2] = &v23[8 * v22];
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *v7++ = v14 | (v17 << 32);
    }
    a3[1] = (char *)v7;
LABEL_35:
    v3 += 2;
  }
  while (v3 != v4);
}

void sub_1B2219CF0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::AlignmentProcessorBlock::computeRangeProjections(unsigned int **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  v154[0] = 0;
  v154[1] = 0;
  v153 = (uint64_t *)v154;
  v152[0] = 0;
  v152[1] = 0;
  v151 = v152;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5 != *a2)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + 24 * v7;
      int v10 = *(_DWORD **)v8;
      int v9 = *(_DWORD **)(v8 + 8);
      if (*(_DWORD **)v8 != v9)
      {
        do
        {
          LODWORD(__p) = 0;
          LODWORD(__p) = *v10;
          p_p = &__p;
          uint64_t v11 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v153, (int *)&__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&p_p);
          uint64_t v12 = v11;
          unsigned int v13 = (char *)v11[6];
          uint64_t v14 = (uint64_t)(v11 + 7);
          unint64_t v15 = v11[7];
          if (v13 >= (char *)v15)
          {
            uint64_t v17 = v11[5];
            uint64_t v18 = (v13 - (char *)v17) >> 2;
            if ((unint64_t)(v18 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v19 = (char *)v15 - (char *)v17;
            unint64_t v20 = ((char *)v15 - (char *)v17) >> 1;
            if (v20 <= v18 + 1) {
              unint64_t v20 = v18 + 1;
            }
            if (v19 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v20;
            }
            if (v21)
            {
              unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v14, v21);
              uint64_t v17 = v12[5];
              unsigned int v13 = (char *)v12[6];
            }
            else
            {
              unint64_t v22 = 0;
            }
            uint64_t v23 = &v22[4 * v18];
            *(_DWORD *)uint64_t v23 = v7;
            std::string::size_type v16 = (uint64_t *)(v23 + 4);
            while (v13 != (char *)v17)
            {
              int v24 = *((_DWORD *)v13 - 1);
              v13 -= 4;
              *((_DWORD *)v23 - 1) = v24;
              v23 -= 4;
            }
            v12[5] = (uint64_t *)v23;
            v12[6] = v16;
            v12[7] = (uint64_t *)&v22[4 * v21];
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v13 = v7;
            std::string::size_type v16 = (uint64_t *)(v13 + 4);
          }
          v12[6] = v16;
          ++v10;
        }
        while (v10 != v9);
        uint64_t v6 = *a2;
        uint64_t v5 = a2[1];
      }
      ++v7;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) > v7);
  }
  p_p = 0;
  v149 = 0;
  v150 = 0;
  std::string __p = 0;
  v146 = 0;
  v147 = 0;
  uint64_t v26 = *a3;
  uint64_t v25 = a3[1];
  if (v25 == *a3)
  {
    uint64_t v42 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    do
    {
      std::string v29 = (int *)(v26 + 8 * v28);
      int v31 = *v29;
      int v30 = v29[1];
      BOOL v32 = v31 == -1 && v30 == -1;
      if (!v32)
      {
        if (v27 >= v147)
        {
          uint64_t v34 = (char *)__p;
          uint64_t v35 = (v27 - (unsigned char *)__p) >> 2;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v37 = v147 - (unsigned char *)__p;
          if ((v147 - (unsigned char *)__p) >> 1 > v36) {
            unint64_t v36 = v37 >> 1;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v147, v38);
            uint64_t v34 = (char *)__p;
            uint64_t v27 = v146;
          }
          else
          {
            uint64_t v39 = 0;
          }
          unint64_t v40 = &v39[4 * v35];
          *(_DWORD *)unint64_t v40 = v28;
          unint64_t v33 = v40 + 4;
          while (v27 != v34)
          {
            int v41 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v40 - 1) = v41;
            v40 -= 4;
          }
          std::string __p = v40;
          v146 = v33;
          v147 = &v39[4 * v38];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v27 = v28;
          unint64_t v33 = v27 + 4;
        }
        v146 = v33;
        uint64_t v27 = v33;
        uint64_t v26 = *a3;
        uint64_t v25 = a3[1];
      }
      ++v28;
    }
    while (v28 < (v25 - v26) >> 3);
    uint64_t v42 = (char *)__p;
    uint64_t v25 = v26;
  }
  if ((int)((unint64_t)(v27 - v42) >> 2) < 2)
  {
    int v44 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    int v44 = 0;
    do
    {
      uint64_t v45 = *(int *)&v42[4 * v43++];
      uint64_t v46 = *(int *)&v42[4 * v43];
      if (v44 <= *(_DWORD *)(v25 + 8 * v45 + 4))
      {
        uint64_t v138 = v43;
        unint64_t v47 = v45 | ((unint64_t)v45 << 32);
        int v48 = v149;
        do
        {
          int v49 = v44;
          if (v48 >= (unint64_t *)v150)
          {
            uint64_t v50 = ((char *)v48 - (unsigned char *)p_p) >> 3;
            if ((unint64_t)(v50 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v51 = (v150 - (unsigned char *)p_p) >> 2;
            if (v51 <= v50 + 1) {
              unint64_t v51 = v50 + 1;
            }
            if ((unint64_t)(v150 - (unsigned char *)p_p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v51;
            }
            if (v52) {
              uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v150, v52);
            }
            else {
              uint64_t v53 = 0;
            }
            uint64_t v54 = (unint64_t *)&v53[8 * v50];
            *uint64_t v54 = v47;
            int v48 = v54 + 1;
            uint64_t v56 = (char *)p_p;
            int v55 = (char *)v149;
            if (v149 != p_p)
            {
              do
              {
                unint64_t v57 = *((void *)v55 - 1);
                v55 -= 8;
                *--uint64_t v54 = v57;
              }
              while (v55 != v56);
              int v55 = (char *)p_p;
            }
            p_p = v54;
            v149 = v48;
            v150 = &v53[8 * v52];
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *v48++ = v47;
          }
          v149 = v48;
          int v44 = v49 + 1;
          uint64_t v25 = *a3;
        }
        while (v49 < *(_DWORD *)(*a3 + 8 * v45 + 4));
        uint64_t v43 = v138;
      }
      uint64_t v58 = 8 * v46;
      if (v44 < *(_DWORD *)(v25 + 8 * v46))
      {
        unint64_t v59 = v46 | ((unint64_t)v45 << 32);
        uint64_t v60 = v149;
        do
        {
          if (v60 >= (unint64_t *)v150)
          {
            uint64_t v61 = ((char *)v60 - (unsigned char *)p_p) >> 3;
            if ((unint64_t)(v61 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v62 = (v150 - (unsigned char *)p_p) >> 2;
            if (v62 <= v61 + 1) {
              unint64_t v62 = v61 + 1;
            }
            if ((unint64_t)(v150 - (unsigned char *)p_p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v62;
            }
            if (v63) {
              unint64_t v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v150, v63);
            }
            else {
              unint64_t v64 = 0;
            }
            int v65 = (unint64_t *)&v64[8 * v61];
            *int v65 = v59;
            uint64_t v60 = v65 + 1;
            uint64_t v67 = (char *)p_p;
            uint64_t v66 = (char *)v149;
            if (v149 != p_p)
            {
              do
              {
                unint64_t v68 = *((void *)v66 - 1);
                v66 -= 8;
                *--int v65 = v68;
              }
              while (v66 != v67);
              uint64_t v66 = (char *)p_p;
            }
            p_p = v65;
            v149 = v60;
            v150 = &v64[8 * v63];
            if (v66) {
              operator delete(v66);
            }
          }
          else
          {
            *v60++ = v59;
          }
          v149 = v60;
          ++v44;
          uint64_t v25 = *a3;
        }
        while (v44 < *(_DWORD *)(*a3 + v58));
      }
      uint64_t v42 = (char *)__p;
      uint64_t v27 = v146;
    }
    while (v43 < (((v146 - (unsigned char *)__p) << 30) - 0x100000000) >> 32);
  }
  uint64_t v69 = a4;
  if (v42 != v27)
  {
    uint64_t v70 = *((int *)v27 - 1);
    if (v44 <= *(_DWORD *)(v25 + 8 * v70 + 4))
    {
      unint64_t v71 = v70 | ((unint64_t)v70 << 32);
      uint64_t v72 = v149;
      do
      {
        if (v72 >= (unint64_t *)v150)
        {
          uint64_t v73 = ((char *)v72 - (unsigned char *)p_p) >> 3;
          if ((unint64_t)(v73 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v74 = (v150 - (unsigned char *)p_p) >> 2;
          if (v74 <= v73 + 1) {
            unint64_t v74 = v73 + 1;
          }
          if ((unint64_t)(v150 - (unsigned char *)p_p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v75 = v74;
          }
          if (v75) {
            unint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v150, v75);
          }
          else {
            unint64_t v76 = 0;
          }
          int v77 = (unint64_t *)&v76[8 * v73];
          *int v77 = v71;
          uint64_t v72 = v77 + 1;
          uint64_t v79 = (char *)p_p;
          uint64_t v78 = (char *)v149;
          if (v149 != p_p)
          {
            do
            {
              unint64_t v80 = *((void *)v78 - 1);
              v78 -= 8;
              *--int v77 = v80;
            }
            while (v78 != v79);
            uint64_t v78 = (char *)p_p;
          }
          p_p = v77;
          v149 = v72;
          v150 = &v76[8 * v75];
          if (v78) {
            operator delete(v78);
          }
        }
        else
        {
          *v72++ = v71;
        }
        v149 = v72;
        BOOL v93 = v44++ < *(_DWORD *)(*a3 + 8 * v70 + 4);
      }
      while (v93);
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (p_p == v149)
  {
    unint64_t v135 = ((char *)a1[1] - (char *)*a1) >> 3;
    v142 = 0;
    v143 = 0;
    uint64_t v144 = 0;
    std::vector<std::vector<std::pair<int,int>>>::resize(a4, v135, (uint64_t **)&v142);
    if (v142)
    {
      v143 = v142;
      operator delete(v142);
    }
  }
  else
  {
    uint64_t v81 = *a1;
    int v82 = a1[1];
    if (*a1 != v82)
    {
      v139 = a1[1];
      do
      {
        unint64_t v84 = *v81;
        unint64_t v83 = v81[1];
        v142 = 0;
        v143 = 0;
        uint64_t v144 = 0;
        std::vector<std::vector<std::pair<int,int>>>::push_back[abi:ne180100](v69, (uint64_t)&v142);
        if (v142)
        {
          v143 = v142;
          operator delete(v142);
        }
        if ((v84 & 0x80000000) == 0)
        {
          unint64_t v85 = ((char *)v149 - (unsigned char *)p_p) >> 3;
          if (v85 > v84 && (v83 & 0x80000000) == 0 && (int)v83 >= (int)v84)
          {
            int v86 = ((unint64_t)((char *)v149 - (unsigned char *)p_p) >> 3) - 1;
            if (v85 > v83) {
              int v86 = v83;
            }
            v143 = 0;
            uint64_t v144 = 0;
            v142 = &v143;
            int v141 = 0;
            int v87 = *((_DWORD *)p_p + 2 * v84);
            int v141 = v87;
            if (v87 <= *((_DWORD *)p_p + 2 * v86 + 1))
            {
              uint64_t v88 = v86;
              do
              {
                signed int v89 = (int *)(*a3 + 8 * v87);
                int v91 = *v89;
                int v90 = v89[1];
                BOOL v93 = (int)v88 >= v90 && (v90 & v91) != -1 && (int)v84 <= v91;
                if (v93)
                {
                  v155[0] = &v141;
                  std::string v95 = (int *)std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v153, &v141, (uint64_t)&std::piecewise_construct, v155)[5];
                  v155[0] = &v141;
                  v96 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v153, &v141, (uint64_t)&std::piecewise_construct, v155)[6];
                  while (v95 != (int *)v96)
                  {
                    std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)&v142, (uint64_t *)&v143, v95, v95);
                    ++v95;
                  }
                }
                int v94 = v141;
                int v87 = ++v141;
              }
              while (v94 < *((_DWORD *)p_p + 2 * v88 + 1));
              uint64_t v97 = v142;
              int v82 = v139;
              if (v142 != &v143)
              {
                uint64_t v98 = 0x80000000;
                uint64_t v99 = 0x80000000;
                while (1)
                {
                  uint64_t v100 = *((unsigned int *)v97 + 7);
                  if (v99 != v100 - 1)
                  {
                    uint64_t v101 = *((unsigned int *)v97 + 7);
                    if (v98 == 0x80000000) {
                      goto LABEL_143;
                    }
                    int v104 = v99 + 1;
                    if ((int)v99 + 1 < (int)v100)
                    {
                      long long v105 = (void *)(*a2 + 24 * v104 + 8);
                      char v106 = 1;
                      do
                      {
                        v106 &= *(v105 - 1) == *v105;
                        v105 += 3;
                        ++v104;
                      }
                      while (v100 != v104);
                      if ((v106 & 1) == 0)
                      {
                        uint64_t v107 = a4[1];
                        long long v108 = *(unint64_t **)(v107 - 16);
                        unint64_t v109 = *(void *)(v107 - 8);
                        if ((unint64_t)v108 >= v109)
                        {
                          uint64_t v111 = *(void *)(v107 - 24);
                          uint64_t v112 = ((uint64_t)v108 - v111) >> 3;
                          if ((unint64_t)(v112 + 1) >> 61) {
                            std::vector<int>::__throw_length_error[abi:ne180100]();
                          }
                          uint64_t v113 = v109 - v111;
                          uint64_t v114 = v113 >> 2;
                          if (v113 >> 2 <= (unint64_t)(v112 + 1)) {
                            uint64_t v114 = v112 + 1;
                          }
                          if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v115 = v114;
                          }
                          if (v115) {
                            v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v107 - 8, v115);
                          }
                          else {
                            v116 = 0;
                          }
                          v117 = (unint64_t *)&v116[8 * v112];
                          unint64_t *v117 = v98 | (unint64_t)(v99 << 32);
                          long long v110 = v117 + 1;
                          v119 = *(char **)(v107 - 24);
                          v118 = *(char **)(v107 - 16);
                          if (v118 != v119)
                          {
                            do
                            {
                              unint64_t v120 = *((void *)v118 - 1);
                              v118 -= 8;
                              *--v117 = v120;
                            }
                            while (v118 != v119);
                            v118 = *(char **)(v107 - 24);
                          }
                          *(void *)(v107 - 24) = v117;
                          *(void *)(v107 - 16) = v110;
                          *(void *)(v107 - 8) = &v116[8 * v115];
                          if (v118) {
                            operator delete(v118);
                          }
                        }
                        else
                        {
                          *long long v108 = v98 | (unint64_t)(v99 << 32);
                          long long v110 = v108 + 1;
                        }
                        *(void *)(v107 - 16) = v110;
                        uint64_t v101 = v100;
                        goto LABEL_143;
                      }
                    }
                  }
                  uint64_t v101 = v98;
LABEL_143:
                  long long v102 = (void *)v97[1];
                  if (v102)
                  {
                    do
                    {
                      long long v103 = (void **)v102;
                      long long v102 = (void *)*v102;
                    }
                    while (v102);
                  }
                  else
                  {
                    do
                    {
                      long long v103 = (void **)v97[2];
                      BOOL v32 = *v103 == v97;
                      uint64_t v97 = v103;
                    }
                    while (!v32);
                  }
                  uint64_t v97 = v103;
                  uint64_t v98 = v101;
                  uint64_t v99 = v100;
                  if (v103 == &v143)
                  {
                    uint64_t v69 = a4;
                    int v82 = v139;
                    if (v101 != 0x80000000)
                    {
                      uint64_t v121 = a4[1];
                      v122 = *(unint64_t **)(v121 - 16);
                      unint64_t v123 = *(void *)(v121 - 8);
                      if ((unint64_t)v122 >= v123)
                      {
                        uint64_t v125 = *(void *)(v121 - 24);
                        uint64_t v126 = ((uint64_t)v122 - v125) >> 3;
                        if ((unint64_t)(v126 + 1) >> 61) {
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v127 = v123 - v125;
                        uint64_t v128 = v127 >> 2;
                        if (v127 >> 2 <= (unint64_t)(v126 + 1)) {
                          uint64_t v128 = v126 + 1;
                        }
                        if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v129 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v129 = v128;
                        }
                        if (v129) {
                          v130 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v121 - 8, v129);
                        }
                        else {
                          v130 = 0;
                        }
                        v131 = (unint64_t *)&v130[8 * v126];
                        unint64_t *v131 = v101 | (unint64_t)(v100 << 32);
                        v124 = v131 + 1;
                        v133 = *(char **)(v121 - 24);
                        v132 = *(char **)(v121 - 16);
                        if (v132 != v133)
                        {
                          do
                          {
                            unint64_t v134 = *((void *)v132 - 1);
                            v132 -= 8;
                            *--v131 = v134;
                          }
                          while (v132 != v133);
                          v132 = *(char **)(v121 - 24);
                        }
                        *(void *)(v121 - 24) = v131;
                        *(void *)(v121 - 16) = v124;
                        *(void *)(v121 - 8) = &v130[8 * v129];
                        int v82 = v139;
                        if (v132) {
                          operator delete(v132);
                        }
                      }
                      else
                      {
                        unint64_t *v122 = v101 | (unint64_t)(v100 << 32);
                        v124 = v122 + 1;
                      }
                      *(void *)(v121 - 16) = v124;
                    }
                    break;
                  }
                }
              }
            }
            std::__tree<int>::destroy((uint64_t)&v142, v143);
          }
        }
        v81 += 2;
      }
      while (v81 != v82);
    }
  }
  if (__p)
  {
    v146 = (char *)__p;
    operator delete(__p);
  }
  if (p_p)
  {
    v149 = (unint64_t *)p_p;
    operator delete(p_p);
  }
  std::__tree<int>::destroy((uint64_t)&v151, v152[0]);
  std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::destroy((uint64_t)&v153, v154[0]);
}

void sub_1B221A7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,void *a25)
{
  std::__tree<int>::destroy((uint64_t)&a15, a16);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  std::__tree<int>::destroy((uint64_t)&a24, a25);
  std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::destroy(v25 - 128, *(void **)(v25 - 120));
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::pair<int,int>>>::resize(uint64_t *a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::vector<std::pair<int,int>>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      uint64_t v9 = a1[1];
      do
      {
        uint64_t v11 = *(void **)(v9 - 24);
        v9 -= 24;
        int v10 = v11;
        if (v11)
        {
          *(void *)(v4 - 16) = v10;
          operator delete(v10);
        }
        uint64_t v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

void quasar::AlignmentProcessorBlock::alignUnalignedChars(int ***a1, unint64_t a2)
{
  if (a2 && a1[1] != *a1)
  {
    unsigned __int8 v36 = 0;
    std::vector<BOOL>::vector(&__p, a2, &v36);
    unint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    if (*a1 == v4) {
      goto LABEL_28;
    }
    int v6 = 0;
    unint64_t v7 = *a1;
    do
    {
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      if (*v7 != v9)
      {
        int v10 = (char *)__p;
        do
        {
          int v11 = v8[1];
          unint64_t v12 = *v8;
          if ((int)v12 <= v11)
          {
            int v13 = v11 - v12 + 1;
            do
            {
              *(void *)&v10[(v12 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v12;
              ++v12;
              --v13;
            }
            while (v13);
          }
          ++v6;
          v8 += 2;
        }
        while (v8 != v9);
      }
      v7 += 3;
    }
    while (v7 != v4);
    if (!v6)
    {
LABEL_28:
      uint64_t v22 = (a2 - 1);
      unint64_t v23 = (unint64_t)v5[2];
      int v24 = v5[1];
      if ((unint64_t)v24 >= v23)
      {
        uint64_t v26 = ((char *)v24 - (char *)*v5) >> 3;
        if ((unint64_t)(v26 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = v23 - (void)*v5;
        uint64_t v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1)) {
          uint64_t v28 = v26 + 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29) {
          int v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v5 + 2), v29);
        }
        else {
          int v30 = 0;
        }
        int v31 = &v30[8 * v26];
        BOOL v32 = &v30[8 * v29];
        *(void *)int v31 = v22 << 32;
        uint64_t v25 = (int *)(v31 + 8);
        uint64_t v34 = *v5;
        unint64_t v33 = (char *)v5[1];
        if (v33 != (char *)*v5)
        {
          do
          {
            uint64_t v35 = *((void *)v33 - 1);
            v33 -= 8;
            *((void *)v31 - 1) = v35;
            v31 -= 8;
          }
          while (v33 != (char *)v34);
          unint64_t v33 = (char *)*v5;
        }
        *unint64_t v5 = (int *)v31;
        v5[1] = v25;
        v5[2] = (int *)v32;
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *(void *)int v24 = v22 << 32;
        uint64_t v25 = v24 + 2;
      }
      v5[1] = v25;
    }
    else if (v5 != v4)
    {
      uint64_t v14 = 0;
      int v15 = 0x7FFFFFFF;
      do
      {
        uint64_t v17 = *v5;
        std::string::size_type v16 = v5[1];
        if (*v5 != v16)
        {
          uint64_t v18 = __p;
          do
          {
            for (unint64_t i = v17[1]; ++i < a2; v18[i >> 6] = v20 | (1 << i))
            {
              uint64_t v20 = v18[i >> 6];
              if ((v20 & (1 << i)) != 0) {
                break;
              }
              v17[1] = i;
            }
            unint64_t v21 = v17 + 2;
            if (*v17 < v15)
            {
              uint64_t v14 = v17;
              int v15 = *v17;
            }
            v17 += 2;
          }
          while (v21 != v16);
        }
        v5 += 3;
      }
      while (v5 != v4);
      if (v14 && *v14) {
        *uint64_t v14 = 0;
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1B221AB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::AlignmentProcessorBlock::avoidCrossingWords(std::vector<int>::size_type __n@<X2>, uint64_t ***a2@<X0>, uint64_t *a3@<X1>, uint64_t *a4@<X8>)
{
  unint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (!__n || (v9 = v8 == v7, uint64_t v8 = *a2, v9))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    std::vector<std::vector<std::pair<int,int>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,int>>*,std::vector<std::pair<int,int>>*>(a4, v7, v8, 0xAAAAAAAAAAAAAAABLL * (v8 - v7));
  }
  else
  {
    LODWORD(v67[0]) = -1;
    std::vector<int>::vector(&v68, __n, (const std::vector<int>::value_type *)v67);
    int v11 = *a2;
    unint64_t v12 = ((char *)a2[1] - (char *)*a2) / 24;
    if (a2[1] != *a2)
    {
      uint64_t v13 = 0;
      if (v12 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = ((char *)a2[1] - (char *)*a2) / 24;
      }
      do
      {
        int v15 = (int **)&v11[3 * v13];
        std::string::size_type v16 = *v15;
        uint64_t v17 = v15[1];
        if (v16 != v17)
        {
          std::vector<int>::pointer begin = v68.__begin_;
          do
          {
            uint64_t v19 = *v16;
            if ((int)v19 <= v16[1])
            {
              do
              {
                begin[v19] = v13;
                BOOL v24 = v19++ < v16[1];
              }
              while (v24);
            }
            v16 += 2;
          }
          while (v16 != v17);
        }
        ++v13;
      }
      while (v13 != v14);
    }
    uint64_t v20 = *a3;
    if (a3[1] != *a3)
    {
      unint64_t v21 = 0;
      do
      {
        uint64_t v22 = *(void *)(v20 + 8 * v21);
        if ((v22 & HIDWORD(v22)) != 0xFFFFFFFF)
        {
          uint64_t v23 = v22 >> 32;
          BOOL v24 = v22 >> 32 < __n || quasar::gLogLevel < 1;
          if (!v24)
          {
            memset(v67, 0, sizeof(v67));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v67);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"Char ranges in the word char map exceeds total number of characters", 67);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v67);
          }
          uint64_t v25 = &v68.__begin_[(int)v22];
          uint64_t v26 = &v68.__begin_[v23 + 1];
          uint64_t v27 = v25;
          if (v25 != v26)
          {
            uint64_t v28 = 4 * v23 - 4 * (int)v22 + 4;
            uint64_t v27 = &v68.__begin_[(int)v22];
            while (*v27 == -1)
            {
              ++v27;
              v28 -= 4;
              if (!v28) {
                goto LABEL_30;
              }
            }
          }
          if (v27 != v26)
          {
            uint64_t v29 = (char *)v26 - (char *)v25;
            if (v29 >= 1)
            {
              unint64_t v30 = ((unint64_t)v29 >> 2) + 1;
              do
              {
                *v25++ = *v27;
                --v30;
              }
              while (v30 > 1);
            }
          }
        }
LABEL_30:
        ++v21;
        uint64_t v20 = *a3;
      }
      while (v21 < (a3[1] - *a3) >> 3);
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
    }
    std::vector<std::vector<std::pair<int,int>>>::vector(a4, v12);
    uint64_t v31 = 0;
    if (__n <= 1) {
      std::vector<int>::size_type v32 = 1;
    }
    else {
      std::vector<int>::size_type v32 = __n;
    }
    do
    {
      int v33 = v68.__begin_[v31];
      if (v33 != -1)
      {
        uint64_t v34 = *a4;
        uint64_t v35 = *a4 + 24 * v33;
        unsigned __int8 v36 = *(void **)v35;
        unint64_t v38 = (void **)(v35 + 8);
        uint64_t v37 = *(void **)(v35 + 8);
        if (*(void **)v35 == v37)
        {
          uint64_t v39 = v34 + 24 * v33;
          unint64_t v42 = *(void *)(v39 + 16);
          int v41 = (void *)(v39 + 16);
          unint64_t v40 = v42;
          if ((unint64_t)v36 >= v42)
          {
            uint64_t v49 = v40 - (void)v36;
            uint64_t v50 = v49 >> 2;
            if ((unint64_t)(v49 >> 2) <= 1) {
              uint64_t v50 = 1;
            }
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v50;
            }
            unint64_t v52 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v41, v51);
            *unint64_t v52 = 0x100000001 * v31;
            uint64_t v43 = v52 + 1;
            uint64_t v54 = *v38;
            int v55 = *(void **)v35;
            uint64_t v56 = v52;
            if (*v38 != *(void **)v35)
            {
              do
              {
                uint64_t v57 = *--v54;
                *--uint64_t v56 = v57;
              }
              while (v54 != v55);
              uint64_t v54 = *(void **)v35;
            }
            *(void *)uint64_t v35 = v56;
            *unint64_t v38 = v43;
            *int v41 = &v52[v53];
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            *unsigned __int8 v36 = 0x100000001 * v31;
            uint64_t v43 = v36 + 1;
          }
          *unint64_t v38 = v43;
        }
        else if (*((_DWORD *)v37 - 1) == v31 - 1)
        {
          *((_DWORD *)v37 - 1) = v31;
        }
        else
        {
          uint64_t v44 = v34 + 24 * v33;
          unint64_t v47 = *(void *)(v44 + 16);
          uint64_t v46 = (void *)(v44 + 16);
          unint64_t v45 = v47;
          if ((unint64_t)v37 >= v47)
          {
            uint64_t v58 = v37 - v36;
            unint64_t v59 = v58 + 1;
            if ((unint64_t)(v58 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v60 = v45 - (void)v36;
            if (v60 >> 2 > v59) {
              unint64_t v59 = v60 >> 2;
            }
            if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v61 = v59;
            }
            if (v61) {
              unint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v46, v61);
            }
            else {
              unint64_t v62 = 0;
            }
            unint64_t v63 = &v62[8 * v58];
            *(void *)unint64_t v63 = 0x100000001 * v31;
            int v48 = v63 + 8;
            unint64_t v64 = *v38;
            int v65 = *(void **)v35;
            if (*v38 != *(void **)v35)
            {
              do
              {
                uint64_t v66 = *--v64;
                *((void *)v63 - 1) = v66;
                v63 -= 8;
              }
              while (v64 != v65);
              unint64_t v64 = *(void **)v35;
            }
            *(void *)uint64_t v35 = v63;
            *unint64_t v38 = v48;
            *uint64_t v46 = &v62[8 * v61];
            if (v64) {
              operator delete(v64);
            }
          }
          else
          {
            *uint64_t v37 = 0x100000001 * v31;
            int v48 = v37 + 1;
          }
          *unint64_t v38 = v48;
        }
      }
      ++v31;
    }
    while (v31 != v32);
    if (v68.__begin_)
    {
      v68.__end_ = v68.__begin_;
      operator delete(v68.__begin_);
    }
  }
}

void sub_1B221AFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void quasar::AlignmentProcessorBlock::mergeContinuousRanges(uint64_t **a1@<X0>, char **a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = v4 - *a1;
  if (v4 == *a1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)a2, v4, v4, v5);
  }
  else
  {
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)&v30, v3, v4, v5);
    unint64_t v6 = 126 - 2 * __clz(((char *)v31 - (char *)v30) >> 3);
    if (v31 == v30) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>((uint64_t)v30, v31, (uint64_t)&v33, v7, 1);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v8 = a2 + 2;
    uint64_t v9 = v30;
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), 1uLL);
    unint64_t v12 = &v10[8 * v11];
    *(void *)int v10 = *(void *)v9;
    uint64_t v13 = v10 + 8;
    int v15 = *a2;
    uint64_t v14 = a2[1];
    if (v14 != *a2)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *((void *)v10 - 1) = v16;
        v10 -= 8;
      }
      while (v14 != v15);
      uint64_t v14 = *a2;
    }
    *a2 = v10;
    a2[1] = v13;
    a2[2] = v12;
    if (v14) {
      operator delete(v14);
    }
    a2[1] = v13;
    uint64_t v17 = v30;
    uint64_t v18 = v31;
    if ((unint64_t)((char *)v31 - (char *)v30) >= 9)
    {
      unint64_t v19 = 1;
      do
      {
        uint64_t v20 = &v17[2 * v19];
        if (*((_DWORD *)v13 - 1) == *v20 - 1)
        {
          *((_DWORD *)v13 - 1) = v20[1];
        }
        else
        {
          if ((unint64_t)v13 >= *v8)
          {
            uint64_t v21 = (v13 - *a2) >> 3;
            if ((unint64_t)(v21 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v22 = *v8 - (void)*a2;
            uint64_t v23 = v22 >> 2;
            if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
              uint64_t v23 = v21 + 1;
            }
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v23;
            }
            if (v24) {
              uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v24);
            }
            else {
              uint64_t v25 = 0;
            }
            uint64_t v26 = &v25[8 * v21];
            *(void *)uint64_t v26 = *(void *)v20;
            uint64_t v13 = v26 + 8;
            uint64_t v28 = *a2;
            uint64_t v27 = a2[1];
            if (v27 != *a2)
            {
              do
              {
                uint64_t v29 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v26 - 1) = v29;
                v26 -= 8;
              }
              while (v27 != v28);
              uint64_t v27 = *a2;
            }
            *a2 = v26;
            a2[1] = v13;
            a2[2] = &v25[8 * v24];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *(void *)uint64_t v13 = *(void *)v20;
            v13 += 8;
          }
          a2[1] = v13;
          uint64_t v17 = v30;
          uint64_t v18 = v31;
        }
        ++v19;
      }
      while (v19 < ((char *)v18 - (char *)v17) >> 3);
    }
    if (v17)
    {
      uint64_t v31 = v17;
      operator delete(v17);
    }
  }
}

void sub_1B221B260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  unint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::AlignmentProcessorBlock::pivotTransformQueries(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<std::vector<int>>::__clear[abi:ne180100](a3);
  uint64_t v8 = a1[1];
  uint64_t v39 = a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) != (v8 - *a1) >> 3)
  {
    memset(v41, 0, 256);
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Mismatch in sizes of alignment queries and projections from the first leg don't match.", 86);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (v8 != *a1)
  {
    unint64_t v9 = 0;
    unint64_t v38 = a3;
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&v41[0] = 0;
      uint64_t v10 = *v39 + 24 * v9;
      unint64_t v12 = *(void **)v10;
      uint64_t v11 = *(void **)(v10 + 8);
      while (v12 != v11)
      {
        uint64_t v14 = a4[1];
        unint64_t v13 = (unint64_t)a4[2];
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v16 = ((char *)v14 - (unsigned char *)*a4) >> 3;
          if ((unint64_t)(v16 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v13 - (void)*a4;
          uint64_t v18 = v17 >> 2;
          if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
            uint64_t v18 = v16 + 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v18;
          }
          if (v19) {
            uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a4 + 2), v19);
          }
          else {
            uint64_t v20 = 0;
          }
          uint64_t v21 = &v20[8 * v16];
          *(void *)uint64_t v21 = *v12;
          int v15 = v21 + 8;
          uint64_t v23 = (char *)*a4;
          uint64_t v22 = (char *)a4[1];
          if (v22 != *a4)
          {
            do
            {
              uint64_t v24 = *((void *)v22 - 1);
              v22 -= 8;
              *((void *)v21 - 1) = v24;
              v21 -= 8;
            }
            while (v22 != v23);
            uint64_t v22 = (char *)*a4;
          }
          *a4 = v21;
          a4[1] = v15;
          a4[2] = &v20[8 * v19];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *uint64_t v14 = *v12;
          int v15 = v14 + 1;
        }
        a4[1] = v15;
        int v25 = ((unint64_t)((char *)v15 - (unsigned char *)*a4) >> 3) - 1;
        uint64_t v26 = (char *)__p[1];
        if (__p[1] >= (void *)*(void *)&v41[0])
        {
          uint64_t v28 = (char *)__p[0];
          int64_t v29 = ((char *)__p[1] - (char *)__p[0]) >> 2;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          int64_t v31 = *(void *)&v41[0] - (unint64_t)__p[0];
          if ((uint64_t)(*(void *)&v41[0] - (unint64_t)__p[0]) >> 1 > v30) {
            unint64_t v30 = v31 >> 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32)
          {
            char v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v41, v32);
            uint64_t v28 = (char *)__p[0];
            uint64_t v26 = (char *)__p[1];
          }
          else
          {
            char v33 = 0;
          }
          uint64_t v34 = &v33[4 * v29];
          *(_DWORD *)uint64_t v34 = v25;
          uint64_t v27 = v34 + 4;
          while (v26 != v28)
          {
            int v35 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v34 - 1) = v35;
            v34 -= 4;
          }
          __p[0] = v34;
          __p[1] = v27;
          *(void *)&v41[0] = &v33[4 * v32];
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          *(_DWORD *)__p[1] = v25;
          uint64_t v27 = v26 + 4;
        }
        __p[1] = v27;
        ++v12;
      }
      unint64_t v36 = v38[1];
      if (v36 >= v38[2])
      {
        uint64_t v37 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v38, (uint64_t)__p);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v38, (uint64_t)__p);
        uint64_t v37 = v36 + 24;
      }
      v38[1] = v37;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v9;
    }
    while (v9 < (uint64_t)(a1[1] - *a1) >> 3);
  }
}

void sub_1B221B5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::AlignmentProcessorBlock::stitchPivotQueries@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::vector<std::vector<std::pair<int,int>>>::vector(a3, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7 != *a2)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = (int **)(v8 + 24 * v9);
      uint64_t v11 = *v10;
      unint64_t v12 = v10[1];
      if (*v10 != v12)
      {
        do
        {
          unint64_t v13 = (uint64_t **)(*a1 + 24 * *v11);
          uint64_t result = std::vector<std::pair<int,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,int>*>,std::__wrap_iter<std::pair<int,int>*>>(*a3 + 24 * v9, *(void *)(*a3 + 24 * v9), *v13, v13[1], v13[1] - *v13);
          ++v11;
        }
        while (v11 != v12);
        uint64_t v8 = *a2;
        uint64_t v7 = a2[1];
      }
      ++v9;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3) > v9);
  }
  return result;
}

void sub_1B221B6CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::AlignmentProcessorBlock::parseQueryRanges(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  quasar::PTree::PTree((quasar::PTree *)v6);
  quasar::PTree::PTree((quasar::PTree *)v5);
  quasar::PTree::getChild(a1, a2);
}

void sub_1B221BAC4(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  __cxa_end_catch();
  JUMPOUT(0x1B221BAE4);
}

void quasar::AlignmentProcessorBlock::writeResult(uint64_t a1, void *a2, unsigned int **a3, uint64_t a4)
{
  uint64_t v6 = quasar::OptionValue<std::string>::value((void *)(a1 + 464 + *(void *)(*(void *)(a1 + 464) - 24)));
  int v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(void *)(v6 + 8) != 21)
    {
LABEL_13:
      uint64_t v45 = quasar::MetaInfo::get((quasar::MetaInfo *)(a4 + 192));
      quasar::PTree::PTree((quasar::PTree *)&v68);
      uint64_t v10 = *a3;
      uint64_t v46 = a3[1];
      if (*a3 != v46)
      {
        uint64_t v11 = 0;
        do
        {
          unint64_t v13 = (quasar *)*v10;
          unsigned int v12 = v10[1];
          quasar::PTree::PTree((quasar::PTree *)v66);
          unsigned int v49 = v12;
          quasar::PTree::PTree((quasar::PTree *)v65);
          uint64_t v48 = v11;
          uint64_t v14 = *a2 + 24 * v11;
          int v15 = *(int **)v14;
          uint64_t v16 = *(int **)(v14 + 8);
          while (v15 != v16)
          {
            quasar::PTree::PTree((quasar::PTree *)&v59);
            std::string::basic_string[abi:ne180100]<0>(__p, "start");
            int v17 = *v15;
            LODWORD(v51) = quasar::getType((quasar *)*v15);
            std::to_string(&v52, v17);
            uint64_t v53 = 0;
            uint64_t v54 = 0;
            uint64_t v55 = 0;
            char v56 = 1;
            quasar::PTree::putChild((uint64_t)&v59, (uint64_t)__p, (uint64_t)&v51, 1);
            quasar::PTree::~PTree((quasar::PTree *)&v51);
            if (v58 < 0) {
              operator delete(__p[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "end");
            unsigned int v18 = v15[1];
            LODWORD(v51) = quasar::getType((quasar *)v18);
            std::to_string(&v52, v18);
            uint64_t v53 = 0;
            uint64_t v54 = 0;
            uint64_t v55 = 0;
            char v56 = 1;
            quasar::PTree::putChild((uint64_t)&v59, (uint64_t)__p, (uint64_t)&v51, 1);
            quasar::PTree::~PTree((quasar::PTree *)&v51);
            if (v58 < 0) {
              operator delete(__p[0]);
            }
            quasar::PTree::addChild((quasar::PTree *)v66, (const quasar::PTree *)&v59);
            quasar::PTree::~PTree((quasar::PTree *)&v59);
            v15 += 2;
          }
          std::string::basic_string[abi:ne180100]<0>(&v51, "start");
          LODWORD(v59) = quasar::getType(v13);
          std::to_string(&v60, (int)v13);
          uint64_t v61 = 0;
          uint64_t v62 = 0;
          uint64_t v63 = 0;
          char v64 = 1;
          quasar::PTree::putChild((uint64_t)v65, (uint64_t)&v51, (uint64_t)&v59, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v59);
          if (v52.__r_.__value_.__s.__data_[15] < 0) {
            operator delete(v51);
          }
          std::string::basic_string[abi:ne180100]<0>(&v51, "end");
          LODWORD(v59) = quasar::getType((quasar *)v49);
          std::to_string(&v60, v49);
          uint64_t v61 = 0;
          uint64_t v62 = 0;
          uint64_t v63 = 0;
          char v64 = 1;
          quasar::PTree::putChild((uint64_t)v65, (uint64_t)&v51, (uint64_t)&v59, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v59);
          if (v52.__r_.__value_.__s.__data_[15] < 0) {
            operator delete(v51);
          }
          std::string::basic_string[abi:ne180100]<0>(&v59, "projections");
          quasar::PTree::putChild((uint64_t)v65, (uint64_t)&v59, (uint64_t)v66, 1);
          if (v60.__r_.__value_.__s.__data_[15] < 0) {
            operator delete(v59);
          }
          quasar::PTree::addChild((quasar::PTree *)&v68, (const quasar::PTree *)v65);
          uint64_t v11 = v48 + 1;
          quasar::PTree::~PTree((quasar::PTree *)v65);
          quasar::PTree::~PTree((quasar::PTree *)v66);
          v10 += 2;
        }
        while (v10 != v46);
      }
      std::string::basic_string[abi:ne180100]<0>(v66, "alignment-queries");
      quasar::PTree::putChild(v45, (uint64_t)v66, (uint64_t)&v68, 1);
      if (v67 < 0) {
        operator delete(v66[0]);
      }
      quasar::PTree::~PTree((quasar::PTree *)&v68);
      return;
    }
    uint64_t v6 = *(void *)v6;
  }
  else if (v7 != 21)
  {
    goto LABEL_13;
  }
  if (*(void *)v6 != 0x7275746375727473
    || *(void *)(v6 + 8) != 0x69646572705F6465
    || *(void *)(v6 + 13) != 0x6E6F697463696465)
  {
    goto LABEL_13;
  }
  unint64_t v19 = (uint64_t *)(a4 + 192);
  if (quasar::MetaInfo::hasStructuredPrediction(v19, (uint64_t)"gender", 6))
  {
    uint64_t v20 = quasar::MetaInfo::structuredPrediction(v19, (uint64_t)"gender", 6);
    uint64_t v21 = *(void *)(v20 + 32);
    uint64_t v50 = *(std::string **)(v20 + 40);
    if ((std::string *)v21 != v50)
    {
      uint64_t v22 = *a3;
      do
      {
        uint64_t v23 = (char *)a3[1];
        if (v22 == (unsigned int *)v23)
        {
          uint64_t v24 = 0;
        }
        else
        {
          uint64_t v24 = 0;
          int v25 = v22;
          do
          {
            if (*v25 == *(_DWORD *)(v21 + 48) && v25[1] == *(_DWORD *)(v21 + 52)) {
              break;
            }
            ++v24;
            v25 += 2;
          }
          while (v25 != (unsigned int *)v23);
        }
        if (v24 == (v23 - (char *)v22) >> 3)
        {
          long long v83 = 0u;
          long long v84 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          long long v68 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"Alignment query not found for source span (", 43);
          uint64_t v43 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", ", 2);
          uint64_t v44 = (void *)std::ostream::operator<<();
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v44, ")");
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v68);
        }
        uint64_t v26 = (char **)(v21 + 56);
        std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(v21 + 56), (uint64_t)(*(void *)(*a2 + 24 * v24 + 8) - *(void *)(*a2 + 24 * v24)) >> 3);
        uint64_t v27 = *a2 + 24 * v24;
        int64_t v29 = *(unsigned int **)v27;
        uint64_t v28 = *(unsigned int **)(v27 + 8);
        if (*(unsigned int **)v27 != v28)
        {
          unint64_t v30 = (void *)(v21 + 72);
          int64_t v31 = *(uint64_t **)(v21 + 64);
          do
          {
            uint64_t v32 = *v29;
            uint64_t v33 = v29[1];
            if ((unint64_t)v31 >= *v30)
            {
              uint64_t v34 = ((char *)v31 - *v26) >> 3;
              if ((unint64_t)(v34 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v35 = *v30 - (void)*v26;
              uint64_t v36 = v35 >> 2;
              if (v35 >> 2 <= (unint64_t)(v34 + 1)) {
                uint64_t v36 = v34 + 1;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v36;
              }
              if (v37) {
                unint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v21 + 72, v37);
              }
              else {
                unint64_t v38 = 0;
              }
              uint64_t v39 = &v38[8 * v34];
              *(void *)uint64_t v39 = v32 | (v33 << 32);
              int64_t v31 = (uint64_t *)(v39 + 8);
              int v41 = *(char **)(v21 + 56);
              unint64_t v40 = *(char **)(v21 + 64);
              if (v40 != v41)
              {
                do
                {
                  uint64_t v42 = *((void *)v40 - 1);
                  v40 -= 8;
                  *((void *)v39 - 1) = v42;
                  v39 -= 8;
                }
                while (v40 != v41);
                unint64_t v40 = *v26;
              }
              *(void *)(v21 + 56) = v39;
              *(void *)(v21 + 64) = v31;
              *(void *)(v21 + 72) = &v38[8 * v37];
              if (v40) {
                operator delete(v40);
              }
            }
            else
            {
              *v31++ = v32 | (v33 << 32);
            }
            *(void *)(v21 + 64) = v31;
            v29 += 2;
          }
          while (v29 != v28);
        }
        uint64_t v22 = *a3;
        *(void *)(v21 + 48) = *(void *)&(*a3)[2 * v24];
        v21 += 80;
      }
      while ((std::string *)v21 != v50);
    }
  }
  else if (quasar::gLogLevel >= 6)
  {
    long long v83 = 0u;
    long long v84 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v68 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"No gender alternative spans present.", 36);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v68);
  }
}

void quasar::AlignmentProcessorBlock::handleSourceInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6, unsigned char *a7)
{
  int v7 = *(quasar::TranslationPhraseInternal **)a2;
  uint64_t v8 = *(void *)(a2 + 8) - *(void *)a2;
  if (!v8)
  {
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v44, "AlignmentProcessorBlock::handleSourceInput() called called with empty input");
    goto LABEL_72;
  }
  if (0x8F5C28F5C28F5C29 * (v8 >> 3) >= 2)
  {
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v44, "AlignmentProcessorBlock::handleSourceInput() called called with multiple inputs");
LABEL_72:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v44);
  }
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v16 = quasar::MetaInfo::get((quasar::TranslationPhraseInternal *)((char *)v7 + 192));
  uint64_t v17 = quasar::OptionValue<std::string>::value((void *)(a1 + 464 + *(void *)(*(void *)(a1 + 464) - 24)));
  int v18 = *(char *)(v17 + 23);
  if (v18 < 0)
  {
    if (*(void *)(v17 + 8) != 7) {
      goto LABEL_12;
    }
    uint64_t v17 = *(void *)v17;
  }
  else if (v18 != 7)
  {
    goto LABEL_12;
  }
  if (*(_DWORD *)v17 == 1634100580 && *(_DWORD *)(v17 + 3) == 1953264993)
  {
    std::string::basic_string[abi:ne180100]<0>(&v42, "alignment-queries");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::AlignmentProcessorBlock::parseQueryRanges(v16, (uint64_t)&v42, &v44);
  }
LABEL_12:
  uint64_t v20 = quasar::OptionValue<std::string>::value((void *)(a1 + 464 + *(void *)(*(void *)(a1 + 464) - 24)));
  int v21 = *(char *)(v20 + 23);
  if (v21 < 0)
  {
    if (*(void *)(v20 + 8) != 21) {
      goto LABEL_27;
    }
    uint64_t v20 = *(void *)v20;
  }
  else if (v21 != 21)
  {
    goto LABEL_27;
  }
  if (*(void *)v20 == 0x7275746375727473
    && *(void *)(v20 + 8) == 0x69646572705F6465
    && *(void *)(v20 + 13) == 0x6E6F697463696465)
  {
    std::string::basic_string[abi:ne180100]<0>(&v42, "gender_alternatives.spans");
    std::string::basic_string[abi:ne180100]<0>(__p, "source.");
    quasar::AlignmentProcessorBlock::parseQueryRanges(v16, (uint64_t)&v42, &v44);
  }
LABEL_27:
  *a7 = 0;
  if (*(void *)a4 == *(void *)(a4 + 8)) {
    return;
  }
  quasar::TranslationPhraseInternal::extractAlignmentProjections(*(quasar::TranslationPhraseInternal **)a2, (uint64_t *)&v42);
  uint64_t v24 = v42;
  int v25 = v43;
  if (v42 != v43)
  {
    do
    {
      if (*v24 != v24[1]) {
        *a7 = 1;
      }
      v24 += 3;
    }
    while (v24 != v25);
  }
  if (*a7)
  {
    if (a6 != (void *)a4) {
      std::vector<std::pair<int,int>>::__assign_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>(a6, *(uint64_t **)a4, *(uint64_t **)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
    }
    quasar::AlignmentProcessorBlock::pivotTransformQueries((void *)a4, &v42, a5, (void **)&v44);
    uint64_t v26 = *(uint64_t **)a4;
    if (*(void *)a4)
    {
      *(void *)(a4 + 8) = v26;
      operator delete(v26);
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
    }
    *(_OWORD *)a4 = v44;
    *(void *)(a4 + 16) = v45;
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v44, *(quasar::TranslationPhraseInternal **)a2);
LABEL_43:
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = v44;
    *(void *)(a3 + 16) = v45;
    goto LABEL_46;
  }
  uint64_t v27 = *(quasar::TranslationPhraseInternal **)a2;
  uint64_t v28 = *(const std::string **)(*(void *)a2 + 136);
  if (*(void *)(*(void *)a2 + 144) - (void)v28 != 136)
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v44 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"For alignment mapping to work properly, ensure whole string provided as first token.", 84);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v44);
      uint64_t v27 = *(quasar::TranslationPhraseInternal **)a2;
    }
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v44, v27);
    goto LABEL_43;
  }
  std::string::operator=((std::string *)a3, v28);
LABEL_46:
  if (*(char *)(a3 + 23) >= 0) {
    int v29 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    int v29 = *(_DWORD *)(a3 + 8);
  }
  unint64_t v30 = *(uint64_t **)a4;
  int64_t v31 = *(uint64_t **)(a4 + 8);
  if (*(uint64_t **)a4 != v31)
  {
    do
    {
      int v32 = *(_DWORD *)v30;
      if ((*(_DWORD *)v30 & 0x80000000) != 0 || v32 >= v29)
      {
        int v34 = quasar::gLogLevel;
      }
      else
      {
        int v33 = *((_DWORD *)v30 + 1);
        int v34 = quasar::gLogLevel;
        if ((v33 & 0x80000000) == 0)
        {
          if (v33 < v29 || quasar::gLogLevel <= 1) {
            goto LABEL_62;
          }
LABEL_61:
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Query range [", 13);
          uint64_t v36 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", ", 2);
          unint64_t v37 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"] is out of bounds.", 19);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v44);
          int v32 = *(_DWORD *)v30;
          int v34 = quasar::gLogLevel;
          goto LABEL_62;
        }
      }
      if (v34 >= 2) {
        goto LABEL_61;
      }
LABEL_62:
      if (v32 > *((_DWORD *)v30 + 1) && v34 >= 1)
      {
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v44 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Query range [", 13);
        uint64_t v39 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", ", 2);
        unint64_t v40 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] is illegal.", 13);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v44);
      }
      ++v30;
    }
    while (v30 != v31);
  }
  *(void *)&long long v44 = &v42;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
}

void quasar::AlignmentProcessorBlock::handleSegmentEncInput(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = a2[1] - *a2;
  if (!v4)
  {
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__v, "AlignmentProcessorBlock::handleSegmentEncInput() called called with empty input");
    goto LABEL_25;
  }
  if (0x8F5C28F5C28F5C29 * (v4 >> 3) >= 2)
  {
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__v, "AlignmentProcessorBlock::handleSegmentEncInput() called called with multiple inputs");
LABEL_25:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
  }
  std::vector<std::string>::__clear[abi:ne180100](a3);
  std::vector<std::string>::__clear[abi:ne180100](a4);
  uint64_t v8 = *a2;
  unint64_t v9 = *(long long **)(*a2 + 136);
  for (i = *(long long **)(v8 + 144); v9 != i; unint64_t v9 = (long long *)((char *)v9 + 136))
  {
    unint64_t v11 = a3[1];
    if (v11 >= a3[2])
    {
      uint64_t v12 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v9);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v9);
      uint64_t v12 = v11 + 24;
    }
    a3[1] = v12;
    quasar::TranslationTokenInternal::strippedText((std::string *)v9, &__p);
    unint64_t v14 = a4[1];
    unint64_t v13 = a4[2];
    if (v14 >= v13)
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *a4) >> 3);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *a4) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v17;
      }
      *(void *)&__v[32] = a4 + 2;
      if (v19) {
        uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a4 + 2), v19);
      }
      else {
        uint64_t v20 = 0;
      }
      int v21 = &v20[24 * v16];
      *(void *)std::__split_buffer<std::pair<std::string, std::string>> __v = v20;
      *(void *)&__v[8] = v21;
      *(void *)&__v[24] = &v20[24 * v19];
      long long v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v21 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)int v21 = v22;
      memset(&__p, 0, sizeof(__p));
      *(void *)&__v[16] = v21 + 24;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, (std::__split_buffer<std::string> *)__v);
      uint64_t v23 = a4[1];
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
      int v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      a4[1] = v23;
      if (v24 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v14 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v14 = v15;
      a4[1] = v14 + 24;
    }
  }
}

void sub_1B221CC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::__split_buffer<std::wstring> *a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::AlignmentProcessorBlock::handlePDecInput(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if (a2[1] == *a2)
  {
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__v, "AlignmentProcessorBlock::handlePDecInput() called with empty input");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
  }
  uint64_t v8 = *a5;
  uint64_t v9 = a5[1];
  while (v9 != v8)
  {
    v9 -= 24;
    *(void *)std::__split_buffer<std::pair<std::string, std::string>> __v = v9;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  }
  a5[1] = v8;
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  while (v11 != v10)
  {
    v11 -= 24;
    *(void *)std::__split_buffer<std::pair<std::string, std::string>> __v = v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  }
  long long v38 = a5;
  a3[1] = v10;
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  while (v13 != v12)
  {
    v13 -= 24;
    *(void *)std::__split_buffer<std::pair<std::string, std::string>> __v = v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  }
  a4[1] = v12;
  uint64_t v14 = *a2;
  uint64_t v37 = a2[1];
  if (*a2 != v37)
  {
    do
    {
      uint64_t v45 = 0;
      long long v46 = 0;
      unint64_t v47 = 0;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      unint64_t v44 = 0;
      memset(&v41, 0, sizeof(v41));
      uint64_t v16 = *(void *)(v14 + 136);
      uint64_t v15 = *(void *)(v14 + 144);
      while (v16 != v15)
      {
        unint64_t v17 = v46;
        if ((unint64_t)v46 >= v47)
        {
          uint64_t v18 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(&v45, v16 + 32);
        }
        else
        {
          *long long v46 = 0;
          v17[1] = 0;
          v17[2] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v17, *(const void **)(v16 + 32), *(void *)(v16 + 40), (uint64_t)(*(void *)(v16 + 40) - *(void *)(v16 + 32)) >> 2);
          uint64_t v18 = (uint64_t)(v17 + 3);
        }
        long long v46 = (void *)v18;
        unint64_t v19 = v43;
        if ((unint64_t)v43 >= v44)
        {
          int v21 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v42, (long long *)v16);
        }
        else
        {
          if (*(char *)(v16 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v43, *(const std::string::value_type **)v16, *(void *)(v16 + 8));
          }
          else
          {
            long long v20 = *(_OWORD *)v16;
            v43->__r_.__value_.__r.__words[2] = *(void *)(v16 + 16);
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
          }
          int v21 = v19 + 1;
        }
        uint64_t v43 = v21;
        quasar::TranslationTokenInternal::strippedText((std::string *)v16, &__p);
        std::vector<std::string>::pointer end = v41.__end_;
        if (v41.__end_ >= v41.__end_cap_.__value_)
        {
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v41.__end_ - (char *)v41.__begin_) >> 3);
          unint64_t v25 = v24 + 1;
          if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 3) > v25) {
            unint64_t v25 = 0x5555555555555556 * (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v26 = v25;
          }
          *(void *)&__v[32] = &v41.__end_cap_;
          if (v26) {
            long long v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v41.__end_cap_, v26);
          }
          else {
            long long v27 = 0;
          }
          long long v28 = &v27[24 * v24];
          *(void *)std::__split_buffer<std::pair<std::string, std::string>> __v = v27;
          *(void *)&__v[8] = v28;
          *(void *)&__v[24] = &v27[24 * v26];
          long long v29 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *((void *)v28 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)long long v28 = v29;
          memset(&__p, 0, sizeof(__p));
          *(void *)&__v[16] = v28 + 24;
          std::vector<std::string>::__swap_out_circular_buffer(&v41, (std::__split_buffer<std::string> *)__v);
          long long v30 = v41.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
          v41.__end_ = v30;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v41.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v23;
          v41.__end_ = end + 1;
        }
        v16 += 136;
      }
      unint64_t v31 = v38[1];
      if (v31 >= v38[2])
      {
        uint64_t v32 = std::vector<std::vector<std::vector<int>>>::__push_back_slow_path<std::vector<std::vector<int>> const&>(v38, &v45);
      }
      else
      {
        std::vector<std::vector<std::vector<int>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<int>> const&>((uint64_t)v38, &v45);
        uint64_t v32 = v31 + 24;
      }
      v38[1] = v32;
      unint64_t v33 = a3[1];
      if (v33 >= a3[2])
      {
        uint64_t v34 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a3, &v42);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a3, &v42);
        uint64_t v34 = v33 + 24;
      }
      a3[1] = v34;
      unint64_t v35 = a4[1];
      if (v35 >= a4[2])
      {
        uint64_t v36 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a4, (long long **)&v41);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a4, (long long **)&v41);
        uint64_t v36 = v35 + 24;
      }
      a4[1] = v36;
      *(void *)std::__split_buffer<std::pair<std::string, std::string>> __v = &v41;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
      *(void *)std::__split_buffer<std::pair<std::string, std::string>> __v = &v42;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
      *(void *)std::__split_buffer<std::pair<std::string, std::string>> __v = &v45;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
      v14 += 200;
    }
    while (v14 != v37);
  }
}

void sub_1B221D058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__p, uint64_t a6, int a7, __int16 a8, char a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void ***__pa, uint64_t a15, uint64_t a16, std::__split_buffer<std::wstring> **a17, uint64_t a18, uint64_t a19, std::__split_buffer<std::wstring> *a20,uint64_t a21,uint64_t a22,char a23)
{
  __pa = (void ***)&a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  a17 = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a20 = (std::__split_buffer<std::wstring> *)&a23;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

void quasar::AlignmentProcessorBlock::handleSegmentDecInput(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6 == v5)
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "AlignmentProcessorBlock::handleSegmentDecInput() called with empty input");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if ((uint64_t **)a3 != a2) {
    std::vector<quasar::TranslationPhraseInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(a3, v5, v6, 0x8F5C28F5C28F5C29 * (v6 - v5));
  }
  std::vector<std::string>::__clear[abi:ne180100](a4);
  uint64_t v9 = (quasar::TranslationPhraseInternal *)*a2;
  uint64_t v10 = (quasar::TranslationPhraseInternal *)a2[1];
  while (v9 != v10)
  {
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)__p, v9);
    unint64_t v11 = a4[1];
    if (v11 >= a4[2])
    {
      uint64_t v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, (long long *)__p);
    }
    else
    {
      if (SBYTE7(v15) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a4[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v12 = *(_OWORD *)__p;
        *(void *)(v11 + 16) = v15;
        *(_OWORD *)unint64_t v11 = v12;
      }
      uint64_t v13 = v11 + 24;
      a4[1] = v11 + 24;
    }
    a4[1] = v13;
    if (SBYTE7(v15) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = (quasar::TranslationPhraseInternal *)((char *)v9 + 200);
  }
}

void sub_1B221D234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 8) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::AlignmentProcessorBlock::handleTokenizedInput(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4 == *a2)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v15, "AlignmentProcessorBlock::handleTokenizedInput() called with empty input");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v15);
  }
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (v7 != *a3)
  {
    do
    {
      v7 -= 24;
      *(void *)&long long v15 = v7;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    }
    while (v7 != v6);
    uint64_t v3 = *a2;
    uint64_t v4 = a2[1];
  }
  for (a3[1] = v6; v3 != v4; v3 += 200)
  {
    long long v15 = 0uLL;
    *(void *)&long long v16 = 0;
    uint64_t v9 = *(void *)(v3 + 136);
    uint64_t v10 = *(void *)(v3 + 144);
    if (v9 != v10)
    {
      unint64_t v11 = 0;
      do
      {
        if ((unint64_t)v11 >= (unint64_t)v16)
        {
          unint64_t v11 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v15, (long long *)v9);
        }
        else
        {
          if (*(char *)(v9 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v9, *(void *)(v9 + 8));
          }
          else
          {
            long long v12 = *(_OWORD *)v9;
            v11->__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
            *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
          }
          ++v11;
        }
        *((void *)&v15 + 1) = v11;
        v9 += 136;
      }
      while (v9 != v10);
    }
    unint64_t v13 = a3[1];
    if (v13 >= a3[2])
    {
      uint64_t v14 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a3, (long long **)&v15);
    }
    else
    {
      std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a3, (long long **)&v15);
      uint64_t v14 = v13 + 24;
    }
    a3[1] = v14;
    uint64_t v32 = (void **)&v15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v32);
  }
}

void sub_1B221D3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 - 72) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 72));
  _Unwind_Resume(a1);
}

void quasar::AlignmentProcessorBlock::processBody(quasar::AlignmentProcessorBlock *this)
{
  v99[0] = 0;
  v99[1] = 0;
  uint64_t v100 = 0;
  v96 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  BOOL v93 = 0;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  memset(v92, 0, sizeof(v92));
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  memset(v88, 0, sizeof(v88));
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  memset(v84, 0, sizeof(v84));
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  memset(v77, 0, sizeof(v77));
  long long v74 = 0;
  long long v75 = 0;
  uint64_t v76 = 0;
  long long v71 = 0;
  long long v72 = 0;
  uint64_t v73 = 0;
  uint64_t Value = quasar::ProcessingInput::getValue((quasar::AlignmentProcessorBlock *)((char *)this + 640));
  char v70 = 0;
  quasar::AlignmentProcessorBlock::handleSourceInput((uint64_t)this, Value, (uint64_t)v99, (uint64_t)&v96, v77, &v74, &v70);
  uint64_t v3 = (void *)quasar::ProcessingInput::getValue((quasar::AlignmentProcessorBlock *)((char *)this + 696));
  quasar::AlignmentProcessorBlock::handleSegmentEncInput((uint64_t)v3, v3, (uint64_t *)&v93, (uint64_t *)v92);
  uint64_t v4 = (uint64_t *)quasar::ProcessingInput::getValue((quasar::AlignmentProcessorBlock *)((char *)this + 752));
  quasar::AlignmentProcessorBlock::handlePDecInput((uint64_t)v4, v4, &v89, v88, &v85);
  unint64_t v5 = (uint64_t **)quasar::ProcessingInput::getValue((quasar::AlignmentProcessorBlock *)((char *)this + 808));
  quasar::AlignmentProcessorBlock::handleSegmentDecInput((uint64_t)v5, v5, (uint64_t)v84, &v81);
  if (*(unsigned char *)quasar::OptionValue<BOOL>::value((void *)this + 22))
  {
    uint64_t v6 = (uint64_t *)quasar::ProcessingInput::getValue((quasar::AlignmentProcessorBlock *)((char *)this + 864));
    quasar::AlignmentProcessorBlock::handleTokenizedInput((uint64_t)v6, v6, &v78);
  }
  if (v82 - v81 != v90 - v89)
  {
    long long v118 = 0u;
    long long v119 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v103 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"size of n-best list from segment-decoder and PDec-translator are different", 74);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v103);
  }
  uint64_t v8 = v85;
  uint64_t v7 = v86;
  if (v86 != v85)
  {
    unint64_t v9 = 0;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v94 - (uint64_t)v93) >> 3);
    unint64_t v1 = 24;
    do
    {
      unint64_t v11 = (unsigned int ***)(v8 + 24 * v9);
      long long v12 = *v11;
      unint64_t v13 = v11[1];
      if (*v11 != v13)
      {
        do
        {
          long long v15 = *v12;
          uint64_t v14 = v12[1];
          while (v15 != v14)
          {
            unint64_t v16 = *v15;
            if ((v16 & 0x80000000) != 0 || v10 <= v16)
            {
              if (v15 != v14)
              {
                for (unint64_t i = v15 + 1; i != v14; ++i)
                {
                  unint64_t v18 = *i;
                  if ((v18 & 0x80000000) == 0 && v10 > v18) {
                    *v15++ = v18;
                  }
                }
              }
              if (v15 != v14) {
                v12[1] = v15;
              }
              break;
            }
            ++v15;
          }
          v12 += 3;
        }
        while (v12 != v13);
        uint64_t v8 = v85;
        uint64_t v7 = v86;
      }
      ++v9;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3));
  }
  if (v96 != v97)
  {
    v68[0] = 0;
    v68[1] = 0;
    uint64_t v69 = 0;
    long long v19 = (void *)((char *)this + 24);
    if (*(unsigned char *)quasar::OptionValue<BOOL>::value((quasar::AlignmentProcessorBlock *)((char *)this
                                                                                      + *(void *)(*((void *)this + 3)
                                                                                                  - 24)
                                                                                      + 24)))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, " ");
      quasar::splitStringSimple((uint64_t)v99, (uint64_t *)__p, (unint64_t)&v103);
    }
    long long v20 = (void *)((char *)this + 320);
    if (*(unsigned char *)quasar::OptionValue<BOOL>::value((void *)this + 40))
    {
      long long v21 = (char *)quasar::OptionValue<BOOL>::value(v20);
      quasar::AlignmentProcessorBlock::computeTokenCharMapping((uint64_t)v99, v92, *v21, (void **)&v103);
    }
    else
    {
      long long v22 = (char *)quasar::OptionValue<BOOL>::value(v20);
      quasar::AlignmentProcessorBlock::computeTokenCharMapping((uint64_t)v99, &v93, *v22, (void **)&v103);
    }
    *(_OWORD *)long long v68 = v103;
    uint64_t v69 = v104;
    long long v23 = (void *)v103;
    if (v82 != v81)
    {
      uint64_t v24 = 0;
      long long v25 = (void *)((char *)this + 320);
      while (1)
      {
        if (*(unsigned char *)quasar::OptionValue<BOOL>::value((void *)((char *)v19 + *(void *)(*v19 - 24))))
        {
          quasar::AlignmentProcessorBlock::computeWordLevelAlignments((uint64_t *)&v93, (uint64_t *)(v89 + 24 * v24), (uint64_t *)(v85 + 24 * v24), (uint64_t *)&v103);
          long long v26 = (uint64_t *)(v85 + 24 * v24);
          std::vector<std::vector<int>>::__vdeallocate(v26);
          *(_OWORD *)long long v26 = v103;
          v26[2] = v104;
          long long v103 = 0uLL;
          *(void *)&long long v104 = 0;
          __p[0] = &v103;
          std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        quasar::AlignmentProcessorBlock::computeRangeProjections((unsigned int **)&v96, (uint64_t *)(v85 + 24 * v24), (uint64_t *)v68, (uint64_t *)&v66);
        long long v64 = 0uLL;
        uint64_t v65 = 0;
        if (*(unsigned char *)quasar::OptionValue<BOOL>::value((void *)((char *)v19 + *(void *)(*v19 - 24))))
        {
          uint64_t v27 = v81;
          std::string::basic_string[abi:ne180100]<0>(__p, " ");
          quasar::splitStringSimple(v27 + 24 * v24, (uint64_t *)__p, (unint64_t)&v103);
        }
        if (*(unsigned char *)quasar::OptionValue<BOOL>::value(v25)) {
          quasar::AlignmentProcessorBlock::computeTokenCharMapping(v81 + 24 * v24, (long long **)(v88[0] + 24 * v24), 0, (void **)&v103);
        }
        else {
          quasar::AlignmentProcessorBlock::computeTokenCharMapping(v81 + 24 * v24, (long long **)(v89 + 24 * v24), 0, (void **)&v103);
        }
        long long v64 = v103;
        uint64_t v65 = v104;
        long long v28 = (void *)v103;
        uint64_t v29 = *((void *)&v66 + 1);
        for (uint64_t j = v66; j != v29; j += 24)
        {
          quasar::AlignmentProcessorBlock::computeCharLevelSpans((int **)j, (uint64_t *)&v64, (char **)&v103);
          long long v31 = *(int **)j;
          if (*(void *)j)
          {
            *(void *)(j + 8) = v31;
            operator delete(v31);
            *(void *)uint64_t j = 0;
            *(void *)(j + 8) = 0;
            *(void *)(j + 16) = 0;
          }
          *(_OWORD *)uint64_t j = v103;
          *(void *)(j + 16) = v104;
        }
        uint64_t v32 = quasar::OptionValue<std::string>::value((quasar::AlignmentProcessorBlock *)((char *)this
                                                                                        + *(void *)(*((void *)this + 58) - 24)
                                                                                        + 464));
        int v33 = *(char *)(v32 + 23);
        if (v33 < 0)
        {
          if (*(void *)(v32 + 8) == 21)
          {
            uint64_t v32 = *(void *)v32;
LABEL_49:
            if (*(void *)v32 == 0x7275746375727473
              && *(void *)(v32 + 8) == 0x69646572705F6465
              && *(void *)(v32 + 13) == 0x6E6F697463696465)
            {
              goto LABEL_75;
            }
          }
        }
        else if (v33 == 21)
        {
          goto LABEL_49;
        }
        uint64_t v36 = (uint64_t **)(v81 + 24 * v24);
        if (*((char *)v36 + 23) < 0)
        {
          uint64_t v36 = (uint64_t **)*v36;
          unint64_t v37 = *(void *)(v81 + 24 * v24 + 8);
        }
        else
        {
          unint64_t v37 = *((unsigned __int8 *)v36 + 23);
        }
        quasar::utf8::codepointsCtr(v36, v37, 0, v37, (unint64_t)__p);
        if (v63)
        {
          unint64_t v38 = SLODWORD(__p[0]);
          unint64_t v1 = v1 & 0xFFFFFFFF00000000 | LODWORD(__p[0]);
        }
        else
        {
          *(_OWORD *)uint64_t v101 = *(_OWORD *)__p;
          uint64_t v102 = v62;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v62 = 0;
          if (quasar::gLogLevel >= 1)
          {
            long long v118 = 0u;
            long long v119 = 0u;
            long long v116 = 0u;
            long long v117 = 0u;
            long long v114 = 0u;
            long long v115 = 0u;
            long long v112 = 0u;
            long long v113 = 0u;
            long long v110 = 0u;
            long long v111 = 0u;
            long long v108 = 0u;
            long long v109 = 0u;
            long long v106 = 0u;
            long long v107 = 0u;
            long long v104 = 0u;
            long long v105 = 0u;
            long long v103 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
            if (v102 >= 0) {
              long long v39 = v101;
            }
            else {
              long long v39 = (void **)v101[0];
            }
            if (v102 >= 0) {
              uint64_t v40 = HIBYTE(v102);
            }
            else {
              uint64_t v40 = (uint64_t)v101[1];
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)v39, v40);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v103);
          }
          if (SHIBYTE(v102) < 0) {
            operator delete(v101[0]);
          }
          unint64_t v38 = 0;
          v1 &= 0xFFFFFFFF00000000;
          if (!v63 && SHIBYTE(v62) < 0)
          {
            operator delete(__p[0]);
            unint64_t v38 = 0;
          }
        }
        quasar::AlignmentProcessorBlock::alignUnalignedChars((int ***)&v66, v38);
LABEL_75:
        if (*(unsigned char *)quasar::OptionValue<BOOL>::value((void *)this + 22))
        {
          if (v82 - v81 != v79 - v78)
          {
            long long v118 = 0u;
            long long v119 = 0u;
            long long v116 = 0u;
            long long v117 = 0u;
            long long v114 = 0u;
            long long v115 = 0u;
            long long v112 = 0u;
            long long v113 = 0u;
            long long v110 = 0u;
            long long v111 = 0u;
            long long v108 = 0u;
            long long v109 = 0u;
            long long v106 = 0u;
            long long v107 = 0u;
            long long v104 = 0u;
            long long v105 = 0u;
            long long v103 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"Tokenizer did not return same number of phrases as the Translator.", 66);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v103);
          }
          std::vector<std::string> v41 = (uint64_t **)(v81 + 24 * v24);
          if (*((char *)v41 + 23) < 0)
          {
            std::vector<std::string> v41 = (uint64_t **)*v41;
            unint64_t v42 = *(void *)(v81 + 24 * v24 + 8);
          }
          else
          {
            unint64_t v42 = *((unsigned __int8 *)v41 + 23);
          }
          quasar::utf8::codepointsCtr(v41, v42, 0, v42, (unint64_t)__p);
          if (v63)
          {
            std::vector<int>::size_type v43 = SLODWORD(__p[0]);
            unint64_t v59 = v59 & 0xFFFFFFFF00000000 | LODWORD(__p[0]);
          }
          else
          {
            *(_OWORD *)uint64_t v101 = *(_OWORD *)__p;
            uint64_t v102 = v62;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v62 = 0;
            if (quasar::gLogLevel >= 1)
            {
              long long v118 = 0u;
              long long v119 = 0u;
              long long v116 = 0u;
              long long v117 = 0u;
              long long v114 = 0u;
              long long v115 = 0u;
              long long v112 = 0u;
              long long v113 = 0u;
              long long v110 = 0u;
              long long v111 = 0u;
              long long v108 = 0u;
              long long v109 = 0u;
              long long v106 = 0u;
              long long v107 = 0u;
              long long v104 = 0u;
              long long v105 = 0u;
              long long v103 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
              if (v102 >= 0) {
                unint64_t v44 = v101;
              }
              else {
                unint64_t v44 = (void **)v101[0];
              }
              if (v102 >= 0) {
                uint64_t v45 = HIBYTE(v102);
              }
              else {
                uint64_t v45 = (uint64_t)v101[1];
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)v44, v45);
              quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v103);
            }
            if (SHIBYTE(v102) < 0) {
              operator delete(v101[0]);
            }
            std::vector<int>::size_type v43 = 0;
            v59 &= 0xFFFFFFFF00000000;
            if (!v63 && SHIBYTE(v62) < 0)
            {
              operator delete(__p[0]);
              std::vector<int>::size_type v43 = 0;
            }
          }
          uint64_t v46 = v81;
          uint64_t v47 = v78;
          long long v48 = (char *)quasar::OptionValue<BOOL>::value(v25);
          quasar::AlignmentProcessorBlock::computeTokenCharMapping(v46 + 24 * v24, (long long **)(v47 + 24 * v24), *v48, __p);
          quasar::AlignmentProcessorBlock::avoidCrossingWords(v43, (uint64_t ***)&v66, (uint64_t *)__p, (uint64_t *)&v103);
          std::vector<std::vector<int>>::__vdeallocate((uint64_t *)&v66);
          long long v66 = v103;
          uint64_t v67 = v104;
          *(void *)&long long v104 = 0;
          long long v103 = 0uLL;
          v101[0] = &v103;
          std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v101);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        uint64_t v49 = *((void *)&v66 + 1);
        for (uint64_t k = v66; k != v49; k += 24)
        {
          quasar::AlignmentProcessorBlock::mergeContinuousRanges((uint64_t **)k, (char **)&v103);
          long long v51 = *(uint64_t **)k;
          if (*(void *)k)
          {
            *(void *)(k + 8) = v51;
            operator delete(v51);
            *(void *)uint64_t k = 0;
            *(void *)(k + 8) = 0;
            *(void *)(k + 16) = 0;
          }
          *(_OWORD *)uint64_t k = v103;
          *(void *)(k + 16) = v104;
        }
        if (v70)
        {
          quasar::AlignmentProcessorBlock::stitchPivotQueries(&v66, v77, &v103);
          std::vector<std::vector<int>>::__vdeallocate((uint64_t *)&v66);
          long long v66 = v103;
          uint64_t v67 = v104;
          *(void *)&long long v104 = 0;
          long long v103 = 0uLL;
          __p[0] = &v103;
          std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          long long v52 = (char *)v71;
          if (v71 != v72)
          {
            long long v53 = v74;
            if (v72 - (unsigned char *)v71 == v75 - (unsigned char *)v74)
            {
              while (*(_DWORD *)v52 == *v53 && *((_DWORD *)v52 + 1) == v53[1])
              {
                v52 += 8;
                v53 += 2;
                if (v52 == v72) {
                  goto LABEL_111;
                }
              }
            }
            if (quasar::gLogLevel >= 5) {
              goto LABEL_124;
            }
            goto LABEL_125;
          }
LABEL_111:
          long long v55 = &v74;
        }
        else
        {
          long long v56 = (char *)v71;
          if (v71 != v72)
          {
            long long v57 = v96;
            if (v72 - (unsigned char *)v71 == v97 - (unsigned char *)v96)
            {
              while (*(_DWORD *)v56 == *v57 && *((_DWORD *)v56 + 1) == v57[1])
              {
                v56 += 8;
                v57 += 2;
                if (v56 == v72) {
                  goto LABEL_120;
                }
              }
            }
            if (quasar::gLogLevel >= 5)
            {
LABEL_124:
              long long v118 = 0u;
              long long v119 = 0u;
              long long v116 = 0u;
              long long v117 = 0u;
              long long v114 = 0u;
              long long v115 = 0u;
              long long v112 = 0u;
              long long v113 = 0u;
              long long v110 = 0u;
              long long v111 = 0u;
              long long v108 = 0u;
              long long v109 = 0u;
              long long v106 = 0u;
              long long v107 = 0u;
              long long v104 = 0u;
              long long v105 = 0u;
              long long v103 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"resetting original query ranges from alignment-span-info", 56);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v103);
            }
LABEL_125:
            long long v55 = &v71;
            goto LABEL_126;
          }
LABEL_120:
          long long v55 = &v96;
        }
LABEL_126:
        quasar::AlignmentProcessorBlock::writeResult((uint64_t)this, &v66, (unsigned int **)v55, v84[0] + 200 * v24);
        if (v28) {
          operator delete(v28);
        }
        *(void *)&long long v103 = &v66;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
        if (++v24 >= 0xAAAAAAAAAAAAAAABLL * ((v82 - v81) >> 3))
        {
          long long v23 = v68[0];
          break;
        }
      }
    }
    if (v23)
    {
      v68[1] = v23;
      operator delete(v23);
    }
  }
  quasar::ProcessingBlock::send((uint64_t)this + *(void *)(*(void *)this - 24), (uint64_t)v84, 0);
  if (v71) {
    operator delete(v71);
  }
  if (v74)
  {
    long long v75 = v74;
    operator delete(v74);
  }
  *(void *)&long long v103 = v77;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  *(void *)&long long v103 = &v78;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  *(void *)&long long v103 = &v81;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  *(void *)&long long v103 = v84;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  *(void *)&long long v103 = &v85;
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  *(void *)&long long v103 = v88;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  *(void *)&long long v103 = &v89;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  *(void *)&long long v103 = v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  *(void *)&long long v103 = &v93;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  if (v96)
  {
    uint64_t v97 = v96;
    operator delete(v96);
  }
  if (SHIBYTE(v100) < 0) {
    operator delete(v99[0]);
  }
}

void sub_1B221E188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (!a23 && a22 < 0) {
    operator delete(a17);
  }
  JUMPOUT(0x1B221E260);
}

void sub_1B221E1A0()
{
}

void sub_1B221E1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    JUMPOUT(0x1B221E1ECLL);
  }
  JUMPOUT(0x1B221E260);
}

void sub_1B221E1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if ((a22 & 0x80000000) == 0)
  {
    a17 = &a28;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a17);
    if (a32)
    {
      a33 = a32;
      operator delete(a32);
    }
    if (a37) {
      operator delete(a37);
    }
    if (a40)
    {
      a41 = a40;
      operator delete(a40);
    }
    a17 = &a43;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a46;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a49;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a52;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a55;
    std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a58;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a61;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
    if (a70)
    {
      a71 = a70;
      operator delete(a70);
    }
    if (a73 < 0) {
      operator delete(a72);
    }
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B221E26CLL);
}

void sub_1B221E208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  a17 = (uint64_t)&a25;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  a17 = (uint64_t)&a40;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a43;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a49;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a52;
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a55;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a58;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a67)
  {
    a68 = (uint64_t)a67;
    operator delete(a67);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  _Unwind_Resume(a1);
}

void sub_1B221E224()
{
}

void sub_1B221E230()
{
}

void sub_1B221E23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a17 = (void **)&STACK[0x220];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a25;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (a29)
  {
    a30 = a29;
    operator delete(a29);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a37)
  {
    a38 = a37;
    operator delete(a37);
  }
  a17 = (void **)&a40;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a43;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a49;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a52;
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a55;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a58;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (a67)
  {
    a68 = a67;
    operator delete(a67);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  _Unwind_Resume(a1);
}

void sub_1B221E25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v72)
  {
    a22 = (uint64_t)v72;
    operator delete(v72);
  }
  a17 = &a25;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a29)
  {
    a30 = a29;
    operator delete(a29);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a37)
  {
    a38 = a37;
    operator delete(a37);
  }
  a17 = &a40;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a43;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a49;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a52;
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a55;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a58;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a67)
  {
    a68 = a67;
    operator delete(a67);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'quasar::AlignmentProcessorBlock::processBody(quasar::AlignmentProcessorBlock *this)
{
}

uint64_t quasar::AlignmentProcessorBlock::minConfigVersion(quasar::AlignmentProcessorBlock *this)
{
  return 156;
}

uint64_t virtual thunk to'quasar::AlignmentProcessorBlock::minConfigVersion(quasar::AlignmentProcessorBlock *this)
{
  return 156;
}

void quasar::ConfiguredProcessingBlock<quasar::AlignmentProcessorOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  uint64_t v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  uint64_t v4 = v10;
  unint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      uint64_t v8 = *a2;
      unint64_t v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = v10;
  }
  if (v4)
  {
    unint64_t v11 = v4;
    operator delete(v4);
  }
}

void sub_1B221E454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::AlignmentProcessorOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::AlignmentProcessorOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::AlignmentProcessorOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

void quasar::AlignmentProcessorBlock::~AlignmentProcessorBlock(quasar::AlignmentProcessorBlock *this)
{
  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 920));
}

{
  uint64_t v1;
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 920));
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::AlignmentProcessorBlock::blockType(quasar::AlignmentProcessorBlock *this)
{
  return "AlignmentProcessorBlock";
}

void *quasar::AlignmentProcessorBlock::inputs@<X0>(quasar::AlignmentProcessorBlock *this@<X0>, void *a2@<X8>)
{
  int v4 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((void *)this + 22);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4)
  {
    uint64_t result = operator new(0x28uLL);
    *a2 = result;
    uint64_t v6 = result + 5;
    a2[2] = result + 5;
    *uint64_t result = (char *)this + 640;
    result[1] = (char *)this + 696;
    result[2] = (char *)this + 752;
    result[3] = (char *)this + 808;
    result[4] = (char *)this + 864;
  }
  else
  {
    uint64_t result = operator new(0x20uLL);
    *a2 = result;
    uint64_t v6 = result + 4;
    a2[2] = result + 4;
    *uint64_t result = (char *)this + 640;
    result[1] = (char *)this + 696;
    result[2] = (char *)this + 752;
    result[3] = (char *)this + 808;
  }
  a2[1] = v6;
  return result;
}

void *non-virtual thunk to'quasar::AlignmentProcessorBlock::inputs@<X0>(quasar::AlignmentProcessorBlock *this@<X0>, void *a2@<X8>)
{
  return quasar::AlignmentProcessorBlock::inputs((quasar::AlignmentProcessorBlock *)((char *)this - 632), a2);
}

void non-virtual thunk to'quasar::AlignmentProcessorBlock::~AlignmentProcessorBlock(char **this)
{
  quasar::ProcessingBlock::~ProcessingBlock(this + 36);
}

{
  uint64_t vars8;

  quasar::ProcessingBlock::~ProcessingBlock(this + 36);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::AlignmentProcessorBlock::~AlignmentProcessorBlock(quasar::AlignmentProcessorBlock *this)
{
  uint64_t v2 = (char **)(v1 + 920);
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v1;
  uint64_t vars8;

  uint64_t v1 = (char **)((char *)this + *(void *)(*(void *)this - 24));
  quasar::ProcessingBlock::~ProcessingBlock(v1 + 115);
  JUMPOUT(0x1B3EA8670);
}

const char *virtual thunk to'quasar::AlignmentProcessorBlock::blockType(quasar::AlignmentProcessorBlock *this)
{
  return "AlignmentProcessorBlock";
}

void quasar::AlignmentProcessorBlock::~AlignmentProcessorBlock(quasar::AlignmentProcessorBlock *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[5];
  *((void *)this + 79) = a2[6];
  uint64_t v6 = (void **)((char *)this + 896);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 887) < 0) {
    operator delete(*((void **)this + 108));
  }
  uint64_t v6 = (void **)((char *)this + 840);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 831) < 0) {
    operator delete(*((void **)this + 101));
  }
  uint64_t v6 = (void **)((char *)this + 784);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 775) < 0) {
    operator delete(*((void **)this + 94));
  }
  uint64_t v6 = (void **)((char *)this + 728);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 719) < 0) {
    operator delete(*((void **)this + 87));
  }
  uint64_t v6 = (void **)((char *)this + 672);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 663) < 0) {
    operator delete(*((void **)this + 80));
  }
  uint64_t v5 = a2[1];
  *(void *)this = v5;
  *(void *)((char *)this + *(void *)(v5 - 24)) = a2[2];
  quasar::AlignmentProcessorOptions::~AlignmentProcessorOptions((quasar::AlignmentProcessorBlock *)((char *)this + 8));
}

char *std::vector<std::vector<std::pair<int,int>>>::__append(uint64_t *a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = (char *)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *((void *)result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v15 = v9 + 24 * a2;
      uint64_t v16 = 24 * a2;
      do
      {
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(void *)(v9 + 16) = 0;
        uint64_t result = std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)v9, *a3, a3[1], a3[1] - *a3);
        v9 += 24;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    long long v21 = result;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    long long v17 = v14;
    unint64_t v18 = &v14[24 * v10];
    long long v19 = v18;
    long long v20 = &v14[24 * v13];
    std::__split_buffer<std::vector<std::pair<int,int>>>::__construct_at_end((char *)&v17, a2, a3);
    std::vector<std::vector<std::pair<int,int>>>::__swap_out_circular_buffer(a1, &v17);
    return (char *)std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_1B221EADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::__split_buffer<std::vector<std::pair<int,int>>>::__construct_at_end(char *result, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 2);
  if (a2)
  {
    uint64_t v6 = v4 + 24 * a2;
    uint64_t v7 = 24 * a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      uint64_t result = std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)v4, *a3, a3[1], a3[1] - *a3);
      v4 += 24;
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  *((void *)v3 + 2) = v4;
  return result;
}

void sub_1B221EB78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<std::pair<int,int>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,int>>*,std::vector<std::pair<int,int>>*>(void *result, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,int>>>,std::vector<std::pair<int,int>>*,std::vector<std::pair<int,int>>*,std::vector<std::pair<int,int>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B221EBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,int>>>,std::vector<std::pair<int,int>>*,std::vector<std::pair<int,int>>*,std::vector<std::pair<int,int>>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)v4, *v6, v6[1], v6[1] - *v6);
      uint64_t v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,int>>>,std::vector<std::pair<int,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B221ECA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,int>>>,std::vector<std::pair<int,int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::vector<std::pair<int,int>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B221ED84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::vector<std::vector<int>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<int>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B221EDF0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<int>>>::__push_back_slow_path<std::vector<std::vector<int>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<std::vector<int>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer(v14);
  return v12;
}

void sub_1B221EF08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B221EFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B221F0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B221F1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B221F308(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B221F49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1B221F524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B221F994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B221FA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B221FBAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B221FC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B221FDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B221FEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B222006C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1B22200E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B2220538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2220628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B222077C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B22208B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2220A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B2220B98(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B2220CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2221358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2221420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void quasar::truncateUtf8(std::string *__str@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  if ((a2 & 0x80000000) != 0)
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "Logic error: truncateUtf8 called with negative length (should not happen)");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
  }
  unsigned int v3 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t size = __str->__r_.__value_.__l.__size_;
    if (size <= a2)
    {
      uint64_t v7 = (const std::string::value_type *)__str->__r_.__value_.__r.__words[0];
      std::string::__init_copy_ctor_external(a3, v7, size);
      return;
    }
  }
  else if (v3 <= a2)
  {
    *a3 = *__str;
    return;
  }
  if ((v3 & 0x80u) == 0) {
    unint64_t v5 = __str;
  }
  else {
    unint64_t v5 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  while ((v5->__r_.__value_.__s.__data_[a2] & 0xC0) == 0x80)
  {
    if ((int)a2-- <= 0)
    {
      a2 = -1;
      break;
    }
  }
  std::string::basic_string(a3, __str, 0, (int)a2, (std::allocator<char> *)v8);
}

unsigned char *quasar::getOverridesFromTranslationOptions@<X0>(unsigned char *result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*result)
  {
    uint64_t result = (unsigned char *)std::vector<std::string>::__emplace_back_slow_path<char const* const&>(a2, quasar::CONFIG_OVERRIDE_ENABLE_DISAMBIGUATION_ALTERNATIVES);
    a2[1] = (uint64_t)result;
  }
  return result;
}

void sub_1B2221618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::translateInputMapToString(void *a1)
{
  memset(&v44, 0, sizeof(v44));
  std::vector<std::string>::reserve(&v44, a1[2]);
  unint64_t v4 = (void *)*a1;
  uint64_t v2 = a1 + 1;
  unsigned int v3 = v4;
  if (v4 != v2)
  {
    unint64_t v35 = (void **)*MEMORY[0x1E4FBA408];
    unint64_t v5 = *(void ***)(MEMORY[0x1E4FBA408] + 64);
    uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    do
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v38);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"\"", 1);
      int v8 = *((char *)v3 + 55);
      if (v8 >= 0) {
        uint64_t v9 = (uint64_t)(v3 + 4);
      }
      else {
        uint64_t v9 = v3[4];
      }
      if (v8 >= 0) {
        uint64_t v10 = *((unsigned __int8 *)v3 + 55);
      }
      else {
        uint64_t v10 = v3[5];
      }
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\": [", 4);
      __p[0] = ",";
      __p[1] = (void *)1;
      quasar::join<std::vector<quasar::TranslationPhrase>>(v3 + 7, (uint64_t *)__p);
      if (SHIBYTE(__v.__end_) >= 0) {
        p_v = &__v;
      }
      else {
        p_v = __v.__first_;
      }
      if (SHIBYTE(__v.__end_) >= 0) {
        uint64_t end_high = HIBYTE(__v.__end_);
      }
      else {
        uint64_t end_high = (uint64_t)__v.__begin_;
      }
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)p_v, end_high);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
      if (SHIBYTE(__v.__end_) < 0) {
        operator delete(__v.__first_);
      }
      std::stringbuf::str();
      std::vector<std::string>::pointer end = v44.__end_;
      if (v44.__end_ >= v44.__end_cap_.__value_)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_ - (char *)v44.__begin_) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) > v19) {
          unint64_t v19 = 0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v20 = v19;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v44.__end_cap_;
        if (v20) {
          long long v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v44.__end_cap_, v20);
        }
        else {
          long long v21 = 0;
        }
        long long v22 = v21 + v18;
        __v.__first_ = v21;
        __v.__begin_ = v22;
        __v.__end_cap_.__value_ = &v21[v20];
        long long v23 = *(_OWORD *)__p;
        v22->__r_.__value_.__r.__words[2] = v37;
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
        __p[1] = 0;
        std::string::size_type v37 = 0;
        __p[0] = 0;
        __v.__end_ = v22 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v44, &__v);
        uint64_t v24 = v44.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v44.__end_ = v24;
        if (SHIBYTE(v37) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v17 = *(_OWORD *)__p;
        v44.__end_->__r_.__value_.__r.__words[2] = v37;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v17;
        v44.__end_ = end + 1;
      }
      v38[0] = v35;
      *(void ***)((char *)v38 + (void)*(v35 - 3)) = v5;
      uint64_t v39 = v6;
      uint64_t v40 = MEMORY[0x1E4FBA470] + 16;
      if (v42 < 0) {
        operator delete(v41);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1B3EA8520](v43);
      long long v25 = (void *)v3[1];
      if (v25)
      {
        do
        {
          long long v26 = v25;
          long long v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          long long v26 = (void *)v3[2];
          BOOL v27 = *v26 == (void)v3;
          unsigned int v3 = v26;
        }
        while (!v27);
      }
      unsigned int v3 = v26;
    }
    while (v26 != v2);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v38);
  long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"{", 1);
  uint64_t v29 = MEMORY[0x1E4FBA408];
  long long v30 = v28;
  __p[0] = ",";
  __p[1] = (void *)1;
  quasar::join<std::vector<std::string>>((uint64_t *)&v44, (uint64_t *)__p);
  if (SHIBYTE(__v.__end_) >= 0) {
    first = &__v;
  }
  else {
    first = __v.__first_;
  }
  if (SHIBYTE(__v.__end_) >= 0) {
    uint64_t begin = HIBYTE(__v.__end_);
  }
  else {
    uint64_t begin = (uint64_t)__v.__begin_;
  }
  int v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)first, begin);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"}", 1);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  std::stringbuf::str();
  v38[0] = *(void ***)v29;
  uint64_t v34 = *(void *)(v29 + 72);
  *(void ***)((char *)v38 + (unint64_t)*(v38[0] - 3)) = *(void ***)(v29 + 64);
  uint64_t v39 = v34;
  uint64_t v40 = MEMORY[0x1E4FBA470] + 16;
  if (v42 < 0) {
    operator delete(v41);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](v43);
  v38[0] = (void **)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v38);
}

void sub_1B2221B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  a15 = (void **)(v15 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t quasar::join<std::vector<quasar::TranslationPhrase>>(uint64_t *a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::TranslationPhrase>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B2221D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::PDecTranslator::getTranslatorOptions(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v52, (char *)quasar::MT_DECODERS_SECTION);
  uint64_t v7 = std::string::append(v6, ".");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a2;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a2 + 8);
  }
  uint64_t v12 = std::string::append(&v51, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(void *)&long long v35 = *((void *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t Ptree = quasar::SystemConfig::getPtree(a1, (uint64_t)__p);
  if (SBYTE7(v35) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  memset(&v51, 0, sizeof(v51));
  if (*((char *)a3 + 23) >= 0) {
    size_t v14 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v14 = (size_t)a3[1];
  }
  if (!v14) {
    goto LABEL_36;
  }
  uint64_t v15 = *(unsigned __int8 *)(a4 + 23);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a4 + 8);
  }
  if (v15)
  {
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v14 + 1);
    if ((SBYTE7(v35) & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if (*((char *)a3 + 23) >= 0) {
      long long v17 = a3;
    }
    else {
      long long v17 = *a3;
    }
    memmove(v16, v17, v14);
    *(_WORD *)((char *)v16 + v14) = 45;
    int v18 = *(char *)(a4 + 23);
    if (v18 >= 0) {
      unint64_t v19 = (const std::string::value_type *)a4;
    }
    else {
      unint64_t v19 = *(const std::string::value_type **)a4;
    }
    if (v18 >= 0) {
      std::string::size_type v20 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      std::string::size_type v20 = *(void *)(a4 + 8);
    }
    long long v21 = std::string::append((std::string *)__p, v19, v20);
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[0];
    v52.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    v51.__r_.__value_.__r.__words[0] = v22;
    v51.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&v51.__r_.__value_.__s + 23) = v23;
    if (SBYTE7(v35) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
LABEL_36:
    MEMORY[0x1B3EA7B20](&v51, "");
    if (quasar::gLogLevel >= 5)
    {
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"missing source or target locale, skipping parsing language-pair-specific-settings", 81);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v33, (char *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
  uint64_t v24 = std::string::append(&v33, ".");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v26 = &v51;
  }
  else {
    long long v26 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v51.__r_.__value_.__l.__size_;
  }
  long long v28 = std::string::append(&v52, (const std::string::value_type *)v26, size);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(void *)&long long v35 = *((void *)&v28->__r_.__value_.__l + 2);
  *(_OWORD *)std::string __p = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  quasar::PTree::getChildOptional(Ptree, (uint64_t)__p);
}

void sub_1B2223328(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::PDecTranslator::PDecCompilationContext::compile(quasar::PDecTranslator::PDecCompilationContext *this)
{
  if (quasar::gLogLevel >= 5)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Starting background compilation for MT models...", 48);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v13);
  }
  uint64_t v2 = (char *)*((void *)this + 1);
  unsigned int v3 = (char *)this + 16;
  uint64_t v4 = 1;
  if (v2 != v3)
  {
    do
    {
      int v5 = (*(uint64_t (**)(void))(**((void **)v2 + 4) + 16))(*((void *)v2 + 4));
      uint64_t v6 = (char *)*((void *)v2 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (char *)*((void *)v2 + 2);
          BOOL v8 = *(void *)v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v4 = v4 & v5;
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
  if (quasar::gLogLevel > 4)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Finished background compilation of MT models, status: ", 54);
    if (v4) {
      uint64_t v10 = "Ok";
    }
    else {
      uint64_t v10 = "Failure!";
    }
    if (v4) {
      uint64_t v11 = 2;
    }
    else {
      uint64_t v11 = 8;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v13);
  }
  return v4;
}

void sub_1B2223BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::PDecTranslator::PDecCompilationContext::isCompileRequired(quasar::PDecTranslator::PDecCompilationContext *this)
{
  if (quasar::gLogLevel >= 5)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Checking if background compilation for MT models is needed...", 61);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v13);
  }
  uint64_t v2 = (char *)*((void *)this + 1);
  unsigned int v3 = (char *)this + 16;
  if (v2 == (char *)this + 16)
  {
    uint64_t v5 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v4 = (*(uint64_t (**)(void))(**((void **)v2 + 4) + 24))(*((void *)v2 + 4));
      if (v4) {
        break;
      }
      uint64_t v5 = v4;
      uint64_t v6 = (char *)*((void *)v2 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (char *)*((void *)v2 + 2);
          BOOL v8 = *(void *)v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
      if (v7 == v3) {
        goto LABEL_14;
      }
    }
    uint64_t v5 = 1;
  }
LABEL_14:
  if (quasar::gLogLevel >= 5)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Finished checking background compilation status of MT models: Compilation ", 74);
    if (v5) {
      uint64_t v10 = "needed!";
    }
    else {
      uint64_t v10 = "not needed";
    }
    if (v5) {
      uint64_t v11 = 7;
    }
    else {
      uint64_t v11 = 10;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v13);
  }
  return v5;
}

void sub_1B2223DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::PDecTranslator::PDecCompilationContext::purgeCompiledModels(quasar::PDecTranslator::PDecCompilationContext *this)
{
  if (quasar::gLogLevel >= 5)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Starting purging of compiled MT models...", 41);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v13);
  }
  uint64_t v2 = (char *)*((void *)this + 1);
  unsigned int v3 = (char *)this + 16;
  uint64_t v4 = 1;
  if (v2 != v3)
  {
    do
    {
      int v5 = (*(uint64_t (**)(void))(**((void **)v2 + 4) + 32))(*((void *)v2 + 4));
      uint64_t v6 = (char *)*((void *)v2 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (char *)*((void *)v2 + 2);
          BOOL v8 = *(void *)v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v4 = v4 & v5;
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
  if (quasar::gLogLevel > 4)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Finished purging compiled MT models, status: ", 45);
    if (v4) {
      uint64_t v10 = "Ok";
    }
    else {
      uint64_t v10 = "Failure!";
    }
    if (v4) {
      uint64_t v11 = 2;
    }
    else {
      uint64_t v11 = 8;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v13);
  }
  return v4;
}

void sub_1B2223F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::PDecTranslator::PDecCompilationContext::size(quasar::PDecTranslator::PDecCompilationContext *this)
{
  return *((void *)this + 3);
}

uint64_t *std::set<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    int v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__emplace_hint_unique_key_args<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec> const&>(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *quasar::PDecTranslator::PDecCompilationContext::combine(uint64_t a1, void *lpsrc)
{
  if (v3) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = quasar::gLogLevel < 1;
  }
  if (!v4)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Compilation contexts only implemented for PDecTranslator!", 57);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v6);
  }
  return std::set<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *> *,long>>((uint64_t *)(a1 + 8), v3[1], v3 + 2);
}

void sub_1B22240E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::PDecTranslator::getLanguageMapping(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(&v38, (char *)quasar::MT_DECODERS_SECTION);
  BOOL v8 = std::string::append(&v38, ".");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v11 = *(const std::string::value_type **)a2;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a2 + 8);
  }
  long long v13 = std::string::append(&v39, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  long long v15 = std::string::append(&v40, ".");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  long long v17 = std::string::append(&v41, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  long long v19 = std::string::append(&v42, ".");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  int v21 = *(char *)(a3 + 23);
  if (v21 >= 0) {
    long long v22 = (const std::string::value_type *)a3;
  }
  else {
    long long v22 = *(const std::string::value_type **)a3;
  }
  if (v21 >= 0) {
    std::string::size_type v23 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v23 = *(void *)(a3 + 8);
  }
  long long v24 = std::string::append(&v43, v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  long long v26 = std::string::append(&v44, "-");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  int v28 = *(char *)(a4 + 23);
  if (v28 >= 0) {
    long long v29 = (const std::string::value_type *)a4;
  }
  else {
    long long v29 = *(const std::string::value_type **)a4;
  }
  if (v28 >= 0) {
    std::string::size_type v30 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v30 = *(void *)(a4 + 8);
  }
  long long v31 = std::string::append(&v45, v29, v30);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  std::string v33 = std::string::append(&v35, ".graph");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  std::string::size_type v37 = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::getPtreeOptional(a1, (uint64_t)__p);
}

void sub_1B22247B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  std::string __p = &a16;
  std::vector<std::unique_ptr<quasar::TranslatorOptions>>::__destroy_vector::operator()[abi:ne180100](&__p);
  _Unwind_Resume(a1);
}

void sub_1B2224A44()
{
}

void std::optional<std::string>::value_or[abi:ne180100]<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 24))
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
}

void quasar::PDecTranslator::createGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v40, (char *)quasar::MT_DECODERS_SECTION);
  uint64_t v7 = std::string::append(&v40, ".");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    int v10 = (const std::string::value_type *)a3;
  }
  else {
    int v10 = *(const std::string::value_type **)a3;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a3 + 8);
  }
  std::string::size_type v12 = std::string::append(&v41, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  long long v14 = std::string::append(&v42, ".");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  long long v16 = std::string::append(&v43, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  long long v18 = std::string::append(&v44, ".");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  int v20 = *(char *)(a4 + 23);
  if (v20 >= 0) {
    int v21 = (const std::string::value_type *)a4;
  }
  else {
    int v21 = *(const std::string::value_type **)a4;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v22 = *(void *)(a4 + 8);
  }
  std::string::size_type v23 = std::string::append(&v45, v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  long long v25 = std::string::append(&v46, "-");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  int v27 = *(char *)(a5 + 23);
  if (v27 >= 0) {
    int v28 = (const std::string::value_type *)a5;
  }
  else {
    int v28 = *(const std::string::value_type **)a5;
  }
  if (v27 >= 0) {
    std::string::size_type v29 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    std::string::size_type v29 = *(void *)(a5 + 8);
  }
  std::string::size_type v30 = std::string::append(&v47, v28, v29);
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  long long v32 = std::string::append(&v48, ".");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  long long v34 = std::string::append(&v38, (const std::string::value_type *)quasar::GRAPH_SECTION);
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  __p[2] = (void *)v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::getPtreeOptional(a2, (uint64_t)__p);
}

void quasar::PDecTranslator::createLinearGraph()
{
}

void sub_1B2228F38()
{
}

void sub_1B2228F54(_Unwind_Exception *a1)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&STACK[0x240]);
  if (*(char *)(v2 - 177) < 0) {
    operator delete(*(void **)(v2 - 200));
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B2228F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (*(char *)(v72 - 153) < 0) {
    operator delete(*(void **)(v72 - 176));
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (*(char *)(v72 - 177) < 0) {
    operator delete(*(void **)(v72 - 200));
  }
  (*(void (**)(uint64_t))(*(void *)a20 + 8))(a20);
  _Unwind_Resume(a1);
}

void sub_1B2228FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (*(char *)(v73 - 153) < 0) {
    operator delete(*(void **)(v73 - 176));
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (*(char *)(v73 - 177) < 0) {
    operator delete(*(void **)(v73 - 200));
  }
  (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
  _Unwind_Resume(a1);
}

void sub_1B222906C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (*(char *)(v2 - 177) < 0) {
    operator delete(*(void **)(v2 - 200));
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B2229084()
{
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (*(char *)(v0 - 153) < 0) {
    JUMPOUT(0x1B2229838);
  }
  JUMPOUT(0x1B222983CLL);
}

void sub_1B22290B0()
{
}

void sub_1B22290C0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (*(char *)(v2 - 153) < 0) {
    operator delete(*(void **)(v2 - 176));
  }
  if (*(char *)(v2 - 177) < 0) {
    operator delete(*(void **)(v2 - 200));
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B22290EC(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 177) < 0) {
    operator delete(*(void **)(v2 - 200));
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B22290F4()
{
}

void sub_1B22290FC()
{
  MEMORY[0x1B3EA8670](v0, 0x10A1C406EFA2AE8);
  JUMPOUT(0x1B2229884);
}

void sub_1B2229124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (LOBYTE(STACK[0x258]) && SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (*(char *)(v70 - 153) < 0) {
    operator delete(*(void **)(v70 - 176));
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    JUMPOUT(0x1B2229848);
  }
  JUMPOUT(0x1B222984CLL);
}

void *quasar::PDecTranslator::engineType@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, quasar::PDecTranslator::ENGINE_TYPE);
}

BOOL quasar::PDecTranslator::IsLanguagePairSupported(quasar::SystemConfig *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TranslationModelInfo = quasar::SystemConfig::getTranslationModelInfo(a1);
  uint64_t v8 = TranslationModelInfo;
  uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  if (v9)
  {
    if ((void *)(TranslationModelInfo + 32) == std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*(void **)(TranslationModelInfo + 24), (void *)(TranslationModelInfo + 32), (unsigned __int8 **)a2))return 0; {
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
    }
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a3 + 8);
    }
    if (!v10) {
      return 1;
    }
    uint64_t v11 = *(unsigned __int8 *)(a4 + 23);
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(a4 + 8);
    }
    if (!v11) {
      return 1;
    }
    std::string::size_type v12 = (void *)(v8 + 72);
    long long v13 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v12, (unsigned __int8 *)a2);
    if (!v13
      || (uint64_t v14 = *((void *)v13 + 5),
          (long long v15 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v12, (unsigned __int8 *)a2)) == 0))
    {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v16 = *((void *)v15 + 6);
    std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&v25, (long long *)a3, (long long *)a4);
    uint64_t v17 = std::__find_impl[abi:ne180100]<std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>,std::__identity>(v14, v16, (unsigned __int8 **)&v25);
    long long v18 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v12, (unsigned __int8 *)a2);
    if (!v18) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v19 = *((void *)v18 + 6);
  }
  else
  {
    uint64_t v20 = *(unsigned __int8 *)(a3 + 23);
    if ((v20 & 0x80u) != 0) {
      uint64_t v20 = *(void *)(a3 + 8);
    }
    if (!v20) {
      return 1;
    }
    uint64_t v21 = *(unsigned __int8 *)(a4 + 23);
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = *(void *)(a4 + 8);
    }
    if (!v21) {
      return 1;
    }
    uint64_t v22 = *(void *)(TranslationModelInfo + 48);
    uint64_t v23 = *(void *)(TranslationModelInfo + 56);
    std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&v25, (long long *)a3, (long long *)a4);
    uint64_t v17 = std::__find_impl[abi:ne180100]<std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>,std::__identity>(v22, v23, (unsigned __int8 **)&v25);
    uint64_t v19 = *(void *)(v8 + 56);
  }
  if (v27 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return v17 != v19;
}

void sub_1B2229A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::PDecTranslator::PDecTranslator(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)a1 = &unk_1F0A529F0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 152) = 0;
  long long v15 = operator new(0x38uLL);
  v15[1] = 0;
  v15[2] = 0;
  void *v15 = &unk_1F0A5FD80;
  v15[5] = 0;
  v15[6] = 0;
  v15[3] = &unk_1F0A529A8;
  v15[4] = v15 + 5;
  *(void *)(a1 + 160) = v15 + 3;
  *(void *)(a1 + 168) = v15;
  if (quasar::PDecTranslator::IsLanguagePairSupported(a2, a3, a4, a5))
  {
    uint64_t TranslationModelInfo = quasar::SystemConfig::getTranslationModelInfo(a2);
    uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(TranslationModelInfo + 192), (unsigned __int8 *)a3);
    long long v18 = v17 + 40;
    if (!v17) {
      long long v18 = (unsigned __int8 *)a3;
    }
    if ((char)v18[23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v18, *((void *)v18 + 1));
    }
    else
    {
      *(_OWORD *)std::string __str = *(_OWORD *)v18;
      *(void *)&__str[16] = *((void *)v18 + 2);
    }
    uint64_t v19 = *(void *)(a10 + 8);
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    quasar::PDecTranslator::createGraph(a1, (uint64_t)a2, (uint64_t)__str, a4, a5);
  }
  uint64_t v20 = *(unsigned __int8 *)(a3 + 23);
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = *(void *)(a3 + 8);
  }
  if (!v20)
  {
    long long v58 = 0uLL;
    long long v59 = 0uLL;
    long long v56 = 0uLL;
    long long v57 = 0uLL;
    long long v54 = 0uLL;
    long long v55 = 0uLL;
    long long v52 = 0uLL;
    long long v53 = 0uLL;
    long long v50 = 0uLL;
    long long v51 = 0uLL;
    long long v48 = 0uLL;
    long long v49 = 0uLL;
    long long v46 = 0uLL;
    long long v47 = 0uLL;
    long long v45 = 0uLL;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Config file does not support language pair: ", 44);
    int v22 = *(char *)(a4 + 23);
    if (v22 >= 0) {
      uint64_t v23 = a4;
    }
    else {
      uint64_t v23 = *(void *)a4;
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v24 = *(void *)(a4 + 8);
    }
    std::string v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
    long long v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"-", 1);
    int v27 = *(char *)(a5 + 23);
    if (v27 >= 0) {
      uint64_t v28 = a5;
    }
    else {
      uint64_t v28 = *(void *)a5;
    }
    if (v27 >= 0) {
      uint64_t v29 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      uint64_t v29 = *(void *)(a5 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  long long v58 = 0uLL;
  long long v59 = 0uLL;
  long long v56 = 0uLL;
  long long v57 = 0uLL;
  long long v54 = 0uLL;
  long long v55 = 0uLL;
  long long v52 = 0uLL;
  long long v53 = 0uLL;
  long long v50 = 0uLL;
  long long v51 = 0uLL;
  long long v48 = 0uLL;
  long long v49 = 0uLL;
  long long v46 = 0uLL;
  long long v47 = 0uLL;
  long long v45 = 0uLL;
  memset(__str, 0, sizeof(__str));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
  std::string::size_type v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Config file does not support language pair: ", 44);
  int v31 = *(char *)(a4 + 23);
  if (v31 >= 0) {
    uint64_t v32 = a4;
  }
  else {
    uint64_t v32 = *(void *)a4;
  }
  if (v31 >= 0) {
    uint64_t v33 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v33 = *(void *)(a4 + 8);
  }
  long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
  long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"-", 1);
  int v36 = *(char *)(a5 + 23);
  if (v36 >= 0) {
    uint64_t v37 = a5;
  }
  else {
    uint64_t v37 = *(void *)a5;
  }
  if (v36 >= 0) {
    uint64_t v38 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    uint64_t v38 = *(void *)(a5 + 8);
  }
  std::string v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
  std::string v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" for task: ", 11);
  int v41 = *(char *)(a3 + 23);
  if (v41 >= 0) {
    uint64_t v42 = a3;
  }
  else {
    uint64_t v42 = *(void *)a3;
  }
  if (v41 >= 0) {
    uint64_t v43 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v43 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
}

{
  quasar::PDecTranslator::PDecTranslator(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1B2229EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  int v27 = *(std::__shared_weak_count **)(v24 + 168);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (*(char *)(v24 + 159) < 0) {
    operator delete(*v25);
  }
  if (*(char *)(v24 + 135) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v24 + 111) < 0) {
    operator delete(*a13);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a15);
  if (*(char *)(v24 + 47) < 0) {
    operator delete(*a14);
  }
  uint64_t v28 = *(void *)(v24 + 8);
  *(void *)(v24 + 8) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v24);
  _Unwind_Resume(a1);
}

void quasar::PDecTranslator::translate(uint64_t a1@<X0>, const std::string **a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  quasar::TranslationPhraseInternal::TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v28);
  v28[128] = a5;
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  if (*a2 != v11)
  {
    do
    {
      long long v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      memset(&v16, 0, sizeof(v16));
      __int16 v17 = 0;
      uint64_t v21 = 3212836864;
      int v22 = -1;
      long long v23 = 0u;
      long long v24 = 0u;
      long long __p = 0u;
      uint64_t v26 = 0;
      uint64_t v27 = -1;
      std::string::operator=(&v16, v10);
      LOBYTE(v17) = 1;
      std::string::size_type v12 = v30;
      if ((unint64_t)v30 >= v31)
      {
        long long v13 = (std::string *)std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)&v29, (const quasar::TranslationTokenInternal *)&v16);
      }
      else
      {
        quasar::TranslationTokenInternal::TranslationTokenInternal(v30, (const quasar::TranslationTokenInternal *)&v16);
        long long v13 = (std::string *)((char *)v12 + 136);
      }
      std::string::size_type v30 = v13;
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (SBYTE7(v24) < 0) {
        operator delete((void *)v23);
      }
      if (v18)
      {
        uint64_t v19 = v18;
        operator delete(v18);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      ++v10;
    }
    while (v10 != v11);
  }
  if (v29 != v30) {
    v30[-5].__r_.__value_.__s.__data_[8] = 0;
  }
  quasar::PDecTranslator::translate(a1, (uint64_t)v28, a3, a4, a6);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v28);
}

void sub_1B222A158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void quasar::PDecTranslator::translate(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  char v131 = a3;
  std::chrono::steady_clock::now();
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  LODWORD(v112[0]) = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)v112);
  uint64_t v132 = boost::uuids::random_generator_pure::operator()((uint64_t)v112);
  uint64_t v133 = v9;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)v112);
  uint64_t v10 = operator new(0x28uLL);
  unint64_t v129 = (void **)v10;
  long long v130 = xmmword_1B25A2C30;
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  *(void *)((char *)v10 + 29) = 0;
  boost::uuids::to_chars<char *>((uint64_t)&v132, v10);
  if (quasar::gLogLevel >= 4)
  {
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v115 = 0u;
    *(_OWORD *)long long v116 = 0u;
    long long v113 = 0u;
    *(_OWORD *)long long v114 = 0u;
    *(_OWORD *)long long v112 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v112);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"EngineTranslationId: ", 21);
    if (v130 >= 0) {
      std::string::size_type v12 = (void **)&v129;
    }
    else {
      std::string::size_type v12 = v129;
    }
    if (v130 >= 0) {
      uint64_t v13 = HIBYTE(v130);
    }
    else {
      uint64_t v13 = v130;
    }
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" started, braneVersion: ", 24);
    quasar::git_version::get(&__p);
    if ((v104 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v104 & 0x80u) == 0) {
      uint64_t v17 = v104;
    }
    else {
      uint64_t v17 = v103;
    }
    long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, v17);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", modelVersion: ", 16);
    int v20 = *(char *)(a1 + 111);
    if (v20 >= 0) {
      uint64_t v21 = a1 + 88;
    }
    else {
      uint64_t v21 = *(void *)(a1 + 88);
    }
    if (v20 >= 0) {
      uint64_t v22 = *(unsigned __int8 *)(a1 + 111);
    }
    else {
      uint64_t v22 = *(void *)(a1 + 96);
    }
    long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
    long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", taskId: ", 10);
    int v25 = *(char *)(a1 + 47);
    if (v25 >= 0) {
      uint64_t v26 = a1 + 24;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 24);
    }
    if (v25 >= 0) {
      uint64_t v27 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v27 = *(void *)(a1 + 32);
    }
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", sourceLocale: ", 16);
    int v30 = *(char *)(a1 + 135);
    if (v30 >= 0) {
      uint64_t v31 = a1 + 112;
    }
    else {
      uint64_t v31 = *(void *)(a1 + 112);
    }
    if (v30 >= 0) {
      uint64_t v32 = *(unsigned __int8 *)(a1 + 135);
    }
    else {
      uint64_t v32 = *(void *)(a1 + 120);
    }
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
    long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", targetLocale: ", 16);
    int v35 = *(char *)(a1 + 159);
    if (v35 >= 0) {
      uint64_t v36 = a1 + 136;
    }
    else {
      uint64_t v36 = *(void *)(a1 + 136);
    }
    if (v35 >= 0) {
      uint64_t v37 = *(unsigned __int8 *)(a1 + 159);
    }
    else {
      uint64_t v37 = *(void *)(a1 + 144);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
    if ((char)v104 < 0) {
      operator delete(__p);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v112);
    if (quasar::gLogLevel >= 5)
    {
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v123 = 0u;
      long long v124 = 0u;
      long long v121 = 0u;
      long long v122 = 0u;
      long long v119 = 0u;
      long long v120 = 0u;
      long long v117 = 0u;
      long long v118 = 0u;
      long long v115 = 0u;
      *(_OWORD *)long long v116 = 0u;
      long long v113 = 0u;
      *(_OWORD *)long long v114 = 0u;
      *(_OWORD *)long long v112 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v112);
      uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"EngineTranslationId: ", 21);
      if (v130 >= 0) {
        std::string v39 = (void **)&v129;
      }
      else {
        std::string v39 = v129;
      }
      if (v130 >= 0) {
        uint64_t v40 = HIBYTE(v130);
      }
      else {
        uint64_t v40 = v130;
      }
      int v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
      uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", entry: ", 9);
      uint64_t v43 = quasar::operator<<(v42, a2);
      std::string v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", options: ", 11);
      quasar::operator<<(v44);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v112);
    }
  }
  quasar::getOverridesFromTranslationOptions(&v131, (uint64_t *)&v110);
  uint64_t v45 = *((void *)&v110 + 1);
  for (uint64_t i = v110; i != v45; i += 24)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 48), (unsigned __int8 *)i)&& quasar::gLogLevel >= 4)
    {
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v123 = 0u;
      long long v124 = 0u;
      long long v121 = 0u;
      long long v122 = 0u;
      long long v119 = 0u;
      long long v120 = 0u;
      long long v117 = 0u;
      long long v118 = 0u;
      long long v115 = 0u;
      *(_OWORD *)long long v116 = 0u;
      long long v113 = 0u;
      *(_OWORD *)long long v114 = 0u;
      *(_OWORD *)long long v112 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v112);
      long long v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"Task: ", 6);
      int v48 = *(char *)(a1 + 47);
      if (v48 >= 0) {
        uint64_t v49 = a1 + 24;
      }
      else {
        uint64_t v49 = *(void *)(a1 + 24);
      }
      if (v48 >= 0) {
        uint64_t v50 = *(unsigned __int8 *)(a1 + 47);
      }
      else {
        uint64_t v50 = *(void *)(a1 + 32);
      }
      long long v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
      long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" doesn't support override '", 27);
      int v53 = *(char *)(i + 23);
      if (v53 >= 0) {
        uint64_t v54 = i;
      }
      else {
        uint64_t v54 = *(void *)i;
      }
      if (v53 >= 0) {
        uint64_t v55 = *(unsigned __int8 *)(i + 23);
      }
      else {
        uint64_t v55 = *(void *)(i + 8);
      }
      long long v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"'", 1);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v112);
    }
  }
  int v57 = *(_DWORD *)(a1 + 16);
  quasar::TranslationPhraseInternal::TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&__p);
  if (v57 == 0x7FFFFFFF
    || (uint64_t v108 = *(void *)(a2 + 160),
        long long __p = *(void **)a2,
        LOBYTE(v103) = *(unsigned char *)(a2 + 8),
        quasar::MetaInfo::operator=((uint64_t)&v109, a2 + 192),
        uint64_t v59 = *(void *)(a2 + 136),
        uint64_t v58 = *(void *)(a2 + 144),
        v59 == v58))
  {
LABEL_76:
    int v67 = 0;
    long long v68 = (void **)a2;
    uint64_t v69 = a4;
  }
  else
  {
    int v60 = 0;
    while (1)
    {
      if (*(char *)(v59 + 23) < 0) {
        uint64_t v61 = *(void *)(v59 + 8);
      }
      else {
        LODWORD(v61) = *(unsigned __int8 *)(v59 + 23);
      }
      uint64_t v62 = v106;
      if ((unint64_t)v106 >= v107)
      {
        char v63 = (std::string *)std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>(&v105, (const quasar::TranslationTokenInternal *)v59);
      }
      else
      {
        quasar::TranslationTokenInternal::TranslationTokenInternal(v106, (const quasar::TranslationTokenInternal *)v59);
        char v63 = (std::string *)((char *)v62 + 136);
      }
      long long v106 = v63;
      int v64 = *(_DWORD *)(a1 + 16);
      BOOL v65 = __OFSUB__(v64, v61 + v60);
      int v66 = v64 - (v61 + v60);
      if ((v66 < 0) ^ v65 | (v66 == 0)) {
        break;
      }
      v60 += v61 + *(unsigned __int8 *)(v59 + 24);
      v59 += 136;
      if (v59 == v58) {
        goto LABEL_76;
      }
    }
    if (*(char *)(v59 + 23) < 0) {
      uint64_t v88 = *(void *)(v59 + 8);
    }
    else {
      LODWORD(v88) = *(unsigned __int8 *)(v59 + 23);
    }
    uint64_t v69 = a4;
    quasar::truncateUtf8((std::string *)v59, v66 + v88, (std::string *)v112);
    uint64_t v89 = &v106[-6].__r_.__value_.__s.__data_[8];
    if (v106[-5].__r_.__value_.__s.__data_[7] < 0) {
      operator delete(*(void **)v89);
    }
    long long v90 = *(_OWORD *)v112;
    *((void *)v89 + 2) = v113;
    *(_OWORD *)uint64_t v89 = v90;
    v106[-5].__r_.__value_.__s.__data_[8] = 0;
    long long v68 = &__p;
    int v67 = 1;
  }
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v70 = std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(&v99, (const quasar::TranslationPhraseInternal *)v68);
  long long v71 = *(void **)(a1 + 8);
  uint64_t v100 = v70;
  v112[0] = 0;
  v112[1] = 0;
  *(void *)&long long v113 = 0;
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v112, v99, v70, 0x8F5C28F5C28F5C29 * ((v70 - v99) >> 3));
  long long v95 = v110;
  uint64_t v96 = v111;
  uint64_t v111 = 0;
  long long v110 = 0uLL;
  char v97 = 1;
  quasar::ProcessingGraph::run(v71, (uint64_t *)v112, &v95);
  if (v97)
  {
    v93[0] = &v95;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v93);
  }
  v93[0] = v112;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)v93);
  if (v69)
  {
    uint64_t v72 = (void **)v98;
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v112, (quasar::TranslationPhraseInternal *)a2);
    quasar::formatNBestlist(v72, (uint64_t)v112, v69);
    if (SBYTE7(v113) < 0) {
      operator delete(v112[0]);
    }
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v73 = *v98;
  if (*v98 != v98[1])
  {
    if (v67)
    {
      uint64_t v74 = quasar::MetaInfo::get((quasar::MetaInfo *)(v73 + 24));
      std::string::basic_string[abi:ne180100]<0>(v93, "status");
      std::string::basic_string[abi:ne180100]<0>(v91, "input_truncated");
      quasar::PTree::PTree(v112, v91);
      quasar::PTree::putChild(v74, (uint64_t)v93, (uint64_t)v112, 1);
      quasar::PTree::~PTree((quasar::PTree *)v112);
      if (v92 < 0) {
        operator delete(v91[0]);
      }
      if ((char)v94 < 0) {
        operator delete(v93[0]);
      }
    }
    quasar::TranslationPhraseInternal::convertToExternal(v73, (uint64_t)v112);
  }
  if (quasar::gLogLevel > 4)
  {
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v115 = 0u;
    *(_OWORD *)long long v116 = 0u;
    long long v113 = 0u;
    *(_OWORD *)long long v114 = 0u;
    *(_OWORD *)long long v112 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v112);
    long long v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"EngineTranslationId: ", 21);
    if (v130 >= 0) {
      uint64_t v76 = (void **)&v129;
    }
    else {
      uint64_t v76 = v129;
    }
    if (v130 >= 0) {
      uint64_t v77 = HIBYTE(v130);
    }
    else {
      uint64_t v77 = v130;
    }
    uint64_t v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
    uint64_t v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)", output: [", 11);
    v91[0] = ",";
    v91[1] = (void *)1;
    quasar::join<std::vector<quasar::TranslationPhrase>>(a5, (uint64_t *)v91);
    if ((v94 & 0x80u) == 0) {
      uint64_t v80 = v93;
    }
    else {
      uint64_t v80 = (void **)v93[0];
    }
    if ((v94 & 0x80u) == 0) {
      uint64_t v81 = v94;
    }
    else {
      uint64_t v81 = (uint64_t)v93[1];
    }
    uint64_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"]", 1);
    if ((char)v94 < 0) {
      operator delete(v93[0]);
    }
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v112);
  }
  std::chrono::steady_clock::now();
  if (quasar::gLogLevel >= 4)
  {
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v115 = 0u;
    *(_OWORD *)long long v116 = 0u;
    long long v113 = 0u;
    *(_OWORD *)long long v114 = 0u;
    *(_OWORD *)long long v112 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v112);
    uint64_t v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"EngineTranslationId: ", 21);
    if (v130 >= 0) {
      long long v84 = (void **)&v129;
    }
    else {
      long long v84 = v129;
    }
    if (v130 >= 0) {
      uint64_t v85 = HIBYTE(v130);
    }
    else {
      uint64_t v85 = v130;
    }
    uint64_t v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v84, v85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" finished, took: ", 17);
    uint64_t v87 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"ms", 2);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v112);
  }
  std::unique_ptr<quasar::ProcessingBlock::ValueType>::reset[abi:ne180100]((void ***)&v98, 0);
  v112[0] = &v99;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)v112);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&__p);
  v112[0] = &v110;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v112);
  if (SHIBYTE(v130) < 0) {
    operator delete(v129);
  }
}

void sub_1B222AB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p)
{
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&a26);
  long long __p = &a51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v55 - 121) < 0) {
    operator delete(*(void **)(v55 - 144));
  }
  _Unwind_Resume(a1);
}

void quasar::PDecTranslator::translate(uint64_t a1@<X0>, const quasar::TranslationPhrase *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  quasar::TranslationPhrase::TranslationPhrase((quasar::TranslationPhrase *)v9, a2);
  quasar::TranslationPhraseInternal::TranslationPhraseInternal(v17, v9);
  quasar::PDecTranslator::translate(a1, (uint64_t)v17, a3, a4, a5);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v17);
  if (v16[24])
  {
    long long v18 = (void **)v16;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
  if (v15 && v14 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  long long v18 = (void **)&v10;
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100](&v18);
}

void sub_1B222ADE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t boost::uuids::random_generator_pure::operator()(uint64_t a1)
{
  v2[2] = *MEMORY[0x1E4F143B8];
  boost::uuids::detail::random_provider_base::get_random_bytes(a1, (char *)v2, 0x10uLL);
  BYTE6(v2[0]) = BYTE6(v2[0]) & 0xF | 0x40;
  return v2[0];
}

void quasar::PDecTranslator::translate(uint64_t a1, quasar::TranslationPhrase **a2, unsigned __int8 a3, uint64_t a4)
{
  void v12[3] = *MEMORY[0x1E4F143B8];
  std::pair<std::string const,std::vector<quasar::TranslationPhrase>>::pair[abi:ne180100]<char const* const&,std::vector<quasar::TranslationPhrase> const&,0>(__p, &quasar::ProcessingBlock::DEFAULT_INPUT_NAME, a2);
  std::map<std::string,std::vector<quasar::TranslationPhrase>>::map[abi:ne180100]((uint64_t)v7, (const void **)__p, 1);
  (*(void (**)(uint64_t, unsigned char *, void, uint64_t))(*(void *)a1 + 40))(a1, v7, a3, a4);
  std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy((uint64_t)v7, v8);
  uint64_t v9 = (void **)v12;
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B222AF74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  int v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy((uint64_t)va, v5);
  std::pair<std::string const,std::vector<quasar::TranslationPhrase>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::vector<quasar::TranslationPhrase>>::~pair(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void quasar::PDecTranslator::translate(uint64_t a1@<X0>, const void ***a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  char v122 = a3;
  std::chrono::steady_clock::now();
  uint64_t v123 = 0;
  uint64_t v124 = 0;
  LODWORD(v103) = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v103);
  uint64_t v123 = boost::uuids::random_generator_pure::operator()((uint64_t)&v103);
  uint64_t v124 = v7;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v103);
  uint64_t v8 = operator new(0x28uLL);
  long long v120 = (void **)v8;
  long long v121 = xmmword_1B25A2C30;
  *uint64_t v8 = 0u;
  v8[1] = 0u;
  *(void *)((char *)v8 + 29) = 0;
  boost::uuids::to_chars<char *>((uint64_t)&v123, v8);
  if (quasar::gLogLevel >= 4)
  {
    long long v118 = 0u;
    long long v119 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v103 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"EngineTranslationId: ", 21);
    if (v121 >= 0) {
      uint64_t v10 = (void **)&v120;
    }
    else {
      uint64_t v10 = v120;
    }
    if (v121 >= 0) {
      uint64_t v11 = HIBYTE(v121);
    }
    else {
      uint64_t v11 = v121;
    }
    char v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" started, braneVersion: ", 24);
    quasar::git_version::get(&__p);
    if (v102 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (long long *)__p;
    }
    if (v102 >= 0) {
      uint64_t v15 = HIBYTE(v102);
    }
    else {
      uint64_t v15 = *((void *)&__p + 1);
    }
    std::string v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, v15);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", modelVersion: ", 16);
    int v18 = *(char *)(a1 + 111);
    if (v18 >= 0) {
      uint64_t v19 = a1 + 88;
    }
    else {
      uint64_t v19 = *(void *)(a1 + 88);
    }
    if (v18 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 111);
    }
    else {
      uint64_t v20 = *(void *)(a1 + 96);
    }
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", taskId: ", 10);
    int v23 = *(char *)(a1 + 47);
    if (v23 >= 0) {
      uint64_t v24 = a1 + 24;
    }
    else {
      uint64_t v24 = *(void *)(a1 + 24);
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v25 = *(void *)(a1 + 32);
    }
    uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", sourceLocale: ", 16);
    int v28 = *(char *)(a1 + 135);
    if (v28 >= 0) {
      uint64_t v29 = a1 + 112;
    }
    else {
      uint64_t v29 = *(void *)(a1 + 112);
    }
    if (v28 >= 0) {
      uint64_t v30 = *(unsigned __int8 *)(a1 + 135);
    }
    else {
      uint64_t v30 = *(void *)(a1 + 120);
    }
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
    uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", targetLocale: ", 16);
    int v33 = *(char *)(a1 + 159);
    if (v33 >= 0) {
      uint64_t v34 = a1 + 136;
    }
    else {
      uint64_t v34 = *(void *)(a1 + 136);
    }
    if (v33 >= 0) {
      uint64_t v35 = *(unsigned __int8 *)(a1 + 159);
    }
    else {
      uint64_t v35 = *(void *)(a1 + 144);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
    if (SHIBYTE(v102) < 0) {
      operator delete((void *)__p);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v103);
    if (quasar::gLogLevel >= 5)
    {
      long long v118 = 0u;
      long long v119 = 0u;
      long long v116 = 0u;
      long long v117 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      long long v104 = 0u;
      long long v105 = 0u;
      long long v103 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
      uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"EngineTranslationId: ", 21);
      if (v121 >= 0) {
        uint64_t v37 = (void **)&v120;
      }
      else {
        uint64_t v37 = v120;
      }
      if (v121 >= 0) {
        uint64_t v38 = HIBYTE(v121);
      }
      else {
        uint64_t v38 = v121;
      }
      std::string v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
      uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", input: ", 9);
      quasar::translateInputMapToString(a2);
      if (v102 >= 0) {
        int v41 = &__p;
      }
      else {
        int v41 = (long long *)__p;
      }
      if (v102 >= 0) {
        uint64_t v42 = HIBYTE(v102);
      }
      else {
        uint64_t v42 = *((void *)&__p + 1);
      }
      uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
      std::string v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", options: ", 11);
      quasar::operator<<(v44);
      if (SHIBYTE(v102) < 0) {
        operator delete((void *)__p);
      }
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v103);
    }
  }
  uint64_t v81 = a5;
  quasar::getOverridesFromTranslationOptions(&v122, (uint64_t *)&__p);
  uint64_t v45 = *((void *)&__p + 1);
  for (uint64_t i = __p; i != v45; i += 24)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 48), (unsigned __int8 *)i)&& quasar::gLogLevel >= 4)
    {
      long long v118 = 0u;
      long long v119 = 0u;
      long long v116 = 0u;
      long long v117 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      long long v104 = 0u;
      long long v105 = 0u;
      long long v103 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
      long long v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"Task: ", 6);
      int v48 = *(char *)(a1 + 47);
      if (v48 >= 0) {
        uint64_t v49 = a1 + 24;
      }
      else {
        uint64_t v49 = *(void *)(a1 + 24);
      }
      if (v48 >= 0) {
        uint64_t v50 = *(unsigned __int8 *)(a1 + 47);
      }
      else {
        uint64_t v50 = *(void *)(a1 + 32);
      }
      long long v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
      long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" doesn't support override '", 27);
      int v53 = *(char *)(i + 23);
      if (v53 >= 0) {
        uint64_t v54 = i;
      }
      else {
        uint64_t v54 = *(void *)i;
      }
      if (v53 >= 0) {
        uint64_t v55 = *(unsigned __int8 *)(i + 23);
      }
      else {
        uint64_t v55 = *(void *)(i + 8);
      }
      long long v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"'", 1);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v103);
    }
  }
  v100[0] = 0;
  v100[1] = 0;
  uint64_t v99 = (uint64_t *)v100;
  int v57 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      uint64_t v59 = (const quasar::TranslationPhrase *)v57[7];
      for (uint64_t j = (const quasar::TranslationPhrase *)v57[8];
            v59 != j;
            uint64_t v59 = (const quasar::TranslationPhrase *)((char *)v59 + 136))
      {
        v85[0] = v57 + 4;
        int v60 = std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v99, v57 + 4, (uint64_t)&std::piecewise_construct, (long long **)v85);
        quasar::TranslationPhrase::TranslationPhrase((quasar::TranslationPhrase *)v91, v59);
        quasar::TranslationPhraseInternal::TranslationPhraseInternal(&v103, v91);
        unint64_t v61 = v60[8];
        if (v61 >= v60[9])
        {
          uint64_t v62 = std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal>(v60 + 7, (uint64_t *)&v103);
        }
        else
        {
          quasar::TranslationPhraseInternal::TranslationPhraseInternal(v60[8], (uint64_t *)&v103);
          uint64_t v62 = v61 + 200;
          v60[8] = v61 + 200;
        }
        v60[8] = v62;
        quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v103);
        if (v98[24])
        {
          v85[0] = v98;
          std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v85);
        }
        if (v97 && v96 < 0) {
          operator delete(v95);
        }
        if (v94 < 0) {
          operator delete(v93);
        }
        v85[0] = &v92;
        std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v85);
      }
      char v63 = (const void **)v57[1];
      if (v63)
      {
        do
        {
          int v64 = (const void ***)v63;
          char v63 = (const void **)*v63;
        }
        while (v63);
      }
      else
      {
        do
        {
          int v64 = (const void ***)v57[2];
          BOOL v65 = *v64 == v57;
          int v57 = (const void **)v64;
        }
        while (!v65);
      }
      int v57 = (const void **)v64;
    }
    while (v64 != a2 + 1);
  }
  int v66 = *(void **)(a1 + 8);
  long long v87 = __p;
  uint64_t v88 = v102;
  long long __p = 0uLL;
  uint64_t v102 = 0;
  char v89 = 1;
  quasar::ProcessingGraph::run(v66, (const void ***)&v99, &v87);
  if (v89)
  {
    *(void *)&long long v103 = &v87;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  }
  if (a4)
  {
    int v67 = (void **)v90;
    std::string::basic_string[abi:ne180100]<0>(&v103, "__NONE__");
    quasar::formatNBestlist(v67, (uint64_t)&v103, a4);
    if (SBYTE7(v104) < 0) {
      operator delete((void *)v103);
    }
  }
  *uint64_t v81 = 0;
  v81[1] = 0;
  v81[2] = 0;
  if (*v90 != v90[1]) {
    quasar::TranslationPhraseInternal::convertToExternal(*v90, (uint64_t)&v103);
  }
  if (quasar::gLogLevel > 4)
  {
    long long v118 = 0u;
    long long v119 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v103 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
    long long v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"EngineTranslationId: ", 21);
    if (v121 >= 0) {
      uint64_t v69 = (void **)&v120;
    }
    else {
      uint64_t v69 = v120;
    }
    if (v121 >= 0) {
      uint64_t v70 = HIBYTE(v121);
    }
    else {
      uint64_t v70 = v121;
    }
    long long v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
    uint64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)", output: [", 11);
    v84[0] = (uint64_t)",";
    v84[1] = 1;
    quasar::join<std::vector<quasar::TranslationPhrase>>(v81, v84);
    if ((v86 & 0x80u) == 0) {
      uint64_t v73 = v85;
    }
    else {
      uint64_t v73 = (void **)v85[0];
    }
    if ((v86 & 0x80u) == 0) {
      uint64_t v74 = v86;
    }
    else {
      uint64_t v74 = (uint64_t)v85[1];
    }
    long long v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"]", 1);
    if ((char)v86 < 0) {
      operator delete(v85[0]);
    }
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v103);
  }
  std::chrono::steady_clock::now();
  if (quasar::gLogLevel >= 4)
  {
    long long v118 = 0u;
    long long v119 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v103 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
    uint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"EngineTranslationId: ", 21);
    if (v121 >= 0) {
      uint64_t v77 = (void **)&v120;
    }
    else {
      uint64_t v77 = v120;
    }
    if (v121 >= 0) {
      uint64_t v78 = HIBYTE(v121);
    }
    else {
      uint64_t v78 = v121;
    }
    uint64_t v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v77, v78);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" finished, took: ", 17);
    uint64_t v80 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"ms", 2);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v103);
  }
  std::unique_ptr<quasar::ProcessingBlock::ValueType>::reset[abi:ne180100]((void ***)&v90, 0);
  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy((uint64_t)&v99, v100[0]);
  *(void *)&long long v103 = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  if (SHIBYTE(v121) < 0) {
    operator delete(v120);
  }
}

void sub_1B222B904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
  if (*(char *)(v63 - 129) < 0) {
    operator delete(*(void **)(v63 - 152));
  }
  _Unwind_Resume(a1);
}

void quasar::PDecTranslator::PDecCompilationContext::~PDecCompilationContext(quasar::PDecTranslator::PDecCompilationContext *this)
{
  *(void *)this = &unk_1F0A529A8;
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A529A8;
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
  JUMPOUT(0x1B3EA8670);
}

void quasar::PDecTranslator::~PDecTranslator(quasar::PDecTranslator *this)
{
  quasar::PDecTranslator::~PDecTranslator(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F0A529F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 48);
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  quasar::Bitmap::~Bitmap(this);
}

uint64_t quasar::PDecTranslator::getCompilationContext@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 168);
  *a2 = *(void *)(this + 160);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

boost::uuids::detail::random_provider_base *boost::uuids::detail::random_provider_base::random_provider_base(boost::uuids::detail::random_provider_base *this)
{
  *(_DWORD *)this = -1;
  int v2 = open("/dev/urandom", 0x1000000);
  *(_DWORD *)this = v2;
  if (v2 == -1)
  {
    uint64_t v4 = *__error();
    std::string::basic_string[abi:ne180100]<0>(&v7, "open /dev/urandom");
    int v5 = std::runtime_error::runtime_error(&v8, &v7);
    v8.__vftable = (std::runtime_error_vtbl *)&unk_1F0A46FC8;
    uint64_t v9 = v4;
    v6[0] = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Devel"
            "oper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/boost/uuid/detai"
            "l/random_provider_posix.ipp";
    v6[1] = "boost::uuids::detail::random_provider_base::random_provider_base()";
    void v6[2] = 60;
    boost::throw_exception<boost::uuids::entropy_error>((uint64_t)v5, (uint64_t)v6);
  }
  return this;
}

void sub_1B222BC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::runtime_error::~runtime_error((std::runtime_error *)(v18 - 40));
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::uuids::entropy_error>(uint64_t a1, uint64_t a2)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept(exception, a1, a2);
}

void sub_1B222BD14(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  *(void *)a1 = &unk_1F0A46DF8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  uint64_t v6 = a2[1].__vftable;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &unk_1F0A46B98;
  *(void *)(a1 + 8) = &unk_1F0A46BC8;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = &unk_1F0A46BF8;
  *(_DWORD *)(a1 + 64) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 48) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void boost::wrapexcept<boost::uuids::entropy_error>::clone()
{
}

void sub_1B222C020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::uuids::entropy_error>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B222C0E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 24) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t boost::uuids::entropy_error::errcode(boost::uuids::entropy_error *this)
{
  return *((void *)this + 2);
}

void non-virtual thunk to'boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
}

{
  uint64_t vars8;

  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
  JUMPOUT(0x1B3EA8670);
}

void boost::uuids::entropy_error::~entropy_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A46DF8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1F0A46FC8;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_1F0A47040;
  *(void *)(a1 + 40) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)a1 = &unk_1F0A46B98;
  *(void *)(a1 + 8) = &unk_1F0A46BC8;
  *(void *)(a1 + 32) = &unk_1F0A46BF8;
  return a1;
}

void sub_1B222C478(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::uuids::detail::random_provider_base::get_random_bytes(uint64_t this, char *a2, unint64_t a3)
{
  if (a3)
  {
    long long v5 = (int *)this;
    unint64_t v6 = 0;
    do
    {
      this = read(*v5, &a2[v6], a3 - v6);
      if (this < 0)
      {
        this = (uint64_t)__error();
        if (*(_DWORD *)this != 4)
        {
          uint64_t v7 = *(int *)this;
          std::string::basic_string[abi:ne180100]<0>(&v9, "read");
          std::runtime_error::runtime_error(&v10, &v9);
          v10.__vftable = (std::runtime_error_vtbl *)&unk_1F0A46FC8;
          uint64_t v11 = v7;
          v8[0] = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents"
                  "/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/boos"
                  "t/uuid/detail/random_provider_posix.ipp";
          v8[1] = "void boost::uuids::detail::random_provider_base::get_random_bytes(void *, std::size_t)";
          v8[2] = 98;
          boost::throw_exception<boost::uuids::entropy_error>((uint64_t)&v10, (uint64_t)v8);
        }
      }
      else
      {
        v6 += this;
      }
    }
    while (v6 < a3);
  }
  return this;
}

void sub_1B222C574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::uuids::detail::random_provider_base::destroy(boost::uuids::detail::random_provider_base *this)
{
  uint64_t result = *(unsigned int *)this;
  if ((result & 0x80000000) == 0) {
    return close(result);
  }
  return result;
}

unsigned char *boost::uuids::to_chars<char *>(uint64_t a1, unsigned char *a2)
{
  for (unint64_t i = 0; i != 16; ++i)
  {
    uint64_t v3 = a2;
    if (*(unsigned __int8 *)(a1 + i) >= 0xA0u) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    *a2 = v4 + (*(unsigned char *)(a1 + i) >> 4);
    a2 += 2;
    unsigned int v5 = *(unsigned char *)(a1 + i) & 0xF;
    if (v5 >= 0xA) {
      char v6 = 87;
    }
    else {
      char v6 = 48;
    }
    v3[1] = v6 + v5;
    if (i <= 9 && ((1 << i) & 0x2A8) != 0)
    {
      a2 = v3 + 3;
      v3[2] = 45;
    }
  }
  return a2;
}

void *std::pair<std::string const,std::vector<quasar::TranslationPhrase>>::pair[abi:ne180100]<char const* const&,std::vector<quasar::TranslationPhrase> const&,0>(void *a1, char **a2, quasar::TranslationPhrase **a3)
{
  unsigned int v5 = (quasar::TranslationPhrase *)std::string::basic_string[abi:ne180100]<0>(a1, *a2);
  *((void *)v5 + 3) = 0;
  *((void *)v5 + 4) = 0;
  unsigned int v5 = (quasar::TranslationPhrase *)((char *)v5 + 24);
  *((void *)v5 + 2) = 0;
  std::vector<quasar::TranslationPhrase>::__init_with_size[abi:ne180100]<quasar::TranslationPhrase*,quasar::TranslationPhrase*>(v5, *a3, a3[1], 0xF0F0F0F0F0F0F0F1 * ((a3[1] - *a3) >> 3));
  return a1;
}

void sub_1B222C690(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

quasar::TranslationPhrase *std::vector<quasar::TranslationPhrase>::__init_with_size[abi:ne180100]<quasar::TranslationPhrase*,quasar::TranslationPhrase*>(quasar::TranslationPhrase *result, quasar::TranslationPhrase *a2, quasar::TranslationPhrase *a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<quasar::TranslationTokenInternal>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*,quasar::TranslationPhrase*,quasar::TranslationPhrase*>((uint64_t)v6 + 16, a2, a3, *((quasar::TranslationPhrase **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_1B222C714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

quasar::TranslationPhrase *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*,quasar::TranslationPhrase*,quasar::TranslationPhrase*>(uint64_t a1, quasar::TranslationPhrase *a2, quasar::TranslationPhrase *a3, quasar::TranslationPhrase *this)
{
  char v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    char v6 = a2;
    do
    {
      quasar::TranslationPhrase::TranslationPhrase(v4, v6);
      char v6 = (const quasar::TranslationPhrase *)((char *)v6 + 136);
      char v4 = (quasar::TranslationPhrase *)((char *)v11 + 136);
      uint64_t v11 = (quasar::TranslationPhrase *)((char *)v11 + 136);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B222C7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const* const&>(uint64_t *a1, char **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, *a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  return v11;
}

void sub_1B222C9A0(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *quasar::joinToStream<std::vector<quasar::TranslationPhrase>>(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    char v6 = result;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      }
      uint64_t result = quasar::operator<<(v6, v3);
      char v7 = 0;
      v3 += 136;
    }
    while (v3 != v4);
  }
  return result;
}

void std::vector<std::unique_ptr<quasar::TranslatorOptions>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<quasar::TranslatorOptions>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<quasar::TranslatorOptions>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  int v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 24))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t std::vector<std::unique_ptr<quasar::TranslatorOptions>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::TranslatorOptions>>,std::reverse_iterator<std::unique_ptr<quasar::TranslatorOptions>*>,std::reverse_iterator<std::unique_ptr<quasar::TranslatorOptions>*>,std::reverse_iterator<std::unique_ptr<quasar::TranslatorOptions>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::TranslatorOptions>>,std::reverse_iterator<std::unique_ptr<quasar::TranslatorOptions>*>,std::reverse_iterator<std::unique_ptr<quasar::TranslatorOptions>*>,std::reverse_iterator<std::unique_ptr<quasar::TranslatorOptions>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  std::locale v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::TranslatorOptions>>,std::reverse_iterator<std::unique_ptr<quasar::TranslatorOptions>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::TranslatorOptions>>,std::reverse_iterator<std::unique_ptr<quasar::TranslatorOptions>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::TranslatorOptions>>,std::reverse_iterator<std::unique_ptr<quasar::TranslatorOptions>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::TranslatorOptions>>,std::reverse_iterator<std::unique_ptr<quasar::TranslatorOptions>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  int v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 24))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<quasar::TranslatorOptions>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<quasar::TranslatorOptions>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 24))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t *std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__emplace_hint_unique_key_args<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec> const&>(uint64_t **a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  uint64_t v6 = std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__find_equal<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    uint64_t v9 = a4[1];
    v7[4] = *a4;
    void v7[5] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__find_equal<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, void *a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 != a2 && !(*(unsigned int (**)(void, uint64_t))(*(void *)*a5 + 40))(*a5, a2[4]))
  {
    if (!(*(unsigned int (**)(uint64_t, void))(*(void *)a2[4] + 40))(a2[4], *a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      char v14 = (uint64_t *)a2[1];
      do
      {
        long long v15 = v14;
        char v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        long long v15 = (uint64_t *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!(*(unsigned int (**)(void, uint64_t))(*(void *)*a5 + 40))(*a5, v15[4])) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    char v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (uint64_t *)*a2;
  if (*a2)
  {
    do
    {
      char v12 = v11;
      uint64_t v11 = (uint64_t *)v11[1];
    }
    while (v11);
  }
  else
  {
    long long v16 = a2;
    do
    {
      char v12 = (uint64_t *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      long long v16 = v12;
    }
    while (v17);
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)v12[4] + 40))(v12[4], *a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__find_equal<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>((uint64_t)a1, a3, a5);
}

void *std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(void *a1, void *a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *((unsigned __int8 *)v3 + 55);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 55);
      }
      else {
        uint64_t v9 = (unsigned __int8 *)v3[5];
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[4], v7, v3[5])) {
            return v3;
          }
        }
        else
        {
          if (!*((unsigned char *)v3 + 55)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*((unsigned __int8 *)v3 + v10 + 32) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      uint64_t v11 = (void *)v3[1];
      if (v11)
      {
        do
        {
          char v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          char v12 = (void *)v3[2];
          BOOL v13 = *v12 == (void)v3;
          uint64_t v3 = v12;
        }
        while (!v13);
      }
      uint64_t v3 = v12;
    }
    while (v12 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::__find_impl[abi:ne180100]<std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    int v8 = *((char *)a3 + 47);
    if (v8 >= 0) {
      uint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 47);
    }
    else {
      uint64_t v9 = a3[4];
    }
    char v12 = a3[3];
    uint64_t v10 = (unsigned __int8 *)(a3 + 3);
    uint64_t v11 = v12;
    if (v8 >= 0) {
      BOOL v13 = v10;
    }
    else {
      BOOL v13 = v11;
    }
    while (1)
    {
      uint64_t v14 = *(unsigned __int8 *)(v3 + 23);
      if ((v14 & 0x80u) == 0) {
        long long v15 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        long long v15 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v15 == v6)
      {
        if ((v14 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8)))
          {
LABEL_25:
            uint64_t v17 = *(unsigned __int8 *)(v3 + 47);
            if ((v17 & 0x80u) == 0) {
              uint64_t v18 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 47);
            }
            else {
              uint64_t v18 = *(unsigned __int8 **)(v3 + 32);
            }
            if (v18 == v9)
            {
              if ((v17 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)(v3 + 24), v13, *(void *)(v3 + 32))) {
                  return v3;
                }
              }
              else
              {
                if (!*(unsigned char *)(v3 + 47)) {
                  return v3;
                }
                uint64_t v19 = 0;
                while (*(unsigned __int8 *)(v3 + v19 + 24) == v13[v19])
                {
                  if (v17 == ++v19) {
                    return v3;
                  }
                }
              }
            }
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            goto LABEL_25;
          }
          uint64_t v16 = 0;
          while (*(unsigned __int8 *)(v3 + v16) == v7[v16])
          {
            if (v14 == ++v16) {
              goto LABEL_25;
            }
          }
        }
      }
      v3 += 48;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

void std::__shared_ptr_emplace<quasar::PDecTranslator::PDecCompilationContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FD80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PDecTranslator::PDecCompilationContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FD80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::PDecTranslator::PDecCompilationContext>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::vector<quasar::TranslationPhrase>::__push_back_slow_path<quasar::TranslationPhrase>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
    unint64_t v6 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[136 * v3];
  BOOL v13 = &v7[136 * v6];
  std::allocator<quasar::TranslationPhrase>::construct[abi:ne180100]<quasar::TranslationPhrase,quasar::TranslationPhrase>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  char v12 = v11 + 136;
  std::vector<quasar::TranslationPhrase>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::TranslationPhrase>::~__split_buffer(&v10);
  return v8;
}

void sub_1B222D398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TranslationPhrase>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::TranslationPhrase>::construct[abi:ne180100]<quasar::TranslationPhrase,quasar::TranslationPhrase>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
  *(void *)a2 = v3;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 16) = *((_OWORD *)a3 + 1);
  *(void *)(a2 + 32) = a3[4];
  a3[2] = 0;
  a3[3] = 0;
  a3[4] = 0;
  long long v4 = *(_OWORD *)(a3 + 5);
  *(void *)(a2 + 56) = a3[7];
  *(_OWORD *)(a2 + 40) = v4;
  a3[6] = 0;
  a3[7] = 0;
  a3[5] = 0;
  *(unsigned char *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 88) = 0;
  if (*((unsigned char *)a3 + 88))
  {
    long long v5 = *((_OWORD *)a3 + 4);
    *(void *)(a2 + 80) = a3[10];
    *(_OWORD *)(a2 + 64) = v5;
    a3[9] = 0;
    a3[10] = 0;
    a3[8] = 0;
    *(unsigned char *)(a2 + 88) = 1;
  }
  *(unsigned char *)(a2 + 96) = 0;
  *(unsigned char *)(a2 + 120) = 0;
  if (*((unsigned char *)a3 + 120))
  {
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(_OWORD *)(a2 + 96) = *((_OWORD *)a3 + 6);
    *(void *)(a2 + 112) = a3[14];
    a3[12] = 0;
    a3[13] = 0;
    a3[14] = 0;
    *(unsigned char *)(a2 + 120) = 1;
  }
  *(_WORD *)(a2 + 128) = *((_WORD *)a3 + 64);
}

uint64_t std::vector<quasar::TranslationPhrase>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationPhrase>,std::reverse_iterator<quasar::TranslationPhrase*>,std::reverse_iterator<quasar::TranslationPhrase*>,std::reverse_iterator<quasar::TranslationPhrase*>>((uint64_t)(a1 + 2), a1[1], (uint64_t *)a1[1], *a1, (uint64_t *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationPhrase>,std::reverse_iterator<quasar::TranslationPhrase*>,std::reverse_iterator<quasar::TranslationPhrase*>,std::reverse_iterator<quasar::TranslationPhrase*>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  std::locale v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 17;
      std::allocator<quasar::TranslationPhrase>::construct[abi:ne180100]<quasar::TranslationPhrase,quasar::TranslationPhrase>(a1, v7 - 136, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 136;
      *((void *)&v16 + 1) -= 136;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,std::reverse_iterator<quasar::TranslationPhrase*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,std::reverse_iterator<quasar::TranslationPhrase*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,std::reverse_iterator<quasar::TranslationPhrase*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,std::reverse_iterator<quasar::TranslationPhrase*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::TranslationPhrase>::destroy[abi:ne180100](v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::TranslationPhrase>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::TranslationPhrase>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 136;
    std::allocator<quasar::TranslationPhrase>::destroy[abi:ne180100](v4, i - 136);
  }
}

uint64_t std::map<std::string,std::vector<quasar::TranslationPhrase>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<quasar::TranslationPhrase>> const&>((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1B222D714(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<quasar::TranslationPhrase>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::__construct_node<std::pair<std::string const,std::vector<quasar::TranslationPhrase>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::__construct_node<std::pair<std::string const,std::vector<quasar::TranslationPhrase>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::vector<quasar::TranslationPhrase>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B222D818(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<quasar::TranslationPhrase>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::TranslationPhrase>::__init_with_size[abi:ne180100]<quasar::TranslationPhrase*,quasar::TranslationPhrase*>((quasar::TranslationPhrase *)&this[1], *((quasar::TranslationPhrase **)a2 + 3), *((quasar::TranslationPhrase **)a2 + 4), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_1B222D8A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x147AE147AE147AELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8F5C28F5C28F5C29 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xA3D70A3D70A3D7) {
    unint64_t v9 = 0x147AE147AE147AELL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v13 = v10;
  char v14 = &v10[200 * v4];
  long long v16 = &v10[200 * v9];
  quasar::TranslationPhraseInternal::TranslationPhraseInternal((uint64_t)v14, a2);
  long long v15 = v14 + 200;
  std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B222D9D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B222DB00(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B222DBF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B222DCF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B222DDF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B222E1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  _Unwind_Resume(a1);
}

void sub_1B222E3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B222E4DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B222E5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B222E75C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B222E864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B222EA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

void sub_1B222EB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B222ED70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)(v17 - 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void sub_1B222F228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__pa,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,std::__split_buffer<std::wstring> *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  __pa = &a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void sub_1B222F6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__pa,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,std::__split_buffer<std::wstring> *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void **a35)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  a35 = (void **)&a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a35);
  __pa = &a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void sub_1B222FAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, void *a10, void *a11, void *__pa, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__split_buffer<std::wstring> *a19)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void sub_1B222FD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B222FFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }

  *(void *)(v32 - 96) = v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 96));

  _Unwind_Resume(a1);
}

void sub_1B22300BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B2230D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  quasar::TranslationPhrase::~TranslationPhrase((quasar::TranslationPhrase *)&a70);
  _Unwind_Resume(a1);
}

void sub_1B2230FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *__copy_helper_block_ea8_80c89_ZTSNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEE104c47_ZTSNSt3__110shared_ptrIN6quasar10TranslatorEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v3 = a1 + 80;
  *(void *)(a1 + 96) = 0;
  uint64_t result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 80), *(long long **)(a2 + 80), *(long long **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
  uint64_t v5 = *(void *)(a2 + 112);
  *(void *)(v3 + 24) = *(void *)(a2 + 104);
  *(void *)(v3 + 32) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_80c89_ZTSNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEE104c47_ZTSNSt3__110shared_ptrIN6quasar10TranslatorEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 112);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (void **)(a1 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void sub_1B22311E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

EMTAlternativeDescription *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorI8OverloadIJZZZ115__EMTTranslator__dispatchTranslationRequest_isFinal_spans_translator_sourceLocale_targetLocale_options_completion__EUb_EN3__0clENS_10shared_ptrINS_7variantIJN6quasar24AlternativeSelectionSpan11Alternative17GenderDescriptionENSE_18MeaningDescriptionEEEEEEEUlSG_E_ZZZ115__EMTTranslator__dispatchTranslationRequest_isFinal_spans_translator_sourceLocale_targetLocale_options_completion__EUb_ENS9_clESI_EUlSF_E_EEEEJRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEEEEEDcT_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v2 = [[EMTGenderDescription alloc] initWithGender:*a2 == 1 defaultGender:HIDWORD(*a2) == 1];
  uint64_t v3 = [[EMTAlternativeDescription alloc] initWithGenderDescription:v2];

  return v3;
}

void sub_1B223132C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

EMTAlternativeDescription *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorI8OverloadIJZZZ115__EMTTranslator__dispatchTranslationRequest_isFinal_spans_translator_sourceLocale_targetLocale_options_completion__EUb_EN3__0clENS_10shared_ptrINS_7variantIJN6quasar24AlternativeSelectionSpan11Alternative17GenderDescriptionENSE_18MeaningDescriptionEEEEEEEUlSG_E_ZZZ115__EMTTranslator__dispatchTranslationRequest_isFinal_spans_translator_sourceLocale_targetLocale_options_completion__EUb_ENS9_clESI_EUlSF_E_EEEEJRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEEEEEDcT_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v2 = [EMTMeaningDescription alloc];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v5 = objc_msgSend(NSString, "ear_stringWithStringView:", p_p, size, __p.__r_.__value_.__r.__words[0]);
  uint64_t v6 = [(EMTMeaningDescription *)v2 initWithDefinition:v5];

  uint64_t v7 = [[EMTAlternativeDescription alloc] initWithMeaningDescription:v6];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1B2231420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  long long v15 = v14;

  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::__map_value_compare<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::less<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,true>,std::allocator<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>>>::__emplace_hint_unique_key_args<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>&,EMTAlternativeDescription * {__strong}&>(uint64_t **a1, void *a2, unint64_t *a3, void *a4, id *a5)
{
  unint64_t v8 = (uint64_t **)std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__find_equal<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>(a1, a2, &v14, &v13, a3);
  unint64_t v9 = *v8;
  if (!*v8)
  {
    uint64_t v10 = v8;
    std::__tree<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::__map_value_compare<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::less<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,true>,std::allocator<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>>>::__construct_node<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>&,EMTAlternativeDescription * {__strong}&>((uint64_t)a1, a4, a5, (uint64_t)v12);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v10, v12[0]);
    unint64_t v9 = v12[0];
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v9;
}

id std::__tree<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::__map_value_compare<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::less<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,true>,std::allocator<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>>>::__construct_node<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>&,EMTAlternativeDescription * {__strong}&>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, id *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  uint64_t v9 = a2[1];
  v8[4] = *a2;
  v8[5] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  id result = *a3;
  v8[6] = result;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const,EMTAlternativeDescription * {__strong}>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const,EMTAlternativeDescription * {__strong}>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::__tree<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::__map_value_compare<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::less<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,true>,std::allocator<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::__map_value_compare<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::less<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,true>,std::allocator<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::__map_value_compare<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::less<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,true>,std::allocator<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const,EMTAlternativeDescription * {__strong}>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void VarNgram::VarNgram(VarNgram *this, Vocab *a2, int a3, double a4)
{
  Ngram::Ngram(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F0A35158;
  *(double *)(v5 + 192) = a4;
}

void VarNgram::~VarNgram(VarNgram *this)
{
  *(void *)this = &unk_1F0A346B0;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A346B0;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::CEAcousticEncoderNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  unint64_t v4 = (kaldi::Input *)kaldi::Input::Input(v5, a3, v6);
  kaldi::Input::Stream(v4);
  kaldi::quasar::CreateComputeEngineConfig(a2);
}

void sub_1B22324F8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  kaldi::Input::~Input((kaldi::Input *)(v1 - 104));
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEAcousticEncoderNet::CEAcousticEncoderNet(kaldi::quasar::CEAcousticEncoderNetConfig *a1, uint64_t a2)
{
  *((void *)kaldi::quasar::CEAcousticEncoderNetConfig::CEAcousticEncoderNetConfig(a1) + 31) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  uint64_t v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if (v8 < 0) {
    uint64_t v5 = (void **)__p[0];
  }
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v6 = (const void *)a2;
    }
    else {
      uint64_t v6 = *(const void **)a2;
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::quasar::CEAcousticEncoderNetConfig::Read((uint64_t)a1, a2, (uint64_t)__p);
}

void sub_1B22326FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *((void *)v14 + 31);
  *((void *)v14 + 31) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  kaldi::quasar::CEAcousticEncoderNetConfig::~CEAcousticEncoderNetConfig(v14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEAcousticEncoderNet::~CEAcousticEncoderNet(kaldi::quasar::CEAcousticEncoderNet *this)
{
  uint64_t v2 = *((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  kaldi::quasar::CEAcousticEncoderNetConfig::~CEAcousticEncoderNetConfig(this);
}

void kaldi::quasar::CEAcousticEncoderNet::Encode(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (uint64_t)(a2[1] - *a2) >> 3;
  if (v8 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v61, "input_states.size() == cfg_.input_states.size()");
    goto LABEL_88;
  }
  if (v8 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v61, "input_states.size() == cfg_.output_states.size()");
    goto LABEL_88;
  }
  if ((*(unsigned int (**)(void))(*(void *)*a3 + 176))() != *(_DWORD *)(a1 + 200))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v61, "input_feats->GetNumDims() == cfg_.input_shape_template.ndim");
    goto LABEL_88;
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)*a3 + 184))(*a3, *(unsigned int *)(a1 + 196)) != *(_DWORD *)(a1 + 204))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v61, "input_feats->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
LABEL_88:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v61);
  }
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  unint64_t v63 = 0;
  uint64_t v16 = *(void *)(a1 + 120);
  if (*(void *)(a1 + 128) == v16)
  {
    uint64_t v25 = *a3;
LABEL_19:
    uint64_t v27 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v61, (long long *)a1, v25);
    goto LABEL_22;
  }
  uint64_t v55 = a7;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  do
  {
    uint64_t v22 = v16 + v19;
    std::string::size_type v23 = *(void *)(*a2 + 8 * v21);
    if ((unint64_t)v20 >= v63)
    {
      uint64_t v20 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v61, (long long *)v22, *(void *)(*a2 + 8 * v21));
    }
    else
    {
      if (*(char *)(v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)(v16 + v19), *(void *)(v16 + v19 + 8));
      }
      else
      {
        long long v24 = *(_OWORD *)v22;
        v20->__r_.__value_.__r.__words[2] = *(void *)(v22 + 16);
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v24;
      }
      v20[1].__r_.__value_.__r.__words[0] = v23;
      uint64_t v20 = (std::string *)((char *)v20 + 32);
    }
    uint64_t v62 = (std::string::value_type *)v20;
    ++v21;
    uint64_t v16 = *(void *)(a1 + 120);
    v19 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 128) - v16) >> 3) > v21);
  uint64_t v25 = *a3;
  if ((unint64_t)v20 >= v63)
  {
    a6 = v18;
    a5 = v17;
    a7 = v55;
    goto LABEL_19;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    long long v26 = *(_OWORD *)a1;
    v20->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v26;
  }
  v20[1].__r_.__value_.__r.__words[0] = v25;
  uint64_t v27 = (std::string *)((char *)v20 + 32);
  uint64_t v62 = &v20[1].__r_.__value_.__s.__data_[8];
  a6 = v18;
  a5 = v17;
  a7 = v55;
LABEL_22:
  uint64_t v62 = (std::string::value_type *)v27;
  if (*(char *)(a1 + 47) < 0)
  {
    if (!*(void *)(a1 + 32)) {
      goto LABEL_33;
    }
  }
  else if (!*(unsigned char *)(a1 + 47))
  {
    goto LABEL_33;
  }
  int v28 = (long long *)(a1 + 24);
  uint64_t v29 = *a4;
  if ((unint64_t)v27 >= v63)
  {
    p_std::string::size_type size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v61, v28, *a4);
  }
  else
  {
    if ((*(unsigned char *)(a1 + 47) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
    }
    else
    {
      long long v30 = *v28;
      v27->__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v30;
    }
    v27[1].__r_.__value_.__r.__words[0] = v29;
    p_std::string::size_type size = (uint64_t)&v27[1].__r_.__value_.__l.__size_;
    uint64_t v62 = &v27[1].__r_.__value_.__s.__data_[8];
  }
  uint64_t v62 = (std::string::value_type *)p_size;
LABEL_33:
  memset(&v60, 0, sizeof(v60));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v60, *(long long **)(a1 + 144), *(long long **)(a1 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3));
  uint64_t v32 = (long long *)(a1 + 48);
  std::string::size_type size = (_OWORD *)v60.__r_.__value_.__l.__size_;
  if (v60.__r_.__value_.__l.__size_ >= v60.__r_.__value_.__r.__words[2])
  {
    uint64_t v35 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v60, v32);
  }
  else
  {
    if (*(char *)(a1 + 71) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v60.__r_.__value_.__l.__size_, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else
    {
      long long v34 = *v32;
      *(void *)(v60.__r_.__value_.__l.__size_ + 16) = *(void *)(a1 + 64);
      *std::string::size_type size = v34;
    }
    uint64_t v35 = (std::string *)((char *)size + 24);
  }
  v60.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
  if (*(char *)(a1 + 95) < 0)
  {
    if (!*(void *)(a1 + 80)) {
      goto LABEL_50;
    }
  }
  else if (!*(unsigned char *)(a1 + 95))
  {
    goto LABEL_50;
  }
  uint64_t v36 = (long long *)(a1 + 72);
  if ((unint64_t)v35 >= v60.__r_.__value_.__r.__words[2])
  {
    uint64_t v35 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v60, v36);
  }
  else
  {
    if ((*(unsigned char *)(a1 + 95) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
    }
    else
    {
      long long v37 = *v36;
      v35->__r_.__value_.__r.__words[2] = *(void *)(a1 + 88);
      *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v37;
    }
    ++v35;
  }
  v60.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
LABEL_50:
  if (*(char *)(a1 + 119) < 0)
  {
    if (!*(void *)(a1 + 104)) {
      goto LABEL_61;
    }
  }
  else if (!*(unsigned char *)(a1 + 119))
  {
    goto LABEL_61;
  }
  uint64_t v38 = (long long *)(a1 + 96);
  if ((unint64_t)v35 >= v60.__r_.__value_.__r.__words[2])
  {
    std::string::size_type v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v60, v38);
  }
  else
  {
    if ((*(unsigned char *)(a1 + 119) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
    }
    else
    {
      long long v39 = *v38;
      v35->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
      *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v39;
    }
    std::string::size_type v40 = (std::string::size_type)&v35[1];
  }
  v60.__r_.__value_.__l.__size_ = v40;
LABEL_61:
  long long v58 = 0uLL;
  uint64_t v59 = 0;
  uint64_t v41 = *(void *)(a1 + 248);
  memset(v57, 0, sizeof(v57));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, long long *))(*(void *)v41 + 128))(v41, &v61, &v60, v57, &v58);
  int v64 = v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  if (*(char *)(a1 + 119) < 0)
  {
    if (!*(void *)(a1 + 104)) {
      goto LABEL_70;
    }
  }
  else if (!*(unsigned char *)(a1 + 119))
  {
    goto LABEL_70;
  }
  uint64_t v42 = *(void *)(*((void *)&v58 + 1) - 8);
  *(void *)(*((void *)&v58 + 1) - 8) = 0;
  uint64_t v43 = *a8;
  *a8 = v42;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v45 = *((void *)&v58 + 1) - 8;
  uint64_t v44 = *(void *)(*((void *)&v58 + 1) - 8);
  *(void *)(*((void *)&v58 + 1) - 8) = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  *((void *)&v58 + 1) = v45;
LABEL_70:
  if (*(char *)(a1 + 95) < 0) {
    uint64_t v46 = *(void *)(a1 + 80);
  }
  else {
    uint64_t v46 = *(unsigned __int8 *)(a1 + 95);
  }
  uint64_t v47 = *((void *)&v58 + 1);
  if (v46)
  {
    uint64_t v48 = *(void *)(*((void *)&v58 + 1) - 8);
    *(void *)(*((void *)&v58 + 1) - 8) = 0;
    uint64_t v49 = *a7;
    *a7 = v48;
    if (v49) {
      (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
    }
    uint64_t v47 = *((void *)&v58 + 1) - 8;
    uint64_t v50 = *(void *)(*((void *)&v58 + 1) - 8);
    *(void *)(*((void *)&v58 + 1) - 8) = 0;
    if (v50) {
      (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
    }
    *((void *)&v58 + 1) = v47;
  }
  uint64_t v51 = *(void *)(v47 - 8);
  *(void *)(v47 - 8) = 0;
  uint64_t v52 = *a6;
  *a6 = v51;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  uint64_t v54 = *((void *)&v58 + 1) - 8;
  uint64_t v53 = *(void *)(*((void *)&v58 + 1) - 8);
  *(void *)(*((void *)&v58 + 1) - 8) = 0;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  *((void *)&v58 + 1) = v54;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)a5);
  *(_OWORD *)a5 = v58;
  *(void *)(a5 + 16) = v59;
  uint64_t v59 = 0;
  long long v58 = 0uLL;
  v57[0] = (void **)&v58;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v57);
  *(void *)&long long v58 = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
}

void sub_1B2232F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::CEAcousticEncoderNet::Encode(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 192), *(int *)(a3 + 20), *(int *)(a3 + 16), v22);
  uint64_t v20 = 0;
  kaldi::quasar::CreateBufferFromMatrix(a1 + 248, a3, (uint64_t)v22, &v20, &v21);
  uint64_t v16 = v20;
  uint64_t v20 = 0;
  if (v16) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v16 + 8))(v16);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 248) + 48))(&v19);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v19 + 96))(v19, a4, 0);
  kaldi::quasar::CEAcousticEncoderNet::Encode(a1, a2, (uint64_t *)&v21, &v19, a5, a6, a7, a8);
  uint64_t v17 = v19;
  uint64_t v19 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = v21;
  unint64_t v21 = 0;
  if (v18) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v18 + 8))(v18);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_1B2233100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEAcousticEncoderNet::Encode(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6 = (uint64_t)(a2[1] - *a2) >> 3;
  if (v6 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v40, "input_states.size() == cfg_.input_states.size()");
    goto LABEL_47;
  }
  if (v6 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v40, "input_states.size() == cfg_.output_states.size()");
    goto LABEL_47;
  }
  if ((*(unsigned int (**)(void))(*(void *)*a3 + 176))() != *(_DWORD *)(a1 + 200))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v40, "input_feats->GetNumDims() == cfg_.input_shape_template.ndim");
    goto LABEL_47;
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)*a3 + 184))(*a3, *(unsigned int *)(a1 + 196)) != *(_DWORD *)(a1 + 204))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v40, "input_feats->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
LABEL_47:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v40);
  }
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  uint64_t v13 = *(void *)(a1 + 120);
  if (*(void *)(a1 + 128) == v13)
  {
    uint64_t v20 = *a3;
LABEL_18:
    uint64_t v22 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v40, (long long *)a1, v20);
    goto LABEL_21;
  }
  uint64_t v14 = 0;
  long long v15 = 0;
  unint64_t v16 = 0;
  do
  {
    uint64_t v17 = v13 + v14;
    std::string::size_type v18 = *(void *)(*a2 + 8 * v16);
    if ((unint64_t)v15 >= v42)
    {
      long long v15 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v40, (long long *)v17, *(void *)(*a2 + 8 * v16));
    }
    else
    {
      if (*(char *)(v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)(v13 + v14), *(void *)(v13 + v14 + 8));
      }
      else
      {
        long long v19 = *(_OWORD *)v17;
        v15->__r_.__value_.__r.__words[2] = *(void *)(v17 + 16);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v19;
      }
      v15[1].__r_.__value_.__r.__words[0] = v18;
      long long v15 = (std::string *)((char *)v15 + 32);
    }
    uint64_t v41 = (std::string::value_type *)v15;
    ++v16;
    uint64_t v13 = *(void *)(a1 + 120);
    v14 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 128) - v13) >> 3) > v16);
  uint64_t v20 = *a3;
  if ((unint64_t)v15 >= v42) {
    goto LABEL_18;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    long long v21 = *(_OWORD *)a1;
    v15->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v21;
  }
  v15[1].__r_.__value_.__r.__words[0] = v20;
  uint64_t v22 = (std::string *)((char *)v15 + 32);
  uint64_t v41 = &v15[1].__r_.__value_.__s.__data_[8];
LABEL_21:
  uint64_t v41 = (std::string::value_type *)v22;
  if (*(char *)(a1 + 47) < 0)
  {
    if (!*(void *)(a1 + 32)) {
      goto LABEL_32;
    }
  }
  else if (!*(unsigned char *)(a1 + 47))
  {
    goto LABEL_32;
  }
  std::string::size_type v23 = (long long *)(a1 + 24);
  uint64_t v24 = *a4;
  if ((unint64_t)v22 >= v42)
  {
    p_std::string::size_type size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v40, v23, v24);
  }
  else
  {
    if ((*(unsigned char *)(a1 + 47) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
    }
    else
    {
      long long v25 = *v23;
      v22->__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
      *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v25;
    }
    v22[1].__r_.__value_.__r.__words[0] = v24;
    p_std::string::size_type size = (uint64_t)&v22[1].__r_.__value_.__l.__size_;
    uint64_t v41 = &v22[1].__r_.__value_.__s.__data_[8];
  }
  uint64_t v41 = (std::string::value_type *)p_size;
LABEL_32:
  memset(&v39, 0, sizeof(v39));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v39, *(long long **)(a1 + 144), *(long long **)(a1 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3));
  uint64_t v27 = (long long *)(a1 + 48);
  std::string::size_type size = (_OWORD *)v39.__r_.__value_.__l.__size_;
  if (v39.__r_.__value_.__l.__size_ >= v39.__r_.__value_.__r.__words[2])
  {
    std::string::size_type v30 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v39, v27);
  }
  else
  {
    if (*(char *)(a1 + 71) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v39.__r_.__value_.__l.__size_, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else
    {
      long long v29 = *v27;
      *(void *)(v39.__r_.__value_.__l.__size_ + 16) = *(void *)(a1 + 64);
      *std::string::size_type size = v29;
    }
    std::string::size_type v30 = (std::string::size_type)size + 24;
  }
  v39.__r_.__value_.__l.__size_ = v30;
  long long v37 = 0uLL;
  uint64_t v38 = 0;
  uint64_t v31 = *(void *)(a1 + 248);
  memset(v36, 0, sizeof(v36));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, long long *))(*(void *)v31 + 128))(v31, &v40, &v39, v36, &v37);
  uint64_t v43 = v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  uint64_t v32 = *(void *)(*((void *)&v37 + 1) - 8);
  *(void *)(*((void *)&v37 + 1) - 8) = 0;
  uint64_t v33 = *a6;
  *a6 = v32;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v35 = *((void *)&v37 + 1) - 8;
  uint64_t v34 = *(void *)(*((void *)&v37 + 1) - 8);
  *(void *)(*((void *)&v37 + 1) - 8) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  *((void *)&v37 + 1) = v35;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)a5);
  *(_OWORD *)a5 = v37;
  *(void *)(a5 + 16) = v38;
  uint64_t v38 = 0;
  long long v37 = 0uLL;
  v36[0] = (void **)&v37;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v36);
  *(void *)&long long v37 = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
}

void sub_1B22336D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::CEAcousticEncoderNet::Encode(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 192), *(int *)(a3 + 20), *(int *)(a3 + 16), v18);
  unint64_t v16 = 0;
  kaldi::quasar::CreateBufferFromMatrix(a1 + 248, a3, (uint64_t)v18, &v16, &v17);
  char v12 = v16;
  unint64_t v16 = 0;
  if (v12) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v12 + 8))(v12);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 248) + 48))(&v15);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v15 + 96))(v15, a4, 0);
  kaldi::quasar::CEAcousticEncoderNet::Encode(a1, a2, (uint64_t *)&v17, &v15, a5, a6);
  uint64_t v13 = v15;
  uint64_t v15 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = v17;
  uint64_t v17 = 0;
  if (v14) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v14 + 8))(v14);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
}

void sub_1B22338A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEAcousticEncoderNet::Encode(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x2_t *a6)
{
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 192), *(int *)(a3 + 20), *(int *)(a3 + 16), v21);
  long long v19 = 0;
  kaldi::quasar::CreateBufferFromMatrix(a1 + 248, a3, (uint64_t)v21, &v19, &v20);
  char v12 = v19;
  long long v19 = 0;
  if (v12) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *(void *)(a1 + 248);
  memset(__p, 0, sizeof(__p));
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v13 + 48))(&v18);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v18 + 96))(v18, a4, 0);
  __p[0] = 0;
  kaldi::quasar::CEAcousticEncoderNet::Encode(a1, a2, (uint64_t *)&v20, &v18, a5, (uint64_t *)__p);
  uint64_t v14 = __p[0];
  kaldi::quasar::CopyBufferToMatrix((uint64_t)__p[0], 0xFFFFFFFFLL, *(unsigned int *)(a1 + 208), a6);
  (*(void (**)(void *))(*(void *)v14 + 8))(v14);
  uint64_t v15 = v18;
  uint64_t v18 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  unint64_t v16 = v20;
  uint64_t v20 = 0;
  if (v16) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v16 + 8))(v16);
  }
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
}

void sub_1B2233B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::OutputDim(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((unsigned int *)this + 52);
}

void kaldi::quasar::CEAcousticEncoderNet::InitialStates(kaldi::quasar::CEAcousticEncoderNet *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = (char *)this + 168;
  if (*((void *)this + 22) != *((void *)this + 21))
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    int v5 = *((_DWORD *)this + 58);
    if (v5 <= 0) {
      int v5 = *((_DWORD *)this + 55) + *((_DWORD *)this + 56);
    }
    kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::CEAcousticEncoderNet *)((char *)this + 192), v5, *((int *)this + 51), __p);
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 31) + 56))(v11);
    uint64_t v6 = v14;
    if ((unint64_t)v14 >= v15)
    {
      uint64_t v8 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v13, (long long *)this, v11);
      uint64_t v9 = v11[0];
      uint64_t v14 = v8;
      v11[0] = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
    }
    else
    {
      if (*((char *)this + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)this, *((void *)this + 1));
      }
      else
      {
        long long v7 = *(_OWORD *)this;
        v14->__r_.__value_.__r.__words[2] = *((void *)this + 2);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      }
      v6[1].__r_.__value_.__r.__words[0] = v11[0];
      uint64_t v14 = (std::string *)((char *)v6 + 32);
    }
    uint64_t v10 = *((void *)this + 31);
    memset(v11, 0, sizeof(v11));
    (*(void (**)(uint64_t, uint64_t *, char *, uint64_t *, void *))(*(void *)v10 + 120))(v10, &v13, v3, v11, a2);
    unint64_t v16 = (void **)v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v16);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    __p[0] = &v13;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_1B2233D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *__p, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  std::string __p = &a15;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::FrameSubsamplingFactor(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((unsigned int *)this + 55);
}

void kaldi::quasar::CEAcousticEncoderNet::WarmUp(kaldi::quasar::CEAcousticEncoderNet *this)
{
  kaldi::quasar::CEAcousticEncoderNet::InitialStates(this, v5);
  uint64_t v2 = *((unsigned int *)this + 58);
  if ((int)v2 <= 0) {
    uint64_t v2 = (*((_DWORD *)this + 55) + *((_DWORD *)this + 56));
  }
  kaldi::CuMatrix<float>::CuMatrix(v4, v2, *((unsigned int *)this + 51), 0, 0, 0);
  uint64_t v3 = 0;
  kaldi::quasar::CEAcousticEncoderNet::Encode((uint64_t)this, v5, (uint64_t)v4, 1, (uint64_t)v5, &v3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v4);
  v4[0] = (int32x2_t)v5;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v4);
}

void sub_1B2233F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (a9) {
    kaldi::quasar::CEInferenceNet::Feedforward();
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a10);
  a10 = (void **)(v10 - 40);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::CEAcousticEncoderNet::IsInputSizeFixed(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((_DWORD *)this + 58) > 0;
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::InputFrameCount(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((unsigned int *)this + 58);
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::OutputPhoneDim(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((unsigned int *)this + 53);
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::SilPhoneIndex(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((unsigned int *)this + 54);
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::NumSpeculativeOutputs(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((unsigned int *)this + 57);
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::Engine(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return (uint64_t)this + 248;
}

void kaldi::quasar::CELabelEncoderNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  size_t v4 = (kaldi::Input *)kaldi::Input::Input(v5, a3, v6);
  kaldi::Input::Stream(v4);
  kaldi::quasar::CreateComputeEngineConfig(a2);
}

void sub_1B2234820(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  kaldi::Input::~Input((kaldi::Input *)(v1 - 104));
  _Unwind_Resume(a1);
}

void kaldi::quasar::CELabelEncoderNet::CELabelEncoderNet(uint64_t a1, uint64_t a2)
{
  size_t v4 = std::string::basic_string[abi:ne180100]<0>((void *)a1, "input_labels");
  std::string::basic_string[abi:ne180100]<0>(v4 + 3, "output_embeddings");
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 120) = xmmword_1B25A2D80;
  *(void *)(a1 + 136) = -1;
  *(void *)(a1 + 152) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v5 = *(void *)(a2 + 8);
  }
  uint64_t v6 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 7);
  if (v9 < 0) {
    uint64_t v6 = (void **)__p[0];
  }
  if (v5)
  {
    if (*(char *)(a2 + 23) >= 0) {
      long long v7 = (const void *)a2;
    }
    else {
      long long v7 = *(const void **)a2;
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, ".config");
  kaldi::quasar::CELabelEncoderNetConfig::Read(a1, a2, (uint64_t)__p);
}

void sub_1B2234A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *((void *)v14 + 19);
  *((void *)v14 + 19) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  kaldi::quasar::CEEncoderNetConfig::~CEEncoderNetConfig(v14);
  _Unwind_Resume(a1);
}

void sub_1B2234AB0()
{
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
  JUMPOUT(0x1B2234AA8);
}

void kaldi::quasar::CELabelEncoderNet::~CELabelEncoderNet(kaldi::quasar::CELabelEncoderNet *this)
{
  uint64_t v2 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  size_t v4 = (void **)((char *)this + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  size_t v4 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  size_t v4 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void kaldi::quasar::CELabelEncoderNet::Encode(long long *a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = (uint64_t)(a2[1] - *a2) >> 3;
  if (v5 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 7) - *((void *)a1 + 6)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v34, "input_states.size() == cfg_.input_states.size()");
    goto LABEL_34;
  }
  if (v5 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 10) - *((void *)a1 + 9)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v34, "input_states.size() == cfg_.output_states.size()");
    goto LABEL_34;
  }
  if ((*(unsigned int (**)(void))(*(void *)*a3 + 176))() != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v34, "input_labels->GetNumDims() == 1");
LABEL_34:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v34);
  }
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unint64_t v36 = 0;
  uint64_t v11 = *((void *)a1 + 6);
  if (*((void *)a1 + 7) == v11)
  {
    uint64_t v18 = *a3;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = v11 + v12;
      std::string::size_type v16 = *(void *)(*a2 + 8 * v14);
      if ((unint64_t)v13 >= v36)
      {
        uint64_t v13 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v34, (long long *)v15, *(void *)(*a2 + 8 * v14));
      }
      else
      {
        if (*(char *)(v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(v11 + v12), *(void *)(v11 + v12 + 8));
        }
        else
        {
          long long v17 = *(_OWORD *)v15;
          v13->__r_.__value_.__r.__words[2] = *(void *)(v15 + 16);
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v17;
        }
        v13[1].__r_.__value_.__r.__words[0] = v16;
        uint64_t v13 = (std::string *)((char *)v13 + 32);
      }
      uint64_t v35 = (std::string::value_type *)v13;
      ++v14;
      uint64_t v11 = *((void *)a1 + 6);
      v12 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((void *)a1 + 7) - v11) >> 3) > v14);
    uint64_t v18 = *a3;
    if ((unint64_t)v13 < v36)
    {
      if (*((char *)a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a1, *((void *)a1 + 1));
      }
      else
      {
        long long v19 = *a1;
        v13->__r_.__value_.__r.__words[2] = *((void *)a1 + 2);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v19;
      }
      v13[1].__r_.__value_.__r.__words[0] = v18;
      p_std::string::size_type size = (uint64_t)&v13[1].__r_.__value_.__l.__size_;
      uint64_t v35 = &v13[1].__r_.__value_.__s.__data_[8];
      goto LABEL_20;
    }
  }
  p_std::string::size_type size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v34, a1, v18);
LABEL_20:
  uint64_t v35 = (std::string::value_type *)p_size;
  memset(&v33, 0, sizeof(v33));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v33, *((long long **)a1 + 9), *((long long **)a1 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 10) - *((void *)a1 + 9)) >> 3));
  long long v21 = (long long *)((char *)a1 + 24);
  std::string::size_type size = (_OWORD *)v33.__r_.__value_.__l.__size_;
  if (v33.__r_.__value_.__l.__size_ >= v33.__r_.__value_.__r.__words[2])
  {
    std::string::size_type v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v33, v21);
  }
  else
  {
    if (*((char *)a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v33.__r_.__value_.__l.__size_, *((const std::string::value_type **)a1 + 3), *((void *)a1 + 4));
    }
    else
    {
      long long v23 = *v21;
      *(void *)(v33.__r_.__value_.__l.__size_ + 16) = *((void *)a1 + 5);
      *std::string::size_type size = v23;
    }
    std::string::size_type v24 = (std::string::size_type)size + 24;
  }
  v33.__r_.__value_.__l.__size_ = v24;
  long long v31 = 0uLL;
  uint64_t v32 = 0;
  uint64_t v25 = *((void *)a1 + 19);
  memset(v30, 0, sizeof(v30));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, long long *))(*(void *)v25 + 128))(v25, &v34, &v33, v30, &v31);
  long long v37 = v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  uint64_t v26 = *(void *)(*((void *)&v31 + 1) - 8);
  *(void *)(*((void *)&v31 + 1) - 8) = 0;
  uint64_t v27 = *a5;
  *a5 = v26;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v29 = *((void *)&v31 + 1) - 8;
  uint64_t v28 = *(void *)(*((void *)&v31 + 1) - 8);
  *(void *)(*((void *)&v31 + 1) - 8) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  *((void *)&v31 + 1) = v29;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)a4);
  *(_OWORD *)a4 = v31;
  *(void *)(a4 + 16) = v32;
  uint64_t v32 = 0;
  long long v31 = 0uLL;
  v30[0] = (void **)&v31;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v30);
  *(void *)&long long v31 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
}

void sub_1B2234FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::CELabelEncoderNet::Encode(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 152) + 16))(&v10);
  kaldi::quasar::CELabelEncoderNet::Encode((long long *)a1, a2, &v10, a4, a5);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B22350B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    kaldi::quasar::CEInferenceNet::Feedforward();
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CELabelEncoderNet::EncodeBatch(uint64_t a1, void *a2, int **a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  if (v5 != 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v59, "input_states.size() == cfg_.input_states.size()");
    goto LABEL_41;
  }
  if (v5 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v59, "input_states.size() == cfg_.output_states.size()");
LABEL_41:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
  }
  uint64_t v56 = 0;
  int v57 = 0;
  unint64_t v58 = 0;
  if (v7 == v6)
  {
    memset(&v59, 0, sizeof(v59));
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      std::string::size_type v16 = (void *)(*a2 + v13);
      if ((uint64_t)(v16[1] - *v16) >> 3 != a3[1] - *a3)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Mismatch at [", 13);
        uint64_t v45 = (void *)std::ostream::operator<<();
        uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"] ", 2);
        uint64_t v47 = *(void *)(a1 + 48) + v13;
        int v48 = *(char *)(v47 + 23);
        if (v48 >= 0) {
          uint64_t v49 = *(void *)(a1 + 48) + v13;
        }
        else {
          uint64_t v49 = *(void *)v47;
        }
        if (v48 >= 0) {
          uint64_t v50 = *(unsigned __int8 *)(v47 + 23);
        }
        else {
          uint64_t v50 = *(void *)(v47 + 8);
        }
        uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, v49, v50);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" ", 1);
        uint64_t v52 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" != ", 4);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
      }
      long long v17 = (long long *)(v6 + v13);
      if ((unint64_t)v14 >= v58)
      {
        unint64_t v14 = (std::string *)std::vector<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__emplace_back_slow_path<std::string&,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(&v56, v17, (uint64_t)v16);
      }
      else
      {
        std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>::pair[abi:ne180100]<std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>,0>(v14, v17, (uint64_t)v16);
        v14 += 2;
      }
      int v57 = v14;
      ++v15;
      uint64_t v6 = *(void *)(a1 + 48);
      v13 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 56) - v6) >> 3) > v15);
    memset(&v59, 0, sizeof(v59));
    if ((unint64_t)v14 < v58)
    {
      std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>::pair[abi:ne180100]<std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>,0>(v14, (long long *)a1, (uint64_t)&v59);
      uint64_t v18 = (uint64_t)&v14[2];
      int v57 = v14 + 2;
      goto LABEL_14;
    }
  }
  uint64_t v18 = std::vector<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__emplace_back_slow_path<std::string&,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(&v56, (long long *)a1, (uint64_t)&v59);
LABEL_14:
  int v57 = (std::string *)v18;
  std::string __p = &v59;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long v19 = *a3;
  uint64_t v20 = a3[1];
  if (*a3 != v20)
  {
    do
    {
      int v21 = *v19;
      uint64_t v22 = v57;
      uint64_t v23 = *(void *)(a1 + 152);
      std::string::size_type v24 = operator new(4uLL);
      std::string __p = v24;
      _DWORD *v24 = v21;
      uint64_t v54 = v24 + 1;
      uint64_t v55 = v24 + 1;
      (*(void (**)(void ***__return_ptr, uint64_t, void **, void))(*(void *)v23 + 16))(v62, v23, &__p, 0);
      unint64_t v25 = v22[-1].__r_.__value_.__r.__words[2];
      std::string::size_type size = (void ***)v22[-1].__r_.__value_.__l.__size_;
      if ((unint64_t)size >= v25)
      {
        std::string::pointer data = v22[-1].__r_.__value_.__l.__data_;
        uint64_t v30 = ((char *)size - data) >> 3;
        if ((unint64_t)(v30 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v31 = v25 - (void)data;
        uint64_t v32 = v31 >> 2;
        if (v31 >> 2 <= (unint64_t)(v30 + 1)) {
          uint64_t v32 = v30 + 1;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        uint64_t v61 = &v22[-1].__r_.__value_.__r.__words[2];
        if (v33) {
          uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v22[-1].__r_.__value_.__r.__words[2], v33);
        }
        else {
          uint64_t v34 = 0;
        }
        uint64_t v35 = (void ***)&v34[8 * v30];
        v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
        v59.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
        std::string v60 = &v34[8 * v33];
        unint64_t v36 = v62[0];
        v62[0] = 0;
        *uint64_t v35 = v36;
        v59.__r_.__value_.__r.__words[2] = (std::string::size_type)(v35 + 1);
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer((uint64_t *)&v22[-1], &v59);
        uint64_t v28 = (void *)v22[-1].__r_.__value_.__l.__size_;
        std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v59.__r_.__value_.__l.__data_);
      }
      else
      {
        uint64_t v27 = v62[0];
        v62[0] = 0;
        *std::string::size_type size = v27;
        uint64_t v28 = size + 1;
        v22[-1].__r_.__value_.__l.__size_ = (std::string::size_type)v28;
      }
      v22[-1].__r_.__value_.__l.__size_ = (std::string::size_type)v28;
      long long v37 = v62[0];
      v62[0] = 0;
      if (v37) {
        (*((void (**)(void **))*v37 + 1))(v37);
      }
      if (__p)
      {
        uint64_t v54 = __p;
        operator delete(__p);
      }
      ++v19;
    }
    while (v19 != v20);
  }
  memset(&v59, 0, sizeof(v59));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v59, *(long long **)(a1 + 72), *(long long **)(a1 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
  uint64_t v38 = (long long *)(a1 + 24);
  std::string v39 = (_OWORD *)v59.__r_.__value_.__l.__size_;
  if (v59.__r_.__value_.__l.__size_ >= v59.__r_.__value_.__r.__words[2])
  {
    std::string::size_type v41 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v59, v38);
  }
  else
  {
    if (*(char *)(a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v59.__r_.__value_.__l.__size_, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
    }
    else
    {
      long long v40 = *v38;
      *(void *)(v59.__r_.__value_.__l.__size_ + 16) = *(void *)(a1 + 40);
      *std::string v39 = v40;
    }
    std::string::size_type v41 = (std::string::size_type)v39 + 24;
  }
  v59.__r_.__value_.__l.__size_ = v41;
  uint64_t v42 = *(void *)(a1 + 152);
  std::string __p = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  (*(void (**)(uint64_t, uint64_t *, std::string *, void **, uint64_t))(*(void *)v42 + 176))(v42, &v56, &v59, &__p, a4);
  v62[0] = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v62);
  uint64_t v43 = *(void *)(a4 + 8);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)a5);
  *(_OWORD *)a5 = *(_OWORD *)(v43 - 24);
  *(void *)(a5 + 16) = *(void *)(v43 - 8);
  *(void *)(v43 - 24) = 0;
  *(void *)(v43 - 16) = 0;
  *(void *)(v43 - 8) = 0;
  std::string __p = (void *)(*(void *)(a4 + 8) - 24);
  uint64_t v44 = __p;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(void *)(a4 + 8) = v44;
  std::string __p = &v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  std::vector<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
}

void kaldi::quasar::CELabelEncoderNet::InitialStates(kaldi::quasar::CELabelEncoderNet *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = (char *)this + 96;
  if (*((void *)this + 13) != *((void *)this + 12))
  {
    uint64_t v15 = 0;
    std::string::size_type v16 = 0;
    unint64_t v17 = 0;
    uint64_t v5 = *((void *)this + 19);
    uint64_t v6 = operator new(4uLL);
    std::string __p = v6;
    *uint64_t v6 = 0;
    uint64_t v13 = v6 + 1;
    unint64_t v14 = v6 + 1;
    (*(void (**)(void ***__return_ptr, uint64_t, void **, void))(*(void *)v5 + 16))(&p_p, v5, &__p, 0);
    uint64_t v7 = v16;
    if ((unint64_t)v16 >= v17)
    {
      char v9 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v15, (long long *)this, (uint64_t *)&p_p);
      uint64_t v10 = p_p;
      std::string::size_type v16 = v9;
      p_p = 0;
      if (v10) {
        (*((void (**)(void **))*v10 + 1))(v10);
      }
    }
    else
    {
      if (*((char *)this + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)this, *((void *)this + 1));
      }
      else
      {
        long long v8 = *(_OWORD *)this;
        v16->__r_.__value_.__r.__words[2] = *((void *)this + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v7[1].__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      std::string::size_type v16 = (std::string *)((char *)v7 + 32);
      p_p = 0;
    }
    if (__p)
    {
      uint64_t v13 = __p;
      operator delete(__p);
    }
    uint64_t v11 = *((void *)this + 19);
    std::string __p = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    (*(void (**)(uint64_t, uint64_t *, char *, void **, void *))(*(void *)v11 + 120))(v11, &v15, v3, &__p, a2);
    p_p = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
    std::string __p = &v15;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
}

void sub_1B223588C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *__p, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16 = *(void *)(v14 - 40);
  *(void *)(v14 - 40) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  std::string __p = &a13;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CELabelEncoderNet::WarmUp(kaldi::quasar::CELabelEncoderNet *this)
{
  kaldi::quasar::CELabelEncoderNet::InitialStates(this, v8);
  int v2 = *((_DWORD *)this + 31);
  uint64_t v3 = operator new(4uLL);
  uint64_t v4 = 0;
  std::string __p = v3;
  _DWORD *v3 = v2;
  uint64_t v6 = v3 + 1;
  uint64_t v7 = v3 + 1;
  kaldi::quasar::CELabelEncoderNet::Encode((uint64_t)this, v8, (uint64_t)&__p, (uint64_t)v8, &v4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  std::string __p = v8;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B22359D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, char a14)
{
  if (a10) {
    kaldi::quasar::CEInferenceNet::Feedforward();
  }
  if (__p)
  {
    a12 = __p;
    operator delete(__p);
  }
  std::string __p = &a14;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CELabelEncoderNet::EOSIndex(kaldi::quasar::CELabelEncoderNet *this)
{
  return *((unsigned int *)this + 32);
}

uint64_t kaldi::quasar::CELabelEncoderNet::BlankIndex(kaldi::quasar::CELabelEncoderNet *this)
{
  return *((unsigned int *)this + 33);
}

uint64_t kaldi::quasar::CELabelEncoderNet::SilIndex(kaldi::quasar::CELabelEncoderNet *this)
{
  return *((unsigned int *)this + 34);
}

uint64_t kaldi::quasar::CELabelEncoderNet::ContextSize(kaldi::quasar::CELabelEncoderNet *this)
{
  return *((unsigned int *)this + 35);
}

void kaldi::quasar::CEJointPredictorNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  uint64_t v4 = (kaldi::Input *)kaldi::Input::Input(v5, a3, v6);
  kaldi::Input::Stream(v4);
  kaldi::quasar::CreateComputeEngineConfig(a2);
}

void kaldi::quasar::CEJointPredictorNet::CEJointPredictorNet(kaldi::quasar::CEJointPredictorNetConfig *a1, uint64_t a2)
{
  *((void *)kaldi::quasar::CEJointPredictorNetConfig::CEJointPredictorNetConfig(a1) + 16) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  uint64_t v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if (v8 < 0) {
    uint64_t v5 = (void **)__p[0];
  }
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v6 = (const void *)a2;
    }
    else {
      uint64_t v6 = *(const void **)a2;
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::quasar::CEJointPredictorNetConfig::Read((uint64_t)a1, a2, (uint64_t)__p);
}

void sub_1B2236504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *((void *)v14 + 16);
  *((void *)v14 + 16) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  kaldi::quasar::CEJointPredictorNetConfig::~CEJointPredictorNetConfig(v14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEJointPredictorNetConfig::~CEJointPredictorNetConfig(kaldi::quasar::CEJointPredictorNetConfig *this)
{
  uint64_t v2 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void kaldi::quasar::CEJointPredictorNet::~CEJointPredictorNet(kaldi::quasar::CEJointPredictorNet *this)
{
  uint64_t v2 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void kaldi::quasar::CEJointPredictorNet::Predict(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 176))() != *(_DWORD *)(a1 + 104))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v29, "input_acoustic_embeddings->GetNumDims() == cfg_.input_shape_template.ndim");
    goto LABEL_28;
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)*a2 + 184))(*a2, *(unsigned int *)(a1 + 100)) != *(_DWORD *)(a1 + 108))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v29, "input_acoustic_embeddings->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
    goto LABEL_28;
  }
  if ((*(unsigned int (**)(void))(*(void *)*a3 + 176))() != *(_DWORD *)(a1 + 104))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v29, "input_label_embeddings->GetNumDims() == cfg_.input_shape_template.ndim");
    goto LABEL_28;
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)*a3 + 184))(*a3, *(unsigned int *)(a1 + 100)) != *(_DWORD *)(a1 + 108))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v29, "input_label_embeddings->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
    goto LABEL_28;
  }
  int v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)*a2 + 184))(*a2, *(unsigned int *)(a1 + 96));
  if (v8 != (*(unsigned int (**)(uint64_t, void))(*(void *)*a3 + 184))(*a3, *(unsigned int *)(a1 + 96)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v29, "input_acoustic_embeddings->GetDimSize(cfg_.input_shape_template.row_index) == input_label_embeddings->GetDimSize(cfg_.input_shape_template.row_index)");
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v29);
  }
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  char v9 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v29, (long long *)a1, *a2);
  uint64_t v10 = v9;
  uint64_t v30 = (uint64_t)v9;
  uint64_t v11 = (long long *)(a1 + 24);
  uint64_t v12 = *a3;
  if ((unint64_t)v9 >= v31)
  {
    p_std::string::size_type size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v29, v11, v12);
  }
  else
  {
    if (*(char *)(a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
    }
    else
    {
      long long v13 = *v11;
      v9->__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v13;
    }
    v10[1].__r_.__value_.__r.__words[0] = v12;
    p_std::string::size_type size = (uint64_t)&v10[1].__r_.__value_.__l.__size_;
  }
  uint64_t v30 = p_size;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if (*(char *)(a1 + 95) < 0) {
    uint64_t v15 = *(void *)(a1 + 80);
  }
  else {
    uint64_t v15 = *(unsigned __int8 *)(a1 + 95);
  }
  if (v15) {
    uint64_t v16 = (long long *)(a1 + 72);
  }
  else {
    uint64_t v16 = (long long *)(a1 + 48);
  }
  uint64_t v27 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v26, v16);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v17 = *(void *)(a1 + 128);
  memset(v22, 0, sizeof(v22));
  (*(void (**)(uint64_t, uint64_t *, void ***, void ***, void ****))(*(void *)v17 + 128))(v17, &v29, &v26, v22, &v23);
  uint64_t v32 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  uint64_t v18 = *(void *)(v24 - 8);
  *(void *)(v24 - 8) = 0;
  uint64_t v19 = *a4;
  *a4 = v18;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v21 = v24 - 8;
  uint64_t v20 = *(void *)(v24 - 8);
  *(void *)(v24 - 8) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v24 = v21;
  v22[0] = (void **)&v23;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v22);
  uint64_t v23 = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  uint64_t v26 = (void **)&v29;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v26);
}

void sub_1B2236AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::CEJointPredictorNet::InputDim(kaldi::quasar::CEJointPredictorNet *this)
{
  return *((unsigned int *)this + 27);
}

void kaldi::quasar::CEJointPredictorNet::Predict(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(int *)(a2 + 20);
  if (v5 != *(_DWORD *)(a3 + 20))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_acoustic_embeddings.NumRows() == input_label_embeddings.NumRows()");
    goto LABEL_16;
  }
  uint64_t v7 = *(int *)(a2 + 16);
  if (v7 != *(_DWORD *)(a3 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_acoustic_embeddings.NumCols() == input_label_embeddings.NumCols()");
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 96), v5, v7, __p);
  uint64_t v16 = 0;
  kaldi::quasar::CreateBufferFromMatrix(a1 + 128, a2, (uint64_t)__p, &v16, &v17);
  uint64_t v10 = v16;
  uint64_t v16 = 0;
  if (v10) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v10 + 8))(v10);
  }
  uint64_t v14 = 0;
  kaldi::quasar::CreateBufferFromMatrix(a1 + 128, a3, (uint64_t)__p, &v14, &v15);
  uint64_t v11 = v14;
  uint64_t v14 = 0;
  if (v11) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v11 + 8))(v11);
  }
  kaldi::quasar::CEJointPredictorNet::Predict(a1, (uint64_t *)&v17, (uint64_t *)&v15, a4);
  uint64_t v12 = v15;
  uint64_t v15 = 0;
  if (v12) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v12 + 8))(v12);
  }
  long long v13 = v17;
  uint64_t v17 = 0;
  if (v13) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v13 + 8))(v13);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B2236D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a11) {
    JUMPOUT(0x1B2236D50);
  }
  JUMPOUT(0x1B2236D2CLL);
}

void sub_1B2236D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::CEJointPredictorNet::OutputDim(kaldi::quasar::CEJointPredictorNet *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t kaldi::quasar::CEJointPredictorNet::WarmUp(kaldi::quasar::CEJointPredictorNet *this)
{
  kaldi::CuMatrix<float>::CuMatrix(v5, 1, *((unsigned int *)this + 27), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v4, 1, *((unsigned int *)this + 27), 0, 0, 0);
  uint64_t v3 = 0;
  kaldi::quasar::CEJointPredictorNet::Predict((uint64_t)this, (uint64_t)v5, (uint64_t)v4, &v3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v4);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v5);
}

void sub_1B2236E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  if (a3) {
    kaldi::quasar::CEInferenceNet::Feedforward();
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::CEJointPredictorNet::OutputsAreLogProbs(kaldi::quasar::CEJointPredictorNet *this)
{
  if (*((char *)this + 95) < 0) {
    uint64_t v1 = *((void *)this + 10);
  }
  else {
    uint64_t v1 = *((unsigned __int8 *)this + 95);
  }
  return v1 != 0;
}

kaldi::quasar::CEAcousticEncoderNetConfig *kaldi::quasar::CEAcousticEncoderNetConfig::CEAcousticEncoderNetConfig(kaldi::quasar::CEAcousticEncoderNetConfig *this)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(this, "input_feats");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 6, "output_embeddings");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 9, "");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 12, "");
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 23) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEAcousticEncoderNetConfig *)((char *)this + 192));
  *(void *)((char *)this + 212) = -1;
  *(void *)((char *)this + 204) = -1;
  *(_OWORD *)((char *)this + 220) = xmmword_1B25A2D90;
  *((void *)this + 30) = 0;
  return this;
}

void sub_1B2236F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v16 = v13;
  a10 = (void **)(v10 + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 119) < 0) {
    operator delete(*v15);
  }
  if (*(char *)(v10 + 95) < 0) {
    operator delete(*v14);
  }
  if (*(char *)(v10 + 71) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEAcousticEncoderNetConfig::~CEAcousticEncoderNetConfig(kaldi::quasar::CEAcousticEncoderNetConfig *this)
{
  uint64_t v2 = *((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void **)((char *)this + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

kaldi::quasar::CEJointPredictorNetConfig *kaldi::quasar::CEJointPredictorNetConfig::CEJointPredictorNetConfig(kaldi::quasar::CEJointPredictorNetConfig *this)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(this, "input_acoustic_embeddings");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "input_label_embeddings");
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEJointPredictorNetConfig *)((char *)this + 96));
  *(void *)((char *)this + 108) = -1;
  *((void *)this + 15) = 0;
  return this;
}

void sub_1B2237170(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*(void **)(v1 + 72));
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 24);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t std::vector<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__emplace_back_slow_path<std::string&,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(uint64_t *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v11 = 0x555555555555555;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v15 = v12;
  uint64_t v16 = (std::string *)&v12[48 * v5];
  uint64_t v18 = &v12[48 * v11];
  std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>::pair[abi:ne180100]<std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>,0>(v16, a2, a3);
  uint64_t v17 = v16 + 2;
  std::vector<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__swap_out_circular_buffer(a1, &v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::~__split_buffer(&v15);
  return v13;
}

void sub_1B22373A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::destroy[abi:ne180100](v4, i - 48);
  }
}

void sub_1B223783C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
  {
    quasar::BitmapLoaderImpl::~BitmapLoaderImpl((quasar::BitmapLoaderImpl *)&a10);
    __cxa_begin_catch(exception_object);
    uint64_t v20 = EarGeoLMHelperLogger();
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    if (a2 == 2)
    {
      if (v21) {
        -[_EARGeoLMHelper initWithLocale:config:]();
      }

      __cxa_end_catch();
    }
    else
    {
      if (v21) {
        -[_EARGeoLMHelper initWithLocale:config:]();
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B2237788);
  }
  _Unwind_Resume(exception_object);
}

id EarGeoLMHelperLogger(void)
{
  uint64_t v0 = &unk_1E9C2D000;
  {
    uint64_t v0 = (void *)&unk_1E9C2D000;
    if (v3)
    {
      EarGeoLMHelperLogger(void)::logger = (uint64_t)os_log_create("com.apple.siri", "quasar.geolm.helper");
      uint64_t v0 = (void *)&unk_1E9C2D000;
    }
  }
  uint64_t v1 = (void *)v0[427];
  return v1;
}

void sub_1B2237BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2)
  {
    if (a17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a17);
    }
    if (a25 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    uint64_t v27 = EarGeoLMHelperLogger();
    BOOL v28 = os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
    if (a2 == 2)
    {
      if (v28) {
        -[_EARGeoLMHelper initWithLocale:config:]();
      }
    }
    else if (v28)
    {
      -[_EARGeoLMHelper initWithLocale:config:]();
    }

    __cxa_end_catch();
    JUMPOUT(0x1B2237AA0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2237EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2238070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
  {
    if (a16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a16);
    }
    if (a22 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    uint64_t v24 = EarGeoLMHelperLogger();
    BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    if (a2 == 2)
    {
      if (v25) {
        -[_EARGeoLMHelper initWithLocale:config:]();
      }

      __cxa_end_catch();
    }
    else
    {
      if (v25) {
        -[_EARGeoLMHelper initWithLocale:config:]();
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B223802CLL);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<quasar::Geography>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v6 = (void **)(a2 + 128);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
    int v3 = *(std::__shared_weak_count **)(a2 + 112);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a2 + 80, *(void **)(a2 + 88));
    std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(a2 + 56, *(void **)(a2 + 64));
    uint64_t v6 = (void **)(a2 + 32);
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 24);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    if (v5) {
      MEMORY[0x1B3EA8670](v5, 0x1000C4052888210);
    }
    MEMORY[0x1B3EA8670](a2, 0x1020C407EC4A46FLL);
  }
}

uint64_t kaldi::WriteCompactLattice(void *a1, int a2, uint64_t a3)
{
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "<unspecifed>");
    char v5 = FLAGS_fst_align;
    if (SHIBYTE(v19[0].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v19[0].__r_.__value_.__l.__data_, v19[0].__r_.__value_.__l.__size_);
      __int16 v14 = 257;
      char v15 = 1;
      char v16 = v5;
      if (SHIBYTE(v19[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19[0].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string __p = v19[0];
      __int16 v14 = 257;
      char v15 = 1;
      char v16 = FLAGS_fst_align;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, std::string *))(*(void *)a3 + 96))(a3, a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v11 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_25;
    }
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 64))(a3, 0x10000, 1);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120))(a3);
    std::string::basic_string[abi:ne180100]<0>(&__p, "\t");
    std::string::basic_string[abi:ne180100]<0>(&v17, "");
    fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FstPrinter((uint64_t)v19, a3, v7, v8, 0, (v6 >> 16) & 1, 0, (long long *)&__p, &v17);
    if (v18 < 0) {
      operator delete((void *)v17);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "<unknown>");
    fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Print(v19, (std::string::size_type)a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Stream failure detected.", 24);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    __p.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
    uint64_t v10 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) == 0;
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v21 < 0)
    {
      unint64_t v11 = v20;
LABEL_25:
      operator delete(v11);
    }
  }
  return v10;
}

void sub_1B22385A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 - 169) < 0) {
    operator delete(*(void **)(v16 - 192));
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Print(std::string *a1, std::string::size_type a2, std::string *__str)
{
  a1[1].__r_.__value_.__r.__words[2] = a2;
  std::string::operator=(a1 + 2, __str);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1->__r_.__value_.__l.__data_ + 24))();
  if (result == -1) {
    return result;
  }
  int v5 = result;
  fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintState((uint64_t)a1, result);
  std::string::size_type v6 = a1->__r_.__value_.__r.__words[0];
  unsigned int v11 = 0;
  (*(void (**)(std::string::size_type, uint64_t *))(*(void *)v6 + 128))(v6, &v9);
  while (1)
  {
    uint64_t result = v9;
    if (!v9)
    {
      if ((int)v11 >= v10) {
        return result;
      }
      goto LABEL_8;
    }
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t result = v9;
    if (v7) {
      break;
    }
    if (v9)
    {
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v9 + 24))();
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v8 = v11;
LABEL_9:
    if (v8 != v5) {
      fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintState((uint64_t)a1, v8);
    }
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 32))(v9);
    }
    else {
      ++v11;
    }
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*(void *)v9 + 8))();
  }
  return result;
}

void sub_1B22387D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::~FstPrinter(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  return a1;
}

uint64_t kaldi::WriteLattice(void *a1, int a2, uint64_t a3)
{
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "<unspecifed>");
    char v5 = FLAGS_fst_align;
    if (SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v18[0].__r_.__value_.__l.__data_, v18[0].__r_.__value_.__l.__size_);
      __int16 v13 = 257;
      char v14 = 1;
      char v15 = v5;
      if (SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18[0].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string __p = v18[0];
      __int16 v13 = 257;
      char v14 = 1;
      char v15 = FLAGS_fst_align;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void *, std::string *))(*(void *)a3 + 96))(a3, a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      int v10 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_25;
    }
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120))(a3);
    std::string::basic_string[abi:ne180100]<0>(&__p, "\t");
    std::string::basic_string[abi:ne180100]<0>(&v16, "");
    fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FstPrinter((uint64_t)v18, a3, v6, v7, 0, 0, 0, (long long *)&__p, &v16);
    if (v17 < 0) {
      operator delete((void *)v16);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "<unknown>");
    fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Print(v18, (std::string::size_type)a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Stream failure detected.", 24);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    __p.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
    uint64_t v9 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) == 0;
    if (v24 < 0) {
      operator delete(v23);
    }
    if (v22 < 0) {
      operator delete(v21);
    }
    if (v20 < 0)
    {
      int v10 = v19;
LABEL_25:
      operator delete(v10);
    }
  }
  return v9;
}

void sub_1B2238B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 - 153) < 0) {
    operator delete(*(void **)(v16 - 176));
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Print(std::string *a1, std::string::size_type a2, std::string *__str)
{
  a1[1].__r_.__value_.__r.__words[2] = a2;
  std::string::operator=(a1 + 2, __str);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1->__r_.__value_.__l.__data_ + 24))();
  if (result == -1) {
    return result;
  }
  int v5 = result;
  fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintState((uint64_t)a1, result);
  std::string::size_type v6 = a1->__r_.__value_.__r.__words[0];
  unsigned int v11 = 0;
  (*(void (**)(std::string::size_type, uint64_t *))(*(void *)v6 + 128))(v6, &v9);
  while (1)
  {
    uint64_t result = v9;
    if (!v9)
    {
      if ((int)v11 >= v10) {
        return result;
      }
      goto LABEL_8;
    }
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t result = v9;
    if (v7) {
      break;
    }
    if (v9)
    {
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v9 + 24))();
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v8 = v11;
LABEL_9:
    if (v8 != v5) {
      fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintState((uint64_t)a1, v8);
    }
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 32))(v9);
    }
    else {
      ++v11;
    }
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*(void *)v9 + 8))();
  }
  return result;
}

void sub_1B2238D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Print(std::string *a1, std::string::size_type a2, std::string *__str)
{
  a1[1].__r_.__value_.__r.__words[2] = a2;
  std::string::operator=(a1 + 2, __str);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1->__r_.__value_.__l.__data_ + 24))();
  if (result == -1) {
    return result;
  }
  int v5 = result;
  fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintState(a1, result);
  std::string::size_type v6 = a1->__r_.__value_.__r.__words[0];
  unsigned int v11 = 0;
  (*(void (**)(std::string::size_type, uint64_t *))(*(void *)v6 + 128))(v6, &v9);
  while (1)
  {
    uint64_t result = v9;
    if (!v9)
    {
      if ((int)v11 >= v10) {
        return result;
      }
      goto LABEL_8;
    }
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t result = v9;
    if (v7) {
      break;
    }
    if (v9)
    {
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v9 + 24))();
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v8 = v11;
LABEL_9:
    if (v8 != v5) {
      fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintState(a1, v8);
    }
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 32))(v9);
    }
    else {
      ++v11;
    }
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*(void *)v9 + 8))();
  }
  return result;
}

void sub_1B2238F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FstPrinter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, long long *a8, long long *a9)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  if (a6) {
    BOOL v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1) != 0;
  }
  else {
    BOOL v12 = 0;
  }
  *(unsigned char *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(unsigned char *)(a1 + 72) = a7;
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v13 = *a8;
    *(void *)(a1 + 96) = *((void *)a8 + 2);
    *(_OWORD *)(a1 + 80) = v13;
  }
  char v14 = (std::string *)(a1 + 104);
  if (*((char *)a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a9, *((void *)a9 + 1));
  }
  else
  {
    long long v15 = *a9;
    *(void *)(a1 + 120) = *((void *)a9 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  return a1;
}

void sub_1B223906C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*(void **)(v1 + 48));
  }
  _Unwind_Resume(exception_object);
}

void fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintState(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v5 = a1 + 80;
  uint64_t v4 = *(void *)a1;
  unint64_t v34 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v4 + 136))(v4, a2, v32);
  int v6 = 1;
  while (1)
  {
    if (!v32[0])
    {
      if (v34 >= v32[2]) {
        goto LABEL_46;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v32[0] + 24))(v32[0])) {
      break;
    }
    if (v32[0])
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v32[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = v32[1] + 48 * v34;
LABEL_8:
    uint64_t v26 = *(void *)v7;
    uint64_t v27 = *(void **)(v7 + 8);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v7 + 16), *(void *)(v7 + 24), (uint64_t)(*(void *)(v7 + 24) - *(void *)(v7 + 16)) >> 2);
    int v31 = *(_DWORD *)(v7 + 40);
    fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintId(a1, v2, *(void *)(a1 + 24));
    int v8 = *(char *)(a1 + 103);
    if (v8 >= 0) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = *(void *)(a1 + 80);
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 103);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 88);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), v9, v10);
    fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintId(a1, v31, *(void *)(a1 + 24));
    int v11 = *(char *)(a1 + 103);
    if (v11 >= 0) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = *(void *)(a1 + 80);
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a1 + 103);
    }
    else {
      uint64_t v13 = *(void *)(a1 + 88);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), v12, v13);
    fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintId(a1, (int)v26, *(void *)(a1 + 8));
    if (!*(unsigned char *)(a1 + 32))
    {
      int v14 = *(char *)(a1 + 103);
      if (v14 >= 0) {
        uint64_t v15 = v5;
      }
      else {
        uint64_t v15 = *(void *)(a1 + 80);
      }
      if (v14 >= 0) {
        uint64_t v16 = *(unsigned __int8 *)(a1 + 103);
      }
      else {
        uint64_t v16 = *(void *)(a1 + 88);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), v15, v16);
      fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintId(a1, SHIDWORD(v26), *(void *)(a1 + 16));
    }
    if (*(unsigned char *)(a1 + 72)
      || (v37 = *((float *)&v27 + 1), v38 = *(float *)&v27, v36 = 0.0, float v35 = 0.0, *(float *)&v27 != 0.0)
      || v37 != v35
      || v29 != __p)
    {
      int v17 = *(char *)(a1 + 103);
      if (v17 >= 0) {
        uint64_t v18 = v5;
      }
      else {
        uint64_t v18 = *(void *)(a1 + 80);
      }
      if (v17 >= 0) {
        uint64_t v19 = *(unsigned __int8 *)(a1 + 103);
      }
      else {
        uint64_t v19 = *(void *)(a1 + 88);
      }
      char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), v18, v19);
      fst::operator<<<fst::LatticeWeightTpl<float>,int>(v20, (uint64_t)&v27);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"\n", 1);
    if (__p)
    {
      uint64_t v29 = __p;
      operator delete(__p);
    }
    if (v32[0])
    {
      (*(void (**)(void))(*(void *)v32[0] + 40))(v32[0]);
      int v6 = 0;
    }
    else
    {
      int v6 = 0;
      ++v34;
    }
  }
  if (v32[0])
  {
    (*(void (**)(void))(*(void *)v32[0] + 8))();
    goto LABEL_48;
  }
LABEL_46:
  if (v33) {
    --*v33;
  }
LABEL_48:
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a1 + 32))(&v26);
  float v38 = *((float *)&v26 + 1);
  LODWORD(v32[0]) = v26;
  float v37 = INFINITY;
  float v36 = INFINITY;
  if (*(float *)&v26 != INFINITY || v38 != v36 || (char v21 = __p, ((__p == v27) & ~v6) == 0))
  {
    fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintId(a1, v2, *(void *)(a1 + 24));
    if (*(unsigned char *)(a1 + 72)
      || (v38 = *((float *)&v26 + 1), LODWORD(v32[0]) = v26, v37 = 0.0, float v36 = 0.0, *(float *)&v26 != 0.0)
      || v38 != v36
      || __p != v27)
    {
      int v22 = *(char *)(a1 + 103);
      if (v22 >= 0) {
        uint64_t v23 = v5;
      }
      else {
        uint64_t v23 = *(void *)(a1 + 80);
      }
      if (v22 >= 0) {
        uint64_t v24 = *(unsigned __int8 *)(a1 + 103);
      }
      else {
        uint64_t v24 = *(void *)(a1 + 88);
      }
      char v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), v23, v24);
      fst::operator<<<fst::LatticeWeightTpl<float>,int>(v25, (uint64_t)&v26);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"\n", 1);
    char v21 = v27;
  }
  if (v21)
  {
    std::string __p = v21;
    operator delete(v21);
  }
}

void sub_1B2239544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)a3 + 88))(&v24, a3, a2);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v24.__r_.__value_.__l.__size_) {
        goto LABEL_9;
      }
    }
    else if (!*((unsigned char *)&v24.__r_.__value_.__s + 23))
    {
LABEL_9:
      if (*(char *)(a1 + 127) < 0)
      {
        if (*(void *)(a1 + 112)) {
          goto LABEL_11;
        }
      }
      else if (*(unsigned char *)(a1 + 127))
      {
LABEL_11:
        std::string::operator=(&v24, (const std::string *)(a1 + 104));
        goto LABEL_31;
      }
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v5 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)__p);
      int v6 = (void *)fst::cerr(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"FstPrinter: Integer ", 20);
      uint64_t v7 = (void *)std::ostream::operator<<();
      int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" is not mapped to any textual symbol", 36);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", symbol table = ", 17);
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3);
      int v11 = *(char *)(v10 + 23);
      if (v11 >= 0) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = *(void *)v10;
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        uint64_t v13 = *(void *)(v10 + 8);
      }
      int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v12, v13);
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", destination = ", 16);
      int v16 = *(char *)(a1 + 71);
      if (v16 >= 0) {
        uint64_t v17 = a1 + 48;
      }
      else {
        uint64_t v17 = *(void *)(a1 + 48);
      }
      if (v16 >= 0) {
        uint64_t v18 = *(unsigned __int8 *)(a1 + 71);
      }
      else {
        uint64_t v18 = *(void *)(a1 + 56);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      MEMORY[0x1B3EA7B20](&v24, "?");
    }
LABEL_31:
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v24;
    }
    else {
      uint64_t v19 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v24.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)v19, size);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    return;
  }
  std::ostream::operator<<();
}

void sub_1B2239804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FstPrinter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, long long *a8, long long *a9)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  if (a6) {
    BOOL v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1) != 0;
  }
  else {
    BOOL v12 = 0;
  }
  *(unsigned char *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(unsigned char *)(a1 + 72) = a7;
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v13 = *a8;
    *(void *)(a1 + 96) = *((void *)a8 + 2);
    *(_OWORD *)(a1 + 80) = v13;
  }
  int v14 = (std::string *)(a1 + 104);
  if (*((char *)a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a9, *((void *)a9 + 1));
  }
  else
  {
    long long v15 = *a9;
    *(void *)(a1 + 120) = *((void *)a9 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  return a1;
}

void sub_1B2239948(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*(void **)(v1 + 48));
  }
  _Unwind_Resume(exception_object);
}

void *fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintState(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v5 = a1 + 80;
  uint64_t v4 = *(void *)a1;
  unint64_t v31 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v4 + 136))(v4, a2, v29);
  char v6 = 1;
  while (1)
  {
    if (!v29[0])
    {
      if (v31 >= v29[2]) {
        goto LABEL_43;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v29[0] + 24))(v29[0])) {
      break;
    }
    if (v29[0])
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v29[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = v29[1] + 20 * v31;
LABEL_8:
    uint64_t v26 = *(void *)v7;
    uint64_t v27 = *(void *)(v7 + 8);
    int v28 = *(_DWORD *)(v7 + 16);
    fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintId(a1, v2, *(void *)(a1 + 24));
    int v8 = *(char *)(a1 + 103);
    if (v8 >= 0) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = *(void *)(a1 + 80);
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 103);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 88);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), v9, v10);
    fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintId(a1, v28, *(void *)(a1 + 24));
    int v11 = *(char *)(a1 + 103);
    if (v11 >= 0) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = *(void *)(a1 + 80);
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a1 + 103);
    }
    else {
      uint64_t v13 = *(void *)(a1 + 88);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), v12, v13);
    fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintId(a1, (int)v26, *(void *)(a1 + 8));
    if (!*(unsigned char *)(a1 + 32))
    {
      int v14 = *(char *)(a1 + 103);
      if (v14 >= 0) {
        uint64_t v15 = v5;
      }
      else {
        uint64_t v15 = *(void *)(a1 + 80);
      }
      if (v14 >= 0) {
        uint64_t v16 = *(unsigned __int8 *)(a1 + 103);
      }
      else {
        uint64_t v16 = *(void *)(a1 + 88);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), v15, v16);
      fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintId(a1, SHIDWORD(v26), *(void *)(a1 + 16));
    }
    if (*(unsigned char *)(a1 + 72)
      || (v34 = *((float *)&v27 + 1), v35 = *(float *)&v27, v33 = 0.0, float v32 = 0.0, *(float *)&v27 != 0.0)
      || v34 != v32)
    {
      int v17 = *(char *)(a1 + 103);
      if (v17 >= 0) {
        uint64_t v18 = v5;
      }
      else {
        uint64_t v18 = *(void *)(a1 + 80);
      }
      if (v17 >= 0) {
        uint64_t v19 = *(unsigned __int8 *)(a1 + 103);
      }
      else {
        uint64_t v19 = *(void *)(a1 + 88);
      }
      char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), v18, v19);
      fst::operator<<<float>(v20, (float *)&v27);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"\n", 1);
    if (v29[0])
    {
      (*(void (**)(void))(*(void *)v29[0] + 40))(v29[0]);
      char v6 = 0;
    }
    else
    {
      char v6 = 0;
      ++v31;
    }
  }
  if (v29[0])
  {
    (*(void (**)(void))(*(void *)v29[0] + 8))();
    goto LABEL_45;
  }
LABEL_43:
  if (v30) {
    --*v30;
  }
LABEL_45:
  uint64_t result = (*(void *(**)(void *__return_ptr))(**(void **)a1 + 32))(v29);
  float v35 = *((float *)v29 + 1);
  float v34 = INFINITY;
  float v33 = INFINITY;
  if (*(float *)v29 != INFINITY || v6 & 1 | (v35 != v33))
  {
    fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintId(a1, v2, *(void *)(a1 + 24));
    if (*(unsigned char *)(a1 + 72) || (v35 = *((float *)v29 + 1), v34 = 0.0, float v33 = 0.0, *(float *)v29 != 0.0) || v35 != v33)
    {
      int v22 = *(char *)(a1 + 103);
      if (v22 >= 0) {
        uint64_t v23 = v5;
      }
      else {
        uint64_t v23 = *(void *)(a1 + 80);
      }
      if (v22 >= 0) {
        uint64_t v24 = *(unsigned __int8 *)(a1 + 103);
      }
      else {
        uint64_t v24 = *(void *)(a1 + 88);
      }
      char v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), v23, v24);
      fst::operator<<<float>(v25, (float *)v29);
    }
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"\n", 1);
  }
  return result;
}

void sub_1B2239DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::IsIsymbolOrFinal((uint64_t *)va);
  _Unwind_Resume(a1);
}

void fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)a3 + 88))(&v24, a3, a2);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v24.__r_.__value_.__l.__size_) {
        goto LABEL_9;
      }
    }
    else if (!*((unsigned char *)&v24.__r_.__value_.__s + 23))
    {
LABEL_9:
      if (*(char *)(a1 + 127) < 0)
      {
        if (*(void *)(a1 + 112)) {
          goto LABEL_11;
        }
      }
      else if (*(unsigned char *)(a1 + 127))
      {
LABEL_11:
        std::string::operator=(&v24, (const std::string *)(a1 + 104));
        goto LABEL_31;
      }
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v5 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)__p);
      char v6 = (void *)fst::cerr(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"FstPrinter: Integer ", 20);
      uint64_t v7 = (void *)std::ostream::operator<<();
      int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" is not mapped to any textual symbol", 36);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", symbol table = ", 17);
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3);
      int v11 = *(char *)(v10 + 23);
      if (v11 >= 0) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = *(void *)v10;
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        uint64_t v13 = *(void *)(v10 + 8);
      }
      int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v12, v13);
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", destination = ", 16);
      int v16 = *(char *)(a1 + 71);
      if (v16 >= 0) {
        uint64_t v17 = a1 + 48;
      }
      else {
        uint64_t v17 = *(void *)(a1 + 48);
      }
      if (v16 >= 0) {
        uint64_t v18 = *(unsigned __int8 *)(a1 + 71);
      }
      else {
        uint64_t v18 = *(void *)(a1 + 56);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      MEMORY[0x1B3EA7B20](&v24, "?");
    }
LABEL_31:
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v24;
    }
    else {
      uint64_t v19 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v24.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)v19, size);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    return;
  }
  std::ostream::operator<<();
}

void sub_1B223A010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FstPrinter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, long long *a8, long long *a9)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  if (a6) {
    BOOL v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x10000, 1) != 0;
  }
  else {
    BOOL v12 = 0;
  }
  *(unsigned char *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(unsigned char *)(a1 + 72) = a7;
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v13 = *a8;
    *(void *)(a1 + 96) = *((void *)a8 + 2);
    *(_OWORD *)(a1 + 80) = v13;
  }
  int v14 = (std::string *)(a1 + 104);
  if (*((char *)a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a9, *((void *)a9 + 1));
  }
  else
  {
    long long v15 = *a9;
    *(void *)(a1 + 120) = *((void *)a9 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  return a1;
}

void sub_1B223A154(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*(void **)(v1 + 48));
  }
  _Unwind_Resume(exception_object);
}

void fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintState(void *a1, uint64_t a2)
{
  uint64_t v5 = a1 + 10;
  uint64_t v4 = *a1;
  unint64_t v36 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v4 + 136))(v4, a2, v34);
  char v6 = 1;
  while (1)
  {
    if (!v34[0])
    {
      if (v36 >= v34[2]) {
        goto LABEL_47;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v34[0] + 24))(v34[0])) {
      break;
    }
    if (v34[0])
    {
      uint64_t v7 = (float *)(*(uint64_t (**)(void))(*(void *)v34[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = (float *)(v34[1] + 16 * v36);
LABEL_8:
    uint64_t v9 = *(int *)v7;
    uint64_t v8 = *((int *)v7 + 1);
    float v10 = v7[2];
    uint64_t v11 = *((int *)v7 + 3);
    fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintId((uint64_t)a1, (int)a2, a1[3]);
    int v12 = *((char *)a1 + 103);
    if (v12 >= 0) {
      uint64_t v13 = (uint64_t)v5;
    }
    else {
      uint64_t v13 = a1[10];
    }
    if (v12 >= 0) {
      uint64_t v14 = *((unsigned __int8 *)a1 + 103);
    }
    else {
      uint64_t v14 = a1[11];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a1[5], v13, v14);
    fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintId((uint64_t)a1, v11, a1[3]);
    int v15 = *((char *)a1 + 103);
    if (v15 >= 0) {
      uint64_t v16 = (uint64_t)v5;
    }
    else {
      uint64_t v16 = a1[10];
    }
    if (v15 >= 0) {
      uint64_t v17 = *((unsigned __int8 *)a1 + 103);
    }
    else {
      uint64_t v17 = a1[11];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a1[5], v16, v17);
    fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintId((uint64_t)a1, v9, a1[1]);
    if (!*((unsigned char *)a1 + 32))
    {
      int v18 = *((char *)a1 + 103);
      if (v18 >= 0) {
        uint64_t v19 = (uint64_t)v5;
      }
      else {
        uint64_t v19 = a1[10];
      }
      if (v18 >= 0) {
        uint64_t v20 = *((unsigned __int8 *)a1 + 103);
      }
      else {
        uint64_t v20 = a1[11];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a1[5], v19, v20);
      fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintId((uint64_t)a1, v8, a1[2]);
    }
    if (*((unsigned char *)a1 + 72) || (v38 = LODWORD(v10), int v37 = 0, v10 != 0.0))
    {
      int v21 = *((char *)a1 + 103);
      if (v21 >= 0) {
        uint64_t v22 = (uint64_t)v5;
      }
      else {
        uint64_t v22 = a1[10];
      }
      if (v21 >= 0) {
        uint64_t v23 = *((unsigned __int8 *)a1 + 103);
      }
      else {
        uint64_t v23 = a1[11];
      }
      std::string v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a1[5], v22, v23);
      if (v10 == INFINITY)
      {
        char v25 = "Infinity";
        uint64_t v26 = 8;
      }
      else
      {
        if (v10 != -INFINITY)
        {
          std::ostream::operator<<();
          goto LABEL_41;
        }
        char v25 = "-Infinity";
        uint64_t v26 = 9;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    }
LABEL_41:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a1[5], (uint64_t)"\n", 1);
    if (v34[0])
    {
      (*(void (**)(void))(*(void *)v34[0] + 40))(v34[0]);
      char v6 = 0;
    }
    else
    {
      char v6 = 0;
      ++v36;
    }
  }
  if (v34[0])
  {
    (*(void (**)(void))(*(void *)v34[0] + 8))();
    goto LABEL_49;
  }
LABEL_47:
  if (v35) {
    --*v35;
  }
LABEL_49:
  float v27 = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a2);
  *(float *)float v34 = v27;
  int v38 = 2139095040;
  if (v6 & 1 | (v27 != INFINITY))
  {
    fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintId((uint64_t)a1, (int)a2, a1[3]);
    if (*((unsigned char *)a1 + 72) || (*(float *)float v34 = v27, v38 = 0, v27 != 0.0))
    {
      int v28 = *((char *)a1 + 103);
      if (v28 >= 0) {
        uint64_t v29 = (uint64_t)v5;
      }
      else {
        uint64_t v29 = a1[10];
      }
      if (v28 >= 0) {
        uint64_t v30 = *((unsigned __int8 *)a1 + 103);
      }
      else {
        uint64_t v30 = a1[11];
      }
      unint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a1[5], v29, v30);
      if (v27 == INFINITY)
      {
        float v32 = "Infinity";
        uint64_t v33 = 8;
        goto LABEL_62;
      }
      if (v27 == -INFINITY)
      {
        float v32 = "-Infinity";
        uint64_t v33 = 9;
LABEL_62:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      }
      else
      {
        std::ostream::operator<<();
      }
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a1[5], (uint64_t)"\n", 1);
  }
}

void sub_1B223A5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)a3 + 88))(&v24, a3, a2);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v24.__r_.__value_.__l.__size_) {
        goto LABEL_9;
      }
    }
    else if (!*((unsigned char *)&v24.__r_.__value_.__s + 23))
    {
LABEL_9:
      if (*(char *)(a1 + 127) < 0)
      {
        if (*(void *)(a1 + 112)) {
          goto LABEL_11;
        }
      }
      else if (*(unsigned char *)(a1 + 127))
      {
LABEL_11:
        std::string::operator=(&v24, (const std::string *)(a1 + 104));
        goto LABEL_31;
      }
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v5 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)__p);
      char v6 = (void *)fst::cerr(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"FstPrinter: Integer ", 20);
      uint64_t v7 = (void *)std::ostream::operator<<();
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" is not mapped to any textual symbol", 36);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", symbol table = ", 17);
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3);
      int v11 = *(char *)(v10 + 23);
      if (v11 >= 0) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = *(void *)v10;
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        uint64_t v13 = *(void *)(v10 + 8);
      }
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v12, v13);
      int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", destination = ", 16);
      int v16 = *(char *)(a1 + 71);
      if (v16 >= 0) {
        uint64_t v17 = a1 + 48;
      }
      else {
        uint64_t v17 = *(void *)(a1 + 48);
      }
      if (v16 >= 0) {
        uint64_t v18 = *(unsigned __int8 *)(a1 + 71);
      }
      else {
        uint64_t v18 = *(void *)(a1 + 56);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      MEMORY[0x1B3EA7B20](&v24, "?");
    }
LABEL_31:
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v24;
    }
    else {
      uint64_t v19 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v24.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)v19, size);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    return;
  }
  std::ostream::operator<<();
}

void sub_1B223A840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeContainer::LmeContainer(uint64_t a1, void *a2, long long *a3, int a4)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::string *)(a1 + 16);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 32) = *((void *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_DWORD *)(a1 + 40) = a4;
  return a1;
}

void sub_1B223A904(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

quasar::LmeDataStreams *quasar::LmeDataStreams::LmeDataStreams(quasar::LmeDataStreams *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  int v2 = operator new(0x10uLL);
  *(void *)this = v2;
  *v2++ = xmmword_1B25A2DA0;
  *((void *)this + 1) = v2;
  *((void *)this + 2) = v2;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = (char *)this + 32;
  return this;
}

void *quasar::LmeDataFactoryBase::LmeDataFactoryBase(void *this)
{
  *this = &unk_1F0A53F70;
  return this;
}

void *quasar::LmeDataFactoryBase::PronSet::PronSet(void *this)
{
  this[2] = 0;
  this[1] = 0;
  *this = this + 1;
  return this;
}

uint64_t quasar::LmeDataFactoryBase::PronSet::PronSet(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  while (v3 != v4)
  {
    quasar::LmeDataFactoryBase::PronSet::insert((uint64_t **)a1, 1, v3, 0.0);
    v3 += 24;
  }
  return a1;
}

void sub_1B223AA10(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactoryBase::PronSet::insert(uint64_t **a1, int a2, uint64_t a3, float a4)
{
  float v12 = a4;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::size_type v5 = *(void *)(a3 + 8);
    if (!v5) {
      return 0;
    }
    int v10 = a2;
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, v5);
  }
  else
  {
    if (!*(unsigned char *)(a3 + 23)) {
      return 0;
    }
    int v10 = a2;
    std::string __p = *(std::string *)a3;
  }
  uint64_t v6 = std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__emplace_unique_key_args<std::pair<quasar::PronType,std::string>,std::pair<quasar::PronType,std::string>,float &>(a1, (uint64_t)&v10, (uint64_t)&v10, &v12);
  char v8 = v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8) {
    return 1;
  }
  if (*((float *)v6 + 16) > v12)
  {
    *((float *)v6 + 16) = v12;
    return 1;
  }
  return 0;
}

void sub_1B223AAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LmeDataFactoryBase::PronSet::PronSet(uint64_t a1, void *a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      quasar::LmeDataFactoryBase::PronSet::insert((uint64_t **)a1, 1, (uint64_t)(v4 + 4), 0.0);
      std::string::size_type v5 = (void *)v4[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          std::string::size_type v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v4 = v6;
    }
    while (v6 != v3);
  }
  return a1;
}

void sub_1B223ABA0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *quasar::LmeDataFactoryBase::PronSet::PronSet(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
  quasar::LmeDataFactoryBase::PronSet::insert((uint64_t)a1, a2);
  return a1;
}

void sub_1B223ABF0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactoryBase::PronSet::insert(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = (uint64_t **)result;
    do
    {
      uint64_t result = quasar::LmeDataFactoryBase::PronSet::insert(v4, *(_DWORD *)v2, v2 + 8, *(float *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t quasar::LmeDataFactoryBase::PronSet::toPronChoices@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = (void *)(result + 8);
  uint64_t v4 = *(void **)result;
  if (*(void *)result != result + 8)
  {
    uint64_t v7 = (uint64_t)(a3 + 2);
    do
    {
      uint64_t result = quasar::pronTypeMatchesPronRequest(*((_DWORD *)v4 + 8), a2);
      if (result)
      {
        unint64_t v8 = a3[1];
        if (v8 >= a3[2])
        {
          uint64_t result = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType const&,std::string const&,float const&>(a3, (int *)v4 + 8, (uint64_t)(v4 + 5), (int *)v4 + 16);
        }
        else
        {
          std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType const&,std::string const&,float const&>(v7, a3[1], (int *)v4 + 8, (uint64_t)(v4 + 5), (int *)v4 + 16);
          uint64_t result = v8 + 40;
          a3[1] = v8 + 40;
        }
        a3[1] = result;
      }
      uint64_t v9 = (void *)v4[1];
      if (v9)
      {
        do
        {
          int v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (void *)v4[2];
          BOOL v11 = *v10 == (void)v4;
          uint64_t v4 = v10;
        }
        while (!v11);
      }
      uint64_t v4 = v10;
    }
    while (v10 != v3);
  }
  return result;
}

void sub_1B223AD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 8) = v11;
  a10 = (void **)v10;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactoryBase::PronSet::size(quasar::LmeDataFactoryBase::PronSet *this)
{
  return *((void *)this + 2);
}

BOOL quasar::LmeDataFactoryBase::PronSet::empty(quasar::LmeDataFactoryBase::PronSet *this)
{
  return *((void *)this + 2) == 0;
}

void quasar::LmeDataFactoryBase::PronSet::clear(char **this)
{
  uint64_t v2 = (char *)(this + 1);
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)this, this[1]);
  *this = v2;
  this[2] = 0;
  *(void *)uint64_t v2 = 0;
}

uint64_t quasar::LmeDataFactoryBase::PronSet::toString(void *a1, int a2, uint64_t a3)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
  unint64_t v8 = (void *)*a1;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = v8;
  if (v8 != v6)
  {
    char v9 = 1;
    do
    {
      if ((v9 & 1) == 0)
      {
        int v10 = *(char *)(a3 + 23);
        if (v10 >= 0) {
          uint64_t v11 = a3;
        }
        else {
          uint64_t v11 = *(void *)a3;
        }
        if (v10 >= 0) {
          uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v12 = *(void *)(a3 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v11, v12);
      }
      if (a2)
      {
        uint64_t v13 = quasar::PronTypeToString(*((_DWORD *)v7 + 8));
        size_t v14 = strlen(v13);
        int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v13, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
        int v16 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
      }
      int v17 = *((char *)v7 + 63);
      if (v17 >= 0) {
        uint64_t v18 = (uint64_t)(v7 + 5);
      }
      else {
        uint64_t v18 = v7[5];
      }
      if (v17 >= 0) {
        uint64_t v19 = *((unsigned __int8 *)v7 + 63);
      }
      else {
        uint64_t v19 = v7[6];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v18, v19);
      uint64_t v20 = (void *)v7[1];
      if (v20)
      {
        do
        {
          int v21 = v20;
          uint64_t v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          int v21 = (void *)v7[2];
          BOOL v22 = *v21 == (void)v7;
          uint64_t v7 = v21;
        }
        while (!v22);
      }
      char v9 = 0;
      uint64_t v7 = v21;
    }
    while (v21 != v6);
  }
  std::stringbuf::str();
  v24[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v24 + *(void *)(v24[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v24[1] = MEMORY[0x1E4FBA470] + 16;
  if (v25 < 0) {
    operator delete((void *)v24[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v26);
}

void sub_1B223AFF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

double quasar::LmeDataFactoryBase::Word::Word(quasar::LmeDataFactoryBase::Word *this)
{
  *((void *)this + 9) = 0;
  *((void *)this + 8) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 7) = (char *)this + 64;
  return result;
}

std::string *quasar::LmeDataFactoryBase::Word::Word(std::string *this, long long *a2, long long *a3, int a4, uint64_t *a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v10;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  quasar::LmeDataFactoryBase::PronSet::PronSet((uint64_t)&this[2].__r_.__value_.__l.__size_, a5);
  return this;
}

void sub_1B223B0D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *quasar::LmeDataFactoryBase::Word::Word(std::string *this, long long *a2, long long *a3, int a4, void *a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v10;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  quasar::LmeDataFactoryBase::PronSet::PronSet((uint64_t)&this[2].__r_.__value_.__l.__size_, a5);
  return this;
}

void sub_1B223B1B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *quasar::LmeDataFactoryBase::Word::Word(std::string *this, long long *a2, long long *a3, int a4, uint64_t a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v10;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100]((uint64_t *)&this[2].__r_.__value_.__l.__size_, a5);
  return this;
}

void sub_1B223B298(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *quasar::LmeDataFactoryBase::Word::Word(std::string *this, long long *a2, long long *a3, int a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  unint64_t v8 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__l.__size_ = (std::string::size_type)&this[2].__r_.__value_.__r.__words[2];
  return this;
}

void sub_1B223B36C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B223B4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *quasar::lmeTypeString(unsigned int a1)
{
  if (a1 >= 5)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Unknown LmeType: ", 17);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  return off_1E5FFFE98[a1];
}

void *quasar::operator<<(void *a1, unsigned int a2)
{
  uint64_t v3 = quasar::lmeTypeString(a2);
  size_t v4 = strlen(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  return a1;
}

uint64_t quasar::lmeTypeFromString(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 23);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (v2 != 6)
    {
      if (v2 != 7)
      {
        uint64_t v3 = (int *)a1;
        if (v2 != 8) {
          goto LABEL_49;
        }
LABEL_29:
        if (*(void *)v3 == 0x656D4C7465736E55) {
          return 4;
        }
        goto LABEL_49;
      }
      if (*(_DWORD *)a1 != 2054845762 || *(_DWORD *)(a1 + 3) != 1701661818)
      {
        if (*(_DWORD *)a1 != 1953064005 || *(_DWORD *)(a1 + 3) != 1701661812) {
          goto LABEL_49;
        }
        return 3;
      }
      return 2;
    }
    if (*(_DWORD *)a1 != 1282699073 || *(_WORD *)(a1 + 4) != 25965)
    {
      if (*(_DWORD *)a1 != 1282697546 || *(_WORD *)(a1 + 4) != 25965) {
        goto LABEL_49;
      }
      return 1;
    }
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 == 6)
  {
    std::string::size_type v5 = *(int **)a1;
    if (**(_DWORD **)a1 == 1282699073 && *(_WORD *)(*(void *)a1 + 4) == 25965) {
      return 0;
    }
    int v7 = *v5;
    int v8 = *((unsigned __int16 *)v5 + 2);
    if (v7 == 1282697546 && v8 == 25965) {
      return 1;
    }
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4 != 7) {
    goto LABEL_27;
  }
  if (**(_DWORD **)a1 == 2054845762 && *(_DWORD *)(*(void *)a1 + 3) == 1701661818) {
    return 2;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != 7) {
    goto LABEL_27;
  }
  if (**(_DWORD **)a1 == 1953064005 && *(_DWORD *)(*(void *)a1 + 3) == 1701661812) {
    return 3;
  }
  if ((v2 & 0x80) != 0)
  {
LABEL_27:
    if (v4 == 8)
    {
      uint64_t v3 = *(int **)a1;
      goto LABEL_29;
    }
  }
LABEL_49:
  if (quasar::gLogLevel >= 2)
  {
    memset(v21, 0, sizeof(v21));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Unknown LmeType: ", 17);
    int v18 = *(char *)(a1 + 23);
    if (v18 >= 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = *(void *)a1;
    }
    if (v18 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v20 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v21);
  }
  return 5;
}

void sub_1B223B83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::LmeDataStreams::addLmeStream(uint64_t a1, int a2)
{
  int v2 = a2;
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar7LmeDataENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
}

void sub_1B223B920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void **quasar::LmeDataStreams::addLmeContainer(void **result, signed int a2, long long *a3)
{
  int v36 = a2;
  if (a2 != 5)
  {
    std::string::size_type v5 = *result;
    uint64_t v4 = result[1];
    if (*result != v4)
    {
      while (*v5 != a2)
      {
        if (++v5 == v4)
        {
          std::string::size_type v5 = result[1];
          break;
        }
      }
    }
    if (v5 == v4)
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"lmeType: ", 9);
      int v18 = quasar::operator<<(v17, a2);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, " is not listed in lmeTypeInOffsetOrder.");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v19);
    }
    int v8 = (char *)result[4];
    uint64_t v6 = result + 4;
    int v7 = v8;
    long long v9 = (uint64_t **)(v6 - 1);
    if (!v8) {
      goto LABEL_17;
    }
    long long v10 = v6;
    do
    {
      signed int v11 = *((_DWORD *)v7 + 8);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        uint64_t v13 = (void **)v7;
      }
      else {
        uint64_t v13 = (void **)(v7 + 8);
      }
      if (!v12) {
        long long v10 = (void **)v7;
      }
      int v7 = (char *)*v13;
    }
    while (*v13);
    if (v10 == v6 || *((_DWORD *)v10 + 8) > a2)
    {
LABEL_17:
      *(void *)&long long v20 = 0;
      int v37 = &v36;
      size_t v14 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v6 - 1, &v36, (uint64_t)&std::piecewise_construct, &v37);
      std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)v14 + 5);
      *(_OWORD *)(v14 + 5) = 0uLL;
      v14[7] = (uint64_t *)v20;
      *(void *)&long long v20 = 0;
      long long v19 = 0uLL;
      int v38 = (void **)&v19;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v38);
    }
    *(void *)&long long v19 = &v36;
    int v15 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v9, &v36, (uint64_t)&std::piecewise_construct, (_DWORD **)&v19);
    return std::vector<std::shared_ptr<quasar::LmeContainer>>::push_back[abi:ne180100]((uint64_t *)v15 + 5, a3);
  }
  return result;
}

void sub_1B223BB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::LmeDataStreams::getLmeStreams(int **this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v2 = *this;
  uint64_t v3 = this[1];
  if (*this != v3)
  {
    std::string::size_type v5 = this + 4;
    do
    {
      uint64_t v6 = *v5;
      if (*v5)
      {
        int v7 = *v2;
        int v8 = v5;
        do
        {
          int v9 = *(_DWORD *)(v6 + 32);
          BOOL v10 = v9 < v7;
          if (v9 >= v7) {
            signed int v11 = (uint64_t *)v6;
          }
          else {
            signed int v11 = (uint64_t *)(v6 + 8);
          }
          if (!v10) {
            int v8 = (void *)v6;
          }
          uint64_t v6 = *v11;
        }
        while (*v11);
        if (v8 != v5 && v7 >= *((_DWORD *)v8 + 8))
        {
          BOOL v12 = (void *)v8[5];
          uint64_t v13 = (void *)v8[6];
          while (v12 != v13)
          {
            *(void *)&long long v15 = *v12;
            uint64_t v14 = v12[1];
            *((void *)&v15 + 1) = v14;
            if (v14) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
            }
            std::vector<std::shared_ptr<quasar::LmeContainer>>::push_back[abi:ne180100](a2, &v15);
            if (*((void *)&v15 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
            }
            v12 += 2;
          }
        }
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_1B223BC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__emplace_unique_key_args<std::pair<quasar::PronType,std::string>,std::pair<quasar::PronType,std::string>,float &>(uint64_t **a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v7 = (void **)std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_equal<std::pair<quasar::PronType,std::string>>((uint64_t)a1, &v11, a2);
  int v8 = (char *)*v7;
  if (!*v7)
  {
    int v9 = (uint64_t **)v7;
    int v8 = (char *)operator new(0x48uLL);
    *((_DWORD *)v8 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(a3 + 8);
    *((void *)v8 + 7) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *((_DWORD *)v8 + 16) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v9, (uint64_t *)v8);
  }
  return v8;
}

void *std::allocate_shared[abi:ne180100]<quasar::LmeContainer,std::allocator<quasar::LmeContainer>,std::shared_ptr<quasar::LmeData> &,std::string const&,quasar::LmeDataFactoryBase::LmeType &,void>@<X0>(void *a1@<X1>, long long *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  int v8 = operator new(0x48uLL);
  double result = std::__shared_ptr_emplace<quasar::LmeContainer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LmeData> &,std::string const&,quasar::LmeDataFactoryBase::LmeType &,std::allocator<quasar::LmeContainer>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B223BD58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::LmeContainer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LmeData> &,std::string const&,quasar::LmeDataFactoryBase::LmeType &,std::allocator<quasar::LmeContainer>,0>(void *a1, void *a2, long long *a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FA00;
  std::allocator<quasar::LmeContainer>::construct[abi:ne180100]<quasar::LmeContainer,std::shared_ptr<quasar::LmeData> &,std::string const&,quasar::LmeDataFactoryBase::LmeType &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1B223BDD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeContainer>::construct[abi:ne180100]<quasar::LmeContainer,std::shared_ptr<quasar::LmeData> &,std::string const&,quasar::LmeDataFactoryBase::LmeType &>(uint64_t a1, uint64_t a2, void *a3, long long *a4, int *a5)
{
  std::string::size_type v5 = (std::__shared_weak_count *)a3[1];
  v6[0] = *a3;
  v6[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::LmeContainer::LmeContainer(a2, v6, a4, *a5);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1B223BE60(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::split(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, unint64_t a4@<X8>)
{
  char v6 = (void *)a4;
  __dst[3] = *MEMORY[0x1E4F143B8];
  LODWORD(a4) = *((char *)a2 + 23);
  BOOL v7 = (a4 & 0x80000000) != 0;
  int v8 = (uint64_t *)*a2;
  int v9 = (void *)a2[1];
  if ((a4 & 0x80000000) == 0) {
    int v8 = a2;
  }
  *char v6 = 0;
  v6[1] = 0;
  void v6[2] = 0;
  a4 = a4;
  if (v7) {
    a4 = (unint64_t)v9;
  }
  v10[0] = v8;
  v10[1] = (char *)v8 + a4;
  boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__dst, (uint64_t)v10);
  boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>((uint64_t)v6, a1, __dst, a3 ^ 1);
}

void sub_1B223BF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, unint64_t a15)
{
  if (a15 >= 0x11)
  {
    if (a13) {
      MEMORY[0x1B3EA8630](a13, 0x1000C8077774924);
    }
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void quasar::trim(std::string *a1)
{
  MEMORY[0x1B3EA83E0](&v2);
  LODWORD(v3.__locale_) = 0x4000;
  std::locale::locale(&v4, &v2);
  boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(a1, &v3);
  std::locale::~locale(&v4);
  std::locale::~locale(&v2);
}

void sub_1B223BFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(v10);
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

BOOL quasar::startsWith(unsigned __int8 *a1, unsigned __int8 *a2)
{
  std::locale v2 = *(unsigned __int8 **)a1;
  if ((a1[23] & 0x80u) != 0)
  {
    uint64_t v3 = *((void *)a1 + 1);
  }
  else
  {
    std::locale v2 = a1;
    uint64_t v3 = a1[23];
  }
  int v4 = (char)a2[23];
  BOOL v5 = v4 < 0;
  char v6 = *(unsigned __int8 **)a2;
  if (v4 >= 0) {
    char v6 = a2;
  }
  uint64_t v7 = a2[23];
  if (v5) {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (v3) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    BOOL v12 = v6;
    return v12 == &v6[v7];
  }
  else
  {
    uint64_t v10 = v7 - 1;
    uint64_t v11 = v3 - 1;
    BOOL v12 = v6;
    while (*v2 == *v12)
    {
      ++v12;
      if (v11)
      {
        ++v2;
        uint64_t v13 = v10--;
        --v11;
        if (v13) {
          continue;
        }
      }
      return v12 == &v6[v7];
    }
    return 0;
  }
}

BOOL quasar::endsWith(uint64_t *a1, uint64_t *a2)
{
  int v2 = *((char *)a1 + 23);
  BOOL v3 = v2 < 0;
  if (v2 >= 0) {
    int v4 = a1;
  }
  else {
    int v4 = (uint64_t *)*a1;
  }
  uint64_t v5 = *((unsigned __int8 *)a1 + 23);
  if (v3) {
    uint64_t v5 = a1[1];
  }
  int v6 = *((char *)a2 + 23);
  BOOL v7 = v6 < 0;
  if (v6 >= 0) {
    BOOL v8 = a2;
  }
  else {
    BOOL v8 = (uint64_t *)*a2;
  }
  uint64_t v9 = *((unsigned __int8 *)a2 + 23);
  if (v7) {
    uint64_t v9 = a2[1];
  }
  uint64_t v10 = (uint64_t)v4 - 1;
  uint64_t v11 = (uint64_t)v8 - 1;
  while (v5 && v9)
  {
    int v12 = *(unsigned __int8 *)(v10 + v5);
    int v13 = *(unsigned __int8 *)(v11 + v9);
    --v5;
    --v9;
    if (v12 != v13) {
      return 0;
    }
  }
  return v9 == 0;
}

uint64_t quasar::replaceAll(uint64_t result, uint64_t a2, char *a3)
{
  uint64_t v3 = *(void *)a2;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  else
  {
    uint64_t v3 = a2;
    uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  int v5 = a3[23];
  uint64_t v6 = *((void *)a3 + 1);
  if (v5 >= 0)
  {
    uint64_t v7 = v5;
  }
  else
  {
    a3 = *(char **)a3;
    uint64_t v7 = v6;
  }
  int v8 = *(char *)(result + 23);
  if (v8 >= 0) {
    uint64_t v9 = (unsigned char *)result;
  }
  else {
    uint64_t v9 = *(unsigned char **)result;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(result + 23);
  }
  else {
    uint64_t v10 = *(void *)(result + 8);
  }
  if (v10) {
    BOOL v11 = v4 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t v12 = v3 + v4;
    int v13 = &a3[v7];
    uint64_t v14 = &v9[v10];
    uint64_t v15 = v4 - 1;
    for (uint64_t i = v10 - 1; ; --i)
    {
      uint64_t v17 = 0;
      while (v9[v17] == *(unsigned char *)(v3 + v17))
      {
        uint64_t v18 = v17 + 1;
        if (i != v17)
        {
          BOOL v11 = v15 == v17++;
          if (!v11) {
            continue;
          }
        }
        uint64_t v19 = v3 + v18;
        long long v20 = &v9[v18];
        goto LABEL_25;
      }
      uint64_t v19 = v3 + v17;
      long long v20 = &v9[v17];
LABEL_25:
      if (v19 == v12) {
        break;
      }
      if (++v9 == v14) {
        return result;
      }
    }
    if (v9 != v20)
    {
      v21[0] = v3;
      v21[1] = v12;
      return boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(result, v21, a3, v13, v9, v20, a3, v13);
    }
  }
  return result;
}

void quasar::replaceFirst(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t *)*a2;
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v4 = a2[1];
  }
  else
  {
    uint64_t v3 = a2;
    uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  int v5 = *(char *)(a3 + 23);
  if (v5 >= 0) {
    uint64_t v6 = (char *)a3;
  }
  else {
    uint64_t v6 = *(char **)a3;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  int v8 = *(char *)(a1 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = *(void *)a1;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  if (v10) {
    BOOL v11 = v4 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t v12 = (uint64_t)v3 + v4;
    int v13 = &v6[v7];
    uint64_t v14 = v9 + v10;
    uint64_t v15 = v4 - 1;
    for (uint64_t i = v10 - 1; ; --i)
    {
      uint64_t v17 = 0;
      while (*(unsigned __int8 *)(v9 + v17) == *((unsigned __int8 *)v3 + v17))
      {
        uint64_t v18 = v17 + 1;
        if (i != v17)
        {
          BOOL v11 = v15 == v17++;
          if (!v11) {
            continue;
          }
        }
        uint64_t v19 = (uint64_t)v3 + v18;
        uint64_t v20 = v9 + v18;
        goto LABEL_28;
      }
      uint64_t v19 = (uint64_t)v3 + v17;
      uint64_t v20 = v9 + v17;
LABEL_28:
      if (v19 == v12) {
        break;
      }
      if (++v9 == v14) {
        return;
      }
    }
    if (v9 != v20) {
      boost::algorithm::detail::replace_native_helper<true>::operator()<std::string,std::__wrap_iter<char const*>>((uint64_t)&v21, (std::string *)a1, v9, v20, v6, v13);
    }
  }
}

void quasar::replaceLast(std::string *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)*a2;
  uint64_t v5 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v4 = a2;
    uint64_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  int v6 = *(char *)(a3 + 23);
  BOOL v7 = v6 < 0;
  if (v6 >= 0) {
    int v8 = (char *)a3;
  }
  else {
    int v8 = *(char **)a3;
  }
  uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  if (v7) {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  int v10 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  BOOL v11 = v10 < 0;
  uint64_t v12 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  if (v10 >= 0) {
    uint64_t v12 = (uint64_t *)a1;
  }
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v11) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  uint64_t v14 = (uint64_t)v12 + size;
  if (v5)
  {
    uint64_t v15 = 1;
    uint64_t v16 = v14;
    while ((uint64_t *)v16 != v12)
    {
      uint64_t v17 = v16--;
      uint64_t v18 = v14;
      uint64_t v19 = v4;
      if (v16 != v14)
      {
        uint64_t v20 = 0;
        uint64_t v19 = (uint64_t *)((char *)v4 + v15);
        while (1)
        {
          uint64_t v21 = v17 + v20;
          if (v5 == v20) {
            break;
          }
          if (*(unsigned __int8 *)(v21 - 1) != *((unsigned __int8 *)v4 + v20))
          {
            uint64_t v19 = (uint64_t *)((char *)v4 + v20);
            uint64_t v18 = v17 + v20 - 1;
            goto LABEL_22;
          }
          if (v15 == ++v20)
          {
            uint64_t v18 = v14;
            goto LABEL_22;
          }
        }
        uint64_t v18 = v21 - 1;
        goto LABEL_26;
      }
LABEL_22:
      ++v15;
      if (v19 == (uint64_t *)((char *)v4 + v5)) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v18 = v14;
  uint64_t v16 = v14;
LABEL_26:
  if (v16 != v18) {
    boost::algorithm::detail::replace_native_helper<true>::operator()<std::string,std::__wrap_iter<char const*>>((uint64_t)&v22, a1, v16, v18, v8, &v8[v9]);
  }
}

uint64_t quasar::eraseAll(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  int v4 = *(char *)(result + 23);
  uint64_t v5 = *(void *)(result + 8);
  if (v4 >= 0) {
    int v6 = (unsigned char *)result;
  }
  else {
    int v6 = *(unsigned char **)result;
  }
  if (v4 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(result + 23);
  }
  if (v5) {
    BOOL v7 = v3 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v8 = v2 + v3;
    uint64_t v9 = &v6[v5];
    uint64_t v10 = v3 - 1;
    for (uint64_t i = v5 - 1; ; --i)
    {
      uint64_t v12 = 0;
      while (v6[v12] == *(unsigned char *)(v2 + v12))
      {
        uint64_t v13 = v12 + 1;
        if (i != v12)
        {
          BOOL v7 = v10 == v12++;
          if (!v7) {
            continue;
          }
        }
        uint64_t v14 = v2 + v13;
        uint64_t v15 = (uint64_t)&v6[v13];
        goto LABEL_21;
      }
      uint64_t v14 = v2 + v12;
      uint64_t v15 = (uint64_t)&v6[v12];
LABEL_21:
      if (v14 == v8) {
        break;
      }
      if (++v6 == v9) {
        return result;
      }
    }
    if (v6 != (unsigned char *)v15)
    {
      v16[0] = v2;
      v16[1] = v8;
      return boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>(result, v16, v6, v15);
    }
  }
  return result;
}

void quasar::toUpper(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + 16) = *(void *)(a1 + 16);
  }
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  uint64_t v5 = (unsigned char *)(a2 + v3);
  if (v4 >= 0) {
    int v6 = v5;
  }
  else {
    int v6 = (unsigned char *)(*(void *)a2 + *(void *)(a2 + 8));
  }
  if (v4 >= 0) {
    BOOL v7 = (unsigned char *)a2;
  }
  else {
    BOOL v7 = *(unsigned char **)a2;
  }
  while (v7 != v6)
  {
    unsigned char *v7 = __toupper((char)*v7);
    ++v7;
  }
}

void sub_1B223C584(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::toUpper(uint64_t a1@<X0>, const std::locale *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (int *)a1;
  }
  else {
    uint64_t v8 = *(int **)a1;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes(a3, v8, (int *)((char *)v8 + v7), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = (std::wstring *)((char *)&__p + 4 * HIBYTE(__p.__r_.__value_.__r.__words[2]));
  }
  else {
    uint64_t v9 = (std::wstring *)(__p.__r_.__value_.__r.__words[0] + 4 * __p.__r_.__value_.__l.__size_);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::wstring *)__p.__r_.__value_.__r.__words[0];
  }
  std::locale::locale(&v16, a2);
  if (p_p != v9)
  {
    BOOL v11 = (std::locale::id *)MEMORY[0x1E4FBA260];
    do
    {
      uint64_t v12 = p_p->__r_.__value_.__s.__data_[0];
      uint64_t v13 = std::locale::use_facet(&v16, v11);
      p_p->__r_.__value_.__s.__data_[0] = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, v12);
      p_p = (std::wstring *)((char *)p_p + 4);
    }
    while (p_p != v9);
  }
  std::locale::~locale(&v16);
  std::wstring::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = (char *)&__p;
  }
  else {
    uint64_t v15 = (char *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::wstring::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::to_bytes(a3, v15, &v15[4 * size], a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B223C6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::toLower(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + 16) = *(void *)(a1 + 16);
  }
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  uint64_t v5 = (unsigned char *)(a2 + v3);
  if (v4 >= 0) {
    int v6 = v5;
  }
  else {
    int v6 = (unsigned char *)(*(void *)a2 + *(void *)(a2 + 8));
  }
  if (v4 >= 0) {
    uint64_t v7 = (unsigned char *)a2;
  }
  else {
    uint64_t v7 = *(unsigned char **)a2;
  }
  while (v7 != v6)
  {
    unsigned char *v7 = __tolower((char)*v7);
    ++v7;
  }
}

void sub_1B223C788(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::toLower(uint64_t a1@<X0>, const std::locale *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (int *)a1;
  }
  else {
    uint64_t v8 = *(int **)a1;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes(a3, v8, (int *)((char *)v8 + v7), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = (std::wstring *)((char *)&__p + 4 * HIBYTE(__p.__r_.__value_.__r.__words[2]));
  }
  else {
    uint64_t v9 = (std::wstring *)(__p.__r_.__value_.__r.__words[0] + 4 * __p.__r_.__value_.__l.__size_);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::wstring *)__p.__r_.__value_.__r.__words[0];
  }
  std::locale::locale(&v16, a2);
  if (p_p != v9)
  {
    BOOL v11 = (std::locale::id *)MEMORY[0x1E4FBA260];
    do
    {
      uint64_t v12 = p_p->__r_.__value_.__s.__data_[0];
      uint64_t v13 = std::locale::use_facet(&v16, v11);
      p_p->__r_.__value_.__s.__data_[0] = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[3].~facet)(v13, v12);
      p_p = (std::wstring *)((char *)p_p + 4);
    }
    while (p_p != v9);
  }
  std::locale::~locale(&v16);
  std::wstring::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = (char *)&__p;
  }
  else {
    uint64_t v15 = (char *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::wstring::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::to_bytes(a3, v15, &v15[4 * size], a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B223C8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::splitStringSimple(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
}

void quasar::splitAndTrim(std::string *__str@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int64_t size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  unsigned __int8 v7 = size;
  if ((size & 0x80u) == 0) {
    uint64_t v8 = __str;
  }
  else {
    uint64_t v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  int v9 = a2[23];
  if (v9 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(char **)a2;
  }
  if (v9 >= 0) {
    int64_t v11 = a2[23];
  }
  else {
    int64_t v11 = *((void *)a2 + 1);
  }
  if (v11)
  {
    if ((size & 0x80u) != 0) {
      int64_t size = __str->__r_.__value_.__l.__size_;
    }
    if (size >= v11)
    {
      long long v33 = (char *)v8 + size;
      int v34 = *v10;
      long long v35 = v8;
      do
      {
        int64_t v36 = size - v11;
        if (v36 == -1) {
          break;
        }
        int v37 = (char *)memchr(v35, v34, v36 + 1);
        if (!v37) {
          break;
        }
        int v38 = v37;
        if (!memcmp(v37, v10, v11))
        {
          std::string::size_type v12 = 0;
          if (v38 != v33)
          {
            uint64_t v13 = v38 - (char *)v8;
            if (v13 != -1) {
              goto LABEL_16;
            }
          }
          goto LABEL_52;
        }
        long long v35 = (std::string *)(v38 + 1);
        int64_t size = v33 - (v38 + 1);
      }
      while (size >= v11);
    }
    std::string::size_type v12 = 0;
  }
  else
  {
    uint64_t v13 = 0;
LABEL_16:
    std::string::size_type v12 = 0;
    do
    {
      std::string::basic_string(&__p, __str, v12, v13 - v12, (std::allocator<char> *)&v40);
      quasar::trim(&__p);
      unint64_t v14 = a3[1];
      if (v14 >= a3[2])
      {
        uint64_t v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (long long *)&__p);
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v14 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v14 = v15;
        }
        uint64_t v16 = v14 + 24;
        a3[1] = v14 + 24;
      }
      a3[1] = v16;
      int v17 = a2[23];
      std::string::size_type v18 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      if ((v18 & 0x80u) == 0) {
        uint64_t v19 = __str;
      }
      else {
        uint64_t v19 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      if ((v18 & 0x80u) != 0) {
        std::string::size_type v18 = __str->__r_.__value_.__l.__size_;
      }
      if (v17 >= 0) {
        int64_t v20 = a2[23];
      }
      else {
        int64_t v20 = *((void *)a2 + 1);
      }
      std::string::size_type v12 = v20 + v13;
      if (v17 >= 0) {
        uint64_t v21 = a2;
      }
      else {
        uint64_t v21 = *(char **)a2;
      }
      if (v18 >= v12)
      {
        v13 += v20;
        if (v20)
        {
          char v22 = (char *)v19 + v12;
          long long v23 = (char *)v19 + v18;
          int64_t v24 = v18 - v12;
          if (v24 >= v20)
          {
            int v26 = *v21;
            do
            {
              int64_t v27 = v24 - v20;
              if (v27 == -1) {
                break;
              }
              long long v28 = (char *)memchr(v22, v26, v27 + 1);
              if (!v28) {
                break;
              }
              long long v25 = v28;
              if (!memcmp(v28, v21, v20)) {
                goto LABEL_39;
              }
              char v22 = v25 + 1;
              int64_t v24 = v23 - (v25 + 1);
            }
            while (v24 >= v20);
          }
          long long v25 = v23;
LABEL_39:
          if (v25 == v23) {
            uint64_t v13 = -1;
          }
          else {
            uint64_t v13 = v25 - (char *)v19;
          }
        }
      }
      else
      {
        uint64_t v13 = -1;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    while (v13 != -1);
    unsigned __int8 v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
LABEL_52:
  if ((v7 & 0x80u) == 0) {
    std::string::size_type v29 = v7;
  }
  else {
    std::string::size_type v29 = __str->__r_.__value_.__l.__size_;
  }
  std::string::basic_string(&__p, __str, v12, v29, (std::allocator<char> *)&v40);
  quasar::trim(&__p);
  unint64_t v30 = a3[1];
  if (v30 >= a3[2])
  {
    uint64_t v32 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (long long *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v30 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v30 = v31;
    }
    uint64_t v32 = v30 + 24;
    a3[1] = v30 + 24;
  }
  a3[1] = v32;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B223CC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  v14[1] = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  std::string __p = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::splitAndTrimNoEmpty(const std::string *__s, char *a2, uint64_t a3)
{
  int v6 = SHIBYTE(__s->__r_.__value_.__r.__words[2]);
  if (v6 < 0)
  {
    int64_t size = __s->__r_.__value_.__l.__size_;
    if (!size) {
      return;
    }
    uint64_t v8 = (const std::string *)__s->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s->__r_.__value_.__s + 23)) {
      return;
    }
    int64_t size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    uint64_t v8 = __s;
  }
  int v9 = a2[23];
  if (v9 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(char **)a2;
  }
  if (v9 >= 0) {
    int64_t v11 = a2[23];
  }
  else {
    int64_t v11 = *((void *)a2 + 1);
  }
  if (v11)
  {
    if (size >= v11)
    {
      uint64_t v32 = (char *)v8 + size;
      int v33 = *v10;
      int v34 = (std::string *)v8;
      do
      {
        int64_t v35 = size - v11;
        if (v35 == -1) {
          break;
        }
        int64_t v36 = (char *)memchr(v34, v33, v35 + 1);
        if (!v36) {
          break;
        }
        int v37 = v36;
        if (!memcmp(v36, v10, v11))
        {
          std::string::size_type v12 = 0;
          if (v37 != v32)
          {
            uint64_t v13 = v37 - (char *)v8;
            if (v13 != -1) {
              goto LABEL_16;
            }
          }
          goto LABEL_51;
        }
        int v34 = (std::string *)(v37 + 1);
        int64_t size = v32 - (v37 + 1);
      }
      while (size >= v11);
    }
    std::string::size_type v12 = 0;
  }
  else
  {
    uint64_t v13 = 0;
LABEL_16:
    std::string::size_type v12 = 0;
    do
    {
      std::string::basic_string(&__p, __s, v12, v13 - v12, (std::allocator<char> *)&v39);
      quasar::trim(&__p);
      std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
      }
      if (v14)
      {
        uint64_t v15 = *(void *)(a3 + 24);
        if (!v15) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, std::string *))(*(void *)v15 + 48))(v15, &__p);
      }
      int v16 = a2[23];
      std::string::size_type v17 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
      if ((v17 & 0x80u) == 0) {
        std::string::size_type v18 = __s;
      }
      else {
        std::string::size_type v18 = (const std::string *)__s->__r_.__value_.__r.__words[0];
      }
      if ((v17 & 0x80u) != 0) {
        std::string::size_type v17 = __s->__r_.__value_.__l.__size_;
      }
      if (v16 >= 0) {
        int64_t v19 = a2[23];
      }
      else {
        int64_t v19 = *((void *)a2 + 1);
      }
      std::string::size_type v12 = v19 + v13;
      if (v16 >= 0) {
        int64_t v20 = a2;
      }
      else {
        int64_t v20 = *(char **)a2;
      }
      if (v17 >= v12)
      {
        v13 += v19;
        if (v19)
        {
          uint64_t v21 = (char *)v18 + v12;
          char v22 = (char *)v18 + v17;
          int64_t v23 = v17 - v12;
          if (v23 >= v19)
          {
            int v25 = *v20;
            do
            {
              int64_t v26 = v23 - v19;
              if (v26 == -1) {
                break;
              }
              int64_t v27 = (char *)memchr(v21, v25, v26 + 1);
              if (!v27) {
                break;
              }
              int64_t v24 = v27;
              if (!memcmp(v27, v20, v19)) {
                goto LABEL_38;
              }
              uint64_t v21 = v24 + 1;
              int64_t v23 = v22 - (v24 + 1);
            }
            while (v23 >= v19);
          }
          int64_t v24 = v22;
LABEL_38:
          if (v24 == v22) {
            uint64_t v13 = -1;
          }
          else {
            uint64_t v13 = v24 - (char *)v18;
          }
        }
      }
      else
      {
        uint64_t v13 = -1;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    while (v13 != -1);
    LOBYTE(v6) = *((unsigned char *)&__s->__r_.__value_.__s + 23);
  }
LABEL_51:
  if ((v6 & 0x80u) == 0) {
    std::string::size_type v28 = v6;
  }
  else {
    std::string::size_type v28 = __s->__r_.__value_.__l.__size_;
  }
  std::string::basic_string(&__p, __s, v12, v28, (std::allocator<char> *)&v39);
  quasar::trim(&__p);
  std::string::size_type v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v29 = __p.__r_.__value_.__l.__size_;
  }
  if (v29)
  {
    uint64_t v31 = *(void *)(a3 + 24);
    if (!v31) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v31 + 48))(v31, &__p);
    char v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v30 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B223CF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::splitAndTrimNoEmpty(const std::string *a1, char *a2, uint64_t a3)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1F0A5B4C0;
  v4[1] = a3;
  v4[3] = v4;
  quasar::splitAndTrimNoEmpty(a1, a2, (uint64_t)v4);
  return std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v4);
}

void sub_1B223D038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *quasar::splitAndTrimNoEmpty@<X0>(const std::string *a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return quasar::splitAndTrimNoEmpty(a1, a2, (uint64_t)a3);
}

void sub_1B223D084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *quasar::removeSpaces@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    int v4 = a2;
  }
  else {
    int v4 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  unsigned __int8 v11 = 32;
  uint64_t v5 = std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(v4, (unsigned __int8 *)v4 + size, &v11);
  uint64_t v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v7 = (char)v6;
  std::string::size_type v8 = (std::string::size_type)a2 + v6;
  if (v7 >= 0)
  {
    std::string::size_type v9 = (std::string::size_type)a2;
  }
  else
  {
    std::string::size_type v8 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
    std::string::size_type v9 = a2->__r_.__value_.__r.__words[0];
  }
  return std::string::erase(a2, (std::string::size_type)&v5[-v9], v8 - (void)v5);
}

void sub_1B223D148(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  double result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (unsigned char *)a1);
  if (!result) {
    double result = a2;
  }
  uint64_t v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      int v8 = *v6;
      if (v8 != *a3) {
        *result++ = v8;
      }
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

void quasar::copyAndTrim(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  quasar::trim(a2);
}

void sub_1B223D220(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::copyAndTrimLeft@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  __dst[3] = *MEMORY[0x1E4F143B8];
  int v5 = *((char *)a2 + 23);
  BOOL v6 = v5 < 0;
  int v7 = (uint64_t *)*a2;
  if (v5 >= 0) {
    int v7 = a2;
  }
  uint64_t v8 = *((unsigned __int8 *)a2 + 23);
  if (v6) {
    uint64_t v8 = a2[1];
  }
  v10[0] = v7;
  v10[1] = (char *)v7 + v8;
  boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__dst, (uint64_t)v10);
  double result = boost::algorithm::trim_left_copy_if<std::string,boost::algorithm::detail::is_any_ofF<char>>(__dst, a1, a3);
  if (__dst[2] >= 0x11uLL)
  {
    double result = (void *)__dst[0];
    if (__dst[0]) {
      return (void *)MEMORY[0x1B3EA8630](__dst[0], 0x1000C8077774924);
    }
  }
  return result;
}

void sub_1B223D2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a13 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a11);
  }
  _Unwind_Resume(exception_object);
}

void *boost::algorithm::trim_left_copy_if<std::string,boost::algorithm::detail::is_any_ofF<char>>@<X0>(void *__src@<X1>, char *a2@<X0>, void *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v5 = a2[23];
  if (v5 >= 0) {
    BOOL v6 = a2;
  }
  else {
    BOOL v6 = *(char **)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = a2[23];
  }
  else {
    uint64_t v7 = *((void *)a2 + 1);
  }
  size_t v8 = __src[2];
  unint64_t v14 = v8;
  v13[0] = 0;
  if (v8 >= 0x11) {
    operator new[]();
  }
  memcpy(v13, __src, v8);
  if (v7)
  {
    std::string::size_type v9 = &v6[v7];
    while (boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v13, *v6))
    {
      ++v6;
      if (!--v7)
      {
        BOOL v6 = v9;
        break;
      }
    }
  }
  uint64_t v10 = a2[23];
  if ((v10 & 0x80u) == 0) {
    unsigned __int8 v11 = a2;
  }
  else {
    unsigned __int8 v11 = *(char **)a2;
  }
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)a2 + 1);
  }
  double result = std::string::__init_with_size[abi:ne180100]<char *,char *>(a3, v6, &v11[v10], &v11[v10] - v6);
  if (v14 >= 0x11)
  {
    double result = (void *)v13[0];
    if (v13[0]) {
      return (void *)MEMORY[0x1B3EA8630](v13[0], 0x1000C8077774924);
    }
  }
  return result;
}

void sub_1B223D468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (a11 >= 0x11)
  {
    if (a9) {
      MEMORY[0x1B3EA8630](a9, 0x1000C8077774924);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::hasWhitespace(char *a1)
{
  uint64_t v1 = a1[23];
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (!v1) {
    return 0;
  }
  if (v2 >= 0) {
    int v4 = a1;
  }
  else {
    int v4 = *(char **)a1;
  }
  uint64_t v5 = MEMORY[0x1E4F14390];
  do
  {
    unsigned int v6 = *v4;
    if ((v6 & 0x80000000) != 0) {
      int v7 = __maskrune(v6, 0x4000uLL);
    }
    else {
      int v7 = *(_DWORD *)(v5 + 4 * v6 + 60) & 0x4000;
    }
    BOOL result = v7 != 0;
    if (v7) {
      break;
    }
    ++v4;
    uint64_t v9 = a1[23];
    uint64_t v10 = (v9 & 0x80u) == 0 ? a1 : *(char **)a1;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *((void *)a1 + 1);
    }
  }
  while (v4 != &v10[v9]);
  return result;
}

std::string *quasar::addWord(std::string *this, uint64_t a2, uint64_t a3)
{
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    int v6 = *(char *)(a3 + 23);
    if (v6 >= 0) {
      int v7 = (const std::string::value_type *)a3;
    }
    else {
      int v7 = *(const std::string::value_type **)a3;
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v8 = *(void *)(a3 + 8);
    }
    std::string::append(this, v7, v8);
  }
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a2;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a2 + 8);
  }
  return std::string::append(this, v10, v11);
}

uint64_t quasar::wordIsNativeScriptForLocale(quasar *this, const char *a2, const char *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  int v43 = 0;
  uloc_addLikelySubtags();
  uloc_getScript();
  memset(&v42, 0, sizeof(v42));
  std::vector<int>::resize(&v42, 0x20uLL);
  int Code = uscript_getCode();
  uint64_t v6 = 0;
  if (v43 <= 0 && Code)
  {
    std::vector<int>::resize(&v42, Code);
    std::set<UScriptCode>::set[abi:ne180100]<std::__wrap_iter<UScriptCode*>>((uint64_t)&v40, (int *)v42.__begin_, (int *)v42.__end_);
    int v7 = v41[0];
    if (v41[0])
    {
      std::string::size_type v8 = (int *)v41;
      int v9 = (int *)v41[0];
      do
      {
        uint64_t v10 = v9;
        std::string::size_type v11 = v8;
        int v12 = v9[7];
        if (v12 >= 74) {
          std::string::size_type v8 = v9;
        }
        else {
          v9 += 2;
        }
        int v9 = *(int **)v9;
      }
      while (v9);
      if (v8 != (int *)v41)
      {
        if (v12 < 74) {
          uint64_t v10 = v11;
        }
        if (v10[7] < 75) {
          goto LABEL_24;
        }
      }
      uint64_t v13 = (int *)v41;
      unint64_t v14 = (int *)v41[0];
      do
      {
        uint64_t v15 = v14;
        int v16 = v13;
        int v17 = v14[7];
        if (v17 >= 73) {
          uint64_t v13 = v14;
        }
        else {
          v14 += 2;
        }
        unint64_t v14 = *(int **)v14;
      }
      while (v14);
      if (v13 != (int *)v41)
      {
        if (v17 < 73) {
          uint64_t v15 = v16;
        }
        if (v15[7] <= 73)
        {
LABEL_24:
          int v39 = 17;
          std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v40, &v39, &v39);
          int v7 = v41[0];
        }
      }
      if (v7)
      {
        std::string::size_type v18 = v41;
        do
        {
          int64_t v19 = v7;
          int64_t v20 = v18;
          int v21 = *((_DWORD *)v7 + 7);
          char v22 = v7 + 1;
          if (v21 >= 105)
          {
            char v22 = v19;
            std::string::size_type v18 = (void **)v19;
          }
          int v7 = (void *)*v22;
        }
        while (v7);
        if (v18 != v41)
        {
          int64_t v23 = (int *)(v21 >= 105 ? v19 : v20);
          if (v23[7] <= 105)
          {
            int v39 = 20;
            std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v40, &v39, &v39);
            int v39 = 22;
            std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v40, &v39, &v39);
            int v39 = 17;
            std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v40, &v39, &v39);
          }
        }
      }
    }
    int v24 = strlen((const char *)this);
    if (v24 >= 1)
    {
      LODWORD(v25) = 0;
      while (1)
      {
        uint64_t v26 = (int)v25;
        int v27 = *((char *)this + (int)v25);
        uint64_t v25 = (int)v25 + 1;
        UChar32 v28 = v27;
        if (v27 < 0) {
          break;
        }
LABEL_61:
        if (!u_isUWhiteSpace(v28))
        {
          int64_t v35 = v40;
          if (v40 == (uint64_t *)v41) {
            goto LABEL_75;
          }
          while (!uscript_hasScript())
          {
            int64_t v36 = (uint64_t *)v35[1];
            if (v36)
            {
              do
              {
                int v37 = v36;
                int64_t v36 = (uint64_t *)*v36;
              }
              while (v36);
            }
            else
            {
              do
              {
                int v37 = (uint64_t *)v35[2];
                BOOL v38 = *v37 == (void)v35;
                int64_t v35 = v37;
              }
              while (!v38);
            }
            int64_t v35 = v37;
            if (v37 == (uint64_t *)v41) {
              goto LABEL_75;
            }
          }
          if (v35 == (uint64_t *)v41)
          {
LABEL_75:
            uint64_t v6 = 0;
            goto LABEL_77;
          }
        }
        if ((int)v25 >= v24) {
          goto LABEL_76;
        }
      }
      if (v25 != v24)
      {
        if (v27 < 0xE0u)
        {
          if (v27 >= 0xC2u)
          {
            int v31 = v27 & 0x1F;
LABEL_49:
            unsigned int v32 = *((unsigned __int8 *)this + (int)v25) ^ 0x80;
            int v33 = v32 | (v31 << 6);
            if (v32 <= 0x3F) {
              UChar32 v28 = v33;
            }
            else {
              UChar32 v28 = -1;
            }
            if (v32 <= 0x3F) {
              LODWORD(v25) = v25 + 1;
            }
            goto LABEL_61;
          }
LABEL_60:
          UChar32 v28 = -1;
          goto LABEL_61;
        }
        if (v27 > 0xEFu)
        {
          if (v27 > 0xF4u) {
            goto LABEL_60;
          }
          unint64_t v34 = *((unsigned __int8 *)this + v25);
          if (((byte_1B25A2DCE[v34 >> 4] >> (v27 + 16)) & 1) == 0) {
            goto LABEL_60;
          }
          uint64_t v25 = v26 + 2;
          if (v26 + 2 == v24) {
            goto LABEL_40;
          }
          unsigned int v30 = *((unsigned __int8 *)this + v25) ^ 0x80;
          if (v30 > 0x3F)
          {
            UChar32 v28 = -1;
            goto LABEL_61;
          }
          LODWORD(v29) = v34 & 0x3F | ((v28 - 240) << 6);
        }
        else
        {
          uint64_t v29 = v27 & 0xF;
          if (((a00000000000000[v29] >> (*((unsigned char *)this + v25) >> 5)) & 1) == 0) {
            goto LABEL_60;
          }
          unsigned int v30 = *((unsigned char *)this + v25) & 0x3F;
        }
        LODWORD(v25) = v25 + 1;
        if (v25 != v24)
        {
          int v31 = v30 | (v29 << 6);
          goto LABEL_49;
        }
      }
LABEL_40:
      UChar32 v28 = -1;
      LODWORD(v25) = v24;
      goto LABEL_61;
    }
LABEL_76:
    uint64_t v6 = 1;
LABEL_77:
    std::__tree<int>::destroy((uint64_t)&v40, v41[0]);
  }
  if (v42.__begin_)
  {
    v42.__end_ = v42.__begin_;
    operator delete(v42.__begin_);
  }
  return v6;
}

void sub_1B223DA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::isMatchWithWildcard(std::string *__str, uint64_t *a2, char a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4) {
    return 0;
  }
  while (1)
  {
    uint64_t v7 = *(unsigned __int8 *)(v3 + 23);
    uint64_t v8 = *(void *)(v3 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v9 = *(unsigned __int8 *)(v3 + 23);
    }
    else {
      uint64_t v9 = *(void *)(v3 + 8);
    }
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    int v11 = (char)size;
    if ((size & 0x80u) != 0) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (v9 != size) {
      goto LABEL_17;
    }
    int v12 = v11 >= 0 ? __str : (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((v7 & 0x80) != 0) {
      break;
    }
    if (!*(unsigned char *)(v3 + 23)) {
      return 1;
    }
    uint64_t v13 = 0;
    while (*(unsigned __int8 *)(v3 + v13) == v12->__r_.__value_.__s.__data_[v13])
    {
      if (v7 == ++v13) {
        return 1;
      }
    }
LABEL_17:
    if ((v7 & 0x80) != 0) {
      goto LABEL_22;
    }
    unint64_t v14 = (unsigned char *)v3;
    if (v7 == 1) {
      goto LABEL_24;
    }
    if (a3) {
      goto LABEL_27;
    }
LABEL_34:
    v3 += 24;
    if (v3 == v4) {
      return 0;
    }
  }
  if (!memcmp(*(const void **)v3, v12, *(void *)(v3 + 8))) {
    return 1;
  }
LABEL_22:
  if (v8 != 1)
  {
    uint64_t v15 = v8;
    if (a3) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }
  unint64_t v14 = *(unsigned char **)v3;
LABEL_24:
  if (*v14 == 42) {
    return 1;
  }
  if ((a3 & 1) == 0) {
    goto LABEL_34;
  }
  uint64_t v15 = v8;
  if ((v7 & 0x80) != 0) {
    goto LABEL_29;
  }
LABEL_27:
  uint64_t v15 = v7;
LABEL_29:
  uint64_t v16 = v15 - 1;
  if ((v7 & 0x80) != 0)
  {
    int v17 = *(unsigned __int8 *)(*(void *)v3 + v16);
  }
  else
  {
    int v17 = *(unsigned __int8 *)(v3 + v16);
    uint64_t v8 = v7;
  }
  if (v17 != 42 || std::string::compare((const std::string *)v3, 0, v8 - 1, __str, 0, v8 - 1)) {
    goto LABEL_34;
  }
  return 1;
}

std::string *quasar::utf8::substr@<X0>(std::string *__str@<X0>, int a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  int v6 = a2 & ~(a2 >> 31);
  int v7 = ((a2 & (a2 >> 31)) + a3) & ~(((a2 & (a2 >> 31)) + a3) >> 31);
  int v8 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  unsigned __int8 v9 = v8;
  std::string::size_type size = __str->__r_.__value_.__l.__size_;
  if ((v8 & 0x80u) == 0) {
    std::string::size_type v11 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = __str->__r_.__value_.__l.__size_;
  }
  if (v11)
  {
    int v12 = 0;
    int v13 = 0;
    unint64_t v14 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((v8 & 0x80u) == 0) {
      unint64_t v14 = __str;
    }
    uint64_t v15 = &v14->__r_.__value_.__s.__data_[1];
    int v16 = -1;
    while (1)
    {
      if (v12 == v6) {
        int v16 = v13;
      }
      if (v7 == v12 - v6) {
        break;
      }
      ++v12;
      uint64_t v17 = v13;
      std::string::size_type v18 = v13 + 1;
      if (v11 > v18) {
        LODWORD(v18) = v11;
      }
      while (1)
      {
        int v13 = v17 + 1;
        if (v11 <= v17 + 1) {
          break;
        }
        int v19 = v15[v17++] & 0xC0;
        if (v19 != 128) {
          goto LABEL_17;
        }
      }
      int v13 = v18;
LABEL_17:
      if (v11 <= v13)
      {
        int v20 = -1;
        goto LABEL_23;
      }
    }
    int v12 = v6 + v7;
    int v20 = v13;
LABEL_23:
    if (v7 == v12 - v6) {
      int v21 = v13;
    }
    else {
      int v21 = v20;
    }
    if ((v16 & 0x80000000) == 0)
    {
      if ((v21 & 0x80000000) == 0) {
        return std::string::basic_string(a4, __str, v16, v21 - v16, (std::allocator<char> *)&v23);
      }
      goto LABEL_35;
    }
  }
  else if (v7 + v6)
  {
    int v21 = -1;
  }
  else
  {
    int v21 = 0;
  }
  if (quasar::gLogLevel >= 2)
  {
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Incorrect substr range start, or incorrect UTF8 string", 54);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v23);
    int v8 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
    unsigned __int8 v9 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  if ((v9 & 0x80u) == 0) {
    int v16 = v8;
  }
  else {
    int v16 = size;
  }
  if (v21 < 0)
  {
LABEL_35:
    if (quasar::gLogLevel >= 2)
    {
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Incorrect substr range end, or incorrect UTF8 string", 52);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v23);
      unsigned __int8 v9 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if ((v9 & 0x80u) == 0) {
      int v21 = v9;
    }
    else {
      int v21 = size;
    }
  }
  return std::string::basic_string(a4, __str, v16, v21 - v16, (std::allocator<char> *)&v23);
}

void sub_1B223DDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *quasar::utf8::codepointsCtr@<X0>(void *result@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, unint64_t a5@<X8>)
{
  unint64_t v5 = a5;
  LODWORD(a5) = a4 - a3;
  if (a4 < (int)a3 || ((a4 | a3) & 0x80000000) != 0)
  {
    int v13 = "Provided byte range is incorrect";
    goto LABEL_23;
  }
  if (a2 < a3) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  if (a2 - a3 >= (int)a5) {
    a5 = (int)a5;
  }
  else {
    a5 = a2 - a3;
  }
  if (a5)
  {
    unint64_t v6 = 0;
    int v7 = 0;
    int v8 = 0;
    do
    {
      char v9 = *((unsigned char *)result + a3 + v6);
      if ((v9 & 0xF8) == 0xF0)
      {
        int v10 = 4;
      }
      else
      {
        int v11 = v9 & 0xF0;
        if ((v9 & 0xE0) == 0xC0) {
          int v10 = 2;
        }
        else {
          int v10 = 1;
        }
        if (v11 == 224) {
          int v10 = 3;
        }
      }
      unint64_t v6 = (v7 + v10);
      ++v8;
      int v7 = v6;
    }
    while (a5 > v6);
    if (a5 != v6)
    {
      int v13 = "Byte-range queried for number of codepoints seems to intersect a codepoint";
LABEL_23:
      BOOL result = std::string::basic_string[abi:ne180100]<0>(&v14, v13);
      char v12 = 0;
      *(_OWORD *)unint64_t v5 = v14;
      *(void *)(v5 + 16) = v15;
      goto LABEL_24;
    }
    *(_DWORD *)unint64_t v5 = v8;
  }
  else
  {
    *(_DWORD *)unint64_t v5 = 0;
  }
  char v12 = 1;
LABEL_24:
  *(unsigned char *)(v5 + 24) = v12;
  return result;
}

void quasar::utf8::utf8ToUtf16(char *src@<X0>, uint64_t srcLength@<X1>, uint64_t a3@<X8>)
{
  v22[2] = *MEMORY[0x1E4F143B8];
  if (!srcLength)
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
LABEL_17:
    *(unsigned char *)(a3 + 24) = 1;
    return;
  }
  int32_t v4 = srcLength;
  *(void *)pErrorint Code = 0;
  u_strFromUTF8(0, 0, (int32_t *)pErrorCode, src, srcLength, &pErrorCode[1]);
  if (pErrorCode[1] != U_BUFFER_OVERFLOW_ERROR && pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    std::string::basic_string[abi:ne180100]<0>(&dest, "Unable to calculate size of the string converting to UTF16: ");
    int v13 = u_errorName(pErrorCode[1]);
    long long v14 = std::string::append(&dest, v13);
    std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
    v22[0] = v14->__r_.__value_.__l.__size_;
    *(void *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v20.__r_.__value_.__r.__words[0] = v22[0];
    *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + 7) = *(void *)((char *)v22 + 7);
    *(void *)(a3 + 15) = *(void *)((char *)v22 + 7);
    std::string::size_type v17 = v20.__r_.__value_.__r.__words[0];
    *(void *)a3 = v15;
    *(void *)(a3 + 8) = v17;
    *(_WORD *)(a3 + 23) = v16;
    if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
    {
      char v12 = (void *)dest.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
    return;
  }
  LOWORD(v20.__r_.__value_.__l.__data_) = 0;
  std::vector<unsigned short>::vector(&dest, pErrorCode[0], &v20);
  pErrorCode[1] = U_ZERO_ERROR;
  u_strFromUTF8((UChar *)dest.__r_.__value_.__l.__data_, pErrorCode[0], (int32_t *)pErrorCode, src, v4, &pErrorCode[1]);
  if (pErrorCode[1] < U_ILLEGAL_ARGUMENT_ERROR)
  {
    *(std::string *)a3 = dest;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(&v20, "Unable to convert UTF8 string to UTF16: ");
  int v7 = u_errorName(pErrorCode[1]);
  int v8 = std::string::append(&v20, v7);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[0];
  v21[0] = v8->__r_.__value_.__l.__size_;
  *(void *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v22[0] = v21[0];
  *(void *)((char *)v22 + 7) = *(void *)((char *)v21 + 7);
  *(void *)(a3 + 15) = *(void *)((char *)v21 + 7);
  uint64_t v11 = v22[0];
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v11;
  *(_WORD *)(a3 + 23) = v10;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  char v12 = (void *)dest.__r_.__value_.__r.__words[0];
  if (dest.__r_.__value_.__r.__words[0])
  {
    dest.__r_.__value_.__l.__size_ = dest.__r_.__value_.__r.__words[0];
LABEL_15:
    operator delete(v12);
  }
}

void sub_1B223E104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::utf8::utf16ToLower(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const UChar **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)a1 == v4)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
LABEL_17:
    *(unsigned char *)(a2 + 24) = 1;
    return;
  }
  pErrorint Code = U_ZERO_ERROR;
  int32_t v6 = u_strToLower(0, 0, v3, (unint64_t)(v4 - (void)v3) >> 1, "", &pErrorCode);
  if (pErrorCode != U_BUFFER_OVERFLOW_ERROR && pErrorCode >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    std::string::basic_string[abi:ne180100]<0>(&dest, "Unable to calculate size of the converted to lower case string: ");
    std::string::size_type v15 = u_errorName(pErrorCode);
    unsigned __int8 v16 = std::string::append(&dest, v15);
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
    v24[0] = v16->__r_.__value_.__l.__size_;
    *(void *)((char *)v24 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v22.__r_.__value_.__r.__words[0] = v24[0];
    *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words + 7) = *(void *)((char *)v24 + 7);
    *(void *)(a2 + 15) = *(void *)((char *)v24 + 7);
    std::string::size_type v19 = v22.__r_.__value_.__r.__words[0];
    *(void *)a2 = v17;
    *(void *)(a2 + 8) = v19;
    *(_WORD *)(a2 + 23) = v18;
    if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v14 = (void *)dest.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
    return;
  }
  int32_t v8 = v6;
  LOWORD(v22.__r_.__value_.__l.__data_) = 0;
  std::vector<unsigned short>::vector(&dest, v6, &v22);
  pErrorint Code = U_ZERO_ERROR;
  u_strToLower((UChar *)dest.__r_.__value_.__l.__data_, v8, *(const UChar **)a1, (*(void *)(a1 + 8) - *(void *)a1) >> 1, "", &pErrorCode);
  if (pErrorCode < U_ILLEGAL_ARGUMENT_ERROR)
  {
    *(std::string *)a2 = dest;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "Unable to convert string to lower case:");
  std::string::size_type v9 = u_errorName(pErrorCode);
  unsigned __int8 v10 = std::string::append(&v22, v9);
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[0];
  v23[0] = v10->__r_.__value_.__l.__size_;
  *(void *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v24[0] = v23[0];
  *(void *)((char *)v24 + 7) = *(void *)((char *)v23 + 7);
  *(void *)(a2 + 15) = *(void *)((char *)v23 + 7);
  uint64_t v13 = v24[0];
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v13;
  *(_WORD *)(a2 + 23) = v12;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  long long v14 = (void *)dest.__r_.__value_.__r.__words[0];
  if (dest.__r_.__value_.__r.__words[0])
  {
    dest.__r_.__value_.__l.__size_ = dest.__r_.__value_.__r.__words[0];
LABEL_15:
    operator delete(v14);
  }
}

void sub_1B223E364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::utf8::utf16ToUpper(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const UChar **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)a1 == v4)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
LABEL_17:
    *(unsigned char *)(a2 + 24) = 1;
    return;
  }
  pErrorint Code = U_ZERO_ERROR;
  int32_t v6 = u_strToUpper(0, 0, v3, (unint64_t)(v4 - (void)v3) >> 1, "", &pErrorCode);
  if (pErrorCode != U_BUFFER_OVERFLOW_ERROR && pErrorCode >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    std::string::basic_string[abi:ne180100]<0>(&dest, "Unable to calculate size of the converted to upper case string: ");
    std::string::size_type v15 = u_errorName(pErrorCode);
    unsigned __int8 v16 = std::string::append(&dest, v15);
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
    v24[0] = v16->__r_.__value_.__l.__size_;
    *(void *)((char *)v24 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v22.__r_.__value_.__r.__words[0] = v24[0];
    *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words + 7) = *(void *)((char *)v24 + 7);
    *(void *)(a2 + 15) = *(void *)((char *)v24 + 7);
    std::string::size_type v19 = v22.__r_.__value_.__r.__words[0];
    *(void *)a2 = v17;
    *(void *)(a2 + 8) = v19;
    *(_WORD *)(a2 + 23) = v18;
    if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v14 = (void *)dest.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
    return;
  }
  int32_t v8 = v6;
  LOWORD(v22.__r_.__value_.__l.__data_) = 0;
  std::vector<unsigned short>::vector(&dest, v6, &v22);
  pErrorint Code = U_ZERO_ERROR;
  u_strToUpper((UChar *)dest.__r_.__value_.__l.__data_, v8, *(const UChar **)a1, (*(void *)(a1 + 8) - *(void *)a1) >> 1, "", &pErrorCode);
  if (pErrorCode < U_ILLEGAL_ARGUMENT_ERROR)
  {
    *(std::string *)a2 = dest;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "Unable to convert string to upper case:");
  std::string::size_type v9 = u_errorName(pErrorCode);
  unsigned __int8 v10 = std::string::append(&v22, v9);
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[0];
  v23[0] = v10->__r_.__value_.__l.__size_;
  *(void *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v24[0] = v23[0];
  *(void *)((char *)v24 + 7) = *(void *)((char *)v23 + 7);
  *(void *)(a2 + 15) = *(void *)((char *)v23 + 7);
  uint64_t v13 = v24[0];
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v13;
  *(_WORD *)(a2 + 23) = v12;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  long long v14 = (void *)dest.__r_.__value_.__r.__words[0];
  if (dest.__r_.__value_.__r.__words[0])
  {
    dest.__r_.__value_.__l.__size_ = dest.__r_.__value_.__r.__words[0];
LABEL_15:
    operator delete(v14);
  }
}

void sub_1B223E5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::utf8::utf16ToTitle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const UChar **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)a1 == v4)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
LABEL_17:
    *(unsigned char *)(a2 + 24) = 1;
    return;
  }
  pErrorint Code = U_ZERO_ERROR;
  int32_t v6 = u_strToTitle(0, 0, v3, (unint64_t)(v4 - (void)v3) >> 1, 0, "", &pErrorCode);
  if (pErrorCode != U_BUFFER_OVERFLOW_ERROR && pErrorCode >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    std::string::basic_string[abi:ne180100]<0>(&dest, "Unable to calculate size of the converted to title case string: ");
    std::string::size_type v15 = u_errorName(pErrorCode);
    unsigned __int8 v16 = std::string::append(&dest, v15);
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
    v24[0] = v16->__r_.__value_.__l.__size_;
    *(void *)((char *)v24 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v22.__r_.__value_.__r.__words[0] = v24[0];
    *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words + 7) = *(void *)((char *)v24 + 7);
    *(void *)(a2 + 15) = *(void *)((char *)v24 + 7);
    std::string::size_type v19 = v22.__r_.__value_.__r.__words[0];
    *(void *)a2 = v17;
    *(void *)(a2 + 8) = v19;
    *(_WORD *)(a2 + 23) = v18;
    if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v14 = (void *)dest.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
    return;
  }
  int32_t v8 = v6;
  LOWORD(v22.__r_.__value_.__l.__data_) = 0;
  std::vector<unsigned short>::vector(&dest, v6, &v22);
  pErrorint Code = U_ZERO_ERROR;
  u_strToTitle((UChar *)dest.__r_.__value_.__l.__data_, v8, *(const UChar **)a1, (*(void *)(a1 + 8) - *(void *)a1) >> 1, 0, "", &pErrorCode);
  if (pErrorCode < U_ILLEGAL_ARGUMENT_ERROR)
  {
    *(std::string *)a2 = dest;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "Unable to convert string to title case:");
  std::string::size_type v9 = u_errorName(pErrorCode);
  unsigned __int8 v10 = std::string::append(&v22, v9);
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[0];
  v23[0] = v10->__r_.__value_.__l.__size_;
  *(void *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v24[0] = v23[0];
  *(void *)((char *)v24 + 7) = *(void *)((char *)v23 + 7);
  *(void *)(a2 + 15) = *(void *)((char *)v23 + 7);
  uint64_t v13 = v24[0];
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v13;
  *(_WORD *)(a2 + 23) = v12;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  long long v14 = (void *)dest.__r_.__value_.__r.__words[0];
  if (dest.__r_.__value_.__r.__words[0])
  {
    dest.__r_.__value_.__l.__size_ = dest.__r_.__value_.__r.__words[0];
LABEL_15:
    operator delete(v14);
  }
}

void sub_1B223E82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::utf8::utf16ToUtf8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v22[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const UChar **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)a1 == v4)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    goto LABEL_17;
  }
  *(void *)pErrorint Code = 0;
  u_strToUTF8(0, 0, (int32_t *)pErrorCode, v3, (unint64_t)(v4 - (void)v3) >> 1, &pErrorCode[1]);
  if (pErrorCode[1] == U_BUFFER_OVERFLOW_ERROR || pErrorCode[1] < U_ILLEGAL_ARGUMENT_ERROR)
  {
    std::string::basic_string[abi:ne180100](&__p, pErrorCode[0], 0);
    pErrorCode[1] = U_ZERO_ERROR;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    u_strToUTF8((char *)p_p, pErrorCode[0], (int32_t *)pErrorCode, *(const UChar **)a1, (*(void *)(a1 + 8) - *(void *)a1) >> 1, &pErrorCode[1]);
    if (pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      std::string::basic_string[abi:ne180100]<0>(&v20, "Unable to convert UTF16 string to UTF8: ");
      int32_t v8 = u_errorName(pErrorCode[1]);
      std::string::size_type v9 = std::string::append(&v20, v8);
      std::string::size_type v10 = v9->__r_.__value_.__r.__words[0];
      v21[0] = v9->__r_.__value_.__l.__size_;
      *(void *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v22[0] = v21[0];
      *(void *)((char *)v22 + 7) = *(void *)((char *)v21 + 7);
      *(void *)(a2 + 15) = *(void *)((char *)v21 + 7);
      uint64_t v12 = v22[0];
      *(void *)a2 = v10;
      *(void *)(a2 + 8) = v12;
      *(_WORD *)(a2 + 23) = v11;
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      goto LABEL_14;
    }
    *(std::string *)a2 = __p;
LABEL_17:
    *(unsigned char *)(a2 + 24) = 1;
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Unable to calculate size of the string converting to UTF8:");
  uint64_t v13 = u_errorName(pErrorCode[1]);
  long long v14 = std::string::append(&__p, v13);
  std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
  v22[0] = v14->__r_.__value_.__l.__size_;
  *(void *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v20.__r_.__value_.__r.__words[0] = v22[0];
  *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + 7) = *(void *)((char *)v22 + 7);
  *(void *)(a2 + 15) = *(void *)((char *)v22 + 7);
  std::string::size_type v17 = v20.__r_.__value_.__r.__words[0];
  *(void *)a2 = v15;
  *(void *)(a2 + 8) = v17;
  *(_WORD *)(a2 + 23) = v16;
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B223EA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::utf8::convertToLowerCase@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  quasar::utf8::utf8ToUtf16(a1, a2, (uint64_t)&v5);
  if (!v7)
  {
    long long v8 = v5;
    uint64_t v9 = v6;
    uint64_t v6 = 0;
    long long v5 = 0uLL;
    char v10 = 0;
    goto LABEL_5;
  }
  quasar::utf8::utf16ToLower((uint64_t)&v5, (uint64_t)&v8);
  if (!v10)
  {
LABEL_5:
    *(_OWORD *)a3 = v8;
    *(void *)(a3 + 16) = v9;
    uint64_t v9 = 0;
    long long v8 = 0uLL;
    *(unsigned char *)(a3 + 24) = 0;
    goto LABEL_6;
  }
  quasar::utf8::utf16ToUtf8((uint64_t)&v8, a3);
LABEL_6:
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&v8);
  return tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&v5);
}

void sub_1B223EB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t quasar::utf8::convertToUpperCase@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  quasar::utf8::utf8ToUtf16(a1, a2, (uint64_t)&v5);
  if (!v7)
  {
    long long v8 = v5;
    uint64_t v9 = v6;
    uint64_t v6 = 0;
    long long v5 = 0uLL;
    char v10 = 0;
    goto LABEL_5;
  }
  quasar::utf8::utf16ToUpper((uint64_t)&v5, (uint64_t)&v8);
  if (!v10)
  {
LABEL_5:
    *(_OWORD *)a3 = v8;
    *(void *)(a3 + 16) = v9;
    uint64_t v9 = 0;
    long long v8 = 0uLL;
    *(unsigned char *)(a3 + 24) = 0;
    goto LABEL_6;
  }
  quasar::utf8::utf16ToUtf8((uint64_t)&v8, a3);
LABEL_6:
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&v8);
  return tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&v5);
}

void sub_1B223EC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t quasar::utf8::convertToTitleCase@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  quasar::utf8::utf8ToUtf16(a1, a2, (uint64_t)&v5);
  if (!v7)
  {
    long long v8 = v5;
    uint64_t v9 = v6;
    uint64_t v6 = 0;
    long long v5 = 0uLL;
    char v10 = 0;
    goto LABEL_5;
  }
  quasar::utf8::utf16ToTitle((uint64_t)&v5, (uint64_t)&v8);
  if (!v10)
  {
LABEL_5:
    *(_OWORD *)a3 = v8;
    *(void *)(a3 + 16) = v9;
    uint64_t v9 = 0;
    long long v8 = 0uLL;
    *(unsigned char *)(a3 + 24) = 0;
    goto LABEL_6;
  }
  quasar::utf8::utf16ToUtf8((uint64_t)&v8, a3);
LABEL_6:
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&v8);
  return tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&v5);
}

void sub_1B223ECF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void quasar::utf8::convertToLowerCaseOrEmpty(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  quasar::utf8::convertToLowerCase(a1, a2, (uint64_t)&v7);
  if (v9)
  {
    if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
      a3->__r_.__value_.__r.__words[2] = v8;
      return;
    }
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v7, *((std::string::size_type *)&v7 + 1));
    goto LABEL_15;
  }
  if (quasar::gLogLevel >= 1)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    if (v8 >= 0) {
      uint64_t v4 = &v7;
    }
    else {
      uint64_t v4 = (long long *)v7;
    }
    if (v8 >= 0) {
      uint64_t v5 = HIBYTE(v8);
    }
    else {
      uint64_t v5 = *((void *)&v7 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v4, v5);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v6);
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
  if (SHIBYTE(v8) < 0) {
LABEL_15:
  }
    operator delete((void *)v7);
}

void sub_1B223EE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  if (*(char *)(v9 - 25) < 0) {
    operator delete(*(void **)(v9 - 48));
  }
  _Unwind_Resume(a1);
}

void quasar::utf8::convertToUpperCaseOrEmpty(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  quasar::utf8::convertToUpperCase(a1, a2, (uint64_t)&v7);
  if (v9)
  {
    if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
      a3->__r_.__value_.__r.__words[2] = v8;
      return;
    }
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v7, *((std::string::size_type *)&v7 + 1));
    goto LABEL_15;
  }
  if (quasar::gLogLevel >= 1)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    if (v8 >= 0) {
      uint64_t v4 = &v7;
    }
    else {
      uint64_t v4 = (long long *)v7;
    }
    if (v8 >= 0) {
      uint64_t v5 = HIBYTE(v8);
    }
    else {
      uint64_t v5 = *((void *)&v7 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v4, v5);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v6);
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
  if (SHIBYTE(v8) < 0) {
LABEL_15:
  }
    operator delete((void *)v7);
}

void sub_1B223EF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  if (*(char *)(v9 - 25) < 0) {
    operator delete(*(void **)(v9 - 48));
  }
  _Unwind_Resume(a1);
}

void quasar::utf8::convertToTitleCaseOrEmpty(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  quasar::utf8::convertToTitleCase(a1, a2, (uint64_t)&v7);
  if (v9)
  {
    if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
      a3->__r_.__value_.__r.__words[2] = v8;
      return;
    }
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v7, *((std::string::size_type *)&v7 + 1));
    goto LABEL_15;
  }
  if (quasar::gLogLevel >= 1)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    if (v8 >= 0) {
      uint64_t v4 = &v7;
    }
    else {
      uint64_t v4 = (long long *)v7;
    }
    if (v8 >= 0) {
      uint64_t v5 = HIBYTE(v8);
    }
    else {
      uint64_t v5 = *((void *)&v7 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v4, v5);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v6);
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
  if (SHIBYTE(v8) < 0) {
LABEL_15:
  }
    operator delete((void *)v7);
}

void sub_1B223F060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  if (*(char *)(v9 - 25) < 0) {
    operator delete(*(void **)(v9 - 48));
  }
  _Unwind_Resume(a1);
}

void boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(std::string *a1, std::locale *a2)
{
  uint64_t v4 = a2 + 1;
  LODWORD(v16.__locale_) = a2->__locale_;
  std::locale::locale(&v17, a2 + 1);
  boost::algorithm::trim_right_if<std::string,boost::algorithm::detail::is_classifiedF>(a1, &v16);
  std::locale::~locale(&v17);
  int locale = (int)a2->__locale_;
  std::locale::locale(&v15, v4);
  int v5 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v5 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if (v5 >= 0) {
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  int v18 = locale;
  std::locale::locale(&v19, &v15);
  if (size)
  {
    int64_t v8 = (unsigned __int8 *)v6 + size;
    uint64_t v9 = (std::locale::id *)MEMORY[0x1E4FBA258];
    char v10 = v6;
    while (1)
    {
      uint64_t v11 = v10->__r_.__value_.__s.__data_[0];
      uint64_t v12 = std::locale::use_facet(&v19, v9);
      if ((v11 & 0x80) != 0 || (*((_DWORD *)&v12[1].~facet + v11) & v18) == 0) {
        break;
      }
      char v10 = (std::string *)((char *)v10 + 1);
      if (!--size)
      {
        char v10 = (std::string *)v8;
        break;
      }
    }
  }
  else
  {
    char v10 = v6;
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = (std::string::size_type)a1;
  }
  else {
    std::string::size_type v13 = a1->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a1, (std::string::size_type)v6 - v13, (char *)v10 - (char *)v6);
  std::locale::~locale(&v19);
  std::locale::~locale(&v15);
}

void sub_1B223F1E8(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void boost::algorithm::trim_right_if<std::string,boost::algorithm::detail::is_classifiedF>(std::string *a1, const std::locale *a2)
{
  int v3 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v3 >= 0) {
    uint64_t v4 = (char *)a1;
  }
  else {
    uint64_t v4 = (char *)a1->__r_.__value_.__r.__words[0];
  }
  if (v3 >= 0) {
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  uint64_t v6 = &v4[size];
  int locale = (int)a2->__locale_;
  std::locale::locale(&v15, a2 + 1);
  int v16 = locale;
  std::locale::locale(&v17, &v15);
  long long v7 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (size)
  {
    std::string::size_type v8 = size;
    uint64_t v9 = v4[size - 1];
    char v10 = std::locale::use_facet(&v17, v7);
    if ((v9 & 0x80) != 0)
    {
      uint64_t v4 = v6;
      break;
    }
    --v6;
    int v11 = *((_DWORD *)&v10[1].~facet + v9);
    std::string::size_type size = v8 - 1;
    if ((v11 & v16) == 0)
    {
      v4 += v8;
      break;
    }
  }
  std::locale::~locale(&v17);
  std::string::size_type v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v13 = (char *)a1;
  }
  else {
    std::string::size_type v13 = (char *)a1->__r_.__value_.__r.__words[0];
  }
  if ((v12 & 0x80u) != 0) {
    std::string::size_type v12 = a1->__r_.__value_.__l.__size_;
  }
  std::string::erase(a1, v4 - v13, &v13[v12] - v4);
  std::locale::~locale(&v15);
}

void sub_1B223F32C(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(uint64_t a1, uint64_t *a2, char *a3, char *a4, unsigned char *a5, unsigned char *a6, char *a7, char *a8)
{
  std::string::size_type v8 = a6;
  long long v38 = 0u;
  long long v39 = 0u;
  int64x2_t v37 = 0u;
  LODWORD(v10) = *(char *)(a1 + 23);
  int v11 = *(unsigned char **)a1;
  if ((int)v10 >= 0) {
    std::string::size_type v12 = (unsigned char *)a1;
  }
  else {
    std::string::size_type v12 = *(unsigned char **)a1;
  }
  if (a5 == a6)
  {
    std::locale v19 = v12;
  }
  else
  {
    std::locale v15 = a5;
    std::locale v19 = v12;
    std::string v20 = v12;
    do
    {
      std::string::size_type v12 = v8;
      std::locale v19 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v20, v15);
      int v21 = (char *)(v37.i64[1] + 8 * (((void)v39 + *((void *)&v39 + 1)) >> 12));
      if ((void)v38 == v37.i64[1]) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = *(void *)v21 + (((_WORD)v39 + WORD4(v39)) & 0xFFF);
      }
      std::deque<char>::__insert_bidirectional[abi:ne180100]<std::__wrap_iter<char const*>>(&v37, v21, v22, a7, a8, a8 - a7);
      uint64_t v23 = *(unsigned __int8 *)(a1 + 23);
      if ((v23 & 0x80u) == 0) {
        uint64_t v24 = a1;
      }
      else {
        uint64_t v24 = *(void *)a1;
      }
      if ((v23 & 0x80u) != 0) {
        uint64_t v23 = *(void *)(a1 + 8);
      }
      std::locale v15 = (unsigned char *)boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(a2, (uint64_t)v12, v24 + v23);
      std::string::size_type v8 = v25;
      std::string v20 = v12;
      a7 = a3;
      a8 = a4;
    }
    while (v15 != v25);
    LOBYTE(v10) = *(unsigned char *)(a1 + 23);
    int v11 = *(unsigned char **)a1;
  }
  uint64_t v10 = v10;
  if ((v10 & 0x80u) == 0) {
    uint64_t v26 = a1;
  }
  else {
    uint64_t v26 = (uint64_t)v11;
  }
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  long long v27 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v12, (unsigned char *)(v26 + v10));
  uint64_t v28 = *(unsigned __int8 *)(a1 + 23);
  if ((v28 & 0x80u) == 0) {
    uint64_t v29 = a1;
  }
  else {
    uint64_t v29 = *(void *)a1;
  }
  if ((v28 & 0x80u) != 0) {
    uint64_t v28 = *(void *)(a1 + 8);
  }
  uint64_t v30 = v29 + v28;
  if (*((void *)&v39 + 1))
  {
    long long v31 = (char *)(v37.i64[1] + 8 * ((unint64_t)v39 >> 12));
    if ((void)v38 == v37.i64[1])
    {
      long long v32 = 0;
      long long v34 = 0;
      long long v33 = (char *)(v37.i64[1] + 8 * (((void)v39 + *((void *)&v39 + 1)) >> 12));
    }
    else
    {
      long long v32 = (std::string::value_type *)(*(void *)v31 + (v39 & 0xFFF));
      long long v33 = (char *)(v37.i64[1] + 8 * (((void)v39 + *((void *)&v39 + 1)) >> 12));
      long long v34 = (std::string::value_type *)(*(void *)v33 + ((v39 + *((void *)&v39 + 1)) & 0xFFF));
    }
    if (v34 == v32) {
      std::string::size_type v35 = 0;
    }
    else {
      std::string::size_type v35 = &v34[512 * (v33 - v31)] - &v32[*(void *)v33] + *(void *)v31;
    }
    std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(a1, v30, v31, v32, (uint64_t)v33, v34, v35);
  }
  else
  {
    std::string::erase((std::string *)a1, (std::string::size_type)&v27[-v29], v30 - (void)v27);
  }
  return std::deque<char>::~deque[abi:ne180100](&v37);
}

void sub_1B223F58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::deque<char>::__insert_bidirectional[abi:ne180100]<std::__wrap_iter<char const*>>(int64x2_t *a1, char *a2, uint64_t a3, char *a4, char *a5, unint64_t a6)
{
  unint64_t v6 = a6;
  unint64_t v10 = a1[2].u64[0];
  unint64_t v11 = v10 >> 12;
  uint64_t v12 = a1->i64[1];
  uint64_t v13 = a1[1].i64[0];
  long long v14 = (char *)(v12 + 8 * (v10 >> 12));
  if (v13 == v12) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *(void *)v14 + (a1[2].i64[0] & 0xFFF);
  }
  if (a3 == v15) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = a3 + ((a2 - v14) << 9) - (v15 + *(void *)a2) + *(void *)v14;
  }
  uint64_t v17 = a1[2].i64[1];
  if (v16 >= v17 - v16)
  {
    uint64_t v20 = ((v13 - v12) << 9) - 1;
    if (v13 == v12) {
      uint64_t v20 = 0;
    }
    unint64_t v21 = v10 + v17;
    unint64_t v22 = v20 - v21;
    if (a6 > v22)
    {
      std::deque<char>::__add_back_capacity(a1, a6 - v22);
      uint64_t v17 = a1[2].i64[1];
      uint64_t v12 = a1->i64[1];
      uint64_t v13 = a1[1].i64[0];
      unint64_t v21 = a1[2].i64[0] + v17;
    }
    uint64_t v23 = (void *)(v12 + 8 * (v21 >> 12));
    if (v13 == v12) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = (char *)(*v23 + (v21 & 0xFFF));
    }
    *(void *)&long long v68 = v12 + 8 * (v21 >> 12);
    *((void *)&v68 + 1) = v24;
    unint64_t v29 = v17 - v16;
    if (v17 - v16 >= v6)
    {
      uint64_t v30 = a5;
      if (!v6) {
        goto LABEL_84;
      }
    }
    else
    {
      if (v29 >= v6 >> 1) {
        uint64_t v30 = &a5[v17 - v16 - v6];
      }
      else {
        uint64_t v30 = &a4[v29];
      }
      if (v30 == a5)
      {
        uint64_t v30 = a5;
      }
      else
      {
        long long v31 = v30;
        do
        {
          *v24++ = *v31;
          if (&v24[-*v23] == (char *)4096)
          {
            long long v32 = (char *)v23[1];
            ++v23;
            uint64_t v24 = v32;
          }
          ++v31;
          ++a1[2].i64[1];
        }
        while (v31 != a5);
      }
      unint64_t v6 = v17 - v16;
      if (!v29) {
        goto LABEL_84;
      }
    }
    uint64_t v49 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v6);
    uint64_t v51 = v49;
    uint64_t v52 = v50;
    uint64_t v53 = *((void *)&v68 + 1);
    if (*((char **)&v68 + 1) != v50)
    {
      uint64_t v54 = v49;
      uint64_t v55 = v50;
      do
      {
        *v24++ = *v55;
        if (&v24[-*v23] == (char *)4096)
        {
          uint64_t v56 = (char *)v23[1];
          ++v23;
          uint64_t v24 = v56;
        }
        if (&(++v55)[-*v54] == (char *)4096)
        {
          int v57 = (char *)v54[1];
          ++v54;
          uint64_t v55 = v57;
        }
        ++a1[2].i64[1];
        uint64_t v53 = *((void *)&v68 + 1);
      }
      while (v55 != *((char **)&v68 + 1));
    }
    if (v6 < v29)
    {
      unint64_t v58 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v29);
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>,0>(v58, v59, v51, v52, (const void **)v68, *((char **)&v68 + 1), (const void ***)&v69);
      uint64_t v53 = *((void *)&v70 + 1);
      long long v68 = v70;
    }
    if (v30 != a4)
    {
      uint64_t v61 = (uint64_t *)(v68 - 8);
      uint64_t v60 = *(void *)v68;
      while (1)
      {
        int64_t v62 = v53 - v60;
        if (v30 - a4 >= v62) {
          size_t v63 = v62;
        }
        else {
          size_t v63 = v30 - a4;
        }
        v30 -= v63;
        if (v63) {
          memmove((void *)(v53 - v63), v30, v63);
        }
        if (v30 == a4) {
          break;
        }
        uint64_t v64 = *v61--;
        uint64_t v60 = v64;
        uint64_t v53 = v64 + 4096;
      }
    }
    goto LABEL_84;
  }
  if (a6 > v10)
  {
    std::deque<char>::__add_front_capacity((void **)a1, a6 - v10);
    unint64_t v10 = a1[2].u64[0];
    uint64_t v12 = a1->i64[1];
    uint64_t v13 = a1[1].i64[0];
    unint64_t v11 = v10 >> 12;
  }
  int v18 = (void *)(v12 + 8 * v11);
  if (v13 == v12) {
    unint64_t v19 = 0;
  }
  else {
    unint64_t v19 = *v18 + (v10 & 0xFFF);
  }
  *(void *)&long long v68 = v12 + 8 * v11;
  *((void *)&v68 + 1) = v19;
  if (v6 <= v16)
  {
    long long v25 = a4;
    if (!v6) {
      goto LABEL_84;
    }
    goto LABEL_46;
  }
  if (v16 >= v6 >> 1) {
    long long v25 = &a4[v6 - v16];
  }
  else {
    long long v25 = &a5[-v16];
  }
  if (v25 == a4)
  {
    long long v25 = a4;
  }
  else
  {
    uint64_t v26 = v25;
    do
    {
      if (v19 == *v18)
      {
        uint64_t v27 = *--v18;
        unint64_t v19 = v27 + 4096;
      }
      char v28 = *--v26;
      *(unsigned char *)--unint64_t v19 = v28;
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1B255FD00);
    }
    while (v26 != a4);
  }
  unint64_t v6 = v16;
  if (v16)
  {
LABEL_46:
    long long v34 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v6);
    std::string::size_type v35 = v33;
    long long v36 = (unsigned char *)*((void *)&v68 + 1);
    if (*((unsigned char **)&v68 + 1) != v33)
    {
      int64x2_t v37 = v34;
      long long v38 = v33;
      do
      {
        if (v19 == *v18)
        {
          uint64_t v39 = *--v18;
          unint64_t v19 = v39 + 4096;
        }
        if (v38 == (unsigned char *)*v37)
        {
          uint64_t v40 = *--v37;
          long long v38 = (unsigned char *)(v40 + 4096);
        }
        char v41 = *--v38;
        *(unsigned char *)--unint64_t v19 = v41;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1B255FD00);
        long long v36 = (unsigned char *)*((void *)&v68 + 1);
      }
      while (v38 != *((unsigned char **)&v68 + 1));
    }
    if (v6 < v16)
    {
      std::vector<unsigned int> v42 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v16);
      long long v69 = v68;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>>(v34, v35, (unsigned char **)v42, v43, (void ***)&v69);
      long long v36 = (unsigned char *)*((void *)&v69 + 1);
      long long v68 = v69;
    }
    if (v25 != a5)
    {
      uint64_t v45 = (void **)(v68 + 8);
      uint64_t v44 = *(unsigned char **)v68;
      while (1)
      {
        uint64_t v46 = v44 - v36 + 4096;
        if (a5 - v25 >= v46) {
          size_t v47 = v46;
        }
        else {
          size_t v47 = a5 - v25;
        }
        if (v47) {
          memmove(v36, v25, v47);
        }
        v25 += v47;
        if (v25 == a5) {
          break;
        }
        int v48 = *v45++;
        uint64_t v44 = v48;
        long long v36 = v48;
      }
    }
  }
LABEL_84:
  uint64_t v65 = a1->i64[1];
  if (a1[1].i64[0] == v65) {
    uint64_t v66 = 0;
  }
  else {
    uint64_t v66 = *(void *)(v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12)) + (a1[2].i64[0] & 0xFFF);
  }
  *(void *)&long long v69 = v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12);
  *((void *)&v69 + 1) = v66;
  return std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v69, v16);
}

void boost::algorithm::detail::replace_native_helper<true>::operator()<std::string,std::__wrap_iter<char const*>>(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4, char *a5, char *a6)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a5, a6, a6 - a5);
  std::string::replace[abi:ne180100](a2, a3, a4, (const std::string::value_type *)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B223FAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::string::replace[abi:ne180100](std::string *a1, uint64_t a2, uint64_t a3, const std::string::value_type *a4)
{
  uint64_t v4 = a1;
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v4 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  std::string::size_type v5 = a2 - (void)v4;
  std::string::size_type v6 = a3 - a2;
  std::string::size_type v7 = *((void *)a4 + 1);
  if (a4[23] >= 0)
  {
    std::string::size_type v8 = *((unsigned __int8 *)a4 + 23);
  }
  else
  {
    a4 = *(const std::string::value_type **)a4;
    std::string::size_type v8 = v7;
  }
  return std::string::replace(a1, v5, v6, a4, v8);
}

uint64_t boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>(uint64_t a1, uint64_t *a2, unsigned char *a3, uint64_t a4)
{
  long long v28 = 0u;
  long long v29 = 0u;
  int64x2_t v27 = 0u;
  if (*(char *)(a1 + 23) >= 0) {
    std::string::size_type v8 = (unsigned char *)a1;
  }
  else {
    std::string::size_type v8 = *(unsigned char **)a1;
  }
  uint64_t v9 = v8;
  while (a3 != (unsigned char *)a4)
  {
    uint64_t v9 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v30, &v27, a1, v9, v8, a3);
    char v10 = (char *)(v27.i64[1] + 8 * (((void)v29 + *((void *)&v29 + 1)) >> 12));
    if ((void)v28 == v27.i64[1]) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = *(void *)v10 + (((_WORD)v29 + WORD4(v29)) & 0xFFF);
    }
    std::deque<char>::__insert_bidirectional[abi:ne180100]<char const*>(&v27, v10, v11, 0, 0, 0);
    std::string::size_type v8 = (unsigned char *)a4;
    uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = (unsigned char *)a1;
    }
    else {
      uint64_t v13 = *(unsigned char **)a1;
    }
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a1 + 8);
    }
    a3 = (unsigned char *)boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(a2, a4, (uint64_t)&v13[v12]);
    a4 = v14;
  }
  uint64_t v15 = *(unsigned __int8 *)(a1 + 23);
  if ((v15 & 0x80u) == 0) {
    unint64_t v16 = (unsigned char *)a1;
  }
  else {
    unint64_t v16 = *(unsigned char **)a1;
  }
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a1 + 8);
  }
  uint64_t v17 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v30, &v27, a1, v9, v8, &v16[v15]);
  uint64_t v18 = *(unsigned __int8 *)(a1 + 23);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = a1;
  }
  else {
    uint64_t v19 = *(void *)a1;
  }
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(a1 + 8);
  }
  uint64_t v20 = v19 + v18;
  if (*((void *)&v29 + 1))
  {
    unint64_t v21 = (char *)(v27.i64[1] + 8 * ((unint64_t)v29 >> 12));
    if ((void)v28 == v27.i64[1])
    {
      unint64_t v22 = 0;
      uint64_t v24 = 0;
      uint64_t v23 = (char *)(v27.i64[1] + 8 * (((void)v29 + *((void *)&v29 + 1)) >> 12));
    }
    else
    {
      unint64_t v22 = (std::string::value_type *)(*(void *)v21 + (v29 & 0xFFF));
      uint64_t v23 = (char *)(v27.i64[1] + 8 * (((void)v29 + *((void *)&v29 + 1)) >> 12));
      uint64_t v24 = (std::string::value_type *)(*(void *)v23 + ((v29 + *((void *)&v29 + 1)) & 0xFFF));
    }
    if (v24 == v22) {
      std::string::size_type v25 = 0;
    }
    else {
      std::string::size_type v25 = &v24[512 * (v23 - v21)] - &v22[*(void *)v23] + *(void *)v21;
    }
    std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(a1, v20, v21, v22, (uint64_t)v23, v24, v25);
  }
  else
  {
    std::string::erase((std::string *)a1, (std::string::size_type)&v17[-v19], v20 - (void)v17);
  }
  return std::deque<char>::~deque[abi:ne180100](&v27);
}

void sub_1B223FCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__function::__func<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F0A5B4C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5B4C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  unint64_t v3 = v2[1];
  if (v3 >= v2[2])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v2, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v2, a2);
    uint64_t result = v3 + 24;
  }
  v2[1] = result;
  return result;
}

uint64_t std::__function::__func<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::target_type()
{
}

uint64_t std::set<UScriptCode>::set[abi:ne180100]<std::__wrap_iter<UScriptCode*>>(uint64_t a1, int *a2, int *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    std::string::size_type v6 = a2;
    do
    {
      std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_1B223FEA4(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::vector<unsigned short>::vector(void *a1, uint64_t a2, _WORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<short>::__vallocate[abi:ne180100](a1, a2);
    std::string::size_type v6 = (_WORD *)a1[1];
    std::string::size_type v7 = &v6[a2];
    uint64_t v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B223FF24(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineTransducerBeamSearchDecoder::OnlineTransducerBeamSearchDecoder(uint64_t a1, long long *a2)
{
  unint64_t v3 = (_OWORD *)(a1 + 552);
  uint64_t v4 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v4 = &unk_1F0A58590;
  *(_OWORD *)(v4 + 448) = 0u;
  *(_OWORD *)(v4 + 464) = 0u;
  *(_OWORD *)(v4 + 480) = 0u;
  *(_OWORD *)(v4 + 496) = 0u;
  *(_OWORD *)(v4 + 512) = 0u;
  *(_OWORD *)(v4 + 528) = 0u;
  *(_DWORD *)(v4 + 544) = 16843009;
  *(_WORD *)(v4 + 548) = 0;
  _OWORD *v3 = xmmword_1B25A2F20;
  *(void *)(v4 + 568) = 1082130432;
  *(unsigned char *)(v4 + 576) = 0;
  *(void *)(v4 + 580) = 0x32000003E8;
  *(_DWORD *)(v4 + 588) = 1065353216;
  *(unsigned char *)(v4 + 592) = 0;
  *(void *)(v4 + 596) = 0x1E000000FALL;
  *(_OWORD *)((char *)v3 + 52) = xmmword_1B25A2F30;
  *(void *)(v4 + 620) = 0x3F8000003F800000;
  *(unsigned char *)(v4 + 628) = 0;
  *(_DWORD *)(v4 + 632) = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(v4 + 640), "");
  *(unsigned char *)(a1 + 688) = 0;
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  std::string::size_type v5 = (char *)operator new(0xA8uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)std::string::size_type v5 = &unk_1F0A60678;
  *((void *)v5 + 19) = 0;
  *((void *)v5 + 20) = 0;
  *((void *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *((_DWORD *)v5 + 34) = 0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(a1 + 752) = v5 + 24;
  *(void *)(a1 + 760) = v5;
  *(unsigned char *)(a1 + 57) = 0;
  return a1;
}

void sub_1B2240C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v14 = v11;
  *(_OWORD *)(v10 + 736) = 0u;
  std::unique_ptr<kaldi::AutoRegressiveBeamSearchDecoder>::reset[abi:ne180100]((kaldi::AutoRegressiveBeamSearchDecoder **)(v10 + 728), 0);
  std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)(v10 + 720), 0);
  std::unique_ptr<kaldi::quasar::CEJointPredictorNet>::reset[abi:ne180100]((kaldi::quasar::CEJointPredictorNet **)(v10 + 712), 0);
  std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)(v10 + 704), 0);
  std::unique_ptr<kaldi::quasar::CEAcousticEncoderNet>::reset[abi:ne180100](v13, 0);
  a10 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 663) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v10 + 543) < 0) {
    operator delete(*(void **)(v10 + 520));
  }
  if (*(char *)(v10 + 519) < 0) {
    operator delete(*(void **)(v10 + 496));
  }
  if (*(char *)(v10 + 495) < 0) {
    operator delete(*(void **)(v10 + 472));
  }
  if (*(char *)(v10 + 471) < 0) {
    operator delete(*(void **)(v10 + 448));
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v10);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerBeamSearchDecoder::~OnlineTransducerBeamSearchDecoder(quasar::OnlineTransducerBeamSearchDecoder *this)
{
  *(void *)this = &unk_1F0A58590;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 95);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 93);
  *((void *)this + 93) = 0;
  if (v3) {
    MEMORY[0x1B3EA8670](v3, 0x1000C408195852FLL);
  }
  uint64_t v4 = *((void *)this + 92);
  *((void *)this + 92) = 0;
  if (v4) {
    MEMORY[0x1B3EA8670](v4, 0x1000C40605AC02ELL);
  }
  std::unique_ptr<kaldi::AutoRegressiveBeamSearchDecoder>::reset[abi:ne180100]((kaldi::AutoRegressiveBeamSearchDecoder **)this + 91, 0);
  std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)this + 90, 0);
  std::unique_ptr<kaldi::quasar::CEJointPredictorNet>::reset[abi:ne180100]((kaldi::quasar::CEJointPredictorNet **)this + 89, 0);
  std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)this + 88, 0);
  std::unique_ptr<kaldi::quasar::CEAcousticEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CEAcousticEncoderNet **)this + 87, 0);
  std::string::size_type v5 = (void **)((char *)this + 664);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 663) < 0) {
    operator delete(*((void **)this + 80));
  }
  if (*((char *)this + 543) < 0) {
    operator delete(*((void **)this + 65));
  }
  if (*((char *)this + 519) < 0) {
    operator delete(*((void **)this + 62));
  }
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  quasar::Decoder::~Decoder(this);
}

{
  uint64_t vars8;

  quasar::OnlineTransducerBeamSearchDecoder::~OnlineTransducerBeamSearchDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineTransducerBeamSearchDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "transducer-beam-search-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 244, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  kaldi::AutoRegressiveBeamSearchDecoderOptions::Register((uint64_t)(this + 68), (uint64_t)a2);
  kaldi::EndPointerOptions::Register((uint64_t)(this + 72), (uint64_t)a2);
  kaldi::UtteranceDetectorOptions::Register((uint64_t)(this + 74), (uint64_t)a2);
  kaldi::quasar::TransducerAutoRegressiveDecodableOptions::Register((uint64_t)this + 604, (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[94], a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "acoustic-encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Acoustic encoder model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 56), (uint64_t)v4, 1, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "label-encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Label encoder model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 59), (uint64_t)v4, 1, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "joint-predictor-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Joint predictor model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 62), (uint64_t)v4, 1, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Neural network language model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 65), (uint64_t)v4, 0, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "chunk-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Number of acoustic encoder output frames to compute per chunk.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 79), (uint64_t)v4, 0, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "substring-delimiter");
  std::string::basic_string[abi:ne180100]<0>(v4, "Substring delimiter");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 80), (uint64_t)v4, 0, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "token-delimiters");
  std::string::basic_string[abi:ne180100]<0>(v4, "List of token delimiters");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 83), (uint64_t)v4, 0, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "split-tokens-by-character");
  std::string::basic_string[abi:ne180100]<0>(v4, "split tokens by character");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 86), (uint64_t)v4, 0, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B2241264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::AutoRegressiveBeamSearchDecoderOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "remove-eos");
  std::string::basic_string[abi:ne180100]<0>(__p, "Remove EOS labels from output.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "remove-sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "Remove silence labels from output.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "remove-blank");
  std::string::basic_string[abi:ne180100]<0>(__p, "Remove blank labels from output.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "merge-hyps");
  std::string::basic_string[abi:ne180100]<0>(__p, "Merge equivalent hypotheses.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 3, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "merge-max");
  std::string::basic_string[abi:ne180100]<0>(__p, "Assign max score to merged hypotheses, otherwise total score (default).");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "label-context-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Context size to merge hypotheses by label context. Inactive if negative (default).");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "keep-merged-hyps-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Keep hypotheses active when merged by label context.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 5, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-steps");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of decoder steps. Inactive if negative (default).");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "At least min-active best hypotheses are retained after pruning.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 16, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "At most max-active best hypotheses are retained after pruning.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 20, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Beam width. pruning-cutoff = best-hypothesis-score - beam.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 24, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "length-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "Score penalty added for each non-blank label.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 28, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B2241870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::EndPointerOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "enable-endpointing");
  std::string::basic_string[abi:ne180100]<0>(__p, "Enable endpointing.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of frames allowed. Hard limit. We will endpoint when this many frames are decoded.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-trailing-sil-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of trailing silence frames allowed. Active only if some speech frames have already been decoded.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "eos-probability-threshold");
  std::string::basic_string[abi:ne180100]<0>(__p, "Endpointing threshold. Endpoints if P(EOS) > eos-probability-threshold. Active only if some speech frames have already been decoded.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B2241AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::UtteranceDetectorOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "enable-utterance-detection");
  std::string::basic_string[abi:ne180100]<0>(__p, "Enable utterance detection.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-utt-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of frames allowed in an utterance if num-utt-speech-frames == 0. Otherwise, it is used to determine the maximum number of trailing silence frames allowed.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-utt-trailing-sil-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of trailing silence frames allowed in an utterance if num-utt-frames <= max-utt-frames. Otherwise, we use the formula max-utt-trailing-sil-frames * max-utt-frames / num-utt-frames.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B2241CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TransducerAutoRegressiveDecodableOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "max-label-fraction");
  std::string::basic_string[abi:ne180100]<0>(__p, "#decoded-nonblank-labels / #acoustic-encoder-output-frames <= max-label-fraction. Must be positive. Active only if max-steps < 0.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nnlm-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "Neural network language model weight. NNLM loglikes are weighted and added to transducer loglikes.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "ilm-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "Internal language model weight. ILM loglikes are weighted and subtracted from transducer loglikes.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "softmax-temperature");
  std::string::basic_string[abi:ne180100]<0>(__p, "Transducer model softmax temperature.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nnlm-softmax-temperature");
  std::string::basic_string[abi:ne180100]<0>(__p, "Neural network language model softmax temperature.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "ilm-softmax-temperature");
  std::string::basic_string[abi:ne180100]<0>(__p, "Internal language model softmax temperature.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 20, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "mask-nnlm-eos");
  std::string::basic_string[abi:ne180100]<0>(__p, "Mask out EOS when computing neural network language model loglikes.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 24, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B2242068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineTransducerBeamSearchDecoder::finishInit(quasar::OnlineTransducerBeamSearchDecoder *this)
{
}

void sub_1B22422EC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1032C40D0B19100);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerBeamSearchDecoder::runImpl(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  quasar::SymbolTableList::clear(*(quasar::SymbolTableList **)(*(void *)a3 + 472));
  std::string::size_type v6 = *(uint64_t **)(*(void *)a3 + 472);
  uint64_t v17 = *(void *)(a1 + 752);
  char v7 = *(std::__shared_weak_count **)(a1 + 760);
  uint64_t v18 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SymbolTableList::addSymbolTable(v6, &v17, 0, -1);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t v8 = *a2;
  uint64_t v9 = *(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 696);
  uint64_t v10 = *(void *)(a1 + 704);
  uint64_t v11 = *(void *)(a1 + 712);
  uint64_t v12 = *(void *)(a1 + 736);
  uint64_t v13 = *(void *)(a1 + 744);
  uint64_t v14 = *(void *)(a1 + 720);
  v15[0] = *(_OWORD *)(a1 + 604);
  *(long long *)((char *)v15 + 12) = *(_OWORD *)(a1 + 616);
  kaldi::quasar::TransducerAutoRegressiveDecodable::TransducerAutoRegressiveDecodable((uint64_t)v16, v8, v9, v10, v11, v12, v13, v14, v15, *(_DWORD *)(a1 + 632));
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
}

void sub_1B22431B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a27);
  if (v28) {
    operator delete(v28);
  }
  a27 = (uint64_t)&STACK[0x218];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  char v30 = (void *)v27[52];
  if (v30)
  {
    v27[53] = v30;
    operator delete(v30);
  }
  long long v31 = (void *)v27[55];
  if (v31)
  {
    v27[56] = v31;
    operator delete(v31);
  }
  kaldi::quasar::TransducerAutoRegressiveDecodable::~TransducerAutoRegressiveDecodable((kaldi::quasar::TransducerAutoRegressiveDecodable *)&STACK[0x288]);
  _Unwind_Resume(a1);
}

kaldi::quasar::CEAcousticEncoderNet *std::unique_ptr<kaldi::quasar::CEAcousticEncoderNet>::reset[abi:ne180100](kaldi::quasar::CEAcousticEncoderNet **a1, kaldi::quasar::CEAcousticEncoderNet *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::CEAcousticEncoderNet::~CEAcousticEncoderNet(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

kaldi::quasar::CELabelEncoderNet *std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100](kaldi::quasar::CELabelEncoderNet **a1, kaldi::quasar::CELabelEncoderNet *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::CELabelEncoderNet::~CELabelEncoderNet(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

kaldi::quasar::CEJointPredictorNet *std::unique_ptr<kaldi::quasar::CEJointPredictorNet>::reset[abi:ne180100](kaldi::quasar::CEJointPredictorNet **a1, kaldi::quasar::CEJointPredictorNet *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::CEJointPredictorNet::~CEJointPredictorNet(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

kaldi::AutoRegressiveBeamSearchDecoder *std::unique_ptr<kaldi::AutoRegressiveBeamSearchDecoder>::reset[abi:ne180100](kaldi::AutoRegressiveBeamSearchDecoder **a1, kaldi::AutoRegressiveBeamSearchDecoder *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::AutoRegressiveBeamSearchDecoder::~AutoRegressiveBeamSearchDecoder(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void kaldi::AutoRegressiveBeamSearchDecoder::~AutoRegressiveBeamSearchDecoder(kaldi::AutoRegressiveBeamSearchDecoder *this)
{
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)((char *)this + 128);
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 104);
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 80);
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
}

void std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        std::string::size_type v6 = v4 - 96;
        std::deque<int>::~deque[abi:ne180100]((void *)v4 - 7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *kaldi::EventMap::Write(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return (void *)(*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a3 + 56))(a3, a1, a2);
  }
  else {
    return kaldi::WriteToken(a1, a2, "NULL");
  }
}

uint64_t kaldi::EventMap::Read(uint64_t *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v4 = kaldi::Peek(a1, a2);
  char v13 = v4;
  int v5 = v4 << 24;
  if (v4 << 24 > 1392508927)
  {
    if (v5 == 1392508928)
    {
      kaldi::SplitEventMap::Read(a1, a2);
    }
    if (v5 == 1409286144)
    {
      kaldi::TableEventMap::Read(a1, a2);
    }
LABEL_16:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"EventMap::read, was not expecting character ", 44);
    kaldi::CharToString((kaldi *)&v13, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  if (v5 == 1124073472)
  {
    kaldi::ConstantEventMap::Read(a1, a2);
  }
  if (v5 != 1308622848) {
    goto LABEL_16;
  }
  kaldi::ExpectToken(a1, a2, "NULL");
  return 0;
}

void sub_1B2243930(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void kaldi::ConstantEventMap::Read(uint64_t *a1, int a2)
{
  kaldi::ExpectToken(a1, a2, "CE");
  int v4 = 0;
  kaldi::ReadBasicType<int>(a1, a2, (uint64_t)&v4);
  operator new();
}

void kaldi::TableEventMap::Read(uint64_t *a1, uint64_t a2)
{
  kaldi::ExpectToken(a1, a2, "TE");
  int v8 = 0;
  kaldi::ReadBasicType<int>(a1, a2, (uint64_t)&v8);
  unsigned int v7 = 0;
  kaldi::ReadBasicType<unsigned int>(a1, a2, (uint64_t)&v7);
  std::vector<kaldi::EventMap *>::vector(&__p, v7);
  kaldi::ExpectToken(a1, a2, "(");
  if (v7)
  {
    for (unint64_t i = 0; i < v7; *((void *)__p + i++) = v5)
      uint64_t v5 = kaldi::EventMap::Read(a1, a2);
  }
  kaldi::ExpectToken(a1, a2, ")");
  operator new();
}

void sub_1B2243AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  MEMORY[0x1B3EA8670](v10, 0x1081C40F159ABB6);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::SplitEventMap::Read(uint64_t *a1, uint64_t a2)
{
  kaldi::ExpectToken(a1, a2, "SE");
  int v10 = 0;
  kaldi::ReadBasicType<int>(a1, a2, (uint64_t)&v10);
  uint64_t v7 = 1;
  long long v8 = 0u;
  memset(v9, 0, sizeof(v9));
  kaldi::ReadIntegerVector<int>(a1, a2, (std::vector<int> *)((char *)v9 + 8), 0, 0, 0, 0);
  kaldi::ConstIntegerSet<int>::InitInternal((int *)&v7);
  kaldi::ExpectToken(a1, a2, "{");
  uint64_t v4 = kaldi::EventMap::Read(a1, a2);
  uint64_t v5 = kaldi::EventMap::Read(a1, a2);
  kaldi::ExpectToken(a1, a2, "}");
  if (v4)
  {
    if (v5) {
      operator new();
    }
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"SplitEventMap::Read, NULL pointers.", 35);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
}

void sub_1B2243CD8(_Unwind_Exception *a1)
{
  kaldi::ConstIntegerSet<int>::~ConstIntegerSet((void *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t kaldi::ConstantEventMap::Write(int a1, void *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "CE");
  uint64_t result = kaldi::WriteBasicType<int>(a2, a3);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "ConstantEventMap::Write(), could not write to stream.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return result;
}

uint64_t kaldi::TableEventMap::Prune(kaldi::TableEventMap *this)
{
  std::string __p = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(&__p, (uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3);
  unint64_t v2 = *((void *)this + 3) - *((void *)this + 2);
  if ((int)(v2 >> 3) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (v2 >> 3);
    do
    {
      uint64_t v5 = *(void *)(*((void *)this + 2) + 8 * v3);
      if (v5)
      {
        uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
        if (v6)
        {
          uint64_t v8 = 0;
          std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)&__p, v3 + 1, &v8);
          *((void *)__p + v3) = v6;
        }
      }
      ++v3;
    }
    while (v4 != v3);
  }
  if (__p != v10) {
    operator new();
  }
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_1B2243F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x1B3EA8670](v11, 0x1081C40F159ABB6);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::TableEventMap::MapValues(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)&v18, (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3);
  uint64_t v6 = (*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
  int v17 = 0;
  if ((int)v6 >= 1)
  {
    int v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 8 * v7);
      if (v8)
      {
        uint64_t v9 = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v8 + 32))(v8, a2, a3);
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a2, (int *)(a1 + 8)))
        {
          int v10 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a3, &v17);
          if (!v10)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Could not map value ", 20);
            uint64_t v15 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" for key ", 9);
            std::ostream::operator<<();
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
          }
          uint64_t v11 = (int *)v10 + 5;
        }
        else
        {
          uint64_t v11 = &v17;
        }
        uint64_t v12 = *v11;
        char v13 = v18;
        if ((int)v12 >= (int)((unint64_t)(v19 - (void)v18) >> 3))
        {
          v16[0] = 0;
          std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)&v18, v12 + 1, v16);
          char v13 = v18;
        }
        if (v13[v12])
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
          uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Multiple values map to the same point: this code cannot ", 56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"handle this case.", 17);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
        }
        v13[v12] = v9;
        int v7 = v17;
      }
      int v17 = ++v7;
    }
    while (v7 < (int)v6);
  }
  operator new();
}

void sub_1B22441D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 88);
  if (v3)
  {
    *(void *)(v1 - 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::TableEventMap::Write(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "TE");
  kaldi::WriteBasicType<int>(a2, a3);
  uint64_t v6 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
  kaldi::WriteBasicType<unsigned int>(a2, a3);
  kaldi::WriteToken(a2, a3, "(");
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 8 * v7;
    do
    {
      kaldi::EventMap::Write(a2, a3, *(void *)(*(void *)(a1 + 16) + v8));
      v8 += 8;
    }
    while (v9 != v8);
  }
  uint64_t result = kaldi::WriteToken(a2, a3, ")");
  if ((a3 & 1) == 0)
  {
    LOBYTE(v11[0]) = 10;
    uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v11, 1);
  }
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "TableEventMap::Write(), could not write to stream.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return result;
}

uint64_t kaldi::SplitEventMap::Prune(kaldi::SplitEventMap *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 10) + 40))(*((void *)this + 10));
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 11) + 40))(*((void *)this + 11));
  if (v2) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = v3;
  }
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    operator new();
  }
  return v4;
}

void sub_1B2244424(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C401B58D933);
  _Unwind_Resume(a1);
}

void kaldi::SplitEventMap::MapValues(uint64_t a1, void *a2, void *a3)
{
  (*(void (**)(void))(**(void **)(a1 + 80) + 32))(*(void *)(a1 + 80));
  (*(void (**)(void, void *, void *))(**(void **)(a1 + 88) + 32))(*(void *)(a1 + 88), a2, a3);
  if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a2, (int *)(a1 + 8)))
  {
    uint64_t v24 = 0;
    std::string::size_type v25 = 0;
    unint64_t v26 = 0;
    for (unint64_t i = *(int **)(a1 + 56); i != *(int **)(a1 + 64); ++i)
    {
      int v23 = 0;
      int v23 = *i;
      uint64_t v7 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a3, &v23);
      if (!v7)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Value ", 6);
        uint64_t v20 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", for key ", 10);
        unint64_t v21 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", cannot be mapped.", 19);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
      }
      int v8 = *((_DWORD *)v7 + 5);
      uint64_t v9 = v25;
      if ((unint64_t)v25 >= v26)
      {
        uint64_t v11 = v24;
        uint64_t v12 = v25 - v24;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v26 - (void)v24;
        if ((uint64_t)(v26 - (void)v24) >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v26, v15);
          uint64_t v11 = v24;
          uint64_t v9 = v25;
        }
        else
        {
          unint64_t v16 = 0;
        }
        int v17 = (int *)&v16[4 * v12];
        *int v17 = v8;
        int v10 = v17 + 1;
        while (v9 != v11)
        {
          int v18 = *--v9;
          *--int v17 = v18;
        }
        uint64_t v24 = v17;
        std::string::size_type v25 = v10;
        unint64_t v26 = (unint64_t)&v16[4 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *std::string::size_type v25 = v8;
        int v10 = v9 + 1;
      }
      std::string::size_type v25 = v10;
    }
    std::__sort<std::__less<int,int> &,int *>();
    uint64_t v19 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>(v24, v25);
    if (v25 != v19) {
      std::string::size_type v25 = v19;
    }
    operator new();
  }
  operator new();
}

void sub_1B22447BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(void *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::SplitEventMap::Write(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "SE");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 2, *(void *)(a1 + 56));
  kaldi::WriteToken(a2, a3, "{");
  (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 80) + 56))(*(void *)(a1 + 80), a2, a3);
  (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 88) + 56))(*(void *)(a1 + 88), a2, a3);
  uint64_t result = kaldi::WriteToken(a2, a3, "}");
  if ((a3 & 1) == 0)
  {
    LOBYTE(v7[0]) = 10;
    uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v7, 1);
  }
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "SplitEventMap::Write(), could not write to stream.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return result;
}

uint64_t kaldi::EventMap::Lookup(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v3 = *(_DWORD **)a1;
  uint64_t v4 = *(_DWORD **)(a1 + 8);
  if (v4 != *(_DWORD **)a1)
  {
    unint64_t v5 = ((uint64_t)v4 - *(void *)a1) >> 3;
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = &v3[2 * (v5 >> 1)];
      int v9 = *v7;
      int v8 = v7 + 2;
      v5 += ~(v5 >> 1);
      if (v9 >= a2) {
        unint64_t v5 = v6;
      }
      else {
        uint64_t v3 = v8;
      }
    }
    while (v5);
  }
  if (v3 == v4 || *v3 != a2) {
    return 0;
  }
  *a3 = v3[1];
  return 1;
}

uint64_t kaldi::EventMap::MaxResult(kaldi::EventMap *this)
{
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  (*(void (**)(kaldi::EventMap *, void **, char **))(*(void *)this + 8))(this, &v11, &v14);
  uint64_t v1 = v14;
  if (v14 == v15)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"EventMap::MaxResult(), empty result", 35);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    }
    uint64_t v8 = 0x80000000;
  }
  else
  {
    uint64_t v2 = v14 + 4;
    if (v14 + 4 != v15)
    {
      int v3 = *(_DWORD *)v14;
      uint64_t v4 = v14 + 4;
      do
      {
        int v6 = *(_DWORD *)v4;
        v4 += 4;
        int v5 = v6;
        BOOL v7 = v3 < v6;
        if (v3 <= v6) {
          int v3 = v5;
        }
        if (v7) {
          uint64_t v1 = v2;
        }
        uint64_t v2 = v4;
      }
      while (v4 != v15);
    }
    uint64_t v8 = *(unsigned int *)v1;
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
  if (v14)
  {
    unint64_t v15 = v14;
    operator delete(v14);
  }
  return v8;
}

void sub_1B2244AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  uint64_t v11 = *(void **)(v9 - 64);
  if (v11)
  {
    *(void *)(v9 - 56) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(v9 - 40);
  if (v12)
  {
    *(void *)(v9 - 32) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::ConstantEventMap::Map(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)(a1 + 8);
  return 1;
}

void kaldi::ConstantEventMap::MultiMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 16);
  int v6 = *(_DWORD **)(a3 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(_DWORD **)a3;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a3) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a3 + 16, v12);
      uint64_t v8 = *(_DWORD **)a3;
      int v6 = *(_DWORD **)(a3 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    unint64_t v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *(_DWORD *)(a1 + 8);
    BOOL v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a3 = v14;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *int v6 = *(_DWORD *)(a1 + 8);
    BOOL v7 = v6 + 1;
  }
  *(void *)(a3 + 8) = v7;
}

void kaldi::ConstantEventMap::GetChildren(uint64_t a1, void *a2)
{
  a2[1] = *a2;
}

uint64_t kaldi::ConstantEventMap::Copy(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((v2 & 0x80000000) != 0
    || (int)v2 >= (int)((a2[1] - *a2) >> 3)
    || (int v3 = *(kaldi::EventMap **)(*a2 + 8 * v2)) == 0)
  {
    operator new();
  }
  return kaldi::EventMap::Copy(v3);
}

void kaldi::ConstantEventMap::MapValues()
{
}

uint64_t kaldi::ConstantEventMap::Prune(kaldi::ConstantEventMap *this)
{
  if (*((_DWORD *)this + 2) != -1) {
    operator new();
  }
  return 0;
}

void kaldi::ConstantEventMap::~ConstantEventMap(kaldi::ConstantEventMap *this)
{
}

uint64_t kaldi::TableEventMap::Map(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v8 = 0;
  *a3 = -1;
  if (!kaldi::EventMap::Lookup(a2, *(_DWORD *)(a1 + 8), &v8)) {
    return 0;
  }
  if (v8 < 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v8 >= (int)((unint64_t)(*(void *)(a1 + 24) - v4) >> 3)) {
    return 0;
  }
  unint64_t v5 = *(uint64_t (****)(void))(v4 + 8 * v8);
  if (!v5) {
    return 0;
  }
  int v6 = **v5;
  return v6();
}

uint64_t kaldi::TableEventMap::MultiMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v12 = 0;
  uint64_t result = kaldi::EventMap::Lookup(a2, *(_DWORD *)(a1 + 8), &v12);
  if (result)
  {
    if ((v12 & 0x80000000) == 0)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      if (v12 < (int)((unint64_t)(*(void *)(a1 + 24) - v7) >> 3))
      {
        uint64_t result = *(void *)(v7 + 8 * v12);
        if (result)
        {
          int v8 = *(uint64_t (**)(void))(*(void *)result + 8);
          return v8();
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 24);
    if (v9 != v10)
    {
      unint64_t v11 = 0;
      do
      {
        uint64_t result = *(void *)(v10 + 8 * v11);
        if (result)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 8))(result, a2, a3);
          uint64_t v10 = *(void *)(a1 + 16);
          uint64_t v9 = *(void *)(a1 + 24);
        }
        ++v11;
      }
      while (v11 < (v9 - v10) >> 3);
    }
  }
  return result;
}

void kaldi::TableEventMap::GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 != v4)
  {
    unint64_t v7 = 0;
    int v8 = (void *)(a2 + 16);
    do
    {
      uint64_t v9 = *(void *)(v4 + 8 * v7);
      if (v9)
      {
        if ((unint64_t)v2 >= *v8)
        {
          uint64_t v10 = ((uint64_t)v2 - *(void *)a2) >> 3;
          if ((unint64_t)(v10 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v11 = *v8 - *(void *)a2;
          uint64_t v12 = v11 >> 2;
          if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
            uint64_t v12 = v10 + 1;
          }
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13)
          {
            uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v8, v13);
            uint64_t v9 = *(void *)(v4 + 8 * v7);
          }
          else
          {
            uint64_t v14 = 0;
          }
          unint64_t v15 = &v14[8 * v10];
          *(void *)unint64_t v15 = v9;
          uint64_t v2 = v15 + 8;
          int v17 = *(void **)a2;
          int v16 = *(void **)(a2 + 8);
          if (v16 != *(void **)a2)
          {
            do
            {
              uint64_t v18 = *--v16;
              *((void *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            int v16 = *(void **)a2;
          }
          *(void *)a2 = v15;
          *(void *)(a2 + 8) = v2;
          *(void *)(a2 + 16) = &v14[8 * v13];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *v2++ = v9;
        }
        *(void *)(a2 + 8) = v2;
        uint64_t v4 = *(void *)(a1 + 16);
        uint64_t v3 = *(void *)(a1 + 24);
      }
      ++v7;
    }
    while (v7 < (v3 - v4) >> 3);
  }
}

void kaldi::TableEventMap::Copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
  uint64_t v10 = 0;
  std::vector<kaldi::EventMap *>::vector(&__p, v4, &v10);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5 != v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(v6 + 8 * v7);
      if (v8)
      {
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 24))(v8, a2);
        *((void *)__p + v7) = v9;
        uint64_t v6 = *(void *)(a1 + 16);
        uint64_t v5 = *(void *)(a1 + 24);
      }
      ++v7;
    }
    while (v7 < (v5 - v6) >> 3);
  }
  operator new();
}

void sub_1B22451A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x1B3EA8670](v11, 0x1081C40F159ABB6);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::TableEventMap::~TableEventMap(kaldi::TableEventMap *this)
{
  kaldi::TableEventMap::~TableEventMap(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;

  *(void *)this = &unk_1F0A47598;
  kaldi::DeletePointers<kaldi::EventMap>((void *)this + 2);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

uint64_t kaldi::SplitEventMap::Map(uint64_t a1, uint64_t a2)
{
  int v7 = 0;
  uint64_t result = kaldi::EventMap::Lookup(a2, *(_DWORD *)(a1 + 8), &v7);
  if (result)
  {
    BOOL v4 = kaldi::ConstIntegerSet<int>::count(a1 + 16, v7);
    uint64_t v5 = 80;
    if (!v4) {
      uint64_t v5 = 88;
    }
    uint64_t v6 = ***(uint64_t (****)(void))(a1 + v5);
    return v6();
  }
  return result;
}

uint64_t kaldi::SplitEventMap::MultiMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v16 = 0;
  if (kaldi::EventMap::Lookup(a2, *(_DWORD *)(a1 + 8), &v16))
  {
    uint64_t v6 = *(_DWORD **)(a1 + 56);
    int v7 = *(_DWORD **)(a1 + 64);
    if (v7 != v6)
    {
      unint64_t v8 = v7 - v6;
      do
      {
        unint64_t v9 = v8 >> 1;
        uint64_t v10 = &v6[v8 >> 1];
        int v12 = *v10;
        uint64_t v11 = v10 + 1;
        v8 += ~(v8 >> 1);
        if (v12 < v16) {
          uint64_t v6 = v11;
        }
        else {
          unint64_t v8 = v9;
        }
      }
      while (v8);
      if (v6 != v7 && v16 >= *v6)
      {
        uint64_t v13 = a1 + 80;
        goto LABEL_13;
      }
    }
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 80) + 8))(*(void *)(a1 + 80), a2, a3);
  }
  uint64_t v13 = a1 + 88;
LABEL_13:
  uint64_t v14 = *(uint64_t (**)(void))(**(void **)v13 + 8);
  return v14();
}

void kaldi::SplitEventMap::GetChildren(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v6 = a2 + 16;
  unint64_t v5 = *(void *)(a2 + 16);
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v8 = v5 - (void)v4;
    uint64_t v9 = v8 >> 2;
    if ((unint64_t)(v8 >> 2) <= 1) {
      uint64_t v9 = 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v10);
    uint64_t v13 = &v11[v12];
    *uint64_t v11 = *(void *)(a1 + 80);
    int v7 = v11 + 1;
    unint64_t v15 = *(void **)a2;
    uint64_t v14 = *(void **)(a2 + 8);
    if (v14 != *(void **)a2)
    {
      do
      {
        uint64_t v16 = *--v14;
        *--uint64_t v11 = v16;
      }
      while (v14 != v15);
      uint64_t v14 = *(void **)a2;
    }
    *(void *)a2 = v11;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    void *v4 = *(void *)(a1 + 80);
    int v7 = v4 + 1;
  }
  *(void *)(a2 + 8) = v7;
  unint64_t v17 = *(void *)(a2 + 16);
  if ((unint64_t)v7 >= v17)
  {
    uint64_t v19 = ((uint64_t)v7 - *(void *)a2) >> 3;
    if ((unint64_t)(v19 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v17 - *(void *)a2;
    uint64_t v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
      uint64_t v21 = v19 + 1;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22) {
      int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v22);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = &v23[8 * v19];
    std::string::size_type v25 = &v23[8 * v22];
    *(void *)uint64_t v24 = *(void *)(a1 + 88);
    uint64_t v18 = v24 + 8;
    int64x2_t v27 = *(void **)a2;
    unint64_t v26 = *(void **)(a2 + 8);
    if (v26 != *(void **)a2)
    {
      do
      {
        uint64_t v28 = *--v26;
        *((void *)v24 - 1) = v28;
        v24 -= 8;
      }
      while (v26 != v27);
      unint64_t v26 = *(void **)a2;
    }
    *(void *)a2 = v24;
    *(void *)(a2 + 8) = v18;
    *(void *)(a2 + 16) = v25;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    void *v7 = *(void *)(a1 + 88);
    uint64_t v18 = v7 + 1;
  }
  *(void *)(a2 + 8) = v18;
}

void kaldi::SplitEventMap::Copy()
{
}

void sub_1B2245660(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C401B58D933);
  _Unwind_Resume(a1);
}

void kaldi::SplitEventMap::~SplitEventMap(kaldi::SplitEventMap *this)
{
  kaldi::SplitEventMap::~SplitEventMap(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1F0A47538;
  kaldi::SplitEventMap::Destroy(this);
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3) {
    operator delete(v3);
  }
}

void *kaldi::DeletePointers<kaldi::EventMap>(void *result)
{
  uint64_t v1 = (void **)*result;
  uint64_t v2 = (void **)result[1];
  while (v1 != v2)
  {
    uint64_t result = *v1;
    if (*v1)
    {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 72))(result);
      *uint64_t v1 = 0;
    }
    ++v1;
  }
  return result;
}

uint64_t kaldi::SplitEventMap::Destroy(kaldi::SplitEventMap *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  uint64_t result = *((void *)this + 11);
  if (result)
  {
    BOOL v4 = *(uint64_t (**)(void))(*(void *)result + 72);
    return v4();
  }
  return result;
}

void quasar::addPhoneSequence(uint64_t a1, uint64_t a2)
{
  quasar::copyAndTrim(a2, &__p);
  std::string::basic_string[abi:ne180100]<0>(v3, " .");
  quasar::splitStringSimple((uint64_t)&__p, v3, (unint64_t)&v4);
}

void sub_1B2245B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B2245BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::getPhoneFst(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  quasar::splitStringSimple(a1, a3, (unint64_t)&v3);
}

void sub_1B2245C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1B2245E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2245F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<objc_object  {objcproto27_EARLanguageModelDataSource}* {__strong},float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::pair<objc_object  {objcproto27_EARLanguageModelDataSource}* {__strong},float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 2);
        v4 -= 16;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1B22461B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a10);
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B2246328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B22464B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _Unwind_Resume(a1);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece22SentencePieceProcessorENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN13sentencepiece22SentencePieceProcessorENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B224655C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN13sentencepiece22SentencePieceProcessorENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5DFF8;
  sentencepiece::SentencePieceProcessor::SentencePieceProcessor((sentencepiece::SentencePieceProcessor *)(a1 + 3));
  return a1;
}

void sub_1B22465B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DFF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DFF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<sentencepiece::SentencePieceProcessor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

float SimpleClassNgram::replaceWithClass(SimpleClassNgram *this, const unsigned int *a2, unsigned int *a3, unsigned int a4)
{
  float v5 = 0.0;
  if (a4)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a4;
    unint64_t v10 = (void *)((char *)this + 200);
    while (1)
    {
      unsigned int v11 = a2[v8];
      if (v11 == -1) {
        break;
      }
      LOBYTE(v16) = 0;
      uint64_t v12 = (_DWORD **)LHash<unsigned int,LHash<unsigned int const*,double>>::insert(v10, v11, &v16);
      LHashIter<unsigned int const*,double>::LHashIter((uint64_t)v17, v12, 0);
      uint64_t v16 = 0;
      uint64_t v13 = (long double *)LHashIter<unsigned int const*,double>::next((uint64_t)v17, &v16);
      if (v13 && Ngram::findProb(this, *v16, &emptyContext))
      {
        a3[v8] = *v16;
        float v14 = log10(*v13);
        float v5 = v5 + v14;
      }
      else
      {
        a3[v8] = a2[v8];
      }
      if (v18) {
        MEMORY[0x1B3EA8630](v18, 0x50C80EE9192B6);
      }
      if (v9 == ++v8)
      {
        LODWORD(v8) = v9;
        break;
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  a3[v8] = -1;
  return v5;
}

void sub_1B22467A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    MEMORY[0x1B3EA8630](a14, 0x50C80EE9192B6);
  }
  _Unwind_Resume(exception_object);
}

char *SimpleClassNgram::contextID(SimpleClassNgram *this, const unsigned int *a2, Vocab *a3, unsigned int *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 288))
  {
    return Ngram::contextID(this, a2, (const unsigned int *)a3, a4);
  }
  else
  {
    unsigned int v8 = -1;
    if (a2 != -1)
    {
      unsigned int v11 = a2;
      *(_DWORD *)uint64_t v12 = -1;
      SimpleClassNgram::replaceWithClass(this, &v11, &v14, 1u);
      unsigned int v8 = v14;
    }
    int v9 = Vocab::length((uint64_t)a3, a2);
    *(_DWORD *)&v12[8] = 0;
    int v13 = 0;
    unsigned int v11 = 0;
    *(void *)uint64_t v12 = (v9 + 1);
    if (v9 != -1) {
      Array<unsigned int>::alloc();
    }
    SimpleClassNgram::replaceWithClass(this, (const unsigned int *)a3, 0, *((_DWORD *)this + 44) - 1);
    unint64_t v10 = Ngram::contextID(this, v8, (const unsigned int *)(*(void *)&v12[4] - 4 * (int)v11), a4);
    if (*(void *)&v12[4]) {
      MEMORY[0x1B3EA8630](*(void *)&v12[4], 0x1000C8052888210);
    }
    return v10;
  }
}

void sub_1B224693C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

float SimpleClassNgram::contextBOW(SimpleClassNgram *this, const unsigned int *a2, unsigned int a3)
{
  if (*((unsigned char *)this + 288))
  {
    return Ngram::contextBOW(this, a2, a3);
  }
  else
  {
    int v7 = Vocab::length((uint64_t)a2, a2);
    *(_DWORD *)&v8[8] = 0;
    *(void *)unsigned int v8 = (v7 + 1);
    if (v7 != -1) {
      Array<unsigned int>::alloc();
    }
    SimpleClassNgram::replaceWithClass(this, a2, 0, *((_DWORD *)this + 44) - 1);
    return Ngram::contextBOW(this, *(const unsigned int **)&v8[4], a3);
  }
}

void sub_1B2246A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    MEMORY[0x1B3EA8630](a11, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

float SimpleClassNgram::wordProb(SimpleClassNgram *this, uint64_t a2, const unsigned int *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 288))
  {
    return LM::wordProb(this, a2, a3);
  }
  else
  {
    v13[0] = a2;
    v13[1] = -1;
    float v6 = SimpleClassNgram::replaceWithClass(this, v13, &v12, 1u);
    uint64_t v7 = v12;
    unsigned int v9 = Vocab::length((uint64_t)a3, v8);
    *(_DWORD *)Array<unsigned int>::operator[]((int *)this + 62, v9) = -1;
    unint64_t v10 = (unsigned int *)Array<unsigned int>::operator[]((int *)this + 62, 0);
    SimpleClassNgram::replaceWithClass(this, a3, v10, *((_DWORD *)this + 44) - 1);
    unsigned int v11 = (const unsigned int *)Array<unsigned int>::operator[]((int *)this + 62, 0);
    return v6 + LM::wordProb(this, v7, v11);
  }
}

float SimpleClassNgram::wordProbRecompute(SimpleClassNgram *this, uint64_t a2, const unsigned int *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 288))
  {
    LM::wordProbRecompute(this, a2, a3);
  }
  else
  {
    v9[0] = a2;
    v9[1] = -1;
    float v5 = SimpleClassNgram::replaceWithClass(this, v9, &v8, 1u);
    uint64_t v6 = v8;
    uint64_t v7 = (const unsigned int *)Array<unsigned int>::operator[]((int *)this + 62, 0);
    return v5 + LM::wordProb(this, v6, v7);
  }
  return result;
}

float SimpleClassNgram::sentenceProb(uint64_t a1, unsigned int *a2, double *a3)
{
  if (*(unsigned char *)(a1 + 288) || !*(unsigned char *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
  {
    return LM::sentenceProb(a1, (uint64_t)a2, (uint64_t)a3);
  }
  else
  {
    if (Vocab::length((uint64_t)a2, a2) != -1) {
      Array<unsigned int>::alloc();
    }
    float v7 = SimpleClassNgram::replaceWithClass((SimpleClassNgram *)a1, a2, 0, 0xFFFFFFFF);
    *(unsigned char *)(a1 + 288) = 1;
    float v8 = LM::sentenceProb(a1, 0, (uint64_t)a3);
    *(unsigned char *)(a1 + 288) = 0;
    *a3 = *a3 + v7;
    return v7 + v8;
  }
}

void sub_1B2246E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    MEMORY[0x1B3EA8630](a11, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

BOOL SimpleClassNgram::readClasses(SimpleClassNgram *this, File *a2)
{
  if (!ClassNgram::readClasses(this, a2) || *((unsigned char *)this + 289)) {
    return 0;
  }
  unsigned int v24 = 0;
  LHashIter<unsigned int,LHash<unsigned int const*,double>>::LHashIter((uint64_t)v22, (_DWORD **)this + 25, 0);
  uint64_t v6 = (void *)MEMORY[0x1E4FBA240];
  while (LHashIter<unsigned int,LHash<unsigned int const*,double>>::next((uint64_t)v22, &v24))
  {
    if (Map2<unsigned int,unsigned int const*,double>::numEntries((_DWORD **)this + 25, v24) >= 2)
    {
      float v7 = File::position((const char **)a2, v6);
      float v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"word ", 5);
      unsigned int v9 = (const char *)(*(uint64_t (**)(void, void))(**((void **)this + 3) + 32))(*((void *)this + 3), v24);
      size_t v10 = strlen(v9);
      unsigned int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" has multiple class memberships\n", 32);
      *((unsigned char *)this + 289) = 1;
    }
    LOBYTE(v19) = 0;
    unsigned int v12 = (_DWORD **)LHash<unsigned int,LHash<unsigned int const*,double>>::insert((void *)this + 25, v24, &v19);
    LHashIter<unsigned int const*,double>::LHashIter((uint64_t)v20, v12, 0);
    uint64_t v19 = 0;
    LHashIter<unsigned int const*,double>::next((uint64_t)v20, &v19);
    if (Vocab::length((uint64_t)v19, v13) >= 3)
    {
      uint64_t v14 = File::position((const char **)a2, v6);
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"class ", 6);
      uint64_t v16 = (const char *)(*(uint64_t (**)(void, void))(**((void **)this + 3) + 32))(*((void *)this + 3), *(unsigned int *)v19);
      size_t v17 = strlen(v16);
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" expands to string of more than one word\n", 41);
      *((unsigned char *)this + 289) = 1;
    }
    if (v21) {
      MEMORY[0x1B3EA8630](v21, 0x50C80EE9192B6);
    }
  }
  BOOL v4 = *((unsigned char *)this + 289) == 0;
  if (v23) {
    MEMORY[0x1B3EA8630](v23, 0x1000C8052888210);
  }
  return v4;
}

void sub_1B2247098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    MEMORY[0x1B3EA8630](a17, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void SimpleClassNgram::~SimpleClassNgram(SimpleClassNgram *this)
{
  ClassNgram::~ClassNgram(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int const*,double> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  size_t v10 = (int *)result;
LABEL_2:
  unsigned int v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    size_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 2;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float result = (*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * *(a2 - 1) + 8), *(void *)(*(void *)a3 + 8 + 16 * *v11 + 8));
          if ((result & 0x80000000) != 0)
          {
            int v22 = *v11;
            *unsigned int v11 = *(a2 - 1);
            *(a2 - 1) = v22;
          }
          break;
        case 3uLL:
          float result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v11, v11 + 1, (int *)a2 - 1, a3);
          break;
        case 4uLL:
          float result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v11, v11 + 1, v11 + 2, (int *)a2 - 1, a3);
          break;
        case 5uLL:
          float result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, (int *)a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (int *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *,unsigned int *>((unsigned int *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    size_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v11, &v11[v15 >> 1], (int *)a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v11 + 1, v17 - 1, (int *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v11 + 2, &v11[v16 + 1], (int *)a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      int v18 = *v11;
      *unsigned int v11 = *v17;
      *size_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(&v11[v15 >> 1], v11, (int *)a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * *(v11 - 1) + 8), *(void *)(*(void *)a3 + 8 + 16 * *v11 + 8)) & 0x80000000) == 0)
    {
      float result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<char const*,unsigned int> &>((unsigned int *)v11, a2, a3);
      unsigned int v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<char const*,unsigned int> &>(v11, (int *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int const*,double> &,unsigned int *>(v11, v19, a3);
    unsigned int v11 = v19 + 1;
    float result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int const*,double> &,unsigned int *>(v19 + 1, (int *)a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = (unsigned int *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      float result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int const*,double> &,unsigned int *,false>(v10, v19, a3, -v13, a5 & 1);
      unsigned int v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int const*,double> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * *(a2 - 1) + 8), *(void *)(*(void *)a3 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
      {
        int v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      size_t v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * *v10 + 8), *(void *)(*(void *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) != 0)
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 12) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8) {
          break;
        }
        int v15 = (*(uint64_t (**)(void, void))(a3 + 16))(*(void *)(*(void *)a3 + 8 + 16 * v13 + 8), *(void *)(*(void *)a3 + 8 + 16 * *(unsigned int *)((char *)a1 + v14 + 4) + 8));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          unint64_t v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      int *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == (unsigned int *)a2;
      }
    }
    unsigned int v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2) {
      return 1;
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,LHash<unsigned int const*,double>> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  size_t v10 = (int *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    size_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 2;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          BOOL result = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *v11 + 8));
          if ((result & 0x80000000) != 0)
          {
            int v22 = *v11;
            *uint64_t v11 = *(a2 - 1);
            *(a2 - 1) = v22;
          }
          break;
        case 3uLL:
          BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, v11 + 1, (int *)a2 - 1, a3);
          break;
        case 4uLL:
          BOOL result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, v11 + 1, v11 + 2, (int *)a2 - 1, a3);
          break;
        case 5uLL:
          BOOL result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, (int *)a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (int *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *,unsigned int *>((unsigned int *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    size_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11, &v11[v15 >> 1], (int *)a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11 + 1, v17 - 1, (int *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v11 + 2, &v11[v16 + 1], (int *)a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      int v18 = *v11;
      *uint64_t v11 = *v17;
      *size_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(&v11[v15 >> 1], v11, (int *)a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *(v11 - 1) + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *v11 + 8)) & 0x80000000) == 0)
    {
      BOOL result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>((unsigned int *)v11, a2, a3);
      uint64_t v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>(v11, (int *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,LHash<unsigned int const*,double>> &,unsigned int *>(v11, v19, a3);
    uint64_t v11 = v19 + 1;
    BOOL result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,LHash<unsigned int const*,double>> &,unsigned int *>(v19 + 1, (int *)a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = (unsigned int *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      BOOL result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,LHash<unsigned int const*,double>> &,unsigned int *,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v11, a2, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,LHash<unsigned int const*,double>> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
      {
        int v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      size_t v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * *v10 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) != 0)
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 12) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8) {
          break;
        }
        int v15 = (*(uint64_t (**)(void, void))(a3 + 16))(*(unsigned int *)(*(void *)a3 + 8 + 16 * v13 + 8), *(unsigned int *)(*(void *)a3 + 8 + 16 * *(unsigned int *)((char *)a1 + v14 + 4) + 8));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          unint64_t v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      int *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == (unsigned int *)a2;
      }
    }
    unsigned int v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2) {
      return 1;
    }
  }
}

float kaldi::AutoRegressiveBeamSearchDecoder::AutoRegressiveBeamSearchDecoder(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"opts_.min_active > 0", 20);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  if (*(_DWORD *)(a1 + 20) < v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"opts_.max_active >= opts_.min_active", 36);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  float result = *(float *)(a1 + 24);
  if (result <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"opts_.beam > 0", 14);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return result;
}

void sub_1B2247E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  int v12 = *(void **)(v9 + 152);
  if (v12)
  {
    *(void *)(v9 + 160) = v12;
    operator delete(v12);
  }
  a9 = (void **)(v9 + 128);
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)(v9 + 80);
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v13 = *v10;
  if (*v10)
  {
    *(void *)(v9 + 64) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void kaldi::AutoRegressiveBeamSearchDecoder::InitDecoding(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2) & 0x80000000) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2) & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__src, "decodable->BOSIndex() >= 0 && decodable->EOSIndex() >= 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__src);
  }
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  *(_DWORD *)(a1 + 36) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  *(_DWORD *)(a1 + 40) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  *(_DWORD *)(a1 + 44) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  *(_DWORD *)(a1 + 48) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  LODWORD(__src[0]) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 56), (char *)__src, (uint64_t)__src + 4, 1uLL);
  LODWORD(__src[0]) = *(_DWORD *)(a1 + 8);
  *(void ***)((char *)&__src[1] + 4) = 0;
  *(void ***)((char *)__src + 4) = 0;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  char v12 = 0;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__assign_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*>(a1 + 80, (long long *)__src, v13, 1uLL);
  std::deque<int>::~deque[abi:ne180100](v11);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v4 = *(void *)(a1 + 112);
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = v4 - 96;
      std::deque<int>::~deque[abi:ne180100]((void *)(v4 - 56));
      uint64_t v4 = v6;
    }
    while (v6 != v5);
  }
  *(void *)(a1 + 112) = v5;
  float v7 = *(void ***)(a1 + 128);
  int v8 = *(void ***)(a1 + 136);
  while (v8 != v7)
  {
    v8 -= 3;
    __src[0] = v8;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](__src);
  }
  *(void *)(a1 + 136) = v7;
  *(void *)(a1 + 160) = *(void *)(a1 + 152);
}

void sub_1B2248140(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

BOOL kaldi::AutoRegressiveBeamSearchDecoder::Finished(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 52);
  int v4 = *(_DWORD *)(a1 + 12);
  if (v4 < 0) {
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  }
  return v3 == v4 || *(void *)(a1 + 56) == *(void *)(a1 + 64);
}

uint64_t kaldi::AutoRegressiveBeamSearchDecoder::AdvanceDecoding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 56;
  int v8 = *(_DWORD *)(a1 + 52);
  while (1)
  {
    int v9 = *(_DWORD *)(a1 + 12);
    if (v9 < 0) {
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
    }
    if (v8 == v9 || *(void *)(a1 + 56) == *(void *)(a1 + 64)) {
      break;
    }
    uint64_t v14 = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    int v10 = (**(uint64_t (***)(uint64_t, void, uint64_t, void **))a2)(a2, *(unsigned int *)(a1 + 52), v7, &v14);
    if (v10)
    {
      kaldi::AutoRegressiveBeamSearchDecoder::ComputeHypLogLikelihoods(a1, (uint64_t *)&v14);
      kaldi::AutoRegressiveBeamSearchDecoder::ComputeHypScores(a1, (uint64_t)&v14, (float **)v13);
      kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(a1, (uint64_t *)v13, &__p);
      kaldi::AutoRegressiveBeamSearchDecoder::UpdateDecoderState(a1, a2, (uint64_t *)&v14, v13, &__p.__begin_);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      if (v13[0])
      {
        v13[1] = v13[0];
        operator delete(v13[0]);
      }
    }
    if (v14)
    {
      int v15 = v14;
      operator delete(v14);
    }
    if (!v10) {
      break;
    }
    int v8 = *(_DWORD *)(a1 + 52) + 1;
    *(_DWORD *)(a1 + 52) = v8;
    uint64_t v6 = (v6 + 1);
    if (a3 == v6) {
      return a3;
    }
  }
  return v6;
}

void sub_1B2248344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::AutoRegressiveBeamSearchDecoder::ComputeHypLogLikelihoods(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v6 / 96;
    uint64_t v9 = *a2;
    uint64_t v10 = *(int *)(a1 + 32);
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    uint64_t v11 = 4 * v10;
    do
    {
      if (v10)
      {
        uint64_t v12 = 0;
        do
        {
          *(float *)(v9 + v12) = *(float *)(v4 + 96 * v7 + 4) + *(float *)(v9 + v12);
          v12 += 4;
        }
        while (v11 != v12);
      }
      ++v7;
      v9 += v11;
    }
    while (v7 != v8);
  }
  uint64_t v13 = *(void *)(a1 + 104);
  uint64_t v14 = *(void *)(a1 + 112);
  if (v13 != v14)
  {
    int v15 = a2 + 2;
    uint64_t v16 = (_DWORD *)a2[1];
    do
    {
      if ((unint64_t)v16 >= *v15)
      {
        int v18 = (_DWORD *)*a2;
        uint64_t v19 = ((uint64_t)v16 - *a2) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = *v15 - (void)v18;
        if (v21 >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v22);
          int v18 = (_DWORD *)*a2;
          uint64_t v16 = (_DWORD *)a2[1];
        }
        else
        {
          uint64_t v23 = 0;
        }
        unsigned int v24 = &v23[4 * v19];
        *(_DWORD *)unsigned int v24 = *(_DWORD *)(v13 + 4);
        size_t v17 = v24 + 4;
        while (v16 != v18)
        {
          int v25 = *--v16;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        *a2 = (uint64_t)v24;
        a2[1] = (uint64_t)v17;
        a2[2] = (uint64_t)&v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        _DWORD *v16 = *(_DWORD *)(v13 + 4);
        size_t v17 = v16 + 1;
      }
      a2[1] = (uint64_t)v17;
      v13 += 96;
      uint64_t v16 = v17;
    }
    while (v13 != v14);
  }
  if (*(unsigned char *)(a1 + 3))
  {
    kaldi::AutoRegressiveBeamSearchDecoder::MergeHyps(a1, a2);
  }
}

float kaldi::AutoRegressiveBeamSearchDecoder::ComputeHypScores@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  float result = *(float *)(a1 + 28);
  if (result != 0.0)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = *(void *)(a1 + 80);
    uint64_t v8 = *(void *)(a1 + 88);
    uint64_t v9 = v8 - v7;
    if (v8 == v7)
    {
      uint64_t v19 = *a3;
    }
    else
    {
      uint64_t v10 = 0;
      unint64_t v11 = v9 / 96;
      uint64_t v12 = *(int *)(a1 + 32);
      uint64_t v13 = *(int *)(a1 + 48);
      if (v11 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v11;
      }
      uint64_t v15 = 4 * v12;
      do
      {
        float v16 = *(float *)(a1 + 28);
        if (v12)
        {
          unint64_t v17 = 0;
          float v18 = v16 * (float)(*(_DWORD *)(v7 + 96 * v10 + 16) + 1);
          do
          {
            v6[v17 / 4] = v18 + v6[v17 / 4];
            v17 += 4;
          }
          while (v15 != v17);
          float v16 = *(float *)(a1 + 28);
        }
        uint64_t v19 = &v6[(unint64_t)v15 / 4];
        float result = v6[v13] - v16;
        v6[v13] = result;
        ++v10;
        uint64_t v6 = (float *)((char *)v6 + v15);
      }
      while (v10 != v14);
    }
    uint64_t v20 = *(void *)(a1 + 104);
    uint64_t v21 = *(void *)(a1 + 112) - v20;
    if (v21)
    {
      unint64_t v22 = v21 / 96;
      if (v22 <= 1) {
        unint64_t v22 = 1;
      }
      uint64_t v23 = (int *)(v20 + 16);
      do
      {
        int v24 = *v23;
        v23 += 24;
        float result = *v19 + (float)((float)v24 * *(float *)(a1 + 28));
        *v19++ = result;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

void kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::vector<int> *a3@<X8>)
{
  std::vector<int>::vector(a3, (a2[1] - *a2) >> 2);
  uint64_t begin = a3->__begin_;
  std::vector<std::string>::pointer end = a3->__end_;
  if (a3->__begin_ != end)
  {
    int v8 = 0;
    uint64_t v9 = a3->__begin_;
    do
      *v9++ = v8++;
    while (v9 != end);
  }
  unint64_t v10 = *(int *)(a1 + 20);
  if (end - begin <= v10)
  {
    uint64_t v45 = a2;
    if ((char *)end - (char *)begin < 513)
    {
      std::vector<unsigned int> v42 = 0;
      uint64_t v44 = 0;
    }
    else
    {
      std::vector<unsigned int> v42 = (int *)std::get_temporary_buffer[abi:ne180100]<int>(end - begin);
      uint64_t v44 = v43;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(begin, end, &v45, end - begin, v42, v44);
    if (v42) {
      operator delete(v42);
    }
  }
  else
  {
    uint64_t v45 = a2;
    if (v10)
    {
      unint64_t v11 = &begin[v10];
      if ((int)v10 >= 2)
      {
        unint64_t v12 = (v10 - 2) >> 1;
        unint64_t v13 = v12 + 1;
        uint64_t v14 = &begin[v12];
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)begin, &v45, v10, v14--);
          --v13;
        }
        while (v13);
      }
      if (v11 != end)
      {
        uint64_t v15 = &begin[v10];
        do
        {
          uint64_t v16 = *v15;
          uint64_t v17 = *begin;
          if (*(float *)(*a2 + 4 * v16) > *(float *)(*a2 + 4 * v17))
          {
            int *v15 = v17;
            *uint64_t begin = v16;
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)begin, &v45, v10, begin);
          }
          ++v15;
        }
        while (v15 != end);
      }
      if ((int)v10 >= 2)
      {
        uint64_t v18 = v10;
        do
        {
          uint64_t v19 = 0;
          int v20 = *begin;
          uint64_t v21 = v45;
          unint64_t v22 = begin;
          do
          {
            uint64_t v23 = v22;
            v22 += v19 + 1;
            uint64_t v24 = 2 * v19;
            uint64_t v19 = (2 * v19) | 1;
            uint64_t v25 = v24 + 2;
            if (v25 < v18 && *(float *)(*v21 + 4 * *v22) > *(float *)(*v21 + 4 * v22[1]))
            {
              ++v22;
              uint64_t v19 = v25;
            }
            *uint64_t v23 = *v22;
          }
          while (v19 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
          if (v22 == --v11)
          {
            *unint64_t v22 = v20;
          }
          else
          {
            *unint64_t v22 = *v11;
            *unint64_t v11 = v20;
            uint64_t v26 = (char *)v22 - (char *)begin + 4;
            if (v26 >= 5)
            {
              unint64_t v27 = (((unint64_t)v26 >> 2) - 2) >> 1;
              uint64_t v28 = &begin[v27];
              uint64_t v29 = *v28;
              uint64_t v30 = *v22;
              uint64_t v31 = *v21;
              float v32 = *(float *)(v31 + 4 * v30);
              if (*(float *)(v31 + 4 * v29) > v32)
              {
                do
                {
                  long long v33 = v28;
                  *unint64_t v22 = v29;
                  if (!v27) {
                    break;
                  }
                  unint64_t v27 = (v27 - 1) >> 1;
                  uint64_t v28 = &begin[v27];
                  uint64_t v29 = *v28;
                  unint64_t v22 = v33;
                }
                while (*(float *)(v31 + 4 * v29) > v32);
                *long long v33 = v30;
              }
            }
          }
        }
        while (v18-- > 2);
      }
    }
    std::vector<int>::pointer v35 = a3->__begin_;
    uint64_t v36 = *(int *)(a1 + 16);
    uint64_t v37 = *(int *)(a1 + 20);
    long long v38 = &a3->__begin_[v36];
    if (v36 != v37)
    {
      float v39 = *(float *)(*a2 + 4 * *v35) - *(float *)(a1 + 24);
      uint64_t v40 = &v35[v37];
      uint64_t v41 = 4 * v37 - 4 * v36;
      while (*(float *)(*a2 + 4 * *v38) >= v39)
      {
        ++v38;
        v41 -= 4;
        if (!v41)
        {
          long long v38 = v40;
          break;
        }
      }
    }
    if (v38 != a3->__end_) {
      a3->__end_ = v38;
    }
  }
}

void sub_1B22489C8(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::AutoRegressiveBeamSearchDecoder::UpdateDecoderState(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, int **a5)
{
  long long v177 = 0uLL;
  v178[0] = 0;
  long long v175 = 0uLL;
  unint64_t v176 = 0;
  long long v173 = 0uLL;
  unint64_t v174 = 0;
  uint64_t v170 = 0;
  v171 = 0;
  unint64_t v172 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v169 = 0;
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  v153 = (void **)(a1 + 80);
  int v8 = *(_DWORD *)(a1 + 32);
  memset(v166, 0, sizeof(v166));
  int v167 = 1065353216;
  uint64_t v9 = *a5;
  v155 = a5[1];
  if (*a5 != v155)
  {
    uint64_t v12 = a2;
    int v13 = -1431655765 * ((unint64_t)(v7 - v6) >> 5) * v8;
    int v154 = v13;
    while (1)
    {
      int v14 = *v9;
      if (*v9 >= v13) {
        break;
      }
      int v15 = *(_DWORD *)(a1 + 32);
      int v157 = v14 % v15;
      int v158 = v14 / v15;
      uint64_t v156 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v12 + 8))(v12, *(unsigned int *)(a1 + 52), *(unsigned int *)(*(void *)(a1 + 56) + 4 * (v14 / v15)));
      int v16 = v158;
      uint64_t v17 = *v153;
      uint64_t v18 = (uint64_t)*v153 + 96 * v158;
      uint64_t v19 = *(void *)(v18 + 32);
      long long v20 = *(_OWORD *)(v18 + 16);
      long long v161 = *(_OWORD *)v18;
      long long v162 = v20;
      uint64_t v163 = v19;
      std::deque<int>::deque((uint64_t)v164, (void *)(v18 + 40));
      char v165 = v17[96 * v16 + 88];
      uint64_t v21 = *v9;
      uint64_t v22 = *a3;
      *(float *)&uint64_t v156 = *(float *)(*a3 + 4 * v21) - *((float *)&v161 + 1);
      if (v157 == *(_DWORD *)(a1 + 48)) {
        int v23 = -1;
      }
      else {
        int v23 = v157;
      }
      kaldi::AutoRegressiveBeamSearchDecoder::HypInfo::Update((kaldi::AutoRegressiveBeamSearchDecoder::HypInfo *)&v161, *(float *)(v22 + 4 * v21), *(float *)(*a4 + 4 * v21), v23);
      if (v157 == *(_DWORD *)(a1 + 40))
      {
        uint64_t v24 = *((void *)&v173 + 1);
        if (*((void *)&v173 + 1) >= v174)
        {
          uint64_t v27 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__push_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const&>((uint64_t *)&v173, &v161);
        }
        else
        {
          long long v25 = v161;
          long long v26 = v162;
          *(void *)(*((void *)&v173 + 1) + 32) = v163;
          *(_OWORD *)uint64_t v24 = v25;
          *(_OWORD *)(v24 + 16) = v26;
          std::deque<int>::deque(v24 + 40, v164);
          *(unsigned char *)(v24 + 88) = v165;
          uint64_t v27 = v24 + 96;
        }
        *((void *)&v173 + 1) = v27;
        unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3);
        uint64_t v43 = (float *)__p[1];
        if (__p[1] < v169)
        {
          int v56 = v157;
          int v55 = v158;
          int v57 = v156;
          *(_DWORD *)__p[1] = v54;
          *((_DWORD *)v43 + 1) = v55;
          *((_DWORD *)v43 + 2) = v56;
          *((_DWORD *)v43 + 3) = v57;
LABEL_34:
          unint64_t v58 = v43 + 4;
LABEL_50:
          __p[1] = v58;
          goto LABEL_51;
        }
        int64_t v59 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        unint64_t v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v61 = v169 - (char *)__p[0];
        if ((v169 - (char *)__p[0]) >> 3 > v60) {
          unint64_t v60 = v61 >> 3;
        }
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v62 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v60;
        }
        int v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v169, v62);
        size_t v63 = (float *)&v48[16 * v59];
        int v65 = v157;
        int v64 = v158;
        int v66 = v156;
        *(_DWORD *)size_t v63 = v54;
        *((_DWORD *)v63 + 1) = v64;
        *((_DWORD *)v63 + 2) = v65;
        *((_DWORD *)v63 + 3) = v66;
        long long v68 = (char *)__p[0];
        int v67 = (char *)__p[1];
        long long v69 = v63;
        if (__p[1] != __p[0])
        {
          do
          {
            *((_OWORD *)v69 - 1) = *((_OWORD *)v67 - 1);
            v69 -= 4;
            v67 -= 16;
          }
          while (v67 != v68);
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      if ((*(_DWORD *)(a1 + 8) & 0x80000000) != 0 || v165)
      {
        uint64_t v52 = (char *)*((void *)&v177 + 1);
        if (*((void *)&v177 + 1) >= v178[0])
        {
          long long v71 = (char *)v177;
          uint64_t v72 = (uint64_t)(*((void *)&v177 + 1) - v177) >> 2;
          unint64_t v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v74 = v178[0] - v177;
          if ((uint64_t)(v178[0] - v177) >> 1 > v73) {
            unint64_t v73 = v74 >> 1;
          }
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v75 = v73;
          }
          if (v75)
          {
            uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v178, v75);
            uint64_t v52 = (char *)*((void *)&v177 + 1);
            long long v71 = (char *)v177;
          }
          else
          {
            uint64_t v76 = 0;
          }
          uint64_t v85 = &v76[4 * v72];
          *(_DWORD *)uint64_t v85 = HIDWORD(v156);
          uint64_t v53 = v85 + 4;
          while (v52 != v71)
          {
            int v86 = *((_DWORD *)v52 - 1);
            v52 -= 4;
            *((_DWORD *)v85 - 1) = v86;
            v85 -= 4;
          }
          *(void *)&long long v177 = v85;
          *((void *)&v177 + 1) = v53;
          v178[0] = &v76[4 * v75];
          if (v71) {
            operator delete(v71);
          }
        }
        else
        {
          **((_DWORD **)&v177 + 1) = HIDWORD(v156);
          uint64_t v53 = v52 + 4;
        }
        *((void *)&v177 + 1) = v53;
        uint64_t v87 = *((void *)&v175 + 1);
        if (*((void *)&v175 + 1) >= v176)
        {
          uint64_t v90 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__push_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const&>((uint64_t *)&v175, &v161);
        }
        else
        {
          long long v88 = v161;
          long long v89 = v162;
          *(void *)(*((void *)&v175 + 1) + 32) = v163;
          *(_OWORD *)uint64_t v87 = v88;
          *(_OWORD *)(v87 + 16) = v89;
          std::deque<int>::deque(v87 + 40, v164);
          *(unsigned char *)(v87 + 88) = v165;
          uint64_t v90 = v87 + 96;
        }
        *((void *)&v175 + 1) = v90;
        uint64_t v91 = v171;
        if ((unint64_t)v171 >= v172)
        {
          uint64_t v97 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>::__emplace_back_slow_path<int &,int &,float &>(&v170, &v158, &v157, (int *)&v156);
        }
        else
        {
          int v92 = v157;
          int v93 = v158;
          int v94 = v156;
          v171[1] = 0;
          v91[2] = 0;
          *uint64_t v91 = 0;
          long long v95 = operator new(0xCuLL);
          *uint64_t v91 = v95;
          char v96 = v95 + 3;
          v91[2] = v95 + 3;
          *long long v95 = v93;
          v95[1] = v92;
          v95[2] = v94;
          uint64_t v97 = (uint64_t)(v91 + 3);
          v91[1] = v96;
          int v13 = v154;
        }
        v171 = (void *)v97;
      }
      else
      {
        uint64_t v49 = std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::find<std::deque<int>>(v166, v164);
        if (v49)
        {
          if (*(unsigned char *)(a1 + 5))
          {
            char v165 = 1;
            uint64_t v50 = (char *)*((void *)&v177 + 1);
            if (*((void *)&v177 + 1) >= v178[0])
            {
              uint64_t v79 = (char *)v177;
              uint64_t v80 = (uint64_t)(*((void *)&v177 + 1) - v177) >> 2;
              unint64_t v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 62) {
                goto LABEL_144;
              }
              uint64_t v82 = v178[0] - v177;
              if ((uint64_t)(v178[0] - v177) >> 1 > v81) {
                unint64_t v81 = v82 >> 1;
              }
              if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v83 = v81;
              }
              if (v83)
              {
                long long v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v178, v83);
                uint64_t v50 = (char *)*((void *)&v177 + 1);
                uint64_t v79 = (char *)v177;
              }
              else
              {
                long long v84 = 0;
              }
              long long v104 = &v84[4 * v80];
              *(_DWORD *)long long v104 = HIDWORD(v156);
              uint64_t v51 = v104 + 4;
              while (v50 != v79)
              {
                int v105 = *((_DWORD *)v50 - 1);
                v50 -= 4;
                *((_DWORD *)v104 - 1) = v105;
                v104 -= 4;
              }
              *(void *)&long long v177 = v104;
              *((void *)&v177 + 1) = v51;
              v178[0] = &v84[4 * v83];
              if (v79) {
                operator delete(v79);
              }
            }
            else
            {
              **((_DWORD **)&v177 + 1) = HIDWORD(v156);
              uint64_t v51 = v50 + 4;
            }
            *((void *)&v177 + 1) = v51;
            uint64_t v106 = *((void *)&v175 + 1);
            if (*((void *)&v175 + 1) >= v176)
            {
              uint64_t v109 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__push_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const&>((uint64_t *)&v175, &v161);
            }
            else
            {
              long long v107 = v161;
              long long v108 = v162;
              *(void *)(*((void *)&v175 + 1) + 32) = v163;
              *(_OWORD *)uint64_t v106 = v107;
              *(_OWORD *)(v106 + 16) = v108;
              std::deque<int>::deque(v106 + 40, v164);
              *(unsigned char *)(v106 + 88) = v165;
              uint64_t v109 = v106 + 96;
            }
            *((void *)&v175 + 1) = v109;
            long long v110 = v171;
            if ((unint64_t)v171 >= v172)
            {
              uint64_t v116 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>::__emplace_back_slow_path<int &,int &,float &>(&v170, &v158, &v157, (int *)&v156);
            }
            else
            {
              int v112 = v157;
              int v111 = v158;
              int v113 = v156;
              v171[1] = 0;
              v110[2] = 0;
              *long long v110 = 0;
              long long v114 = operator new(0xCuLL);
              *long long v110 = v114;
              long long v115 = v114 + 3;
              v110[2] = v114 + 3;
              *long long v114 = v111;
              v114[1] = v112;
              v114[2] = v113;
              uint64_t v116 = (uint64_t)(v110 + 3);
              v110[1] = v115;
              uint64_t v12 = a2;
              int v13 = v154;
            }
            v171 = (void *)v116;
          }
          long long v117 = (char **)(v170 + 24 * v49[8]);
          long long v118 = v117[1];
          unint64_t v119 = (unint64_t)v117[2];
          if ((unint64_t)v118 >= v119)
          {
            unint64_t v123 = 0xAAAAAAAAAAAAAAABLL * ((v118 - *v117) >> 2);
            unint64_t v124 = v123 + 1;
            if (v123 + 1 > 0x1555555555555555) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v119 - (void)*v117) >> 2);
            if (2 * v125 > v124) {
              unint64_t v124 = 2 * v125;
            }
            if (v125 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v126 = 0x1555555555555555;
            }
            else {
              unint64_t v126 = v124;
            }
            long long v127 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)(v117 + 2), v126);
            unint64_t v129 = &v127[12 * v123];
            int v130 = v157;
            int v131 = v156;
            *(_DWORD *)unint64_t v129 = v158;
            *((_DWORD *)v129 + 1) = v130;
            *((_DWORD *)v129 + 2) = v131;
            uint64_t v133 = *v117;
            uint64_t v132 = v117[1];
            uint64_t v134 = v129;
            if (v132 != *v117)
            {
              do
              {
                uint64_t v135 = *(void *)(v132 - 12);
                v132 -= 12;
                int v136 = *((_DWORD *)v132 + 2);
                *(void *)(v134 - 12) = v135;
                v134 -= 12;
                *((_DWORD *)v134 + 2) = v136;
              }
              while (v132 != v133);
              uint64_t v132 = *v117;
            }
            char v122 = v129 + 12;
            unint64_t *v117 = v134;
            v117[1] = v129 + 12;
            v117[2] = &v127[12 * v128];
            if (v132) {
              operator delete(v132);
            }
          }
          else
          {
            int v120 = v157;
            int v121 = v156;
            *(_DWORD *)long long v118 = v158;
            *((_DWORD *)v118 + 1) = v120;
            *((_DWORD *)v118 + 2) = v121;
            char v122 = v118 + 12;
          }
          v117[1] = v122;
        }
        else
        {
          uint64_t v77 = (char *)*((void *)&v177 + 1);
          if (*((void *)&v177 + 1) >= v178[0])
          {
            uint64_t v98 = (char *)v177;
            uint64_t v99 = (uint64_t)(*((void *)&v177 + 1) - v177) >> 2;
            unint64_t v100 = v99 + 1;
            if ((unint64_t)(v99 + 1) >> 62) {
LABEL_144:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v101 = v178[0] - v177;
            if ((uint64_t)(v178[0] - v177) >> 1 > v100) {
              unint64_t v100 = v101 >> 1;
            }
            if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v102 = v100;
            }
            if (v102)
            {
              long long v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v178, v102);
              uint64_t v77 = (char *)*((void *)&v177 + 1);
              uint64_t v98 = (char *)v177;
            }
            else
            {
              long long v103 = 0;
            }
            v137 = &v103[4 * v99];
            *(_DWORD *)v137 = HIDWORD(v156);
            uint64_t v78 = v137 + 4;
            while (v77 != v98)
            {
              int v138 = *((_DWORD *)v77 - 1);
              v77 -= 4;
              *((_DWORD *)v137 - 1) = v138;
              v137 -= 4;
            }
            *(void *)&long long v177 = v137;
            *((void *)&v177 + 1) = v78;
            v178[0] = &v103[4 * v102];
            if (v98) {
              operator delete(v98);
            }
          }
          else
          {
            **((_DWORD **)&v177 + 1) = HIDWORD(v156);
            uint64_t v78 = v77 + 4;
          }
          *((void *)&v177 + 1) = v78;
          uint64_t v139 = *((void *)&v175 + 1);
          if (*((void *)&v175 + 1) >= v176)
          {
            uint64_t v142 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__push_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const&>((uint64_t *)&v175, &v161);
          }
          else
          {
            long long v140 = v161;
            long long v141 = v162;
            *(void *)(*((void *)&v175 + 1) + 32) = v163;
            *(_OWORD *)uint64_t v139 = v140;
            *(_OWORD *)(v139 + 16) = v141;
            std::deque<int>::deque(v139 + 40, v164);
            *(unsigned char *)(v139 + 88) = v165;
            uint64_t v142 = v139 + 96;
          }
          *((void *)&v175 + 1) = v142;
          v143 = v171;
          if ((unint64_t)v171 >= v172)
          {
            uint64_t v148 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>::__emplace_back_slow_path<int &,int &,float &>(&v170, &v158, &v157, (int *)&v156);
          }
          else
          {
            int v145 = v157;
            int v144 = v158;
            int v146 = v156;
            v171[1] = 0;
            v143[2] = 0;
            void *v143 = 0;
            v147 = operator new(0xCuLL);
            void *v143 = v147;
            v143[2] = v147 + 3;
            _DWORD *v147 = v144;
            v147[1] = v145;
            v147[2] = v146;
            uint64_t v148 = (uint64_t)(v143 + 3);
            v143[1] = v147 + 3;
            uint64_t v12 = a2;
            int v13 = v154;
          }
          v171 = (void *)v148;
          uint64_t v149 = v170;
          v159 = v164;
          std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::__emplace_unique_key_args<std::deque<int>,std::piecewise_construct_t const&,std::tuple<std::deque<int> const&>,std::tuple<>>((uint64_t)v166, v164, (uint64_t)&std::piecewise_construct, &v159)[8] = 0xAAAAAAAAAAAAAAABLL * ((v148 - v149) >> 3) - 1;
        }
      }
LABEL_51:
      std::deque<int>::~deque[abi:ne180100](v164);
      if (++v9 == v155) {
        goto LABEL_132;
      }
    }
    int v28 = v14 % v13;
    uint64_t v29 = *(void *)(a1 + 104);
    uint64_t v30 = v29 + 96 * v28;
    uint64_t v31 = *(void *)(v30 + 32);
    long long v32 = *(_OWORD *)(v30 + 16);
    long long v161 = *(_OWORD *)v30;
    long long v162 = v32;
    uint64_t v163 = v31;
    std::deque<int>::deque((uint64_t)v164, (void *)(v30 + 40));
    char v165 = *(unsigned char *)(v29 + 96 * v28 + 88);
    uint64_t v33 = *(void *)(a1 + 152) + 16 * v28;
    v159 = *(void **)v33;
    int v160 = *(_DWORD *)(v33 + 8);
    float v34 = *(float *)(v33 + 12);
    uint64_t v35 = *v9;
    float v36 = *(float *)(*a3 + 4 * v35);
    float v37 = *((float *)&v161 + 1);
    *(void *)((char *)&v161 + 4) = __PAIR64__(*(_DWORD *)(*a4 + 4 * v35), LODWORD(v36));
    uint64_t v38 = *((void *)&v173 + 1);
    if (*((void *)&v173 + 1) >= v174)
    {
      uint64_t v41 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__push_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const&>((uint64_t *)&v173, &v161);
      int v13 = v154;
    }
    else
    {
      long long v39 = v161;
      long long v40 = v162;
      *(void *)(*((void *)&v173 + 1) + 32) = v163;
      *(_OWORD *)uint64_t v38 = v39;
      *(_OWORD *)(v38 + 16) = v40;
      std::deque<int>::deque(v38 + 40, v164);
      int v13 = v154;
      *(unsigned char *)(v38 + 88) = v165;
      uint64_t v41 = v38 + 96;
    }
    float v42 = v34 + (float)(v36 - v37);
    *((void *)&v173 + 1) = v41;
    uint64_t v43 = (float *)__p[1];
    if (__p[1] < v169)
    {
      *(void *)__p[1] = v159;
      *((_DWORD *)v43 + 2) = v160;
      v43[3] = v42;
      goto LABEL_34;
    }
    int64_t v44 = ((char *)__p[1] - (char *)__p[0]) >> 4;
    unint64_t v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v46 = v169 - (char *)__p[0];
    if ((v169 - (char *)__p[0]) >> 3 > v45) {
      unint64_t v45 = v46 >> 3;
    }
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v47 = v45;
    }
    if (v47) {
      int v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v169, v47);
    }
    else {
      int v48 = 0;
    }
    size_t v63 = (float *)&v48[16 * v44];
    *((_DWORD *)v63 + 2) = v160;
    *(void *)size_t v63 = v159;
    v63[3] = v42;
    long long v70 = (char *)__p[0];
    int v67 = (char *)__p[1];
    long long v69 = v63;
    if (__p[1] != __p[0])
    {
      do
      {
        *((_OWORD *)v69 - 1) = *((_OWORD *)v67 - 1);
        v69 -= 4;
        v67 -= 16;
      }
      while (v67 != v70);
LABEL_47:
      int v67 = (char *)__p[0];
    }
LABEL_48:
    unint64_t v58 = v63 + 4;
    __p[0] = v69;
    __p[1] = v63 + 4;
    v169 = &v48[16 * v47];
    if (v67) {
      operator delete(v67);
    }
    goto LABEL_50;
  }
LABEL_132:
  v150 = *(void **)(a1 + 56);
  if (v150)
  {
    *(void *)(a1 + 64) = v150;
    operator delete(v150);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  *(_OWORD *)(a1 + 56) = v177;
  *(void *)(a1 + 72) = v178[0];
  v178[0] = 0;
  long long v177 = 0uLL;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__vdeallocate(v153);
  *(_OWORD *)(a1 + 80) = v175;
  *(void *)(a1 + 96) = v176;
  unint64_t v176 = 0;
  long long v175 = 0uLL;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__vdeallocate((void **)(a1 + 104));
  *(_OWORD *)(a1 + 104) = v173;
  *(void *)(a1 + 120) = v174;
  unint64_t v174 = 0;
  long long v173 = 0uLL;
  std::vector<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>::push_back[abi:ne180100]((uint64_t *)(a1 + 128), (uint64_t)&v170);
  v151 = *(void **)(a1 + 152);
  if (v151)
  {
    *(void *)(a1 + 160) = v151;
    operator delete(v151);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
  }
  *(_OWORD *)(a1 + 152) = *(_OWORD *)__p;
  *(void *)(a1 + 168) = v169;
  __p[1] = 0;
  v169 = 0;
  __p[0] = 0;
  std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::~__hash_table((uint64_t)v166);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(void *)&long long v161 = &v170;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  *(void *)&long long v161 = &v173;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  *(void *)&long long v161 = &v175;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  if ((void)v177)
  {
    *((void *)&v177 + 1) = v177;
    operator delete((void *)v177);
  }
}

void sub_1B2249564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,char a40,uint64_t a41)
{
  std::deque<int>::~deque[abi:ne180100](v41);
  std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::~__hash_table((uint64_t)&a31);
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  a19 = &a40;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = (char *)(v42 - 224);
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = (char *)(v42 - 192);
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  int64_t v44 = *(void **)(v42 - 160);
  if (v44)
  {
    *(void *)(v42 - 152) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

BOOL kaldi::AutoRegressiveBeamSearchDecoder::ReachedFinal(kaldi::AutoRegressiveBeamSearchDecoder *this)
{
  return *((void *)this + 19) != *((void *)this + 20);
}

void *kaldi::AutoRegressiveBeamSearchDecoder::GetPartialResult@<X0>(void *this@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  if (this[16] == this[17])
  {
    a2->__begin_ = 0;
    a2->__end_ = 0;
    a2->__end_cap_.__value_ = 0;
    return this;
  }
  int v3 = this;
  kaldi::AutoRegressiveBeamSearchDecoder::GetFinalTokensMap((kaldi::AutoRegressiveBeamSearchDecoder *)this, 1, 1, (uint64_t)v45);
  LODWORD(__n) = *(_DWORD *)(v46 + 16);
  memset(v44, 0, sizeof(v44));
  std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__init_with_size[abi:ne180100]<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>(v44, *(void *)(v46 + 24), *(void *)(v46 + 32), (uint64_t)(*(void *)(v46 + 32) - *(void *)(v46 + 24)) >> 5);
  long long v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__init_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>(&v40, *(const void **)v44[0], *(void *)(v44[0] + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v44[0] + 8) - *(void *)v44[0]) >> 2));
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<int>::reserve(a2, (int)__n);
  uint64_t v4 = v40;
  unsigned int v5 = *((_DWORD *)v40 + 1);
  if (*((_DWORD *)v3 + 12) == v5)
  {
    if (!*((unsigned char *)v3 + 2))
    {
LABEL_11:
      value = a2->__end_cap_.__value_;
      std::vector<unsigned int>::pointer end = a2->__end_;
      if (end >= value)
      {
        std::vector<unsigned int>::pointer begin = a2->__begin_;
        uint64_t v10 = end - a2->__begin_;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = (char *)value - (char *)begin;
        if (v12 >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a2->__end_cap_, v13);
          std::vector<unsigned int>::pointer begin = a2->__begin_;
          std::vector<unsigned int>::pointer end = a2->__end_;
          unsigned int v5 = *((_DWORD *)v4 + 1);
        }
        else
        {
          int v14 = 0;
        }
        int v15 = (unsigned int *)&v14[4 * v10];
        int v16 = (unsigned int *)&v14[4 * v13];
        unsigned int *v15 = v5;
        int v8 = v15 + 1;
        while (end != begin)
        {
          unsigned int v17 = *--end;
          *--int v15 = v17;
        }
        a2->__begin_ = v15;
        a2->__end_ = v8;
        a2->__end_cap_.__value_ = v16;
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        int *end = v5;
        int v8 = end + 1;
      }
      a2->__end_ = v8;
    }
  }
  else if (*((_DWORD *)v3 + 11) == v5)
  {
    if (!*((unsigned char *)v3 + 1)) {
      goto LABEL_11;
    }
  }
  else if (*((_DWORD *)v3 + 10) != v5 || !*(unsigned char *)v3)
  {
    goto LABEL_11;
  }
  uint64_t v18 = __n;
  if ((int)__n >= 1)
  {
    do
    {
      uint64_t v19 = v40;
      uint64_t v20 = *(void *)(v3[16] + 24 * (v18 - 1)) + 24 * *(int *)v40;
      if (&v40 != (void ***)v20)
      {
        std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__assign_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>((char *)&v40, *(char **)v20, *(void *)(v20 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v20 + 8) - *(void *)v20) >> 2));
        uint64_t v19 = v40;
      }
      unsigned int v21 = *((_DWORD *)v19 + 1);
      if (*((_DWORD *)v3 + 12) == v21)
      {
        if (!*((unsigned char *)v3 + 2)) {
          goto LABEL_39;
        }
      }
      else if (*((_DWORD *)v3 + 11) == v21)
      {
        if (!*((unsigned char *)v3 + 1)) {
          goto LABEL_39;
        }
      }
      else if (*((_DWORD *)v3 + 10) != v21 || !*(unsigned char *)v3)
      {
LABEL_39:
        std::vector<unsigned int>::pointer v23 = a2->__end_;
        uint64_t v22 = a2->__end_cap_.__value_;
        if (v23 >= v22)
        {
          std::vector<unsigned int>::pointer v25 = a2->__begin_;
          uint64_t v26 = v23 - a2->__begin_;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = (char *)v22 - (char *)v25;
          if (v28 >> 1 > v27) {
            unint64_t v27 = v28 >> 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a2->__end_cap_, v29);
            std::vector<unsigned int>::pointer v25 = a2->__begin_;
            std::vector<unsigned int>::pointer v23 = a2->__end_;
            unsigned int v21 = *((_DWORD *)v19 + 1);
          }
          else
          {
            uint64_t v30 = 0;
          }
          uint64_t v31 = (unsigned int *)&v30[4 * v26];
          *uint64_t v31 = v21;
          uint64_t v24 = v31 + 1;
          while (v23 != v25)
          {
            unsigned int v32 = *--v23;
            *--uint64_t v31 = v32;
          }
          a2->__begin_ = v31;
          a2->__end_ = v24;
          a2->__end_cap_.__value_ = (unsigned int *)&v30[4 * v29];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *std::vector<unsigned int>::pointer v23 = v21;
          uint64_t v24 = v23 + 1;
        }
        a2->__end_ = v24;
      }
    }
    while (v18-- > 1);
  }
  std::vector<unsigned int>::pointer v35 = a2->__begin_;
  float v34 = a2->__end_;
  if (a2->__begin_ != v34)
  {
    std::vector<unsigned int>::pointer v36 = v34 - 1;
    if (v36 > v35)
    {
      unint64_t v37 = (unint64_t)(v35 + 1);
      do
      {
        unsigned int v38 = *(_DWORD *)(v37 - 4);
        *(_DWORD *)(v37 - 4) = *v36;
        *v36-- = v38;
        BOOL v39 = v37 >= (unint64_t)v36;
        v37 += 4;
      }
      while (!v39);
    }
  }
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  long long v40 = (void **)v44;
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](&v40);
  return (void *)std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::~__hash_table((uint64_t)v45);
}

void sub_1B2249A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::vector<int> __p = a10;
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::~__hash_table((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void kaldi::AutoRegressiveBeamSearchDecoder::GetFinalTokensMap(kaldi::AutoRegressiveBeamSearchDecoder *this@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a3;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  uint64_t v7 = *((void *)this + 17);
  if (a2) {
    int v8 = 0;
  }
  else {
    int v8 = -1431655765 * ((*(void *)(v7 - 16) - *(void *)(v7 - 24)) >> 3);
  }
  if (a3 == -1) {
    int v4 = ((*((void *)this + 20) - *((void *)this + 19)) >> 4)
  }
       - 1431655765 * ((*(void *)(v7 - 16) - *(void *)(v7 - 24)) >> 3);
  if (v4 >= 1)
  {
    int v9 = 0;
    while (1)
    {
      uint64_t v10 = *((void *)this + 19);
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 - 16) - *(void *)(v7 - 24)) >> 3);
      if (v9 >= (unint64_t)((*((void *)this + 20) - v10) >> 4)) {
        break;
      }
      uint64_t v12 = *((void *)this + 13);
      if (v11 > v8)
      {
        uint64_t v13 = *((void *)this + 10);
        if (*(float *)(v13 + 96 * v8 + 8) > *(float *)(v12 + 96 * v9 + 8)) {
          goto LABEL_15;
        }
      }
      long long v27 = *(_OWORD *)(v10 + 16 * v9);
      float v28 = 0.0;
      float v28 = *(float *)(v12 + 96 * v9 + 8) - *(float *)(v12 + 96 * v9 + 4);
      int v14 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)a4, (int *)&v27);
      uint64_t v15 = *(void *)((char *)&v27 + 4);
      int v16 = HIDWORD(v27);
      unsigned int v17 = operator new(0xCuLL);
      if (v14)
      {
        uint64_t v31 = v17 + 3;
        unsigned int v32 = v17 + 3;
        *(void *)unsigned int v17 = v15;
        v17[2] = v16;
        std::vector<int> __p = v17;
        std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::emplace_back<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float &>(v14 + 3, (uint64_t)&__p, &v28);
      }
      else
      {
        *(void *)unsigned int v17 = v15;
        v17[2] = v16;
        std::vector<int> __p = v17;
        uint64_t v31 = v17 + 3;
        unsigned int v32 = v17 + 3;
        float v33 = v28;
        unint64_t v29 = &v27;
        uint64_t v26 = std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a4, (int *)&v27, (uint64_t)&std::piecewise_construct, (_DWORD **)&v29);
        std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__assign_with_size[abi:ne180100]<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*>(v26 + 3, (uint64_t)&__p, (uint64_t)&v34, 1uLL);
      }
      if (__p)
      {
        uint64_t v31 = __p;
        operator delete(__p);
      }
      ++v9;
LABEL_27:
      if (!--v4) {
        return;
      }
    }
    if (v11 <= v8) {
      return;
    }
    uint64_t v13 = *((void *)this + 10);
LABEL_15:
    LODWORD(v29) = 0;
    *(float *)&unint64_t v29 = *(float *)(v13 + 96 * v8 + 8) - *(float *)(v13 + 96 * v8 + 4);
    LODWORD(v28) = -1 - 1431655765 * ((*((void *)this + 17) - *((void *)this + 16)) >> 3);
    uint64_t v18 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)a4, (int *)&v28);
    uint64_t v19 = v18;
    if (v18)
    {
      uint64_t v20 = v18 + 3;
      uint64_t v21 = *(void *)(v7 - 24) + 24 * v8;
      unint64_t v22 = v19[4];
      if (v22 >= v19[5])
      {
        uint64_t v23 = std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__emplace_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain const&,float &>(v20, v21, &v29);
      }
      else
      {
        std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__construct_one_at_end[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain const&,float &>((uint64_t)v20, v21, (float *)&v29);
        uint64_t v23 = v22 + 32;
      }
      v19[4] = v23;
    }
    else
    {
      uint64_t v24 = *(void *)(v7 - 24) + 24 * v8;
      std::vector<int> __p = 0;
      uint64_t v31 = 0;
      unsigned int v32 = 0;
      std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__init_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>(&__p, *(const void **)v24, *(void *)(v24 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v24 + 8) - *(void *)v24) >> 2));
      float v33 = *(float *)&v29;
      *(void *)&long long v27 = &v28;
      std::vector<unsigned int>::pointer v25 = std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a4, (int *)&v28, (uint64_t)&std::piecewise_construct, (_DWORD **)&v27);
      std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__assign_with_size[abi:ne180100]<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*>(v25 + 3, (uint64_t)&__p, (uint64_t)&v34, 1uLL);
      if (__p)
      {
        uint64_t v31 = __p;
        operator delete(__p);
      }
    }
    ++v8;
    goto LABEL_27;
  }
}

void sub_1B2249DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::~__hash_table(v17);
  _Unwind_Resume(a1);
}

BOOL kaldi::AutoRegressiveBeamSearchDecoder::GetBestPath(uint64_t a1, uint64_t a2, char a3)
{
  return kaldi::AutoRegressiveBeamSearchDecoder::GetRawLattice(a1, a2, a3, 1);
}

BOOL kaldi::AutoRegressiveBeamSearchDecoder::GetRawLattice(uint64_t a1, uint64_t a2, char a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  kaldi::AutoRegressiveBeamSearchDecoder::GetFinalTokensMap((kaldi::AutoRegressiveBeamSearchDecoder *)a1, a3, a4, (uint64_t)v49);
  uint64_t v35 = v50;
  if (!v50) {
    goto LABEL_54;
  }
  if (*(void *)(a1 + 136) == *(void *)(a1 + 128)) {
    goto LABEL_53;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
  uint64_t v48 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v8, &v48);
  int v9 = (uint64_t *)&v46;
  uint64_t v46 = 0;
  unint64_t v47 = 0;
  unint64_t v45 = (uint64_t *)&v46;
  int v44 = -1431655765 * ((*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3) - 1;
  if (v44 < 0) {
    goto LABEL_52;
  }
  int v36 = v8;
  do
  {
    uint64_t v42 = v45;
    v43[0] = v46;
    uint64_t v10 = v47;
    uint64_t v46 = 0;
    unint64_t v47 = 0;
    v43[1] = v10;
    BOOL v11 = v10 == 0;
    uint64_t v12 = &v42;
    if (!v11) {
      uint64_t v12 = (uint64_t **)(v43[0] + 2);
    }
    *uint64_t v12 = (uint64_t *)v43;
    unint64_t v45 = (uint64_t *)&v46;
    uint64_t v13 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v49, &v44);
    int v14 = v13;
    if (v13 && v13[4] != v13[3])
    {
      unint64_t v15 = 0;
      uint64_t v16 = 1;
      do
      {
        *(void *)uint64_t v51 = v16;
        unsigned int v38 = (int *)v51;
        *((_DWORD *)std::__tree<std::__value_type<std::pair<BOOL,int>,int>,std::__map_value_compare<std::pair<BOOL,int>,std::__value_type<std::pair<BOOL,int>,int>,std::less<std::pair<BOOL,int>>,true>,std::allocator<std::__value_type<std::pair<BOOL,int>,int>>>::__emplace_unique_key_args<std::pair<BOOL,int>,std::piecewise_construct_t const&,std::tuple<std::pair<BOOL,int>&&>,std::tuple<>>(&v42, v51, (uint64_t)&std::piecewise_construct, (void **)&v38)+ 9) = v8;
        ++v15;
        v16 += 0x100000000;
      }
      while (v15 < (v14[4] - v14[3]) >> 5);
    }
    uint64_t v17 = v42;
    if (v42 != (uint64_t *)v43)
    {
      while (1)
      {
        if (*((unsigned char *)v17 + 28))
        {
          unsigned int v38 = &v44;
          uint64_t v18 = std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v49, &v44, (uint64_t)&std::piecewise_construct, &v38)[3]+ 32 * *((int *)v17 + 8);
        }
        else
        {
          uint64_t v18 = *(void *)(*(void *)(a1 + 128) + 24 * v44) + 24 * *((int *)v17 + 8);
        }
        uint64_t v19 = *(float **)v18;
        uint64_t v20 = *(unsigned int **)(v18 + 8);
        if (*(unsigned int **)v18 != v20) {
          break;
        }
LABEL_44:
        unsigned int v32 = (uint64_t *)v17[1];
        if (v32)
        {
          do
          {
            float v33 = v32;
            unsigned int v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            float v33 = (uint64_t *)v17[2];
            BOOL v11 = *v33 == (void)v17;
            uint64_t v17 = v33;
          }
          while (!v11);
        }
        uint64_t v17 = v33;
        if (v33 == (uint64_t *)v43) {
          goto LABEL_50;
        }
      }
      int v21 = 0;
      while (1)
      {
        uint64_t v23 = *(unsigned int *)v19;
        unsigned int v22 = *((_DWORD *)v19 + 1);
        float v24 = v19[2];
        if (*(_DWORD *)(a1 + 48) == v22)
        {
          if (*(unsigned char *)(a1 + 2)) {
            goto LABEL_28;
          }
        }
        else if (*(_DWORD *)(a1 + 44) == v22)
        {
          if (*(unsigned char *)(a1 + 1)) {
            goto LABEL_28;
          }
        }
        else if (*(_DWORD *)(a1 + 40) == v22 && *(unsigned char *)a1)
        {
          goto LABEL_28;
        }
        if (v22 != *(_DWORD *)(a1 + 36))
        {
          unsigned int v26 = *((_DWORD *)v19 + 1);
          if (!v22)
          {
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Decoding output contains label 0. Replacing it with BOS label (", 63);
              uint64_t v31 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)").", 2);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
            }
            unsigned int v26 = 0;
            unsigned int v22 = *(_DWORD *)(a1 + 36);
          }
          goto LABEL_29;
        }
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Decoding output contains BOS label (", 36);
          std::vector<unsigned int>::pointer v25 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"). Mapping it to label 0.", 25);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
        }
LABEL_28:
        unsigned int v26 = 0;
LABEL_29:
        if (*((unsigned char *)v17 + 28))
        {
          unsigned int v38 = &v44;
          float v27 = *(float *)(std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v49, &v44, (uint64_t)&std::piecewise_construct, &v38)[3]+ 32 * *((int *)v17 + 8)+ 24);
        }
        else
        {
          float v27 = 0.0;
        }
        int v28 = *((_DWORD *)v17 + 9);
        unsigned int v38 = (int *)__PAIR64__(v26, v22);
        float v39 = -v27;
        float v40 = -v24;
        int v41 = v28;
        uint64_t v37 = v23 << 32;
        unint64_t v29 = std::__tree<std::__value_type<std::pair<BOOL,int>,int>,std::__map_value_compare<std::pair<BOOL,int>,std::__value_type<std::pair<BOOL,int>,int>,std::less<std::pair<BOOL,int>>,true>,std::allocator<std::__value_type<std::pair<BOOL,int>,int>>>::find<std::pair<BOOL,int>>((uint64_t)&v45, (unsigned __int8 *)&v37);
        if (&v46 == (void **)v29)
        {
          uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
          *(void *)uint64_t v51 = &v37;
          *((_DWORD *)std::__tree<std::__value_type<std::pair<BOOL,int>,int>,std::__map_value_compare<std::pair<BOOL,int>,std::__value_type<std::pair<BOOL,int>,int>,std::less<std::pair<BOOL,int>>,true>,std::allocator<std::__value_type<std::pair<BOOL,int>,int>>>::__emplace_unique_key_args<std::pair<BOOL,int>,std::piecewise_construct_t const&,std::tuple<std::pair<BOOL,int>&&>,std::tuple<>>(&v45, (unsigned __int8 *)&v37, (uint64_t)&std::piecewise_construct, (void **)v51)+ 9) = v30;
        }
        else
        {
          uint64_t v30 = *((unsigned int *)v29 + 9);
        }
        (*(void (**)(uint64_t, uint64_t, int **))(*(void *)a2 + 208))(a2, v30, &v38);
        if (a4 == -1 || (++v21, v21 < a4))
        {
          v19 += 3;
          if (v19 != (float *)v20) {
            continue;
          }
        }
        goto LABEL_44;
      }
    }
LABEL_50:
    std::__tree<int>::destroy((uint64_t)&v42, v43[0]);
    --v44;
    LODWORD(v8) = v36;
  }
  while (v44 >= 0);
  int v9 = v45;
LABEL_52:
  (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, *((unsigned int *)v9 + 9));
  std::__tree<int>::destroy((uint64_t)&v45, v46);
LABEL_53:
  fst::RemoveEpsLocal<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
LABEL_54:
  std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::~__hash_table((uint64_t)v49);
  return v35 != 0;
}

void sub_1B224A384(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1 - 192, *(void **)(v1 - 184));
  std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::~__hash_table(v1 - 160);
  _Unwind_Resume(a1);
}

void kaldi::AutoRegressiveBeamSearchDecoder::MergeHyps(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(a1 + 48) & 0x80000000) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t v3 = *(void *)(a1 + 88);
    if (v3 != v4)
    {
      unint64_t v6 = 0;
      do
      {
        if (v3 == v4)
        {
          uint64_t v3 = v4;
        }
        else
        {
          uint64_t v7 = 0;
          unint64_t v8 = 0;
          do
          {
            if (v6 != v8 && *(void *)(v4 + 96 * v6 + 24) == *(void *)(v4 + v7 + 32))
            {
              kaldi::AutoRegressiveBeamSearchDecoder::MergeLogLikelihoods(a1, a2, *(_DWORD *)(v4 + v7 + 12) + *(_DWORD *)(a1 + 32) * v6, *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 32) * v8);
              uint64_t v4 = *(void *)(a1 + 80);
              uint64_t v3 = *(void *)(a1 + 88);
            }
            ++v8;
            v7 += 96;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 5) > v8);
        }
        uint64_t v10 = *(void *)(a1 + 104);
        uint64_t v9 = *(void *)(a1 + 112);
        if (v9 != v10)
        {
          unint64_t v11 = 0;
          uint64_t v12 = 32;
          do
          {
            uint64_t v13 = *(void *)(a1 + 80);
            if (*(void *)(v13 + 96 * v6 + 24) == *(void *)(v10 + v12))
            {
              kaldi::AutoRegressiveBeamSearchDecoder::MergeLogLikelihoods(a1, a2, *(_DWORD *)(a1 + 40) + *(_DWORD *)(a1 + 32) * v6, v11 - 1431655765 * ((unint64_t)(*(void *)(a1 + 88) - v13) >> 5) * *(_DWORD *)(a1 + 32));
              uint64_t v10 = *(void *)(a1 + 104);
              uint64_t v9 = *(void *)(a1 + 112);
            }
            ++v11;
            v12 += 96;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 5) > v11);
          uint64_t v4 = *(void *)(a1 + 80);
          uint64_t v3 = *(void *)(a1 + 88);
        }
        ++v6;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 5) > v6);
    }
  }
}

void kaldi::AutoRegressiveBeamSearchDecoder::MergeLogLikelihoods(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3;
  uint64_t v6 = a4;
  float v7 = *(float *)(*a2 + 4 * a4);
  if (*(unsigned char *)(a1 + 4))
  {
    float v8 = *(float *)(v4 + 4 * a3);
    if (v7 <= v8) {
      float v9 = *(float *)(v4 + 4 * a3);
    }
    else {
      float v9 = *(float *)(*a2 + 4 * a4);
    }
    BOOL v11 = v8 == INFINITY || v7 == INFINITY;
    float v12 = NAN;
    if (!v11) {
      float v12 = v9;
    }
  }
  else
  {
    float v13 = *(float *)(v4 + 4 * a3);
    float v14 = -v13;
    if (v7 != -INFINITY)
    {
      float v15 = -v7;
      if (v13 == -INFINITY)
      {
        float v14 = -v7;
      }
      else if (v7 >= v13)
      {
        float v17 = expf(-(float)(v7 - v13));
        float v14 = v15 - logf(v17 + 1.0);
      }
      else
      {
        float v16 = expf(-(float)(v13 - v7));
        float v14 = v14 - logf(v16 + 1.0);
      }
    }
    float v12 = -v14;
  }
  *(float *)(v4 + 4 * v6) = v12;
  *(_DWORD *)(v4 + 4 * v5) = -8388609;
}

void kaldi::AutoRegressiveBeamSearchDecoder::HypInfo::Update(kaldi::AutoRegressiveBeamSearchDecoder::HypInfo *this, float a2, float a3, int a4)
{
  int v9 = a4;
  *((float *)this + 1) = a2;
  *((float *)this + 2) = a3;
  if ((a4 & 0x80000000) == 0)
  {
    int v4 = *((_DWORD *)this + 4) + 1;
    *((_DWORD *)this + 3) = a4;
    *((_DWORD *)this + 4) = v4;
    unint64_t v5 = *((void *)this + 3);
    *((void *)this + 3) = ((a4 - 1640531527) + (v5 << 6) + (v5 >> 2)) ^ v5;
    *((void *)this + 4) = v5;
    unint64_t v6 = *(unsigned int *)this;
    if ((int)v6 >= 1)
    {
      float v7 = (void *)((char *)this + 40);
      unint64_t v8 = *((void *)this + 10);
      if (v8 >= v6)
      {
        ++*((void *)this + 9);
        *((void *)this + 10) = v8 - 1;
        std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 40, 1);
      }
      std::deque<int>::push_back(v7, &v9);
    }
  }
}

void **std::vector<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  float result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  float v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    float v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    float v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    uint64_t v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)float v14 = 0;
    *(_OWORD *)float v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>::__swap_out_circular_buffer(a1, v16);
    unint64_t v8 = (void *)a1[1];
    float result = std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer(v16);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)float v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    unint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B224A838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::emplace_back<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float &>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    uint64_t v11 = (uint64_t)(v9 - *a1) >> 5;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v7 - *a1;
    if (v13 >> 4 > v12) {
      unint64_t v12 = v13 >> 4;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = v6;
    uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v6, v14);
    float v16 = &v15[32 * v11];
    v19[0] = v15;
    v19[1] = v16;
    void v19[3] = &v15[32 * v17];
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = 0;
    *(void *)float v16 = 0;
    *(_OWORD *)float v16 = *(_OWORD *)a2;
    *((void *)v16 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *((_DWORD *)v16 + 6) = *a3;
    std::string v19[2] = v16 + 32;
    std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__swap_out_circular_buffer(a1, v19);
    uint64_t v10 = a1[1];
    std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    *(void *)unint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
    *(_OWORD *)unint64_t v9 = *(_OWORD *)a2;
    *(void *)(v9 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)(v9 + 24) = *a3;
    uint64_t v10 = v9 + 32;
    a1[1] = v9 + 32;
  }
  a1[1] = v10;
  return v10 - 32;
}

void sub_1B224A970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__init_with_size[abi:ne180100]<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    float result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B224A9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__init_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>((void *)v4, *(const void **)v6, *(void *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B224AAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__init_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float result = std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B224AB6C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__assign_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  char v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x1555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x1555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    float result = std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__vallocate[abi:ne180100](v7, v12);
    unint64_t v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    char v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  float v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    float result = (char *)memmove(*(void **)result, __src, v15 - v9);
    char v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    float result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

uint64_t std::deque<int>::deque(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = (char **)(v5 + 8 * (v4 >> 10));
  if (v6 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v11 = 0;
    unint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 10));
  }
  else
  {
    uint64_t v8 = &(*v7)[4 * (v4 & 0x3FF)];
    unint64_t v9 = a2[5] + v4;
    unint64_t v10 = (char *)(v5 + 8 * (v9 >> 10));
    uint64_t v11 = (char *)(*(void *)v10 + 4 * (v9 & 0x3FF));
  }
  std::deque<int>::__append<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,0>((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_1B224AD5C(_Unwind_Exception *a1)
{
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void *std::deque<int>::__append<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,0>(void *a1, char **a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = ((uint64_t)&a5[-*(void *)a4] >> 2) + ((a4 - (char *)a2) << 7) - ((a3 - *a2) >> 2);
  }
  return std::deque<int>::__append_with_size[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>>(a1, a2, a3, v5);
}

void *std::deque<int>::__append_with_size[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>>(void *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = ((v9 - v8) << 7) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    std::deque<int>::__add_back_capacity(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  uint64_t v13 = (void *)(v8 + 8 * (v11 >> 10));
  if (v9 == v8) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 4 * (v11 & 0x3FF);
  }
  v24[0] = v8 + 8 * (v11 >> 10);
  v24[1] = v14;
  float result = std::__deque_iterator<int,int *,int &,int **,long,1024l>::operator+[abi:ne180100]((uint64_t)v24, a4);
  if (v14 != v16)
  {
    uint64_t v17 = a1[5];
    do
    {
      if (v13 == result) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4096;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }
      else
      {
        uint64_t v19 = *a2;
        uint64_t v20 = (_DWORD *)v14;
        do
        {
          int v21 = *(_DWORD *)a3;
          a3 += 4;
          *v20++ = v21;
          if (a3 - v19 == 4096)
          {
            unsigned int v22 = a2[1];
            ++a2;
            uint64_t v19 = v22;
            a3 = v22;
          }
        }
        while (v20 != (_DWORD *)v18);
      }
      v17 += (v18 - v14) >> 2;
      if (v13 == result) {
        break;
      }
      uint64_t v23 = v13[1];
      ++v13;
      uint64_t v14 = v23;
    }
    while (v23 != v16);
    a1[5] = v17;
  }
  return result;
}

void std::deque<int>::__add_back_capacity(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x3FF) != 0) {
    unint64_t v6 = (v5 >> 10) + 1;
  }
  else {
    unint64_t v6 = v5 >> 10;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 10) {
    unint64_t v8 = v7 >> 10;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 10)
  {
    for (a1[4] = v7 - (v8 << 10); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          unsigned int v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          std::vector<unsigned int>::pointer v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          float v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 1023;
          }
          else {
            uint64_t v64 = 1024;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 10);
      if (v8)
      {
        int v66 = (char *)a1[2];
        do
        {
          int v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          long long v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              uint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v78);
              unint64_t v81 = &v79[8 * (v78 >> 2)];
              uint64_t v82 = (uint64_t *)a1[1];
              int v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                int v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              uint64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                int v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              unint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                int v66 = (char *)a1[1];
              }
              uint64_t v77 = &v66[-8 * (v74 >> 1)];
              int v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)int v66 = v69;
          int v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      uint64_t v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = v8 << 10;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        long long v88 = operator new(0x1000uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        float v39 = (void *)a1[1];
        float v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v91, v48);
              uint64_t v51 = (uint64_t *)__p[1];
              float v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                float v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                unint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)unint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              int v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                float v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              unint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                float v40 = (char *)__p[1];
              }
              unint64_t v47 = &v40[-8 * (v44 >> 1)];
              float v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)float v40 = *v39;
          float v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          float v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      int v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)__p, v57);
      }
      int64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1B224B3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__deque_iterator<int,int *,int &,int **,long,1024l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  float result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 2);
    if (v4 < 1) {
      result -= (unint64_t)(1023 - v4) >> 10;
    }
    else {
      result += (unint64_t)v4 >> 10;
    }
  }
  return result;
}

uint64_t std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__assign_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*>(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) < a4)
  {
    std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__vdeallocate((void **)a1);
    if (a4 > 0x2AAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) >= 0x155555555555555) {
      unint64_t v11 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>(v8, (uint64_t)a2, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5) < a4)
  {
    unint64_t v13 = &a2[2 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5)];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*,0>(a2, v13, (uint64_t)v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = (uint64_t)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      uint64_t v17 = v16 - 96;
      uint64_t result = std::deque<int>::~deque[abi:ne180100]((void *)(v16 - 56));
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_1B224B630(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B224B638(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        unint64_t v5 = v3 - 96;
        std::deque<int>::~deque[abi:ne180100]((void *)v3 - 7);
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2 + v7;
      uint64_t v9 = a4 + v7;
      long long v10 = *(_OWORD *)(a2 + v7);
      long long v11 = *(_OWORD *)(a2 + v7 + 16);
      *(void *)(v9 + 32) = *(void *)(a2 + v7 + 32);
      *(_OWORD *)uint64_t v9 = v10;
      *(_OWORD *)(v9 + 16) = v11;
      std::deque<int>::deque(a4 + v7 + 40, (void *)(a2 + v7 + 40));
      *(unsigned char *)(v9 + 88) = *(unsigned char *)(a2 + v7 + 88);
      v7 += 96;
    }
    while (v8 + 96 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B224B788(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 56;
    do
    {
      std::deque<int>::~deque[abi:ne180100]((void *)(v4 + v2));
      v2 -= 96;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*,0>(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v5 = a2;
  do
  {
    long long v6 = *v4;
    long long v7 = v4[1];
    *(void *)(a3 + 32) = *((void *)v4 + 4);
    *(_OWORD *)a3 = v6;
    *(_OWORD *)(a3 + 16) = v7;
    std::deque<int>::operator=((void *)(a3 + 40), (void *)v4 + 5);
    *(unsigned char *)(a3 + 88) = *((unsigned char *)v4 + 88);
    a3 += 96;
    v4 += 6;
  }
  while (v4 != v5);
  return v5;
}

void *std::deque<int>::operator=(void *a1, void *a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = a2[4];
    uint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    long long v7 = (char **)(v5 + 8 * (v4 >> 10));
    if (v6 == v5)
    {
      uint64_t v8 = 0;
      long long v11 = 0;
      long long v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 10));
    }
    else
    {
      uint64_t v8 = &(*v7)[4 * (v4 & 0x3FF)];
      unint64_t v9 = a2[5] + v4;
      long long v10 = (char *)(v5 + 8 * (v9 >> 10));
      long long v11 = (char *)(*(void *)v10 + 4 * (v9 & 0x3FF));
    }
    std::deque<int>::assign<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,0>(a1, v7, v8, v10, v11);
  }
  return a1;
}

void *std::deque<int>::assign<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,0>(void *a1, char **a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = ((uint64_t)&a5[-*(void *)a4] >> 2) + ((a4 - (char *)a2) << 7) - ((a3 - *a2) >> 2);
  }
  return std::deque<int>::__assign_with_size_random_access[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>>(a1, a2, a3, v5);
}

void *std::deque<int>::__assign_with_size_random_access[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>>(void *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  unint64_t v7 = a1[5];
  if (v7 >= a4)
  {
    uint64_t v14 = a1[1];
    uint64_t v15 = (char *)(v14 + 8 * (a1[4] >> 10));
    if (a1[2] == v14) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = *(void *)v15 + 4 * (a1[4] & 0x3FFLL);
    }
    v22[0] = a2;
    v22[1] = a3;
    uint64_t v18 = (char **)std::__deque_iterator<int,int *,int &,int **,long,1024l>::operator+[abi:ne180100]((uint64_t)v22, a4);
    uint64_t v23 = v15;
    uint64_t v24 = v16;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,std::__deque_iterator<int,int *,int &,int **,long,1024l>>>(a2, a3, v18, v19, (uint64_t)&v23);
    return (void *)std::deque<int>::__erase_to_end((uint64_t)a1, v23, v24);
  }
  else
  {
    unint64_t v9 = (char **)std::__deque_iterator<int,int *,int &,int **,long,1024l>::operator+[abi:ne180100]((uint64_t)&v20, v7);
    long long v10 = v8;
    uint64_t v11 = a1[1];
    if (a1[2] == v11) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = *(void *)(v11 + 8 * (a1[4] >> 10)) + 4 * (a1[4] & 0x3FFLL);
    }
    uint64_t v23 = (char *)(v11 + 8 * (a1[4] >> 10));
    uint64_t v24 = v12;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,std::__deque_iterator<int,int *,int &,int **,long,1024l>>>(v20, v21, v9, v8, (uint64_t)&v23);
    return std::deque<int>::__append_with_size[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>>(a1, v9, v10, a4 - a1[5]);
  }
}

uint64_t std::deque<int>::__erase_to_end(uint64_t result, char *a2, uint64_t a3)
{
  uint64_t v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = v4 + *(void *)(result + 40);
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  uint64_t v8 = (char *)(v6 + 8 * (v5 >> 10));
  if (v7 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)v8 + 4 * (v5 & 0x3FF);
  }
  if (v9 != a3)
  {
    uint64_t v10 = ((v9 - *(void *)v8) >> 2) + ((v8 - a2) << 7);
    uint64_t v11 = a3 - *(void *)a2;
    uint64_t v12 = v10 - (v11 >> 2);
    if (v12 >= 1)
    {
      unint64_t v13 = (char *)(v6 + 8 * (v4 >> 10));
      if (v7 == v6) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = *(void *)v13 + 4 * (*(void *)(result + 32) & 0x3FFLL);
      }
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = (v11 >> 2) + ((a2 - v13) << 7) - ((v14 - *(void *)v13) >> 2);
      }
      std::__deque_iterator<int,int *,int &,int **,long,1024l>::operator+[abi:ne180100]((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        uint64_t result = std::deque<int>::__maybe_remove_back_spare[abi:ne180100](v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,std::__deque_iterator<int,int *,int &,int **,long,1024l>>>(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }
  else
  {
    uint64_t v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,int const*,int const*,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      uint64_t v9 = *v8++;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,int const*,int const*,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    uint64_t v10 = *a3;
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,int const*,int const*,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,int const*,int const*,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  uint64_t v6 = a4;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 2 >= v11 >> 2 ? v11 >> 2 : (a3 - v9) >> 2;
      if (v12) {
        __srlong long c = (char *)memmove(__dst, v9, 4 * v12);
      }
      v9 += 4 * v12;
      if (v9 == a3) {
        break;
      }
      unint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      long long __dst = v13;
    }
    __dst += 4 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      long long __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      unint64_t v4 = (void **)(v2 + 24);
      std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

char *std::__tree<std::__value_type<std::pair<BOOL,int>,int>,std::__map_value_compare<std::pair<BOOL,int>,std::__value_type<std::pair<BOOL,int>,int>,std::less<std::pair<BOOL,int>>,true>,std::allocator<std::__value_type<std::pair<BOOL,int>,int>>>::__emplace_unique_key_args<std::pair<BOOL,int>,std::piecewise_construct_t const&,std::tuple<std::pair<BOOL,int>&&>,std::tuple<>>(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, void **a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::pair<BOOL,int>,int>,std::__map_value_compare<std::pair<BOOL,int>,std::__value_type<std::pair<BOOL,int>,int>,std::less<std::pair<BOOL,int>>,true>,std::allocator<std::__value_type<std::pair<BOOL,int>,int>>>::__find_equal<std::pair<BOOL,int>>((uint64_t)a1, &v10, a2);
  uint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (char *)operator new(0x28uLL);
    *(void *)(v7 + 28) = **a4;
    *((_DWORD *)v7 + 9) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<BOOL,int>,int>,std::__map_value_compare<std::pair<BOOL,int>,std::__value_type<std::pair<BOOL,int>,int>,std::less<std::pair<BOOL,int>>,true>,std::allocator<std::__value_type<std::pair<BOOL,int>,int>>>::__find_equal<std::pair<BOOL,int>>(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  unint64_t v5 = *(uint64_t **)(a1 + 8);
  double result = (uint64_t *)(a1 + 8);
  unint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    int v7 = *((_DWORD *)a3 + 1);
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v4;
        unsigned int v9 = *((unsigned __int8 *)v4 + 28);
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        unint64_t v4 = (uint64_t *)*v8;
        double result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v9 >= v6)
      {
        int v10 = *((_DWORD *)v8 + 8);
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      double result = v8 + 1;
      unint64_t v4 = (uint64_t *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

void *std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  _OWORD v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v11 = *v21;
LABEL_38:
    *uint64_t v21 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *v13;
  *unint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B224C060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 3;
    std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t *std::__tree<std::__value_type<std::pair<BOOL,int>,int>,std::__map_value_compare<std::pair<BOOL,int>,std::__value_type<std::pair<BOOL,int>,int>,std::less<std::pair<BOOL,int>>,true>,std::allocator<std::__value_type<std::pair<BOOL,int>,int>>>::find<std::pair<BOOL,int>>(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v5 = *a2;
  int v6 = *((_DWORD *)a2 + 1);
  unint64_t v7 = v2;
  do
  {
    unsigned int v8 = *((unsigned __int8 *)v3 + 28);
    if (v8 >= v5)
    {
      if (v5 >= v8)
      {
        if (*((_DWORD *)v3 + 8) < v6) {
          ++v3;
        }
        else {
          unint64_t v7 = v3;
        }
      }
      else
      {
        unint64_t v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2) {
    return v2;
  }
  unsigned int v9 = *((unsigned __int8 *)v7 + 28);
  if (v5 < v9 || v9 >= v5 && v6 < *((_DWORD *)v7 + 8)) {
    return v2;
  }
  return v7;
}

int *std::__stable_sort<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3, unint64_t a4, int *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    unsigned int v8 = (char *)result;
    if (a4 == 2)
    {
      uint64_t v9 = *(a2 - 1);
      uint64_t v10 = *result;
      if (*(float *)(**a3 + 4 * v9) > *(float *)(**a3 + 4 * v10))
      {
        *double result = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v22 = a5;
      unint64_t v23 = a4 >> 1;
      uint64_t v24 = &result[a4 >> 1];
      unint64_t v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(result, v24, a3, v25, a5);
        int64_t v26 = &v22[v23];
        double result = std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>((int *)&v8[4 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v26);
        float v27 = &v22[a4];
        unint64_t v28 = *a3;
        unint64_t v29 = v26;
        while (v29 != v27)
        {
          uint64_t v30 = v29;
          uint64_t v31 = *v29;
          float v32 = *(float *)(*v28 + 4 * v31);
          uint64_t v33 = *v22;
          float v34 = *(float *)(*v28 + 4 * v33);
          if (v32 > v34) {
            LODWORD(v33) = v31;
          }
          v22 += v32 <= v34;
          unint64_t v29 = &v30[v32 > v34];
          *(_DWORD *)unsigned int v8 = v33;
          v8 += 4;
          if (v22 == v26)
          {
            if (v29 != v27)
            {
              uint64_t v35 = 0;
              if (v32 > v34) {
                char v36 = 1;
              }
              else {
                char v36 = 2;
              }
              uint64_t v37 = &v30[v36 & 1];
              do
              {
                *(_DWORD *)&v8[v35 * 4] = v37[v35];
                ++v35;
              }
              while (&v37[v35] != v27);
            }
            return result;
          }
        }
        if (v22 != v26)
        {
          uint64_t v38 = 0;
          do
          {
            *(_DWORD *)&v8[v38 * 4] = v22[v38];
            ++v38;
          }
          while (&v22[v38] != v26);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(result, v24, a3, v25, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(&v8[4 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v22, a6);
        return (int *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(v8, &v8[4 * (a4 >> 1)], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v22, a6);
      }
    }
    else if (result != a2)
    {
      unint64_t v12 = result + 1;
      if (result + 1 != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = **a3;
        float v15 = result;
        do
        {
          uint64_t v16 = *v15;
          float v15 = v12;
          uint64_t v17 = *v12;
          float v18 = *(float *)(v14 + 4 * v17);
          if (v18 > *(float *)(v14 + 4 * v16))
          {
            uint64_t v19 = v13;
            while (1)
            {
              *(int *)((char *)result + v19 + 4) = v16;
              if (!v19) {
                break;
              }
              uint64_t v16 = *(int *)((char *)result + v19 - 4);
              v19 -= 4;
              if (v18 <= *(float *)(v14 + 4 * v16))
              {
                uint64_t v20 = (int *)((char *)result + v19 + 4);
                goto LABEL_15;
              }
            }
            uint64_t v20 = result;
LABEL_15:
            int *v20 = v17;
          }
          unint64_t v12 = v15 + 1;
          v13 += 4;
        }
        while (v15 + 1 != a2);
      }
    }
  }
  return result;
}

int *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3, unint64_t a4, int *a5)
{
  if (a4)
  {
    unsigned int v5 = a5;
    unint64_t v7 = result;
    if (a4 == 1)
    {
LABEL_8:
      *unsigned int v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = *(a2 - 1);
      uint64_t v11 = **a3;
      float v12 = *(float *)(v11 + 4 * v10);
      float v13 = *(float *)(v11 + 4 * *result);
      if (v12 <= v13) {
        LODWORD(v10) = *result;
      }
      *a5 = v10;
      unsigned int v5 = a5 + 1;
      if (v12 <= v13) {
        unint64_t v7 = a2 - 1;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v25 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(result, v25, a3, a4 >> 1, a5, a4 >> 1);
      double result = (int *)std::__stable_sort<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      int64_t v26 = *a3;
      float v27 = &v7[a4 >> 1];
      while (v27 != a2)
      {
        unint64_t v28 = v27;
        uint64_t v29 = *v27;
        float v30 = *(float *)(*v26 + 4 * v29);
        uint64_t v31 = *v7;
        float v32 = *(float *)(*v26 + 4 * v31);
        if (v30 > v32) {
          LODWORD(v31) = v29;
        }
        float v27 = &v28[v30 > v32];
        v7 += v30 <= v32;
        *v5++ = v31;
        if (v7 == v25)
        {
          if (v27 != a2)
          {
            uint64_t v33 = 0;
            float v34 = &v28[v30 > v32];
            do
            {
              v5[v33] = v34[v33];
              ++v33;
            }
            while (&v34[v33] != a2);
          }
          return result;
        }
      }
      if (v7 != v25)
      {
        uint64_t v35 = 0;
        do
        {
          v5[v35] = v7[v35];
          ++v35;
        }
        while (&v7[v35] != v25);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = **a3;
        uint64_t v17 = a5;
        float v18 = a5;
        do
        {
          uint64_t v20 = *v18++;
          int v19 = v20;
          uint64_t v21 = *v14;
          if (*(float *)(v16 + 4 * v21) <= *(float *)(v16 + 4 * v20))
          {
            int *v18 = v21;
          }
          else
          {
            v17[1] = v19;
            unint64_t v22 = a5;
            if (v17 != a5)
            {
              uint64_t v23 = v15;
              while (1)
              {
                unint64_t v22 = (int *)((char *)a5 + v23);
                uint64_t v24 = *(int *)((char *)a5 + v23 - 4);
                if (*(float *)(v16 + 4 * *v14) <= *(float *)(v16 + 4 * v24)) {
                  break;
                }
                *unint64_t v22 = v24;
                v23 -= 4;
                if (!v23)
                {
                  unint64_t v22 = a5;
                  break;
                }
              }
            }
            *unint64_t v22 = *v14;
          }
          ++v14;
          v15 += 4;
          uint64_t v17 = v18;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::deque<int>::~deque[abi:ne180100](v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__push_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v19 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  uint64_t v17 = v11;
  float v18 = &v10[96 * v9];
  long long v12 = *a2;
  long long v13 = a2[1];
  *((void *)v11 + 4) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  std::deque<int>::deque((uint64_t)(v11 + 40), (void *)a2 + 5);
  v10[96 * v4 + 88] = *((unsigned char *)a2 + 88);
  v17 += 96;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1B224C7A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a6;
  if (a3 != a5)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a3 + v8;
      long long v10 = *(_OWORD *)(a3 + v8 - 96);
      long long v11 = *(_OWORD *)(a3 + v8 - 80);
      uint64_t v12 = a7 + v8;
      *(void *)(v12 - 64) = *(void *)(a3 + v8 - 64);
      *(_OWORD *)(v12 - 96) = v10;
      *(_OWORD *)(v12 - 80) = v11;
      *(void *)(v12 - 56) = *(void *)(a3 + v8 - 56);
      *(void *)(v12 - 48) = *(void *)(a3 + v8 - 48);
      *(void *)(v12 - 40) = *(void *)(a3 + v8 - 40);
      *(void *)(v12 - 32) = *(void *)(a3 + v8 - 32);
      *(_OWORD *)(v9 - 40) = 0uLL;
      *(_OWORD *)(v9 - 56) = 0uLL;
      *(void *)(v12 - 24) = *(void *)(a3 + v8 - 24);
      *(void *)(v12 - 16) = *(void *)(a3 + v8 - 16);
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(unsigned char *)(v12 - 8) = *(unsigned char *)(a3 + v8 - 8);
      v8 -= 96;
    }
    while (a3 + v8 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    std::deque<int>::~deque[abi:ne180100]((void *)(i - 56));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::find<std::deque<int>>(void *a1, void *a2)
{
  int v4 = kaldi::AutoRegressiveBeamSearchDecoder::DequeHash::operator()((uint64_t)(a1 + 3), a2);
  unint64_t v5 = a1[1];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v5 <= v4) {
      unint64_t v9 = v4 % v5;
    }
  }
  else
  {
    unint64_t v9 = (v5 - 1) & v4;
  }
  long long v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  long long v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        if (std::equal_to<std::deque<int>>::operator()[abi:ne180100](v12, v11 + 2, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= v5) {
            v13 %= v5;
          }
        }
        else
        {
          v13 &= v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      long long v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t kaldi::AutoRegressiveBeamSearchDecoder::DequeHash::operator()(uint64_t a1, void *a2)
{
  uint64_t result = a2[5];
  uint64_t v3 = a2[1];
  if (a2[2] != v3)
  {
    unint64_t v4 = a2[4];
    unint64_t v5 = (char **)(v3 + 8 * (v4 >> 10));
    uint64_t v6 = *v5;
    uint8x8_t v7 = &(*v5)[4 * (v4 & 0x3FF)];
    for (uint64_t i = *(void *)(v3 + (((v4 + result) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v4 + result) & 0x3FF);
          v7 != (char *)i;
          uint64_t result = ((result << 6) + ((int)result >> 2) - 1640531527 + v9) ^ result)
    {
      int v10 = *(_DWORD *)v7;
      v7 += 4;
      int v9 = v10;
      if (v7 - v6 == 4096)
      {
        long long v11 = v5[1];
        ++v5;
        uint64_t v6 = v11;
        uint8x8_t v7 = v11;
      }
    }
  }
  return result;
}

BOOL std::equal_to<std::deque<int>>::operator()[abi:ne180100](uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[5];
  if (v3 != a3[5]) {
    return 0;
  }
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = (void *)(v5 + 8 * (v4 >> 10));
  if (a2[2] == v5)
  {
    uint8x8_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint8x8_t v7 = (_DWORD *)(*v6 + 4 * (a2[4] & 0x3FFLL));
    uint64_t v8 = *(void *)(v5 + (((v4 + v3) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v4 + v3) & 0x3FF);
  }
  uint64_t v10 = a3[1];
  long long v11 = (void *)(v10 + 8 * (a3[4] >> 10));
  if (a3[2] == v10) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = (_DWORD *)(*v11 + 4 * (a3[4] & 0x3FFLL));
  }
  if (v7 == (_DWORD *)v8) {
    return 1;
  }
  do
  {
    BOOL result = *v7 == *v12;
    if (*v7 != *v12) {
      break;
    }
    if ((_DWORD *)((char *)++v7 - *v6) == (_DWORD *)4096)
    {
      unint64_t v13 = (_DWORD *)v6[1];
      ++v6;
      uint8x8_t v7 = v13;
    }
    if ((_DWORD *)((char *)++v12 - *v11) == (_DWORD *)4096)
    {
      uint64_t v14 = (_DWORD *)v11[1];
      ++v11;
      uint64_t v12 = v14;
    }
  }
  while (v7 != (_DWORD *)v8);
  return result;
}

uint64_t std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>::__emplace_back_slow_path<int &,int &,float &>(uint64_t *a1, int *a2, int *a3, int *a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x555555555555555) {
    unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v25 = a1 + 2;
  if (v13) {
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v11, v13);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = &v14[24 * v6];
  v22[0] = v14;
  v22[1] = v15;
  uint64_t v23 = v15;
  uint64_t v24 = &v14[24 * v13];
  int v16 = *a2;
  int v17 = *a3;
  int v18 = *a4;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  int v19 = operator new(0xCuLL);
  *(void *)uint64_t v15 = v19;
  *((void *)v15 + 2) = v19 + 3;
  *int v19 = v16;
  v19[1] = v17;
  std::string v19[2] = v18;
  *((void *)v15 + 1) = v19 + 3;
  uint64_t v23 = v15 + 24;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>::__swap_out_circular_buffer(a1, v22);
  uint64_t v20 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v22);
  return v20;
}

void sub_1B224CCB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::__emplace_unique_key_args<std::deque<int>,std::piecewise_construct_t const&,std::tuple<std::deque<int> const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  long long v8 = (void *)(a1 + 24);
  int v9 = kaldi::AutoRegressiveBeamSearchDecoder::DequeHash::operator()(a1 + 24, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v11 <= v9) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (std::equal_to<std::deque<int>>::operator()[abi:ne180100](a1 + 32, v15 + 2, a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::deque<int> const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= v10) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t v15 = (void *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v15;
}

void sub_1B224D0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::deque<int> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  long long v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *long long v8 = 0;
  v8[1] = a2;
  uint64_t result = std::deque<int>::deque((uint64_t)(v8 + 2), *a3);
  v8[8] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B224D120(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::deque<int>::~deque[abi:ne180100](v2 + 2);
    }
    operator delete(v2);
  }
}

uint64_t std::vector<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

float std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__construct_one_at_end[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain const&,float &>(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__init_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>((void *)v5, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1B224D350(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__emplace_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain const&,float &>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  BOOL v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  float v17 = v13;
  float v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__init_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>(v13, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1B224D454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__assign_with_size[abi:ne180100]<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    std::vector<fst::IntervalSet<int>>::__vdeallocate(a1);
    if (a4 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>(v8, v6, a3, a1[1]);
LABEL_15:
    a1[1] = v13;
    return;
  }
  uint64_t v14 = a1[1];
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 < a4)
  {
    uint64_t v16 = a2 + 32 * v15;
    if (v14 != v9)
    {
      uint64_t v17 = 32 * v15;
      do
      {
        std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>::operator=[abi:ne180100](v9, v6);
        v6 += 32;
        v9 += 32;
        v17 -= 32;
      }
      while (v17);
      uint64_t v9 = a1[1];
    }
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>(v8, v16, a3, v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    uint64_t v18 = *a1;
  }
  else
  {
    uint64_t v18 = *a1;
    do
    {
      std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>::operator=[abi:ne180100](v9, v6);
      v6 += 32;
      v9 += 32;
      v18 += 32;
    }
    while (v6 != a3);
    uint64_t v14 = a1[1];
  }
  if (v14 != v18)
  {
    uint64_t v19 = v14;
    do
    {
      unint64_t v21 = *(void **)(v19 - 32);
      v19 -= 32;
      unint64_t v20 = v21;
      if (v21)
      {
        *(void *)(v14 - 24) = v20;
        operator delete(v20);
      }
      uint64_t v14 = v19;
    }
    while (v19 != v18);
  }
  a1[1] = v18;
}

void sub_1B224D748(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__init_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>((void *)v4, *(const void **)v6, *(void *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B224D808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__assign_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>((char *)a1, *(char **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

double quasar::GlobalTranslatorFactory::createTranslatorFactory@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, uint64_t *a5@<X4>, _OWORD *a6@<X8>)
{
  unsigned int v13 = a2;
  unsigned __int8 v12 = a3;
  unsigned __int8 v11 = a4;
  if (quasar::gLogLevel >= 5)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"creating PDecTranslatorFactory", 30);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v10);
  }
  std::allocate_shared[abi:ne180100]<quasar::GlobalPDecTranslatorFactory,std::allocator<quasar::GlobalPDecTranslatorFactory>,quasar::SystemConfig const&,int &,BOOL &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,void>(a1, &v13, &v12, &v11, a5, v10);
  double result = *(double *)v10;
  *a6 = v10[0];
  return result;
}

void sub_1B224D940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double quasar::GlobalTranslatorFactory::createTranslatorFactory@<D0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  unsigned int v15 = a2;
  unsigned __int8 v14 = a3;
  uint64_t v7 = *a1;
  if (a1[1] - v7 == 1544)
  {
    char v9 = (std::__shared_weak_count *)a4[1];
    uint64_t v12 = *a4;
    unsigned int v13 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double result = quasar::GlobalTranslatorFactory::createTranslatorFactory(v7, a2, 1u, a3, &v12, a5);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<quasar::GlobalHotfixTranslatorFactory,std::allocator<quasar::GlobalHotfixTranslatorFactory>,std::vector<quasar::SystemConfig> const&,int &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,void>((uint64_t)a1, &v15, &v14, a4, &v11);
    double result = *(double *)&v11;
    *a5 = v11;
  }
  return result;
}

void sub_1B224D9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<quasar::GlobalPDecTranslatorFactory,std::allocator<quasar::GlobalPDecTranslatorFactory>,quasar::SystemConfig const&,int &,BOOL &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,void>@<X0>(uint64_t a1@<X1>, unsigned int *a2@<X2>, unsigned __int8 *a3@<X3>, unsigned __int8 *a4@<X4>, uint64_t *a5@<X5>, void *a6@<X8>)
{
  uint64_t v12 = operator new(0x6B0uLL);
  double result = std::__shared_ptr_emplace<quasar::GlobalPDecTranslatorFactory>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig const&,int &,BOOL &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,std::allocator<quasar::GlobalPDecTranslatorFactory>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1B224DA88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::GlobalPDecTranslatorFactory>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig const&,int &,BOOL &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,std::allocator<quasar::GlobalPDecTranslatorFactory>,0>(void *a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61980;
  std::allocator<quasar::GlobalPDecTranslatorFactory>::construct[abi:ne180100]<quasar::GlobalPDecTranslatorFactory,quasar::SystemConfig const&,int &,BOOL &,BOOL &,std::shared_ptr<quasar::ContextProvider> &>((uint64_t)&v8, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1B224DB08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::GlobalPDecTranslatorFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::GlobalPDecTranslatorFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::GlobalPDecTranslatorFactory>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<quasar::GlobalPDecTranslatorFactory>::construct[abi:ne180100]<quasar::GlobalPDecTranslatorFactory,quasar::SystemConfig const&,int &,BOOL &,BOOL &,std::shared_ptr<quasar::ContextProvider> &>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned __int8 *a5, unsigned __int8 *a6, uint64_t *a7)
{
  uint64_t v8 = *a4;
  int v9 = *a5;
  int v10 = *a6;
  long long v11 = (std::__shared_weak_count *)a7[1];
  uint64_t v12 = *a7;
  unsigned int v13 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::GlobalPDecTranslatorFactory::GlobalPDecTranslatorFactory(a2, a3, v8, v9 != 0, v10 != 0, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1B224DC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<quasar::GlobalHotfixTranslatorFactory,std::allocator<quasar::GlobalHotfixTranslatorFactory>,std::vector<quasar::SystemConfig> const&,int &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,void>@<X0>(uint64_t a1@<X1>, unsigned int *a2@<X2>, unsigned __int8 *a3@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  int v10 = operator new(0x38uLL);
  double result = std::__shared_ptr_emplace<quasar::GlobalHotfixTranslatorFactory>::__shared_ptr_emplace[abi:ne180100]<std::vector<quasar::SystemConfig> const&,int &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,std::allocator<quasar::GlobalHotfixTranslatorFactory>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1B224DCB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::GlobalHotfixTranslatorFactory>::__shared_ptr_emplace[abi:ne180100]<std::vector<quasar::SystemConfig> const&,int &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,std::allocator<quasar::GlobalHotfixTranslatorFactory>,0>(void *a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61B40;
  std::allocator<quasar::GlobalHotfixTranslatorFactory>::construct[abi:ne180100]<quasar::GlobalHotfixTranslatorFactory,std::vector<quasar::SystemConfig> const&,int &,BOOL &,std::shared_ptr<quasar::ContextProvider> &>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1B224DD2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::GlobalHotfixTranslatorFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::GlobalHotfixTranslatorFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61B40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::GlobalHotfixTranslatorFactory>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<quasar::GlobalHotfixTranslatorFactory>::construct[abi:ne180100]<quasar::GlobalHotfixTranslatorFactory,std::vector<quasar::SystemConfig> const&,int &,BOOL &,std::shared_ptr<quasar::ContextProvider> &>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned __int8 *a5, uint64_t *a6)
{
  uint64_t v7 = *a4;
  int v8 = *a5;
  int v9 = (std::__shared_weak_count *)a6[1];
  uint64_t v10 = *a6;
  long long v11 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::GlobalHotfixTranslatorFactory::GlobalHotfixTranslatorFactory(a2, a3, v7, v8 != 0, &v10);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1B224DE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

char *srilm_ts_strerror(int a1)
{
  uint64_t v2 = (char **)errBuffTLS();
  uint64_t v3 = *v2;
  if (!*v2)
  {
    uint64_t v4 = v2;
    uint64_t v3 = (char *)malloc_type_calloc(0x100uLL, 1uLL, 0x100004077774924uLL);
    uint64_t *v4 = v3;
  }
  strerror_r(a1, v3, 0x100uLL);
  return v3;
}

void srilm_tserror_freeThread()
{
  uint64_t v0 = (void **)errBuffTLS();
  if (*v0)
  {
    free(*v0);
    *uint64_t v0 = 0;
  }
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::~ArpaLmCompiler(quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler *this)
{
  *(void *)this = &unk_1F0A57DC0;
  uint64_t v2 = *((void *)this + 13);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::~ArpaFileParser(this);
}

{
  uint64_t vars8;

  quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::~ArpaLmCompiler(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::HeaderAvailable(quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler *this)
{
  if (*((void *)this + 13))
  {
    quasar::lm::LogMessage::LogMessage(&v3, 5, "HeaderAvailable", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 312);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v3);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v3);
  }
  else
  {
    quasar::lm::nullstream(this);
  }
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(uint64_t (**)(uint64_t))(*(void *)v2 + 112))(v2);
  }
  operator new();
}

void sub_1B224E628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x1B3EA8670](v2, 0x10A1C40EC34A2F1);
  _Unwind_Resume(a1);
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::ConsumeNGram(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1] - *a2;
  if (v4)
  {
    uint64_t v5 = 0;
    if ((unint64_t)(v4 >> 2) <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v4 >> 2;
    }
    while (!v5 || *(_DWORD *)(v3 + 4 * v5) != *((_DWORD *)this + 2))
    {
      uint64_t v7 = v5 + 1;
      if (v4 >> 2 > (unint64_t)(v5 + 1) && *(_DWORD *)(v3 + 4 * v5) == *((_DWORD *)this + 3)) {
        break;
      }
      ++v5;
      if (v6 == v7) {
        goto LABEL_10;
      }
    }
    if (quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::ShouldWarn(this))
    {
      quasar::lm::LogMessage::LogMessage(v15, 3, "ConsumeNGram", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 339);
      Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v15);
      quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::LineReference((uint64_t *)__p, this);
      if ((v14 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v14 & 0x80u) == 0) {
        uint64_t v11 = v14;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" skipped: n-gram has invalid BOS/EOS placement", 46);
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v15);
    }
  }
  else
  {
LABEL_10:
    int v8 = *(void (**)(void))(**((void **)this + 13) + 16);
    v8();
  }
}

void sub_1B224E820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::RemoveRedundantStates(quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler *this)
{
  int v1 = *((_DWORD *)this + 24);
  if (v1)
  {
    int v3 = (*(uint64_t (**)(void))(**((void **)this + 14) + 160))(*((void *)this + 14));
    if (v3 >= 1)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if ((*(uint64_t (**)(void, uint64_t))(**((void **)this + 14) + 40))(*((void *)this + 14), i) == 1)
        {
          LODWORD(v10) = (*(float (**)(void, uint64_t))(**((void **)this + 14) + 32))(*((void *)this + 14), i);
          v9.n128_u32[0] = 2139095040;
          if (*(float *)&v10 == INFINITY)
          {
            uint64_t v5 = *((void *)this + 14);
            uint64_t v10 = &unk_1F0A3E910;
            uint64_t v13 = 0;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(v5);
            uint64_t v6 = *(void *)(v5 + 8);
            uint64_t v11 = *(void *)(*(void *)(v6 + 64) + 8 * i);
            uint64_t v12 = v6 + 8;
            __n128 v9 = *(__n128 *)(*(void *)(v11 + 24) + 16 * v13);
            if (v9.n128_u32[0] == v1)
            {
              v9.n128_u32[0] = 0;
              fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v10, &v9);
            }
          }
        }
      }
    }
    quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocal<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(*((void *)this + 14));
    quasar::lm::LogMessage::LogMessage(&v10, 2, "RemoveRedundantStates", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 384);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Reduced num-states from ", 24);
    int v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" to ", 4);
    (*(void (**)(void))(**((void **)this + 14) + 160))(*((void *)this + 14));
    std::ostream::operator<<();
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v10);
  }
}

void sub_1B224EA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocal<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1)
{
  quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsLocalClass(&v1, a1);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  if (v2)
  {
    int v3 = v2;
    operator delete(v2);
  }
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::Check(quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler *this)
{
  if ((*(unsigned int (**)(void))(**((void **)this + 14) + 24))(*((void *)this + 14)) == -1)
  {
    quasar::lm::LogMessage::LogMessage(v9, 5, "Check", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 390);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v9);
    int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Arpa file did not contain the beginning-of-sentence symbol ", 59);
    (*(void (**)(void **__return_ptr))(**((void **)this + 4) + 88))(__p);
    if ((v8 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      uint64_t v5 = v8;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)".", 1);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v9);
  }
}

void sub_1B224EBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::ReadComplete(quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler *this)
{
  if (*((unsigned char *)this + 121))
  {
    (*(void (**)(void, void))(**((void **)this + 14) + 280))(*((void *)this + 14), *((void *)this + 4));
    (*(void (**)(void))(**((void **)this + 14) + 288))();
  }
  if (*((unsigned char *)this + 120)) {
    quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::RemoveRedundantStates(this);
  }
  quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::Check(this);
}

void *quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompilerImpl<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::OptimizedHistKey>::~ArpaLmCompilerImpl(void *a1)
{
  *a1 = &unk_1F0A57E28;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 5));
  return a1;
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompilerImpl<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::OptimizedHistKey>::~ArpaLmCompilerImpl(void *a1)
{
  *a1 = &unk_1F0A57E28;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 5));
  JUMPOUT(0x1B3EA8670);
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompilerImpl<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::OptimizedHistKey>::ConsumeNGram(uint64_t a1, float *a2, unsigned int a3)
{
  uint64_t v7 = *(int **)a2;
  unsigned __int8 v8 = (int *)(*((void *)a2 + 1) - 4);
  unint64_t v58 = 0;
  if (v7 != v8)
  {
    unint64_t v9 = 0;
    int v10 = 0;
    do
    {
      uint64_t v11 = *v7++;
      v9 |= v11 << v10;
      v10 += 21;
    }
    while (v7 != v8);
    unint64_t v58 = v9;
  }
  uint64_t v12 = (uint64_t *)(a1 + 40);
  uint64_t v13 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((void *)(a1 + 40), &v58);
  if (!v13)
  {
    if (quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::ShouldWarn(*(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser **)(a1 + 8)))
    {
      quasar::lm::LogMessage::LogMessage(v57, 3, "ConsumeNGram", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 218);
      Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v57);
      quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::LineReference((uint64_t *)&__p, *(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser **)(a1 + 8));
      if ((v56 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v56 & 0x80u) == 0) {
        uint64_t v23 = v56;
      }
      else {
        uint64_t v23 = v55;
      }
      unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)p_p, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" skipped: no parent (n-1)-gram exists", 37);
      if ((char)v56 < 0) {
        operator delete(__p);
      }
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v57);
    }
    return;
  }
  uint64_t v14 = *((unsigned int *)v13 + 6);
  int v15 = *v8;
  float v16 = a2[6];
  if (v15) {
    BOOL v17 = v15 == *(_DWORD *)(a1 + 32);
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    quasar::lm::LogMessage::LogMessage(&__p, 5, "ConsumeNGram", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 227);
    uint64_t v18 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" <eps> or disambiguation symbol ", 32);
    uint64_t v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"found in the ARPA file. ", 24);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&__p);
  }
  float v20 = -v16;
  if (v15 == *(_DWORD *)(a1 + 28))
  {
    if (*(_DWORD *)(a1 + 32))
    {
      (*(void (**)(void, uint64_t, float))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16), v14, v20);
      return;
    }
    LODWORD(v30) = *(_DWORD *)(a1 + 36);
    goto LABEL_76;
  }
  unint64_t v25 = (int *)*((void *)a2 + 1);
  int64_t v26 = (int *)(*(void *)a2 + 4 * a3);
  if (v26 == v25)
  {
    unint64_t v27 = 0;
  }
  else
  {
    unint64_t v27 = 0;
    int v28 = 0;
    do
    {
      uint64_t v29 = *v26++;
      v27 |= v29 << v28;
      v28 += 21;
    }
    while (v26 != v25);
  }
  float v31 = a2[7];
  unint64_t v59 = v27;
  float v32 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((void *)(a1 + 40), &v59);
  if (!v32)
  {
    uint64_t v30 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 200))(*(void *)(a1 + 16));
    unint64_t v33 = *(void *)(a1 + 48);
    if (v33)
    {
      uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v33);
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.u32[0] > 1uLL)
      {
        unint64_t v3 = v27;
        if (v33 <= v27) {
          unint64_t v3 = v27 % v33;
        }
      }
      else
      {
        unint64_t v3 = (v33 - 1) & v27;
      }
      uint64_t v35 = *(void ***)(*v12 + 8 * v3);
      if (v35)
      {
        char v36 = *v35;
        if (*v35)
        {
          do
          {
            unint64_t v37 = v36[1];
            if (v37 == v27)
            {
              if (v36[2] == v27) {
                goto LABEL_72;
              }
            }
            else
            {
              if (v34.u32[0] > 1uLL)
              {
                if (v37 >= v33) {
                  v37 %= v33;
                }
              }
              else
              {
                v37 &= v33 - 1;
              }
              if (v37 != v3) {
                break;
              }
            }
            char v36 = (void *)*v36;
          }
          while (v36);
        }
      }
    }
    char v36 = operator new(0x20uLL);
    *char v36 = 0;
    v36[1] = v27;
    v36[2] = v27;
    *((_DWORD *)v36 + 6) = 0;
    float v38 = (float)(unint64_t)(*(void *)(a1 + 64) + 1);
    float v39 = *(float *)(a1 + 72);
    if (!v33 || (float)(v39 * (float)v33) < v38)
    {
      BOOL v40 = 1;
      if (v33 >= 3) {
        BOOL v40 = (v33 & (v33 - 1)) != 0;
      }
      unint64_t v41 = v40 | (2 * v33);
      unint64_t v42 = vcvtps_u32_f32(v38 / v39);
      if (v41 <= v42) {
        size_t v43 = v42;
      }
      else {
        size_t v43 = v41;
      }
      unint64_t v33 = *(void *)(a1 + 48);
      if ((v33 & (v33 - 1)) != 0)
      {
        if (v33 <= v27) {
          unint64_t v3 = v27 % v33;
        }
        else {
          unint64_t v3 = v27;
        }
      }
      else
      {
        unint64_t v3 = (v33 - 1) & v27;
      }
    }
    uint64_t v44 = *v12;
    unint64_t v45 = *(void **)(*v12 + 8 * v3);
    if (v45)
    {
      *char v36 = *v45;
    }
    else
    {
      *char v36 = *(void *)(a1 + 56);
      *(void *)(a1 + 56) = v36;
      *(void *)(v44 + 8 * v3) = a1 + 56;
      if (!*v36) {
        goto LABEL_71;
      }
      unint64_t v46 = *(void *)(*v36 + 8);
      if ((v33 & (v33 - 1)) != 0)
      {
        if (v46 >= v33) {
          v46 %= v33;
        }
      }
      else
      {
        v46 &= v33 - 1;
      }
      unint64_t v45 = (void *)(*v12 + 8 * v46);
    }
    *unint64_t v45 = v36;
LABEL_71:
    ++*(void *)(a1 + 64);
LABEL_72:
    float v47 = -v31;
    *((_DWORD *)v36 + 6) = v30;
    for (unint64_t i = v27 >> 21; ; i >>= 21)
    {
      v57[0] = i;
      uint64_t v49 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((void *)(a1 + 40), v57);
      if (v49) {
        break;
      }
    }
    uint64_t v50 = *(void *)(a1 + 16);
    unsigned int v51 = *((_DWORD *)v49 + 6);
    std::vector<int> __p = (void *)*(unsigned int *)(a1 + 32);
    unint64_t v55 = __PAIR64__(v51, LODWORD(v47));
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v50 + 208))(v50, v30, &__p);
    goto LABEL_76;
  }
  LODWORD(v30) = *((_DWORD *)v32 + 6);
LABEL_76:
  if (v15 == *(_DWORD *)(a1 + 24))
  {
    uint64_t v52 = **(void **)(a1 + 16);
    if (*(_DWORD *)(a1 + 32))
    {
      (*(void (**)(void))(v52 + 176))();
      return;
    }
    uint64_t v14 = (*(uint64_t (**)(void))(v52 + 200))();
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 176))(*(void *)(a1 + 16), v14);
    float v20 = 0.0;
  }
  uint64_t v53 = *(void *)(a1 + 16);
  LODWORD(__p) = v15;
  HIDWORD(__p) = v15;
  unint64_t v55 = __PAIR64__(v30, LODWORD(v20));
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v53 + 208))(v53, v14, &__p);
}

void sub_1B224F308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  operator delete(v16);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::OptimizedHistKey,int>,std::__unordered_map_hasher<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::OptimizedHistKey,std::__hash_value_type<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::OptimizedHistKey,int>,quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::OptimizedHistKey::HashType,std::equal_to<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::OptimizedHistKey>,true>,std::__unordered_map_equal<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::OptimizedHistKey,std::__hash_value_type<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::OptimizedHistKey,int>,std::equal_to<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::OptimizedHistKey>,quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::OptimizedHistKey::HashType,true>,std::allocator<std::__hash_value_type<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::OptimizedHistKey,int>>>::__rehash_unique[abi:ne180100](uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      float v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v5 = operator new(8 * prime);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  unsigned __int8 v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    uint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *unsigned __int8 v8 = *v14;
          *uint64_t v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          uint64_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        unsigned __int8 v8 = v14;
        uint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t std::unordered_map<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::GeneralHistKey,int,quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::GeneralHistKey::HashType,std::equal_to<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::GeneralHistKey>,std::allocator<std::pair<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::GeneralHistKey const,int>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      int8x8_t v4 = (void *)v2[2];
      if (v4)
      {
        void v2[3] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void *quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompilerImpl<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::GeneralHistKey>::~ArpaLmCompilerImpl(void *a1)
{
  *a1 = &unk_1F0A57E00;
  return a1;
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompilerImpl<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::GeneralHistKey>::~ArpaLmCompilerImpl(void *a1)
{
  *a1 = &unk_1F0A57E00;
  JUMPOUT(0x1B3EA8670);
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompilerImpl<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::GeneralHistKey>::ConsumeNGram(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(const void **)a2;
  uint64_t v7 = *(void *)(a2 + 8) - 4;
  long long v68 = 0;
  uint64_t v69 = 0;
  int v67 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v67, v6, v7, (v7 - (uint64_t)v6) >> 2);
  unsigned __int8 v8 = (void *)(a1 + 40);
  size_t v9 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>((void *)(a1 + 40), (int **)&v67);
  if (v9)
  {
    uint64_t v10 = *((unsigned int *)v9 + 10);
    int v11 = *(_DWORD *)(*(void *)(a2 + 8) - 4);
    float v12 = *(float *)(a2 + 24);
    if (v11) {
      BOOL v13 = v11 == *(_DWORD *)(a1 + 32);
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      quasar::lm::LogMessage::LogMessage(&__p, 5, "ConsumeNGram", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 227);
      Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)" <eps> or disambiguation symbol ", 32);
      size_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"found in the ARPA file. ", 24);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&__p);
    }
    float v16 = -v12;
    if (v11 == *(_DWORD *)(a1 + 28))
    {
      if (*(_DWORD *)(a1 + 32))
      {
        (*(void (**)(void, uint64_t, float))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16), v10, v16);
        goto LABEL_85;
      }
      LODWORD(v25) = *(_DWORD *)(a1 + 36);
    }
    else
    {
      uint64_t v21 = *(void *)(a2 + 8);
      size_t v22 = (const void *)(*(void *)a2 + 4 * a3);
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      uint64_t v64 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v64, v22, v21, (v21 - (uint64_t)v22) >> 2);
      float v23 = *(float *)(a2 + 28);
      unint64_t v24 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>((void *)(a1 + 40), (int **)&v64);
      if (v24)
      {
        LODWORD(v25) = *((_DWORD *)v24 + 10);
      }
      else
      {
        unsigned int v26 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 200))(*(void *)(a1 + 16));
        int v28 = (char *)v64;
        uint64_t v27 = (uint64_t)v65;
        if (v64 == v65)
        {
          unint64_t v29 = 0;
        }
        else
        {
          unint64_t v29 = 0;
          uint64_t v30 = (int *)v64;
          do
          {
            uint64_t v31 = *v30++;
            unint64_t v29 = v31 + 7853 * v29;
          }
          while (v30 != v65);
        }
        unint64_t v32 = *(void *)(a1 + 48);
        unsigned int v61 = v26;
        if (v32)
        {
          unsigned int v60 = v10;
          uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
          v33.i16[0] = vaddlv_u8(v33);
          unint64_t v34 = v33.u32[0];
          if (v33.u32[0] > 1uLL)
          {
            unint64_t v35 = v29;
            if (v29 >= v32) {
              unint64_t v35 = v29 % v32;
            }
          }
          else
          {
            unint64_t v35 = (v32 - 1) & v29;
          }
          unint64_t v62 = v35;
          char v36 = *(void **)(*v8 + 8 * v35);
          if (v36)
          {
            unint64_t v37 = (void *)*v36;
            if (*v36)
            {
              int64_t v38 = (char *)v65 - (unsigned char *)v64;
              do
              {
                unint64_t v39 = v37[1];
                if (v39 == v29)
                {
                  BOOL v40 = (const void *)v37[2];
                  if (v37[3] - (void)v40 == v38 && !memcmp(v40, v28, v27 - (void)v28))
                  {
                    uint64_t v10 = v60;
                    goto LABEL_70;
                  }
                }
                else
                {
                  if (v34 > 1)
                  {
                    if (v39 >= v32) {
                      v39 %= v32;
                    }
                  }
                  else
                  {
                    v39 &= v32 - 1;
                  }
                  if (v39 != v62) {
                    break;
                  }
                }
                unint64_t v37 = (void *)*v37;
              }
              while (v37);
            }
          }
          uint64_t v10 = v60;
        }
        unint64_t v41 = operator new(0x30uLL);
        unint64_t v42 = (void **)(a1 + 56);
        std::vector<int> __p = v41;
        *(void *)&long long v73 = a1 + 56;
        BYTE8(v73) = 0;
        *unint64_t v41 = 0;
        v41[1] = v29;
        v41[3] = 0;
        v41[4] = 0;
        v41[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v41 + 2, v28, v27, (v27 - (uint64_t)v28) >> 2);
        *((_DWORD *)v41 + 10) = 0;
        BYTE8(v73) = 1;
        float v43 = (float)(unint64_t)(*(void *)(a1 + 64) + 1);
        float v44 = *(float *)(a1 + 72);
        unint64_t v45 = v62;
        if (!v32 || (float)(v44 * (float)v32) < v43)
        {
          BOOL v46 = 1;
          if (v32 >= 3) {
            BOOL v46 = (v32 & (v32 - 1)) != 0;
          }
          unint64_t v47 = v46 | (2 * v32);
          unint64_t v48 = vcvtps_u32_f32(v43 / v44);
          if (v47 <= v48) {
            size_t v49 = v48;
          }
          else {
            size_t v49 = v47;
          }
          unint64_t v32 = *(void *)(a1 + 48);
          if ((v32 & (v32 - 1)) != 0)
          {
            if (v29 >= v32) {
              unint64_t v45 = v29 % v32;
            }
            else {
              unint64_t v45 = v29;
            }
          }
          else
          {
            unint64_t v45 = (v32 - 1) & v29;
          }
        }
        uint64_t v50 = *(void ***)(*v8 + 8 * v45);
        if (v50)
        {
          *(void *)std::vector<int> __p = *v50;
          *uint64_t v50 = __p;
        }
        else
        {
          *(void *)std::vector<int> __p = *v42;
          *unint64_t v42 = __p;
          *(void *)(*v8 + 8 * v45) = v42;
          if (*(void *)__p)
          {
            unint64_t v51 = *(void *)(*(void *)__p + 8);
            if ((v32 & (v32 - 1)) != 0)
            {
              if (v51 >= v32) {
                v51 %= v32;
              }
            }
            else
            {
              v51 &= v32 - 1;
            }
            *(void *)(*v8 + 8 * v51) = __p;
          }
        }
        unint64_t v37 = __p;
        std::vector<int> __p = 0;
        ++*(void *)(a1 + 64);
        int v28 = (char *)v64;
        uint64_t v27 = (uint64_t)v65;
LABEL_70:
        *((_DWORD *)v37 + 10) = v61;
        uint64_t v25 = v61;
        long long v71 = 0uLL;
        uint64_t v70 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v70, v28 + 4, v27, (v27 - (uint64_t)(v28 + 4)) >> 2);
        uint64_t v52 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>((void *)(a1 + 40), (int **)&v70);
        if (!v52)
        {
          uint64_t v53 = v10;
          unint64_t v55 = (char *)v70;
          uint64_t v54 = v71;
          do
          {
            std::vector<int> __p = 0;
            long long v73 = 0uLL;
            std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v55 + 4, v54, (v54 - (uint64_t)(v55 + 4)) >> 2);
            if (v70)
            {
              *(void *)&long long v71 = v70;
              operator delete(v70);
            }
            unint64_t v55 = (char *)__p;
            uint64_t v70 = __p;
            uint64_t v63 = v73;
            long long v71 = v73;
            uint64_t v52 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>((void *)(a1 + 40), (int **)&v70);
            uint64_t v54 = v63;
          }
          while (!v52);
          uint64_t v10 = v53;
          uint64_t v25 = v61;
        }
        uint64_t v56 = *(void *)(a1 + 16);
        int v57 = *((_DWORD *)v52 + 10);
        std::vector<int> __p = (void *)*(unsigned int *)(a1 + 32);
        *(float *)&long long v73 = -v23;
        DWORD1(v73) = v57;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v56 + 208))(v56, v25, &__p);
        if (v70)
        {
          *(void *)&long long v71 = v70;
          operator delete(v70);
        }
      }
      if (v64)
      {
        uint64_t v65 = (int *)v64;
        operator delete(v64);
      }
    }
    if (v11 == *(_DWORD *)(a1 + 24))
    {
      uint64_t v58 = **(void **)(a1 + 16);
      if (*(_DWORD *)(a1 + 32))
      {
        (*(void (**)(void))(v58 + 176))();
        goto LABEL_85;
      }
      uint64_t v10 = (*(uint64_t (**)(void))(v58 + 200))();
      float v16 = 0.0;
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 176))(*(void *)(a1 + 16), v10);
    }
    uint64_t v59 = *(void *)(a1 + 16);
    LODWORD(__p) = v11;
    HIDWORD(__p) = v11;
    *(void *)&long long v73 = __PAIR64__(v25, LODWORD(v16));
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v59 + 208))(v59, v10, &__p);
  }
  else if (quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::ShouldWarn(*(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser **)(a1 + 8)))
  {
    quasar::lm::LogMessage::LogMessage(&v70, 3, "ConsumeNGram", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 218);
    BOOL v17 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v70);
    quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::LineReference((uint64_t *)&__p, *(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser **)(a1 + 8));
    if (v73 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v73 >= 0) {
      uint64_t v19 = HIBYTE(v73);
    }
    else {
      uint64_t v19 = v73;
    }
    float v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_p, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" skipped: no parent (n-1)-gram exists", 37);
    if (SHIBYTE(v73) < 0) {
      operator delete(__p);
    }
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v70);
  }
LABEL_85:
  if (v67)
  {
    long long v68 = v67;
    operator delete(v67);
  }
}

void sub_1B224FD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::GeneralHistKey,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::lm::arpa2fst::kaldi_fork::anonymous namespace'::GeneralHistKey,int>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void *)v2[2];
      if (v3)
      {
        void v2[3] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsLocalClass(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    *((_DWORD *)a1 + 2) = (*(uint64_t (**)(void))(*(void *)*a1 + 200))();
    quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::InitNumArcs(a1);
    int v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 160))();
    if (v4 >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, v5); ++i)
          quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEps(a1, v5, i);
        uint64_t v5 = (v5 + 1);
      }
      while (v5 != v4);
    }
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2);
  }
  return a1;
}

void sub_1B224FF90(_Unwind_Exception *exception_object)
{
  int v4 = (void *)v1[5];
  if (v4)
  {
    v1[6] = v4;
    operator delete(v4);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[3] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::InitNumArcs(void *a1)
{
  int v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 160))(*a1);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 2), v2);
  unint64_t v3 = a1 + 5;
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 5), v2);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  ++*(_DWORD *)(a1[2] + 4 * (int)result);
  if (v2 < 1) {
    return result;
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    LODWORD(v10[0]) = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, i);
    int v13 = 2139095040;
    if (*(float *)v10 != INFINITY) {
      ++*(_DWORD *)(*v3 + 4 * i);
    }
    uint64_t v6 = *a1;
    unint64_t v12 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 136))(v6, i, v10);
    while (1)
    {
      uint64_t result = v10[0];
      if (!v10[0])
      {
        if (v12 >= v10[2]) {
          goto LABEL_17;
        }
LABEL_11:
        uint64_t v9 = 0;
        uint64_t v8 = v10[1] + 16 * v12;
        goto LABEL_12;
      }
      int v7 = (*(uint64_t (**)(void))(*(void *)v10[0] + 24))(v10[0]);
      uint64_t result = v10[0];
      if (v7) {
        break;
      }
      if (!v10[0]) {
        goto LABEL_11;
      }
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v10[0] + 32))();
      uint64_t v9 = v10[0];
LABEL_12:
      ++*(_DWORD *)(a1[2] + 4 * *(int *)(v8 + 12));
      ++*(_DWORD *)(*v3 + 4 * i);
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
      }
      else {
        ++v12;
      }
    }
    if (v10[0])
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v10[0] + 8))();
      continue;
    }
LABEL_17:
    if (v11) {
      --*v11;
    }
  }
  return result;
}

void sub_1B2250270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    quasar::InverseTextNormalizer::getNumTokens(v9);
  }
  _Unwind_Resume(a1);
}

void quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEps(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v15);
  if (!v15[0])
  {
    uint64_t v17 = a3;
    uint64_t v10 = a3;
LABEL_7:
    int v11 = (uint64_t *)(v15[1] + 16 * v10);
    uint64_t v8 = *v11;
    uint64_t v9 = v11[1];
    goto LABEL_8;
  }
  (*(void (**)(void, uint64_t))(*(void *)v15[0] + 64))(v15[0], a3);
  if (!v15[0])
  {
    uint64_t v10 = v17;
    goto LABEL_7;
  }
  int v7 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))(v15[0]);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))(v15[0]);
    goto LABEL_10;
  }
LABEL_8:
  if (v16) {
    --*v16;
  }
LABEL_10:
  if (HIDWORD(v9) != a2 && *((_DWORD *)a1 + 2) != HIDWORD(v9))
  {
    int v13 = *(_DWORD *)(a1[5] + 4 * (v9 >> 32));
    if (*(_DWORD *)(a1[2] + 4 * (v9 >> 32)) != 1 || v13 < 2)
    {
      if (v13 == 1) {
        quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern2(a1, a2, a3, v8, v9);
      }
    }
    else
    {
      quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern1(a1, a2, a3, v8, v9);
    }
  }
}

void sub_1B2250438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern1(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v54 = a4;
  uint64_t v55 = a5;
  unint64_t v9 = HIDWORD(a5);
  unint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  (*(void (**)(void))(*(void *)*a1 + 296))();
  uint64_t v10 = a5 >> 32;
  float v11 = INFINITY;
  float v12 = INFINITY;
  while (!(*(unsigned int (**)(uint64_t))(*(void *)v50 + 24))(v50))
  {
    long long v49 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v50 + 32))(v50);
    if (HIDWORD(v49) != *((_DWORD *)a1 + 2))
    {
      if (fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::CanCombineArcs((uint64_t)a1, (float *)&v54, (float *)&v49, (uint64_t)&v48))
      {
        float v14 = NAN;
        v13.n128_u32[0] = -8388608;
        if (v12 != -INFINITY)
        {
          v13.n128_u32[0] = DWORD2(v49);
          float v14 = NAN;
          if (*((float *)&v49 + 2) != -INFINITY)
          {
            if (v12 >= *((float *)&v49 + 2)) {
              float v14 = *((float *)&v49 + 2);
            }
            else {
              float v14 = v12;
            }
          }
        }
        --*(_DWORD *)(a1[5] + 4 * v10);
        --*(_DWORD *)(a1[2] + 4 * SHIDWORD(v49));
        HIDWORD(v49) = *((_DWORD *)a1 + 2);
        (*(void (**)(uint64_t, long long *, __n128))(*(void *)v50 + 88))(v50, &v49, v13);
        size_t v15 = v52;
        if (v52 >= v53)
        {
          uint64_t v18 = (v52 - v51) >> 4;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v53 - v51;
          if ((v53 - v51) >> 3 > v19) {
            unint64_t v19 = v20 >> 3;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21) {
            size_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v53, v21);
          }
          else {
            size_t v22 = 0;
          }
          float v23 = &v22[16 * v18];
          *(_OWORD *)float v23 = v48;
          uint64_t v25 = v51;
          unint64_t v24 = v52;
          unsigned int v26 = v23;
          if (v52 != v51)
          {
            do
            {
              *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
              v26 -= 16;
              v24 -= 16;
            }
            while (v24 != v25);
            unint64_t v24 = v51;
          }
          float v16 = v23 + 16;
          unint64_t v51 = v26;
          uint64_t v52 = v23 + 16;
          uint64_t v53 = &v22[16 * v21];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *(_OWORD *)uint64_t v52 = v48;
          float v16 = v15 + 16;
        }
        uint64_t v52 = v16;
        float v17 = v11;
      }
      else
      {
        float v17 = NAN;
        float v14 = v12;
        if (v11 != -INFINITY)
        {
          float v17 = NAN;
          float v14 = v12;
          if (*((float *)&v49 + 2) != -INFINITY)
          {
            if (v11 >= *((float *)&v49 + 2)) {
              float v17 = *((float *)&v49 + 2);
            }
            else {
              float v17 = v11;
            }
            float v14 = v12;
          }
        }
      }
      float v11 = v17;
      float v12 = v14;
    }
    (*(void (**)(uint64_t))(*(void *)v50 + 40))(v50);
  }
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  v27.n128_f32[0] = (*(float (**)(void, unint64_t))(*(void *)*a1 + 32))(*a1, v9);
  LODWORD(v49) = v27.n128_u32[0];
  LODWORD(v48) = 2139095040;
  if (v27.n128_f32[0] != INFINITY)
  {
    if (v54)
    {
      if (v11 >= v27.n128_f32[0]) {
        float v38 = v27.n128_f32[0];
      }
      else {
        float v38 = v11;
      }
      if (v27.n128_f32[0] == -INFINITY || v11 == -INFINITY) {
        float v11 = NAN;
      }
      else {
        float v11 = v38;
      }
    }
    else
    {
      float v28 = NAN;
      if (*(float *)&v55 != -INFINITY && v27.n128_f32[0] != -INFINITY)
      {
        if (*(float *)&v55 == INFINITY || v27.n128_f32[0] == INFINITY) {
          float v28 = INFINITY;
        }
        else {
          float v28 = v27.n128_f32[0] + *(float *)&v55;
        }
      }
      if (v12 >= v27.n128_f32[0]) {
        float v30 = v27.n128_f32[0];
      }
      else {
        float v30 = v12;
      }
      if (v27.n128_f32[0] == -INFINITY || v12 == -INFINITY) {
        float v12 = NAN;
      }
      else {
        float v12 = v30;
      }
      LODWORD(v49) = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a2);
      LODWORD(v48) = 2139095040;
      if (*(float *)&v49 == INFINITY) {
        ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      }
      uint64_t v33 = *a1;
      v34.n128_f32[0] = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a2);
      if (v34.n128_f32[0] >= v28) {
        float v35 = v28;
      }
      else {
        float v35 = v34.n128_f32[0];
      }
      BOOL v37 = v28 == -INFINITY || v34.n128_f32[0] == -INFINITY;
      v34.n128_u32[0] = 2143289344;
      if (!v37) {
        v34.n128_f32[0] = v35;
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v33 + 184))(v33, a2, v34);
      --*(_DWORD *)(a1[5] + 4 * v10);
      (*(void (**)(void, unint64_t, float))(*(void *)*a1 + 184))(*a1, v9, INFINITY);
    }
  }
  *(float *)&long long v49 = v12;
  LODWORD(v48) = 2139095040;
  v27.n128_f32[0] = v12;
  if (v12 != INFINITY)
  {
    *(float *)&long long v49 = v11;
    LODWORD(v48) = 2139095040;
    v27.n128_f32[0] = v11;
    if (v11 == INFINITY)
    {
      --*(_DWORD *)(a1[5] + 4 * (int)a2);
      --*(_DWORD *)(a1[2] + 4 * SHIDWORD(v55));
      HIDWORD(v55) = *((_DWORD *)a1 + 2);
      (*(void (**)(__n128))(*(void *)*a1 + 296))(v27);
      (*(void (**)(void, uint64_t))(*(void *)v49 + 64))(v49, a3);
      (*(void (**)(void, uint64_t *))(*(void *)v49 + 88))(v49, &v54);
      if ((void)v49) {
        (*(void (**)(void))(*(void *)v49 + 8))(v49);
      }
    }
    else
    {
      if (v12 >= v11) {
        float v41 = v11;
      }
      else {
        float v41 = v12;
      }
      BOOL v43 = v11 == -INFINITY || v12 == -INFINITY;
      float v44 = NAN;
      if (v43) {
        float v41 = NAN;
      }
      if (v11 != -INFINITY)
      {
        if ((LODWORD(v41) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          float v44 = INFINITY;
          if (v11 != INFINITY) {
            float v44 = v11 - v41;
          }
        }
        else
        {
          float v44 = NAN;
        }
      }
      quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::Reweight(a1, a2, a3, v44);
    }
  }
  unint64_t v45 = v52;
  if (v52 != v51)
  {
    uint64_t v46 = 0;
    unint64_t v47 = 0;
    unint64_t v45 = v51;
    do
    {
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      ++*(_DWORD *)(a1[2] + 4 * *(int *)&v45[v46 + 12]);
      (*(void (**)(void, uint64_t, __n128))(*(void *)*a1 + 208))(*a1, a2, v27);
      ++v47;
      unint64_t v45 = v51;
      v46 += 16;
    }
    while (v47 < (v52 - v51) >> 4);
  }
  if (v45)
  {
    uint64_t v52 = v45;
    operator delete(v45);
  }
}

void sub_1B2250C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern2(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v5 = *(float *)&a5;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v10 = a5 >> 32;
  int v11 = *(_DWORD *)(a1[2] + 4 * (a5 >> 32));
  unint64_t v12 = HIDWORD(a5);
  float v13 = (*(float (**)(void, unint64_t))(*(void *)*a1 + 32))(*a1, HIDWORD(a5));
  v25[0] = v13;
  v23[0] = 2139095040;
  if (v13 != INFINITY)
  {
    if (a4) {
      return;
    }
    float v14 = NAN;
    if (v5 != -INFINITY && v13 != -INFINITY)
    {
      BOOL v15 = v5 == INFINITY || v13 == INFINITY;
      float v16 = v13 + v5;
      if (v15) {
        float v14 = INFINITY;
      }
      else {
        float v14 = v16;
      }
    }
    v25[0] = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a2);
    v23[0] = 2139095040;
    if (v25[0] == INFINITY) {
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    }
    uint64_t v17 = *a1;
    v18.n128_f32[0] = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a2);
    if (v18.n128_f32[0] >= v14) {
      float v19 = v14;
    }
    else {
      float v19 = v18.n128_f32[0];
    }
    BOOL v21 = v14 == -INFINITY || v18.n128_f32[0] == -INFINITY;
    v18.n128_u32[0] = 2143289344;
    if (!v21) {
      v18.n128_f32[0] = v19;
    }
    (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v17 + 184))(v17, a2, v18);
    if (v11 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v10);
      (*(void (**)(void, unint64_t, float))(*(void *)*a1 + 184))(*a1, v12, INFINITY);
    }
    goto LABEL_36;
  }
  (*(void (**)(void, unint64_t, uint64_t *))(*(void *)*a1 + 296))(*a1, v12, &v26);
  while (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v26 + 32))(v26) + 12) == *((_DWORD *)a1 + 2))
    (*(void (**)(uint64_t))(*(void *)v26 + 40))(v26);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 32))(v26);
  int CanCombineArcs = fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::CanCombineArcs((uint64_t)a1, (float *)&v27, v25, (uint64_t)v23);
  if (CanCombineArcs)
  {
    if (v11 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v10);
      --*(_DWORD *)(a1[2] + 4 * SLODWORD(v25[3]));
      v25[3] = *((float *)a1 + 2);
      (*(void (**)(uint64_t, float *))(*(void *)v26 + 88))(v26, v25);
    }
    ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    ++*(_DWORD *)(a1[2] + 4 * v24);
    (*(void (**)(void, uint64_t, _DWORD *))(*(void *)*a1 + 208))(*a1, a2, v23);
  }
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  if (CanCombineArcs)
  {
LABEL_36:
    --*(_DWORD *)(a1[5] + 4 * (int)a2);
    --*(_DWORD *)(a1[2] + 4 * v10);
    HIDWORD(v28) = *((_DWORD *)a1 + 2);
    (*(void (**)(void))(*(void *)*a1 + 296))(*a1);
    (*(void (**)(void, uint64_t))(**(void **)v25 + 64))(*(void *)v25, a3);
    (*(void (**)(void, uint64_t *))(**(void **)v25 + 88))(*(void *)v25, &v27);
    if (*(void *)v25) {
      (*(void (**)(void))(**(void **)v25 + 8))(*(void *)v25);
    }
  }
}

void sub_1B22511BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::Reweight(void *a1, uint64_t a2, uint64_t a3, float a4)
{
  (*(void (**)(void, uint64_t, uint64_t *))(*(void *)*a1 + 296))(*a1, a2, &v17);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 64))(v17, a3);
  __n128 v7 = *(__n128 *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 32))(v17);
  __n128 v16 = v7;
  v7.n128_u32[0] = v7.n128_u32[2];
  float v8 = NAN;
  if (v7.n128_f32[2] != -INFINITY && a4 != -INFINITY)
  {
    float v8 = INFINITY;
    BOOL v9 = v16.n128_f32[2] == INFINITY || a4 == INFINITY;
    v7.n128_f32[0] = a4 + v16.n128_f32[2];
    if (!v9) {
      float v8 = a4 + v16.n128_f32[2];
    }
  }
  v16.n128_f32[2] = v8;
  (*(void (**)(uint64_t, __n128 *, __n128))(*(void *)v17 + 88))(v17, &v16, v7);
  (*(void (**)(void, void, uint64_t *))(*(void *)*a1 + 296))(*a1, v16.n128_u32[3], &v15);
  while (!(*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15))
  {
    *(_OWORD *)float v14 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
    if (LODWORD(v14[3]) != *((_DWORD *)a1 + 2))
    {
      float v10 = v14[2] - a4;
      if (v14[2] == INFINITY) {
        float v10 = INFINITY;
      }
      if (v14[2] == -INFINITY || (LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
        float v10 = NAN;
      }
      v14[2] = v10;
      (*(void (**)(uint64_t, float *))(*(void *)v15 + 88))(v15, v14);
    }
    (*(void (**)(uint64_t))(*(void *)v15 + 40))(v15);
  }
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  float v11 = (*(float (**)(void, void))(*(void *)*a1 + 32))(*a1, v16.n128_u32[3]);
  v14[0] = v11;
  LODWORD(v15) = 2139095040;
  if (v11 != INFINITY)
  {
    if (v11 == -INFINITY || (LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      float v12 = NAN;
    }
    else
    {
      float v12 = INFINITY;
      if (v11 != INFINITY) {
        float v12 = v11 - a4;
      }
    }
    (*(void (**)(void, void, float))(*(void *)*a1 + 184))(*a1, v16.n128_u32[3], v12);
  }
  uint64_t result = v17;
  if (v17) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  return result;
}

void sub_1B22515C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B22519D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v30;

  _Unwind_Resume(a1);
}

void sub_1B2251C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void quasar::SimpleNameEnumerator::addSimpleEnumerations(uint64_t a1, uint64_t a2, long long **a3, uint64_t **a4)
{
  size_t v22 = 0;
  float v23 = 0;
  uint64_t v24 = 0;
  quasar::NameEnumerator::addSpecEnumerations(a1, (int **)(a1 + 32), a3, 0, (uint64_t *)&v22);
  float v5 = v22;
  for (uint64_t i = v23; v5 != i; v5 += 3)
  {
    if (*v5 != v5[1])
    {
      memset(&v21, 0, sizeof(v21));
      std::to_string(&__p, *(_DWORD *)(*v5 + 48));
      std::vector<std::string>::pointer end = v21.__end_;
      if (v21.__end_ >= v21.__end_cap_.__value_)
      {
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21.__end_ - (char *)v21.__begin_) >> 3);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v21.__end_cap_.__value_ - (char *)v21.__begin_) >> 3) > v10) {
          unint64_t v10 = 0x5555555555555556 * (((char *)v21.__end_cap_.__value_ - (char *)v21.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v21.__end_cap_.__value_ - (char *)v21.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v11 = v10;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v21.__end_cap_;
        if (v11) {
          float v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v21.__end_cap_, v11);
        }
        else {
          float v12 = 0;
        }
        float v13 = v12 + v9;
        __v.__first_ = v12;
        __v.__begin_ = v13;
        __v.__end_cap_.__value_ = &v12[v11];
        long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v13->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v13 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v21, &__v);
        uint64_t v15 = v21.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v21.__end_ = v15;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v21.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
        v21.__end_ = end + 1;
      }
      uint64_t v16 = *v5;
      uint64_t v17 = v5[1];
      if (*v5 != v17)
      {
        __n128 v18 = v21.__end_;
        do
        {
          if (v18 >= v21.__end_cap_.__value_)
          {
            __n128 v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v21, (long long *)v16);
          }
          else
          {
            if (*(char *)(v16 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v16, *(void *)(v16 + 8));
            }
            else
            {
              long long v19 = *(_OWORD *)v16;
              v18->__r_.__value_.__r.__words[2] = *(void *)(v16 + 16);
              *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
            }
            ++v18;
          }
          v21.__end_ = v18;
          v16 += 80;
        }
        while (v16 != v17);
      }
      std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(a4, &v21, (long long **)&v21);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    }
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v22;
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1B2251E80(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, uint64_t a8, void *__pa, char a10, uint64_t a11, char *a12, std::__split_buffer<std::wstring> *a13, uint64_t a14, char a15)
{
  a12 = &a15;
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(__p);
}

void *quasar::SimpleNameEnumerator::SimpleNameEnumerator(void *a1, long long *a2, quasar::PTree *a3)
{
  float v5 = quasar::NameEnumerator::NameEnumerator(a1, a2);
  *float v5 = &unk_1F0A552E0;
  v5[4] = 0;
  v5[5] = 0;
  int32x2_t v5[6] = 0;
  uint64_t v6 = quasar::PTree::begin(a3);
  if (v6 != quasar::PTree::end(a3))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, ":");
    quasar::split(v6, (uint64_t *)&__p, 0, (unint64_t)&v8);
  }
  return a1;
}

void sub_1B2252128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  quasar::NameEnumerator::~NameEnumerator(v23);
  _Unwind_Resume(a1);
}

void quasar::SimpleNameEnumerator::addEnumerations(uint64_t a1, long long **a2, uint64_t **a3)
{
}

uint64_t quasar::artifact::Artifact::isValid()
{
  archive_read_new();
  archive_read_set_format();
  if (archive_read_open_filename() || (uint64_t v12 = 0, archive_read_next_header()))
  {
    uint64_t v0 = 0;
  }
  else
  {
    char v2 = 0;
    do
    {
      unint64_t v3 = (char *)archive_entry_pathname();
      std::string::basic_string[abi:ne180100]<0>(&v10, v3);
      if (v11 < 0)
      {
        if (*((void *)&v10 + 1) == 15)
        {
          unint64_t v7 = bswap64(*(void *)v10);
          unint64_t v8 = 0x61737365745F696ELL;
          if (v7 == 0x61737365745F696ELL
            && (v7 = bswap64(*(void *)(v10 + 7)), unint64_t v8 = 0x6E666F2E6A736F6ELL, v7 == 0x6E666F2E6A736F6ELL))
          {
            int v9 = 0;
          }
          else
          {
            int v9 = v7 < v8 ? -1 : 1;
          }
          if (!v9) {
            char v2 = 1;
          }
        }
        operator delete((void *)v10);
      }
      else if (v11 == 15)
      {
        unint64_t v4 = bswap64(v10);
        unint64_t v5 = 0x61737365745F696ELL;
        if (v4 == 0x61737365745F696ELL
          && (unint64_t v4 = bswap64(*(unint64_t *)((char *)&v10 + 7)),
              unint64_t v5 = 0x6E666F2E6A736F6ELL,
              v4 == 0x6E666F2E6A736F6ELL))
        {
          int v6 = 0;
        }
        else if (v4 < v5)
        {
          int v6 = -1;
        }
        else
        {
          int v6 = 1;
        }
        if (!v6) {
          char v2 = 1;
        }
      }
      uint64_t v0 = v2 & 1;
    }
    while (!archive_read_next_header() && (v2 & 1) == 0);
  }
  archive_read_close();
  archive_read_free();
  return v0;
}

uint64_t quasar::artifact::Artifact::Artifact(uint64_t a1, const void ***a2, const void ***a3, const void ***a4)
{
  void v12[3] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F0A59308;
  uint64_t v8 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(v11, "version");
  std::string::basic_string[abi:ne180100]<0>(v12, "locale");
  std::set<std::string>::set[abi:ne180100](v8, v11, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v12[i + 2]) < 0) {
      operator delete((void *)v11[i + 3]);
    }
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 32), a3);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 56), a2);
  std::map<std::string,std::vector<std::string>>::map[abi:ne180100]((uint64_t *)(a1 + 80), a4);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(unsigned char *)(a1 + 200) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = a1 + 248;
  return a1;
}

void sub_1B22525C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__tree<std::string>::destroy(v17, v15[8]);
  std::__tree<std::string>::destroy(v18, v15[5]);
  std::__tree<std::string>::destroy(v16, v15[2]);
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::Artifact::Artifact(uint64_t a1, const void ***a2, const void ***a3, const void ***a4, uint64_t a5)
{
  void v15[3] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F0A59308;
  uint64_t v10 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(v14, "version");
  std::string::basic_string[abi:ne180100]<0>(v15, "locale");
  std::set<std::string>::set[abi:ne180100](v10, v14, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v15[i + 2]) < 0) {
      operator delete((void *)v14[i + 3]);
    }
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 32), a3);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 56), a2);
  std::map<std::string,std::vector<std::string>>::map[abi:ne180100]((uint64_t *)(a1 + 80), a4);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  if (*(char *)(a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 208), *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else
  {
    long long v12 = *(_OWORD *)a5;
    *(void *)(a1 + 224) = *(void *)(a5 + 16);
    *(_OWORD *)(a1 + 208) = v12;
  }
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = a1 + 248;
  *(void *)(a1 + 256) = 0;
  quasar::artifact::Artifact::read(a1, a5, 1);
  return a1;
}

void sub_1B2252838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__tree<std::string>::destroy(v16, *(char **)(v10 + 184));
  std::__tree<std::string>::destroy(v15, *(char **)(v10 + 160));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v14, *(void **)(v10 + 136));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v13, *(void **)(v10 + 112));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v12, *(void **)(v10 + 88));
  std::__tree<std::string>::destroy(v11, *(char **)(v10 + 64));
  std::__tree<std::string>::destroy(a9, *(char **)(v10 + 40));
  std::__tree<std::string>::destroy(a10, *(char **)(v10 + 16));
  _Unwind_Resume(a1);
}

void sub_1B22528E0()
{
  uint64_t v1 = 0;
  while (1)
  {
    if (*(char *)(v0 + v1 + 47) < 0) {
      operator delete(*(void **)(v0 + v1 + 24));
    }
    v1 -= 24;
    if (v1 == -48) {
      JUMPOUT(0x1B22528D8);
    }
  }
}

void sub_1B225290C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B22528D8);
}

void sub_1B2252924()
{
}

void quasar::artifact::Artifact::read(uint64_t a1, uint64_t a2, int a3)
{
  quasar::artifact::ArchiveReader::ArchiveReader(v33, a2);
  uint64_t v5 = *(void *)(a1 + 232);
  if (v5)
  {
    if (v34 != v5 && quasar::gLogLevel >= 1)
    {
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      *(_OWORD *)uint64_t v16 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Artifact file was changed before being loaded", 45);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v16);
    }
  }
  else
  {
    *(void *)(a1 + 232) = v34;
  }
  while (quasar::artifact::ArchiveReader::readNextEntry((quasar::artifact::ArchiveReader *)v33, 3))
  {
    unint64_t v7 = (char *)archive_entry_pathname();
    std::string::basic_string[abi:ne180100]<0>(v16, v7);
    if (SBYTE7(v17) < 0)
    {
      if (v16[1] != (void *)15) {
        goto LABEL_18;
      }
      int v9 = (void **)v16[0];
    }
    else
    {
      if (SBYTE7(v17) != 15) {
        goto LABEL_18;
      }
      int v9 = v16;
    }
    uint64_t v10 = *v9;
    uint64_t v11 = *(uint64_t *)((char *)v9 + 7);
    if (v10 == (void *)0x6E695F7465737361 && v11 == 0x6E6F736A2E6F666ELL)
    {
      quasar::artifact::ArchiveReader::readFile((quasar::artifact::ArchiveReader *)v33, v8);
      quasar::artifact::Artifact::assetJsonStringToMetadata(a1, (uint64_t)__p);
    }
LABEL_18:
    if (a1 + 248 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 240, (const void **)v16))
    {
      if (a3)
      {
        quasar::lm::InsertOrDie<std::set<std::string>>((uint64_t **)(a1 + 152), (uint64_t)v16);
      }
      else if (a1 + 136 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 128, (const void **)v16))
      {
        quasar::artifact::ArchiveReader::readFile((quasar::artifact::ArchiveReader *)v33, v13);
        quasar::artifact::Artifact::setContent((uint64_t **)a1, (const void **)v16, (long long *)__p, 0);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    if (SBYTE7(v17) < 0) {
      operator delete(v16[0]);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if ((a3 & 1) == 0) {
    *(unsigned char *)(a1 + 200) = 1;
  }
  quasar::artifact::ArchiveReader::~ArchiveReader((quasar::artifact::ArchiveReader *)v33);
}

void sub_1B2252B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a16);
  quasar::artifact::ArchiveReader::~ArchiveReader((quasar::artifact::ArchiveReader *)(v21 - 104));
  _Unwind_Resume(a1);
}

char *quasar::artifact::Artifact::getVersion(quasar::artifact::Artifact *this)
{
  uint64_t v1 = (char *)this + 104;
  std::string::basic_string[abi:ne180100]<0>(__p, "version");
  char v2 = quasar::lm::FindOrDie<std::map<std::string,std::string>>((uint64_t)v1, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1B2252C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *quasar::lm::FindOrDie<std::map<std::string,std::string>>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (quasar::lm *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1, (const void **)a2);
  char v5 = v4;
  if ((quasar::lm *)(a1 + 8) == v4)
  {
    quasar::lm::LogMessage::LogMessage(v12, 5, "FindOrDie", "../libquasar/liblm/include/lm/stl_utils.h", 104);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v12);
    unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"missing key ", 12);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      int v9 = (const void *)a2;
    }
    else {
      int v9 = *(const void **)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v12);
  }
  else
  {
    quasar::lm::nullstream(v4);
  }
  return (char *)v5 + 56;
}

void sub_1B2252CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::artifact::Artifact::getLocale(quasar::artifact::Artifact *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v3 = (char *)this + 104;
  std::string::basic_string[abi:ne180100]<0>(v7, "locale");
  unint64_t v4 = quasar::lm::FindOrDie<std::map<std::string,std::string>>((uint64_t)v3, (uint64_t)v7);
  std::string::basic_string[abi:ne180100]<0>(__p, "_");
  quasar::Locale::fromInternalShortIdentifier((uint64_t)v4, (char *)__p, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_1B2252DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::artifact::Artifact::setInfo(uint64_t a1, uint64_t a2, long long *a3)
{
  BOOL v6 = quasar::artifact::Artifact::checkSupportsInfo(a1, a2);
  if (v6) {
    quasar::lm::InsertOrDie<std::map<std::string,std::string>>((uint64_t **)(a1 + 104), a2, a3);
  }
  return v6;
}

BOOL quasar::artifact::Artifact::checkSupportsInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 32, (const void **)a2);
  uint64_t v5 = a1 + 40;
  if (v5 == v4 && quasar::gLogLevel >= 1)
  {
    memset(v13, 0, sizeof(v13));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Not able to set metadata. Unsupported key \"", 43);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      int v9 = (const void *)a2;
    }
    else {
      int v9 = *(const void **)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\"", 1);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v13);
  }
  return v5 != v4;
}

void sub_1B2252F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL quasar::artifact::Artifact::supportsInfo(uint64_t a1, const void **a2)
{
  return a1 + 40 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 32, a2);
}

BOOL quasar::artifact::Artifact::hasInfo(uint64_t a1, const void **a2)
{
  return a1 + 112 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 104, a2);
}

void quasar::artifact::Artifact::getInfo(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (quasar::artifact::Artifact::checkSupportsInfo(a1, a2))
  {
    BOOL v6 = quasar::lm::FindOrDie<std::map<std::string,std::string>>(a1 + 104, a2);
    if (v6[23] < 0)
    {
      int v8 = *(const std::string::value_type **)v6;
      std::string::size_type v9 = *((void *)v6 + 1);
      std::string::__init_copy_ctor_external(a3, v8, v9);
    }
    else
    {
      long long v7 = *(_OWORD *)v6;
      a3->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

BOOL quasar::artifact::Artifact::setContent(uint64_t **a1, const void **a2, long long *a3, int a4)
{
  BOOL v8 = quasar::artifact::Artifact::checkSupportsContent((uint64_t)a1, (uint64_t)a2);
  if (v8)
  {
    if (a4) {
      quasar::artifact::Artifact::clearContent(a1, a2);
    }
    quasar::lm::InsertOrDie<std::map<std::string,std::string>>(a1 + 16, (uint64_t)a2, a3);
    if (a1 + 20 == (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)(a1 + 19), a2))quasar::lm::InsertOrDie<std::set<std::string>>(a1 + 19, (uint64_t)a2); {
    std::__tree<std::string>::__erase_unique<std::string>(a1 + 30, a2);
    }
  }
  return v8;
}

BOOL quasar::artifact::Artifact::checkSupportsContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 56, (const void **)a2);
  uint64_t v5 = a1 + 64;
  if (v5 == v4 && quasar::gLogLevel >= 1)
  {
    memset(v13, 0, sizeof(v13));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Not able to set info. Unsupported key \"", 39);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      std::string::size_type v9 = (const void *)a2;
    }
    else {
      std::string::size_type v9 = *(const void **)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\"", 1);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v13);
  }
  return v5 != v4;
}

void sub_1B22531B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::artifact::Artifact::clearContent(uint64_t **a1, const void **a2)
{
  uint64_t result = quasar::artifact::Artifact::checkSupportsContent((uint64_t)a1, (uint64_t)a2);
  if (result)
  {
    if (a1 + 20 != (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)(a1 + 19), a2)&& a1 + 17 == (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)(a1 + 16), a2)&& a1 + 31 == (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)(a1 + 30), a2))
    {
      quasar::lm::InsertOrDie<std::set<std::string>>(a1 + 30, (uint64_t)a2);
      uint64_t v5 = std::__tree<std::string>::__erase_unique<std::string>(a1 + 19, a2);
    }
    else
    {
      uint64_t result = std::__tree<std::string>::__erase_unique<std::string>(a1 + 19, a2);
      if (!result) {
        return result;
      }
      uint64_t v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__erase_unique<std::string>(a1 + 16, a2);
    }
    return v5 != 0;
  }
  return result;
}

void quasar::artifact::Artifact::openContentForWriting()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B2253360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x1B3EA8670](v2, 0x10B3C400322C151);
  _Unwind_Resume(a1);
}

void quasar::artifact::Artifact::setContentFromInputStream(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *a3 + *(void *)(*(void *)*a3 - 24);
  *(_DWORD *)(v3 + 8) &= ~0x1000u;
  quasar::artifact::Artifact::openContentForWriting();
}

void sub_1B2253460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    quasar::artifact::Artifact::setContentFromInputStream(a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::artifact::Artifact::supportsContent(uint64_t a1, const void **a2)
{
  return a1 + 64 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 56, a2);
}

BOOL quasar::artifact::Artifact::hasContent(uint64_t a1, const void **a2)
{
  return a1 + 136 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 128, a2)|| a1 + 160 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 152, a2);
}

void quasar::artifact::Artifact::getContentAsString(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  if (a1 + 160 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 152, a2)&& a1 + 136 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 128, a2)&& a1 + 248 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 240, a2))
  {
    quasar::artifact::ArchiveReader::ArchiveReader(v10, a1 + 208);
    if (v10[2] != *(void *)(a1 + 232) && quasar::gLogLevel >= 1)
    {
      memset(v9, 0, sizeof(v9));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Artifact file was changed before being loaded", 45);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v9);
    }
    if (quasar::artifact::ArchiveReader::seek((quasar::artifact::ArchiveReader *)v10, (uint64_t)a2))
    {
      quasar::artifact::ArchiveReader::readFile((quasar::artifact::ArchiveReader *)v10, v6);
      quasar::artifact::ArchiveReader::~ArchiveReader((quasar::artifact::ArchiveReader *)v10);
      return;
    }
    quasar::artifact::ArchiveReader::~ArchiveReader((quasar::artifact::ArchiveReader *)v10);
  }
  long long v7 = quasar::lm::FindOrDie<std::map<std::string,std::string>>(a1 + 128, (uint64_t)a2);
  if (v7[23] < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v7, *((void *)v7 + 1));
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    a3->__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1B2253660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  quasar::artifact::ArchiveReader::~ArchiveReader((quasar::artifact::ArchiveReader *)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::ArchiveReader::seek(quasar::artifact::ArchiveReader *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  while (quasar::artifact::ArchiveReader::readNextEntry(a1, 3))
  {
    uint64_t v4 = (const char *)archive_entry_pathname();
    size_t v5 = strlen(v4);
    size_t v6 = v5;
    if (*(char *)(a2 + 23) < 0)
    {
      if (v5 != *(void *)(a2 + 8)) {
        goto LABEL_11;
      }
      if (v5 == -1) {
LABEL_22:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      long long v7 = *(const void **)a2;
    }
    else
    {
      if (v5 != *(unsigned __int8 *)(a2 + 23)) {
        goto LABEL_11;
      }
      long long v7 = (const void *)a2;
      if (v6 == -1) {
        goto LABEL_22;
      }
    }
    if (!memcmp(v7, v4, v6)) {
      return 1;
    }
LABEL_11:
    a1 = v3;
  }
  if (quasar::gLogLevel >= 1)
  {
    memset(v17, 0, sizeof(v17));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Failed to find archive entry named ", 35);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    uint64_t v14 = (const char *)archive_error_string();
    size_t v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v17);
  }
  return 0;
}

void sub_1B22537F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::artifact::ArchiveReader::readFile(quasar::artifact::ArchiveReader *this, uint64_t a2)
{
  uint64_t v2 = (quasar::artifact::ArchiveReader *)MEMORY[0x1F4188790](this, a2);
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  while (quasar::artifact::ArchiveReader::readData(v2, v8, 0x1000uLL, 3))
    std::ostream::write();
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E4FBA408];
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v5[2] = v3;
  void v5[3] = MEMORY[0x1E4FBA470] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v7);
}

void sub_1B22539EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::artifact::Artifact::getContentAsStream(uint64_t a1, const void **a2)
{
  if (a1 + 160 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 152, a2)|| a1 + 136 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 128, a2)|| a1 + 248 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 240, a2))
  {
    goto LABEL_14;
  }
  std::allocate_shared[abi:ne180100]<quasar::artifact::ArchiveReader,std::allocator<quasar::artifact::ArchiveReader>,std::string const&,void>(a1 + 208, &v26);
  uint64_t v4 = v26;
  if (*((void *)v26 + 2) != *(void *)(a1 + 232) && quasar::gLogLevel >= 1)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Artifact file was changed before being loaded", 45);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    uint64_t v4 = v26;
  }
  int v6 = quasar::artifact::ArchiveReader::seek(v4, (uint64_t)a2);
  char v7 = v6;
  if (v6)
  {
    std::allocate_shared[abi:ne180100]<quasar::artifact::ArtifactInputStreamBuffer,std::allocator<quasar::artifact::ArtifactInputStreamBuffer>,std::shared_ptr<quasar::artifact::ArchiveReader> &,void>((uint64_t *)&v26, &v8);
    operator new();
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if ((v7 & 1) == 0)
  {
LABEL_14:
    quasar::artifact::Artifact::getContentAsString(a1, a2, (std::string *)__p);
    operator new();
  }
}

void sub_1B2253BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x1B3EA8670](v16, 0x10B1C40DC54C11BLL);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  long long v19 = *(std::__shared_weak_count **)(v17 - 56);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::Artifact::isMinimalistic(quasar::artifact::Artifact *this)
{
  return 1;
}

uint64_t quasar::artifact::Artifact::write(quasar::artifact::Artifact *a1)
{
  if ((*(uint64_t (**)(quasar::artifact::Artifact *))(*(void *)a1 + 32))(a1)) {
    quasar::artifact::Artifact::metadataToAssetJsonString(a1);
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v4 = 0u;
    long long v5 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Invalid artifact", 16);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  return 0;
}

void sub_1B2254350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  quasar::artifact::ArchiveWriter::~ArchiveWriter((quasar::artifact::ArchiveWriter *)&a23);
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void quasar::artifact::Artifact::metadataToAssetJsonString(quasar::artifact::Artifact *this)
{
  quasar::PTree::PTree((quasar::PTree *)v19);
  uint64_t v2 = (quasar::artifact::Artifact *)*((void *)this + 13);
  if (v2 != (quasar::artifact::Artifact *)((char *)this + 112))
  {
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string,0>(&v16, (long long *)v2 + 2);
      quasar::PTree::PTree(&__p, &v17);
      quasar::PTree::putChild((uint64_t)v19, (uint64_t)&v16, (uint64_t)&__p, 1);
      quasar::PTree::~PTree((quasar::PTree *)&__p);
      if (v18 < 0) {
        operator delete(v17);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      uint64_t v3 = (quasar::artifact::Artifact *)*((void *)v2 + 1);
      if (v3)
      {
        do
        {
          long long v4 = v3;
          uint64_t v3 = *(quasar::artifact::Artifact **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          long long v4 = (quasar::artifact::Artifact *)*((void *)v2 + 2);
          BOOL v5 = *(void *)v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != (quasar::artifact::Artifact *)((char *)this + 112));
  }
  quasar::PTree::PTree((quasar::PTree *)&v16);
  long long v6 = (quasar::artifact::Artifact *)*((void *)this + 22);
  if (v6 != (quasar::artifact::Artifact *)((char *)this + 184))
  {
    do
    {
      quasar::PTree::PTree(&__p, (char *)v6 + 32);
      quasar::PTree::addChild((quasar::PTree *)&v16, (const quasar::PTree *)&__p);
      quasar::PTree::~PTree((quasar::PTree *)&__p);
      long long v7 = (quasar::artifact::Artifact *)*((void *)v6 + 1);
      if (v7)
      {
        do
        {
          long long v8 = v7;
          long long v7 = *(quasar::artifact::Artifact **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (quasar::artifact::Artifact *)*((void *)v6 + 2);
          BOOL v5 = *(void *)v8 == (void)v6;
          long long v6 = v8;
        }
        while (!v5);
      }
      long long v6 = v8;
    }
    while (v8 != (quasar::artifact::Artifact *)((char *)this + 184));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "supported_locales");
  quasar::PTree::putChild((uint64_t)v19, (uint64_t)&__p, (uint64_t)&v16, 1);
  if (v14 < 0) {
    operator delete(__p);
  }
  quasar::PTree::PTree((quasar::PTree *)v15);
  long long v9 = (char *)*((void *)this + 19);
  long long v10 = (char *)this + 160;
  if (v9 != v10)
  {
    do
    {
      quasar::PTree::PTree(&__p, v9 + 32);
      quasar::PTree::addChild((quasar::PTree *)v15, (const quasar::PTree *)&__p);
      quasar::PTree::~PTree((quasar::PTree *)&__p);
      long long v11 = (char *)*((void *)v9 + 1);
      if (v11)
      {
        do
        {
          long long v12 = v11;
          long long v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          long long v12 = (char *)*((void *)v9 + 2);
          BOOL v5 = *(void *)v12 == (void)v9;
          long long v9 = v12;
        }
        while (!v5);
      }
      long long v9 = v12;
    }
    while (v12 != v10);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "content-list");
  quasar::PTree::putChild((uint64_t)v19, (uint64_t)&__p, (uint64_t)v15, 1);
  if (v14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  quasar::PTree::writeJson();
}

void sub_1B2254778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  quasar::PTree::~PTree((quasar::PTree *)(v15 - 240));
  quasar::PTree::~PTree((quasar::PTree *)(v15 - 176));
  quasar::PTree::~PTree((quasar::PTree *)(v15 - 112));
  _Unwind_Resume(a1);
}

void quasar::artifact::Artifact::sync(quasar::artifact::Artifact *this)
{
  if (*((char *)this + 231) < 0)
  {
    if (!*((void *)this + 27)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 231))
  {
    return;
  }
  if (!*((unsigned char *)this + 200)) {
    quasar::artifact::Artifact::read((uint64_t)this, (uint64_t)this + 208, 0);
  }
}

uint64_t quasar::artifact::ArchiveWriter::write(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  archive_entry_new();
  archive_entry_set_pathname();
  archive_entry_set_size();
  archive_entry_set_filetype();
  archive_entry_set_perm();
  int v8 = archive_write_header();
  archive_entry_free();
  if (v8 != -20 && v8 != 0)
  {
    if (v8 == -10 && a4 >= 1) {
      quasar::artifact::ArchiveWriter::write(a1, a2, a3, (a4 - 1));
    }
    if (quasar::gLogLevel < 1) {
      return 0;
    }
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Failed to write header for ", 27);
    int v12 = *(char *)(a2 + 23);
    if (v12 >= 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = *(void *)a2;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v14 = *(void *)(a2 + 8);
    }
    goto LABEL_25;
  }
  if ((archive_write_data() & 0x8000000000000000) == 0) {
    return 1;
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Unable to write ", 16);
    int v15 = *(char *)(a2 + 23);
    if (v15 >= 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = *(void *)a2;
    }
    if (v15 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v14 = *(void *)(a2 + 8);
    }
LABEL_25:
    std::string v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
    long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" to archive: ", 13);
    char v18 = (const char *)archive_error_string();
    size_t v19 = strlen(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v20);
  }
  return 0;
}

void sub_1B2254ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::artifact::ArchiveReader::readNextEntry(quasar::artifact::ArchiveReader *this, int a2)
{
  uint64_t v11 = 0;
  int next_header = archive_read_next_header();
  if (next_header < 0)
  {
    if (next_header != -20)
    {
      if (next_header == -10 && a2 >= 1) {
        return quasar::artifact::ArchiveReader::readNextEntry(this, a2 - 1);
      }
      goto LABEL_11;
    }
    return v11;
  }
  if (next_header != 1)
  {
    if (next_header)
    {
LABEL_11:
      if (quasar::gLogLevel >= 1)
      {
        memset(v10, 0, sizeof(v10));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
        long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Error while trying to read next entry from open archive: ", 57);
        int v8 = (const char *)archive_error_string();
        size_t v9 = strlen(v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v10);
      }
      return 0;
    }
    return v11;
  }
  return 0;
}

void sub_1B2254C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::artifact::ArchiveWriter::write(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](a1, a2);
  int v4 = v3;
  long long v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = v2;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  archive_entry_new();
  archive_entry_set_pathname();
  archive_entry_set_filetype();
  archive_entry_set_perm();
  archive_entry_set_size();
  int v12 = archive_write_header();
  archive_entry_free();
  if (v12 == -20 || v12 == 0)
  {
    while (1)
    {
      unsigned int v14 = *(_DWORD *)(*v6 + *(void *)(*(void *)*v6 - 24) + 32);
      if ((v14 & 2) != 0) {
        break;
      }
      std::istream::read();
      if (archive_write_data() < 0)
      {
        if (quasar::gLogLevel >= 1)
        {
          memset(v33, 0, sizeof(v33));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
          int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Failed to write ", 16);
          int v16 = *(char *)(v10 + 23);
          if (v16 >= 0) {
            uint64_t v17 = v10;
          }
          else {
            uint64_t v17 = *(void *)v10;
          }
          if (v16 >= 0) {
            uint64_t v18 = *(unsigned __int8 *)(v10 + 23);
          }
          else {
            uint64_t v18 = *(void *)(v10 + 8);
          }
          size_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
          long long v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" to archive: ", 13);
          long long v21 = (const char *)archive_error_string();
          size_t v22 = strlen(v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v33);
        }
        return (v14 >> 1) & 1;
      }
    }
    return (v14 >> 1) & 1;
  }
  else
  {
    if (v12 == -10 && v4 >= 1)
    {
      long long v24 = (std::__shared_weak_count *)v6[1];
      long long v34 = (void *)*v6;
      long long v35 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::artifact::ArchiveWriter::write(v11, v10, v8, &v34, (v4 - 1));
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
    }
    if (quasar::gLogLevel >= 1)
    {
      memset(v36, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
      long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Failed to write header for ", 27);
      int v26 = *(char *)(v10 + 23);
      if (v26 >= 0) {
        uint64_t v27 = v10;
      }
      else {
        uint64_t v27 = *(void *)v10;
      }
      if (v26 >= 0) {
        uint64_t v28 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        uint64_t v28 = *(void *)(v10 + 8);
      }
      long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
      long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" to archive: ", 13);
      long long v31 = (const char *)archive_error_string();
      size_t v32 = strlen(v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v36);
    }
    return 0;
  }
}

void sub_1B2254F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,char a45)
{
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }
  _Unwind_Resume(exception_object);
}

void quasar::artifact::Artifact::assetJsonStringToMetadata(uint64_t a1, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v7);
  quasar::PTree::PTree((quasar::PTree *)&v6);
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *(void *)a2;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, v4, v5);
  quasar::PTree::readJson();
}

void sub_1B225529C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t quasar::artifact::Artifact::check(quasar::artifact::Artifact *this)
{
  uint64_t v2 = (const void **)*((void *)this + 1);
  int v3 = (const void ***)((char *)this + 16);
  if (v2 == (const void **)((char *)this + 16))
  {
LABEL_10:
    quasar::artifact::Artifact::getLocale(this, (std::string *)v36);
    std::string::basic_string[abi:ne180100]<0>(&__p, "-");
    quasar::Locale::toInternalLongIdentifier((uint64_t)v36, &v35);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(*((void **)&v37 + 1));
    }
    if (SBYTE7(v37) < 0) {
      operator delete(v36[0]);
    }
    std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v35.__r_.__value_.__l.__size_;
    }
    if (!size
      || (quasar::artifact::Artifact *)((char *)this + 184) == (quasar::artifact::Artifact *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)this + 176, (const void **)&v35.__r_.__value_.__l.__data_))
    {
      if (quasar::gLogLevel >= 1)
      {
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        *(_OWORD *)long long v36 = 0u;
        long long v37 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
        uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Supported locale \"", 18);
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &v35;
        }
        else {
          uint64_t v18 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v19 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v19 = v35.__r_.__value_.__l.__size_;
        }
        long long v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\" not present", 13);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v36);
      }
    }
    else
    {
      uint64_t v9 = (long long *)*((void *)this + 16);
      uint64_t v10 = (char *)this + 136;
      if (v9 == (long long *)((char *)this + 136))
      {
LABEL_39:
        uint64_t v16 = 1;
        goto LABEL_70;
      }
      while (1)
      {
        std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string,0>(&__p, v9 + 2);
        if (!quasar::artifact::Artifact::checkSupportsContent((uint64_t)this, (uint64_t)&__p)) {
          break;
        }
        if ((quasar::artifact::Artifact *)((char *)this + 88) != (quasar::artifact::Artifact *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)this + 80, (const void **)&__p.__r_.__value_.__l.__data_))
        {
          uint64_t v11 = quasar::lm::FindOrDie<std::map<std::string,std::string>>((uint64_t)this + 80, (uint64_t)&__p);
          uint64_t v13 = *(const void ***)v11;
          int v12 = (const void **)*((void *)v11 + 1);
          while (v13 != v12)
          {
            if ((quasar::artifact::Artifact *)((char *)this + 112) == (quasar::artifact::Artifact *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)this + 104, v13)
              && v10 == (char *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)this + 128, v13)&& (quasar::artifact::Artifact *)((char *)this + 160) == (quasar::artifact::Artifact *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)this + 152, v13))
            {
              if (quasar::gLogLevel >= 1)
              {
                long long v51 = 0u;
                long long v52 = 0u;
                long long v49 = 0u;
                long long v50 = 0u;
                long long v47 = 0u;
                long long v48 = 0u;
                long long v45 = 0u;
                long long v46 = 0u;
                long long v43 = 0u;
                long long v44 = 0u;
                long long v41 = 0u;
                long long v42 = 0u;
                long long v40 = 0u;
                long long v38 = 0u;
                long long v39 = 0u;
                *(_OWORD *)long long v36 = 0u;
                long long v37 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
                int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Required dependent key \"", 24);
                int v27 = *((char *)v13 + 23);
                if (v27 >= 0) {
                  uint64_t v28 = (uint64_t)v13;
                }
                else {
                  uint64_t v28 = (uint64_t)*v13;
                }
                if (v27 >= 0) {
                  uint64_t v29 = *((unsigned __int8 *)v13 + 23);
                }
                else {
                  uint64_t v29 = (uint64_t)v13[1];
                }
                long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\" missing from artifact", 23);
                quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v36);
              }
              goto LABEL_65;
            }
            v13 += 3;
          }
        }
        if (v34 < 0) {
          operator delete(v33);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        unsigned int v14 = (char *)*((void *)v9 + 1);
        if (v14)
        {
          do
          {
            int v15 = v14;
            unsigned int v14 = *(char **)v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            int v15 = (char *)*((void *)v9 + 2);
            BOOL v7 = *(void *)v15 == (void)v9;
            uint64_t v9 = (long long *)v15;
          }
          while (!v7);
        }
        uint64_t v9 = (long long *)v15;
        if (v15 == v10) {
          goto LABEL_39;
        }
      }
LABEL_65:
      if (v34 < 0) {
        operator delete(v33);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v16 = 0;
LABEL_70:
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    return v16;
  }
  uint64_t v4 = (char *)this + 112;
  while (v4 != (char *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)this + 104, v2 + 4))
  {
    uint64_t v5 = (const void **)v2[1];
    if (v5)
    {
      do
      {
        uint64_t v6 = (const void ***)v5;
        uint64_t v5 = (const void **)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        uint64_t v6 = (const void ***)v2[2];
        BOOL v7 = *v6 == v2;
        uint64_t v2 = (const void **)v6;
      }
      while (!v7);
    }
    uint64_t v2 = (const void **)v6;
    if (v6 == v3) {
      goto LABEL_10;
    }
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v40 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    *(_OWORD *)long long v36 = 0u;
    long long v37 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Required key \"", 14);
    int v22 = *((char *)v2 + 55);
    if (v22 >= 0) {
      uint64_t v23 = (uint64_t)(v2 + 4);
    }
    else {
      uint64_t v23 = (uint64_t)v2[4];
    }
    if (v22 >= 0) {
      uint64_t v24 = *((unsigned __int8 *)v2 + 55);
    }
    else {
      uint64_t v24 = (uint64_t)v2[5];
    }
    long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\" not found in artifact", 23);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v36);
  }
  return 0;
}

void sub_1B225572C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::Artifact::operator==(void *a1, void *a2)
{
  if (a1[15] != a2[15]) {
    return 0;
  }
  uint64_t v4 = (unsigned __int8 *)a1[13];
  uint64_t v5 = (unsigned __int8 *)(a1 + 14);
  if (v4 != (unsigned __int8 *)(a1 + 14))
  {
    uint64_t v6 = (unsigned __int8 *)a2[13];
    while ((std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>((uint64_t)&v26, v4 + 32, v6 + 32) & 1) != 0)
    {
      BOOL v7 = (unsigned __int8 *)*((void *)v4 + 1);
      uint64_t v8 = v4;
      if (v7)
      {
        do
        {
          uint64_t v4 = v7;
          BOOL v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v4 = (unsigned __int8 *)*((void *)v8 + 2);
          BOOL v9 = *(void *)v4 == (void)v8;
          uint64_t v8 = v4;
        }
        while (!v9);
      }
      uint64_t v10 = (unsigned __int8 *)*((void *)v6 + 1);
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = *(unsigned __int8 **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (unsigned __int8 *)*((void *)v6 + 2);
          BOOL v9 = *(void *)v11 == (void)v6;
          uint64_t v6 = v11;
        }
        while (!v9);
      }
      uint64_t v6 = v11;
      if (v4 == v5) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  if (a1[24] != a2[24]) {
    return 0;
  }
  int v12 = (unsigned __int8 *)a1[22];
  if (v12 != (unsigned __int8 *)(a1 + 23))
  {
    uint64_t v13 = (unsigned __int8 *)a2[22];
    while ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v27, v12 + 32, v13 + 32) & 1) != 0)
    {
      unsigned int v14 = (unsigned __int8 *)*((void *)v12 + 1);
      int v15 = v12;
      if (v14)
      {
        do
        {
          int v12 = v14;
          unsigned int v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          int v12 = (unsigned __int8 *)*((void *)v15 + 2);
          BOOL v9 = *(void *)v12 == (void)v15;
          int v15 = v12;
        }
        while (!v9);
      }
      uint64_t v16 = (unsigned __int8 *)*((void *)v13 + 1);
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (unsigned __int8 *)*((void *)v13 + 2);
          BOOL v9 = *(void *)v17 == (void)v13;
          uint64_t v13 = v17;
        }
        while (!v9);
      }
      uint64_t v13 = v17;
      if (v12 == (unsigned __int8 *)(a1 + 23)) {
        goto LABEL_31;
      }
    }
    return 0;
  }
LABEL_31:
  if (a1[18] != a2[18]) {
    return 0;
  }
  uint64_t v18 = (unsigned __int8 *)a1[16];
  std::string::size_type v19 = (unsigned __int8 *)(a1 + 17);
  if (v18 == v19) {
    return 1;
  }
  long long v20 = (unsigned __int8 *)a2[16];
  do
  {
    uint64_t result = std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>((uint64_t)&v28, v18 + 32, v20 + 32);
    if (!result) {
      break;
    }
    int v22 = (unsigned __int8 *)*((void *)v18 + 1);
    uint64_t v23 = v18;
    if (v22)
    {
      do
      {
        uint64_t v18 = v22;
        int v22 = *(unsigned __int8 **)v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        uint64_t v18 = (unsigned __int8 *)*((void *)v23 + 2);
        BOOL v9 = *(void *)v18 == (void)v23;
        uint64_t v23 = v18;
      }
      while (!v9);
    }
    uint64_t v24 = (unsigned __int8 *)*((void *)v20 + 1);
    if (v24)
    {
      do
      {
        long long v25 = v24;
        uint64_t v24 = *(unsigned __int8 **)v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        long long v25 = (unsigned __int8 *)*((void *)v20 + 2);
        BOOL v9 = *(void *)v25 == (void)v20;
        long long v20 = v25;
      }
      while (!v9);
    }
    long long v20 = v25;
  }
  while (v18 != v19);
  return result;
}

void *quasar::artifact::ArchiveReader::ArchiveReader(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A59188;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v4 = (const char *)a2;
  }
  else {
    uint64_t v4 = *(const char **)a2;
  }
  stat(v4, &v16);
  a1[2] = v16.st_mtimespec.tv_sec;
  a1[1] = archive_read_new();
  archive_read_set_format();
  if (archive_read_open_filename()) {
    BOOL v5 = quasar::gLogLevel < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Error while trying to open archive at ", 38);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" for reading: ", 14);
    int v12 = (const char *)archive_error_string();
    size_t v13 = strlen(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v15);
  }
  return a1;
}

void sub_1B2255B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::artifact::ArchiveReader::~ArchiveReader(quasar::artifact::ArchiveReader *this)
{
  quasar::artifact::ArchiveReader::~ArchiveReader(this);
  JUMPOUT(0x1B3EA8670);
}

{
  *(void *)this = &unk_1F0A59188;
  archive_read_free();
}

uint64_t quasar::artifact::ArchiveReader::readData(quasar::artifact::ArchiveReader *this, void *a2, unint64_t a3, int a4)
{
  int v4 = a4 + 1;
  while (1)
  {
    uint64_t data = archive_read_data();
    uint64_t v6 = data;
    if (data != -10) {
      break;
    }
    if (--v4 <= 0) {
      goto LABEL_6;
    }
  }
  if (data != -30) {
    return v6;
  }
LABEL_6:
  if (quasar::gLogLevel >= 1)
  {
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Error while trying to read data from open archive: ", 51);
    uint64_t v8 = (const char *)archive_error_string();
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v11);
  }
  return v6;
}

void sub_1B2255CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *quasar::artifact::ArchiveWriter::ArchiveWriter(void *a1)
{
  *a1 = &unk_1F0A591A8;
  a1[1] = archive_write_new();
  if (archive_write_set_format_zip())
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
      uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unable to configure archive as ZIP: ", 36);
      int v3 = (const char *)archive_error_string();
      size_t v4 = strlen(v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
LABEL_12:
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v13);
    }
  }
  else if (archive_write_set_options())
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
      BOOL v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unable to configure archive options: ", 37);
      uint64_t v6 = (const char *)archive_error_string();
      size_t v7 = strlen(v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      goto LABEL_12;
    }
  }
  else
  {
    if (archive_write_open_filename()) {
      BOOL v8 = quasar::gLogLevel < 1;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
      size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unable to open archive: ", 24);
      uint64_t v10 = (const char *)archive_error_string();
      size_t v11 = strlen(v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      goto LABEL_12;
    }
  }
  return a1;
}

void sub_1B2255F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::artifact::ArchiveWriter::~ArchiveWriter(quasar::artifact::ArchiveWriter *this)
{
  quasar::artifact::ArchiveWriter::~ArchiveWriter(this);
  JUMPOUT(0x1B3EA8670);
}

{
  *(void *)this = &unk_1F0A591A8;
  archive_write_free();
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string,0>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  BOOL v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1B2256088(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v2 - 24)) = a2[3];
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  return std::ostream::~ostream();
}

void virtual thunk to'std::ostringstream::~ostringstream(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)uint64_t v1 = MEMORY[0x1E4FBA498] + 24;
  *((void *)v1 + 14) = MEMORY[0x1E4FBA498] + 64;
  *((void *)v1 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (v1[95] < 0) {
    operator delete(*((void **)v1 + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  JUMPOUT(0x1B3EA8520);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  *(void *)uint64_t v1 = MEMORY[0x1E4FBA498] + 24;
  *((void *)v1 + 14) = MEMORY[0x1E4FBA498] + 64;
  *((void *)v1 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (v1[95] < 0) {
    operator delete(*((void **)v1 + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](v1 + 112);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::artifact::ArtifactOutputStream::ArtifactOutputStream(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 152) = MEMORY[0x1E4FBA4A8] + 16;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1, (uint64_t *)&off_1F0A329F0);
  *(void *)a1 = off_1F0A59220;
  *(void *)(a1 + 152) = off_1F0A59248;
  *(unsigned char *)(a1 + 112) = 0;
  std::__function::__value_func<BOOL ()(std::string const&)>::__value_func[abi:ne180100](a1 + 120, a2);
  return a1;
}

void sub_1B2256324(_Unwind_Exception *a1)
{
  std::ostringstream::~ostringstream(v2, (uint64_t *)(v3 + 8));
  MEMORY[0x1B3EA8520](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0,std::allocator<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::~__func()
{
}

__n128 std::__function::__func<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0,std::allocator<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F0A5C228;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0,std::allocator<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5C228;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0,std::allocator<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::operator()(uint64_t a1, long long *a2)
{
  return quasar::artifact::Artifact::setContent(*(uint64_t ***)(a1 + 8), *(const void ***)(a1 + 16), a2, *(unsigned __int8 *)(a1 + 24));
}

uint64_t std::__function::__func<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0,std::allocator<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0,std::allocator<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v4 - 24)) = a2[3];
  uint64_t v5 = a2[1];
  *(void *)a1 = v5;
  *(void *)(a1 + *(void *)(v5 - 24)) = a2[2];
  long long v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  uint64_t v7 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v7 - 24)) = a2[3];
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1B2256674(_Unwind_Exception *a1)
{
}

void std::ostringstream::~ostringstream(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x1E4FBA498] + 24;
  uint64_t v1 = a1 + 112;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](v1);
  JUMPOUT(0x1B3EA8670);
}

void quasar::artifact::ArtifactOutputStream::~ArtifactOutputStream(void **this)
{
  MEMORY[0x1B3EA8520](v1 + 152);
}

{
  uint64_t v1;
  uint64_t vars8;

  MEMORY[0x1B3EA8520](v1 + 152);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::artifact::ArtifactOutputStream::~ArtifactOutputStream(quasar::artifact::ArtifactOutputStream *this)
{
  JUMPOUT(0x1B3EA8520);
}

{
  quasar::artifact::ArtifactOutputStream::~ArtifactOutputStream((void **)((char *)this
                                                                        + *(void *)(*(void *)this - 24)));
}

uint64_t std::__function::__value_func<BOOL ()(std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void quasar::artifact::ArtifactOutputStream::~ArtifactOutputStream(void **this, void **a2)
{
  uint64_t v4 = *a2;
  *this = *a2;
  *(void **)((char *)this + *(v4 - 3)) = a2[5];
  if (!*((unsigned char *)this + 112)) {
    quasar::artifact::ArtifactOutputStream::close((quasar::artifact::ArtifactOutputStream *)this);
  }
  std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100](this + 15);
  uint64_t v5 = a2[1];
  *this = v5;
  *(void **)((char *)this + *((void *)v5 - 3)) = a2[4];
  this[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
}

void quasar::artifact::ArtifactOutputStream::close(quasar::artifact::ArtifactOutputStream *this)
{
  std::stringbuf::str();
  uint64_t v2 = *((void *)this + 18);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  char v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 48))(v2, __p);
  char v4 = v3;
  if (SBYTE7(v6) < 0)
  {
    operator delete(__p[0]);
    if (v4) {
      goto LABEL_9;
    }
  }
  else if (v3)
  {
    goto LABEL_9;
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Something went wrong while writing content.", 43);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*(void *)this - 24)), *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 32) | 4);
LABEL_9:
  *((unsigned char *)this + 112) = 1;
}

void sub_1B2256CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void *std::allocate_shared[abi:ne180100]<quasar::artifact::ArchiveReader,std::allocator<quasar::artifact::ArchiveReader>,std::string const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x30uLL);
  __n128 result = std::__shared_ptr_emplace<quasar::artifact::ArchiveReader>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::artifact::ArchiveReader>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2256D18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::artifact::ArchiveReader>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::artifact::ArchiveReader>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A624A8;
  quasar::artifact::ArchiveReader::ArchiveReader(a1 + 3, a2);
  return a1;
}

void sub_1B2256D74(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::artifact::ArchiveReader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A624A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::artifact::ArchiveReader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A624A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::artifact::ArchiveReader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<quasar::artifact::ArtifactInputStreamBuffer,std::allocator<quasar::artifact::ArtifactInputStreamBuffer>,std::shared_ptr<quasar::artifact::ArchiveReader> &,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x1078uLL);
  __n128 result = std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStreamBuffer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::artifact::ArchiveReader> &,std::allocator<quasar::artifact::ArtifactInputStreamBuffer>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2256E6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStreamBuffer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::artifact::ArchiveReader> &,std::allocator<quasar::artifact::ArtifactInputStreamBuffer>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62518;
  std::allocator<quasar::artifact::ArtifactInputStreamBuffer>::construct[abi:ne180100]<quasar::artifact::ArtifactInputStreamBuffer,std::shared_ptr<quasar::artifact::ArchiveReader> &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B2256EDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStreamBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStreamBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStreamBuffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

double std::allocator<quasar::artifact::ArtifactInputStreamBuffer>::construct[abi:ne180100]<quasar::artifact::ArtifactInputStreamBuffer,std::shared_ptr<quasar::artifact::ArchiveReader> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  char v3 = (std::__shared_weak_count *)a3[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v5 = &unk_1F0A59268;
  *(void *)(v5 + 4160) = v4;
  *(void *)(v5 + 4168) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    *(_OWORD *)(v5 + 4176) = 0u;
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(v5 + 4176) = 0u;
  }
  return result;
}

void sub_1B2257028(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::artifact::ArtifactInputStreamBuffer::~ArtifactInputStreamBuffer(quasar::artifact::ArtifactInputStreamBuffer *this)
{
  *(void *)this = &unk_1F0A59268;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 521);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  std::streambuf::~streambuf();
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F0A59268;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 521);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  std::streambuf::~streambuf();
  JUMPOUT(0x1B3EA8670);
}

double quasar::artifact::ArtifactInputStreamBuffer::seekoff@<D0>(quasar::artifact::ArtifactInputStreamBuffer *this@<X0>, std::ios_base::seekdir a2@<W2>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v5 = -1;
  if (a2 == cur)
  {
    uint64_t v6 = a3;
    if ((a3 & 0x8000000000000000) == 0)
    {
      while (1)
      {
        uint64_t v9 = *((void *)this + 2);
        uint64_t v8 = *((void *)this + 3);
        if (v6 <= v8 - v9) {
          break;
        }
        uint64_t v6 = v6 - v8 + v9;
        if ((*(unsigned int (**)(quasar::artifact::ArtifactInputStreamBuffer *))(*(void *)this + 72))(this) == -1)
        {
          uint64_t v5 = *((void *)this + 523) + *((void *)this + 3) - *((void *)this + 2);
          goto LABEL_7;
        }
      }
      uint64_t v10 = v8 + v6;
      long long v11 = (char *)this + *((void *)this + 522) + 64;
      *((void *)this + 2) = (char *)this + 64;
      *((void *)this + 3) = v10;
      *((void *)this + 4) = v11;
      uint64_t v5 = v10 - ((void)this + 64) + *((void *)this + 523);
    }
  }
LABEL_7:
  double result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 128) = v5;
  return result;
}

uint64_t quasar::artifact::ArtifactInputStreamBuffer::underflow(quasar::artifact::ArchiveReader **this)
{
  uint64_t v2 = (quasar::artifact::ArchiveReader *)(this + 8);
  uint64_t Data = quasar::artifact::ArchiveReader::readData(this[520], this + 8, 0x1000uLL, 3);
  if (Data < 1) {
    return 0xFFFFFFFFLL;
  }
  this[523] = (quasar::artifact::ArchiveReader *)((char *)this[522] + (void)this[523]);
  this[522] = (quasar::artifact::ArchiveReader *)Data;
  this[2] = v2;
  this[3] = v2;
  this[4] = (quasar::artifact::ArchiveReader *)((char *)v2 + Data);
  return *((unsigned __int8 *)this + 64);
}

uint64_t quasar::artifact::ArtifactInputStream::ArtifactInputStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  *(void *)a1 = &unk_1F0A22D00;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 32) = &unk_1F0A22D28;
  std::ios_base::init((std::ios_base *)(a1 + 32), v4);
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = -1;
  *(void *)a1 = off_1F0A591D0;
  *(void *)(a1 + 32) = off_1F0A591F8;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)a2;
  *(void *)(a1 + 24) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void quasar::artifact::ArtifactInputStream::~ArtifactInputStream(quasar::artifact::ArtifactInputStream *this)
{
  *(void *)this = off_1F0A591D0;
  uint64_t v1 = (char *)this + 32;
  *((void *)this + 4) = off_1F0A591F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v1);
}

{
  char *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_1F0A591D0;
  uint64_t v1 = (char *)this + 32;
  *((void *)this + 4) = off_1F0A591F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v1);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::artifact::ArtifactInputStream::~ArtifactInputStream(quasar::artifact::ArtifactInputStream *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  *uint64_t v1 = off_1F0A591D0;
  v1[4] = off_1F0A591F8;
  uint64_t v2 = (std::__shared_weak_count *)v1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::istream::~istream();
  JUMPOUT(0x1B3EA8520);
}

{
  void *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  *uint64_t v1 = off_1F0A591D0;
  v1[4] = off_1F0A591F8;
  uint64_t v2 = (std::__shared_weak_count *)v1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v1 + 4);
  JUMPOUT(0x1B3EA8670);
}

void *std::allocate_shared[abi:ne180100]<quasar::artifact::ArchiveReader,std::allocator<quasar::artifact::ArchiveReader>,std::string &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  double result = std::__shared_ptr_emplace<quasar::artifact::ArchiveReader>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::artifact::ArchiveReader>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2257610(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::artifact::ArchiveReader>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::artifact::ArchiveReader>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A624A8;
  quasar::artifact::ArchiveReader::ArchiveReader(a1 + 3, a2);
  return a1;
}

void sub_1B225766C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::artifact::ArtifactInputStream,std::allocator<quasar::artifact::ArtifactInputStream>,std::shared_ptr<quasar::artifact::ArtifactInputStreamBuffer> &,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD0uLL);
  double result = std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStream>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::artifact::ArtifactInputStreamBuffer> &,std::allocator<quasar::artifact::ArtifactInputStream>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B22576C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStream>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::artifact::ArtifactInputStreamBuffer> &,std::allocator<quasar::artifact::ArtifactInputStream>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A624E0;
  std::allocator<quasar::artifact::ArtifactInputStream>::construct[abi:ne180100]<quasar::artifact::ArtifactInputStream,std::shared_ptr<quasar::artifact::ArtifactInputStreamBuffer> &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B2257738(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A624E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A624E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<quasar::artifact::ArtifactInputStream>::construct[abi:ne180100]<quasar::artifact::ArtifactInputStream,std::shared_ptr<quasar::artifact::ArtifactInputStreamBuffer> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v4 = *a3;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::artifact::ArtifactInputStream::ArtifactInputStream(a2, (uint64_t)&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1B225783C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a3[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5)) {
      return 0;
    }
  }
  else if (v4)
  {
    long long v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v12 = a2[47];
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = a2[47];
  }
  else {
    uint64_t v13 = *((void *)a2 + 4);
  }
  uint64_t v14 = a3[47];
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *((void *)a3 + 4);
  }
  if (v13 != v14) {
    return 0;
  }
  long long v16 = (const void **)(a2 + 24);
  long long v19 = (unsigned __int8 *)*((void *)a3 + 3);
  long long v18 = a3 + 24;
  long long v17 = v19;
  if (v15 >= 0) {
    long long v20 = v18;
  }
  else {
    long long v20 = v17;
  }
  if ((v12 & 0x80) != 0) {
    return memcmp(*v16, v20, *((void *)a2 + 4)) == 0;
  }
  if (!a2[47]) {
    return 1;
  }
  uint64_t v21 = v12 - 1;
  do
  {
    int v23 = *(unsigned __int8 *)v16;
    long long v16 = (const void **)((char *)v16 + 1);
    int v22 = v23;
    int v25 = *v20++;
    int v24 = v25;
    BOOL v27 = v21-- != 0;
    uint64_t result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

void quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(uint64_t a1, const void **a2)
{
  long long v54 = 0u;
  long long v55 = 0u;
  int v56 = 1065353216;
  for (uint64_t i = *(uint64_t **)(a1 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0) {
      std::string::__init_copy_ctor_external(&v51, (const std::string::value_type *)i[2], i[3]);
    }
    else {
      std::string v51 = *(std::string *)(i + 2);
    }
    std::unordered_set<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::unordered_set((uint64_t)&v52, (uint64_t)(i + 5));
    for (uint64_t j = v53; j; uint64_t j = (uint64_t *)*j)
    {
      if (*((char *)j + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v31, (const std::string::value_type *)j[2], j[3]);
      }
      else
      {
        *(_OWORD *)long long v31 = *((_OWORD *)j + 1);
        *(void *)&v31[16] = j[4];
      }
      *(_DWORD *)&v31[24] = *((_DWORD *)j + 10);
      if (*((char *)j + 71) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)j[6], j[7]);
      }
      else
      {
        *(_OWORD *)std::string __p = *((_OWORD *)j + 3);
        *(void *)&long long v33 = j[8];
      }
      std::unordered_set<std::string>::unordered_set((uint64_t)&v33 + 8, (uint64_t)(j + 9));
      size_t v5 = (uint64_t *)*((void *)&v34 + 1);
      if (*((void *)&v34 + 1))
      {
        do
        {
          if (*((char *)v5 + 39) < 0) {
            std::string::__init_copy_ctor_external(&v50, (const std::string::value_type *)v5[2], v5[3]);
          }
          else {
            std::string v50 = *(std::string *)(v5 + 2);
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v54, (unsigned __int8 *)&v50, (uint64_t)&v50);
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v50.__r_.__value_.__l.__data_);
          }
          size_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v33 + 8);
      if (SBYTE7(v33) < 0) {
        operator delete(__p[0]);
      }
      if ((v31[23] & 0x80000000) != 0) {
        operator delete(*(void **)v31);
      }
    }
    std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table((uint64_t)&v52);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
  }
  {
    fst::FstRegisterer<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::FstRegisterer();
  }
  {
    fst::FstRegisterer<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::FstRegisterer();
  }
  {
    fst::FstRegisterer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::FstRegisterer();
  }
  memset(&v50, 0, sizeof(v50));
  memset(&v49, 0, sizeof(v49));
  std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::resize((uint64_t *)&v50, *((unint64_t *)&v55 + 1));
  std::vector<int>::resize(&v49, *((std::vector<unsigned int>::size_type *)&v55 + 1));
  uint64_t v6 = (uint64_t *)v55;
  if ((void)v55)
  {
    int v7 = 0;
    do
    {
      if (*((char *)v6 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v51, (const std::string::value_type *)v6[2], v6[3]);
      }
      else {
        std::string v51 = *(std::string *)(v6 + 2);
      }
      if (*((char *)a2 + 23) >= 0) {
        size_t v8 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v8 = (size_t)a2[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)v31, v8 + 1);
      if (v31[23] >= 0) {
        uint64_t v9 = v31;
      }
      else {
        uint64_t v9 = *(unsigned char **)v31;
      }
      if (v8)
      {
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v10 = a2;
        }
        else {
          uint64_t v10 = *a2;
        }
        memmove(v9, v10, v8);
      }
      *(_WORD *)&v9[v8] = 47;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v11 = &v51;
      }
      else {
        long long v11 = (std::string *)v51.__r_.__value_.__r.__words[0];
      }
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v51.__r_.__value_.__l.__size_;
      }
      uint64_t v13 = std::string::append((std::string *)v31, (const std::string::value_type *)v11, size);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      int64_t v48 = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long v47 = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if ((v31[23] & 0x80000000) != 0) {
        operator delete(*(void **)v31);
      }
      uint64_t v15 = fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Read((uint64_t)v47);
      uint64_t v16 = v15;
      if (v15)
      {
        if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 64))(v15, 1, 1))
        {
          unsigned int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 160))(v16);
          uint64_t v17 = v7;
          v49.__begin_[v7] = v21;
        }
        else
        {
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v16 + 128))(v16, v31);
          uint64_t v17 = v7;
          v49.__begin_[v7] = *(_DWORD *)&v31[8];
        }
        uint64_t v22 = *(void *)(v50.__r_.__value_.__r.__words[0] + 8 * v17);
        *(void *)(v50.__r_.__value_.__r.__words[0] + 8 * v17) = v16;
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
        }
        ++v7;
      }
      else if (quasar::gLogLevel >= 1)
      {
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        *(_OWORD *)std::string __p = 0u;
        memset(v31, 0, sizeof(v31));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
        long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Unable to read command FST ", 27);
        if (v48 >= 0) {
          long long v19 = v47;
        }
        else {
          long long v19 = (void **)v47[0];
        }
        size_t v20 = strlen((const char *)v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v31);
      }
      if (SHIBYTE(v48) < 0) {
        operator delete(v47[0]);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      uint64_t v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  memset(v31, 0, sizeof(v31));
  LODWORD(__p[0]) = 1065353216;
  int v24 = (uint64_t *)v50.__r_.__value_.__l.__size_;
  std::string::size_type v23 = v50.__r_.__value_.__r.__words[0];
  if (v50.__r_.__value_.__l.__size_ == v50.__r_.__value_.__r.__words[0])
  {
    unint64_t v27 = (uint64_t)(v50.__r_.__value_.__l.__size_ - v50.__r_.__value_.__r.__words[0]) >> 3;
    std::string::size_type v23 = v50.__r_.__value_.__l.__size_;
  }
  else
  {
    unint64_t v25 = 0;
    do
    {
      v47[0] = 0;
      v47[0] = *(void **)(v23 + 8 * v25);
      if (!v47[0])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unable to read one or more command FSTs");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unsigned int v26 = v49.__begin_[v25];
      v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)v31, v47, (uint64_t)&std::piecewise_construct, &v51)+ 6) = v26;
      ++v25;
      int v24 = (uint64_t *)v50.__r_.__value_.__l.__size_;
      std::string::size_type v23 = v50.__r_.__value_.__r.__words[0];
      unint64_t v27 = (uint64_t)(v50.__r_.__value_.__l.__size_ - v50.__r_.__value_.__r.__words[0]) >> 3;
    }
    while (v27 > v25);
  }
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  unint64_t v28 = 126 - 2 * __clz(v27);
  if (v24 == (uint64_t *)v23) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v28;
  }
  std::__introsort<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,false>(v23, v24, (uint64_t *)&v51, v29, 1);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
}

void sub_1B22581A8(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 - 128);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::resize(uint64_t *a1, unint64_t a2)
{
  char v3 = (void *)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 8 * a2;
      while (v3 != (void *)v6)
      {
        uint64_t v8 = *--v3;
        uint64_t v7 = v8;
        void *v3 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__append(a1, v5);
  }
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Read(uint64_t a1)
{
  v16[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8))
    {
LABEL_5:
      std::ifstream::basic_ifstream((uint64_t *)v14);
      if ((v15[*((void *)v14[0] - 3) + 16] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
        char v3 = (void *)fst::cerr(v2);
        unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Read: Can't open file: ", 28);
        int v5 = *(char *)(a1 + 23);
        if (v5 >= 0) {
          uint64_t v6 = a1;
        }
        else {
          uint64_t v6 = *(void *)a1;
        }
        if (v5 >= 0) {
          uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          uint64_t v7 = *(void *)(a1 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = 0;
      }
      else
      {
        fst::FstReadOptions::FstReadOptions(__p, a1, 0, 0, 0);
        uint64_t v8 = fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Read((uint64_t)v14, (uint64_t)__p);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
      v14[0] = *(void **)MEMORY[0x1E4FBA3F8];
      *(void **)((char *)v14 + *((void *)v14[0] - 3)) = *(void **)(MEMORY[0x1E4FBA3F8] + 24);
      MEMORY[0x1B3EA7CF0](v15);
      std::istream::~istream();
      MEMORY[0x1B3EA8520](v16);
      return v8;
    }
  }
  else if (*(unsigned char *)(a1 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v9 = fst::cin((fst *)a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "standard input");
  fst::FstReadOptions::FstReadOptions(v14, __p, 0, 0, 0);
  uint64_t v8 = fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Read(v9, (uint64_t)v14);
  if ((v15[7] & 0x80000000) != 0) {
    operator delete(v14[0]);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return v8;
}

void sub_1B2258754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a24);
  _Unwind_Resume(a1);
}

uint64_t quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandLookupTables(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  memset(v22, 0, sizeof(v22));
  int v23 = 1065353216;
  memset(v20, 0, sizeof(v20));
  int v21 = 1065353216;
  for (uint64_t i = *(uint64_t **)(a1 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0) {
      std::string::__init_copy_ctor_external(&v17, (const std::string::value_type *)i[2], i[3]);
    }
    else {
      std::string v17 = *(std::string *)(i + 2);
    }
    std::unordered_set<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::unordered_set((uint64_t)v18, (uint64_t)(i + 5));
    for (uint64_t j = v19; j; uint64_t j = (uint64_t *)*j)
    {
      if (*((char *)j + 39) < 0) {
        std::string::__init_copy_ctor_external(&v13, (const std::string::value_type *)j[2], j[3]);
      }
      else {
        std::string v13 = *(std::string *)(j + 2);
      }
      int v14 = *((_DWORD *)j + 10);
      if (*((char *)j + 71) < 0) {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)j[6], j[7]);
      }
      else {
        std::string __p = *(std::string *)((unsigned char *)j + 2);
      }
      std::unordered_set<std::string>::unordered_set((uint64_t)v16, (uint64_t)(j + 9));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v12 = __p;
      }
      int v11 = 0;
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
      int v11 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v9 + 96))(v9, &v12);
      if (v11 != -1) {
        std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__emplace_multi<int &,quasar::VoiceCommandActiveSetCompilation::CommandSpec&>(a3, &v11, (long long *)&v13);
      }
      std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__emplace_multi<quasar::VoiceCommandActiveSetCompilation::CommandSpec&,quasar::VoiceCommandActiveSetCompilation::Suite&>(a4, (long long *)&v13, (long long *)&v17);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v20, (unsigned __int8 *)&v13, (uint64_t)&v13);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v22, (unsigned __int8 *)&v17, (uint64_t)&v17);
    std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table((uint64_t)v18);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v22);
}

void sub_1B2258A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v41 - 176);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v41 - 128);
  _Unwind_Resume(a1);
}

uint64_t **quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandCharacterSet@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  unint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120))(v3);
  uint64_t result = (uint64_t **)(*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 128))(v3, 0);
  if (v4)
  {
    int v6 = (int)result;
    uint64_t v7 = 0;
    do
    {
      int v8 = v6;
      uint64_t result = std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a2, &v8, &v8);
      if (++v7 < v4)
      {
        uint64_t result = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 128))(v3, v7);
        int v6 = (int)result;
      }
    }
    while (v4 != v7);
  }
  return result;
}

void sub_1B2258BFC(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandCommonSymbolLabels@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  for (uint64_t i = 0; i != 12; ++i)
  {
    *(_OWORD *)__len = xmmword_1E5FFFEC8[i];
    int v5 = (_OWORD *)__len[1];
    if (__len[1] >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    int v6 = (const void *)__len[0];
    if (__len[1] >= 0x17)
    {
      size_t v8 = (__len[1] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len[1] | 7) != 0x17) {
        size_t v8 = __len[1] | 7;
      }
      size_t v9 = v8 + 1;
      uint64_t v7 = operator new(v8 + 1);
      __dst[1] = v5;
      unint64_t v13 = v9 | 0x8000000000000000;
      __dst[0] = v7;
LABEL_9:
      memmove(v7, v6, (size_t)v5);
      goto LABEL_10;
    }
    HIBYTE(v13) = __len[1];
    uint64_t v7 = __dst;
    if (__len[1]) {
      goto LABEL_9;
    }
LABEL_10:
    *((unsigned char *)v5 + (void)v7) = 0;
    int v10 = (*(uint64_t (**)(uint64_t, _OWORD **))(*(void *)v3 + 96))(v3, __dst);
    if (SHIBYTE(v13) < 0) {
      operator delete(__dst[0]);
    }
    __dst[0] = __len;
    uint64_t result = std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t **)a2, (uint64_t)__len, (uint64_t)&std::piecewise_construct, __dst);
    *((_DWORD *)result + 12) = v10;
  }
  return result;
}

void sub_1B2258DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__tree<int>::destroy(v15, *(void **)(v15 + 8));
  _Unwind_Resume(a1);
}

void fst::FstRegisterer<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::FstRegisterer()
{
}

void sub_1B2258E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t fst::GenericRegisterer<fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GenericRegisterer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v6 = a3;
  *((void *)&v6 + 1) = a4;
  if (fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_init_) {
    fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Init();
  }
  fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_init_ = 0;
  fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetEntry(fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_, a2, &v6);
  return a1;
}

void fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFst()
{
}

{
  operator new();
}

void sub_1B2258F80(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40676EB28ALL);
  _Unwind_Resume(a1);
}

void fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFstImpl(uint64_t a1)
{
  __str.__r_.__value_.__s.__data_[0] = 1;
  __str.__r_.__value_.__l.__size_ = 0;
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, (uint64_t)&__str);
}

void sub_1B2259108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type()
{
  {
    operator new();
  }
  return fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type(void)::type;
}

void sub_1B22591B4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Type()
{
  {
    operator new();
  }
  return fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Type(void)::type;
}

void sub_1B2259270(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Read()
{
}

void fst::FstRegisterer<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Convert()
{
}

void sub_1B2259368(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Read()
{
}

void sub_1B22594C0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40676EB28ALL);
  _Unwind_Resume(a1);
}

void fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Read<fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>()
{
}

void sub_1B22597C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetEntry(uint64_t a1, uint64_t a2, long long *a3)
{
  unint64_t v4 = (uint64_t **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  long long v6 = *a3;
  std::__tree<std::__value_type<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B225988C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Init()
{
}

uint64_t fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstRegister(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3C1F8;
  std::__tree<std::string>::destroy(a1 + 8, *(char **)(a1 + 16));
  return a1;
}

void fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstRegister(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3C1F8;
  std::__tree<std::string>::destroy(a1 + 8, *(char **)(a1 + 16));
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LoadEntryFromSharedObject(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 24))(v22);
  if ((v23 & 0x80u) == 0) {
    unint64_t v4 = v22;
  }
  else {
    unint64_t v4 = (void **)v22[0];
  }
  if (dlopen((const char *)v4, 1))
  {
    int v5 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2);
    if (v5)
    {
      uint64_t v6 = *v5;
      goto LABEL_18;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    std::string v12 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    unint64_t v13 = (void *)fst::cerr(v12);
    int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"GenericRegister::GetEntry : ", 28);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"lookup failed in shared object: ", 32);
    if ((v23 & 0x80u) == 0) {
      uint64_t v16 = v22;
    }
    else {
      uint64_t v16 = (void **)v22[0];
    }
    if ((v23 & 0x80u) == 0) {
      uint64_t v17 = v23;
    }
    else {
      uint64_t v17 = (uint64_t)v22[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v7 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    size_t v8 = (void *)fst::cerr(v7);
    size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"GenericRegister::GetEntry : ", 28);
    int v10 = dlerror();
    size_t v11 = strlen(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = 0;
LABEL_18:
  if ((char)v23 < 0) {
    operator delete(v22[0]);
  }
  return v6;
}

void sub_1B2259B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ConvertKeyToSoFilename(uint64_t a1@<X1>, void **a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  fst::ConvertToLegalCSymbol((unint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)a2, size + 7);
  if (*((char *)a2 + 23) < 0) {
    a2 = (void **)*a2;
  }
  if (size)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(a2, p_p, size);
  }
  strcpy((char *)a2 + size, "-fst.so");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B2259CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookupEntry(uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 8, a2);
  if (a1 + 16 == v3) {
    return 0;
  }
  else {
    return v3 + 56;
  }
}

_OWORD *std::__tree<std::__value_type<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  int v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x48uLL);
    void v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void fst::FstRegisterer<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::FstRegisterer()
{
}

void sub_1B2259E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_1B2259ED4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C402D64F9CALL);
  _Unwind_Resume(a1);
}

void fst::FstRegisterer<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Convert()
{
}

void sub_1B2259F40(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void fst::FstRegisterer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::FstRegisterer()
{
}

void sub_1B225A008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void fst::FstRegisterer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Convert()
{
}

void sub_1B225A07C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    int v14 = v13;
    uint64_t v15 = &v13[8 * v10];
    uint64_t v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    uint64_t v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::~__split_buffer(&v14);
  }
}

void sub_1B225A190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  unsigned int v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::reverse_iterator<std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::reverse_iterator<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Read(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v35 = *(std::string *)a2;
  }
  long long v36 = *(_OWORD *)(a2 + 24);
  long long v37 = *(_OWORD *)(a2 + 40);
  int v38 = *(_DWORD *)(a2 + 56);
  long long v32 = 0u;
  long long v31 = 0u;
  *(_OWORD *)long long v30 = 0u;
  *(_OWORD *)uint64_t v29 = 0u;
  uint64_t v34 = 0;
  long long v33 = 0xFFFFFFFFFFFFFFFFLL;
  if ((void)v36)
  {
    uint64_t v4 = *(int **)(a2 + 24);
    int v28 = *v4;
    std::string::operator=((std::string *)v29, (const std::string *)(v4 + 2));
    std::string::operator=((std::string *)&v30[1], (const std::string *)(v4 + 8));
    long long v5 = *(_OWORD *)(v4 + 14);
    long long v6 = *(_OWORD *)(v4 + 18);
    uint64_t v34 = *((void *)v4 + 11);
    long long v33 = v6;
    long long v32 = v5;
  }
  else
  {
    if (!fst::FstHeader::Read((uint64_t)&v28, a1, a2, 0)) {
      goto LABEL_32;
    }
    *(void *)&long long v36 = &v28;
  }
  if (fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_init_) {
    fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Init();
  }
  fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_init_ = 0;
  Entry = (uint64_t (*)(uint64_t, std::string *))fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetEntry(fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_, (uint64_t)v29);
  if (Entry)
  {
    uint64_t v8 = Entry(a1, &v35);
    goto LABEL_33;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  unint64_t v9 = fst::LogMessage::LogMessage((fst *)&v27, (uint64_t)__p);
  uint64_t v10 = (void *)fst::cerr(v9);
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Fst::Read: Unknown FST type \"", 29);
  if (SHIBYTE(v30[0]) >= 0) {
    unint64_t v12 = v29;
  }
  else {
    unint64_t v12 = (void **)v29[0];
  }
  if (SHIBYTE(v30[0]) >= 0) {
    uint64_t v13 = HIBYTE(v30[0]);
  }
  else {
    uint64_t v13 = (uint64_t)v29[1];
  }
  char v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\" (arc type = \"", 15);
  uint64_t v16 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
  int v17 = *(char *)(v16 + 23);
  if (v17 >= 0) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = *(void *)v16;
  }
  if (v17 >= 0) {
    uint64_t v19 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    uint64_t v19 = *(void *)(v16 + 8);
  }
  char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v18, v19);
  char v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\"): ", 4);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v22 = &v35;
  }
  else {
    uint64_t v22 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, size);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v27);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
LABEL_32:
  uint64_t v8 = 0;
LABEL_33:
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[1]);
  }
  if (SHIBYTE(v30[0]) < 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_1B225A548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a19);
  if (*(char *)(v19 - 73) < 0) {
    operator delete(*(void **)(v19 - 96));
  }
  _Unwind_Resume(a1);
}

uint64_t fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (v4) {
    return *(void *)v4;
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,false>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  long long v177 = (uint64_t *)result;
LABEL_2:
  v171 = a2 - 2;
  long long v173 = a2 - 1;
  uint64_t v170 = a2 - 3;
  uint64_t v10 = v177;
  long long v175 = a2;
  while (1)
  {
    long long v177 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    unint64_t v12 = a2 - v10;
    if (v6 || !v5)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v79 = *a3;
          uint64_t v181 = *(a2 - 1);
          v182 = &v181;
          int v80 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v79, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
          uint64_t v81 = *a3;
          uint64_t v181 = *v177;
          v182 = &v181;
          uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v81, &v181, (uint64_t)&std::piecewise_construct, &v182);
          if (v80 < *(_DWORD *)(result + 24))
          {
            uint64_t v82 = *v177;
            *long long v177 = *(a2 - 1);
            *(a2 - 1) = v82;
          }
          break;
        case 3uLL:
          uint64_t result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v177, v177 + 1, v173, a3);
          break;
        case 4uLL:
          uint64_t result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v177, v177 + 1, v177 + 2, v173, a3);
          break;
        case 5uLL:
          uint64_t result = (uint64_t)std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,0>(v177, v177 + 1, v177 + 2, v177 + 3, v173, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v177 == a2) {
        return result;
      }
      unint64_t v172 = v11;
      int64_t v101 = (v12 - 2) >> 1;
      int64_t v179 = v101;
      do
      {
        int64_t v102 = v101;
        if (v179 >= v101)
        {
          int64_t v174 = v101;
          uint64_t v103 = (2 * v101) | 1;
          long long v104 = &v177[v103];
          uint64_t v105 = 2 * v101 + 2;
          if (v105 < (uint64_t)v12)
          {
            uint64_t v106 = *a3;
            uint64_t v181 = *v104;
            v182 = &v181;
            int v107 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v106, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
            uint64_t v108 = *a3;
            uint64_t v181 = v104[1];
            v182 = &v181;
            if (v107 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v108, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6))
            {
              ++v104;
              uint64_t v103 = v105;
            }
          }
          uint64_t v109 = *a3;
          long long v110 = &v177[v174];
          uint64_t v181 = *v104;
          v182 = &v181;
          int v111 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v109, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
          uint64_t v112 = *a3;
          uint64_t v181 = *v110;
          v182 = &v181;
          int v113 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v112, &v181, (uint64_t)&std::piecewise_construct, &v182);
          int64_t v102 = v174;
          if (v111 >= *((_DWORD *)v113 + 6))
          {
            uint64_t v114 = *v110;
            *long long v110 = 0;
            do
            {
              long long v115 = v104;
              uint64_t v116 = *v104;
              *long long v104 = 0;
              uint64_t v117 = *v110;
              *long long v110 = v116;
              if (v117) {
                (*(void (**)(uint64_t))(*(void *)v117 + 8))(v117);
              }
              if (v179 < v103) {
                break;
              }
              uint64_t v118 = (2 * v103) | 1;
              long long v104 = &v177[v118];
              uint64_t v103 = 2 * v103 + 2;
              if (v103 < (uint64_t)v12)
              {
                uint64_t v119 = *a3;
                uint64_t v181 = *v104;
                v182 = &v181;
                int v120 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v119, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
                uint64_t v121 = *a3;
                uint64_t v181 = v104[1];
                v182 = &v181;
                if (v120 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v121, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6))uint64_t v103 = v118; {
                else
                }
                  ++v104;
              }
              else
              {
                uint64_t v103 = v118;
              }
              uint64_t v122 = *a3;
              uint64_t v181 = *v104;
              v182 = &v181;
              int v123 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v122, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
              uint64_t v124 = *a3;
              uint64_t v181 = v114;
              v182 = &v181;
              long long v110 = v115;
            }
            while (v123 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v124, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6));
            uint64_t v125 = *v115;
            *long long v115 = v114;
            int64_t v102 = v174;
            a2 = v175;
            if (v125)
            {
              (*(void (**)(uint64_t))(*(void *)v125 + 8))(v125);
              int64_t v102 = v174;
            }
          }
        }
        int64_t v101 = v102 - 1;
      }
      while (v102);
      uint64_t v126 = v172 >> 3;
      while (2)
      {
        unint64_t v176 = a2;
        uint64_t v127 = 0;
        uint64_t v128 = v177;
        uint64_t v129 = *v177;
        *long long v177 = 0;
        int64_t v130 = (unint64_t)(v126 - 2) >> 1;
        uint64_t v180 = v126;
        do
        {
          int v131 = &v128[v127 + 1];
          uint64_t v132 = 2 * v127;
          uint64_t v127 = (2 * v127) | 1;
          uint64_t v133 = v132 + 2;
          if (v132 + 2 < v126)
          {
            uint64_t v134 = *a3;
            uint64_t v181 = *v131;
            v182 = &v181;
            int v135 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v134, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
            uint64_t v136 = *a3;
            uint64_t v181 = v131[1];
            v182 = &v181;
            if (v135 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v136, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6))
            {
              ++v131;
              uint64_t v127 = v133;
            }
            uint64_t v126 = v180;
          }
          uint64_t v137 = *v131;
          uint64_t *v131 = 0;
          uint64_t v138 = *v128;
          *uint64_t v128 = v137;
          if (v138) {
            (*(void (**)(uint64_t))(*(void *)v138 + 8))(v138);
          }
          uint64_t v128 = v131;
        }
        while (v127 <= v130);
        uint64_t v139 = v176 - 1;
        if (v131 == v176 - 1)
        {
          uint64_t v142 = v176 - 1;
          uint64_t result = *v131;
          uint64_t *v131 = v129;
          if (!result) {
            goto LABEL_133;
          }
        }
        else
        {
          uint64_t v140 = *v139;
          uint64_t *v139 = 0;
          uint64_t v141 = *v131;
          uint64_t *v131 = v140;
          if (v141) {
            (*(void (**)(uint64_t))(*(void *)v141 + 8))(v141);
          }
          uint64_t result = *v139;
          uint64_t v142 = v176 - 1;
          uint64_t *v139 = v129;
          if (result) {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
          }
          uint64_t v143 = (char *)(v131 + 1) - (char *)v177;
          if (v143 < 9) {
            goto LABEL_133;
          }
          unint64_t v144 = (((unint64_t)v143 >> 3) - 2) >> 1;
          int v145 = &v177[v144];
          uint64_t v146 = *a3;
          uint64_t v181 = *v145;
          v182 = &v181;
          int v147 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v146, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
          uint64_t v148 = *a3;
          uint64_t v181 = *v131;
          v182 = &v181;
          uint64_t v126 = v180;
          uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v148, &v181, (uint64_t)&std::piecewise_construct, &v182);
          if (v147 >= *(_DWORD *)(result + 24)) {
            goto LABEL_133;
          }
          uint64_t v149 = *v131;
          uint64_t *v131 = 0;
          do
          {
            v150 = v145;
            uint64_t v151 = *v145;
            *int v145 = 0;
            uint64_t v152 = *v131;
            uint64_t *v131 = v151;
            if (v152) {
              (*(void (**)(uint64_t))(*(void *)v152 + 8))(v152);
            }
            if (!v144) {
              break;
            }
            unint64_t v144 = (v144 - 1) >> 1;
            int v145 = &v177[v144];
            uint64_t v153 = *a3;
            uint64_t v181 = *v145;
            v182 = &v181;
            int v154 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v153, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
            uint64_t v155 = *a3;
            uint64_t v181 = v149;
            v182 = &v181;
            int v131 = v150;
            uint64_t v126 = v180;
          }
          while (v154 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v155, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6));
          uint64_t result = *v150;
          uint64_t *v150 = v149;
          if (!result)
          {
LABEL_133:
            BOOL v156 = v126-- <= 2;
            a2 = v142;
            if (v156) {
              return result;
            }
            continue;
          }
        }
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      goto LABEL_133;
    }
    uint64_t v13 = a4;
    unint64_t v14 = v12 >> 1;
    long long v15 = &v177[v12 >> 1];
    if ((unint64_t)v11 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v177, &v177[v12 >> 1], v173, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v177 + 1, v15 - 1, v171, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v177 + 2, &v177[v14 + 1], v170, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v15 - 1, v15, &v177[v14 + 1], a3);
      uint64_t v16 = *v177;
      *long long v177 = *v15;
      uint64_t *v15 = v16;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(&v177[v12 >> 1], v177, v173, a3);
    }
    a4 = v13 - 1;
    if ((a5 & 1) != 0
      || (uint64_t v17 = *a3,
          uint64_t v181 = *(v177 - 1),
          v182 = &v181,
          v18 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v17, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6), uint64_t v19 = *a3, v181 = *v177, v182 = &v181, v18 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v19, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6)))
    {
      uint64_t v20 = 0;
      uint64_t v21 = *v177;
      *long long v177 = 0;
      a2 = v175;
      do
      {
        uint64_t v22 = *a3;
        uint64_t v181 = v177[v20 + 1];
        v182 = &v181;
        int v23 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v22, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
        uint64_t v24 = *a3;
        uint64_t v181 = v21;
        v182 = &v181;
        ++v20;
      }
      while (v23 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v24, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6));
      unint64_t v25 = &v177[v20];
      char v26 = v175;
      if (v20 == 1)
      {
        char v26 = v175;
        do
        {
          if (v25 >= v26) {
            break;
          }
          uint64_t v31 = *a3;
          uint64_t v32 = *--v26;
          uint64_t v181 = v32;
          v182 = &v181;
          int v33 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v31, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
          uint64_t v34 = *a3;
          uint64_t v181 = v21;
          v182 = &v181;
        }
        while (v33 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v34, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6));
      }
      else
      {
        do
        {
          uint64_t v27 = *a3;
          uint64_t v28 = *--v26;
          uint64_t v181 = v28;
          v182 = &v181;
          int v29 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v27, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
          uint64_t v30 = *a3;
          uint64_t v181 = v21;
          v182 = &v181;
        }
        while (v29 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v30, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6));
      }
      if (v25 >= v26)
      {
        long long v47 = v25 - 1;
      }
      else
      {
        uint64_t v35 = a4;
        long long v36 = v25;
        long long v37 = v26;
        do
        {
          uint64_t v38 = *v36;
          *long long v36 = *v37;
          *long long v37 = v38;
          do
          {
            uint64_t v39 = *a3;
            uint64_t v40 = v36[1];
            ++v36;
            uint64_t v181 = v40;
            v182 = &v181;
            int v41 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v39, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
            uint64_t v42 = *a3;
            uint64_t v181 = v21;
            v182 = &v181;
          }
          while (v41 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v42, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6));
          do
          {
            uint64_t v43 = *a3;
            uint64_t v44 = *--v37;
            uint64_t v181 = v44;
            v182 = &v181;
            int v45 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v43, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
            uint64_t v46 = *a3;
            uint64_t v181 = v21;
            v182 = &v181;
          }
          while (v45 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v46, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6));
        }
        while (v36 < v37);
        long long v47 = v36 - 1;
        a2 = v175;
        a4 = v35;
      }
      if (v47 != v177)
      {
        uint64_t v48 = *v47;
        *long long v47 = 0;
        uint64_t v49 = *v177;
        *long long v177 = v48;
        if (v49) {
          (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
        }
      }
      uint64_t v50 = *v47;
      *long long v47 = v21;
      if (v50) {
        (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
      }
      if (v25 < v26) {
        goto LABEL_37;
      }
      BOOL v51 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v177, v47, a3);
      uint64_t v10 = v47 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v47 + 1, a2, a3);
      if (result)
      {
        a2 = v47;
        if (v51) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v51)
      {
LABEL_37:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,false>(v177, v47, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v10 = v47 + 1;
      }
    }
    else
    {
      uint64_t v52 = *v177;
      *long long v177 = 0;
      uint64_t v53 = *a3;
      uint64_t v181 = v52;
      v182 = &v181;
      a2 = v175;
      int v54 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v53, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
      uint64_t v55 = *a3;
      uint64_t v181 = *v173;
      v182 = &v181;
      if (v54 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v55, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6))
      {
        uint64_t v10 = v177;
        do
        {
          uint64_t v56 = *a3;
          uint64_t v181 = v52;
          v182 = &v181;
          int v57 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v56, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
          uint64_t v58 = *a3;
          uint64_t v181 = v10[1];
          v182 = &v181;
          ++v10;
        }
        while (v57 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v58, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6));
      }
      else
      {
        uint64_t v59 = v177 + 1;
        do
        {
          uint64_t v10 = v59;
          if (v59 >= v175) {
            break;
          }
          uint64_t v60 = *a3;
          uint64_t v181 = v52;
          v182 = &v181;
          int v61 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v60, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
          uint64_t v62 = *a3;
          uint64_t v181 = *v10;
          v182 = &v181;
          uint64_t v63 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v62, &v181, (uint64_t)&std::piecewise_construct, &v182);
          uint64_t v59 = v10 + 1;
        }
        while (v61 >= *((_DWORD *)v63 + 6));
      }
      uint64_t v64 = a4;
      uint64_t v65 = v175;
      if (v10 < v175)
      {
        uint64_t v65 = v175;
        do
        {
          uint64_t v66 = *a3;
          uint64_t v181 = v52;
          v182 = &v181;
          int v67 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v66, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
          uint64_t v68 = *a3;
          uint64_t v181 = *(v65 - 1);
          v182 = &v181;
          --v65;
        }
        while (v67 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v68, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6));
      }
      while (v10 < v65)
      {
        uint64_t v69 = *v10;
        *uint64_t v10 = *v65;
        *uint64_t v65 = v69;
        do
        {
          uint64_t v70 = *a3;
          uint64_t v181 = v52;
          v182 = &v181;
          int v71 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v70, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
          uint64_t v72 = *a3;
          uint64_t v181 = v10[1];
          v182 = &v181;
          ++v10;
        }
        while (v71 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v72, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6));
        do
        {
          uint64_t v73 = *a3;
          uint64_t v181 = v52;
          v182 = &v181;
          int v74 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v73, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
          uint64_t v75 = *a3;
          uint64_t v181 = *(v65 - 1);
          v182 = &v181;
          --v65;
        }
        while (v74 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v75, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6));
      }
      int64_t v76 = v10 - 1;
      BOOL v5 = v10 - 1 >= v177;
      BOOL v6 = v10 - 1 == v177;
      if (v10 - 1 != v177)
      {
        uint64_t v77 = *v76;
        uint64_t *v76 = 0;
        uint64_t v78 = *v177;
        *long long v177 = v77;
        if (v78) {
          (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
        }
      }
      a5 = 0;
      uint64_t result = *v76;
      uint64_t *v76 = v52;
      a4 = v64;
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        a5 = 0;
      }
    }
  }
  uint64_t v83 = v177 + 1;
  BOOL v85 = v177 == a2 || v83 == a2;
  if (a5)
  {
    if (!v85)
    {
      uint64_t v86 = 0;
      uint64_t v87 = v177;
      do
      {
        long long v88 = v87;
        uint64_t v87 = v83;
        uint64_t v89 = *a3;
        uint64_t v181 = v88[1];
        v182 = &v181;
        int v90 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v89, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
        uint64_t v91 = *a3;
        uint64_t v181 = *v88;
        v182 = &v181;
        uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v91, &v181, (uint64_t)&std::piecewise_construct, &v182);
        if (v90 < *(_DWORD *)(result + 24))
        {
          uint64_t v92 = 0;
          uint64_t v93 = *v87;
          *uint64_t v87 = 0;
          for (uint64_t i = v86; ; i -= 8)
          {
            long long v95 = (uint64_t *)((char *)v177 + i);
            uint64_t v96 = *(uint64_t *)((char *)v177 + i);
            *long long v95 = 0;
            v95[1] = v96;
            if (v92) {
              (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
            }
            if (!i)
            {
              unint64_t v100 = v177;
              goto LABEL_84;
            }
            uint64_t v97 = *a3;
            uint64_t v181 = v93;
            v182 = &v181;
            int v98 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v97, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
            uint64_t v99 = *a3;
            uint64_t v181 = *(uint64_t *)((char *)v177 + i - 8);
            v182 = &v181;
            if (v98 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v99, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6))break; {
            uint64_t v92 = *v95;
            }
          }
          unint64_t v100 = (uint64_t *)((char *)v177 + i);
LABEL_84:
          uint64_t result = *v100;
          *unint64_t v100 = v93;
          a2 = v175;
          if (result) {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
          }
        }
        uint64_t v83 = v87 + 1;
        v86 += 8;
      }
      while (v87 + 1 != a2);
    }
  }
  else if (!v85)
  {
    do
    {
      int v157 = v177;
      int v158 = v83;
      uint64_t v159 = *a3;
      uint64_t v181 = v177[1];
      v182 = &v181;
      int v160 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v159, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
      uint64_t v161 = *a3;
      uint64_t v181 = *v177;
      v182 = &v181;
      uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v161, &v181, (uint64_t)&std::piecewise_construct, &v182);
      if (v160 < *(_DWORD *)(result + 24))
      {
        uint64_t result = 0;
        uint64_t v162 = *v158;
        *int v158 = 0;
        do
        {
          uint64_t v163 = *v157;
          *int v157 = 0;
          v157[1] = v163;
          if (result) {
            (*(void (**)(uint64_t))(*(void *)result + 8))(result);
          }
          uint64_t v164 = *a3;
          uint64_t v181 = v162;
          v182 = &v181;
          int v165 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v164, &v181, (uint64_t)&std::piecewise_construct, &v182)+ 6);
          uint64_t v166 = *a3;
          uint64_t v181 = *(v157 - 1);
          v182 = &v181;
          int v167 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v166, &v181, (uint64_t)&std::piecewise_construct, &v182);
          v168 = v157 - 1;
          int v169 = *((_DWORD *)v167 + 6);
          uint64_t result = *v157--;
        }
        while (v165 < v169);
        v168[1] = v162;
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      long long v177 = v158;
      uint64_t v83 = v158 + 1;
    }
    while (v158 + 1 != a2);
  }
  return result;
}

void sub_1B225B7A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a6;
  uint64_t v29 = *a5;
  uint64_t v30 = &v29;
  int v13 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v12, &v29, (uint64_t)&std::piecewise_construct, &v30)+ 6);
  uint64_t v14 = *a6;
  uint64_t v29 = *a4;
  uint64_t v30 = &v29;
  uint64_t result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v14, &v29, (uint64_t)&std::piecewise_construct, &v30);
  if (v13 < *((_DWORD *)result + 6))
  {
    uint64_t v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    uint64_t v17 = *a6;
    uint64_t v29 = *a4;
    uint64_t v30 = &v29;
    int v18 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v17, &v29, (uint64_t)&std::piecewise_construct, &v30)+ 6);
    uint64_t v19 = *a6;
    uint64_t v29 = *a3;
    uint64_t v30 = &v29;
    uint64_t result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v19, &v29, (uint64_t)&std::piecewise_construct, &v30);
    if (v18 < *((_DWORD *)result + 6))
    {
      uint64_t v20 = *a3;
      *a3 = *a4;
      *a4 = v20;
      uint64_t v21 = *a6;
      uint64_t v29 = *a3;
      uint64_t v30 = &v29;
      int v22 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v21, &v29, (uint64_t)&std::piecewise_construct, &v30)+ 6);
      uint64_t v23 = *a6;
      uint64_t v29 = *a2;
      uint64_t v30 = &v29;
      uint64_t result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v23, &v29, (uint64_t)&std::piecewise_construct, &v30);
      if (v22 < *((_DWORD *)result + 6))
      {
        uint64_t v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
        uint64_t v25 = *a6;
        uint64_t v29 = *a2;
        uint64_t v30 = &v29;
        int v26 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v25, &v29, (uint64_t)&std::piecewise_construct, &v30)+ 6);
        uint64_t v27 = *a6;
        uint64_t v29 = *a1;
        uint64_t v30 = &v29;
        uint64_t result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v27, &v29, (uint64_t)&std::piecewise_construct, &v30);
        if (v26 < *((_DWORD *)result + 6))
        {
          uint64_t v28 = *a1;
          *a1 = *a2;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

void *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v27 = *a2;
  uint64_t v28 = &v27;
  int v9 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v8, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 6);
  uint64_t v10 = *a4;
  uint64_t v27 = *a1;
  uint64_t v28 = &v27;
  int v11 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v10, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 6);
  uint64_t v12 = *a4;
  if (v9 >= v11)
  {
    uint64_t v27 = *a3;
    uint64_t v28 = &v27;
    int v17 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v12, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 6);
    uint64_t v18 = *a4;
    uint64_t v27 = *a2;
    uint64_t v28 = &v27;
    uint64_t result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v18, &v27, (uint64_t)&std::piecewise_construct, &v28);
    if (v17 < *((_DWORD *)result + 6))
    {
      uint64_t v19 = *a2;
      *a2 = *a3;
      *a3 = v19;
      uint64_t v20 = *a4;
      uint64_t v27 = *a2;
      uint64_t v28 = &v27;
      int v21 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v20, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 6);
      uint64_t v22 = *a4;
      uint64_t v27 = *a1;
      uint64_t v28 = &v27;
      uint64_t result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v22, &v27, (uint64_t)&std::piecewise_construct, &v28);
      if (v21 < *((_DWORD *)result + 6))
      {
        uint64_t v23 = *a1;
        *a1 = *a2;
        *a2 = v23;
      }
    }
  }
  else
  {
    uint64_t v27 = *a3;
    uint64_t v28 = &v27;
    int v13 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v12, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 6);
    uint64_t v14 = *a4;
    uint64_t v27 = *a2;
    uint64_t v28 = &v27;
    uint64_t result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v14, &v27, (uint64_t)&std::piecewise_construct, &v28);
    uint64_t v16 = *a1;
    if (v13 >= *((_DWORD *)result + 6))
    {
      *a1 = *a2;
      *a2 = v16;
      uint64_t v24 = *a4;
      uint64_t v27 = *a3;
      uint64_t v28 = &v27;
      int v25 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v24, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 6);
      uint64_t v26 = *a4;
      uint64_t v27 = *a2;
      uint64_t v28 = &v27;
      uint64_t result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v26, &v27, (uint64_t)&std::piecewise_construct, &v28);
      if (v25 >= *((_DWORD *)result + 6)) {
        return result;
      }
      uint64_t v16 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v16;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *a3;
      uint64_t v31 = *(a2 - 1);
      uint64_t v32 = &v31;
      int v9 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v8, &v31, (uint64_t)&std::piecewise_construct, &v32)+ 6);
      uint64_t v10 = *a3;
      uint64_t v31 = *a1;
      uint64_t v32 = &v31;
      if (v9 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v10, &v31, (uint64_t)&std::piecewise_construct, &v32)+ 6))
      {
        uint64_t v11 = *a1;
        *a1 = *(v4 - 1);
        *(v4 - 1) = v11;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v12 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(a1, a1 + 1, a1 + 2, a3);
      int v13 = a1 + 3;
      if (a1 + 3 == v4) {
        return 1;
      }
      int v14 = 0;
      uint64_t v15 = 16;
      uint64_t v29 = v4;
      break;
  }
  while (1)
  {
    uint64_t v16 = *a3;
    uint64_t v31 = *v13;
    uint64_t v32 = &v31;
    int v17 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v16, &v31, (uint64_t)&std::piecewise_construct, &v32)+ 6);
    uint64_t v18 = *a3;
    uint64_t v31 = *v12;
    uint64_t v32 = &v31;
    if (v17 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v18, &v31, (uint64_t)&std::piecewise_construct, &v32)+ 6))
    {
      int v30 = v14;
      uint64_t v19 = 0;
      uint64_t v20 = *v13;
      *int v13 = 0;
      for (uint64_t i = v15; ; i -= 8)
      {
        uint64_t v22 = (uint64_t *)((char *)a1 + i);
        uint64_t v23 = *(uint64_t *)((char *)a1 + i);
        *uint64_t v22 = 0;
        v22[1] = v23;
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
        if (!i)
        {
          uint64_t v27 = a1;
          goto LABEL_15;
        }
        uint64_t v24 = *a3;
        uint64_t v31 = v20;
        uint64_t v32 = &v31;
        int v25 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v24, &v31, (uint64_t)&std::piecewise_construct, &v32)+ 6);
        uint64_t v26 = *a3;
        uint64_t v31 = *(uint64_t *)((char *)a1 + i - 8);
        uint64_t v32 = &v31;
        if (v25 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v26, &v31, (uint64_t)&std::piecewise_construct, &v32)+ 6))break; {
        uint64_t v19 = *v22;
        }
      }
      uint64_t v27 = (uint64_t *)((char *)a1 + i);
LABEL_15:
      uint64_t v28 = *v27;
      uint64_t *v27 = v20;
      uint64_t v4 = v29;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
      }
      int v14 = v30 + 1;
      if (v30 == 7) {
        return v13 + 1 == v29;
      }
    }
    uint64_t v12 = v13;
    v15 += 8;
    if (++v13 == v4) {
      return 1;
    }
  }
}

void sub_1B225BFE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>();
  }
  _Unwind_Resume(exception_object);
}

void *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(a1, a2, a3, a5);
  uint64_t v10 = *a5;
  uint64_t v23 = *a4;
  uint64_t v24 = &v23;
  int v11 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v10, &v23, (uint64_t)&std::piecewise_construct, &v24)+ 6);
  uint64_t v12 = *a5;
  uint64_t v23 = *a3;
  uint64_t v24 = &v23;
  BOOL result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v12, &v23, (uint64_t)&std::piecewise_construct, &v24);
  if (v11 < *((_DWORD *)result + 6))
  {
    uint64_t v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    uint64_t v15 = *a5;
    uint64_t v23 = *a3;
    uint64_t v24 = &v23;
    int v16 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v15, &v23, (uint64_t)&std::piecewise_construct, &v24)+ 6);
    uint64_t v17 = *a5;
    uint64_t v23 = *a2;
    uint64_t v24 = &v23;
    BOOL result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v17, &v23, (uint64_t)&std::piecewise_construct, &v24);
    if (v16 < *((_DWORD *)result + 6))
    {
      uint64_t v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      uint64_t v19 = *a5;
      uint64_t v23 = *a2;
      uint64_t v24 = &v23;
      int v20 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v19, &v23, (uint64_t)&std::piecewise_construct, &v24)+ 6);
      uint64_t v21 = *a5;
      uint64_t v23 = *a1;
      uint64_t v24 = &v23;
      BOOL result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v21, &v23, (uint64_t)&std::piecewise_construct, &v24);
      if (v20 < *((_DWORD *)result + 6))
      {
        uint64_t v22 = *a1;
        *a1 = *a2;
        *a2 = v22;
      }
    }
  }
  return result;
}

void sub_1B225C248(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40676EB28ALL);
  _Unwind_Resume(a1);
}

void fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B225C2F0(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Init(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "compact");
  std::string::append(&__str, "_");
  uint64_t v4 = fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type();
  int v5 = *(char *)(v4 + 23);
  if (v5 >= 0) {
    uint64_t v6 = (const std::string::value_type *)v4;
  }
  else {
    uint64_t v6 = *(const std::string::value_type **)v4;
  }
  if (v5 >= 0) {
    std::string::size_type v7 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    std::string::size_type v7 = *(void *)(v4 + 8);
  }
  std::string::append(&__str, v6, v7);
  uint64_t v8 = fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Type();
  int v9 = *(char *)(v8 + 23);
  if (v9 < 0)
  {
    if (*(void *)(v8 + 8) != 7) {
      goto LABEL_16;
    }
    uint64_t v8 = *(void *)v8;
  }
  else if (v9 != 7)
  {
    goto LABEL_16;
  }
  if (*(_DWORD *)v8 == 1886220131 && *(_DWORD *)(v8 + 3) == 1952670064)
  {
LABEL_23:
    std::string::operator=((std::string *)(a1 + 16), &__str);
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
    fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v15);
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
    fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v16);
    operator new();
  }
LABEL_16:
  std::string::append(&__str, "_");
  uint64_t v11 = fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Type();
  int v12 = *(char *)(v11 + 23);
  if (v12 >= 0) {
    int v13 = (const std::string::value_type *)v11;
  }
  else {
    int v13 = *(const std::string::value_type **)v11;
  }
  if (v12 >= 0) {
    std::string::size_type v14 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    std::string::size_type v14 = *(void *)(v11 + 8);
  }
  std::string::append(&__str, v13, v14);
  goto LABEL_23;
}

void sub_1B225C5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::DefaultCompactStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = -1;
  *(_DWORD *)(a1 + 64) = 1;
  *(unsigned char *)(a1 + 68) = 0;
  *(void *)(a1 + 56) = (*(int (**)(uint64_t))(*(void *)a2 + 24))(a2);
  unsigned int v15 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v13);
  int v4 = 0;
  while (v13)
  {
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
    uint64_t v6 = v13;
    if (v5)
    {
      if (v13) {
        (*(void (**)(void))(*(void *)v13 + 8))();
      }
LABEL_28:
      operator new[]();
    }
    ++*(void *)(a1 + 32);
    if (!v6) {
      goto LABEL_8;
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
LABEL_9:
    int v12 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 136))(a2, v7, __p);
    while (1)
    {
      while (!__p[0])
      {
        if (v12 >= __p[2]) {
          goto LABEL_19;
        }
        ++*(void *)(a1 + 48);
LABEL_16:
        ++v12;
      }
      int v8 = (*(uint64_t (**)(void *))(*(void *)__p[0] + 24))(__p[0]);
      int v9 = __p[0];
      if (v8) {
        break;
      }
      ++*(void *)(a1 + 48);
      if (!v9) {
        goto LABEL_16;
      }
      (*(void (**)(void *))(*(void *)v9 + 40))(v9);
    }
    if (__p[0])
    {
      (*(void (**)(void))(*(void *)__p[0] + 8))();
    }
    else
    {
LABEL_19:
      if (v11) {
        --*v11;
      }
    }
    LODWORD(__p[0]) = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v7);
    int v16 = 2139095040;
    if (*(float *)__p != INFINITY) {
      ++v4;
    }
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 32))(v13);
    }
    else {
      ++v15;
    }
  }
  if ((int)v15 >= v14) {
    goto LABEL_28;
  }
  ++*(void *)(a1 + 32);
LABEL_8:
  uint64_t v7 = v15;
  goto LABEL_9;
}

void sub_1B225CCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__emplace_multi<int &,quasar::VoiceCommandActiveSetCompilation::CommandSpec&>(uint64_t a1, _DWORD *a2, long long *a3)
{
  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__construct_node<int &,quasar::VoiceCommandActiveSetCompilation::CommandSpec&>(a1, a2, a3, (uint64_t)v9);
  int v4 = (uint64_t **)(a1 + 8);
  int v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    do
    {
      while (1)
      {
        int v4 = (uint64_t **)v5;
        if (*((_DWORD *)v9[0] + 8) >= *((_DWORD *)v5 + 8)) {
          break;
        }
        int v5 = (uint64_t *)*v5;
        uint64_t v6 = v4;
        if (!*v4) {
          goto LABEL_8;
        }
      }
      int v5 = (uint64_t *)v5[1];
    }
    while (v5);
    uint64_t v6 = v4 + 1;
  }
  else
  {
    uint64_t v6 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v4, v6, v9[0]);
  uint64_t v7 = v9[0];
  v9[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  return v7;
}

uint64_t std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__construct_node<int &,quasar::VoiceCommandActiveSetCompilation::CommandSpec&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  int v8 = operator new(0x88uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::pair[abi:ne180100]<int &,quasar::VoiceCommandActiveSetCompilation::CommandSpec&,0>((uint64_t)v8 + 32, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B225CEC8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::pair[abi:ne180100]<int &,quasar::VoiceCommandActiveSetCompilation::CommandSpec&,0>(uint64_t a1, _DWORD *a2, long long *a3)
{
  *(_DWORD *)a1 = *a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a3 + 6);
  if (*((char *)a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *((const std::string::value_type **)a3 + 4), *((void *)a3 + 5));
  }
  else
  {
    long long v6 = a3[2];
    *(void *)(a1 + 56) = *((void *)a3 + 6);
    *(_OWORD *)(a1 + 40) = v6;
  }
  std::unordered_set<std::string>::unordered_set(a1 + 64, (uint64_t)a3 + 56);
  return a1;
}

void sub_1B225CF88(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__emplace_multi<quasar::VoiceCommandActiveSetCompilation::CommandSpec&,quasar::VoiceCommandActiveSetCompilation::Suite&>(void *a1, long long *a2, long long *a3)
{
  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__construct_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec&,quasar::VoiceCommandActiveSetCompilation::Suite&>((uint64_t)a1, a2, a3, (uint64_t)v6);
  uint64_t inserted = std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__node_insert_multi(a1, v6[0]);
  v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_1B225D010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__construct_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec&,quasar::VoiceCommandActiveSetCompilation::Suite&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int v8 = (char *)operator new(0xB0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)int v8 = 0;
  *((void *)v8 + 1) = 0;
  std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>::pair[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::CommandSpec&,quasar::VoiceCommandActiveSetCompilation::Suite&,0>((std::string *)(v8 + 16), a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v10, (uint64_t)(v8 + 16));
  *((void *)v8 + 1) = *((int *)v8 + 10) + 571 * result + 326041;
  return result;
}

void sub_1B225D0C4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>::pair[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::CommandSpec&,quasar::VoiceCommandActiveSetCompilation::Suite&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v7 = a2[2];
    this[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 6);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v7;
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)a2 + 56);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    this[4].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  std::unordered_set<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::unordered_set((uint64_t)&this[5], (uint64_t)a3 + 24);
  return this;
}

void sub_1B225D1B4(_Unwind_Exception *a1)
{
  quasar::VoiceCommandActiveSetCompilation::CommandSpec::~CommandSpec(v1);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  long long v6 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v10, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    long long v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_DWORD *)v7 + 12) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_1B225D738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v41 - 121) < 0) {
    operator delete(*(void **)(v41 - 144));
  }

  sdapi::SdapiUtil::LocaleInfo::~LocaleInfo(&a29);
  std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::destroy(v41 - 120, *(void **)(v41 - 112));
  if (a2 == 1)
  {
    uint64_t v44 = (EARLogger *)__cxa_begin_catch(a1);
    int v45 = EARLogger::QuasarOSLogger(v44);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
      -[_EARFormatter initWithLanguage:withSdapiConfig:quasarConfig:]();
    }

    __cxa_end_catch();
    JUMPOUT(0x1B225D704);
  }

  _Unwind_Resume(a1);
}

void sub_1B225DCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52)
{
  if (a2 == 1)
  {
    uint64_t v58 = (EARLogger *)__cxa_begin_catch(a1);
    uint64_t v59 = EARLogger::QuasarOSLogger(v58);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
      -[_EARFormatter initWithQuasarConfig:overrideConfigFiles:supportEmojiRecognition:language:skipPathsExistCheck:]();
    }

    __cxa_end_catch();
    JUMPOUT(0x1B225DB80);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a52);
  _Block_object_dispose((const void *)(v56 - 152), 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__13(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_1B225DFA8(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a15);
  if (a14 < 0) {
    operator delete(__pa);
  }

  _Unwind_Resume(__p);
}

void sub_1B225E054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B225E1C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B225E408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }

  if (a2 == 1)
  {
    uint64_t v41 = (EARLogger *)__cxa_begin_catch(a1);
    uint64_t v42 = EARLogger::QuasarOSLogger(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
      -[_EARFormatter initNcsWithModelRoot:]();
    }

    __cxa_end_catch();
    JUMPOUT(0x1B225E3E0);
  }

  _Unwind_Resume(a1);
}

void sub_1B225E67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  _Unwind_Resume(a1);
}

void sub_1B225ECE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1B225EF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B225F15C(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__pa);
  }

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

void sub_1B226004C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  a63 = &a39;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);

  _Block_object_dispose(&a48, 8);
  if (__p)
  {
    a55 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__48(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__49(uint64_t a1)
{
}

void sub_1B22603E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B22604E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2260518()
{
}

void sub_1B2260520()
{
}

void sub_1B22606F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1B2260CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B2261400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::string __p = &a23;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a26;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  std::string __p = &a65;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a68;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (void *)(v68 - 256);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1B22615DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2261790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2261AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43)
{
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  _Unwind_Resume(a1);
}

void sub_1B2261CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::string __p = &a15;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a15 = &a18;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a18 = v20 - 56;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);

  _Unwind_Resume(a1);
}

void sub_1B2261FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, char ***__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char **a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  std::string __p = &a21;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a21 = &a24;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a24 = &a27;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);

  _Unwind_Resume(a1);
}

void sub_1B22624FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a17 = (void **)&a67;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a17);

  _Unwind_Resume(a1);
}

void sub_1B2262624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2262A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t ****a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t ***a38,uint64_t a39,uint64_t a40,uint64_t **a41,uint64_t a42,uint64_t a43,uint64_t *a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  a30 = &a38;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a38 = &a41;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  a41 = &a44;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  a44 = &a47;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);
  a47 = v53 - 232;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  *(void *)(v53 - 232) = v53 - 208;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 232));
  *(void *)(v53 - 208) = v53 - 184;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 208));
  *(void *)(v53 - 184) = v53 - 160;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 184));
  *(void *)(v53 - 160) = v53 - 136;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 160));
  *(void *)(v53 - 136) = v53 - 112;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 136));

  _Unwind_Resume(a1);
}

void sub_1B2262EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::string __p = (char *)(v28 - 128);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a25;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a28;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1B22630E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _Unwind_Resume(a1);
}

void sub_1B22635E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, char ***__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char **a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  std::string __p = &a19;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a19 = &a23;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a23 = (char *)(v31 - 128);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a27;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a30;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);

  _Unwind_Resume(a1);
}

void sub_1B22638F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char **__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  *(void *)(v24 - 56) = &a10;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 56));
  std::string __p = &a19;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a19 = &a22;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);

  _Unwind_Resume(a1);
}

void sub_1B2263C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::TennesseeTokenizer::createTennesseeTokenizer(uint64_t a1, __int16 a2)
{
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v2 = v3;
  uint64_t v3[2] = 1;
  int v4 = 1024;
  __int16 v5 = 0;
  char v6 = 0;
  int v7 = 5489;
  if ((a2 & 0xFF00) != 0) {
    HIBYTE(v5) = a2;
  }
  quasar::tennessee::TennesseeTokenizer::createTennesseeTokenizer();
}

void sub_1B2263D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void quasar::tennessee::TennesseeTokenizer::createTennesseeTokenizer()
{
}

void sub_1B2263E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    quasar::tennessee::TennesseeTokenizer::createTennesseeTokenizer(a11);
  }
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::createTennesseeOptions(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 24) = 1;
  *(_DWORD *)(a2 + 32) = 1024;
  *(_WORD *)(a2 + 36) = 0;
  *(unsigned char *)(a2 + 38) = 0;
  *(_DWORD *)(a2 + 40) = 5489;
  *(_DWORD *)(a2 + 40) = time(0);
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc.tennessee.rng-seed");
  quasar::SystemConfig::hasParam(a1, (uint64_t)__p);
}

void sub_1B2263FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v15, *(void **)(v15 + 8));
  _Unwind_Resume(a1);
}

void quasar::tennessee::getTennesseePath(quasar::tennessee *this, const quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v3, "text-proc.tennessee.model-directory");
  quasar::SystemConfig::hasParam((uint64_t)this, (uint64_t)&v3);
}

void sub_1B22641D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v34 - 64) = &unk_1F0A51998;
  if (*(char *)(v34 - 33) < 0) {
    operator delete(*(void **)(v34 - 56));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::TennesseeTokenizer::createTennesseeTokenizer(quasar::tennessee *a1, const quasar::SystemConfig *a2)
{
}

void sub_1B2264338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::TennesseeTokenizer::createTennesseeTokenizer(uint64_t a1)
{
  quasar::tennessee::createTennesseeOptions(a1, (uint64_t)&v1);
}

void sub_1B22643E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

BOOL quasar::tennessee::TennesseeTokenizer::tokenize(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  (*(void (**)(void, uint64_t, uint64_t *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a2, &v22);
  uint64_t v4 = v22;
  uint64_t v5 = v23;
  if (v22 == v23)
  {
    BOOL v14 = 0;
  }
  else
  {
    do
    {
      uint64_t v6 = *(void *)(v4 + 8);
      if (v6)
      {
        uint64_t v19 = 0;
        unint64_t v20 = 0;
        uint64_t v18 = 0;
        int v7 = *(const std::string **)(v4 + 16);
        uint64_t v8 = 24 * v6;
        do
        {
          memset(&v16, 0, sizeof(v16));
          std::string::operator=(&v16, v7);
          int v17 = 0;
          int v9 = v19;
          if ((unint64_t)v19 >= v20)
          {
            uint64_t v11 = (std::string *)std::vector<quasar::TextTokenizer::Token>::__push_back_slow_path<quasar::TextTokenizer::Token const&>((uint64_t *)&v18, (long long *)&v16);
          }
          else
          {
            if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v19, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v10 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
              v19->__r_.__value_.__r.__words[2] = v16.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
            }
            LODWORD(v9[1].__r_.__value_.__l.__data_) = v17;
            uint64_t v11 = (std::string *)((char *)v9 + 32);
          }
          uint64_t v19 = v11;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
          ++v7;
          v8 -= 24;
        }
        while (v8);
        int v21 = 0;
        unint64_t v12 = a3[1];
        if (v12 >= a3[2])
        {
          uint64_t v13 = std::vector<quasar::TextTokenizer::TokenString>::__push_back_slow_path<quasar::TextTokenizer::TokenString const&>(a3, (uint64_t)&v18);
        }
        else
        {
          std::vector<quasar::TextTokenizer::TokenString>::__construct_one_at_end[abi:ne180100]<quasar::TextTokenizer::TokenString const&>((uint64_t)a3, (uint64_t)&v18);
          uint64_t v13 = v12 + 32;
        }
        a3[1] = v13;
        v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
      }
      v4 += 24;
    }
    while (v4 != v5);
    BOOL v14 = *a3 != a3[1];
  }
  uint64_t v18 = (void **)&v22;
  std::vector<quasar::tennessee::ImmutableVector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v18);
  return v14;
}

void sub_1B2264594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  a17 = &a21;
  std::vector<quasar::tennessee::ImmutableVector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void quasar::tennessee::TennesseeTokenizer::~TennesseeTokenizer(quasar::tennessee::TennesseeTokenizer *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F0A59D20;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F0A59D20;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::OnlineTransducerGraphSearchDecoder(uint64_t a1, long long *a2)
{
  void v8[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A58760;
  *(_DWORD *)(v3 + 448) = 0x40000000;
  *(unsigned char *)(v3 + 452) = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 456), "");
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar34OnlineTransducerGraphSearchDecoder23LmeCreationDependenciesENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((void *)(a1 + 480));
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 1065353216;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 568) = 1065353216;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 576) = a1 + 584;
  *(void *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_DWORD *)(a1 + 800) = 1065353216;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(void *)(a1 + 808) = a1 + 816;
  *(void *)(a1 + 832) = a1 + 840;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(void *)(a1 + 1248) = 0;
  *(void *)(a1 + 1256) = 0x7FFFFFFF41800000;
  *(void *)(a1 + 1264) = 0x4120000000000000;
  *(_DWORD *)(a1 + 1272) = 25;
  *(_OWORD *)(a1 + 1276) = xmmword_1B25A3A60;
  *(_DWORD *)(a1 + 1292) = 1065353216;
  *(void *)(a1 + 1296) = 0x3A8000003DCCCCCDLL;
  *(void *)(a1 + 1304) = -1;
  *(void *)(a1 + 1312) = -1;
  *(void *)(a1 + 1320) = 0x7F7FFFFF3F000000;
  *(_OWORD *)(a1 + 1328) = xmmword_1B25A3A70;
  *(void *)(a1 + 1344) = -4282384384;
  *(unsigned char *)(a1 + 1352) = 0;
  *(void *)(a1 + 1356) = 0x32000003E8;
  *(_DWORD *)(a1 + 1364) = 1065353216;
  *(unsigned char *)(a1 + 1368) = 0;
  *(void *)(a1 + 1372) = 0x1E000000FALL;
  *(_OWORD *)(a1 + 1380) = xmmword_1B25A2F30;
  *(void *)(a1 + 1396) = 0x3F8000003F800000;
  *(unsigned char *)(a1 + 1404) = 0;
  *(_DWORD *)(a1 + 1408) = 4;
  *(_OWORD *)(a1 + 1416) = 0u;
  uint64_t v4 = (char *)operator new(0xA8uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = &unk_1F0A60678;
  *((void *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(void *)(a1 + 1432) = v4 + 24;
  *(void *)(a1 + 1440) = v4;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_DWORD *)(a1 + 1464) = -1;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1644) = 0u;
  *(_OWORD *)(a1 + 1660) = 0u;
  *(_OWORD *)(a1 + 1612) = 0u;
  *(_OWORD *)(a1 + 1628) = 0u;
  *(_OWORD *)(a1 + 1580) = 0u;
  *(_OWORD *)(a1 + 1596) = 0u;
  *(_OWORD *)(a1 + 1548) = 0u;
  *(_OWORD *)(a1 + 1564) = 0u;
  *(_OWORD *)(a1 + 1516) = 0u;
  *(_OWORD *)(a1 + 1532) = 0u;
  *(_OWORD *)(a1 + 1484) = 0u;
  *(_OWORD *)(a1 + 1500) = 0u;
  *(_OWORD *)(a1 + 1468) = 0u;
  *(void *)(a1 + 1792) = 0;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_DWORD *)(a1 + 1800) = 1065353216;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(void *)(a1 + 1856) = 0;
  *(_DWORD *)(a1 + 1864) = 1065353216;
  *(void *)(a1 + 1872) = 0;
  std::string::basic_string[abi:ne180100]<0>(v7, "<?>");
  std::string::basic_string[abi:ne180100]<0>(v8, "<eps>");
  std::unordered_set<std::string>::unordered_set(a1 + 1896, v7, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v8[i + 2]) < 0) {
      operator delete(*(void **)&v7[i * 8 + 24]);
    }
  }
  *(void *)(a1 + 1992) = 0;
  *(void *)(a1 + 1984) = 0;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(void *)(a1 + 1976) = a1 + 1984;
  *(unsigned char *)(a1 + 2125) = 0;
  *(unsigned char *)(a1 + 57) = 0;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(void *)(a1 + 2112) = 0;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(void *)(a1 + 2256) = 0;
  return a1;
}

void sub_1B2264AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v25 = 0;
  while (1)
  {
    if (*(char *)(v24 + v25 + 47) < 0) {
      operator delete(*(void **)(v24 + v25 + 24));
    }
    v25 -= 24;
    if (v25 == -48)
    {
      kaldi::quasar::DynamicClassTagDict::~DynamicClassTagDict((kaldi::quasar::DynamicClassTagDict *)(v17 + 1768));
      if (*(char *)(v17 + 1767) < 0) {
        operator delete(*(void **)(v17 + 1744));
      }
      if (*(char *)(v17 + 1743) < 0) {
        operator delete(*(void **)(v17 + 1720));
      }
      if (*(char *)(v17 + 1719) < 0) {
        operator delete(*(void **)(v17 + 1696));
      }
      if (*(char *)(v17 + 1687) < 0) {
        operator delete(*(void **)(v17 + 1664));
      }
      if (*(char *)(v17 + 1663) < 0) {
        operator delete(*(void **)(v17 + 1640));
      }
      if (*(char *)(v17 + 1639) < 0) {
        operator delete(*(void **)(v17 + 1616));
      }
      if (*(char *)(v17 + 1615) < 0) {
        operator delete(*(void **)(v17 + 1592));
      }
      if (*(char *)(v17 + 1591) < 0) {
        operator delete(*(void **)(v17 + 1568));
      }
      if (*(char *)(v17 + 1567) < 0) {
        operator delete(*(void **)(v17 + 1544));
      }
      if (*(char *)(v17 + 1543) < 0) {
        operator delete(*(void **)(v17 + 1520));
      }
      if (*(char *)(v17 + 1519) < 0) {
        operator delete(*(void **)(v17 + 1496));
      }
      if (*(char *)(v17 + 1495) < 0) {
        operator delete(*(void **)(v17 + 1472));
      }
      uint64_t v26 = *(std::__shared_weak_count **)(v17 + 1456);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      uint64_t v27 = *(std::__shared_weak_count **)(v17 + 1440);
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      uint64_t v28 = *(void *)(v17 + 1424);
      *(void *)(v17 + 1424) = 0;
      if (v28) {
        MEMORY[0x1B3EA8670](v28, 0x1000C408195852FLL);
      }
      uint64_t v29 = *v23;
      *uint64_t v23 = 0;
      if (v29) {
        MEMORY[0x1B3EA8670](v29, 0x1000C40605AC02ELL);
      }
      std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)(v17 + 1248), 0);
      std::unique_ptr<kaldi::quasar::CEJointPredictorNet>::reset[abi:ne180100]((kaldi::quasar::CEJointPredictorNet **)(v17 + 1240), 0);
      std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)(v17 + 1232), 0);
      std::unique_ptr<kaldi::quasar::CEAcousticEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CEAcousticEncoderNet **)(v17 + 1224), 0);
      if (*(char *)(v17 + 1223) < 0) {
        operator delete(*(void **)(v17 + 1200));
      }
      if (*(char *)(v17 + 1199) < 0) {
        operator delete(*(void **)(v17 + 1176));
      }
      if (*(char *)(v17 + 1175) < 0) {
        operator delete(*(void **)(v17 + 1152));
      }
      if (*(char *)(v17 + 1151) < 0) {
        operator delete(*(void **)(v17 + 1128));
      }
      if (*(char *)(v17 + 1127) < 0) {
        operator delete(*(void **)(v17 + 1104));
      }
      if (*(char *)(v17 + 1103) < 0) {
        operator delete(*(void **)(v17 + 1080));
      }
      if (*(char *)(v17 + 1079) < 0) {
        operator delete(*(void **)(v17 + 1056));
      }
      quasar::OnlineTransducerGraphSearchDecoder::DecoderCreationDependencies::~DecoderCreationDependencies((quasar::OnlineTransducerGraphSearchDecoder::DecoderCreationDependencies *)(v17 + 896));
      int v30 = *(std::__shared_weak_count **)(v17 + 864);
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      std::__tree<int>::destroy(v21, *(void **)(v17 + 840));
      std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v17 + 808, *(void **)(v17 + 816));
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v17 + 768);
      if (*(char *)(v17 + 767) < 0) {
        operator delete(*(void **)(v17 + 744));
      }
      if (*(char *)(v17 + 743) < 0) {
        operator delete(*(void **)(v17 + 720));
      }
      if (*(char *)(v17 + 719) < 0) {
        operator delete(*(void **)(v17 + 696));
      }
      if (*(char *)(v17 + 695) < 0) {
        operator delete(*(void **)(v17 + 672));
      }
      if (*(char *)(v17 + 671) < 0) {
        operator delete(*(void **)(v17 + 648));
      }
      if (*(char *)(v17 + 647) < 0) {
        operator delete(*(void **)(v17 + 624));
      }
      if (*(char *)(v17 + 623) < 0) {
        operator delete(*v22);
      }
      std::__tree<std::string>::destroy(v20, *(char **)(v17 + 584));
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v19);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v17 + 496);
      uint64_t v31 = *(std::__shared_weak_count **)(v17 + 488);
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      if (*(char *)(v17 + 479) < 0) {
        operator delete(*v18);
      }
      quasar::Decoder::~Decoder((quasar::Decoder *)v17);
      _Unwind_Resume(a1);
    }
  }
}

void quasar::OnlineTransducerGraphSearchDecoder::~OnlineTransducerGraphSearchDecoder(quasar::OnlineTransducerGraphSearchDecoder *this)
{
  *(void *)this = &unk_1F0A58760;
  uint64_t v2 = (void *)*((void *)this + 280);
  if (v2)
  {
    *((void *)this + 281) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 279);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 277);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 275);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 273);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 2175) < 0) {
    operator delete(*((void **)this + 269));
  }
  if (*((char *)this + 2151) < 0) {
    operator delete(*((void **)this + 266));
  }
  uint64_t v20 = (void **)((char *)this + 2096);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v20);
  int v7 = (void *)*((void *)this + 259);
  if (v7)
  {
    *((void *)this + 260) = v7;
    operator delete(v7);
  }
  uint64_t v20 = (void **)((char *)this + 2048);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v8 = (void *)*((void *)this + 253);
  if (v8)
  {
    *((void *)this + 254) = v8;
    operator delete(v8);
  }
  int v9 = (void *)*((void *)this + 250);
  if (v9)
  {
    *((void *)this + 251) = v9;
    operator delete(v9);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 1976, *((void **)this + 248));
  long long v10 = (std::__shared_weak_count *)*((void *)this + 246);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 244);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 1896);
  uint64_t v12 = *((void *)this + 234);
  *((void *)this + 234) = 0;
  if (v12) {
    MEMORY[0x1B3EA8630](v12, 0x1000C8052888210);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 1832);
  uint64_t v13 = (void *)*((void *)this + 226);
  if (v13)
  {
    *((void *)this + 227) = v13;
    operator delete(v13);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 1768);
  if (*((char *)this + 1767) < 0) {
    operator delete(*((void **)this + 218));
  }
  if (*((char *)this + 1743) < 0) {
    operator delete(*((void **)this + 215));
  }
  if (*((char *)this + 1719) < 0) {
    operator delete(*((void **)this + 212));
  }
  if (*((char *)this + 1687) < 0) {
    operator delete(*((void **)this + 208));
  }
  if (*((char *)this + 1663) < 0) {
    operator delete(*((void **)this + 205));
  }
  if (*((char *)this + 1639) < 0) {
    operator delete(*((void **)this + 202));
  }
  if (*((char *)this + 1615) < 0) {
    operator delete(*((void **)this + 199));
  }
  if (*((char *)this + 1591) < 0) {
    operator delete(*((void **)this + 196));
  }
  if (*((char *)this + 1567) < 0) {
    operator delete(*((void **)this + 193));
  }
  if (*((char *)this + 1543) < 0) {
    operator delete(*((void **)this + 190));
  }
  if (*((char *)this + 1519) < 0) {
    operator delete(*((void **)this + 187));
  }
  if (*((char *)this + 1495) < 0) {
    operator delete(*((void **)this + 184));
  }
  BOOL v14 = (std::__shared_weak_count *)*((void *)this + 182);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 180);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v16 = *((void *)this + 178);
  *((void *)this + 178) = 0;
  if (v16) {
    MEMORY[0x1B3EA8670](v16, 0x1000C408195852FLL);
  }
  uint64_t v17 = *((void *)this + 177);
  *((void *)this + 177) = 0;
  if (v17) {
    MEMORY[0x1B3EA8670](v17, 0x1000C40605AC02ELL);
  }
  std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)this + 156, 0);
  std::unique_ptr<kaldi::quasar::CEJointPredictorNet>::reset[abi:ne180100]((kaldi::quasar::CEJointPredictorNet **)this + 155, 0);
  std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)this + 154, 0);
  std::unique_ptr<kaldi::quasar::CEAcousticEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CEAcousticEncoderNet **)this + 153, 0);
  if (*((char *)this + 1223) < 0) {
    operator delete(*((void **)this + 150));
  }
  if (*((char *)this + 1199) < 0) {
    operator delete(*((void **)this + 147));
  }
  if (*((char *)this + 1175) < 0) {
    operator delete(*((void **)this + 144));
  }
  if (*((char *)this + 1151) < 0) {
    operator delete(*((void **)this + 141));
  }
  if (*((char *)this + 1127) < 0) {
    operator delete(*((void **)this + 138));
  }
  if (*((char *)this + 1103) < 0) {
    operator delete(*((void **)this + 135));
  }
  if (*((char *)this + 1079) < 0) {
    operator delete(*((void **)this + 132));
  }
  quasar::OnlineTransducerGraphSearchDecoder::DecoderCreationDependencies::~DecoderCreationDependencies((quasar::OnlineTransducerGraphSearchDecoder *)((char *)this + 896));
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 108);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  std::__tree<int>::destroy((uint64_t)this + 832, *((void **)this + 105));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 808, *((void **)this + 102));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 768);
  if (*((char *)this + 767) < 0) {
    operator delete(*((void **)this + 93));
  }
  if (*((char *)this + 743) < 0) {
    operator delete(*((void **)this + 90));
  }
  if (*((char *)this + 719) < 0) {
    operator delete(*((void **)this + 87));
  }
  if (*((char *)this + 695) < 0) {
    operator delete(*((void **)this + 84));
  }
  if (*((char *)this + 671) < 0) {
    operator delete(*((void **)this + 81));
  }
  if (*((char *)this + 647) < 0) {
    operator delete(*((void **)this + 78));
  }
  if (*((char *)this + 623) < 0) {
    operator delete(*((void **)this + 75));
  }
  std::__tree<std::string>::destroy((uint64_t)this + 576, *((char **)this + 73));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 536);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 496);
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (*((char *)this + 479) < 0) {
    operator delete(*((void **)this + 57));
  }
  quasar::Decoder::~Decoder(this);
}

{
  uint64_t vars8;

  quasar::OnlineTransducerGraphSearchDecoder::~OnlineTransducerGraphSearchDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "transducer-graph-search-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 250, 0, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  kaldi::quasar::AutoRegressiveGraphSearchDecoderConfig::Register((uint64_t)(this + 157), (uint64_t)a2);
  kaldi::EndPointerOptions::Register((uint64_t)(this + 169), (uint64_t)a2);
  kaldi::UtteranceDetectorOptions::Register((uint64_t)(this + 171), (uint64_t)a2);
  kaldi::quasar::TransducerAutoRegressiveDecodableOptions::Register((uint64_t)this + 1380, (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[179], a2, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "acoustic-encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Transducer acoustic encoder (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 132), (uint64_t)v5, 1, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "label-encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Transducer label encoder (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 135), (uint64_t)v5, 1, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "joint-predictor-model-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Transducer joint predictor (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 138), (uint64_t)v5, 1, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-model-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Subword neural network language model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 141), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "token-syms-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Token symbol table file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 144), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "unk-word-symbol");
  std::string::basic_string[abi:ne180100]<0>(v5, "Unknown word symbol");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 147), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "token-word-start-symbol");
  std::string::basic_string[abi:ne180100]<0>(v5, "First token word symbol in word symbol table");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 150), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "chunk-size");
  std::string::basic_string[abi:ne180100]<0>(v5, "Number of acoustic encoder output frames to compute per chunk.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 176), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "print-best-path-lattice");
  std::string::basic_string[abi:ne180100]<0>(v5, "Print best path lattice for debugging");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 2125, (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "reference-rspecifier");
  std::string::basic_string[abi:ne180100]<0>(v5, "Reference transcripts for debugging with oracle decoding");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 266), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "phonetic-reference-rspecifier");
  std::string::basic_string[abi:ne180100]<0>(v5, "Phonetic reference transcripts for debugging with oracle decoding");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 269), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "fst-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "HCLG FST filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 184), (uint64_t)v5, 1, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "g-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Grammar FST filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 190), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "inv-g-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Inverted Grammar FST filename (overrides uninverted)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 187), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-fst-file-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of BigGrammar FST filename, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 193), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-fst-weight-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "the interpolation weights for the FST LMs, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 202), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "max-total-extra-weight");
  std::string::basic_string[abi:ne180100]<0>(v5, "Max first pass weight for limiting total weight of all extra LMs in the first pass - all-app LM and possibly one more app specific LM");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 265), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-nnet-file-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of BigGrammar NNLM filename, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 196), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "nnet-map-file-ext");
  std::string::basic_string[abi:ne180100]<0>(v5, "the file extension name of the corresponding NNLM word map file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 199), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-nnet-weight-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "the interpolation weights for the NNLMs, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 205), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-nce-norm-factor-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "the normalization factor for NCE trained NNLMs, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 208), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rnnlm-max-context-size");
  std::string::basic_string[abi:ne180100]<0>(v5, "maximal context for RNN style LM, no-op for other style of LMs");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 235), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "enable-state-access-recording");
  std::string::basic_string[abi:ne180100]<0>(v5, "Record which states in each FST are accessed, to allow for efficient reordering");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 2124, (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rejected-left-context-tokens");
  std::string::basic_string[abi:ne180100]<0>(v5, "List of tokens that don't work with left context. The decoder will reset the left context when it encounters one of these tokens.");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 237), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(v5, "Map FST/NNLM models into memory (requires aligned models)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1884, (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "inter-utterance-left-context-max-size");
  std::string::basic_string[abi:ne180100]<0>(v5, "Maximum size for inter-utterance left context");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 242), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "cache-size");
  std::string::basic_string[abi:ne180100]<0>(v5, "Cache size for lazy replace operation");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 56), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "enable-lme");
  std::string::basic_string[abi:ne180100]<0>(v5, "Enable LME");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 452, (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "supported-lme-template-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "Comma-delimited LME template names");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 57), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "classLM-fst-file-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of classLM FST filenames, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 75), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "classLM-template-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of classLM templates, in the same order as the classLM-fst-file-list");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 78), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "classLM-nnlm-file-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of class Nnlm filenames, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 87), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "classLM-nnlm-template-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of classNNLM templates");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 81), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "classLM-nnlm-scale-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of classNNLM scales");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 84), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "classLM-start-name-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of classLM start names, in the same order as the classLM-fst-file-list");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 90), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "classLM-end-name-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of classLM end names, in the same order as the classLM-fst-file-list");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 93), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic-class-lm-emission");
  std::string::basic_string[abi:ne180100]<0>(v5, "If true, enable dynamic classLm emission");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 211), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic-class-lm-tag-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "THe dynamic class tags list separated by comma");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 212), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic-class-lm-smallG-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "The prior for correspoding classLm tags. Each line should contain two columns, tag and log prob");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 218), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "static-class-lm-tag-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "The static tags lit separated by comma. Add this will improve dynamic emission's latency");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 215), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  MEMORY[0x1B3EA7B20](this + 199, "wordmap");
  *((unsigned char *)this + 2124) = 0;
  *((unsigned char *)this + 1884) = 0;
  *((_DWORD *)this + 470) = 7;
  *((unsigned char *)this + 1688) = 0;
  *((_DWORD *)this + 530) = 1065353216;
  *((_DWORD *)this + 484) = 4;
  MEMORY[0x1B3EA7B20](this + 75, "");
  return MEMORY[0x1B3EA7B20](this + 78, "");
}

void sub_1B2266474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoderConfig::Register(uint64_t a1, uint64_t a2)
{
  fst::DeterminizeLatticePrunedOptions::Register(a1 + 44, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoding beam.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoder max active states.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoder minimum #active states.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lattice-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Lattice generation beam");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "prune-interval");
  std::string::basic_string[abi:ne180100]<0>(__p, "Interval (in frames) at which to prune tokens");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 16, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "beam-delta");
  std::string::basic_string[abi:ne180100]<0>(__p, "Increment used in decoding-- this parameter is obscure and relates to a speedup in the way the max-active constraint is applied.  Larger is more accurate.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 20, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "hash-ratio");
  std::string::basic_string[abi:ne180100]<0>(__p, "Setting used in decoder to control hash behavior");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 24, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "word-ins-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word insertion penalty applied to each word");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 28, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "graph-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for graph scores");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 32, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "acoustic-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic scores");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 36, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "small-lm-prune-beam-diff");
  std::string::basic_string[abi:ne180100]<0>(__p, "Pruning threshold for small LM before checking with big LM; smaller prunes more aggressively");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 68, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-steps");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max number of decoder steps. Inactive if negative (default).");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 80, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-total-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max total allocated tokens at any time.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 84, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-total-forward-links");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max total allocated forward links at any time.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 88, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B2266C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineTransducerGraphSearchDecoder::finishInit(quasar::OnlineTransducerGraphSearchDecoder *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B2268CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(&a35);
  if (STACK[0x218]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x218]);
  }
  std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v35 - 200));
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  JUMPOUT(0x1B2268EA4);
}

void sub_1B2268CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(&a35);
  if (STACK[0x218]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x218]);
  }
  std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v35 - 168));
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  JUMPOUT(0x1B2268EB4);
}

void sub_1B2268D1C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B2268ED8);
}

void sub_1B2268D38()
{
  std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v0 - 232));
  JUMPOUT(0x1B2268D58);
}

void sub_1B2268DA8()
{
}

void sub_1B2268DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  STACK[0x230] = (unint64_t)&a35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  JUMPOUT(0x1B2268DE8);
}

void sub_1B2268DF0()
{
}

void sub_1B2268E0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  JUMPOUT(0x1B2268E74);
}

void sub_1B2268E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_1B2268E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  STACK[0x230] = (unint64_t)&a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  STACK[0x230] = (unint64_t)&a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v28 - 136));
  *(void *)(v28 - 136) = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 136));
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::loadDynamicClassTagDict(quasar::OnlineTransducerGraphSearchDecoder *this, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](this, a2);
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  memset(v105, 0, sizeof(v105));
  int v106 = 1065353216;
  memset(v103, 0, sizeof(v103));
  int v104 = 1065353216;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  kaldi::SplitStringToVector((const std::string *)(v2 + 1696), ",", 1, (uint64_t)&v100);
  kaldi::SplitStringToVector((const std::string *)(v2 + 1720), ",", 1, (uint64_t)&v97);
  memset(v95, 0, sizeof(v95));
  int v96 = 1065353216;
  if (*(char *)(v2 + 1767) < 0)
  {
    if (*(void *)(v2 + 1752)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(v2 + 1767))
  {
LABEL_3:
    kaldi::Input::Input(v94, v2 + 1744, 0);
    uint64_t v3 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v94);
    uint64_t v4 = *v3;
    if (*(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32))
    {
      long long v122 = 0u;
      long long v123 = 0u;
      long long v120 = 0u;
      long long v121 = 0u;
      long long v118 = 0u;
      long long v119 = 0u;
      long long v116 = 0u;
      long long v117 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long __s = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
      int v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"SymbolTable::ReadText: Can't open dyanamic classlm tag file ", 60);
      int v68 = *(char *)(v2 + 1767);
      if (v68 >= 0) {
        uint64_t v69 = v2 + 1744;
      }
      else {
        uint64_t v69 = *(void *)(v2 + 1744);
      }
      if (v68 >= 0) {
        uint64_t v70 = *(unsigned __int8 *)(v2 + 1767);
      }
      else {
        uint64_t v70 = *(void *)(v2 + 1752);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v69, v70);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__s);
    }
    char v5 = (std::locale::__imp *)*MEMORY[0x1E4FBA410];
    char v6 = *(std::locale::__imp **)(MEMORY[0x1E4FBA410] + 24);
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(v4 - 24)));
      char v7 = std::locale::use_facet(v77, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
      std::locale::~locale(v77);
      char v8 = (void *)std::istream::getline();
      if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
        break;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&__s);
      std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)v77, &__p, 8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      memset(&__p, 0, sizeof(__p));
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v77, (uint64_t)&__p);
      int v9 = quasar::QsrTextSymbolTable::Find(*(void *)(v2 + 1432), (uint64_t)&__p);
      int v75 = 0;
      MEMORY[0x1B3EA7DC0](v77, &v75);
      int v10 = v75;
      int v74 = v9;
      int v71 = &v74;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v95, &v74, (uint64_t)&std::piecewise_construct, (_DWORD **)&v71)+ 5) = v10;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v77[0].__locale_ = v5;
      *(std::locale::__imp **)((char *)&v77[0].__locale_ + *((void *)v5 - 3)) = v6;
      *(void *)&long long v78 = MEMORY[0x1E4FBA470] + 16;
      if (SBYTE7(v83) < 0) {
        operator delete((void *)v82);
      }
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x1B3EA8520]((char *)&v84 + 8);
      uint64_t v4 = *v3;
    }
    if (v101 == v100)
    {
LABEL_91:
      if (v98 != v97)
      {
        uint64_t v45 = 0;
        if ((unint64_t)((v98 - v97) / 24) <= 1) {
          uint64_t v46 = 1;
        }
        else {
          uint64_t v46 = (v98 - v97) / 24;
        }
        do
        {
          uint64_t v47 = quasar::QsrTextSymbolTable::Find(*(void *)(v2 + 1432), v97 + v45);
          if (v47 == -1)
          {
            long long v92 = 0u;
            long long v93 = 0u;
            long long v90 = 0u;
            long long v91 = 0u;
            long long v88 = 0u;
            long long v89 = 0u;
            long long v86 = 0u;
            long long v87 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            long long v82 = 0u;
            long long v83 = 0u;
            *(_OWORD *)int v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            *(_OWORD *)&v77[0].__locale_ = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
            uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Could not find \"", 16);
            int v49 = *(char *)(v100 + v45 + 23);
            if (v49 >= 0) {
              uint64_t v50 = v100 + v45;
            }
            else {
              uint64_t v50 = *(void *)(v100 + v45);
            }
            if (v49 >= 0) {
              uint64_t v51 = *(unsigned __int8 *)(v100 + v45 + 23);
            }
            else {
              uint64_t v51 = *(void *)(v100 + v45 + 8);
            }
            uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v50, v51);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"\" in base symbol table", 22);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
          }
          LODWORD(v77[0].__locale_) = v47;
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v103, (int *)v77, v77);
          v45 += 24;
          --v46;
        }
        while (v46);
      }
      kaldi::quasar::DynamicClassTagDict::DynamicClassTagDict((uint64_t)v77, (uint64_t)v105, (uint64_t)v95, (uint64_t)v103);
    }
    uint64_t v11 = 0;
    if ((unint64_t)((v101 - v100) / 24) <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = (v101 - v100) / 24;
    }
    while (1)
    {
      uint64_t v13 = quasar::QsrTextSymbolTable::Find(*(void *)(v2 + 1432), v100 + 24 * v11);
      if (v13 == -1)
      {
        long long v92 = 0u;
        long long v93 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        *(_OWORD *)int v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        *(_OWORD *)&v77[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
        uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Could not find \"", 16);
        uint64_t v54 = v100 + 24 * v11;
        int v55 = *(char *)(v54 + 23);
        if (v55 >= 0) {
          uint64_t v56 = v100 + 24 * v11;
        }
        else {
          uint64_t v56 = *(void *)v54;
        }
        if (v55 >= 0) {
          uint64_t v57 = *(unsigned __int8 *)(v54 + 23);
        }
        else {
          uint64_t v57 = *(void *)(v54 + 8);
        }
        uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v56, v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
      }
      BOOL v14 = (const void **)(v100 + 24 * v11);
      if (*((char *)v14 + 23) >= 0) {
        size_t v15 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v15 = (size_t)v14[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v15 + 6);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v15)
      {
        if (*((char *)v14 + 23) >= 0) {
          uint64_t v17 = v14;
        }
        else {
          uint64_t v17 = *v14;
        }
        memmove(p_p, v17, v15);
      }
      strcpy((char *)p_p + v15, "-start");
      uint64_t v18 = (const void **)(v100 + 24 * v11);
      if (*((char *)v18 + 23) >= 0) {
        size_t v19 = *((unsigned __int8 *)v18 + 23);
      }
      else {
        size_t v19 = (size_t)v18[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v71, v19 + 4);
      if ((v73 & 0x80u) == 0) {
        uint64_t v20 = &v71;
      }
      else {
        uint64_t v20 = v71;
      }
      if (v19)
      {
        if (*((char *)v18 + 23) >= 0) {
          uint64_t v21 = v18;
        }
        else {
          uint64_t v21 = *v18;
        }
        memmove(v20, v21, v19);
      }
      strcpy((char *)v20 + v19, "-end");
      int v22 = v13 + 1;
      quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)(v2 + 1432), v77);
      if ((SBYTE7(v78) & 0x80u) == 0) {
        int locale = (std::locale::__imp *)BYTE7(v78);
      }
      else {
        int locale = v77[1].__locale_;
      }
      uint64_t v24 = v73;
      if ((v73 & 0x80u) != 0) {
        uint64_t v24 = v72;
      }
      if (locale == (std::locale::__imp *)v24)
      {
        if ((v73 & 0x80u) == 0) {
          uint64_t v25 = (unsigned __int8 *)&v71;
        }
        else {
          uint64_t v25 = (unsigned __int8 *)v71;
        }
        if ((BYTE7(v78) & 0x80) != 0)
        {
          int v30 = v77[0].__locale_;
          int v31 = memcmp(v77[0].__locale_, v25, (size_t)v77[1].__locale_);
          operator delete(v30);
          if (!v31) {
            goto LABEL_63;
          }
        }
        else
        {
          if (!BYTE7(v78)) {
            goto LABEL_63;
          }
          uint64_t v26 = 0;
          do
          {
            int v27 = *((unsigned __int8 *)&v77[0].__locale_ + v26);
            int v28 = v25[v26];
          }
          while (v27 == v28 && BYTE7(v78) - 1 != v26++);
          if (v27 == v28) {
            goto LABEL_63;
          }
        }
      }
      else if ((BYTE7(v78) & 0x80) != 0)
      {
        operator delete(v77[0].__locale_);
      }
      uint64_t v32 = quasar::QsrTextSymbolTable::Find(*(void *)(v2 + 1432), (uint64_t)&v71);
      int v22 = v32;
      if (v32 == -1)
      {
        long long v92 = 0u;
        long long v93 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        *(_OWORD *)int v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        *(_OWORD *)&v77[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
        uint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Could not find \"", 16);
        if ((v73 & 0x80u) == 0) {
          uint64_t v64 = &v71;
        }
        else {
          uint64_t v64 = v71;
        }
        if ((v73 & 0x80u) == 0) {
          uint64_t v65 = v73;
        }
        else {
          uint64_t v65 = v72;
        }
        uint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
      }
LABEL_63:
      int v33 = v13 + 2;
      quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)(v2 + 1432), v77);
      if ((SBYTE7(v78) & 0x80u) == 0) {
        uint64_t v34 = (std::locale::__imp *)BYTE7(v78);
      }
      else {
        uint64_t v34 = v77[1].__locale_;
      }
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (v34 != (std::locale::__imp *)size)
      {
        if ((BYTE7(v78) & 0x80) != 0) {
          operator delete(v77[0].__locale_);
        }
LABEL_85:
        uint64_t v43 = quasar::QsrTextSymbolTable::Find(*(void *)(v2 + 1432), (uint64_t)&__p);
        int v33 = v43;
        if (v43 == -1)
        {
          long long v92 = 0u;
          long long v93 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          *(_OWORD *)int v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          *(_OWORD *)&v77[0].__locale_ = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
          uint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Could not find \"", 16);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v60 = &__p;
          }
          else {
            uint64_t v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v61 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v61 = __p.__r_.__value_.__l.__size_;
          }
          uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"\" in base symbol table", 22);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
        }
        goto LABEL_86;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v36 = &__p;
      }
      else {
        long long v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((BYTE7(v78) & 0x80) != 0)
      {
        uint64_t v41 = v77[0].__locale_;
        int v42 = memcmp(v77[0].__locale_, v36, (size_t)v77[1].__locale_);
        operator delete(v41);
        if (v42) {
          goto LABEL_85;
        }
      }
      else if (BYTE7(v78))
      {
        uint64_t v37 = 0;
        do
        {
          int v38 = *((unsigned __int8 *)&v77[0].__locale_ + v37);
          int v39 = v36->__r_.__value_.__s.__data_[v37];
        }
        while (v38 == v39 && BYTE7(v78) - 1 != v37++);
        if (v38 != v39) {
          goto LABEL_85;
        }
      }
LABEL_86:
      int v75 = v13;
      v77[0].__locale_ = (std::locale::__imp *)&v75;
      uint64_t v44 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v105, &v75, (uint64_t)&std::piecewise_construct, v77);
      *((_DWORD *)v44 + 5) = v33;
      *((_DWORD *)v44 + 6) = v22;
      if ((char)v73 < 0) {
        operator delete(v71);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (++v11 == v12) {
        goto LABEL_91;
      }
    }
  }
  long long v122 = 0uLL;
  long long v123 = 0uLL;
  long long v120 = 0uLL;
  long long v121 = 0uLL;
  long long v118 = 0uLL;
  long long v119 = 0uLL;
  long long v116 = 0uLL;
  long long v117 = 0uLL;
  long long v114 = 0uLL;
  long long v115 = 0uLL;
  long long v112 = 0uLL;
  long long v113 = 0uLL;
  long long v110 = 0uLL;
  long long v111 = 0uLL;
  long long v108 = 0uLL;
  long long v109 = 0uLL;
  long long __s = 0uLL;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"The dyanamic classlm tag prior file name is empty", 49);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__s);
}

void sub_1B2269A78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  JUMPOUT(0x1B2269B04);
}

void sub_1B2269A98(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B2269B44);
}

void sub_1B2269AAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::istringstream::~istringstream((uint64_t)&a20);
  JUMPOUT(0x1B2269B04);
}

void sub_1B2269AF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17)
{
}

void sub_1B2269B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,int a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  kaldi::Input::~Input((kaldi::Input *)&a52);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a54);
  STACK[0x220] = (unint64_t)&a60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&a63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a66);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a72);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::findClassLmSymbols(quasar::OnlineTransducerGraphSearchDecoder *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v125 = 0;
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  long long v122 = 0;
  long long v123 = 0;
  uint64_t v124 = 0;
  kaldi::SplitStringToVector((const std::string *)this + 27, ",", 1, (uint64_t)&v125);
  kaldi::SplitStringToFloats<float>((uint64_t)this + 672, ",", 1, &v122);
  if (v123 == (unsigned char *)v122)
  {
    uint64_t v3 = v125;
    uint64_t v4 = v126;
  }
  else
  {
    uint64_t v3 = v125;
    uint64_t v4 = v126;
    if (0xAAAAAAAAAAAAAAABLL * ((v126 - v125) >> 3) != (v123 - (unsigned char *)v122) >> 2)
    {
      long long v120 = 0u;
      long long v121 = 0u;
      long long v118 = 0u;
      long long v119 = 0u;
      long long v116 = 0u;
      long long v117 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not match classLM scale number", 36);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
  }
  if (v4 != v3)
  {
    for (unint64_t i = 0; 0xAAAAAAAAAAAAAAABLL * ((v126 - v125) >> 3) > i; ++i)
    {
      char v6 = (long long *)(v3 + 24 * i);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        v104.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v7;
      }
      int v103 = 0;
      int v103 = quasar::QsrTextSymbolTable::Find(*((void *)this + 179), (uint64_t)&v104);
      if (v123 == (unsigned char *)v122) {
        float v8 = 1.0;
      }
      else {
        float v8 = *(float *)&v122[i];
      }
      uint64_t v100 = &v103;
      *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 104, &v103, (uint64_t)&std::piecewise_construct, (unsigned int **)&v100)+ 8) = v8;
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v104.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v100, size + 6);
      if (v102 >= 0) {
        int v10 = &v100;
      }
      else {
        int v10 = v100;
      }
      if (size)
      {
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v11 = &v104;
        }
        else {
          uint64_t v11 = (std::string *)v104.__r_.__value_.__r.__words[0];
        }
        memmove(v10, v11, size);
      }
      strcpy((char *)v10 + size, "-start");
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v12 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v12 = v104.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v97, v12 + 4);
      if (v99 >= 0) {
        uint64_t v13 = &v97;
      }
      else {
        uint64_t v13 = v97;
      }
      if (v12)
      {
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v14 = &v104;
        }
        else {
          BOOL v14 = (std::string *)v104.__r_.__value_.__r.__words[0];
        }
        memmove(v13, v14, v12);
      }
      strcpy((char *)v13 + v12, "-end");
      int v15 = v103 + 1;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 179), __p);
      if ((SBYTE7(v106) & 0x80u) == 0) {
        uint64_t v16 = (void *)BYTE7(v106);
      }
      else {
        uint64_t v16 = __p[1];
      }
      uint64_t v17 = (void *)HIBYTE(v99);
      if (v99 < 0) {
        uint64_t v17 = (void *)v98;
      }
      if (v16 == v17)
      {
        if (v99 >= 0) {
          uint64_t v18 = (unsigned __int8 *)&v97;
        }
        else {
          uint64_t v18 = (unsigned __int8 *)v97;
        }
        if ((BYTE7(v106) & 0x80) != 0)
        {
          uint64_t v23 = __p[0];
          int v24 = memcmp(__p[0], v18, (size_t)__p[1]);
          operator delete(v23);
          if (!v24) {
            goto LABEL_58;
          }
        }
        else
        {
          if (!BYTE7(v106)) {
            goto LABEL_58;
          }
          uint64_t v19 = 0;
          do
          {
            int v20 = *((unsigned __int8 *)__p + v19);
            int v21 = v18[v19];
          }
          while (v20 == v21 && BYTE7(v106) - 1 != v19++);
          if (v20 == v21) {
            goto LABEL_58;
          }
        }
      }
      else if ((BYTE7(v106) & 0x80) != 0)
      {
        operator delete(__p[0]);
      }
      int v15 = quasar::QsrTextSymbolTable::Find(*((void *)this + 179), (uint64_t)&v97);
      if (v15 == -1)
      {
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v116 = 0u;
        long long v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        int v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
        if (v99 >= 0) {
          uint64_t v69 = &v97;
        }
        else {
          uint64_t v69 = v97;
        }
        if (v99 >= 0) {
          uint64_t v70 = HIBYTE(v99);
        }
        else {
          uint64_t v70 = v98;
        }
        int v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
LABEL_58:
      int v25 = v103 + 2;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 179), __p);
      if ((SBYTE7(v106) & 0x80u) == 0) {
        uint64_t v26 = (void *)BYTE7(v106);
      }
      else {
        uint64_t v26 = __p[1];
      }
      int v27 = (void *)HIBYTE(v102);
      if (v102 < 0) {
        int v27 = (void *)v101;
      }
      if (v26 != v27)
      {
        if ((BYTE7(v106) & 0x80) != 0) {
          operator delete(__p[0]);
        }
LABEL_80:
        int v25 = quasar::QsrTextSymbolTable::Find(*((void *)this + 179), (uint64_t)&v100);
        if (v25 == -1)
        {
          long long v120 = 0u;
          long long v121 = 0u;
          long long v118 = 0u;
          long long v119 = 0u;
          long long v116 = 0u;
          long long v117 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          long long v112 = 0u;
          long long v113 = 0u;
          long long v110 = 0u;
          long long v111 = 0u;
          long long v108 = 0u;
          long long v109 = 0u;
          long long v106 = 0u;
          long long v107 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          uint64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
          if (v102 >= 0) {
            unsigned __int8 v73 = &v100;
          }
          else {
            unsigned __int8 v73 = v100;
          }
          if (v102 >= 0) {
            uint64_t v74 = HIBYTE(v102);
          }
          else {
            uint64_t v74 = v101;
          }
          int v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"\" in base symbol table", 22);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        goto LABEL_81;
      }
      if (v102 >= 0) {
        int v28 = (unsigned __int8 *)&v100;
      }
      else {
        int v28 = (unsigned __int8 *)v100;
      }
      if ((BYTE7(v106) & 0x80) != 0)
      {
        int v33 = __p[0];
        int v34 = memcmp(__p[0], v28, (size_t)__p[1]);
        operator delete(v33);
        if (v34) {
          goto LABEL_80;
        }
      }
      else if (BYTE7(v106))
      {
        uint64_t v29 = 0;
        do
        {
          int v30 = *((unsigned __int8 *)__p + v29);
          int v31 = v28[v29];
        }
        while (v30 == v31 && BYTE7(v106) - 1 != v29++);
        if (v30 != v31) {
          goto LABEL_80;
        }
      }
LABEL_81:
      v128[0] = &v103;
      uint64_t v35 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a2, &v103, (uint64_t)&std::piecewise_construct, v128);
      *((_DWORD *)v35 + 5) = v25;
      *((_DWORD *)v35 + 6) = v15;
      if (SHIBYTE(v99) < 0) {
        operator delete(v97);
      }
      if (SHIBYTE(v102) < 0) {
        operator delete(v100);
      }
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v104.__r_.__value_.__l.__data_);
      }
      uint64_t v3 = v125;
    }
  }
  if (*((char *)this + 647) < 0)
  {
    if (!*((void *)this + 79)) {
      goto LABEL_155;
    }
  }
  else if (!*((unsigned char *)this + 647))
  {
    goto LABEL_155;
  }
  if (*((char *)this + 743) < 0)
  {
    if (!*((void *)this + 91)) {
      goto LABEL_155;
    }
  }
  else if (!*((unsigned char *)this + 743))
  {
    goto LABEL_155;
  }
  if (*((char *)this + 767) < 0)
  {
    if (!*((void *)this + 94)) {
      goto LABEL_155;
    }
    goto LABEL_100;
  }
  if (*((unsigned char *)this + 767))
  {
LABEL_100:
    memset(&v104, 0, sizeof(v104));
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    uint64_t v102 = 0;
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    kaldi::SplitStringToVector((const std::string *)this + 26, ",", 1, (uint64_t)&v104);
    kaldi::SplitStringToVector((const std::string *)this + 30, ",", 1, (uint64_t)&v100);
    kaldi::SplitStringToVector((const std::string *)this + 31, ",", 1, (uint64_t)&v97);
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0]) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v101 - (uint64_t)v100) >> 3) != v36
      || 0xAAAAAAAAAAAAAAABLL * ((v98 - (uint64_t)v97) >> 3) != v36)
    {
      long long v120 = 0u;
      long long v121 = 0u;
      long long v118 = 0u;
      long long v119 = 0u;
      long long v116 = 0u;
      long long v117 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)" Expected number of classLM symbols for base/start/end match: ", 62);
      int v94 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)" ", 1);
      long long v95 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)" ", 1);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if (v104.__r_.__value_.__l.__size_ == v104.__r_.__value_.__r.__words[0])
    {
LABEL_154:
      __p[0] = &v97;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v100;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v104;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      goto LABEL_155;
    }
    uint64_t v37 = 0;
    if (v36 <= 1) {
      unint64_t v38 = 1;
    }
    else {
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0]) >> 3);
    }
    while (1)
    {
      uint64_t v39 = quasar::QsrTextSymbolTable::Find(*((void *)this + 179), v104.__r_.__value_.__r.__words[0] + 24 * v37);
      int v40 = v39;
      if (v39 == -1)
      {
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v116 = 0u;
        long long v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        int64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
        std::string::size_type v77 = v104.__r_.__value_.__r.__words[0] + 24 * v37;
        int v78 = *(char *)(v77 + 23);
        if (v78 >= 0) {
          uint64_t v79 = v104.__r_.__value_.__r.__words[0] + 24 * v37;
        }
        else {
          uint64_t v79 = *(void *)v77;
        }
        if (v78 >= 0) {
          uint64_t v80 = *(unsigned __int8 *)(v77 + 23);
        }
        else {
          uint64_t v80 = *(void *)(v77 + 8);
        }
        long long v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, v79, v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      int v41 = v39 + 1;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 179), __p);
      int v42 = (char *)v97 + 24 * v37;
      if ((SBYTE7(v106) & 0x80u) == 0) {
        uint64_t v43 = (void *)BYTE7(v106);
      }
      else {
        uint64_t v43 = __p[1];
      }
      unint64_t v44 = v42[23];
      int v45 = (char)v44;
      if ((v44 & 0x80u) != 0) {
        unint64_t v44 = *((void *)v42 + 1);
      }
      if (v43 == (void *)v44)
      {
        if (v45 >= 0) {
          uint64_t v46 = (char *)v97 + 24 * v37;
        }
        else {
          uint64_t v46 = *(char **)v42;
        }
        if ((BYTE7(v106) & 0x80) != 0)
        {
          uint64_t v51 = __p[0];
          int v52 = memcmp(__p[0], v46, (size_t)__p[1]);
          operator delete(v51);
          if (!v52) {
            goto LABEL_130;
          }
        }
        else
        {
          if (!BYTE7(v106)) {
            goto LABEL_130;
          }
          uint64_t v47 = 0;
          do
          {
            int v48 = *((unsigned __int8 *)__p + v47);
            int v49 = v46[v47];
          }
          while (v48 == v49 && BYTE7(v106) - 1 != v47++);
          if (v48 == v49) {
            goto LABEL_130;
          }
        }
      }
      else if ((BYTE7(v106) & 0x80) != 0)
      {
        operator delete(__p[0]);
      }
      uint64_t v53 = quasar::QsrTextSymbolTable::Find(*((void *)this + 179), (uint64_t)v97 + 24 * v37);
      int v41 = v53;
      if (v53 == -1)
      {
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v116 = 0u;
        long long v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        long long v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
        long long v83 = (char *)v97 + 24 * v37;
        int v84 = v83[23];
        if (v84 >= 0) {
          long long v85 = (char *)v97 + 24 * v37;
        }
        else {
          long long v85 = *(char **)v83;
        }
        if (v84 >= 0) {
          uint64_t v86 = v83[23];
        }
        else {
          uint64_t v86 = *((void *)v83 + 1);
        }
        long long v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v85, v86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
LABEL_130:
      int v54 = v40 + 2;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 179), __p);
      int v55 = (char *)v100 + 24 * v37;
      if ((SBYTE7(v106) & 0x80u) == 0) {
        uint64_t v56 = (void *)BYTE7(v106);
      }
      else {
        uint64_t v56 = __p[1];
      }
      unint64_t v57 = v55[23];
      int v58 = (char)v57;
      if ((v57 & 0x80u) != 0) {
        unint64_t v57 = *((void *)v55 + 1);
      }
      if (v56 != (void *)v57)
      {
        if ((BYTE7(v106) & 0x80) != 0) {
          operator delete(__p[0]);
        }
LABEL_152:
        uint64_t v66 = quasar::QsrTextSymbolTable::Find(*((void *)this + 179), (uint64_t)v100 + 24 * v37);
        int v54 = v66;
        if (v66 == -1)
        {
          long long v120 = 0u;
          long long v121 = 0u;
          long long v118 = 0u;
          long long v119 = 0u;
          long long v116 = 0u;
          long long v117 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          long long v112 = 0u;
          long long v113 = 0u;
          long long v110 = 0u;
          long long v111 = 0u;
          long long v108 = 0u;
          long long v109 = 0u;
          long long v106 = 0u;
          long long v107 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          long long v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
          long long v89 = (char *)v100 + 24 * v37;
          int v90 = v89[23];
          if (v90 >= 0) {
            long long v91 = (char *)v100 + 24 * v37;
          }
          else {
            long long v91 = *(char **)v89;
          }
          if (v90 >= 0) {
            uint64_t v92 = v89[23];
          }
          else {
            uint64_t v92 = *((void *)v89 + 1);
          }
          long long v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v91, v92);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"\" in base symbol table", 22);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        goto LABEL_153;
      }
      if (v58 >= 0) {
        uint64_t v59 = (char *)v100 + 24 * v37;
      }
      else {
        uint64_t v59 = *(char **)v55;
      }
      if ((BYTE7(v106) & 0x80) != 0)
      {
        uint64_t v64 = __p[0];
        int v65 = memcmp(__p[0], v59, (size_t)__p[1]);
        operator delete(v64);
        if (v65) {
          goto LABEL_152;
        }
      }
      else if (BYTE7(v106))
      {
        uint64_t v60 = 0;
        do
        {
          int v61 = *((unsigned __int8 *)__p + v60);
          int v62 = v59[v60];
        }
        while (v61 == v62 && BYTE7(v106) - 1 != v60++);
        if (v61 != v62) {
          goto LABEL_152;
        }
      }
LABEL_153:
      LODWORD(__p[0]) = v40;
      v128[0] = __p;
      int v67 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a2, (int *)__p, (uint64_t)&std::piecewise_construct, v128);
      *((_DWORD *)v67 + 5) = v54;
      *((_DWORD *)v67 + 6) = v41;
      if (++v37 == v38) {
        goto LABEL_154;
      }
    }
  }
LABEL_155:
  if (v122)
  {
    long long v123 = v122;
    operator delete(v122);
  }
  __p[0] = &v125;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B226A760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  int v30 = *(void **)(v28 - 176);
  if (v30)
  {
    *(void *)(v28 - 168) = v30;
    operator delete(v30);
  }
  uint64_t v32 = (void **)(v28 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v32);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v31);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::writeRecordedStateAccessForFst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v37[19] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(unsigned __int8 *)(a3 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a3 + 8);
  }
  if (v4)
  {
    if (*(void *)a2)
    {
      if (v8)
      {
        int v9 = v8;
        int v10 = *(std::__shared_weak_count **)(a2 + 8);
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (quasar::gLogLevel >= 4)
        {
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          long long v20 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
          uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Write accessed states for ", 26);
          int v12 = *(char *)(a3 + 23);
          if (v12 >= 0) {
            uint64_t v13 = a3;
          }
          else {
            uint64_t v13 = *(void *)a3;
          }
          if (v12 >= 0) {
            uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v14 = *(void *)(a3 + 8);
          }
          int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
          uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" to ", 4);
          int v17 = *(char *)(a4 + 23);
          if (v17 >= 0) {
            uint64_t v18 = a4;
          }
          else {
            uint64_t v18 = *(void *)a4;
          }
          if (v17 >= 0) {
            uint64_t v19 = *(unsigned __int8 *)(a4 + 23);
          }
          else {
            uint64_t v19 = *(void *)(a4 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v20);
        }
        std::ofstream::basic_ofstream((uint64_t *)&v20);
        quasar::StateAccessRecordingFst::WriteRecordedStateAccesses(v9);
        if (!std::filebuf::close()) {
          std::ios_base::clear((std::ios_base *)((char *)&v20 + *(void *)(v20 - 24)), *(_DWORD *)((char *)&v22 + *(void *)(v20 - 24)) | 4);
        }
        *(void *)&long long v20 = *MEMORY[0x1E4FBA400];
        *(void *)((char *)&v20 + *(void *)(v20 - 24)) = *(void *)(MEMORY[0x1E4FBA400] + 24);
        MEMORY[0x1B3EA7CF0]((char *)&v20 + 8);
        std::ostream::~ostream();
        MEMORY[0x1B3EA8520](v37);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
    }
  }
  else if (quasar::gLogLevel >= 5)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"FST File empty", 14);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v20);
  }
}

void sub_1B226AB0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineTransducerGraphSearchDecoder::writeRecordedStateAccesses(uint64_t a1, uint64_t a2)
{
  v64[2] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 2124) || *(unsigned char *)(a1 + 440))
  {
    uint64_t v3 = *(long long **)(a1 + 1976);
    uint64_t v4 = (long long *)(a1 + 1984);
    if (v3 != (long long *)(a1 + 1984))
    {
      do
      {
        std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100](&__str, v3 + 2);
        if (!v62
        {
          goto LABEL_76;
        }
        char v5 = v63;
        if (v63) {
          atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v58, "");
        if (*(char *)(a2 + 23) < 0)
        {
          if (*(void *)(a2 + 8))
          {
LABEL_10:
            std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = __str.__r_.__value_.__l.__size_;
            }
            else {
              p_str = &__str;
            }
            float v8 = (char *)&p_str[-1].__r_.__value_.__r.__words[2] + 7;
            while (size)
            {
              int v9 = v8[size--];
              if (v9 == 47) {
                goto LABEL_44;
              }
            }
            std::string::size_type size = -1;
LABEL_44:
            std::string::basic_string((std::string *)v40, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v57);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, 47, (uint64_t)&v56);
            if (v40[23] >= 0) {
              long long v22 = v40;
            }
            else {
              long long v22 = *(const std::string::value_type **)v40;
            }
            if (v40[23] >= 0) {
              std::string::size_type v23 = v40[23];
            }
            else {
              std::string::size_type v23 = *(void *)&v40[8];
            }
            long long v24 = std::string::append(&v56, v22, v23);
            long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
            v57.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v25;
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            long long v26 = std::string::append(&v57, ".recorded_state_accesses");
            long long v27 = (void *)v26->__r_.__value_.__r.__words[0];
            v64[0] = v26->__r_.__value_.__l.__size_;
            *(void *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
            unsigned __int8 v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            if ((char)v60 < 0) {
              operator delete(v58);
            }
            int v58 = v27;
            *(void *)uint64_t v59 = v64[0];
            *(void *)&v59[7] = *(void *)((char *)v64 + 7);
            unsigned __int8 v60 = v28;
            if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v57.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v56.__r_.__value_.__l.__data_);
            }
            if ((v40[23] & 0x80000000) != 0)
            {
              long long v21 = *(void **)v40;
              goto LABEL_58;
            }
            goto LABEL_59;
          }
        }
        else if (*(unsigned char *)(a2 + 23))
        {
          goto LABEL_10;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v10 = __str.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v57, v10 + 1);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v11 = &v57;
        }
        else {
          uint64_t v11 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if (v10)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v12 = &__str;
          }
          else {
            int v12 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          memmove(v11, v12, v10);
        }
        *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 46;
        pid_t v13 = getpid();
        std::to_string(&v56, v13);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v14 = &v56;
        }
        else {
          uint64_t v14 = (std::string *)v56.__r_.__value_.__r.__words[0];
        }
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v15 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v15 = v56.__r_.__value_.__l.__size_;
        }
        uint64_t v16 = std::string::append(&v57, (const std::string::value_type *)v14, v15);
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        *(void *)&v40[16] = *((void *)&v16->__r_.__value_.__l + 2);
        *(_OWORD *)int v40 = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        uint64_t v18 = std::string::append((std::string *)v40, ".recorded_state_accesses");
        uint64_t v19 = (void *)v18->__r_.__value_.__r.__words[0];
        v64[0] = v18->__r_.__value_.__l.__size_;
        *(void *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
        unsigned __int8 v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        if ((char)v60 < 0) {
          operator delete(v58);
        }
        int v58 = v19;
        *(void *)uint64_t v59 = v64[0];
        *(void *)&v59[7] = *(void *)((char *)v64 + 7);
        unsigned __int8 v60 = v20;
        if ((v40[23] & 0x80000000) != 0) {
          operator delete(*(void **)v40);
        }
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        {
          long long v21 = (void *)v57.__r_.__value_.__r.__words[0];
LABEL_58:
          operator delete(v21);
        }
LABEL_59:
        BOOL v29 = quasar::filesystem::exists((char *)&v58);
        if (v29)
        {
          if (quasar::gLogLevel >= 1)
          {
            long long v54 = 0u;
            long long v55 = 0u;
            long long v52 = 0u;
            long long v53 = 0u;
            long long v50 = 0u;
            long long v51 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v41 = 0u;
            memset(v40, 0, sizeof(v40));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
            long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"State access file [", 19);
            if ((v60 & 0x80u) == 0) {
              long long v31 = &v58;
            }
            else {
              long long v31 = (void **)v58;
            }
            if ((v60 & 0x80u) == 0) {
              uint64_t v32 = v60;
            }
            else {
              uint64_t v32 = *(void *)v59;
            }
            long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"] exists", 8);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v40);
          }
          std::runtime_error::runtime_error(&v39, "State access file exists - not overwriting");
          std::runtime_error::~runtime_error(&v39);
        }
        long long v34 = v63;
        v38[0] = v62;
        v38[1] = v63;
        if (v63) {
          atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        quasar::OnlineTransducerGraphSearchDecoder::writeRecordedStateAccessForFst(v29, (uint64_t)v38, (uint64_t)&__str, (uint64_t)&v58);
        if (v34) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        }
        if ((char)v60 < 0)
        {
          operator delete(v58);
          if (!v5) {
            goto LABEL_76;
          }
LABEL_75:
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          goto LABEL_76;
        }
        if (v5) {
          goto LABEL_75;
        }
LABEL_76:
        if (v63) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v63);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        long long v35 = (long long *)*((void *)v3 + 1);
        if (v35)
        {
          do
          {
            long long v36 = v35;
            long long v35 = *(long long **)v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            long long v36 = (long long *)*((void *)v3 + 2);
            BOOL v37 = *(void *)v36 == (void)v3;
            uint64_t v3 = v36;
          }
          while (!v37);
        }
        uint64_t v3 = v36;
      }
      while (v36 != v4);
    }
  }
}

void sub_1B226B050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 - 209) < 0) {
    operator delete(*(void **)(v19 - 232));
  }
  if (*(char *)(v19 - 185) < 0) {
    operator delete(*(void **)(v19 - 208));
  }
  if (*(char *)(v19 - 161) < 0) {
    operator delete(*(void **)(v19 - 184));
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair(v19 - 160);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::resetAccessedStatesCounts(quasar::OnlineTransducerGraphSearchDecoder *this)
{
  if (*((unsigned char *)this + 2124) || *((unsigned char *)this + 440))
  {
    uint64_t v1 = (long long *)*((void *)this + 247);
    uint64_t v2 = (char *)this + 1984;
    if (v1 != (long long *)((char *)this + 1984))
    {
      do
      {
        std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100](&__p, v1 + 2);
        if (lpsrc)
        {
          if (v3)
          {
            uint64_t v4 = v10;
            if (v10) {
              atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            quasar::StateAccessRecordingFst::ResetAccessedStatesCounts(v3);
            if (v4) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v4);
            }
          }
        }
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        char v5 = (long long *)*((void *)v1 + 1);
        if (v5)
        {
          do
          {
            char v6 = v5;
            char v5 = *(long long **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            char v6 = (long long *)*((void *)v1 + 2);
            BOOL v7 = *(void *)v6 == (void)v1;
            uint64_t v1 = v6;
          }
          while (!v7);
        }
        uint64_t v1 = v6;
      }
      while (v6 != (long long *)v2);
    }
  }
}

void sub_1B226B288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::runImpl(quasar::OnlineTransducerGraphSearchDecoder *a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
}

void sub_1B226B480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  kaldi::quasar::TransducerAutoRegressiveDecodable::~TransducerAutoRegressiveDecodable((kaldi::quasar::TransducerAutoRegressiveDecodable *)&a29);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (a2 == 2)
  {
    long long v33 = (const std::runtime_error *)__cxa_begin_catch(a1);
    quasar::OnlineTransducerGraphSearchDecoder::cleanUpAfterDecoding(v29);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    long long v35 = std::runtime_error::runtime_error(exception, v33);
    v35->__vftable = (std::runtime_error_vtbl *)&unk_1F0A50CA0;
  }
  if (a2 == 1)
  {
    long long v36 = (const std::runtime_error *)__cxa_begin_catch(a1);
    quasar::OnlineTransducerGraphSearchDecoder::cleanUpAfterDecoding(v29);
    BOOL v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v38 = std::runtime_error::runtime_error(v37, v36);
    v38->__vftable = (std::runtime_error_vtbl *)&unk_1F0A513A0;
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::cleanUpAfterDecoding(quasar::OnlineTransducerGraphSearchDecoder *this)
{
  if (*((unsigned char *)this + 440)) {
    quasar::OnlineTransducerGraphSearchDecoder::resetAccessedStatesCounts(this);
  }
  quasar::OnlineTransducerGraphSearchDecoder::DecoderCreationDependencies::clear((quasar::OnlineTransducerGraphSearchDecoder *)((char *)this + 896));
}

void quasar::OnlineTransducerGraphSearchDecoder::setUpDecoding(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  quasar::OnlineTransducerGraphSearchDecoder::loadLmeData(a1, a2, a3, a4);
  uint64_t v36 = a2;
  quasar::OnlineTransducerGraphSearchDecoder::setUpDecoderPassData(a1, a2, (uint64_t)a4);
  BOOL v7 = (char *)operator new(0x48uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)BOOL v7 = &unk_1F0A5F418;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  float v8 = *(std::__shared_weak_count **)(a1 + 1032);
  *(void *)(a1 + 1032) = v7;
  *(_OWORD *)(v7 + 24) = 0u;
  *(void *)(a1 + 1024) = v7 + 24;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = *(void *)(a2 + 216);
  long long v35 = (uint64_t *)a4;
  if (v9)
  {
    std::set<int>::set[abi:ne180100]((uint64_t *)&v48, v9 + 32);
  }
  else
  {
    v49[0] = 0;
    v49[1] = 0;
    long long v48 = v49;
  }
  std::string::size_type v10 = *(uint64_t **)(a1 + 2048);
  for (unint64_t i = *(uint64_t **)(a1 + 2056); v10 != i; v10 += 2)
  {
    uint64_t v12 = *(void *)(a1 + 1024);
    int v13 = *(_DWORD *)(v36 + 448);
    uint64_t v14 = *v10;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v14, (uint64_t)__p, &v43);
    LODWORD(v45[0]) = v13;
    v45[1] = v43;
    long long v46 = v44;
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v47 = -1;
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(v12, (unsigned int *)v45, *(uint64_t **)(a1 + 480), 0, 0, *(_DWORD *)(a1 + 448), 0x20000, (uint64_t)&v48);
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    }
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    if (v42 < 0) {
      operator delete(__p[0]);
    }
  }
  std::string::size_type v15 = *(uint64_t **)(a1 + 2096);
  for (uint64_t j = *(uint64_t **)(a1 + 2104); v15 != j; v15 += 2)
  {
    uint64_t v17 = *(void *)(a1 + 1024);
    uint64_t v18 = *v15;
    std::string::basic_string[abi:ne180100]<0>(v45, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v18, (uint64_t)v45, &v38);
    uint64_t v19 = (const void *)v38.__r_.__value_.__r.__words[0];
    uint64_t v20 = *(void *)(a1 + 480);
    uint64_t v21 = *(void *)(v20 + 48);
    if (v21)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v21, (uint64_t)__p, &v39);
      uint64_t v22 = v39;
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v33 = a1 + 536;
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(v17, v19, (unsigned int **)v20, v36 + 408, (__int32 **)(v20 + 24), a1 + 832, v22, 0, 0, 0x20000);
    if (v21)
    {
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v38.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38.__r_.__value_.__l.__size_);
    }
    if (SHIBYTE(v46) < 0) {
      operator delete(v45[0]);
    }
  }
  uint64_t v23 = *v35;
  if (*(float *)(a1 + 2120) > 0.0)
  {
    uint64_t v24 = *(void *)(v23 + 24);
    long long v25 = *(void **)(v24 + 272);
    long long v26 = *(void **)(v24 + 280);
    if (v25 != v26)
    {
      do
      {
        (*(void (**)(void, void, void, void, void, void, void, void **, uint64_t, uint64_t, uint64_t))(*(void *)*v25 + 16))(*v25, *(void *)(a1 + 1024), *(void *)(a1 + 480), *(unsigned int *)(v36 + 448), 0, 0, *(unsigned int *)(a1 + 448), &v48, v36 + 408, 0x20000, v33);
        v25 += 2;
      }
      while (v25 != v26);
      uint64_t v23 = *v35;
    }
  }
  quasar::SpeechRequestData::getRecogRequestTimer(v23, v45);
  long long v27 = (double *)v45[0];
  double v29 = (kaldi::Timer::GetSeconds((kaldi::Timer *)5, v28) - *v27 - *(double *)(a1 + 872)) * 1000.0;
  if (v45[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v45[1]);
  }
  uint64_t v30 = *(void *)(*a3 + 424);
  *(double *)(v30 + 16) = v29 + *(double *)(v30 + 16);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)a1, &v38);
  long long v31 = std::string::append(&v38, ":lmeLoadingTime");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  long long v46 = (std::__shared_weak_count *)v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long v45 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v37, v29);
  quasar::SpeechRequestResultData::addDump(v30, (long long *)v45, &v37);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(v45[0]);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  quasar::OnlineTransducerGraphSearchDecoder::decoderObjectSetup(a1, v36, (uint64_t)a3, (uint64_t)v35);
}

void sub_1B226BA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  std::__tree<int>::destroy(v43 - 128, *(void **)(v43 - 120));
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::decodeUtterance()
{
}

void sub_1B226D228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  a29 = &STACK[0x360];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = &STACK[0x378];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = (void *)(v37 - 256);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  uint64_t v39 = (void *)v36[108];
  if (v39)
  {
    v36[109] = v39;
    operator delete(v39);
  }
  kaldi::LatticeWordAligner::ComputationState::~ComputationState((kaldi::LatticeWordAligner::ComputationState *)&STACK[0x230]);
  int v40 = (void *)v36[97];
  if (v40)
  {
    v36[98] = v40;
    operator delete(v40);
  }
  long long v41 = (void *)v36[34];
  if (v41)
  {
    v36[35] = v41;
    operator delete(v41);
  }
  if (v35) {
    operator delete(v35);
  }
  char v42 = (void *)v36[101];
  if (v42)
  {
    v36[102] = v42;
    operator delete(v42);
  }
  uint64_t v43 = (void *)v36[104];
  if (v43)
  {
    v36[105] = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitDecoding(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 != -1)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    do
    {
      uint64_t v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      uint64_t v2 = *v4;
    }
    while (v2 != -1);
  }
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = -1;
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 64);
    do
    {
      uint64_t v7 = v5;
      uint64_t v5 = *(void *)(v5 + 24);
      *(void *)(v7 + 24) = v6;
      uint64_t v6 = v7;
    }
    while (v5);
    *(void *)(a1 + 64) = v7;
  }
  kaldi::quasar::E2ETokenHeap::Clear((kaldi::quasar::E2ETokenHeap *)(a1 + 360));
  *(void *)(a1 + 408) = *(void *)(a1 + 400);
  *(void *)(a1 + 432) = *(void *)(a1 + 424);
  *(void *)(a1 + 456) = *(void *)(a1 + 448);
  *(void *)(a1 + 104) = *(void *)(a1 + 96);
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(void *)(a1 + 308) = 0;
  int32x2_t v8 = vdup_n_s32(0x7F800000u);
  *(int32x2_t *)(a1 + 144) = v8;
  *(_DWORD *)(a1 + 152) = 2139095040;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((void *)(a1 + 320));
  *(void *)(a1 + 308) = 0;
  std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::resize(a1 + 96, 1uLL);
  std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::resize(a1 + 120, 1uLL);
  int v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184));
  uint64_t v10 = (***(uint64_t (****)(void))(a1 + 288))();
  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(a1, (v10 << 32) + v9, 0, *(_DWORD *)(a1 + 8), 0, 0, 0.0);
  *(_WORD *)(a1 + 472) = 0;
  *(int32x2_t *)(a1 + 600) = v8;
  *(void *)(a1 + 488) = *(void *)(a1 + 480);
  *(void *)(a1 + 512) = *(void *)(a1 + 504);
  *(void *)(a1 + 536) = *(void *)(a1 + 528);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(void *)(a1 + 584) = *(void *)(a1 + 576);
  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessNonemitting(a1, *(_DWORD *)(a1 + 8), *(float *)(a1 + 192));
  ++*(_DWORD *)(a1 + 8);
}

BOOL kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Finished(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 272);
  if (v3 < 0) {
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  }
  uint64_t v4 = *(void *)(a1 + 104);
  return v3 < (unint64_t)((v4 - *(void *)(a1 + 96)) >> 3) || *(_DWORD *)(v4 - 8) == 0;
}

uint64_t kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AdvanceDecoding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 96;
  uint64_t v8 = a1 + 120;
  while (!kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Finished(a1, a2))
  {
    std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::resize(v7, *(int *)(a1 + 8) + 1);
    std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::resize(v8, *(int *)(a1 + 8) + 1);
    float v9 = kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessEmitting<kaldi::AutoRegressiveDecodableInterface>(a1, a2, *(_DWORD *)(a1 + 8));
    kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessNonemitting(a1, *(_DWORD *)(a1 + 8), v9);
    BOOL v10 = kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Finished(a1, a2);
    clockid_t v11 = *(_DWORD *)(a1 + 8);
    if (v10)
    {
      kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokensFinal(a1, v11, 0);
    }
    else if (!((int)v11 % *(_DWORD *)(a1 + 208)))
    {
      kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokens((uint64_t *)a1, v11, *(float *)(a1 + 204) * *(float *)(a1 + 232));
    }
    ++*(_DWORD *)(a1 + 8);
    uint64_t v6 = (v6 + 1);
    if (a3 == v6) {
      return a3;
    }
  }
  return v6;
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetPartialResult(uint64_t a1@<X0>, char a2@<W1>, int **a3@<X2>, int **a4@<X8>)
{
  uint64_t v8 = *(unint64_t **)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    float v11 = *(float *)(a1 + 224);
    float v12 = INFINITY;
    float v13 = INFINITY;
    do
    {
      if (v11 == 0.0)
      {
        float v17 = 0.0;
      }
      else
      {
        unint64_t v14 = *v8;
        float v15 = (*(float (**)(void, unint64_t))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184), *v8);
        float v16 = INFINITY;
        if (v15 != INFINITY) {
          float v16 = v15
        }
              + (*(float (**)(void, unint64_t))(**(void **)(a1 + 288) + 16))(*(void *)(a1 + 288), HIDWORD(v14));
        float v11 = *(float *)(a1 + 224);
        float v17 = v16 * v11;
      }
      uint64_t v18 = *(void *)(a1 + 360);
      uint64_t v19 = (float *)(v18 + 36 * *((unsigned int *)v8 + 4));
      float v20 = v17 + *v19;
      if (v12 > v20)
      {
        float v12 = v20;
        uint64_t v9 = v18 + 36 * *((unsigned int *)v8 + 4);
      }
      if (v13 > *v19)
      {
        float v13 = *v19;
        uint64_t v10 = v18 + 36 * *((unsigned int *)v8 + 4);
      }
      uint64_t v8 = (unint64_t *)v8[3];
    }
    while (v8);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  if (!(v9 | v10))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"GetPartialResult: decoding is finished: not producing partial result.", 69);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  if (!v9) {
    uint64_t v9 = v10;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3) {
    a3[1] = *a3;
  }
  if (v9)
  {
    while (1)
    {
      int v21 = *(_DWORD *)(v9 + 32) & 0x7FFFFFFF;
      if ((a2 & 1) == 0 && !v21) {
        break;
      }
      uint64_t v23 = a4[1];
      unint64_t v22 = (unint64_t)a4[2];
      if ((unint64_t)v23 >= v22)
      {
        long long v25 = *a4;
        uint64_t v26 = v23 - *a4;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v29);
          long long v25 = *a4;
          uint64_t v23 = a4[1];
        }
        else
        {
          uint64_t v30 = 0;
        }
        long long v31 = (int *)&v30[4 * v26];
        *long long v31 = v21;
        uint64_t v24 = v31 + 1;
        while (v23 != v25)
        {
          int v32 = *--v23;
          *--long long v31 = v32;
        }
        *a4 = v31;
        a4[1] = v24;
        a4[2] = (int *)&v30[4 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *uint64_t v23 = v21;
        uint64_t v24 = v23 + 1;
      }
      a4[1] = v24;
      if (a3) {
        goto LABEL_45;
      }
LABEL_64:
      unsigned int v45 = *(_DWORD *)(v9 + 28) & 0x3FFFFFF;
      if (!v45)
      {
        int v47 = *a4;
        long long v46 = a4[1];
        if (*a4 != v46)
        {
          long long v48 = v46 - 1;
          if (v48 > v47)
          {
            unint64_t v49 = (unint64_t)(v47 + 1);
            do
            {
              int v50 = *(_DWORD *)(v49 - 4);
              *(_DWORD *)(v49 - 4) = *v48;
              *v48-- = v50;
              BOOL v51 = v49 >= (unint64_t)v48;
              v49 += 4;
            }
            while (!v51);
          }
        }
        goto LABEL_71;
      }
      uint64_t v9 = *(void *)(a1 + 360) + 36 * v45;
    }
    if (!a3) {
      goto LABEL_64;
    }
LABEL_45:
    int v33 = *(_DWORD *)(v9 + 24) & 0x7FFFFFFF;
    if ((a2 & 1) != 0 || v33)
    {
      long long v35 = a3[1];
      unint64_t v34 = (unint64_t)a3[2];
      if ((unint64_t)v35 >= v34)
      {
        uint64_t v37 = *a3;
        uint64_t v38 = v35 - *a3;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = v34 - (void)v37;
        if (v40 >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          char v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v41);
          uint64_t v37 = *a3;
          long long v35 = a3[1];
        }
        else
        {
          char v42 = 0;
        }
        uint64_t v43 = (int *)&v42[4 * v38];
        *uint64_t v43 = v33;
        uint64_t v36 = v43 + 1;
        while (v35 != v37)
        {
          int v44 = *--v35;
          *--uint64_t v43 = v44;
        }
        *a3 = v43;
        a3[1] = v36;
        a3[2] = (int *)&v42[4 * v41];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *long long v35 = v33;
        uint64_t v36 = v35 + 1;
      }
      a3[1] = v36;
    }
    goto LABEL_64;
  }
LABEL_71:
  if (a3)
  {
    unint64_t v52 = (unint64_t)*a3;
    long long v53 = a3[1];
    long long v54 = v53 - 1;
    if (*a3 != v53 && (unint64_t)v54 > v52)
    {
      unint64_t v56 = v52 + 4;
      do
      {
        int v57 = *(_DWORD *)(v56 - 4);
        *(_DWORD *)(v56 - 4) = *v54;
        *v54-- = v57;
        BOOL v51 = v56 >= (unint64_t)v54;
        v56 += 4;
      }
      while (!v51);
    }
  }
}

void sub_1B226DE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessLabels(void *a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, int a5@<W5>, void *a6@<X8>)
{
  uint64_t v6 = a1[1] - *a1;
  if (v6 >> 2 != (uint64_t)(a2[1] - *a2) >> 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v66, "ilabels.size() == olabels.size()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v66);
  }
  uint64_t v66 = 0;
  int v67 = 0;
  int v68 = 0;
  std::string __p = 0;
  uint64_t v64 = 0;
  int v65 = 0;
  int v7 = ((unint64_t)v6 >> 2) - 1;
  if (v7 < 0)
  {
    unint64_t v49 = 0;
    long long v48 = 0;
  }
  else
  {
    unsigned __int8 v60 = a6;
    char v11 = 1;
    do
    {
      int v12 = *(_DWORD *)(*a1 + 4 * v7);
      int v13 = *(_DWORD *)(*a2 + 4 * v7);
      if (v13 < 1 || v13 == a5)
      {
        v11 |= v13 == a5;
      }
      else
      {
        float v15 = v64;
        if (v64 >= (int *)v65)
        {
          float v17 = (int *)__p;
          uint64_t v18 = ((char *)v64 - __p) >> 2;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62) {
            goto LABEL_88;
          }
          uint64_t v20 = v65 - __p;
          if ((v65 - __p) >> 1 > v19) {
            unint64_t v19 = v20 >> 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v65, v21);
            float v17 = (int *)__p;
            float v15 = v64;
          }
          else
          {
            unint64_t v22 = 0;
          }
          uint64_t v23 = (int *)&v22[4 * v18];
          *uint64_t v23 = v13;
          float v16 = v23 + 1;
          while (v15 != v17)
          {
            int v24 = *--v15;
            *--uint64_t v23 = v24;
          }
          std::string __p = (char *)v23;
          int v65 = &v22[4 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *uint64_t v64 = v13;
          float v16 = v64 + 1;
        }
        char v11 = 0;
        uint64_t v64 = v16;
      }
      if (v12 >= 1)
      {
        long long v25 = v67;
        if (v67 >= v68)
        {
          unint64_t v27 = (int *)v66;
          uint64_t v28 = ((char *)v67 - (unsigned char *)v66) >> 2;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62) {
LABEL_88:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v30 = (char *)v68 - (unsigned char *)v66;
          if (((char *)v68 - (unsigned char *)v66) >> 1 > v29) {
            unint64_t v29 = v30 >> 1;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v68, v31);
            unint64_t v27 = (int *)v66;
            long long v25 = v67;
          }
          else
          {
            int v32 = 0;
          }
          int v33 = (int *)&v32[4 * v28];
          *int v33 = v12;
          uint64_t v26 = v33 + 1;
          while (v25 != v27)
          {
            int v34 = *--v25;
            *--int v33 = v34;
          }
          uint64_t v66 = v33;
          int v67 = v26;
          int v68 = (int *)&v32[4 * v31];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *int v67 = v12;
          uint64_t v26 = v25 + 1;
        }
        int v67 = v26;
        if (v11)
        {
          for (unint64_t i = *(uint64_t **)(a3 + 8); i; unint64_t i = (uint64_t *)*i)
          {
            int v36 = *((_DWORD *)i + 7);
            if (v12 >= v36)
            {
              if (v36 >= v12) {
                goto LABEL_67;
              }
              ++i;
            }
          }
          int v37 = v12 + a4;
          uint64_t v38 = v64;
          if (v64 >= (int *)v65)
          {
            uint64_t v40 = (int *)__p;
            uint64_t v41 = ((char *)v64 - __p) >> 2;
            unint64_t v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v43 = v65 - __p;
            if ((v65 - __p) >> 1 > v42) {
              unint64_t v42 = v43 >> 1;
            }
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v44 = v42;
            }
            if (v44)
            {
              unsigned int v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v65, v44);
              uint64_t v40 = (int *)__p;
              uint64_t v38 = v64;
            }
            else
            {
              unsigned int v45 = 0;
            }
            long long v46 = &v45[4 * v41];
            *(_DWORD *)long long v46 = v37;
            unint64_t v39 = (int *)(v46 + 4);
            while (v38 != v40)
            {
              int v47 = *--v38;
              *((_DWORD *)v46 - 1) = v47;
              v46 -= 4;
            }
            std::string __p = v46;
            int v65 = &v45[4 * v44];
            if (v40) {
              operator delete(v40);
            }
          }
          else
          {
            *uint64_t v64 = v37;
            unint64_t v39 = v64 + 1;
          }
          uint64_t v64 = v39;
        }
      }
LABEL_67:
      BOOL v51 = v7-- <= 0;
    }
    while (!v51);
    unint64_t v49 = v66;
    long long v48 = v67;
    int v50 = (char *)(v67 - 1);
    BOOL v51 = v66 != v67 && v50 > v66;
    if (v51)
    {
      unint64_t v52 = (char *)v66 + 4;
      a6 = v60;
      do
      {
        int v53 = *((_DWORD *)v52 - 1);
        *((_DWORD *)v52 - 1) = *(_DWORD *)v50;
        *(_DWORD *)int v50 = v53;
        v50 -= 4;
        BOOL v54 = v52 >= v50;
        v52 += 4;
      }
      while (!v54);
    }
    else
    {
      a6 = v60;
    }
  }
  long long v55 = (char *)(v64 - 1);
  if (__p != (char *)v64 && v55 > __p)
  {
    int v57 = __p + 4;
    do
    {
      int v58 = *((_DWORD *)v57 - 1);
      *((_DWORD *)v57 - 1) = *(_DWORD *)v55;
      *(_DWORD *)long long v55 = v58;
      v55 -= 4;
      BOOL v54 = v57 >= v55;
      v57 += 4;
    }
    while (!v54);
  }
  *a6 = v49;
  a6[1] = v48;
  a6[2] = v68;
  a6[3] = __p;
  uint64_t v59 = v65;
  a6[4] = v64;
  a6[5] = v59;
}

void sub_1B226E274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B226E2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

BOOL kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetRawLattice(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  int v6 = *(_DWORD *)(a1 + 308);
  memset(v51, 0, sizeof(v51));
  int v52 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>((uint64_t)v51, v6 / 2 + 3);
  if (**(_DWORD **)(a1 + 96))
  {
    uint64_t v7 = 0;
    uint64_t v40 = ((unint64_t)(v4 - v5) >> 3);
    uint64_t v41 = ((unint64_t)(v4 - v5) >> 3) - 1;
    do
    {
      unsigned int v50 = 0;
      for (uint64_t i = *(unsigned int *)(*(void *)(a1 + 96) + 8 * v7); ; LODWORD(i) = *(_DWORD *)(v9 + 36 * i + 12))
      {
        unsigned int v50 = i;
        if (!i) {
          break;
        }
        uint64_t v9 = *(void *)(a1 + 360);
        int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
        v48[0] = &v50;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v51, &v50, (uint64_t)&std::piecewise_construct, v48)+ 5) = v10;
      }
      if (!v7 && (*(int (**)(uint64_t))(*(void *)a2 + 160))(a2) >= 1)
      {
        int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
        (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, (v11 - 1));
      }
      unsigned int v50 = 0;
      for (uint64_t j = *(unsigned int *)(*(void *)(a1 + 120) + 8 * v7); ; LODWORD(j) = *(_DWORD *)(v13 + 36 * j + 12))
      {
        unsigned int v50 = j;
        if (!j) {
          break;
        }
        uint64_t v13 = *(void *)(a1 + 360);
        int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
        v48[0] = &v50;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v51, &v50, (uint64_t)&std::piecewise_construct, v48)+ 5) = v14;
      }
      ++v7;
    }
    while (v7 != v40);
    if (kaldi::g_kaldi_verbose_level > 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v48, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"init:", 5);
      float v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" buckets:", 9);
      float v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" load:", 6);
      uint64_t v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" max:", 5);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v48);
    }
    uint64_t v19 = 0;
    LODWORD(v20) = 0;
    uint64_t v21 = 0;
    int v22 = 0;
    unint64_t v42 = (void *)(a1 + 320);
LABEL_19:
    unsigned int v50 = 0;
    uint64_t v39 = 8 * v19;
    for (unsigned int k = *(_DWORD *)(*(void *)(a1 + 96) + 8 * v19); ; unsigned int k = *(_DWORD *)(v26 + 36 * v43 + 12))
    {
      unsigned int v50 = k;
      if (!k) {
        break;
      }
      v48[0] = &v50;
      uint64_t v24 = v21;
      uint64_t v25 = v19;
      uint64_t v20 = *((unsigned int *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v51, &v50, (uint64_t)&std::piecewise_construct, v48)+ 5);
      uint64_t v26 = *(void *)(a1 + 360);
      unsigned int v43 = v50;
      for (uint64_t m = *(unsigned int *)(v26 + 36 * v50 + 8); m; uint64_t m = *(unsigned int *)(v28 + 24 * m + 16))
      {
        uint64_t v28 = *(void *)(a1 + 376);
        int v29 = *((_DWORD *)std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(v51, (unsigned int *)(v28 + 24 * m))+ 5);
        uint64_t v30 = v28 + 24 * m;
        int v31 = *(_DWORD *)(v30 + 4);
        LODWORD(v48[0]) = *(_DWORD *)(v30 + 20) & 0x7FFFFFFF;
        HIDWORD(v48[0]) = v31;
        v48[1] = *(_DWORD **)(v30 + 8);
        int v49 = v29;
        if (v31 == *(_DWORD *)(a1 + 284)) {
          HIDWORD(v48[0]) = 0;
        }
        (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)a2 + 208))(a2, v20, v48);
        ++v22;
      }
      uint64_t v19 = v25;
      if (v25 == v41)
      {
        int v32 = std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(v42, &v50);
        uint64_t v21 = v24;
        if (*(float *)(a1 + 144) == INFINITY)
        {
          uint64_t v46 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v20, &v46);
        }
        else
        {
          if (*((float *)v32 + 5) == INFINITY) {
            continue;
          }
          v47[0] = *((_DWORD *)v32 + 5);
          v47[1] = 0;
          (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 184))(a2, v20, v47);
        }
        uint64_t v21 = (v24 + 1);
      }
      else
      {
        uint64_t v21 = v24;
      }
    }
    unsigned int v50 = 0;
    for (uint64_t n = *(unsigned int *)(*(void *)(a1 + 120) + v39); ; LODWORD(n) = *(_DWORD *)(v34 + 36 * n + 12))
    {
      unsigned int v50 = n;
      if (!n)
      {
        if (++v19 == v40)
        {
          if (kaldi::g_kaldi_verbose_level > 2)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v48, 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"GetRawLattice: NumStates ", 25);
            (*(void (**)(uint64_t))(*(void *)a2 + 160))(a2);
            int v36 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" NumArcs ", 9);
            int v37 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" NumFinal ", 10);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v48);
          }
          BOOL v17 = v20 != 0;
          goto LABEL_45;
        }
        goto LABEL_19;
      }
      uint64_t v34 = *(void *)(a1 + 360);
      v48[0] = &v50;
      uint64_t v20 = *((unsigned int *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v51, &v50, (uint64_t)&std::piecewise_construct, v48)+ 5);
      long long v35 = std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(v42, &v50);
      if (*(float *)(a1 + 144) == INFINITY)
      {
        uint64_t v44 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v20, &v44);
      }
      else
      {
        if (*((float *)v35 + 5) == INFINITY) {
          continue;
        }
        v45[0] = *((_DWORD *)v35 + 5);
        v45[1] = 0;
        (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 184))(a2, v20, v45);
      }
      uint64_t v21 = (v21 + 1);
    }
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"GetRawLattice: no tokens active on frame 0: not producing lattice.", 66);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
  }
  BOOL v17 = 0;
LABEL_45:
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v51);
  return v17;
}

void sub_1B226E9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v11 - 144);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeterminizeLattice(uint64_t a1, uint64_t a2)
{
}

void sub_1B226EB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::loadLmeData(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  uint64_t v4 = (uint64_t *)a4;
  if (*(unsigned char *)(a1 + 452) && (quasar::SpeechRequestData::isLoadLmeProfile(*a4) & 1) == 0)
  {
    uint64_t v90 = *(void *)(a1 + 480);
    if (a2 + 320 != v90)
    {
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__assign_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>((uint64_t *)(a2 + 320), *(void *)v90, *(void *)(v90 + 8), (uint64_t)(*(void *)(v90 + 8) - *(void *)v90) >> 5);
      uint64_t v90 = *(void *)(a1 + 480);
    }
    std::allocate_shared[abi:ne180100]<quasar::SymbolTableList,std::allocator<quasar::SymbolTableList>,quasar::SymbolTableList&,void>(*(uint64_t **)(v90 + 88), &v109);
    uint64_t v91 = *a3;
    uint64_t v92 = (long long *)(*a3 + 472);
    long long v93 = v109;
    long long v109 = 0uLL;
    int v94 = *(std::__shared_weak_count **)(v91 + 480);
    *uint64_t v92 = v93;
    if (v94)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v94);
      if (*((void *)&v109 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v109 + 1));
      }
    }
    uint64_t v95 = *(void *)(a1 + 480);
    int v96 = (uint64_t *)(*a3 + 584);
    if (v96 != (uint64_t *)(v95 + 64)) {
      std::vector<quasar::LmeInfo>::__assign_with_size[abi:ne180100]<quasar::LmeInfo*,quasar::LmeInfo*>(v96, *(long long **)(v95 + 64), *(long long **)(v95 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v95 + 72) - *(void *)(v95 + 64)) >> 3));
    }
  }
  else
  {
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__clear[abi:ne180100]((uint64_t *)(a2 + 320));
    *(void *)(a2 + 352) = *(void *)(a2 + 344);
    std::__tree<int>::destroy(a2 + 368, *(void **)(a2 + 376));
    *(void *)(a2 + 376) = 0;
    *(void *)(a2 + 384) = 0;
    *(void *)(a2 + 368) = a2 + 376;
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 400);
    *(void *)(a2 + 392) = 0;
    *(void *)(a2 + 400) = 0;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    std::vector<quasar::LmeInfo>::__clear[abi:ne180100]((uint64_t *)(*a3 + 584));
    quasar::SymbolTableList::clear(*(quasar::SymbolTableList **)(*a3 + 472));
    uint64_t v9 = *(uint64_t **)(*a3 + 472);
    int v10 = *(std::__shared_weak_count **)(a1 + 1440);
    uint64_t v136 = *(void *)(a1 + 1432);
    uint64_t v137 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    quasar::SymbolTableList::addSymbolTable(v9, &v136, 0, -1);
    if (v137) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v137);
    }
    if (*(unsigned char *)(a1 + 452))
    {
      quasar::SpeechRequestData::getRecogRequestTimer(*v4, &v109);
      uint64_t v11 = (double *)v109;
      uint64_t v97 = a2 + 392;
      uint64_t v98 = a2;
      uint64_t v100 = (uint64_t *)(a2 + 320);
      *(double *)(a1 + 872) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v12) - *v11;
      if (*((void *)&v109 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v109 + 1));
      }
      long long v134 = 0u;
      long long v133 = 0u;
      int v135 = 1065353216;
      v132[0] = 0;
      v132[1] = 0;
      int v131 = (uint64_t *)v132;
      uint64_t v99 = a3;
      int v103 = v4;
      if (*(unsigned char *)(a1 + 452))
      {
        unint64_t v13 = 0;
        while (1)
        {
          LmeDataStreams = (void *)quasar::SpeechRequestData::getLmeDataStreams((quasar::SpeechRequestData *)*v4);
          if (v13 >= (uint64_t)(LmeDataStreams[1] - *LmeDataStreams) >> 4) {
            goto LABEL_89;
          }
          long long v15 = *(_OWORD *)(*(void *)quasar::SpeechRequestData::getLmeDataStreams((quasar::SpeechRequestData *)*v4)
                          + 16 * v13);
          long long v16 = v15;
          if (*((void *)&v15 + 1))
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
            long long v130 = v15;
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          else
          {
            long long v130 = (unint64_t)v15;
          }
          int v17 = quasar::OnlineTransducerGraphSearchDecoder::readAndCheckLmeData(a1, (uint64_t **)&v130);
          if (*((void *)&v16 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
          }
          memset(&v129, 0, sizeof(v129));
          if ((v17 & 0xFFFFFFFD) == 1)
          {
            uint64_t v19 = *(void **)v16;
            uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
            if (v18) {
              atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v101 = v18;
            std::string::operator=(&v129, (const std::string *)(v16 + 16));
            uint64_t v128 = 0;
            LODWORD(v126) = v19[20];
            *(void *)&long long v109 = &v126;
            uint64_t v128 = *((int *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v131, (int *)&v126, (uint64_t)&std::piecewise_construct, (unsigned int **)&v109)+ 8);
            uint64_t v21 = v19[20];
            uint64_t v20 = v19[21];
            LODWORD(v126) = v21;
            *(void *)&long long v109 = &v126;
            int v22 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v131, (int *)&v126, (uint64_t)&std::piecewise_construct, (unsigned int **)&v109);
            *((_DWORD *)v22 + 8) += v20 - v21 + 1;
            if (v128)
            {
              std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<quasar::QsrTextSymbolTable> const&,long long &,void>(v19 + 28, &v128, &v126);
              a3 = v99;
            }
            else
            {
              uint64_t v24 = (std::__shared_weak_count *)v19[29];
              uint64_t v126 = v19[28];
              uint64_t v127 = v24;
              a3 = v99;
              if (v24) {
                atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
              }
            }
            if (quasar::gLogLevel >= 4)
            {
              long long v124 = 0u;
              long long v125 = 0u;
              long long v122 = 0u;
              long long v123 = 0u;
              long long v120 = 0u;
              long long v121 = 0u;
              long long v118 = 0u;
              long long v119 = 0u;
              long long v116 = 0u;
              long long v117 = 0u;
              long long v115 = 0u;
              long long v113 = 0u;
              long long v114 = 0u;
              long long v111 = 0u;
              long long v112 = 0u;
              long long v109 = 0u;
              *(_OWORD *)std::string __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"LME container ", 14);
              uint64_t v25 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": offset ", 9);
              uint64_t v26 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" firstKey ", 10);
              unint64_t v27 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" lastKey ", 9);
              std::ostream::operator<<();
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v109);
            }
            uint64_t v28 = *(uint64_t **)(*a3 + 472);
            uint64_t v107 = v126;
            long long v108 = v127;
            if (v127) {
              atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unsigned int v23 = quasar::SymbolTableList::addSymbolTable(v28, &v107, v128 + v19[20], v13);
            if (v108) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v108);
            }
            if (v23)
            {
              int v29 = (unsigned __int8 *)v19[25];
              uint64_t v30 = (unsigned __int8 *)(v19 + 26);
              if (v29 != (unsigned __int8 *)(v19 + 26))
              {
                int v104 = 0;
                while (1)
                {
                  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 496), v29 + 32))
                  {
                    uint64_t v31 = *((void *)v29 + 7);
                    if (v31)
                    {
                      if (((*(uint64_t (**)(uint64_t))(*(void *)v31 + 24))(v31) & 0x80000000) == 0)
                      {
                        uint64_t v32 = *((void *)v29 + 7);
                        uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32);
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 40))(v32, v33))
                        {
                          *(void *)&long long v109 = v29 + 32;
                          uint64_t v34 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v133, v29 + 32, (uint64_t)&std::piecewise_construct, (long long **)&v109);
                          if (v128) {
                            std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::quasar::OffsetOutputLabelMapper,void>();
                          }
                          uint64_t v42 = *((void *)v29 + 8);
                          *(void *)&long long v109 = *((void *)v29 + 7);
                          *((void *)&v109 + 1) = v42;
                          if (v42) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
                          }
                          std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::push_back[abi:ne180100]((uint64_t *)v34 + 5, &v109);
                          if (*((void *)&v109 + 1)) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v109
                          }
                                                                                     + 1));
                          int v104 = 1;
                          goto LABEL_63;
                        }
                      }
                    }
                    if (quasar::gLogLevel >= 4)
                    {
                      long long v124 = 0u;
                      long long v125 = 0u;
                      long long v122 = 0u;
                      long long v123 = 0u;
                      long long v120 = 0u;
                      long long v121 = 0u;
                      long long v118 = 0u;
                      long long v119 = 0u;
                      long long v116 = 0u;
                      long long v117 = 0u;
                      long long v115 = 0u;
                      long long v113 = 0u;
                      long long v114 = 0u;
                      long long v111 = 0u;
                      long long v112 = 0u;
                      long long v109 = 0u;
                      *(_OWORD *)std::string __p = 0u;
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
                      long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"Ignoring null or arc-less FST for template ", 43);
                      int v36 = (char)v29[55];
                      if (v36 >= 0) {
                        uint64_t v37 = (uint64_t)(v29 + 32);
                      }
                      else {
                        uint64_t v37 = *((void *)v29 + 4);
                      }
                      if (v36 >= 0) {
                        uint64_t v38 = v29[55];
                      }
                      else {
                        uint64_t v38 = *((void *)v29 + 5);
                      }
LABEL_57:
                      uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" in stream # ", 13);
                      uint64_t v41 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)".", 1);
                      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v109);
                    }
                  }
                  else if (quasar::gLogLevel >= 4)
                  {
                    long long v124 = 0u;
                    long long v125 = 0u;
                    long long v122 = 0u;
                    long long v123 = 0u;
                    long long v120 = 0u;
                    long long v121 = 0u;
                    long long v118 = 0u;
                    long long v119 = 0u;
                    long long v116 = 0u;
                    long long v117 = 0u;
                    long long v115 = 0u;
                    long long v113 = 0u;
                    long long v114 = 0u;
                    long long v111 = 0u;
                    long long v112 = 0u;
                    long long v109 = 0u;
                    *(_OWORD *)std::string __p = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
                    long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"Ignoring unsupported template ", 30);
                    int v39 = (char)v29[55];
                    if (v39 >= 0) {
                      uint64_t v37 = (uint64_t)(v29 + 32);
                    }
                    else {
                      uint64_t v37 = *((void *)v29 + 4);
                    }
                    if (v39 >= 0) {
                      uint64_t v38 = v29[55];
                    }
                    else {
                      uint64_t v38 = *((void *)v29 + 5);
                    }
                    goto LABEL_57;
                  }
LABEL_63:
                  unsigned int v43 = (unsigned __int8 *)*((void *)v29 + 1);
                  if (v43)
                  {
                    do
                    {
                      uint64_t v44 = v43;
                      unsigned int v43 = *(unsigned __int8 **)v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v44 = (unsigned __int8 *)*((void *)v29 + 2);
                      BOOL v45 = *(void *)v44 == (void)v29;
                      int v29 = v44;
                    }
                    while (!v45);
                  }
                  int v29 = v44;
                  if (v44 == v30) {
                    goto LABEL_72;
                  }
                }
              }
              int v104 = 0;
LABEL_72:
              unsigned int v23 = v104;
              a3 = v99;
            }
            else
            {
              int v17 = 6;
            }
            if (v127) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v127);
            }
            if (v101) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v101);
            }
          }
          else
          {
            unsigned int v23 = 0;
          }
          uint64_t v46 = *a3;
          LODWORD(v109) = *(_DWORD *)(v16 + 40);
          *(void *)((char *)&v109 + 4) = __PAIR64__(v23, v17);
          if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)&v129.__r_.__value_.__l.__data_;
            *(void *)&long long v111 = *((void *)&v129.__r_.__value_.__l + 2);
          }
          std::vector<quasar::LmeInfo>::emplace_back<quasar::LmeInfo>((uint64_t *)(v46 + 584), (uint64_t *)&v109);
          if (SBYTE7(v111) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
            break;
          }
          if (*((void *)&v16 + 1)) {
            goto LABEL_84;
          }
LABEL_85:
          ++v13;
          uint64_t v4 = v103;
          if (!*(unsigned char *)(a1 + 452)) {
            goto LABEL_89;
          }
        }
        operator delete(v129.__r_.__value_.__l.__data_);
        if (!*((void *)&v16 + 1)) {
          goto LABEL_85;
        }
LABEL_84:
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
        goto LABEL_85;
      }
LABEL_89:
      int v47 = (void *)quasar::SpeechRequestData::getLmeDataStreams((quasar::SpeechRequestData *)*v4);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*a3 + 592) - *(void *)(*a3 + 584)) >> 3) != (uint64_t)(v47[1] - *v47) >> 4
        && quasar::gLogLevel >= 2)
      {
        long long v124 = 0u;
        long long v125 = 0u;
        long long v122 = 0u;
        long long v123 = 0u;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v116 = 0u;
        long long v117 = 0u;
        long long v115 = 0u;
        long long v113 = 0u;
        long long v114 = 0u;
        long long v111 = 0u;
        long long v112 = 0u;
        long long v109 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"lmeDataStreams and lmeInfos size mismatch. Should NEVER happen", 62);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v109);
      }
      *(void *)(a1 + 2248) = *(void *)(a1 + 2240);
      quasar::SpeechRequestData::getRecogRequestTimer(*v4, &v109);
      kaldi::Timer::GetSeconds((kaldi::Timer *)5, v49);
      if (*((void *)&v109 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v109 + 1));
      }
      unsigned int v50 = (long long *)v134;
      if ((void)v134)
      {
        uint64_t v105 = (int *)(a1 + 892);
        long long v106 = (int *)(a1 + 888);
        uint64_t v102 = (std::string *)(a1 + 2240);
        do
        {
          if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 496), (unsigned __int8 *)v50 + 16))
          {
            BOOL v51 = (char *)*((void *)v50 + 5);
            int v52 = (char *)*((void *)v50 + 6);
            if (v51 != v52)
            {
              if ((unint64_t)(v52 - v51) >= 0x11 && *v106 && *v105) {
                std::allocate_shared[abi:ne180100]<fst::quasar::MergeTrieFst,std::allocator<fst::quasar::MergeTrieFst>,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,void>((uint64_t)&v129, (uint64_t)v50 + 40, v106, v105, v50 + 1);
              }
              uint64_t v57 = *(void *)v51;
              int v58 = (std::__shared_weak_count *)*((void *)v51 + 1);
              if (v58) {
                atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v59 = *(_DWORD *)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at(a1 + 576, (const void **)v50 + 2);
              if (v58)
              {
                atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
                *((void *)&v109 + 1) = v57;
                __p[0] = v58;
                atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              else
              {
                *((void *)&v109 + 1) = v57;
                __p[0] = 0;
              }
              LODWORD(v109) = v59;
              LODWORD(__p[1]) = 0;
              std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](v100, (uint64_t)&v109);
              if (__p[0]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0]);
              }
              if (v58) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v58);
              }
              if (*(void *)(a1 + 2192))
              {
                int v60 = quasar::QsrTextSymbolTable::Find(*(void *)(a1 + 1432), (uint64_t)(v50 + 1));
                int v61 = v60;
                unint64_t v62 = *(void *)(a1 + 2248);
                unint64_t v63 = *(void *)(a1 + 2256);
                if (v62 >= v63)
                {
                  uint64_t v65 = (uint64_t)(v62 - v102->__r_.__value_.__r.__words[0]) >> 4;
                  unint64_t v66 = v65 + 1;
                  if ((unint64_t)(v65 + 1) >> 60) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v67 = v63 - v102->__r_.__value_.__r.__words[0];
                  if (v67 >> 3 > v66) {
                    unint64_t v66 = v67 >> 3;
                  }
                  if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v68 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v68 = v66;
                  }
                  if (v68) {
                    uint64_t v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 2256, v68);
                  }
                  else {
                    uint64_t v69 = 0;
                  }
                  uint64_t v70 = &v69[16 * v65];
                  *(_DWORD *)uint64_t v70 = v61;
                  *((void *)v70 + 1) = v57;
                  int v71 = *(char **)(a1 + 2248);
                  uint64_t v72 = *(char **)(a1 + 2240);
                  unsigned __int8 v73 = v70;
                  if (v71 != v72)
                  {
                    do
                    {
                      *((_OWORD *)v73 - 1) = *((_OWORD *)v71 - 1);
                      v73 -= 16;
                      v71 -= 16;
                    }
                    while (v71 != v72);
                    int v71 = (char *)v102->__r_.__value_.__r.__words[0];
                  }
                  *(void *)(a1 + 2240) = v73;
                  uint64_t v64 = v70 + 16;
                  *(void *)(a1 + 2248) = v70 + 16;
                  *(void *)(a1 + 2256) = &v69[16 * v68];
                  if (v71) {
                    operator delete(v71);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v62 = v60;
                  *(void *)(v62 + 8) = v57;
                  uint64_t v64 = (char *)(v62 + 16);
                }
                *(void *)(a1 + 2248) = v64;
              }
              if (v58) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v58);
              }
            }
          }
          else if (quasar::gLogLevel >= 4)
          {
            long long v124 = 0u;
            long long v125 = 0u;
            long long v122 = 0u;
            long long v123 = 0u;
            long long v120 = 0u;
            long long v121 = 0u;
            long long v118 = 0u;
            long long v119 = 0u;
            long long v116 = 0u;
            long long v117 = 0u;
            long long v115 = 0u;
            long long v113 = 0u;
            long long v114 = 0u;
            long long v111 = 0u;
            long long v112 = 0u;
            long long v109 = 0u;
            *(_OWORD *)std::string __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
            int v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"Ignoring unsupported template ", 30);
            int v54 = *((char *)v50 + 39);
            if (v54 >= 0) {
              uint64_t v55 = (uint64_t)(v50 + 1);
            }
            else {
              uint64_t v55 = *((void *)v50 + 2);
            }
            if (v54 >= 0) {
              uint64_t v56 = *((unsigned __int8 *)v50 + 39);
            }
            else {
              uint64_t v56 = *((void *)v50 + 3);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v109);
          }
          unsigned int v50 = *(long long **)v50;
        }
        while (v50);
      }
      quasar::SpeechRequestData::getRecogRequestTimer(*v103, &v109);
      kaldi::Timer::GetSeconds((kaldi::Timer *)5, v74);
      if (*((void *)&v109 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v109 + 1));
      }
      if (quasar::gLogLevel >= 4)
      {
        long long v124 = 0u;
        long long v125 = 0u;
        long long v122 = 0u;
        long long v123 = 0u;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v116 = 0u;
        long long v117 = 0u;
        long long v115 = 0u;
        long long v113 = 0u;
        long long v114 = 0u;
        long long v111 = 0u;
        long long v112 = 0u;
        long long v109 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v109);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109, (uint64_t)"lmeMergeInitTime ", 17);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v109);
      }
      int v75 = v100;
      quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels((const std::string *)a1, v99, (quasar::SpeechRequestData **)v103, v100, v98 + 344, (quasar::Location *)(v98 + 232), (uint64_t *)&v109);
      long long v76 = v109;
      long long v109 = 0uLL;
      std::string::size_type v77 = *(std::__shared_weak_count **)(v98 + 464);
      *(_OWORD *)(v97 + 64) = v76;
      if (v77)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v77);
        if (*((void *)&v109 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v109 + 1));
        }
      }
      quasar::OnlineTransducerGraphSearchDecoder::appendEmptyFsts((void *)a1, v100);
      uint64_t v78 = *(void *)(a1 + 856);
      uint64_t v79 = *(void *)(a1 + 864);
      if (v79) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v79 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v80 = *(std::__shared_weak_count **)(v98 + 400);
      *(void *)(v98 + 392) = v78;
      *(void *)(v98 + 400) = v79;
      if (v80) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v80);
      }
      quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies::clear(*(quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies **)(a1 + 480));
      long long v81 = *(uint64_t **)(a1 + 480);
      if (v81 != v100)
      {
        std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__assign_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(v81, *(void *)(v98 + 320), *(void *)(v98 + 328), (uint64_t)(*(void *)(v98 + 328) - *(void *)(v98 + 320)) >> 5);
        int v75 = *(uint64_t **)(a1 + 480);
      }
      if (v75 + 3 != (uint64_t *)(v98 + 344))
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v75 + 24, *(char **)(v98 + 344), *(void *)(v98 + 352), (uint64_t)(*(void *)(v98 + 352) - *(void *)(v98 + 344)) >> 2);
        int v75 = *(uint64_t **)(a1 + 480);
      }
      uint64_t v82 = *(void *)(a1 + 856);
      uint64_t v83 = *(void *)(a1 + 864);
      if (v83) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
      }
      int v84 = (std::__shared_weak_count *)v75[7];
      v75[6] = v82;
      v75[7] = v83;
      if (v84) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v84);
      }
      uint64_t v85 = *v99;
      uint64_t v86 = (uint64_t *)(*(void *)(a1 + 480) + 64);
      if (v86 != (uint64_t *)(*v99 + 584))
      {
        std::vector<quasar::LmeInfo>::__assign_with_size[abi:ne180100]<quasar::LmeInfo*,quasar::LmeInfo*>(v86, *(long long **)(v85 + 584), *(long long **)(v85 + 592), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v85 + 592) - *(void *)(v85 + 584)) >> 3));
        uint64_t v85 = *v99;
      }
      std::allocate_shared[abi:ne180100]<quasar::SymbolTableList,std::allocator<quasar::SymbolTableList>,quasar::SymbolTableList&,void>(*(uint64_t **)(v85 + 472), &v109);
      uint64_t v87 = *(void *)(a1 + 480);
      long long v88 = v109;
      long long v109 = 0uLL;
      long long v89 = *(std::__shared_weak_count **)(v87 + 96);
      *(_OWORD *)(v87 + 88) = v88;
      if (v89)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v89);
        if (*((void *)&v109 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v109 + 1));
        }
      }
      std::__tree<int>::destroy((uint64_t)&v131, v132[0]);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::~__hash_table((uint64_t)&v133);
    }
  }
}

void sub_1B226F8FC(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v2 - 216, *(void **)(v1 + 56));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::~__hash_table(v2 - 192);
  _Unwind_Resume(a1);
}

uint64_t **quasar::OnlineTransducerGraphSearchDecoder::setUpDecoderPassData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 1432);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v5 + 96) + 112))(*(void *)(v5 + 96));
  if ((v6 & 0x8000000000000000) == 0) {
    v6 += *(void *)(v5 + 120);
  }
  *(_DWORD *)(a2 + 448) = v6;
  *(void *)(a2 + 688) = *(unsigned int *)(a1 + 1936);
  if (a2 + 696 != a1 + 1896)
  {
    *(_DWORD *)(a2 + 728) = *(_DWORD *)(a1 + 1928);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((void *)(a2 + 696), *(uint64_t **)(a1 + 1912), 0);
  }
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__clear[abi:ne180100]((uint64_t *)(a2 + 248));
  uint64_t v7 = *(uint64_t **)(a1 + 2048);
  uint64_t v8 = *(uint64_t **)(a1 + 2056);
  while (v7 != v8)
  {
    *(void *)&long long v41 = *v7;
    uint64_t v9 = v7[1];
    *((void *)&v41 + 1) = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    if (!*(unsigned char *)(a1 + 2124) && !*(unsigned char *)(a1 + 440)) {
      goto LABEL_28;
    }
    uint64_t v10 = *v7;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v10, (uint64_t)&__p, &lpsrc);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (lpsrc)
    {
      if (v11)
      {
        uint64_t v12 = (uint64_t)v11;
        unint64_t v13 = v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPath(*v7, &__p);
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(*v7, &v36);
        quasar::StateAccessRecordingFst::getWrappedFst(v12, &v34);
        std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string,std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void>((long long *)&__p, (uint64_t)&v36, &v34, &v37);
        long long v14 = v37;
        long long v37 = 0uLL;
        long long v15 = (std::__shared_weak_count *)*((void *)&v41 + 1);
        long long v41 = v14;
        if (v15)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          if (*((void *)&v37 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
          }
        }
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (!v13) {
            goto LABEL_26;
          }
LABEL_25:
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          goto LABEL_26;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v13) {
          goto LABEL_25;
        }
      }
    }
LABEL_26:
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
LABEL_28:
    std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::push_back[abi:ne180100]((uint64_t *)(a2 + 248), &v41);
    if (*((void *)&v41 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
    }
    v7 += 2;
  }
  if (a2 + 272 != a1 + 2096) {
    std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>>*>(a2 + 272, *(uint64_t **)(a1 + 2096), *(uint64_t **)(a1 + 2104), (uint64_t)(*(void *)(a1 + 2104) - *(void *)(a1 + 2096)) >> 4);
  }
  long long v16 = (void **)(a2 + 296);
  if (a2 + 296 != a1 + 2000) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 + 296), *(char **)(a1 + 2000), *(void *)(a1 + 2008), (uint64_t)(*(void *)(a1 + 2008) - *(void *)(a1 + 2000)) >> 2);
  }
  if (*(float *)(a1 + 2120) > 0.0)
  {
    uint64_t v17 = *(void *)(*(void *)a3 + 24);
    uint64_t v18 = *(void *)(v17 + 272);
    uint64_t v19 = *(void *)(v17 + 280);
    if (v18 != v19)
    {
      uint64_t v20 = (void *)(a2 + 312);
      uint64_t v21 = *(char **)(a2 + 304);
      do
      {
        int v22 = *(_DWORD *)(*(void *)v18 + 12);
        if ((unint64_t)v21 >= *v20)
        {
          uint64_t v24 = (char *)*v16;
          uint64_t v25 = (v21 - (unsigned char *)*v16) >> 2;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v27 = *v20 - (void)v24;
          if (v27 >> 1 > v26) {
            unint64_t v26 = v27 >> 1;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            int v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 312, v28);
            uint64_t v24 = *(char **)(a2 + 296);
            uint64_t v21 = *(char **)(a2 + 304);
          }
          else
          {
            int v29 = 0;
          }
          uint64_t v30 = &v29[4 * v25];
          *(_DWORD *)uint64_t v30 = v22;
          unsigned int v23 = v30 + 4;
          while (v21 != v24)
          {
            int v31 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v30 - 1) = v31;
            v30 -= 4;
          }
          *(void *)(a2 + 296) = v30;
          *(void *)(a2 + 304) = v23;
          *(void *)(a2 + 312) = &v29[4 * v28];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v21 = v22;
          unsigned int v23 = v21 + 4;
        }
        *(void *)(a2 + 304) = v23;
        v18 += 16;
        uint64_t v21 = v23;
      }
      while (v18 != v19);
    }
  }
  if (a2 + 408 != a1 + 768)
  {
    *(_DWORD *)(a2 + 440) = *(_DWORD *)(a1 + 800);
    std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<int,std::pair<int,int>>,void *> *>>((void *)(a2 + 408), *(void **)(a1 + 784), 0);
  }
  __n128 result = (uint64_t **)(a2 + 368);
  if (a2 + 368 != a1 + 832) {
    return std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,float>,std::__tree_node<std::__value_type<int,float>,void *> *,long>>(result, *(void **)(a1 + 832), (void *)(a1 + 840));
  }
  return result;
}

void sub_1B226FEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineTransducerGraphSearchDecoder::decoderObjectSetup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)a4 + 24);
  float v6 = *(float *)(a1 + 2120);
  if (v6 <= 0.0)
  {
    uint64_t v7 = *(char **)(v5 + 272);
    uint64_t v8 = *(char **)(v5 + 280);
  }
  else
  {
    uint64_t v7 = *(char **)(v5 + 272);
    uint64_t v8 = *(char **)(v5 + 280);
    float v9 = 0.0;
    if (v7 != v8)
    {
      uint64_t v10 = *(char **)(v5 + 272);
      do
      {
        uint64_t v11 = *(void *)v10;
        v10 += 16;
        float v9 = v9 + *(float *)(v11 + 12);
      }
      while (v10 != v8);
    }
    if (v9 >= v6)
    {
      float v12 = v6 / v9;
      if (quasar::gLogLevel >= 5)
      {
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        *(_OWORD *)uint64_t v20 = 0u;
        *(_OWORD *)uint64_t v21 = 0u;
        *(_OWORD *)uint64_t v18 = 0u;
        long long v19 = 0u;
        long long v17 = 0u;
        memset(__str, 0, sizeof(__str));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Extra LM weight exceeds max-total-extra-weight, rescaling with ", 63);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__str);
        uint64_t v7 = *(char **)(v5 + 272);
        uint64_t v8 = *(char **)(v5 + 280);
      }
      if (v7 != v8)
      {
        unint64_t v13 = v7;
        do
        {
          uint64_t v14 = *(void *)v13;
          v13 += 16;
          *(float *)(v14 + 12) = v12 * *(float *)(v14 + 12);
        }
        while (v13 != v8);
      }
    }
  }
  if (((v8 - v7) >> 4) + ((uint64_t)(*(void *)(a1 + 2008) - *(void *)(a1 + 2000)) >> 2) == (uint64_t)(*(void *)(*(void *)(a1 + 1024) + 8) - **(void **)(a1 + 1024)) >> 4) {
    std::allocate_shared[abi:ne180100]<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,void>((uint64_t)v15, *(void *)(a1 + 1960));
  }
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)uint64_t v21 = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  memset(__str, 0, sizeof(__str));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(__str, "some FST/NN LMs failed to load");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
}

void sub_1B2270DEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59)
{
}

void sub_1B2270E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::~FstPrinter((uint64_t)&a62);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a14);
  JUMPOUT(0x1B2270F98);
}

void sub_1B2270EBC()
{
}

void sub_1B2270EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a41);
  JUMPOUT(0x1B2271008);
}

void sub_1B2270F34()
{
}

void sub_1B2270F3C()
{
}

void sub_1B2270F48()
{
}

void sub_1B2270F50()
{
}

void sub_1B2270F64()
{
}

void sub_1B2270F7C()
{
}

void sub_1B2270F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

void sub_1B2270F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,char *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,char a56,void *a57)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a16);
  fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::~FstPrinter((uint64_t)&a21);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a38);
  std::__tree<std::string>::destroy((uint64_t)&a40, a41);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a43);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a45);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a47);
  a21 = &a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (__p)
  {
    a54 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<int>::destroy((uint64_t)&a56, a57);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  _Unwind_Resume(a1);
}

void sub_1B2270FB4()
{
}

void sub_1B2270FBC()
{
}

void sub_1B2270FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

void sub_1B2270FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  if (!a60) {
    JUMPOUT(0x1B2271064);
  }
  JUMPOUT(0x1B2271060);
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::createReferenceFst(uint64_t a1, long long **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (quasar::gLogLevel >= 4)
  {
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v29 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    float v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"The reference for utterance ", 28);
    uint64_t v10 = *(void *)(*(void *)a4 + 24);
    uint64_t v13 = *(void *)(v10 + 128);
    uint64_t v11 = v10 + 128;
    uint64_t v12 = v13;
    int v14 = *(char *)(v11 + 23);
    if (v14 >= 0) {
      uint64_t v15 = v11;
    }
    else {
      uint64_t v15 = v12;
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      uint64_t v16 = *(void *)(v11 + 8);
    }
    long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" is:", 4);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v29);
  }
  (*(void (**)(uint64_t))(*(void *)a5 + 224))(a5);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 200))(a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a5 + 176))(a5, v18);
  long long v19 = *a2;
  uint64_t v20 = a2[1];
  if (*a2 == v20)
  {
    uint64_t v22 = v18;
  }
  else
  {
    do
    {
      if (*((char *)v19 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v19, *((void *)v19 + 1));
      }
      else
      {
        long long v21 = *v19;
        __p.__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
      }
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 200))(a5);
      LODWORD(v29) = quasar::SymbolTableList::strToSymbolId(*(void *)(*(void *)a3 + 472), (uint64_t)&__p);
      *(void *)((char *)&v29 + 4) = v29;
      HIDWORD(v29) = v22;
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a5 + 208))(a5, v18, &v29);
      if (quasar::gLogLevel >= 4)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v29 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)p_p, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(symbol ID = ", 13);
        long long v26 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)")", 1);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v29);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      long long v19 = (long long *)((char *)v19 + 24);
      uint64_t v18 = v22;
    }
    while (v19 != v20);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a5 + 184))(a5, v22, 0.0);
}

void sub_1B2271374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::readAndCheckLmeData(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  if (!*a2)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"LME container ", 14);
      uint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" is null.", 9);
      goto LABEL_18;
    }
    return 2;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Reading LME container ", 22);
    uint64_t v5 = (void *)std::ostream::operator<<();
    float v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for user ", 10);
    int v7 = *((char *)*a2 + 39);
    if (v7 >= 0) {
      uint64_t v8 = (uint64_t)(*a2 + 2);
    }
    else {
      uint64_t v8 = (*a2)[2];
    }
    if (v7 >= 0) {
      uint64_t v9 = *((unsigned __int8 *)*a2 + 39);
    }
    else {
      uint64_t v9 = (*a2)[3];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v67);
    uint64_t v2 = *a2;
  }
  uint64_t v10 = *v2;
  if (!*v2)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"LME container data ", 19);
      int v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" is null.", 9);
      goto LABEL_18;
    }
    return 2;
  }
  uint64_t v11 = *(unsigned int *)(v10 + 268);
  if (v11 == 2)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"LME data stream ", 16);
      uint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" is null.", 9);
LABEL_18:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v67);
      return 2;
    }
    return 2;
  }
  if ((v11 & 0xFFFFFFFD) == 4) {
    return v11;
  }
  uint64_t v16 = *(unsigned __int8 *)(v10 + 199);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = *(unsigned __int8 *)(v10 + 199);
  }
  else {
    uint64_t v17 = *(void *)(v10 + 184);
  }
  uint64_t v18 = *(unsigned __int8 *)(a1 + 231);
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(a1 + 216);
  }
  if (v17 != v18) {
    goto LABEL_38;
  }
  if (v19 >= 0) {
    uint64_t v20 = (unsigned __int8 *)(a1 + 208);
  }
  else {
    uint64_t v20 = *(unsigned __int8 **)(a1 + 208);
  }
  if ((v16 & 0x80) != 0)
  {
    if (memcmp(*(const void **)(v10 + 176), v20, *(void *)(v10 + 184)))
    {
LABEL_38:
      if (quasar::gLogLevel >= 2)
      {
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v67 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"LME data stream ", 16);
        uint64_t v22 = (void *)std::ostream::operator<<();
        long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" has phone set version ", 23);
        int v24 = *(char *)(v10 + 199);
        if (v24 >= 0) {
          uint64_t v25 = v10 + 176;
        }
        else {
          uint64_t v25 = *(void *)(v10 + 176);
        }
        if (v24 >= 0) {
          uint64_t v26 = *(unsigned __int8 *)(v10 + 199);
        }
        else {
          uint64_t v26 = *(void *)(v10 + 184);
        }
        long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
        long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" which is different from model phone set version ", 49);
        int v29 = *(char *)(a1 + 231);
        if (v29 >= 0) {
          uint64_t v30 = a1 + 208;
        }
        else {
          uint64_t v30 = *(void *)(a1 + 208);
        }
        if (v29 >= 0) {
          uint64_t v31 = *(unsigned __int8 *)(a1 + 231);
        }
        else {
          uint64_t v31 = *(void *)(a1 + 216);
        }
        long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)". This data stream will not be used.", 36);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v67);
      }
      return 5;
    }
  }
  else if (*(unsigned char *)(v10 + 199))
  {
    long long v21 = (unsigned __int8 *)(v10 + 176);
    while (*v21 == *v20)
    {
      ++v21;
      ++v20;
      if (!--v16) {
        goto LABEL_53;
      }
    }
    goto LABEL_38;
  }
LABEL_53:
  if (*(unsigned char *)(v10 + 392))
  {
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v67, "Compatibility check unimplemented");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v67);
  }
  uint64_t v33 = *(void *)(v10 + 160);
  if (v33 == -1 || (uint64_t v34 = *(void *)(v10 + 168), v34 == -1))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Bad LME data (empty): stream=", 29);
      uint64_t v46 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)", symTableFirstKey=", 19);
      int v47 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", symTableLastKey=", 18);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v67);
    }
    return 6;
  }
  if (v34 < v33) {
    goto LABEL_91;
  }
  uint64_t v35 = *(void *)(v10 + 224);
  uint64_t v36 = (*(uint64_t (**)(void, unsigned __int8 *))(**(void **)(v35 + 96) + 112))(*(void *)(v35 + 96), v20);
  if ((v36 & 0x8000000000000000) == 0) {
    v36 += *(void *)(v35 + 120);
  }
  if (v34 != v36 - 1)
  {
LABEL_91:
    if (quasar::gLogLevel >= 1)
    {
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Bad LME data (invalid last key): stream=", 40);
      long long v48 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", symTableFirstKey=", 19);
      clockid_t v49 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", symTableLastKey=", 18);
      unsigned int v50 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", symTable->AvailableKey()=", 27);
      (*(void (**)(void))(**(void **)(*(void *)(v10 + 224) + 96) + 112))(*(void *)(*(void *)(v10 + 224) + 96));
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v67);
    }
    return 6;
  }
  if (v11 == 1)
  {
    if (!*(void *)(a1 + 320) || (long long v37 = *(void **)(v10 + 240), v37 == (void *)(v10 + 248)))
    {
LABEL_86:
      if (*(_DWORD *)(v10 + 264) >= *(_DWORD *)(a1 + 328)) {
        return 1;
      }
      if (quasar::gLogLevel >= 4)
      {
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v67 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"G2P model version ", 18);
        long long v45 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" in blob is older than datapack's version ", 42);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v67);
      }
    }
    else
    {
      while (1)
      {
        if (*((char *)v37 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v66, (const std::string::value_type *)v37[4], v37[5]);
        }
        else {
          std::string v66 = *(std::string *)(v37 + 4);
        }
        if (*((char *)v37 + 79) < 0) {
          std::string::__init_copy_ctor_external(&v65, (const std::string::value_type *)v37[7], v37[8]);
        }
        else {
          std::string v65 = *(std::string *)(v37 + 7);
        }
        memset(&v64, 0, sizeof(v64));
        uint64_t v38 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 256, (const void **)&v66.__r_.__value_.__l.__data_);
        if (a1 + 264 == v38) {
          long long v39 = &v66;
        }
        else {
          long long v39 = (std::string *)(v38 + 56);
        }
        std::string::operator=(&v64, v39);
        uint64_t v40 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 304, (const void **)&v64.__r_.__value_.__l.__data_);
        uint64_t v41 = v40;
        if (a1 + 312 == v40)
        {
          if (quasar::gLogLevel < 4) {
            goto LABEL_118;
          }
          long long v82 = 0u;
          long long v83 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v67 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
          BOOL v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Category ", 9);
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v52 = &v66;
          }
          else {
            int v52 = (std::string *)v66.__r_.__value_.__r.__words[0];
          }
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v66.__r_.__value_.__l.__size_;
          }
          int v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, size);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" in blob is not supported by datapack.", 38);
          goto LABEL_117;
        }
        if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(v40 + 56), (unsigned __int8 *)&v65))
        {
          break;
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v65.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        long long v42 = (void *)v37[1];
        if (v42)
        {
          do
          {
            long long v43 = v42;
            long long v42 = (void *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            long long v43 = (void *)v37[2];
            BOOL v44 = *v43 == (void)v37;
            long long v37 = v43;
          }
          while (!v44);
        }
        long long v37 = v43;
        if (v43 == (void *)(v10 + 248)) {
          goto LABEL_86;
        }
      }
      if (quasar::gLogLevel < 4) {
        goto LABEL_118;
      }
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
      uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Category ", 9);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v56 = &v66;
      }
      else {
        uint64_t v56 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v57 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v57 = v66.__r_.__value_.__l.__size_;
      }
      int v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
      int v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" in blob uses different enumeration type (", 42);
      int v60 = *(char *)(v41 + 79);
      if (v60 >= 0) {
        uint64_t v61 = v41 + 56;
      }
      else {
        uint64_t v61 = *(void *)(v41 + 56);
      }
      if (v60 >= 0) {
        uint64_t v62 = *(unsigned __int8 *)(v41 + 79);
      }
      else {
        uint64_t v62 = *(void *)(v41 + 64);
      }
      unint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)") in datapack.", 14);
LABEL_117:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v67);
LABEL_118:
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
    }
    return 3;
  }
  return v11;
}

uint64_t std::vector<quasar::LmeInfo>::emplace_back<quasar::LmeInfo>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x333333333333333) {
      unint64_t v14 = 0x666666666666666;
    }
    else {
      unint64_t v14 = v12;
    }
    v20[4] = v4;
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v4, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[40 * v11];
    v20[0] = v15;
    v20[1] = v16;
    v20[3] = &v15[40 * v14];
    uint64_t v17 = *a2;
    *((_DWORD *)v16 + 2) = *((_DWORD *)a2 + 2);
    *(void *)uint64_t v16 = v17;
    long long v18 = *((_OWORD *)a2 + 1);
    *((void *)v16 + 4) = a2[4];
    *((_OWORD *)v16 + 1) = v18;
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 0;
    v20[2] = v16 + 40;
    std::vector<quasar::LmeInfo>::__swap_out_circular_buffer(a1, v20);
    uint64_t v10 = a1[1];
    std::__split_buffer<quasar::LmeInfo>::~__split_buffer((uint64_t)v20);
  }
  else
  {
    uint64_t v8 = *a2;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v7 = v8;
    long long v9 = *((_OWORD *)a2 + 1);
    *(void *)(v7 + 32) = a2[4];
    *(_OWORD *)(v7 + 16) = v9;
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 0;
    uint64_t v10 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v10;
  return v10 - 40;
}

void sub_1B2271F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(const std::string *a1@<X0>, uint64_t *a2@<X1>, quasar::SpeechRequestData **a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, quasar::Location *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  Locatiouint64_t n = (std::__assoc_sub_state **)quasar::SpeechRequestData::getLocation(*a3);
  *(double *)a6 = quasar::Location::fromSharedFuture(Location);
  *((void *)a6 + 1) = v15;
  uint64_t v16 = *(void *)(*a2 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "geoLocationStatus");
  quasar::Location::statusAsString(a6, &v103);
  quasar::SpeechRequestResultData::addDumpAA(v16, (long long *)__p, &v103);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  v98[0] = 0;
  v98[1] = 0;
  uint64_t v99 = 0;
  uint64_t data = (uint64_t)a1[17].__r_.__value_.__l.__data_;
  uint64_t RegionId = quasar::SpeechRequestData::getRegionId(*a3);
  quasar::Geography::getGeoContext(data, a6, (uint64_t)v98, RegionId, a7);
  quasar::OnlineTransducerGraphSearchDecoder::logGeoLmMetrics((uint64_t)a1, *a2, a6, (unsigned __int8 *)v98, *a7);
  quasar::OnlineTransducerGraphSearchDecoder::mergeRegionalClassLms(&a1[33].__r_.__value_.__r.__words[2], (const void ***)*a7, (uint64_t *)v97);
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5C0C8;
  v103.__r_.__value_.__l.__size_ = (std::string::size_type)a1;
  int v104 = &v103;
  std::string::size_type size = (uint64_t *)a1[85].__r_.__value_.__l.__size_;
  uint64_t v20 = (uint64_t *)a1[85].__r_.__value_.__r.__words[2];
  while (size != v20)
  {
    uint64_t v21 = *size;
    uint64_t v22 = *a2;
    uint64_t v23 = *a7;
    std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__value_func[abi:ne180100]((uint64_t)v102, (uint64_t)&v103);
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::resolvePlaceholder(v21, v97, (uint64_t *)(v22 + 424), v23 + 48, (uint64_t)v102, 1);
    std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__value_func[abi:ne180100](v102);
    size += 2;
  }
  int v24 = (uint64_t *)a1[87].__r_.__value_.__l.__size_;
  for (uint64_t i = (uint64_t *)a1[87].__r_.__value_.__r.__words[2]; v24 != i; v24 += 2)
  {
    uint64_t v26 = *v24;
    uint64_t v27 = *a7;
    uint64_t v28 = *a2;
    v101[0] = &unk_1F0A5C120;
    v101[3] = v101;
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::resolvePlaceholder(v26, (uint64_t **)(v27 + 24), (uint64_t *)(v28 + 424), v27 + 48, (uint64_t)v101, 0);
    std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__value_func[abi:ne180100](v101);
  }
  long long v75 = a7;
  quasar::OnlineTransducerGraphSearchDecoder::filterOutUnsupportedPlaceholders((uint64_t)a1, (const void ***)v97, (uint64_t)&v95);
  int v29 = v95;
  if (v95 != (const void **)v96)
  {
    do
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v82 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ClassLM template ", 17);
        int v31 = *((char *)v29 + 55);
        if (v31 >= 0) {
          uint64_t v32 = (uint64_t)(v29 + 4);
        }
        else {
          uint64_t v32 = (uint64_t)v29[4];
        }
        if (v31 >= 0) {
          uint64_t v33 = *((unsigned __int8 *)v29 + 55);
        }
        else {
          uint64_t v33 = (uint64_t)v29[5];
        }
        uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
        uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" assigned to FST from ", 22);
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr((uint64_t)v29[7], &v78);
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v36 = &v78;
        }
        else {
          uint64_t v36 = (std::string *)v78.__r_.__value_.__r.__words[0];
        }
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v37 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v37 = v78.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      uint64_t v38 = (uint64_t)v29[7];
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v38, (uint64_t)__p, &v76);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      int v39 = *(_DWORD *)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at((uint64_t)&a1[24], v29 + 4);
      long long v40 = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
      if (v76.__r_.__value_.__l.__size_)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v76.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        *(_OWORD *)&__p[1] = v40;
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v40 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        __p[1] = v76.__r_.__value_.__l.__data_;
        __p[2] = 0;
      }
      LODWORD(__p[0]) = v39;
      LODWORD(__p[3]) = 1;
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](a4, (uint64_t)__p);
      if (__p[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[2]);
      }
      if (*((void *)&v40 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
      }
      uint64_t v41 = *(void *)(*a2 + 424);
      std::operator+<char>();
      long long v42 = std::string::append(&v78, "]");
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      __p[2] = (void *)v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr((uint64_t)v29[7], &v77);
      quasar::SpeechRequestResultData::addDumpAA(v41, (long long *)__p, &v77);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if (v76.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v76.__r_.__value_.__l.__size_);
      }
      BOOL v44 = (const void **)v29[1];
      if (v44)
      {
        do
        {
          long long v45 = (const void ***)v44;
          BOOL v44 = (const void **)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          long long v45 = (const void ***)v29[2];
          BOOL v46 = *v45 == v29;
          int v29 = (const void **)v45;
        }
        while (!v46);
      }
      int v29 = (const void **)v45;
    }
    while (v45 != v96);
  }
  memset(&v78, 0, sizeof(v78));
  kaldi::SplitStringToVector(a1 + 27, ",", 1, (uint64_t)&v78);
  std::string::size_type v48 = v78.__r_.__value_.__l.__size_;
  std::string::size_type v47 = v78.__r_.__value_.__r.__words[0];
  if (v78.__r_.__value_.__r.__words[0] != v78.__r_.__value_.__l.__size_)
  {
    uint64_t v49 = a1[35].__r_.__value_.__r.__words[2];
    if (v49)
    {
      uint64_t v50 = *v75;
      uint64_t v51 = *a2;
      v100[0] = &unk_1F0A5C178;
      v100[3] = v100;
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::resolvePlaceholder(v49, (uint64_t **)(v50 + 24), (uint64_t *)(v51 + 424), v50 + 48, (uint64_t)v100, 0);
      std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__value_func[abi:ne180100](v100);
      std::string::size_type v48 = v78.__r_.__value_.__l.__size_;
      std::string::size_type v47 = v78.__r_.__value_.__r.__words[0];
    }
    for (; v47 != v48; v47 += 24)
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v82 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        int v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ClassLM template ", 17);
        int v53 = *(char *)(v47 + 23);
        if (v53 >= 0) {
          int64_t v54 = v47;
        }
        else {
          int64_t v54 = *(void *)v47;
        }
        if (v53 >= 0) {
          uint64_t v55 = *(unsigned __int8 *)(v47 + 23);
        }
        else {
          uint64_t v55 = *(void *)(v47 + 8);
        }
        uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
        std::string::size_type v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" assigned to NNLM from ", 23);
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(a1[35].__r_.__value_.__r.__words[2], &v77);
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v58 = &v77;
        }
        else {
          int v58 = (std::string *)v77.__r_.__value_.__r.__words[0];
        }
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v59 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v59 = v77.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      int v60 = *(_DWORD *)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at((uint64_t)&a1[24], (const void **)v47);
      uint64_t v62 = *(_DWORD **)(a5 + 8);
      unint64_t v61 = *(void *)(a5 + 16);
      if ((unint64_t)v62 >= v61)
      {
        std::string v64 = *(_DWORD **)a5;
        uint64_t v65 = ((uint64_t)v62 - *(void *)a5) >> 2;
        unint64_t v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v67 = v61 - (void)v64;
        if (v67 >> 1 > v66) {
          unint64_t v66 = v67 >> 1;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68)
        {
          long long v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v68);
          std::string v64 = *(_DWORD **)a5;
          uint64_t v62 = *(_DWORD **)(a5 + 8);
        }
        else
        {
          long long v69 = 0;
        }
        long long v70 = &v69[4 * v65];
        *(_DWORD *)long long v70 = v60;
        unint64_t v63 = v70 + 4;
        while (v62 != v64)
        {
          int v71 = *--v62;
          *((_DWORD *)v70 - 1) = v71;
          v70 -= 4;
        }
        *(void *)a5 = v70;
        *(void *)(a5 + 8) = v63;
        *(void *)(a5 + 16) = &v69[4 * v68];
        if (v64) {
          operator delete(v64);
        }
      }
      else
      {
        *uint64_t v62 = v60;
        unint64_t v63 = v62 + 1;
      }
      *(void *)(a5 + 8) = v63;
      uint64_t v72 = *(void *)(*a2 + 424);
      std::operator+<char>();
      long long v73 = std::string::append(&v77, "]");
      long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      __p[2] = (void *)v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(a1[35].__r_.__value_.__r.__words[2], &v76);
      quasar::SpeechRequestResultData::addDumpAA(v72, (long long *)__p, &v76);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
    }
  }
  __p[0] = &v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&v95, v96[0]);
  std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__value_func[abi:ne180100](&v103);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)v97, v97[1]);
  if (SHIBYTE(v99) < 0) {
    operator delete(v98[0]);
  }
}

void sub_1B22726D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59)
{
  std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__value_func[abi:ne180100]((void *)(v59 - 232));
  a21 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&a55, (void *)a56);
  std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__value_func[abi:ne180100]((void *)(v59 - 136));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&a58, (void *)a59);
  unint64_t v61 = *(std::__shared_weak_count **)(a9 + 8);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  if (*(char *)(v59 - 233) < 0) {
    operator delete(*(void **)(v59 - 256));
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::appendEmptyFsts(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[74];
  if (v2)
  {
    if (v2 != (a2[1] - *a2) >> 5)
    {
      uint64_t v4 = (void *)a1[72];
      unint64_t v5 = a1 + 73;
      if (v4 != a1 + 73)
      {
        do
        {
          int v6 = *((_DWORD *)v4 + 14);
          for (uint64_t i = (_DWORD *)*a2; i != (_DWORD *)a2[1]; i += 8)
          {
            if (*i == v6) {
              goto LABEL_10;
            }
          }
          uint64_t v12 = 0;
          unint64_t v13 = 0;
          int v11 = v6;
          int v14 = -1;
          std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](a2, (uint64_t)&v11);
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
LABEL_10:
          uint64_t v8 = (void *)v4[1];
          if (v8)
          {
            do
            {
              long long v9 = v8;
              uint64_t v8 = (void *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              long long v9 = (void *)v4[2];
              BOOL v10 = *v9 == (void)v4;
              uint64_t v4 = v9;
            }
            while (!v10);
          }
          uint64_t v4 = v9;
        }
        while (v9 != v5);
      }
    }
  }
}

void sub_1B2272A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies::clear(quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies *this)
{
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__clear[abi:ne180100]((uint64_t *)this);
  std::vector<quasar::LmeInfo>::__clear[abi:ne180100]((uint64_t *)this + 8);
  uint64_t v2 = (quasar::SymbolTableList *)*((void *)this + 11);
  return quasar::SymbolTableList::clear(v2);
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::logGeoLmMetrics(uint64_t a1, uint64_t a2, quasar::Location *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t result = quasar::Geography::wasConfigLoaded(*(quasar::Geography **)(a1 + 408));
  if (result)
  {
    *(unsigned char *)(*(void *)(a2 + 424) + 128) = 1;
    if (quasar::Location::isKnown(a3))
    {
      int v11 = *(unsigned char **)(a2 + 424);
      v11[129] = 1;
    }
    else if (quasar::Location::isDenied(a3))
    {
      int v11 = *(unsigned char **)(a2 + 424);
      v11[130] = 1;
    }
    else
    {
      BOOL isUndefined = quasar::Location::isUndefined(a3);
      int v11 = *(unsigned char **)(a2 + 424);
      if (isUndefined) {
        v11[131] = 1;
      }
    }
    BOOL v13 = (*(void *)(a5 + 16) | *(void *)(a5 + 40)) != 0;
    std::string::basic_string[abi:ne180100]<0>(v31, "geoContextFound");
    std::to_string(&__p, v13);
    quasar::SpeechRequestResultData::addDumpAA((uint64_t)v11, (long long *)v31, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    *(unsigned char *)(*(void *)(a2 + 424) + 132) = v13;
    uint64_t result = quasar::Geography::getGeoMemoriesConfig(*(quasar::Geography **)(a1 + 408));
    if (*(unsigned char *)result)
    {
      uint64_t v14 = *(void *)(a2 + 424);
      *(unsigned char *)(v14 + 133) = 1;
      uint64_t v15 = a4[23];
      if ((v15 & 0x80u) != 0) {
        uint64_t v15 = *((void *)a4 + 1);
      }
      BOOL v16 = v15 != 0;
      std::string::basic_string[abi:ne180100]<0>(v31, "geoLastRegionIdWasCached");
      std::to_string(&__p, v16);
      quasar::SpeechRequestResultData::addDumpAA(v14, (long long *)v31, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      uint64_t v17 = *(unsigned __int8 *)(a5 + 71);
      if ((v17 & 0x80u) == 0) {
        uint64_t v18 = *(unsigned __int8 *)(a5 + 71);
      }
      else {
        uint64_t v18 = *(void *)(a5 + 56);
      }
      uint64_t v19 = a4[23];
      int v20 = (char)v19;
      if ((v19 & 0x80u) != 0) {
        uint64_t v19 = *((void *)a4 + 1);
      }
      if (v18 == v19)
      {
        uint64_t v21 = (const void **)(a5 + 48);
        if (v20 >= 0) {
          uint64_t v22 = a4;
        }
        else {
          uint64_t v22 = *(unsigned __int8 **)a4;
        }
        if ((v17 & 0x80) != 0)
        {
          BOOL v27 = memcmp(*v21, v22, *(void *)(a5 + 56)) != 0;
        }
        else if (*(unsigned char *)(a5 + 71))
        {
          uint64_t v23 = v17 - 1;
          do
          {
            int v25 = *(unsigned __int8 *)v21;
            uint64_t v21 = (const void **)((char *)v21 + 1);
            int v24 = v25;
            int v26 = *v22++;
            BOOL v27 = v24 != v26;
          }
          while (v24 == v26 && v23-- != 0);
        }
        else
        {
          BOOL v27 = 0;
        }
      }
      else
      {
        BOOL v27 = 1;
      }
      uint64_t v29 = *(void *)(a2 + 424);
      std::string::basic_string[abi:ne180100]<0>(v31, "geoLastRegionIdCacheMiss");
      std::to_string(&__p, v27);
      quasar::SpeechRequestResultData::addDumpAA(v29, (long long *)v31, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      *(unsigned char *)(*(void *)(a2 + 424) + 134) = v27;
      uint64_t result = quasar::Location::isUndefined(a3);
      if (result)
      {
        if (v13) {
          *(unsigned char *)(*(void *)(a2 + 424) + 135) = 1;
        }
      }
    }
  }
  return result;
}

void sub_1B2272CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineTransducerGraphSearchDecoder::mergeRegionalClassLms(void *a1@<X0>, const void ***a2@<X1>, uint64_t *a3@<X8>)
{
  std::map<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::map[abi:ne180100](a3, a2);
  unint64_t v7 = (void *)*a1;
  unint64_t v5 = a1 + 1;
  int v6 = v7;
  if (v7 != v5)
  {
    do
    {
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(v6[7], &v61);
      std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v61.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        if (!std::__tree<std::string>::__count_unique<std::string>((uint64_t)a3, (const void **)&v61.__r_.__value_.__l.__data_))
        {
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
          int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Using location-specific classLM slot for template=", 50);
          int v32 = *((char *)v6 + 55);
          if (v32 >= 0) {
            uint64_t v33 = (uint64_t)(v6 + 4);
          }
          else {
            uint64_t v33 = v6[4];
          }
          if (v32 >= 0) {
            uint64_t v34 = *((unsigned __int8 *)v6 + 55);
          }
          else {
            uint64_t v34 = v6[5];
          }
          uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
          uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": placeholder ", 14);
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v37 = &v61;
          }
          else {
            std::string::size_type v37 = (std::string *)v61.__r_.__value_.__r.__words[0];
          }
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v38 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v38 = v61.__r_.__value_.__l.__size_;
          }
          int v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" not found in regional map", 26);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v44);
        }
        uint64_t v9 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a3, (const void **)&v61.__r_.__value_.__l.__data_);
        if (a3 + 1 == (uint64_t *)v9)
        {
          uint64_t v9 = 0;
          char v10 = 0;
          uint64_t v43 = 0;
        }
        else
        {
          std::__tree<std::string>::__remove_node_pointer((uint64_t **)a3, (uint64_t *)v9);
          char v10 = 1;
        }
        long long v42 = (void *)v9;
        BYTE1(v43) = v10;
        std::string::operator=((std::string *)(v9 + 32), (const std::string *)(v6 + 4));
        std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__node_handle_insert_unique[abi:ne180100]<std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>,std::__insert_return_type<std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>*,long>>,std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>>>((uint64_t **)a3, (uint64_t *)&v42, (uint64_t)&v40);
        uint64_t v17 = v41;
        if (v41)
        {
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)v41 + 32);
          operator delete(v17);
          uint64_t v41 = 0;
        }
        if (quasar::gLogLevel >= 4)
        {
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
          uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Using location-specific classLM slot for template=", 50);
          int v19 = *((char *)v6 + 55);
          if (v19 >= 0) {
            uint64_t v20 = (uint64_t)(v6 + 4);
          }
          else {
            uint64_t v20 = v6[4];
          }
          if (v19 >= 0) {
            uint64_t v21 = *((unsigned __int8 *)v6 + 55);
          }
          else {
            uint64_t v21 = v6[5];
          }
          uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
          uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", using placeholder ", 20);
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v24 = &v61;
          }
          else {
            int v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
          }
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v25 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v25 = v61.__r_.__value_.__l.__size_;
          }
          int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" from regional map", 18);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v44);
        }
        BOOL v27 = v42;
        if (v42)
        {
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)v42 + 32);
          operator delete(v27);
        }
      }
      else
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>> const&>((uint64_t **)a3, (const void **)v6 + 4, (long long *)v6 + 2);
        if ((v11 & 1) != 0 && quasar::gLogLevel >= 4)
        {
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
          uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Using decoder-specific classLM slot for template=", 49);
          int v13 = *((char *)v6 + 55);
          if (v13 >= 0) {
            uint64_t v14 = (uint64_t)(v6 + 4);
          }
          else {
            uint64_t v14 = v6[4];
          }
          if (v13 >= 0) {
            uint64_t v15 = *((unsigned __int8 *)v6 + 55);
          }
          else {
            uint64_t v15 = v6[5];
          }
          BOOL v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", location-specific slot not available", 38);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v44);
        }
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      uint64_t v28 = (void *)v6[1];
      if (v28)
      {
        do
        {
          uint64_t v29 = v28;
          uint64_t v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          uint64_t v29 = (void *)v6[2];
          BOOL v30 = *v29 == (void)v6;
          int v6 = v29;
        }
        while (!v30);
      }
      int v6 = v29;
    }
    while (v29 != v5);
  }
}

void sub_1B22730E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  if (*(char *)(v8 - 89) < 0) {
    operator delete(*(void **)(v8 - 112));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v7, *(void **)(v7 + 8));
  _Unwind_Resume(a1);
}

void sub_1B22730F4(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 89) < 0) {
    operator delete(*(void **)(v2 - 112));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B22730FC()
{
}

void sub_1B2273104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:ne180100]((void **)va);
  JUMPOUT(0x1B2273120);
}

void quasar::OnlineTransducerGraphSearchDecoder::filterOutUnsupportedPlaceholders(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  uint64_t v4 = a2 + 1;
  unint64_t v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    int v6 = (void *)(a1 + 496);
    do
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v6, (unsigned __int8 *)v5 + 32))
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>> const&>((uint64_t **)a3, v5 + 4, (long long *)v5 + 2);
      }
      else if (quasar::gLogLevel >= 4)
      {
        memset(v14, 0, sizeof(v14));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
        uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Filtering out unsupported / unused placeholder ", 47);
        int v8 = *((char *)v5 + 55);
        if (v8 >= 0) {
          uint64_t v9 = (uint64_t)(v5 + 4);
        }
        else {
          uint64_t v9 = (uint64_t)v5[4];
        }
        if (v8 >= 0) {
          uint64_t v10 = *((unsigned __int8 *)v5 + 55);
        }
        else {
          uint64_t v10 = (uint64_t)v5[5];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v14);
      }
      char v11 = (const void **)v5[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (const void ***)v11;
          char v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (const void ***)v5[2];
          BOOL v13 = *v12 == v5;
          unint64_t v5 = (const void **)v12;
        }
        while (!v13);
      }
      unint64_t v5 = (const void **)v12;
    }
    while (v12 != v4);
  }
}

void sub_1B2273284(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::DecoderCreationDependencies::clear(quasar::OnlineTransducerGraphSearchDecoder::DecoderCreationDependencies *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 5);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 11);
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 13);
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 17);
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  int v8 = (std::__shared_weak_count *)*((void *)this + 15);
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::supportsEager(quasar::OnlineTransducerGraphSearchDecoder *this)
{
  return 0;
}

void quasar::OnlineTransducerGraphSearchDecoder::clearCaches(quasar::OnlineTransducerGraphSearchDecoder *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 262);
  for (uint64_t i = (uint64_t *)*((void *)this + 263); v1 != i; v1 += 2)
  {
    uint64_t v3 = *v1;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v3, (uint64_t)__p, &v6);
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1B2273414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineTransducerGraphSearchDecoder::DecoderCreationDependencies::~DecoderCreationDependencies(quasar::OnlineTransducerGraphSearchDecoder::DecoderCreationDependencies *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  char v5 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  int v8 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  char v11 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void fst::DeterminizeLatticePrunedOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "delta");
  std::string::basic_string[abi:ne180100]<0>(__p, "Tolerance used in determinization");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-mem");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum approximate memory usage in determinization (real usage might be many times this)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-arcs");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of arcs in output FST (total, not per state");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 16, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-states");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of arcs in output FST (total, not per state");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-loop");
  std::string::basic_string[abi:ne180100]<0>(__p, "Option used to detect a particular type of determinization failure, typically due to invalid input (e.g., negative-cost loops)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "retry-cutoff");
  std::string::basic_string[abi:ne180100]<0>(__p, "Controls pruning un-determinized lattice and retrying determinization: if effective-beam < retry-cutoff * beam, we prune the raw lattice and retry.  Avoids ever getting empty output for long segments.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 20, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B22737C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar34OnlineTransducerGraphSearchDecoder23LmeCreationDependenciesENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x80uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN6quasar34OnlineTransducerGraphSearchDecoder23LmeCreationDependenciesENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B2273858(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar34OnlineTransducerGraphSearchDecoder23LmeCreationDependenciesENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62048;
  quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies::LmeCreationDependencies((quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies *)(a1 + 3));
  return a1;
}

void sub_1B22738B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies *quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies::LmeCreationDependencies(quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies *this)
{
  *((void *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  uint64_t v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_1F0A60090;
  v2[4] = 0;
  v2[5] = 0;
  void v2[3] = 0;
  *((void *)this + 11) = v2 + 3;
  *((void *)this + 12) = v2;
  return this;
}

void sub_1B22739E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 64);
  std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 56);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  BOOL v13 = *(void **)(v10 + 24);
  if (v13)
  {
    *(void *)(v10 + 32) = v13;
    operator delete(v13);
  }
  a10 = (void **)v10;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__func()
{
}

__n128 std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5BF68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5BF68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::operator()(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (**(unsigned char **)(a1 + 16))
  {
    quasar::ModelLoader::requestEmbeddedMlock(*(std::string **)(v6 + 368), a2, v16, 1.0);
    char v7 = (std::__shared_weak_count *)*((void *)&v16[0] + 1);
    uint64_t v8 = *(void *)(v6 + 368);
    long long v17 = v16[0];
    if (*((void *)&v16[0] + 1))
    {
      char v9 = 0;
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16[0] + 1) + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      char v9 = 1;
    }
  }
  else
  {
    char v7 = 0;
    uint64_t v8 = *(void *)(v6 + 368);
    char v9 = 1;
    long long v17 = 0uLL;
  }
  quasar::ModelLoader::readFstNetwork(v8, (uint64_t)a2, (unsigned __int8 **)&v17, a3);
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*a3 + 64))(*a3, 0x10000000, 0) != 0x10000000)
  {
    memset(v16, 0, sizeof(v16));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"bigGFst: input label is not sorted!", 35);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v16);
  }
  if (*(unsigned char *)(v6 + 2124) || *(unsigned char *)(v6 + 440))
  {
    std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>(v16);
    long long v10 = v16[0];
    v16[0] = 0uLL;
    char v11 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v10;
    if (v11)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      if (*((void *)&v16[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16[0] + 1));
      }
    }
  }
  *(void *)&v16[0] = a2;
  uint64_t v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 1976), (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)v16);
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)v12[8];
  v12[7] = v14;
  v12[8] = v13;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  **(unsigned char **)(a1 + 16) = 0;
  if ((v9 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1B2273CB4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func()
{
}

__n128 std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5BFC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5BFC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, kaldi::InferenceNetItf **a3@<X8>)
{
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(std::string *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B2273EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string*>(uint64_t a1, uint64_t *a2, uint64_t *a3, std::string *this)
{
  uint64_t v4 = this;
  char v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  unsigned int v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)v6[2], v6[3]);
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *((_OWORD *)v6 + 1);
        v4->__r_.__value_.__r.__words[2] = v6[4];
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (uint64_t *)*v6;
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B2273F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F0A5C018;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5C018;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::operator()(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  quasar::ModelLoader::requestEmbeddedMlock(*(std::string **)(v5 + 368), a2, &v8, 1.0);
  uint64_t v6 = v9;
  uint64_t v7 = *(void *)(v5 + 368);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::ModelLoader::readFstNetwork(v7, (uint64_t)a2, &v8, a3);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1B22740A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F0A5C070;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5C070;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, kaldi::InferenceNetItf **a3@<X8>)
{
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>,std::allocator<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>,std::string &,void>@<X0>(std::string *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x20uLL);
  __n128 result = std::__shared_ptr_emplace<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B227424C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>,0>(void *a1, std::string *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5ED88;
  kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>::RandomAccessTableReader(a1 + 3, a2);
  return a1;
}

void sub_1B22742A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5ED88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5ED88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void *std::__shared_ptr_emplace<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>::__on_zero_shared(uint64_t a1)
{
  return kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>::~RandomAccessTableReader((void *)(a1 + 24));
}

void *kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>::RandomAccessTableReader(void *a1, std::string *this)
{
  *a1 = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this->__r_.__value_.__l.__size_) {
      return a1;
    }
  }
  else if (!*((unsigned char *)&this->__r_.__value_.__s + 23))
  {
    return a1;
  }
  if ((kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>::Open(a1, this) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Error opening RandomAccessTableReader object  (rspecifier is: ", 62);
    int v6 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v6 >= 0) {
      uint64_t v7 = this;
    }
    else {
      uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v6 >= 0) {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, size);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, ")");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return a1;
}

uint64_t kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>::Open(void *a1, std::string *this)
{
  if (*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "RandomAccessTableReader::Open(): already open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  int v9 = 0;
  int v3 = kaldi::ClassifyRspecifier(this, 0, (uint64_t)&v9);
  if (v3 == 1)
  {
    if (BYTE1(v9))
    {
      if (BYTE2(v9)) {
        operator new();
      }
      operator new();
    }
    operator new();
  }
  if (v3 == 2) {
    operator new();
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"RandomAccessTableReader::Open(), invalid rspecifier: ", 53);
    int v5 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v5 >= 0) {
      int v6 = this;
    }
    else {
      int v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v5 >= 0) {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, size);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
  }
  return 0;
}

void sub_1B22746F8(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

BOOL kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::Open(uint64_t a1, std::string *this)
{
  if ((*(_DWORD *)(a1 + 152) - 2) <= 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v40, " Opening already open RandomAccessTableReader: call Close first.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  uint64_t v4 = (std::string *)(a1 + 48);
  kaldi::ClassifyRspecifier(this, a1 + 48, a1 + 16);
  int v5 = 1;
  BOOL result = kaldi::ReadScriptFile((uint64_t)v4, 1, (std::vector<std::pair<std::string, std::string>> *)(a1 + 120));
  if (result)
  {
    std::string::operator=((std::string *)(a1 + 24), this);
    if (!*(unsigned char *)(a1 + 17))
    {
      unint64_t v7 = *(void *)(a1 + 120);
      uint64_t v8 = *(const void ***)(a1 + 128);
      unint64_t v9 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v8 - v7) >> 4));
      if (v8 == (const void **)v7) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v9;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *,false>(v7, v8, (uint64_t)v40, v10, 1);
    }
    uint64_t v11 = *(void *)(a1 + 120);
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 128) - v11) >> 4) <= 1) {
      unint64_t v12 = 1;
    }
    else {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 128) - v11) >> 4);
    }
    uint64_t v13 = -48;
    do
    {
      if (!--v12)
      {
        BOOL result = 1;
        int v5 = 2;
        goto LABEL_67;
      }
      uint64_t v14 = v11 + v13 + 96;
      uint64_t v15 = (void *)(v11 + v13 + 48);
      uint64_t v16 = *(unsigned __int8 *)(v11 + v13 + 71);
      if (*(char *)(v11 + v13 + 71) < 0)
      {
        size_t v17 = *(void *)(v11 + v13 + 56);
        uint64_t v15 = (void *)*v15;
      }
      else
      {
        size_t v17 = *(unsigned __int8 *)(v11 + v13 + 71);
      }
      v13 += 48;
      int v18 = *(char *)(v14 + 23);
      if (v18 >= 0) {
        size_t v19 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        size_t v19 = *(void *)(v14 + 8);
      }
      if (v18 >= 0) {
        uint64_t v20 = (unsigned __int8 *)v14;
      }
      else {
        uint64_t v20 = *(unsigned __int8 **)v14;
      }
      if (v19 >= v17) {
        size_t v21 = v17;
      }
      else {
        size_t v21 = v19;
      }
      int v22 = memcmp(v15, v20, v21);
      if (v17 >= v19) {
        int v23 = 0;
      }
      else {
        int v23 = -1;
      }
      if (v22) {
        int v23 = v22;
      }
    }
    while (v23 < 0);
    int v24 = (const void **)(v11 + v13);
    size_t v25 = *(void *)(v11 + v13 + 8);
    if ((v16 & 0x80u) == 0) {
      uint64_t v26 = v16;
    }
    else {
      uint64_t v26 = *(void *)(v11 + v13 + 8);
    }
    BOOL v27 = " is not sorted (remove s, option or add ns, option): key is ";
    if (v26 == v19)
    {
      if ((v16 & 0x80) != 0)
      {
        if (!memcmp(*v24, v20, v25)) {
          BOOL v27 = " contains duplicate key: ";
        }
      }
      else if (v16)
      {
        while (*(unsigned __int8 *)v24 == *v20)
        {
          int v24 = (const void **)((char *)v24 + 1);
          ++v20;
          if (!--v16)
          {
            BOOL v27 = " contains duplicate key: ";
            break;
          }
        }
      }
      else
      {
        BOOL v27 = " contains duplicate key: ";
      }
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Script file ", 12);
      if (*(char *)(a1 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
      }
      else {
        std::string v38 = *v4;
      }
      kaldi::PrintableRxfilename((uint64_t)&v38, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)p_p, size);
      size_t v32 = strlen(v27);
      uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v27, v32);
      uint64_t v34 = *(void *)(a1 + 120) + v13;
      int v35 = *(char *)(v34 + 23);
      if (v35 >= 0) {
        uint64_t v36 = *(void *)(a1 + 120) + v13;
      }
      else {
        uint64_t v36 = *(void *)v34;
      }
      if (v35 >= 0) {
        uint64_t v37 = *(unsigned __int8 *)(v34 + 23);
      }
      else {
        uint64_t v37 = *(void *)(v34 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v36, v37);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    }
    BOOL result = 0;
    int v5 = 1;
  }
LABEL_67:
  *(_DWORD *)(a1 + 152) = v5;
  return result;
}

void sub_1B2274A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::HasKey(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(unsigned __int8 *, uint64_t, void))(*(void *)a1 + 56))(a1, a2, a1[19]);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::Value(uint64_t a1, const void **a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "RandomAccessTableReaderWriter: Value() called on not-open object.");
    goto LABEL_44;
  }
  int v4 = *(_DWORD *)(a1 + 152);
  if ((v4 - 3) > 1) {
    goto LABEL_19;
  }
  uint64_t v5 = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) == 0) {
    int v6 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    int v6 = a2[1];
  }
  unint64_t v7 = (const void *)*(unsigned __int8 *)(a1 + 95);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    unint64_t v7 = *(const void **)(a1 + 80);
  }
  if (v6 != v7) {
    goto LABEL_19;
  }
  if (v8 >= 0) {
    unint64_t v9 = (unsigned __int8 *)(a1 + 72);
  }
  else {
    unint64_t v9 = *(unsigned __int8 **)(a1 + 72);
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*a2, v9, (size_t)a2[1]))
    {
LABEL_19:
      if ((*(uint64_t (**)(uint64_t, const void **, uint64_t))(*(void *)a1 + 56))(a1, a2, 1))
      {
        uint64_t v11 = *((unsigned __int8 *)a2 + 23);
        unint64_t v12 = a2[1];
        if ((v11 & 0x80u) == 0) {
          unint64_t v12 = (const void *)*((unsigned __int8 *)a2 + 23);
        }
        uint64_t v13 = (const void *)*(unsigned __int8 *)(a1 + 95);
        int v14 = (char)v13;
        if ((char)v13 < 0) {
          uint64_t v13 = *(const void **)(a1 + 80);
        }
        if (v12 == v13)
        {
          uint64_t v15 = v14 >= 0 ? (unsigned __int8 *)(a1 + 72) : *(unsigned __int8 **)(a1 + 72);
          if ((v11 & 0x80) == 0 && *((unsigned char *)a2 + 23))
          {
            uint64_t v16 = v11 - 1;
            size_t v17 = a2;
            do
            {
              int v19 = *(unsigned __int8 *)v17;
              size_t v17 = (const void **)((char *)v17 + 1);
              int v18 = v19;
              int v21 = *v15++;
              int v20 = v21;
              BOOL v23 = v16-- != 0;
            }
            while (v18 == v20 && v23);
          }
        }
        goto LABEL_38;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
      size_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"RandomAccessTableReader::Value(), could not get item for key ", 61);
      int v26 = *((char *)a2 + 23);
      if (v26 >= 0) {
        BOOL v27 = a2;
      }
      else {
        BOOL v27 = (void *)*a2;
      }
      if (v26 >= 0) {
        uint64_t v28 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        uint64_t v28 = (uint64_t)a2[1];
      }
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
      BOOL v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", rspecifier is ", 16);
      uint64_t v33 = *(void *)(a1 + 24);
      uint64_t v32 = a1 + 24;
      uint64_t v31 = v33;
      int v34 = *(char *)(v32 + 23);
      if (v34 >= 0) {
        uint64_t v35 = v32;
      }
      else {
        uint64_t v35 = v31;
      }
      if (v34 >= 0) {
        uint64_t v36 = *(unsigned __int8 *)(v32 + 23);
      }
      else {
        uint64_t v36 = *(void *)(v32 + 8);
      }
      uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v35, v36);
      std::string v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"[to ignore this ", 16);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v38, ", add the p, (permissive) option to the rspecifier.");
LABEL_44:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
    }
  }
  else if (*((unsigned char *)a2 + 23))
  {
    uint64_t v10 = a2;
    while (*(unsigned __int8 *)v10 == *v9)
    {
      uint64_t v10 = (const void **)((char *)v10 + 1);
      ++v9;
      if (!--v5) {
        goto LABEL_37;
      }
    }
    goto LABEL_19;
  }
LABEL_37:
  if (v4 != 3)
  {
    if (!*(unsigned char *)(a1 + 16)) {
      return a1 + 96;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "Value called twice for the same key\n");
    goto LABEL_44;
  }
LABEL_38:
  *(_DWORD *)(a1 + 152) = 4;
  if (*(unsigned char *)(a1 + 16)) {
    kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::MakeTombstone((void *)a1, (unsigned __int8 *)a2);
  }
  return a1 + 96;
}

void sub_1B2274D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::Close(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Close() called on RandomAccessTableReader that was not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 96));
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  uint64_t v3 = *(void *)(a1 + 120);
  for (uint64_t i = *(void *)(a1 + 128);
        i != v3;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](a1 + 136, i))
  {
    i -= 48;
  }
  *(void *)(a1 + 128) = v3;
  MEMORY[0x1B3EA7B20](a1 + 72, "");
  return 1;
}

void kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderScriptImpl(uint64_t a1)
{
  kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderScriptImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

BOOL kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::IsOpen(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 152) - 2) < 3;
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::HasKeyInternal(uint64_t a1, std::string *a2, int a3)
{
  if (*(_DWORD *)(a1 + 152) <= 1u)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "HasKey called on RandomAccessTableReader object that is not open.");
    goto LABEL_49;
  }
  kaldi::IsToken((uint64_t *)a2);
  unint64_t v23 = 0;
  uint64_t result = kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::LookupKey((void *)a1, (unsigned __int8 *)a2, &v23);
  if (!result) {
    return result;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v7 = *(void *)(a1 + 120) + 48 * v23;
    if (*(char *)(v7 + 47) < 0)
    {
      if (*(void *)(v7 + 32)) {
        goto LABEL_6;
      }
    }
    else if (*(unsigned char *)(v7 + 47))
    {
      goto LABEL_6;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"HasKey called on key whose value was already read, and  you specified the \"once\" option (o,): try removing o, or adding no, : rspecifier is ", 141);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, a1 + 24);
LABEL_49:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
LABEL_6:
  if (!a3) {
    return 1;
  }
  if (kaldi::Input::OpenInternal((void *)(a1 + 8), *(void *)(a1 + 120) + 48 * v23 + 24, 1, 0))
  {
    if ((*(_DWORD *)(a1 + 152) - 3) <= 1) {
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 96));
    }
    int v8 = (void *)kaldi::Input::Stream((kaldi::Input *)(a1 + 8));
    if (kaldi::TokenVectorHolder::Read((uint64_t *)(a1 + 96), v8))
    {
      *(_DWORD *)(a1 + 152) = 3;
      std::string::operator=((std::string *)(a1 + 72), a2);
      return 1;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"RandomAccessTableReader: error reading object from stream ", 58);
      unint64_t v14 = *(void *)(a1 + 120) + 48 * v23;
      if (*(char *)(v14 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(v14 + 24), *(void *)(v14 + 32));
      }
      else
      {
        long long v15 = *(_OWORD *)(v14 + 24);
        v20.__r_.__value_.__r.__words[2] = *(void *)(v14 + 40);
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
      }
      kaldi::PrintableRxfilename((uint64_t)&v20, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    }
    uint64_t result = 0;
    *(_DWORD *)(a1 + 152) = 2;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"RandomAccessTableReader: error opening stream ", 46);
      unint64_t v10 = *(void *)(a1 + 120) + 48 * v23;
      if (*(char *)(v10 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(v10 + 24), *(void *)(v10 + 32));
      }
      else
      {
        long long v11 = *(_OWORD *)(v10 + 24);
        v21.__r_.__value_.__r.__words[2] = *(void *)(v10 + 40);
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
      }
      kaldi::PrintableRxfilename((uint64_t)&v21, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v16 = &__p;
      }
      else {
        uint64_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v16, v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    }
    return 0;
  }
  return result;
}

void sub_1B2275204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::MakeTombstone(void *a1, unsigned __int8 *a2)
{
  unint64_t v5 = 0;
  if ((kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::LookupKey(a1, a2, &v5) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "RandomAccessTableReader object in inconsistent state.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return MEMORY[0x1B3EA7B20](a1[15] + 48 * v5 + 24, "");
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::LookupKey(void *a1, unsigned __int8 *a2, unint64_t *a3)
{
  int v4 = a2;
  unint64_t v6 = a1[18];
  uint64_t v7 = a1[15];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[16] - v7) >> 4);
  if (v6 < v8)
  {
    unint64_t v9 = (unsigned __int8 *)(v7 + 48 * v6);
    uint64_t v10 = v9[23];
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = v9[23];
    }
    else {
      uint64_t v11 = *((void *)v9 + 1);
    }
    uint64_t v12 = a2[23];
    int v13 = (char)v12;
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *((void *)a2 + 1);
    }
    if (v11 == v12)
    {
      if (v13 < 0) {
        a2 = *(unsigned __int8 **)a2;
      }
      if ((v10 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v9, a2, *((void *)v9 + 1))) {
          goto LABEL_48;
        }
      }
      else
      {
        if (!v9[23]) {
          goto LABEL_48;
        }
        while (*v9 == *a2)
        {
          ++v9;
          ++a2;
          if (!--v10) {
            goto LABEL_48;
          }
        }
      }
    }
  }
  a1[18] = ++v6;
  if (v6 >= v8) {
    goto LABEL_32;
  }
  unint64_t v14 = (unsigned __int8 *)(v7 + 48 * v6);
  uint64_t v15 = v14[23];
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v14[23];
  }
  else {
    uint64_t v16 = *((void *)v14 + 1);
  }
  uint64_t v17 = v4[23];
  int v18 = (char)v17;
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *((void *)v4 + 1);
  }
  if (v16 != v17) {
    goto LABEL_32;
  }
  if (v18 >= 0) {
    int v19 = v4;
  }
  else {
    int v19 = *(unsigned __int8 **)v4;
  }
  if ((v15 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v14, v19, *((void *)v14 + 1))) {
      goto LABEL_32;
    }
LABEL_48:
    *a3 = v6;
    return 1;
  }
  if (!v14[23]) {
    goto LABEL_48;
  }
  while (*v14 == *v19)
  {
    ++v14;
    ++v19;
    if (!--v15) {
      goto LABEL_48;
    }
  }
LABEL_32:
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[1],0>(&v33, (long long *)v4, "");
  std::string v20 = (const void **)a1[15];
  std::string v21 = (const void **)a1[16];
  char v36 = 0;
  int v22 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<std::string,std::string> *>,std::__wrap_iter<std::pair<std::string,std::string> *>,std::pair<std::string,std::string>,std::__identity,std::__less<void,void>>(v20, v21, (const void **)&v33.__r_.__value_.__l.__data_, (uint64_t)&v37);
  unint64_t v23 = v22;
  if ((const void **)a1[16] != v22)
  {
    uint64_t v24 = *((unsigned __int8 *)v22 + 23);
    if ((v24 & 0x80u) == 0) {
      size_t v25 = (const void *)*((unsigned __int8 *)v22 + 23);
    }
    else {
      size_t v25 = v22[1];
    }
    int v26 = (const void *)v4[23];
    int v27 = (char)v26;
    if ((char)v26 < 0) {
      int v26 = (const void *)*((void *)v4 + 1);
    }
    if (v25 == v26)
    {
      if (v27 >= 0) {
        uint64_t v28 = v4;
      }
      else {
        uint64_t v28 = *(unsigned __int8 **)v4;
      }
      if ((v24 & 0x80) == 0)
      {
        if (*((unsigned char *)v22 + 23))
        {
          uint64_t v29 = v22;
          while (*(unsigned __int8 *)v29 == *v28)
          {
            uint64_t v29 = (const void **)((char *)v29 + 1);
            ++v28;
            if (!--v24) {
              goto LABEL_56;
            }
          }
          goto LABEL_50;
        }
LABEL_56:
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - a1[15]) >> 4);
        *a3 = v32;
        a1[18] = v32;
        uint64_t v30 = 1;
        goto LABEL_51;
      }
      if (!memcmp(*v22, v28, (size_t)v22[1])) {
        goto LABEL_56;
      }
    }
  }
LABEL_50:
  uint64_t v30 = 0;
LABEL_51:
  if (v35 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  return v30;
}

void sub_1B227551C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderScriptImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A48550;
  if ((*(_DWORD *)(a1 + 152) - 3) <= 1) {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 96));
  }
  uint64_t v3 = (void **)(a1 + 120);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  kaldi::Input::~Input((kaldi::Input *)(a1 + 8));
  return a1;
}

BOOL kaldi::TokenVectorHolder::Read(uint64_t *a1, void *a2)
{
  std::vector<std::string>::__clear[abi:ne180100](a1);
  memset(&v13, 0, sizeof(v13));
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  int v4 = std::locale::use_facet(&v12, MEMORY[0x1E4FBA258]);
  unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v12);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v13, v5);
  int v6 = *(_DWORD *)((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5;
  if (v6)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"BasicVectorHolder::Read, error reading line ", 44);
      int v8 = *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32);
      if ((v8 & 2) != 0) {
        unint64_t v9 = "[eof]";
      }
      else {
        unint64_t v9 = "";
      }
      if ((v8 & 2) != 0) {
        uint64_t v10 = 5;
      }
      else {
        uint64_t v10 = 0;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    }
  }
  else
  {
    kaldi::SplitStringToVector(&v13, " \t\n\r\f\v", 1, (uint64_t)a1);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return v6 == 0;
}

void sub_1B2275770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  if (*(char *)(v10 - 33) < 0) {
    operator delete(*(void **)(v10 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::Open(uint64_t a1, std::string *this)
{
  if (*(_DWORD *)(a1 + 76) && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "TableReader::Open, error closing previous input.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  kaldi::ClassifyRspecifier(this, a1 + 48, a1 + 72);
  uint64_t v4 = kaldi::Input::OpenInternal((void *)(a1 + 8), a1 + 48, 0, 0);
  if (v4)
  {
    int v5 = 1;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"TableReader: failed to open stream ", 35);
      if (*(char *)(a1 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
      }
      else {
        std::string v10 = *(std::string *)(a1 + 48);
      }
      kaldi::PrintableRxfilename((uint64_t)&v10, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    }
    int v5 = 0;
  }
  *(_DWORD *)(a1 + 76) = v5;
  return v4;
}

void sub_1B2275988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::TokenVectorHolder>::Value(uint64_t a1, std::string *a2)
{
  uint64_t v2 = a2;
  if (!kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(a1, a2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"RandomAccessTableReader: Value() called but no such key ", 56);
    int v18 = SHIBYTE(v2->__r_.__value_.__r.__words[2]);
    if (v18 >= 0) {
      uint64_t v19 = (uint64_t)v2;
    }
    else {
      uint64_t v19 = v2->__r_.__value_.__r.__words[0];
    }
    if (v18 >= 0) {
      uint64_t size = HIBYTE(v2->__r_.__value_.__r.__words[2]);
    }
    else {
      uint64_t size = v2->__r_.__value_.__l.__size_;
    }
    std::string v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, size);
    int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" in archive ", 12);
    if (*(char *)(a1 + 71) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else {
      std::string __p = *(std::string *)(a1 + 48);
    }
    kaldi::PrintableRxfilename((uint64_t)&__p, &v24);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, (uint64_t)&v24);
    std::string::~string(&v24);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  uint64_t v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  std::string::size_type v5 = v2->__r_.__value_.__l.__size_;
  if ((v4 & 0x80u) == 0) {
    std::string::size_type v5 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 39);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 24);
  }
  if (v5 == v6)
  {
    int v8 = v7 >= 0 ? (unsigned __int8 *)(a1 + 16) : *(unsigned __int8 **)(a1 + 16);
    if ((v4 & 0x80) == 0 && *((unsigned char *)&v2->__r_.__value_.__s + 23))
    {
      uint64_t v9 = v4 - 1;
      do
      {
        int v11 = v2->__r_.__value_.__s.__data_[0];
        uint64_t v2 = (std::string *)((char *)v2 + 1);
        int v10 = v11;
        int v13 = *v8++;
        int v12 = v13;
        BOOL v15 = v9-- != 0;
      }
      while (v10 == v12 && v15);
    }
  }
  return *(void *)(a1 + 40);
}

void kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderDSortedArchiveImpl(uint64_t a1)
{
  kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderDSortedArchiveImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::IsOpen(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 76);
  if (v1 >= 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "IsOpen() called on invalid object.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return (0x1Eu >> v1) & 1;
}

BOOL kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(uint64_t a1, std::string *__str)
{
  uint64_t v4 = (std::string *)(a1 + 80);
  size_t v5 = *(unsigned __int8 *)(a1 + 103);
  if (*(char *)(a1 + 103) < 0)
  {
    if (!*(void *)(a1 + 88)) {
      goto LABEL_23;
    }
  }
  else if (!*(unsigned char *)(a1 + 103))
  {
    goto LABEL_23;
  }
  int v6 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (v6 >= 0) {
    int v8 = __str;
  }
  else {
    int v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  if ((v5 & 0x80u) == 0) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = *(void *)(a1 + 88);
  }
  if ((v5 & 0x80u) == 0) {
    int v10 = v4;
  }
  else {
    int v10 = *(std::string **)(a1 + 80);
  }
  if (v9 >= size) {
    size_t v11 = size;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = size < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
    long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"RandomAccessTableReader: you provided the \"cs\" option ", 54);
    long long v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"but are not calling with keys in sorted order: ", 47);
    int v47 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v47 >= 0) {
      long long v48 = __str;
    }
    else {
      long long v48 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v47 >= 0) {
      std::string::size_type v49 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v49 = __str->__r_.__value_.__l.__size_;
    }
    long long v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v48, v49);
    long long v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" < ", 3);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51, (uint64_t)v4);
LABEL_93:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v53);
  }
LABEL_23:
  std::string::operator=(v4, __str);
  int v14 = *(_DWORD *)(a1 + 76);
  if (v14 == 1)
  {
    kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::ReadNextObject(a1);
    int v14 = *(_DWORD *)(a1 + 76);
  }
  if ((v14 - 3) < 2) {
    return 0;
  }
  if (!v14)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v53, "Trying to access a RandomAccessTableReader object that is not open.");
    goto LABEL_93;
  }
  char v16 = 0;
  memset(&__p, 0, sizeof(__p));
  std::string::size_type v17 = *(unsigned __int8 *)(a1 + 39);
  while (1)
  {
    int v18 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v18 >= 0) {
      std::string::size_type v19 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v19 = __str->__r_.__value_.__l.__size_;
    }
    if (v18 >= 0) {
      std::string v20 = __str;
    }
    else {
      std::string v20 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    int v21 = (char)v17;
    if ((v17 & 0x80u) != 0) {
      std::string::size_type v17 = *(void *)(a1 + 24);
    }
    int v22 = v21 >= 0 ? (const void *)(a1 + 16) : *(const void **)(a1 + 16);
    size_t v23 = v17 >= v19 ? v19 : v17;
    int v24 = memcmp(v20, v22, v23);
    int v25 = v19 < v17 ? -1 : v17 < v19;
    int v26 = v24 ? v24 : v25;
    if (v26 < 1) {
      break;
    }
    std::string::operator=(&__p, (const std::string *)(a1 + 16));
    v53[0] = *(void ***)(a1 + 40);
    int v27 = v53[0];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v53);
    MEMORY[0x1B3EA8670](v27, 0x20C40960023A9);
    *(void *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 76) = 1;
    kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::ReadNextObject(a1);
    char v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*(_DWORD *)(a1 + 76) != 2) {
      break;
    }
    std::string::size_type v17 = *(unsigned __int8 *)(a1 + 39);
    if (*(char *)(a1 + 39) < 0)
    {
      uint64_t v29 = *(const void **)(a1 + 16);
      size_t v28 = *(void *)(a1 + 24);
    }
    else
    {
      size_t v28 = *(unsigned __int8 *)(a1 + 39);
      uint64_t v29 = (const void *)(a1 + 16);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v30 >= v28) {
      size_t v32 = v28;
    }
    else {
      size_t v32 = v30;
    }
    int v33 = memcmp(v29, p_p, v32);
    if (v28 < v30) {
      int v34 = -1;
    }
    else {
      int v34 = v30 < v28;
    }
    if (v33) {
      int v34 = v33;
    }
    if (v34 <= 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
      char v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"RandomAccessTableReader: you provided the \"s\" option ", 53);
      char v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" (sorted order), but keys are out of order or duplicated: ", 58);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v37 = &__p;
      }
      else {
        char v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = __p.__r_.__value_.__l.__size_;
      }
      int v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
      uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" is followed by ", 16);
      int v41 = *(char *)(a1 + 39);
      if (v41 >= 0) {
        uint64_t v42 = a1 + 16;
      }
      else {
        uint64_t v42 = *(void *)(a1 + 16);
      }
      if (v41 >= 0) {
        uint64_t v43 = *(unsigned __int8 *)(a1 + 39);
      }
      else {
        uint64_t v43 = *(void *)(a1 + 24);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v53);
    }
  }
  BOOL v15 = v26 == 0;
  if (v16 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v15;
}

void sub_1B2275F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::ReadNextObject(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "TableReader: ReadNextObject() called from wrong state.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  uint64_t v2 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)(a1 + 8));
  std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), 0);
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, a1 + 16);
  int v3 = *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32);
  if ((v3 & 2) == 0)
  {
    if ((v3 & 5) != 0)
    {
      if (kaldi::g_kaldi_verbose_level < -1)
      {
LABEL_26:
        int v5 = 4;
        goto LABEL_27;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Error reading archive ", 22);
      if (*(char *)(a1 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
      }
      else {
        std::string v25 = *(std::string *)(a1 + 48);
      }
      kaldi::PrintableRxfilename((uint64_t)&v25, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
        goto LABEL_26;
      }
      size_t v9 = (void *)v25.__r_.__value_.__r.__words[0];
LABEL_24:
      operator delete(v9);
      goto LABEL_25;
    }
    int v6 = std::istream::peek();
    if (v6 != 9)
    {
      if (v6 == 10) {
        goto LABEL_12;
      }
      if (v6 != 32)
      {
        if (kaldi::g_kaldi_verbose_level < -1) {
          goto LABEL_26;
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
        int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Invalid archive file format: expected space after key ", 54);
        int v11 = *(char *)(a1 + 39);
        if (v11 >= 0) {
          uint64_t v12 = a1 + 16;
        }
        else {
          uint64_t v12 = *(void *)(a1 + 16);
        }
        if (v11 >= 0) {
          uint64_t v13 = *(unsigned __int8 *)(a1 + 39);
        }
        else {
          uint64_t v13 = *(void *)(a1 + 24);
        }
        int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
        BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", got character ", 16);
        char v24 = std::istream::peek();
        kaldi::CharToString((kaldi *)&v24, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v16 = &__p;
        }
        else {
          char v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
        }
        int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
        std::string::size_type v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", reading ", 10);
        if (*(char *)(a1 + 71) < 0) {
          std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
        }
        else {
          std::string v22 = *(std::string *)(a1 + 48);
        }
        kaldi::PrintableRxfilename((uint64_t)&v22, &v23);
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v20 = &v23;
        }
        else {
          std::string v20 = (std::string *)v23.__r_.__value_.__r.__words[0];
        }
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v21 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v21 = v23.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_25;
        }
        size_t v9 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_24;
      }
    }
    std::istream::get();
LABEL_12:
    operator new();
  }
  int v5 = 3;
LABEL_27:
  *(_DWORD *)(a1 + 76) = v5;
}

void sub_1B2276450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::CloseInternal(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Close() called on TableReader twice or otherwise wrongly.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  if (*(void *)(a1 + 8)) {
    kaldi::Input::Close((kaldi::Input *)(a1 + 8));
  }
  int v2 = *(_DWORD *)(a1 + 76);
  if (v2 == 2)
  {
    v6[0] = *(void ***)(a1 + 40);
    int v3 = v6[0];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v6);
    MEMORY[0x1B3EA8670](v3, 0x20C40960023A9);
    *(void *)(a1 + 40) = 0;
    int v2 = *(_DWORD *)(a1 + 76);
  }
  *(_DWORD *)(a1 + 76) = 0;
  if (v2 == 4)
  {
    if (!*(unsigned char *)(a1 + 75)) {
      return 0;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"RandomAccessTableReader, error state detected closing reader.  ", 63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Ignoring it because you specified permissive mode.", 50);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    }
  }
  return 1;
}

void sub_1B22765A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderDSortedArchiveImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A48808;
  if (kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::IsOpen(a1)
    && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Error closing RandomAccessTableReader\n", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::~RandomAccessTableReaderArchiveImplBase(a1);
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::~RandomAccessTableReaderArchiveImplBase(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A486E8;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  kaldi::Input::~Input((kaldi::Input *)(a1 + 8));
  return a1;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::HasKey(uint64_t a1, unsigned __int8 *a2)
{
  kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::HandlePendingDelete(a1);
  uint64_t v10 = 0;
  uint64_t result = kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(a1, a2, &v10);
  if (result && *(unsigned char *)(a1 + 72) && !*(void *)(*(void *)(a1 + 80) + 32 * v10 + 24))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Error: HasKey called after Value() already called for ", 54);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" that key, and once (o) option specified: ", 42);
    if (*(char *)(a1 + 71) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else {
      std::string __p = *(std::string *)(a1 + 48);
    }
    kaldi::PrintableRxfilename((uint64_t)&__p, &v8);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, (uint64_t)&v8);
    std::string::~string(&v8);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return result;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::Value(uint64_t a1, uint64_t a2)
{
  kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::HandlePendingDelete(a1);
  uint64_t v22 = 0;
  if (!kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(a1, (unsigned __int8 *)a2, &v22))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"RandomAccessTableReader: Value() called but no such key ", 56);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" in archive ", 12);
    if (*(char *)(a1 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else {
      std::string v18 = *(std::string *)(a1 + 48);
    }
    kaldi::PrintableRxfilename((uint64_t)&v18, &v20);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (uint64_t)&v20);
    std::string::~string(&v20);
    std::string::size_type v17 = &v18;
LABEL_26:
    std::string::~string(v17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  uint64_t result = *(void *)(*(void *)(a1 + 80) + 32 * v22 + 24);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Error: Value() called more than once for key ", 45);
    int v12 = *(char *)(a2 + 23);
    if (v12 >= 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = *(void *)a2;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v14 = *(void *)(a2 + 8);
    }
    BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
    char v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" and once (o) option specified: ", 32);
    if (*(char *)(a1 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else {
      std::string v19 = *(std::string *)(a1 + 48);
    }
    kaldi::PrintableRxfilename((uint64_t)&v19, &v20);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, (uint64_t)&v20);
    std::string::~string(&v20);
    std::string::size_type v17 = &v19;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 72)) {
    *(void *)(a1 + 112) = v22;
  }
  return result;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::Close(void *a1)
{
  uint64_t v2 = a1[10];
  uint64_t v3 = a1[11];
  uint64_t v4 = a1 + 10;
  if (v3 != v2)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 24;
    do
    {
      uint64_t v7 = *(void *)(v2 + v6);
      if (v7)
      {
        size_t v9 = *(void ***)(v2 + v6);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
        MEMORY[0x1B3EA8670](v7, 0x20C40960023A9);
        uint64_t v2 = a1[10];
        uint64_t v3 = a1[11];
      }
      ++v5;
      v6 += 32;
    }
    while (v5 < (v3 - v2) >> 5);
  }
  std::vector<quasar::TextTokenizer::Token>::__clear[abi:ne180100](v4);
  a1[13] = -1;
  a1[14] = -1;
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::CloseInternal((uint64_t)a1);
}

void kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderSortedArchiveImpl(void **a1)
{
  kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderSortedArchiveImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::HandlePendingDelete(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 112);
  if (v1 != -1)
  {
    uint64_t v2 = result;
    uint64_t v4 = *(void ***)(*(void *)(result + 80) + 32 * v1 + 24);
    uint64_t v3 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t result = MEMORY[0x1B3EA8670](v3, 0x20C40960023A9);
    *(void *)(*(void *)(v2 + 80) + 32 * *(void *)(v2 + 112) + 24) = 0;
    *(void *)(v2 + 112) = -1;
  }
  return result;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a1 + 80);
  unint64_t v7 = *(void *)(a1 + 104);
  long long v82 = (uint64_t *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 88);
  if (v7 >= (v8 - v6) >> 5) {
    goto LABEL_16;
  }
  size_t v9 = (unsigned __int8 *)(v6 + 32 * v7);
  uint64_t v10 = v9[23];
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v9[23];
  }
  else {
    uint64_t v11 = *((void *)v9 + 1);
  }
  uint64_t v12 = a2[23];
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *((void *)a2 + 1);
  }
  if (v11 != v12) {
    goto LABEL_16;
  }
  if (v13 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v9, a2, *((void *)v9 + 1))) {
      goto LABEL_16;
    }
LABEL_111:
    *a3 = v7;
    return 1;
  }
  if (!v9[23]) {
    goto LABEL_111;
  }
  while (*v9 == *a2)
  {
    ++v9;
    ++a2;
    if (!--v10) {
      goto LABEL_111;
    }
  }
LABEL_16:
  int v14 = *(_DWORD *)(a1 + 76);
  if (v14 == 1)
  {
    char v16 = 0;
    long long v83 = (_OWORD *)(a1 + 16);
    std::string::size_type v17 = (unint64_t *)(a1 + 96);
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 80);
      uint64_t v8 = *(void *)(a1 + 88);
      if (v6 != v8)
      {
        int v18 = *(char *)(v8 - 9);
        int v15 = (char)v4[23];
        if (v15 >= 0) {
          size_t v19 = v4[23];
        }
        else {
          size_t v19 = *((void *)v4 + 1);
        }
        if (v15 >= 0) {
          std::string v20 = (const std::string::value_type *)v4;
        }
        else {
          std::string v20 = *(const std::string::value_type **)v4;
        }
        if (v18 >= 0) {
          size_t v21 = *(unsigned __int8 *)(v8 - 9);
        }
        else {
          size_t v21 = *(void *)(v8 - 24);
        }
        if (v18 >= 0) {
          uint64_t v22 = (const void *)(v8 - 32);
        }
        else {
          uint64_t v22 = *(const void **)(v8 - 32);
        }
        if (v21 >= v19) {
          size_t v23 = v19;
        }
        else {
          size_t v23 = v21;
        }
        int v24 = memcmp(v20, v22, v23);
        if (v19 < v21) {
          int v25 = -1;
        }
        else {
          int v25 = v21 < v19;
        }
        if (v24) {
          int v25 = v24;
        }
        if (v25 < 1) {
          break;
        }
      }
      kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::ReadNextObject(a1);
      int v26 = *(_DWORD *)(a1 + 76);
      if (v26 == 2)
      {
        unint64_t v27 = *(void *)(a1 + 88);
        char v28 = *(unsigned char *)(a1 + 39);
        if (*(void *)(a1 + 80) != v27)
        {
          size_t v29 = *(unsigned __int8 *)(a1 + 39);
          std::string::size_type v30 = (const void *)(a1 + 16);
          if ((*(unsigned char *)(a1 + 39) & 0x80) != 0)
          {
            std::string::size_type v30 = *(const void **)(a1 + 16);
            size_t v29 = *(void *)(a1 + 24);
          }
          int v31 = *(char *)(v27 - 9);
          if (v31 >= 0) {
            size_t v32 = *(unsigned __int8 *)(v27 - 9);
          }
          else {
            size_t v32 = *(void *)(v27 - 24);
          }
          if (v31 >= 0) {
            int v33 = (const void *)(v27 - 32);
          }
          else {
            int v33 = *(const void **)(v27 - 32);
          }
          if (v32 >= v29) {
            size_t v34 = v29;
          }
          else {
            size_t v34 = v32;
          }
          int v35 = memcmp(v30, v33, v34);
          if (v29 < v32) {
            int v36 = -1;
          }
          else {
            int v36 = v32 < v29;
          }
          if (v35) {
            int v36 = v35;
          }
          if (v36 <= 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
            unint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"RandomAccessTableReader: you provide the sorted (s) ", 52);
            uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"option but keys in archive ", 27);
            if (*(char *)(a1 + 71) < 0) {
              std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
            }
            else {
              std::string v86 = *(std::string *)(a1 + 48);
            }
            kaldi::PrintableRxfilename((uint64_t)&v86, &v84);
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v68 = &v84;
            }
            else {
              unint64_t v68 = (std::string *)v84.__r_.__value_.__r.__words[0];
            }
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v84.__r_.__value_.__l.__size_;
            }
            long long v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, size);
            int v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)" are not ", 9);
            uint64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"in sorted order: ", 17);
            uint64_t v73 = *(void *)(a1 + 88);
            uint64_t v76 = *(void *)(v73 - 32);
            uint64_t v74 = v73 - 32;
            uint64_t v75 = v76;
            int v77 = *(char *)(v74 + 23);
            if (v77 >= 0) {
              uint64_t v78 = v74;
            }
            else {
              uint64_t v78 = v75;
            }
            if (v77 >= 0) {
              uint64_t v79 = *(unsigned __int8 *)(v74 + 23);
            }
            else {
              uint64_t v79 = *(void *)(v74 + 8);
            }
            long long v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, v78, v79);
            long long v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)" is followed by ", 16);
            std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v81, (uint64_t)v83);
            std::string::~string(&v84);
            std::string::~string(&v86);
LABEL_126:
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v87);
          }
        }
        if (v28 < 0)
        {
          std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
          uint64_t v37 = *(void *)(a1 + 40);
          unint64_t v27 = *(void *)(a1 + 88);
        }
        else
        {
          uint64_t v37 = *(void *)(a1 + 40);
          *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *v83;
          v84.__r_.__value_.__r.__words[2] = *(void *)(a1 + 32);
        }
        uint64_t v85 = v37;
        if (v27 >= *v17)
        {
          uint64_t v39 = (uint64_t)(v27 - *v82) >> 5;
          if ((unint64_t)(v39 + 1) >> 59) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v40 = *v17 - *v82;
          uint64_t v41 = v40 >> 4;
          if (v40 >> 4 <= (unint64_t)(v39 + 1)) {
            uint64_t v41 = v39 + 1;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v42 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v41;
          }
          uint64_t v89 = a1 + 96;
          uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 96, v42);
          std::string::size_type v44 = (std::string::size_type)&v43[32 * v39];
          v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
          v87.__r_.__value_.__l.__size_ = v44;
          long long v88 = &v43[32 * v45];
          long long v46 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
          *(void *)(v44 + 16) = *((void *)&v84.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v44 = v46;
          memset(&v84, 0, sizeof(v84));
          *(void *)(v44 + 24) = v85;
          v87.__r_.__value_.__r.__words[2] = v44 + 32;
          std::vector<std::pair<std::string,kaldi::TokenVectorHolder *>>::__swap_out_circular_buffer(v82, &v87);
          uint64_t v47 = *(void *)(a1 + 88);
          std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v87);
          int v48 = SHIBYTE(v84.__r_.__value_.__r.__words[2]);
          *(void *)(a1 + 88) = v47;
          if (v48 < 0) {
            operator delete(v84.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v38 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
          *(void *)(v27 + 16) = *((void *)&v84.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v27 = v38;
          memset(&v84, 0, sizeof(v84));
          *(void *)(v27 + 24) = v85;
          *(void *)(a1 + 88) = v27 + 32;
        }
        *(void *)(a1 + 40) = 0;
        int v26 = 1;
        *(_DWORD *)(a1 + 76) = 1;
      }
      char v16 = 1;
      if (v26 != 1)
      {
        uint64_t v6 = *(void *)(a1 + 80);
        uint64_t v8 = *(void *)(a1 + 88);
        goto LABEL_96;
      }
    }
    if ((v16 & 1) == 0) {
      goto LABEL_19;
    }
LABEL_96:
    if (v6 == v8) {
      return 0;
    }
    uint64_t v56 = *(unsigned __int8 *)(v8 - 9);
    if ((v56 & 0x80u) == 0) {
      uint64_t v57 = *(unsigned __int8 *)(v8 - 9);
    }
    else {
      uint64_t v57 = *(void *)(v8 - 24);
    }
    uint64_t v58 = v4[23];
    int v59 = (char)v58;
    if ((v58 & 0x80u) != 0) {
      uint64_t v58 = *((void *)v4 + 1);
    }
    if (v57 != v58) {
      return 0;
    }
    long long v60 = (const void **)(v8 - 32);
    if (v59 >= 0) {
      std::string v61 = v4;
    }
    else {
      std::string v61 = *(unsigned __int8 **)v4;
    }
    if ((v56 & 0x80) != 0)
    {
      if (memcmp(*v60, v61, *(void *)(v8 - 24))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v8 - 9))
    {
      while (*(unsigned __int8 *)v60 == *v61)
      {
        long long v60 = (const void **)((char *)v60 + 1);
        ++v61;
        if (!--v56) {
          goto LABEL_119;
        }
      }
      return 0;
    }
LABEL_119:
    uint64_t v64 = ((v8 - v6) >> 5) - 1;
    *a3 = v64;
    *(void *)(a1 + 104) = v64;
    return 1;
  }
  if (!v14)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v87, "Trying to access a RandomAccessTableReader object that is not open.");
    goto LABEL_126;
  }
  LOBYTE(v15) = v4[23];
LABEL_19:
  if ((v15 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    uint64_t v6 = *(void *)(a1 + 80);
    uint64_t v8 = *(void *)(a1 + 88);
  }
  else
  {
    std::string v87 = *(std::string *)v4;
  }
  long long v88 = 0;
  char v90 = 0;
  uint64_t v49 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *> *>,std::__wrap_iter<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *> *>,std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__identity,kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::PairCompare>(v6, v8, (const void **)&v87.__r_.__value_.__l.__data_);
  uint64_t v50 = v49;
  if (*(void *)(a1 + 88) == v49) {
    goto LABEL_113;
  }
  uint64_t v51 = v4[23];
  if ((v51 & 0x80u) == 0) {
    uint64_t v52 = v4[23];
  }
  else {
    uint64_t v52 = *((void *)v4 + 1);
  }
  uint64_t v53 = *(unsigned __int8 *)(v49 + 23);
  int v54 = (char)v53;
  if ((v53 & 0x80u) != 0) {
    uint64_t v53 = *(void *)(v49 + 8);
  }
  if (v52 != v53) {
    goto LABEL_113;
  }
  if (v54 >= 0) {
    long long v55 = (unsigned __int8 *)v49;
  }
  else {
    long long v55 = *(unsigned __int8 **)v49;
  }
  if ((v51 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, v55, *((void *)v4 + 1)))
    {
LABEL_113:
      uint64_t v62 = 0;
      goto LABEL_114;
    }
  }
  else if (v4[23])
  {
    while (*v4 == *v55)
    {
      ++v4;
      ++v55;
      if (!--v51) {
        goto LABEL_116;
      }
    }
    goto LABEL_113;
  }
LABEL_116:
  uint64_t v63 = (v50 - *(void *)(a1 + 80)) >> 5;
  *a3 = v63;
  *(void *)(a1 + 104) = v63;
  uint64_t v62 = 1;
LABEL_114:
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  return v62;
}

void sub_1B22771AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

void sub_1B22771FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    JUMPOUT(0x1B2277220);
  }
  JUMPOUT(0x1B2277224);
}

uint64_t std::vector<std::pair<std::string,kaldi::TokenVectorHolder *>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,kaldi::TokenVectorHolder *>>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,kaldi::TokenVectorHolder *>>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v8 - 8) = *(void *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,kaldi::TokenVectorHolder *>>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,kaldi::TokenVectorHolder *>>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderSortedArchiveImpl(void **a1)
{
  *a1 = &unk_1F0A48778;
  if (kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::IsOpen((uint64_t)a1)
    && ((*((uint64_t (**)(void **))*a1 + 3))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Error closing RandomAccessTableReader\n", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  v3[0] = a1 + 10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v3);
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::~RandomAccessTableReaderArchiveImplBase((uint64_t)a1);
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::HasKey(uint64_t a1, unsigned __int8 *a2)
{
  kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::HandlePendingDelete(a1);
  return kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(a1, a2, 0);
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::Value(uint64_t a1, uint64_t a2)
{
  kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::HandlePendingDelete(a1);
  uint64_t v14 = 0;
  if (!kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(a1, (unsigned __int8 *)a2, &v14))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"RandomAccessTableReader: Value() called but no such key ", 56);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" in archive ", 12);
    if (*(char *)(a1 + 71) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else {
      std::string __p = *(std::string *)(a1 + 48);
    }
    kaldi::PrintableRxfilename((uint64_t)&__p, &v12);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (uint64_t)&v12);
    std::string::~string(&v12);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  return v14;
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::Close(uint64_t a1)
{
  for (uint64_t i = *(void **)(a1 + 96); i; uint64_t i = (void *)*i)
  {
    uint64_t v3 = i[5];
    if (v3)
    {
      uint64_t v5 = (void **)i[5];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
      MEMORY[0x1B3EA8670](v3, 0x20C40960023A9);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(a1 + 80);
  MEMORY[0x1B3EA7B20](a1 + 136, "");
  *(unsigned char *)(a1 + 128) = 0;
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::CloseInternal(a1);
}

void kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderUnsortedArchiveImpl(uint64_t a1)
{
  kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderUnsortedArchiveImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::HandlePendingDelete(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    *(unsigned char *)(a1 + 128) = 0;
    uint64_t v2 = *(void *)(a1 + 120);
    uint64_t v3 = *(void *)(v2 + 40);
    if (v3)
    {
      v11[0] = *(void ***)(v2 + 40);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v11);
      MEMORY[0x1B3EA8670](v3, 0x20C40960023A9);
    }
    if (*(char *)(a1 + 159) < 0) {
      uint64_t v4 = *(void *)(a1 + 144);
    }
    else {
      uint64_t v4 = *(unsigned __int8 *)(a1 + 159);
    }
    uint64_t v5 = *(void *)(a1 + 120);
    if (!v4)
    {
      std::string::operator=((std::string *)(a1 + 136), (const std::string *)(v5 + 16));
      uint64_t v5 = *(void *)(a1 + 120);
    }
    if (*(char *)(v5 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(v5 + 16), *(void *)(v5 + 24));
      uint64_t v5 = *(void *)(a1 + 120);
    }
    else
    {
      std::string v12 = *(std::string *)(v5 + 16);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::erase((void *)(a1 + 80), (uint64_t *)v5);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11, 3);
      int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"After deleting holder for key: ", 31);
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v7 = &v12;
      }
      else {
        uint64_t v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
      }
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v12.__r_.__value_.__l.__size_;
      }
      long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", map std::string::size_type size = ", 13);
      uint64_t v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)".", 1);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B22777FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 - 41) < 0) {
    operator delete(*(void **)(v10 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v6 = a1 + 80;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::find<std::string>((void *)(a1 + 80), (char *)a2);
  if (v7)
  {
    if (a3)
    {
      *a3 = *((void *)v7 + 5);
      if (*(unsigned char *)(a1 + 72))
      {
        *(void *)(a1 + 120) = v7;
        goto LABEL_5;
      }
    }
    return 1;
  }
  if (*(_DWORD *)(a1 + 76) != 1)
  {
LABEL_33:
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v20 = a2[23];
      if ((v20 & 0x80u) == 0) {
        uint64_t v21 = a2[23];
      }
      else {
        uint64_t v21 = *((void *)a2 + 1);
      }
      uint64_t v22 = *(unsigned __int8 *)(a1 + 159);
      int v23 = (char)v22;
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *(void *)(a1 + 144);
      }
      if (v21 == v22)
      {
        if (v23 >= 0) {
          int v24 = (unsigned __int8 *)(a1 + 136);
        }
        else {
          int v24 = *(unsigned __int8 **)(a1 + 136);
        }
        if ((v20 & 0x80) == 0)
        {
          if (a2[23])
          {
            int v25 = a2;
            while (*v25 == *v24)
            {
              ++v25;
              ++v24;
              if (!--v20) {
                goto LABEL_48;
              }
            }
            return 0;
          }
LABEL_48:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
          int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"RandomAccessTableReader: you specified the once (o) option but you are calling using key ", 89);
          int v27 = (char)a2[23];
          if (v27 >= 0) {
            uint64_t v28 = (uint64_t)a2;
          }
          else {
            uint64_t v28 = *(void *)a2;
          }
          if (v27 >= 0) {
            uint64_t v29 = a2[23];
          }
          else {
            uint64_t v29 = *((void *)a2 + 1);
          }
          std::string::size_type v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
          int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" more than once: archive is ", 28);
          if (*(char *)(a1 + 71) < 0) {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
          }
          else {
            std::string __p = *(std::string *)(a1 + 48);
          }
          kaldi::PrintableRxfilename((uint64_t)&__p, &v40);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v31, (uint64_t)&v40);
          std::string::~string(&v40);
          std::string::~string(&__p);
          goto LABEL_73;
        }
        if (!memcmp(*(const void **)a2, v24, *((void *)a2 + 1))) {
          goto LABEL_48;
        }
      }
    }
    return 0;
  }
  long long v9 = (const void **)(a1 + 16);
  while (1)
  {
    kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::ReadNextObject(a1);
    int v10 = *(_DWORD *)(a1 + 76);
    if (v10 == 2) {
      break;
    }
LABEL_32:
    if (v10 != 1) {
      goto LABEL_33;
    }
  }
  *(_DWORD *)(a1 + 76) = 1;
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)v9;
    v41.__r_.__value_.__r.__words[2] = *(void *)(a1 + 32);
  }
  uint64_t v42 = *(void *)(a1 + 40);
  uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>(v6, (char *)&v41, (uint64_t)&v41);
  char v13 = v12;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (!v13)
  {
    uint64_t v32 = *(void *)(a1 + 40);
    if (v32)
    {
      v41.__r_.__value_.__r.__words[0] = *(void *)(a1 + 40);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      MEMORY[0x1B3EA8670](v32, 0x20C40960023A9);
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    int v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Error in RandomAccessTableReader: duplicate key ", 48);
    int v34 = *(char *)(a1 + 39);
    if (v34 >= 0) {
      uint64_t v35 = a1 + 16;
    }
    else {
      uint64_t v35 = *(void *)(a1 + 16);
    }
    if (v34 >= 0) {
      uint64_t v36 = *(unsigned __int8 *)(a1 + 39);
    }
    else {
      uint64_t v36 = *(void *)(a1 + 24);
    }
    uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
    long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" in archive ", 12);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38, a1 + 48);
LABEL_73:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41);
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v14 = *(unsigned __int8 *)(a1 + 39);
  if ((v14 & 0x80u) == 0) {
    uint64_t v15 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v15 = *(void *)(a1 + 24);
  }
  uint64_t v16 = a2[23];
  int v17 = (char)v16;
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *((void *)a2 + 1);
  }
  if (v15 != v16) {
    goto LABEL_31;
  }
  if (v17 >= 0) {
    int v18 = a2;
  }
  else {
    int v18 = *(unsigned __int8 **)a2;
  }
  if ((v14 & 0x80) == 0)
  {
    if (!*(unsigned char *)(a1 + 39)) {
      goto LABEL_56;
    }
    size_t v19 = (unsigned __int8 *)(a1 + 16);
    while (*v19 == *v18)
    {
      ++v19;
      ++v18;
      if (!--v14) {
        goto LABEL_56;
      }
    }
    goto LABEL_31;
  }
  if (memcmp(*v9, v18, *(void *)(a1 + 24)))
  {
LABEL_31:
    int v10 = *(_DWORD *)(a1 + 76);
    goto LABEL_32;
  }
LABEL_56:
  if (!a3) {
    return 1;
  }
  *a3 = *((void *)v11 + 5);
  if (!*(unsigned char *)(a1 + 72)) {
    return 1;
  }
  *(void *)(a1 + 120) = v11;
LABEL_5:
  uint64_t result = 1;
  *(unsigned char *)(a1 + 128) = 1;
  return result;
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderUnsortedArchiveImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A48898;
  if (kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::IsOpen(a1)
    && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Error closing RandomAccessTableReader\n", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 80);
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::~RandomAccessTableReaderArchiveImplBase(a1);
}

void *kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>::~RandomAccessTableReader(void *a1)
{
  if (*a1 && (kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>::Close(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"RandomAccessTableReader destructor: failure detected.", 53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return a1;
}

uint64_t kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>::Close(void *a1)
{
  kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CheckImpl(a1);
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  if (*a1) {
    (*(void (**)(void))(*(void *)*a1 + 40))(*a1);
  }
  *a1 = 0;
  return v2;
}

uint64_t kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char *a5, int a6, float a7)
{
  uint64_t v11 = (uint64_t *)(a1 + 16);
  unint64_t v12 = a2 + 7853 * a3;
  uint64_t v13 = *(void *)(a1 + 40);
  unint64_t v14 = v12 % *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(v13 + 16 * v14 + 8);
  if (v15)
  {
    uint64_t v16 = *(void *)(v13 + 16 * v14);
    int v17 = (uint64_t *)(a1 + 16);
    if (v16 != -1) {
      int v17 = (uint64_t *)(*(void *)(v13 + 16 * v16 + 8) + 24);
    }
    uint64_t v18 = *(void *)(v15 + 24);
    for (uint64_t i = *v17; i != v18; uint64_t i = *(void *)(i + 24))
    {
      if (*(void *)i == a2 && *(void *)(i + 8) == a3)
      {
        uint64_t v22 = *(unsigned int *)(i + 16);
        uint64_t v29 = (float *)(*(void *)(a1 + 360) + 36 * v22);
        if (*v29 > a7)
        {
          float *v29 = a7;
          if (!a5) {
            return v22;
          }
          goto LABEL_20;
        }
        if (!a5) {
          return v22;
        }
        char v30 = 0;
        goto LABEL_21;
      }
    }
  }
  uint64_t v21 = (int *)(*(void *)(a1 + 96) + 8 * a4);
  uint64_t v22 = kaldi::quasar::E2ETokenHeap::NewToken((kaldi::quasar::E2ETokenHeap *)(a1 + 360), a7, 0.0, 0, *v21, a6);
  *uint64_t v21 = v22;
  ++*(_DWORD *)(a1 + 308);
  unint64_t v23 = v12 % *(void *)(a1 + 32);
  int v24 = (void *)(*(void *)(a1 + 40) + 16 * v23);
  uint64_t v25 = kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::New((uint64_t)v11);
  *(void *)uint64_t v25 = a2;
  *(void *)(v25 + 8) = a3;
  *(_DWORD *)(v25 + 16) = v22;
  int v26 = v24 + 1;
  uint64_t v27 = v24[1];
  if (v27)
  {
    *(void *)(v25 + 24) = *(void *)(v27 + 24);
    *(void *)(v27 + 24) = v25;
    *int v26 = v25;
    if (!a5) {
      return v22;
    }
  }
  else
  {
    uint64_t v28 = *(void *)(a1 + 24);
    if (v28 != -1) {
      uint64_t v11 = (uint64_t *)(*(void *)(*(void *)(a1 + 40) + 16 * v28 + 8) + 24);
    }
    *uint64_t v11 = v25;
    *(void *)(v25 + 24) = 0;
    *int v26 = v25;
    void *v24 = v28;
    *(void *)(a1 + 24) = v23;
    if (!a5) {
      return v22;
    }
  }
LABEL_20:
  char v30 = 1;
LABEL_21:
  *a5 = v30;
  return v22;
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessNonemitting(uint64_t a1, int a2, float a3)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(char **)(a1 + 160);
  int v59 = (void *)(a1 + 160);
  uint64_t v4 = *(long long **)(a1 + 16);
  if (v4)
  {
    uint64_t v7 = (void *)(a1 + 176);
    do
    {
      long long v69 = *v4;
      int v8 = *((_DWORD *)v4 + 4);
      if ((unint64_t)v3 >= *v7)
      {
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v3[-*v59] >> 3);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(*v7 - *v59) >> 3) > v10) {
          unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*v7 - *v59) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v7 - *v59) >> 3) >= 0x555555555555555) {
          unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v7, v11);
        }
        else {
          unint64_t v12 = 0;
        }
        uint64_t v13 = &v12[24 * v9];
        *(_OWORD *)uint64_t v13 = v69;
        *((_DWORD *)v13 + 4) = v8;
        uint64_t v15 = *(char **)(a1 + 160);
        unint64_t v14 = *(char **)(a1 + 168);
        uint64_t v16 = v13;
        if (v14 != v15)
        {
          do
          {
            long long v17 = *(_OWORD *)(v14 - 24);
            *((void *)v16 - 1) = *((void *)v14 - 1);
            *(_OWORD *)(v16 - 24) = v17;
            v16 -= 24;
            v14 -= 24;
          }
          while (v14 != v15);
          unint64_t v14 = (char *)*v59;
        }
        uint64_t v3 = v13 + 24;
        *(void *)(a1 + 160) = v16;
        *(void *)(a1 + 168) = v13 + 24;
        *(void *)(a1 + 176) = &v12[24 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v3 = *v4;
        *((_DWORD *)v3 + 4) = v8;
        v3 += 24;
      }
      *(void *)(a1 + 168) = v3;
      uint64_t v4 = (long long *)*((void *)v4 + 3);
    }
    while (v4);
    uint64_t v58 = (uint64_t)v7;
    if ((char *)*v59 != v3)
    {
      do
      {
        unint64_t v20 = *((void *)v3 - 3);
        uint64_t v18 = *((void *)v3 - 2);
        size_t v19 = v3 - 24;
        uint64_t v21 = *((unsigned int *)v19 + 4);
        *(void *)(a1 + 168) = v19;
        uint64_t v64 = *(void *)(a1 + 360);
        unint64_t v66 = (float *)(v64 + 36 * v21);
        uint64_t v67 = v18;
        float v22 = *v66;
        if (*v66 <= a3)
        {
          uint64_t v23 = v64 + 36 * v21;
          *(_DWORD *)(v23 + 8) = 0;
          int v24 = (int *)(v23 + 8);
          (*(void (**)(void, unint64_t, uint64_t, void))(**(void **)(a1 + 184) + 80))(*(void *)(a1 + 184), v20, a1 + 608, 0);
          uint64_t v68 = HIDWORD(v20);
          uint64_t v26 = *(void *)(a1 + 624);
          uint64_t v27 = *(void *)(a1 + 632);
          if (v26 != v27)
          {
            char v62 = 0;
            v25.n128_u32[1] = HIDWORD(v21);
            uint64_t v28 = (_DWORD *)(v64 + 36 * v21);
            uint64_t v63 = v28 + 7;
            std::string v61 = v28 + 8;
            long long v60 = v28 + 5;
            while (1)
            {
              if (*(_DWORD *)v26)
              {
                if (*(unsigned char *)(a1 + 304)) {
                  goto LABEL_72;
                }
                goto LABEL_26;
              }
              if ((uint64_t v29 = *(unsigned int *)(v26 + 4),
                    float v30 = *(float *)(v26 + 8),
                    uint64_t v31 = *(int *)(v26 + 12),
                    v25.n128_u32[0] = *(_DWORD *)(a1 + 224),
                    (int)v29 >= *(_DWORD *)(a1 + 264))
                && (int)v29 <= *(_DWORD *)(a1 + 268)
                || (v25.n128_f32[0] = (float)(v22 + (float)(v25.n128_f32[0] * v30)) - *(float *)(a1 + 260),
                    v25.n128_f32[0] <= a3))
              {
                uint64_t v32 = *(void *)(a1 + 296);
                if (!v32) {
                  break;
                }
                if (!(*v63 >> 26)) {
                  break;
                }
                LODWORD(v69) = *(_DWORD *)(v26 + 4);
                if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(v32 + 64), (int *)&v69))break; {
              }
                }
LABEL_26:
              v26 += 16;
              if (v26 == v27) {
                goto LABEL_72;
              }
            }
            if (v29)
            {
              if (((*(uint64_t (**)(void, uint64_t, uint64_t, long long *, __n128))(**(void **)(a1 + 288)
                                                                                            + 32))(*(void *)(a1 + 288), v68, v29, &v69, v25) & 1) != 0)
              {
                float v33 = NAN;
                if (v30 != -INFINITY)
                {
                  float v33 = NAN;
                  if (*((float *)&v69 + 2) != -INFINITY)
                  {
                    float v33 = INFINITY;
                    if (*((float *)&v69 + 2) != INFINITY && v30 != INFINITY) {
                      float v33 = v30 + *((float *)&v69 + 2);
                    }
                  }
                }
                LODWORD(v29) = DWORD1(v69);
                unint64_t v35 = HIDWORD(v69);
                double v36 = *(float *)(a1 + 224);
                double v37 = v33;
                if (!DWORD1(v69))
                {
                  double v38 = 0.0;
                  goto LABEL_48;
                }
              }
              else
              {
                double v36 = *(float *)(a1 + 224);
                double v37 = INFINITY;
                unint64_t v35 = HIDWORD(v20);
              }
              double v38 = *(float *)(a1 + 220);
            }
            else
            {
              double v36 = *(float *)(a1 + 224);
              double v37 = v30;
              double v38 = 0.0;
              unint64_t v35 = HIDWORD(v20);
            }
LABEL_48:
            v25.n128_f64[0] = v36 * (v37 + v38);
            float v39 = v25.n128_f64[0];
            if ((float)(v22 + v39) < a3)
            {
              LOBYTE(v69) = 0;
              uint64_t v40 = v31 + (v35 << 32);
              unsigned int v41 = kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(a1, v40, v67, a2, (char *)&v69, *v63 >> 26, v22 + v39);
              uint64_t v42 = *(void *)(a1 + 360);
              if ((*v61 & 0x80000000) != 0) {
                *(_DWORD *)(v42 + 36 * v41 + 32) |= 0x80000000;
              }
              if ((_BYTE)v69)
              {
                uint64_t v43 = v42 + 36 * v41;
                *(_DWORD *)(v43 + 24) &= 0x80000000;
                *(int8x8_t *)(v43 + 28) = vorr_s8(vand_s8(*(int8x8_t *)(v43 + 28), (int8x8_t)0x80000000FC000000), (int8x8_t)__PAIR64__(v29, v21));
                *(_DWORD *)(v43 + 16) = v35;
                *(_DWORD *)(v43 + 20) = *v60;
              }
              int *v24 = kaldi::quasar::E2ETokenHeap::NewForwardLink((kaldi::quasar::E2ETokenHeap *)(a1 + 360), v41, 0, v29, v39, 0.0, *v24);
              ++*(_DWORD *)(a1 + 312);
              if ((_BYTE)v69)
              {
                uint64_t v45 = *(uint64_t **)(a1 + 168);
                unint64_t v44 = *(void *)(a1 + 176);
                if ((unint64_t)v45 >= v44)
                {
                  uint64_t v47 = (char *)*v59;
                  unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v45 - *v59) >> 3);
                  unint64_t v49 = v48 + 1;
                  if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (void)v47) >> 3);
                  if (2 * v50 > v49) {
                    unint64_t v49 = 2 * v50;
                  }
                  if (v50 >= 0x555555555555555) {
                    unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v51 = v49;
                  }
                  if (v51)
                  {
                    uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v58, v51);
                    uint64_t v47 = *(char **)(a1 + 160);
                    uint64_t v45 = *(uint64_t **)(a1 + 168);
                  }
                  else
                  {
                    uint64_t v52 = 0;
                  }
                  uint64_t v53 = &v52[24 * v48];
                  *(void *)uint64_t v53 = v40;
                  *((void *)v53 + 1) = v67;
                  *((_DWORD *)v53 + 4) = v41;
                  int v54 = v53;
                  if (v45 != (uint64_t *)v47)
                  {
                    do
                    {
                      __n128 v25 = *(__n128 *)(v45 - 3);
                      *((void *)v54 - 1) = *(v45 - 1);
                      *(__n128 *)(v54 - 24) = v25;
                      v54 -= 24;
                      v45 -= 3;
                    }
                    while (v45 != (uint64_t *)v47);
                    uint64_t v47 = (char *)*v59;
                  }
                  long long v46 = v53 + 24;
                  *(void *)(a1 + 160) = v54;
                  *(void *)(a1 + 168) = v53 + 24;
                  *(void *)(a1 + 176) = &v52[24 * v51];
                  if (v47) {
                    operator delete(v47);
                  }
                }
                else
                {
                  *uint64_t v45 = v40;
                  v45[1] = v67;
                  long long v46 = (char *)(v45 + 3);
                  *((_DWORD *)v45 + 4) = v41;
                }
                *(void *)(a1 + 168) = v46;
                char v62 = 1;
              }
            }
            goto LABEL_26;
          }
          char v62 = 0;
LABEL_72:
          if (*(void *)(a1 + 296)
            && ((*(unsigned int (**)(void))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184)) == v20
             || a3 != INFINITY && (*(_DWORD *)(v64 + 36 * v21 + 32) & 0x80000000) != 0))
          {
            if (*(_DWORD *)(v64 + 36 * v21 + 28) >> 26)
            {
              if ((v62 & 1) == 0 && (*(_DWORD *)(v64 + 36 * v21 + 32) & 0x7FFFFFFF) == 0)
              {
                LODWORD(v69) = *(_DWORD *)(*(void *)(*(void *)(a1 + 296) + 40)
                                         + 12 * (*(_DWORD *)(v64 + 36 * v21 + 28) >> 26)
                                         + 8);
                kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::emitClassTag(a1, (uint64_t)v66, v21, a2, v20, v68, v67, &v69, a3, 1, 0, 0);
              }
            }
            else
            {
              uint64_t v55 = *(void *)(*(void *)(a1 + 296) + 40);
              if (*(void *)(*(void *)(a1 + 296) + 48) - v55 != 12)
              {
                uint64_t v56 = 0;
                uint64_t v57 = 1;
                do
                {
                  *(void *)&long long v69 = *(void *)(v55 + v56 + 12);
                  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::emitClassTag(a1, (uint64_t)v66, v21, a2, v20, v68, v67, &v69, a3, 2, 1, v57++);
                  uint64_t v55 = *(void *)(*(void *)(a1 + 296) + 40);
                  v56 += 12;
                }
                while (v57 != 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a1 + 296) + 48) - v55) >> 2));
              }
            }
          }
        }
        uint64_t v3 = *(char **)(a1 + 168);
      }
      while (*(char **)(a1 + 160) != v3);
    }
  }
}

uint64_t kaldi::quasar::E2ETokenHeap::Clear(kaldi::quasar::E2ETokenHeap *this)
{
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::Clear((uint64_t)this);
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16);
  kaldi::quasar::E2ETokenHeap::E2ETokenHeap((kaldi::quasar::E2ETokenHeap *)v3, *((_DWORD *)this + 8), *((_DWORD *)this + 9));
  kaldi::quasar::E2ETokenHeap::operator=(this, v3);
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)&v4);
  return kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::Clear((uint64_t)v3);
}

void sub_1B2278748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::quasar::E2ETokenHeap::~E2ETokenHeap((kaldi::quasar::E2ETokenHeap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::Clear(uint64_t result)
{
  if (*(void *)result)
  {
    uint64_t v1 = (void *)result;
    if (*(_DWORD *)(result + 8))
    {
      uint64_t result = MEMORY[0x1B3EAA6A0](*MEMORY[0x1E4F14960]);
      if (result)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        uint64_t v2 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)": Could not vm_deallocate ", 26);
        uint64_t v3 = (void *)std::ostream::operator<<();
        uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" bytes of ", 10);
        size_t v5 = strlen((const char *)(0x80000001B25A45C6 & 0x7FFFFFFFFFFFFFFFLL));
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, 0x80000001B25A45C6 & 0x7FFFFFFFFFFFFFFFLL, v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
      }
      *uint64_t v1 = 0;
      v1[1] = 0;
    }
  }
  return result;
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear(uint64_t result)
{
  if (*(void *)result)
  {
    uint64_t v1 = (void *)result;
    if (*(_DWORD *)(result + 8))
    {
      uint64_t result = MEMORY[0x1B3EAA6A0](*MEMORY[0x1E4F14960]);
      if (result)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        uint64_t v2 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)": Could not vm_deallocate ", 26);
        uint64_t v3 = (void *)std::ostream::operator<<();
        uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" bytes of ", 10);
        size_t v5 = strlen((const char *)(0x80000001B25A45EALL & 0x7FFFFFFFFFFFFFFFLL));
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, 0x80000001B25A45EALL & 0x7FFFFFFFFFFFFFFFLL, v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
      }
      *uint64_t v1 = 0;
      v1[1] = 0;
    }
  }
  return result;
}

void *kaldi::quasar::E2ETokenHeap::operator=(void *a1, void *a2)
{
  if (a1 != a2)
  {
    kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::Clear((uint64_t)a1);
    *a1 = *a2;
    a1[1] = a2[1];
    *a2 = 0;
    a2[1] = 0;
    kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)(a1 + 2));
    a1[2] = a2[2];
    a1[3] = a2[3];
    a2[2] = 0;
    a2[3] = 0;
  }
  a1[4] = a2[4];
  return a1;
}

void kaldi::quasar::E2ETokenHeap::~E2ETokenHeap(kaldi::quasar::E2ETokenHeap *this)
{
}

kaldi::quasar::E2ETokenHeap *kaldi::quasar::E2ETokenHeap::E2ETokenHeap(kaldi::quasar::E2ETokenHeap *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::LazyBuffer((uint64_t)this, a2, 0);
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::LazyBuffer(v6 + 16, a3, 0);
  *((_DWORD *)this + 8) = a2;
  *((_DWORD *)this + 9) = a3;
  return this;
}

void sub_1B2278A60(_Unwind_Exception *a1)
{
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::Clear(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::LazyBuffer(uint64_t a1, unsigned int a2, int a3)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 12) = 1;
  if (!a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "count > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  *(_DWORD *)(a1 + 8) = a2;
  if (a3) {
    *(_DWORD *)(a1 + 12) = a2;
  }
  vm_address_t address = 0;
  if (vm_allocate(*MEMORY[0x1E4F14960], &address, 36 * a2, 1711276033))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      size_t v5 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": Could not vm_allocate ", 24);
      uint64_t v6 = (void *)std::ostream::operator<<();
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" of ", 4);
      size_t v8 = strlen((const char *)(0x80000001B25A45C6 & 0x7FFFFFFFFFFFFFFFLL));
      unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, 0x80000001B25A45C6 & 0x7FFFFFFFFFFFFFFFLL, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
    }
    exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
  }
  *(void *)a1 = address;
  return a1;
}

void sub_1B2278BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1B2278BFC(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::LazyBuffer(uint64_t a1, unsigned int a2, int a3)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 12) = 1;
  if (!a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "count > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  *(_DWORD *)(a1 + 8) = a2;
  if (a3) {
    *(_DWORD *)(a1 + 12) = a2;
  }
  vm_address_t address = 0;
  if (vm_allocate(*MEMORY[0x1E4F14960], &address, 24 * a2, 1711276033))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      size_t v5 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": Could not vm_allocate ", 24);
      uint64_t v6 = (void *)std::ostream::operator<<();
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" of ", 4);
      size_t v8 = strlen((const char *)(0x80000001B25A45EALL & 0x7FFFFFFFFFFFFFFFLL));
      unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, 0x80000001B25A45EALL & 0x7FFFFFFFFFFFFFFFLL, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
    }
    exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
  }
  *(void *)a1 = address;
  return a1;
}

void sub_1B2278D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1B2278D90(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::E2ETokenHeap::NewToken(kaldi::quasar::E2ETokenHeap *this, float a2, float a3, int a4, int a5, int a6)
{
  uint64_t v7 = *((void *)this + 1);
  uint64_t result = HIDWORD(v7);
  if (HIDWORD(v7) == v7)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    kaldi::quasar::TooManyTokensError::TooManyTokensError(exception, "Ran out of token storage");
  }
  *((_DWORD *)this + 3) = HIDWORD(v7) + 1;
  uint64_t v9 = *(void *)this + 36 * HIDWORD(v7);
  *(float *)uint64_t v9 = a2;
  *(float *)(v9 + 4) = a3;
  *(_DWORD *)(v9 + 8) = a4;
  *(_DWORD *)(v9 + 12) = a5;
  *(void *)(v9 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 28) = (a6 << 26);
  return result;
}

void sub_1B2278E34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::New(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result) {
    operator new[]();
  }
  *(void *)(a1 + 48) = *(void *)(result + 24);
  return result;
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::emitClassTag(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, _DWORD *a8, float a9, int a10, char a11, int a12)
{
  uint64_t v12 = a10;
  if (a10)
  {
    float v19 = *(float *)a2;
    if (!a11
      || (float)((float)(v19
                       + (float)(*(float *)(a1 + 224)
                               * *(float *)(*(void *)(*(void *)(a1 + 296) + 104) + 4 * a12)))
               - *(float *)(a1 + 260)) <= a9)
    {
      int v43 = a10 - 1;
      if (a10 < 1)
      {
        float v21 = 0.0;
      }
      else
      {
        unint64_t v20 = a8;
        float v21 = 0.0;
        do
        {
          if (*v20++)
          {
            if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 288) + 32))(*(void *)(a1 + 288), a6))
            {
              float v23 = v48 + 0.0;
              if (v48 == INFINITY) {
                float v23 = INFINITY;
              }
              if (v48 == -INFINITY) {
                float v23 = NAN;
              }
              float v24 = v23;
              a6 = v49;
            }
            else
            {
              float v24 = INFINITY;
            }
          }
          else
          {
            float v24 = 0.0;
          }
          float v25 = *(float *)(a1 + 224);
          float v19 = v19 + (float)(v25 * v24);
          float v21 = v21 + (float)(v25 * v24);
          --v12;
        }
        while (v12);
      }
      if (v19 < a9)
      {
        v47[0] = 0;
        uint64_t v26 = (a6 << 32) + a5;
        unsigned int v27 = kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(a1, v26, a7, a4, v47, a12, v19);
        uint64_t v28 = *(void *)(a1 + 360);
        *(_DWORD *)(a2 + 8) = kaldi::quasar::E2ETokenHeap::NewForwardLink((kaldi::quasar::E2ETokenHeap *)(a1 + 360), v27, 0, a8[v43], v21, 0.0, *(_DWORD *)(a2 + 8));
        if (v47[0])
        {
          uint64_t v29 = (_DWORD *)(v28 + 36 * v27);
          unsigned int v30 = v29[7] & 0xFC000000 | a3;
          v29[6] &= 0x80000000;
          v29[7] = v30;
          v29[8] = v29[8] & 0x80000000 | a8[v43];
          v29[4] = a6;
          unint64_t v31 = *(void *)(a1 + 176);
          uint64_t v32 = *(uint64_t **)(a1 + 168);
          if ((unint64_t)v32 >= v31)
          {
            int v34 = *(uint64_t **)(a1 + 160);
            unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (v32 - v34);
            unint64_t v36 = v35 + 1;
            if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (void)v34) >> 3);
            if (2 * v37 > v36) {
              unint64_t v36 = 2 * v37;
            }
            if (v37 >= 0x555555555555555) {
              unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v38 = v36;
            }
            if (v38)
            {
              float v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a1 + 176, v38);
              int v34 = *(uint64_t **)(a1 + 160);
              uint64_t v32 = *(uint64_t **)(a1 + 168);
            }
            else
            {
              float v39 = 0;
            }
            uint64_t v40 = &v39[24 * v35];
            unsigned int v41 = &v39[24 * v38];
            *(void *)uint64_t v40 = v26;
            *((void *)v40 + 1) = a7;
            *((_DWORD *)v40 + 4) = v27;
            float v33 = v40 + 24;
            if (v32 != v34)
            {
              do
              {
                long long v42 = *(_OWORD *)(v32 - 3);
                *((void *)v40 - 1) = *(v32 - 1);
                *(_OWORD *)(v40 - 24) = v42;
                v40 -= 24;
                v32 -= 3;
              }
              while (v32 != v34);
              int v34 = *(uint64_t **)(a1 + 160);
            }
            *(void *)(a1 + 160) = v40;
            *(void *)(a1 + 168) = v33;
            *(void *)(a1 + 176) = v41;
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *uint64_t v32 = v26;
            v32[1] = a7;
            float v33 = (char *)(v32 + 3);
            *((_DWORD *)v32 + 4) = v27;
          }
          *(void *)(a1 + 168) = v33;
        }
      }
    }
  }
}

uint64_t kaldi::quasar::E2ETokenHeap::NewForwardLink(kaldi::quasar::E2ETokenHeap *this, int a2, int a3, int a4, float a5, float a6, int a7)
{
  uint64_t v8 = *((void *)this + 3);
  uint64_t result = HIDWORD(v8);
  if (HIDWORD(v8) == v8)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    kaldi::quasar::TooManyForwardLinksError::TooManyForwardLinksError(exception, "Ran out of forward links in storage");
  }
  *((_DWORD *)this + 7) = HIDWORD(v8) + 1;
  uint64_t v10 = *((void *)this + 2) + 24 * HIDWORD(v8);
  *(_DWORD *)uint64_t v10 = a2;
  *(_DWORD *)(v10 + 4) = a4;
  *(float *)(v10 + 8) = a5;
  *(float *)(v10 + 12) = a6;
  *(_DWORD *)(v10 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = a7;
  *(_DWORD *)(v10 + 20) = a3;
  return result;
}

void sub_1B2279344(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessEmitting<kaldi::AutoRegressiveDecodableInterface>(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 472)) {
    kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UndoPruneActiveTokensFinal(a1);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5 != -1)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    do
    {
      uint64_t v7 = (uint64_t *)(v6 + 16 * v5);
      v7[1] = 0;
      uint64_t v5 = *v7;
    }
    while (v5 != -1);
  }
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *(void *)(a1 + 24) = -1;
  uint64_t v143 = 0;
  unint64_t v144 = 0;
  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(a1, v8, &v144, &v143, (uint64_t)&v141);
  unint64_t v9 = (unint64_t)(float)(*(float *)(a1 + 216) * (float)v144);
  if (*(void *)(a1 + 32) < v9) {
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1 + 16, v9);
  }
  float v10 = *(float *)(a1 + 152);
  std::vector<int>::vector<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(&v139, v141, &v142);
  std::string __p = 0;
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  unsigned int v117 = a3 - 1;
  if (((**(uint64_t (***)(uint64_t))a2)(a2) & 1) == 0) {
    goto LABEL_139;
  }
  if (!v143) {
    goto LABEL_55;
  }
  uint64_t v11 = *v143;
  unsigned int v130 = v143[1];
  unsigned int v12 = v143[4];
  uint64_t v13 = *(void *)(a1 + 360);
  (*(void (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 184) + 80))(*(void *)(a1 + 184), v11, a1 + 608, 0);
  unsigned int v124 = v11;
  uint64_t v132 = (float *)(v13 + 36 * v12);
  unint64_t v14 = *(float **)(a1 + 624);
  uint64_t v15 = *(int **)(a1 + 632);
  uint64_t v118 = v8;
  unsigned int v126 = v12;
  if (v14 == (float *)v15)
  {
    uint64_t v16 = v13;
  }
  else
  {
    uint64_t v16 = v13;
    uint64_t v128 = (_DWORD *)(v13 + 36 * v12 + 20);
    do
    {
      float v17 = *v14;
      if (*(_DWORD *)v14)
      {
        uint64_t v18 = *((unsigned int *)v14 + 1);
        float v19 = v14[2];
        if (LODWORD(v17) != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2))
        {
          if (v18)
          {
            if ((*(unsigned int (**)(void, void, uint64_t, unsigned int **))(**(void **)(a1 + 288)
                                                                                          + 32))(*(void *)(a1 + 288), v130, v18, &v145))
            {
              float v20 = NAN;
              if (v19 != -INFINITY)
              {
                float v20 = NAN;
                if (v146 != -INFINITY)
                {
                  float v20 = INFINITY;
                  if (v146 != INFINITY && v19 != INFINITY) {
                    float v20 = v19 + v146;
                  }
                }
              }
              LODWORD(v18) = HIDWORD(v145);
            }
            else
            {
              float v20 = INFINITY;
            }
            float v19 = v20;
          }
          float v22 = v139;
          float v23 = v140;
          if (v140 != v139)
          {
            unint64_t v24 = (v140 - (unsigned char *)v139) >> 2;
            float v23 = v139;
            do
            {
              unint64_t v25 = v24 >> 1;
              uint64_t v26 = (int *)&v23[4 * (v24 >> 1)];
              int v28 = *v26;
              unsigned int v27 = v26 + 1;
              v24 += ~(v24 >> 1);
              if (v28 < *v128) {
                float v23 = v27;
              }
              else {
                unint64_t v24 = v25;
              }
            }
            while (v24);
          }
          int v29 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
          if (v18) {
            double v30 = *(float *)(a1 + 220);
          }
          else {
            double v30 = 0.0;
          }
          float v31 = (v30 + v19) * *(float *)(a1 + 224);
          float v32 = *(float *)(a1 + 192)
              + (float)((float)(*v132
                              - (float)(*((float *)__p + (int)(LODWORD(v17) + v29 * ((unint64_t)(v23 - v22) >> 2)))
                                      * *(float *)(a1 + 228)))
                      + v31);
          if (v32 < v10) {
            float v10 = v32;
          }
        }
      }
      v14 += 4;
    }
    while (v14 != (float *)v15);
  }
  float v33 = v139;
  int v34 = v140;
  if (v140 != v139)
  {
    unint64_t v35 = (v140 - (unsigned char *)v139) >> 2;
    int v34 = v139;
    do
    {
      unint64_t v36 = v35 >> 1;
      unint64_t v37 = (int *)&v34[4 * (v35 >> 1)];
      int v39 = *v37;
      unint64_t v38 = v37 + 1;
      v35 += ~(v35 >> 1);
      if (v39 < *(_DWORD *)(v16 + 36 * v126 + 20)) {
        int v34 = v38;
      }
      else {
        unint64_t v35 = v36;
      }
    }
    while (v35);
  }
  int v40 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  float v41 = *v132
      - (float)(*(float *)(a1 + 228)
              * *((float *)__p
                + (int)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2)
                      + v40 * ((unint64_t)(v34 - v33) >> 2))));
  if (v41 >= v10)
  {
    uint64_t v8 = v118;
    goto LABEL_55;
  }
  uint64_t v8 = v118;
  if (*(float *)(a1 + 224) == 0.0)
  {
    float v44 = 0.0;
    goto LABEL_136;
  }
  float v42 = (*(float (**)(void, void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184), v124);
  float v43 = INFINITY;
  if (v42 != INFINITY) {
    float v43 = v42 + (*(float (**)(void, void))(**(void **)(a1 + 288) + 16))(*(void *)(a1 + 288), v130);
  }
  float v44 = v43 * *(float *)(a1 + 224);
  if (v44 != INFINITY)
  {
LABEL_136:
    float v113 = (float)(v41 + v44) + *(float *)(a1 + 192);
    if (v113 < v10) {
      float v10 = v113;
    }
    if (!v118) {
      goto LABEL_139;
    }
    goto LABEL_56;
  }
  if ((float)(v41 + *(float *)(a1 + 192)) < v10)
  {
    float v10 = v41 + *(float *)(a1 + 192);
    if (!v118) {
      goto LABEL_139;
    }
    goto LABEL_56;
  }
LABEL_55:
  if (v8)
  {
LABEL_56:
    uint64_t v45 = (kaldi::quasar::E2ETokenHeap *)(a1 + 360);
    while (1)
    {
      long long v46 = v142;
      if (v142)
      {
        unsigned int v129 = *(_DWORD *)(v8 + 4);
        unsigned int v127 = *(_DWORD *)(v8 + 16);
        uint64_t v122 = *(void *)v45;
        unint64_t v123 = *(void *)(v8 + 8);
        uint64_t v133 = *(void *)v45 + 36 * v127;
        int v131 = (_DWORD *)(v133 + 20);
        int v47 = *(_DWORD *)(v133 + 20);
        while (1)
        {
          int v48 = *((_DWORD *)v46 + 7);
          if (v47 >= v48) {
            break;
          }
LABEL_62:
          long long v46 = (void *)*v46;
          if (!v46) {
            goto LABEL_63;
          }
        }
        if (v48 < v47)
        {
          ++v46;
          goto LABEL_62;
        }
        uint64_t v119 = v8;
        unsigned int v116 = *(_DWORD *)v8;
        (*(void (**)(void))(**(void **)(a1 + 184) + 80))(*(void *)(a1 + 184));
        unint64_t v51 = *(float **)(a1 + 624);
        uint64_t v52 = *(unsigned int **)(a1 + 632);
        if (v51 != (float *)v52)
        {
          uint64_t v53 = (int *)(v122 + 36 * v127);
          long long v125 = v53 + 7;
          long long v115 = v53 + 8;
          long long v121 = v53 + 2;
          while (2)
          {
            uint64_t v54 = *(unsigned int *)v51;
            if (!v54) {
              goto LABEL_112;
            }
            uint64_t v55 = *((unsigned int *)v51 + 1);
            float v56 = v51[2];
            uint64_t v57 = *((int *)v51 + 3);
            if (v54 == (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2)) {
              goto LABEL_112;
            }
            int v59 = v139;
            uint64_t v58 = v140;
            if (v140 != v139)
            {
              unint64_t v60 = (v140 - (unsigned char *)v139) >> 2;
              uint64_t v58 = v139;
              do
              {
                unint64_t v61 = v60 >> 1;
                char v62 = (int *)&v58[4 * (v60 >> 1)];
                int v64 = *v62;
                uint64_t v63 = v62 + 1;
                v60 += ~(v60 >> 1);
                if (v64 < *v131) {
                  uint64_t v58 = v63;
                }
                else {
                  unint64_t v60 = v61;
                }
              }
              while (v60);
            }
            int v65 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
            v66.n128_u32[0] = *(_DWORD *)(a1 + 224);
            float v67 = *(float *)(a1 + 228);
            float v68 = -(float)(*((float *)__p + (int)(v54 + v65 * ((unint64_t)(v58 - v59) >> 2))) * v67);
            float v69 = *(float *)v133
                - (float)(*((float *)__p + (int)(v54 + v65 * ((unint64_t)(v58 - v59) >> 2))) * v67);
            if ((int)v55 < *(_DWORD *)(a1 + 264) || (int)v55 > *(_DWORD *)(a1 + 268))
            {
              v66.n128_f32[0] = (float)((float)(v56 * v66.n128_f32[0]) + v69) - *(float *)(a1 + 260);
              if (v66.n128_f32[0] > v10) {
                goto LABEL_112;
              }
            }
            uint64_t v70 = *(void *)(a1 + 296);
            if (v70)
            {
              if (*v125 >> 26)
              {
                LODWORD(v145) = v55;
                if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(v70 + 64), (int *)&v145))
                {
                  goto LABEL_112;
                }
              }
            }
            if (v55)
            {
              if (((*(uint64_t (**)(void, void, uint64_t, unsigned int **, __n128))(**(void **)(a1 + 288)
                                                                                                + 32))(*(void *)(a1 + 288), v129, v55, &v145, v66) & 1) != 0)
              {
                float v71 = NAN;
                if (v56 != -INFINITY)
                {
                  float v71 = NAN;
                  if (v146 != -INFINITY)
                  {
                    float v71 = INFINITY;
                    if (v146 != INFINITY && v56 != INFINITY) {
                      float v71 = v56 + v146;
                    }
                  }
                }
                LODWORD(v55) = HIDWORD(v145);
                uint64_t v73 = v147;
                double v74 = *(float *)(a1 + 224);
                double v75 = v71;
                if (!HIDWORD(v145))
                {
                  double v76 = 0.0;
LABEL_96:
                  float v77 = v74 * (v75 + v76);
                  float v78 = v69 + v77;
                  if (v78 <= v10 && v78 != INFINITY)
                  {
                    if ((float)(v78 + *(float *)(a1 + 192)) < v10) {
                      float v10 = v78 + *(float *)(a1 + 192);
                    }
                    int v80 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
                    unint64_t v81 = (v123 >> 2) + (v123 << 6) + (v54 - 1640531527);
                    if (v54 == v80) {
                      unint64_t v81 = 0;
                    }
                    LOBYTE(v135) = 0;
                    unsigned int v82 = kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(a1, v57 + (v73 << 32), v123 ^ v81, a3, (char *)&v135, *v125 >> 26, v78);
                    if ((_BYTE)v135)
                    {
                      uint64_t v83 = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)a2 + 8))(a2, v117, *v131, v54);
                      uint64_t v84 = *(void *)(a1 + 360) + 36 * v82;
                      int v86 = *(_DWORD *)(v84 + 32);
                      uint64_t v85 = (int8x8_t *)(v84 + 32);
                      v85[-1] = vorr_s8(vand_s8(v85[-1], (int8x8_t)0xFC00000080000000), (int8x8_t)__PAIR64__(v127, v54));
                      v85->i32[0] = v86 & 0x80000000 | v55;
                      v85[-2].i32[0] = v73;
                      v85[-2].i32[1] = HIDWORD(v83);
                      uint64_t v87 = *(void *)(a1 + 296);
                      if (v87)
                      {
                        if (v55)
                        {
                          LODWORD(v145) = v55;
                          if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(v87 + 64), (int *)&v145))goto LABEL_110; {
                        }
                          }
                      }
                      if (*v125 >> 26 && (*v115 & 0x80000000) != 0) {
LABEL_110:
                      }
                        v85->i32[0] |= 0x80000000;
                    }
                    *long long v121 = kaldi::quasar::E2ETokenHeap::NewForwardLink((kaldi::quasar::E2ETokenHeap *)(a1 + 360), v82, v54, v55, v77, v68, *v121);
                    ++*(_DWORD *)(a1 + 312);
                  }
LABEL_112:
                  v51 += 4;
                  if (v51 == (float *)v52) {
                    goto LABEL_113;
                  }
                  continue;
                }
              }
              else
              {
                double v74 = *(float *)(a1 + 224);
                double v75 = INFINITY;
                uint64_t v73 = v129;
              }
              double v76 = *(float *)(a1 + 220);
              goto LABEL_96;
            }
            break;
          }
          double v74 = *(float *)(a1 + 224);
          double v75 = v56;
          double v76 = 0.0;
          uint64_t v73 = v129;
          goto LABEL_96;
        }
LABEL_113:
        long long v88 = v139;
        uint64_t v89 = v140;
        if (v140 == v139)
        {
          uint64_t v45 = (kaldi::quasar::E2ETokenHeap *)(a1 + 360);
        }
        else
        {
          unint64_t v90 = (v140 - (unsigned char *)v139) >> 2;
          uint64_t v89 = v139;
          uint64_t v45 = (kaldi::quasar::E2ETokenHeap *)(a1 + 360);
          do
          {
            unint64_t v91 = v90 >> 1;
            long long v92 = (int *)&v89[4 * (v90 >> 1)];
            int v94 = *v92;
            long long v93 = v92 + 1;
            v90 += ~(v90 >> 1);
            if (v94 < *v131) {
              uint64_t v89 = v93;
            }
            else {
              unint64_t v90 = v91;
            }
          }
          while (v90);
        }
        int v95 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
        int v96 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
        float v97 = *(float *)(a1 + 228);
        float v98 = -(float)(*((float *)__p + (int)(v96 + v95 * ((unint64_t)(v89 - v88) >> 2))) * v97);
        float v99 = (float)(*(float *)v133
                    - (float)(*((float *)__p + (int)(v96 + v95 * ((unint64_t)(v89 - v88) >> 2))) * v97))
            + 0.0;
        if (v99 > v10)
        {
          float v49 = v10;
          uint64_t v8 = v119;
          goto LABEL_64;
        }
        uint64_t v8 = v119;
        float v134 = v99;
        if (*(float *)(a1 + 224) == 0.0)
        {
          float v102 = 0.0;
        }
        else
        {
          float v100 = (*(float (**)(void, void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184), v116);
          float v101 = INFINITY;
          if (v100 != INFINITY) {
            float v101 = v100
          }
                 + (*(float (**)(void, void))(**(void **)(a1 + 288) + 16))(*(void *)(a1 + 288), v129);
          float v99 = v134;
          float v102 = v101 * *(float *)(a1 + 224);
          if (v102 == INFINITY)
          {
            float v49 = v134 + *(float *)(a1 + 192);
            float v102 = INFINITY;
            goto LABEL_132;
          }
        }
        if ((float)(v99 + v102) <= v10)
        {
          float v49 = (float)(v99 + v102) + *(float *)(a1 + 204);
          if (v49 >= *(float *)(a1 + 152)) {
            goto LABEL_133;
          }
          *(float *)(a1 + 152) = v49;
LABEL_132:
          if (v49 >= v10) {
LABEL_133:
          }
            float v49 = v10;
          uint64_t v103 = *v131;
          uint64_t v104 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
          HIDWORD(v103) = (unint64_t)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, v117, v103, v104) >> 32;
          unsigned int v135 = 0;
          uint64_t v105 = (int *)(*(void *)(a1 + 120) + 8 * a3);
          unsigned int v106 = kaldi::quasar::E2ETokenHeap::NewToken(v45, v134, 0.0, 0, *v105, *(_DWORD *)(v122 + 36 * v127 + 28) >> 26);
          *uint64_t v105 = v106;
          ++*(_DWORD *)(a1 + 308);
          unsigned int v135 = v106;
          uint64_t v107 = *(void *)(a1 + 360);
          *(_DWORD *)(v107 + 36 * v106 + 28) = *(_DWORD *)(v107 + 36 * v106 + 28) & 0xFC000000 | v127;
          int v108 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
          long long v109 = (_DWORD *)(v107 + 36 * v106);
          unsigned int v110 = v109[6] & 0x80000000 | v108;
          v109[5] = HIDWORD(v103);
          v109[6] = v110;
          v109[8] &= 0x80000000;
          v109[4] = v129;
          LODWORD(v103) = v135;
          int v111 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
          *(_DWORD *)(v122 + 36 * v127 + 8) = kaldi::quasar::E2ETokenHeap::NewForwardLink(v45, v103, v111, 0, 0.0, v98, *(_DWORD *)(v122 + 36 * v127 + 8));
          ++*(_DWORD *)(a1 + 312);
          int v145 = &v135;
          *((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 320, &v135, (uint64_t)&std::piecewise_construct, &v145)+ 5) = v102;
          v112.f32[0] = v134 + v102;
          v112.f32[1] = v134;
          *(int8x8_t *)(a1 + 144) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(a1 + 144), v112), (int8x8_t)v112, *(int8x8_t *)(a1 + 144));
          goto LABEL_64;
        }
      }
LABEL_63:
      float v49 = v10;
LABEL_64:
      uint64_t v50 = *(void *)(v8 + 24);
      *(void *)(v8 + 24) = *(void *)(a1 + 64);
      *(void *)(a1 + 64) = v8;
      float v10 = v49;
      uint64_t v8 = v50;
      if (!v50) {
        goto LABEL_140;
      }
    }
  }
LABEL_139:
  float v49 = v10;
LABEL_140:
  if (__p)
  {
    uint64_t v137 = __p;
    operator delete(__p);
  }
  if (v139)
  {
    uint64_t v140 = v139;
    operator delete(v139);
  }
  std::__tree<int>::destroy((uint64_t)&v141, v142);
  return v49;
}

void sub_1B227A16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,void *a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  std::__tree<int>::destroy((uint64_t)&a34, a35);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokensFinal(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 472))
  {
    signed int v4 = a2;
    *(unsigned char *)(a1 + 472) = 1;
    *(unsigned char *)(a1 + 473) = a3;
    kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinksFinal(a1, a2, a3);
    if (v4 >= 1)
    {
      do
      {
        LOBYTE(v12[0]) = 0;
        char v13 = 0;
        kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinks(a1, v4 - 1, v12, &v13, a3, 0.0);
        kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame((uint64_t *)a1, v4, a3);
        BOOL v6 = v4-- != 0;
      }
      while (v4 != 0 && v6);
    }
    kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame((uint64_t *)a1, 0, a3);
    if (kaldi::g_kaldi_verbose_level > 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"PruneActiveTokensFinal: pruned tokens from ", 43);
      uint64_t v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" to ", 4);
      uint64_t v8 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" links from ", 12);
      unint64_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" to ", 4);
      float v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" pruned_tok_frames_ ", 20);
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" pruned_link_toks_ ", 19);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
    }
  }
}

void sub_1B227A384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokens(uint64_t *a1, clockid_t a2, float a3)
{
  if ((int)a2 >= 1)
  {
    int64_t v5 = a2;
    uint64_t v6 = a1[12];
    uint64_t v7 = (8 * a2) | 5;
    unint64_t v8 = a2;
    do
    {
      unint64_t v9 = v8 - 1;
      if (*(unsigned char *)(v6 + 8 * (v8 - 1) + 4))
      {
        LOBYTE(v14[0]) = 0;
        char v15 = 0;
        kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinks((uint64_t)a1, v8 - 1, v14, &v15, 0, a3);
        uint64_t v6 = a1[12];
        if (v8 >= 2 && LOBYTE(v14[0])) {
          *(unsigned char *)(v6 + 8 * (v8 - 2) + 4) = 1;
        }
        uint64_t v10 = (v8 - 1);
        if (v15) {
          *(unsigned char *)(v6 + 8 * v10 + 5) = 1;
        }
        *(unsigned char *)(v6 + 8 * v10 + 4) = 0;
      }
      if ((uint64_t)v8 < v5 && *(unsigned char *)(v6 + v7))
      {
        kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame(a1, v8, 0);
        uint64_t v6 = a1[12];
        *(unsigned char *)(v6 + v7) = 0;
      }
      v7 -= 8;
      --v8;
    }
    while (v9 + 1 > 1);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v14, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"PruneActiveTokens: pruned tokens from ", 38);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" to ", 4);
    unsigned int v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" links from ", 12);
    char v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v14);
  }
  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CompactTokensAndLinks((uint64_t)a1, a2);
}

void sub_1B227A554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UndoPruneActiveTokensFinal(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 473))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "Cannot undo PruneActiveTokensFinal(undoable=false)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
  }
  uint64_t v2 = *(void *)(a1 + 528);
  unint64_t v3 = (unint64_t)(*(void *)(a1 + 536) - v2) >> 2;
  if ((int)v3 - 1 >= 0)
  {
    uint64_t v4 = *(void *)(a1 + 96);
    uint64_t v5 = *(void *)(a1 + 360);
    uint64_t v6 = (int *)(v2 + 4 * (v3 - 1));
    uint64_t v7 = *(void *)(a1 + 408);
    do
    {
      uint64_t v8 = *v6--;
      uint64_t v9 = 8 * v8;
      LODWORD(v8) = *(_DWORD *)(v7 - 4);
      v7 -= 4;
      *(_DWORD *)(v5 + 36 * v8 + 12) = *(_DWORD *)(v4 + v9);
      *(_DWORD *)(v4 + v9) = v8;
      ++*(_DWORD *)(a1 + 308);
      LODWORD(v3) = v3 - 1;
    }
    while (v3);
    *(void *)(a1 + 408) = v7;
  }
  uint64_t v10 = *(void *)(a1 + 552);
  unint64_t v11 = (unint64_t)(*(void *)(a1 + 560) - v10) >> 2;
  if ((int)v11 - 1 >= 0)
  {
    uint64_t v12 = *(void *)(a1 + 120);
    uint64_t v13 = *(void *)(a1 + 360);
    unint64_t v14 = (int *)(v10 + 4 * (v11 - 1));
    uint64_t v15 = *(void *)(a1 + 432);
    do
    {
      uint64_t v16 = *v14--;
      uint64_t v17 = 8 * v16;
      LODWORD(vkaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(_DWORD *)(v15 - 4);
      v15 -= 4;
      *(_DWORD *)(v13 + 36 * v16 + 12) = *(_DWORD *)(v12 + v17);
      *(_DWORD *)(v12 + v17) = v16;
      ++*(_DWORD *)(a1 + 308);
      LODWORD(v11) = v11 - 1;
    }
    while (v11);
    *(void *)(a1 + 432) = v15;
  }
  uint64_t v18 = *(unsigned int **)(a1 + 480);
  float v19 = *(unsigned int **)(a1 + 488);
  if (v18 != v19)
  {
    uint64_t v20 = *(void *)(a1 + 360);
    do
    {
      *(_DWORD *)(v20 + 36 * *v18 + 4) = v18[1];
      v18 += 2;
    }
    while (v18 != v19);
  }
  float v21 = *(unsigned int **)(a1 + 504);
  for (uint64_t i = *(unsigned int **)(a1 + 512); v21 != i; v21 += 2)
  {
    unsigned int v23 = v21[1];
    *(void *)int v39 = v21;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 320, v21, (uint64_t)&std::piecewise_construct, (_DWORD **)v39)+ 5) = v23;
  }
  for (uint64_t j = *(void *)(a1 + 16); j; uint64_t j = *(void *)(j + 24))
  {
    v39[0] = *(_DWORD *)(j + 16);
    std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__erase_unique<unsigned int>((void *)(a1 + 320), v39);
  }
  uint64_t v25 = *(void *)(a1 + 576);
  unint64_t v26 = (unint64_t)(*(void *)(a1 + 584) - v25) >> 2;
  if ((int)v26 - 1 >= 0)
  {
    uint64_t v27 = *(void *)(a1 + 360);
    uint64_t v28 = *(void *)(a1 + 376);
    uint64_t v29 = *(void *)(a1 + 456);
    int v30 = *(_DWORD *)(a1 + 312) + 1;
    float v31 = (unsigned int *)(v25 + 4 * (v26 - 1));
    do
    {
      unsigned int v33 = *v31--;
      unsigned int v32 = v33;
      unsigned int v34 = *(_DWORD *)(v29 - 4);
      v29 -= 4;
      uint64_t v35 = v27 + 36 * v32;
      *(_DWORD *)(v28 + 24 * v34 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(_DWORD *)(v35 + 8);
      *(_DWORD *)(v35 + 8) = v34;
      *(_DWORD *)(a1 + 312) = v30++;
      LODWORD(v26) = v26 - 1;
    }
    while (v26);
    *(void *)(a1 + 456) = v29;
  }
  *(void *)(a1 + 144) = *(void *)(a1 + 600);
  *(_WORD *)(a1 + 472) = 0;
  *(int32x2_t *)(a1 + 600) = vdup_n_s32(0x7F800000u);
  *(void *)(a1 + 488) = *(void *)(a1 + 480);
  *(void *)(a1 + 512) = *(void *)(a1 + 504);
  *(void *)(a1 + 536) = *(void *)(a1 + 528);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(void *)(a1 + 584) = v25;
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v39, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"UndoPruneActiveTokensFinal: restored tokens from ", 49);
    unint64_t v36 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" to ", 4);
    unint64_t v37 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" links from ", 12);
    unint64_t v38 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v39);
  }
}

void sub_1B227A880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  std::string __p = 0;
  uint64_t v58 = 0;
  int v59 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  float v56 = 0;
  if (a2)
  {
    uint64_t v7 = a2;
    uint64_t v8 = 0;
    int v9 = 0;
    float v10 = INFINITY;
    do
    {
      unsigned int v11 = *(_DWORD *)(v7 + 16);
      uint64_t v12 = *(void *)(a1 + 360);
      uint64_t v13 = (_DWORD *)(v12 + 36 * v11);
      unint64_t v14 = v58;
      if (v58 >= v59)
      {
        uint64_t v16 = (char *)__p;
        uint64_t v17 = (v58 - (unsigned char *)__p) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v59 - (unsigned char *)__p;
        if ((v59 - (unsigned char *)__p) >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          float v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v59, v20);
          uint64_t v16 = (char *)__p;
          unint64_t v14 = v58;
        }
        else
        {
          float v21 = 0;
        }
        float v22 = &v21[4 * v17];
        *(_DWORD *)float v22 = *v13;
        uint64_t v15 = v22 + 4;
        while (v14 != v16)
        {
          int v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        std::string __p = v22;
        uint64_t v58 = v15;
        int v59 = &v21[4 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v58 = *v13;
        uint64_t v15 = v14 + 4;
      }
      uint64_t v58 = v15;
      unint64_t v24 = (_DWORD *)(v12 + 36 * v11 + 20);
      uint64_t v25 = v55;
      if (v55 >= v56)
      {
        uint64_t v27 = (char *)v54;
        uint64_t v28 = (v55 - (unsigned char *)v54) >> 2;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v30 = v56 - (unsigned char *)v54;
        if ((v56 - (unsigned char *)v54) >> 1 > v29) {
          unint64_t v29 = v30 >> 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          unsigned int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v56, v31);
          uint64_t v27 = (char *)v54;
          uint64_t v25 = v55;
        }
        else
        {
          unsigned int v32 = 0;
        }
        unsigned int v33 = &v32[4 * v28];
        *(_DWORD *)unsigned int v33 = *v24;
        unint64_t v26 = v33 + 4;
        while (v25 != v27)
        {
          int v34 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v33 - 1) = v34;
          v33 -= 4;
        }
        uint64_t v54 = v33;
        uint64_t v55 = v26;
        float v56 = &v32[4 * v31];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v55 = *v24;
        unint64_t v26 = v25 + 4;
      }
      uint64_t v55 = v26;
      float v35 = *(float *)v13;
      if (*(float *)v13 < v10)
      {
        int v9 = *v24;
        if (a4) {
          *a4 = v7;
        }
        float v10 = v35;
      }
      uint64_t v7 = *(void *)(v7 + 24);
      ++v8;
    }
    while (v7);
  }
  else
  {
    int v9 = 0;
    uint64_t v8 = 0;
  }
  if (a3) {
    *a3 = v8;
  }
  if (*(_DWORD *)(a1 + 196) == 1)
  {
    LODWORD(v53.__begin_) = v9;
    std::set<int>::set[abi:ne180100](a5, (int *)&v53, 1);
  }
  else
  {
    std::vector<int>::vector(&v53, (v58 - (unsigned char *)__p) >> 2);
    std::vector<unsigned int>::pointer begin = v53.__begin_;
    std::vector<std::string>::pointer end = v53.__end_;
    if (v53.__begin_ != v53.__end_)
    {
      int v38 = 0;
      std::vector<int>::pointer v39 = v53.__begin_;
      do
        *v39++ = v38++;
      while (v39 != end);
    }
    unint64_t v40 = *(int *)(a1 + 196);
    if (end - begin <= v40)
    {
      p_p = &__p;
      if ((char *)end - (char *)begin < 513)
      {
        float v41 = 0;
        uint64_t v43 = 0;
      }
      else
      {
        float v41 = (int *)std::get_temporary_buffer[abi:ne180100]<int>(end - begin);
        uint64_t v43 = v42;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(begin, end, (uint64_t **)&p_p, end - begin, v41, v43);
      if (v41) {
        operator delete(v41);
      }
    }
    else
    {
      p_p = &__p;
      if (v40) {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(begin, &begin[v40], end, (uint64_t **)&p_p);
      }
    }
    unint64_t v44 = *(int *)(a1 + 200);
    std::vector<int>::pointer v45 = v53.__begin_;
    long long v46 = v53.__end_;
    unint64_t v47 = v53.__end_ - v53.__begin_;
    if (v47 > v44)
    {
      int v48 = &v53.__begin_[v44];
      unint64_t v49 = *(int *)(a1 + 196);
      if (v47 <= v49) {
        std::vector<int>::pointer v50 = v53.__end_;
      }
      else {
        std::vector<int>::pointer v50 = &v53.__begin_[v49];
      }
      if (v48 != v50)
      {
        while (*((float *)__p + *v48) <= (float)(*((float *)__p + *v53.__begin_) + *(float *)(a1 + 192)))
        {
          if (++v48 == v50)
          {
            int v48 = v50;
            break;
          }
        }
      }
      if (v48 != v53.__end_)
      {
        long long v46 = v48;
        v53.__end_ = v48;
      }
    }
    *(void *)(a5 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)a5 = a5 + 8;
    if (v45 != v46)
    {
      do
      {
        std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a5, (int *)v54 + *v45, (_DWORD *)v54 + *v45);
        ++v45;
      }
      while (v45 != v46);
      long long v46 = v53.__begin_;
    }
    if (v46)
    {
      v53.__end_ = v46;
      operator delete(v46);
    }
  }
  if (v54)
  {
    uint64_t v55 = (char *)v54;
    operator delete(v54);
  }
  if (__p)
  {
    uint64_t v58 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B227ACE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__erase_unique<unsigned int>(void *a1, unsigned int *a2)
{
  uint64_t result = std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(int *a1, int *a2, int *a3, uint64_t **a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    if (a2 == a3)
    {
      a3 = a2;
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v14 = *v13;
        uint64_t v15 = *a1;
        if (*(float *)(**a4 + 4 * v14) < *(float *)(**a4 + 4 * v15))
        {
          *uint64_t v13 = v15;
          *a1 = v14;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)a1, a4, v9, a1);
        }
        ++v13;
      }
      while (v13 != a3);
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      uint64_t v17 = a2 - 1;
      do
      {
        int v18 = *a1;
        uint64_t v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(a1, a4, v16);
        if (v17 == v19)
        {
          *uint64_t v19 = v18;
        }
        else
        {
          *uint64_t v19 = *v17;
          *uint64_t v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(uint64_t result, uint64_t **a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v5 = ((uint64_t)a4 - result) >> 1;
      uint64_t v6 = v5 | 1;
      uint64_t v7 = (int *)(result + 4 * (v5 | 1));
      uint64_t v8 = v5 + 2;
      uint64_t v9 = **a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        uint64_t v6 = v8;
      }
      uint64_t v10 = *v7;
      uint64_t v11 = *a4;
      float v12 = *(float *)(v9 + 4 * v11);
      if (*(float *)(v9 + 4 * v10) >= v12)
      {
        do
        {
          *a4 = v10;
          a4 = v7;
          if (v4 < v6) {
            break;
          }
          uint64_t v13 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (int *)(result + 4 * v6);
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            uint64_t v6 = v14;
          }
          uint64_t v10 = *v7;
        }
        while (*(float *)(v9 + 4 * v10) >= v12);
        *a4 = v11;
      }
    }
  }
  return result;
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(int *result, void **a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  uint64_t v6 = *a2;
  do
  {
    uint64_t v7 = result;
    result += v3 + 1;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3 && *(float *)(*v6 + 4 * *result) < *(float *)(*v6 + 4 * result[1]))
    {
      ++result;
      uint64_t v3 = v9;
    }
    _DWORD *v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (int *)(result + 4 * v4);
    uint64_t v6 = *v5;
    uint64_t v9 = *(int *)(a2 - 4);
    uint64_t v7 = (_DWORD *)(a2 - 4);
    int v8 = v9;
    uint64_t v10 = **a3;
    float v11 = *(float *)(v10 + 4 * v9);
    if (*(float *)(v10 + 4 * v6) < v11)
    {
      do
      {
        float v12 = v5;
        _DWORD *v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (int *)(result + 4 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = v12;
      }
      while (*(float *)(v10 + 4 * v6) < v11);
      *float v12 = v8;
    }
  }
  return result;
}

int *std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3, unint64_t a4, int *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    int v8 = result;
    if (a4 == 2)
    {
      uint64_t v9 = *(a2 - 1);
      uint64_t v10 = *result;
      if (*(float *)(**a3 + 4 * v9) < *(float *)(**a3 + 4 * v10))
      {
        *uint64_t result = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v14 = a4 >> 1;
      uint64_t v15 = &result[a4 >> 1];
      unint64_t v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(result, v15, a3, v16, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v14]);
        return std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,int *,int *,std::__wrap_iter<int *>>(a5, &a5[v14], &a5[v14], &a5[a4], v8, a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(result, v15, a3, v16, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(v8, (char *)&v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
      }
    }
    else
    {
      return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(result, a2, a3);
    }
  }
  return result;
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = **a3;
      uint64_t v6 = result;
      do
      {
        uint64_t v7 = *v6;
        uint64_t v6 = v3;
        uint64_t v8 = *v3;
        float v9 = *(float *)(v5 + 4 * v8);
        if (v9 < *(float *)(v5 + 4 * v7))
        {
          uint64_t v10 = v4;
          while (1)
          {
            *(int *)((char *)result + v10 + 4) = v7;
            if (!v10) {
              break;
            }
            uint64_t v7 = *(int *)((char *)result + v10 - 4);
            v10 -= 4;
            if (v9 >= *(float *)(v5 + 4 * v7))
            {
              float v11 = (int *)((char *)result + v10 + 4);
              goto LABEL_10;
            }
          }
          float v11 = result;
LABEL_10:
          *float v11 = v8;
        }
        uint64_t v3 = v6 + 1;
        v4 += 4;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

int *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3, unint64_t a4, int *a5)
{
  if (a4)
  {
    float v9 = result;
    if (a4 == 2)
    {
      uint64_t v10 = *(a2 - 1);
      uint64_t v11 = *result;
      if (*(float *)(**a3 + 4 * v10) >= *(float *)(**a3 + 4 * v11))
      {
        *a5 = v11;
        int v12 = *(a2 - 1);
      }
      else
      {
        *a5 = v10;
        int v12 = *result;
      }
      a5[1] = v12;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(result, a2, a5, a3);
    }
  }
  return result;
}

int *std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,int *,int *,std::__wrap_iter<int *>>(int *result, int *a2, int *a3, int *a4, _DWORD *a5, void **a6)
{
  if (result == a2)
  {
LABEL_9:
    while (a3 != a4)
    {
      int v10 = *a3++;
      *a5++ = v10;
    }
  }
  else
  {
    uint64_t v6 = *a6;
    while (a3 != a4)
    {
      uint64_t v7 = *a3;
      float v8 = *(float *)(*v6 + 4 * v7);
      float v9 = *(float *)(*v6 + 4 * *result);
      if (v8 >= v9) {
        LODWORD(v7) = *result;
      }
      result += v8 >= v9;
      a3 += v8 < v9;
      *a5++ = v7;
      if (result == a2) {
        goto LABEL_9;
      }
    }
    if (result != a2)
    {
      uint64_t v11 = 0;
      do
      {
        a5[v11] = result[v11];
        ++v11;
      }
      while (&result[v11] != a2);
    }
  }
  return result;
}

int *std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(int *result, char *a2, int *a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v9 = a6;
    int v12 = result;
    while (v9 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      unint64_t v13 = 0;
      uint64_t v14 = *(int *)a2;
      uint64_t v15 = **a4;
      uint64_t v16 = -a5;
      while (1)
      {
        uint64_t v17 = v12[v13 / 4];
        if (*(float *)(v15 + 4 * v14) < *(float *)(v15 + 4 * v17)) {
          break;
        }
        v13 += 4;
        if (__CFADD__(v16++, 1)) {
          return result;
        }
      }
      uint64_t v44 = a8;
      std::vector<int>::pointer v45 = a4;
      uint64_t v43 = a3;
      if (-v16 >= v9)
      {
        if (v16 == -1)
        {
          v12[v13 / 4] = v14;
          *(_DWORD *)a2 = v17;
          return result;
        }
        if (v16 <= 0) {
          uint64_t v29 = -v16;
        }
        else {
          uint64_t v29 = 1 - v16;
        }
        uint64_t v28 = v29 >> 1;
        float v22 = (char *)&v12[(v29 >> 1) + v13 / 4];
        float v21 = a2;
        if (a2 != (char *)a3)
        {
          unint64_t v30 = ((char *)a3 - a2) >> 2;
          float v21 = a2;
          do
          {
            unint64_t v31 = v30 >> 1;
            unsigned int v32 = &v21[4 * (v30 >> 1)];
            uint64_t v34 = *(int *)v32;
            unsigned int v33 = v32 + 4;
            v30 += ~(v30 >> 1);
            if (*(float *)(v15 + 4 * v34) < *(float *)(v15 + 4 * *(int *)v22)) {
              float v21 = v33;
            }
            else {
              unint64_t v30 = v31;
            }
          }
          while (v30);
        }
        uint64_t v20 = (v21 - a2) >> 2;
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v19 = v9;
        }
        else {
          uint64_t v19 = v9 + 1;
        }
        uint64_t v20 = v19 >> 1;
        float v21 = &a2[4 * (v19 >> 1)];
        float v22 = a2;
        if (a2 - (char *)v12 != v13)
        {
          unint64_t v23 = (uint64_t)(a2 - (char *)v12 - v13) >> 2;
          float v22 = (char *)&v12[v13 / 4];
          do
          {
            unint64_t v24 = v23 >> 1;
            uint64_t v25 = &v22[4 * (v23 >> 1)];
            uint64_t v27 = *(int *)v25;
            unint64_t v26 = v25 + 4;
            v23 += ~(v23 >> 1);
            if (*(float *)(v15 + 4 * *(int *)v21) < *(float *)(v15 + 4 * v27)) {
              unint64_t v23 = v24;
            }
            else {
              float v22 = v26;
            }
          }
          while (v23);
        }
        uint64_t v28 = (uint64_t)(v22 - (char *)v12 - v13) >> 2;
      }
      a5 = -(v28 + v16);
      uint64_t v35 = v9 - v20;
      uint64_t v36 = v28;
      unint64_t v37 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(v22, a2, v21);
      uint64_t v38 = v36;
      std::vector<int>::pointer v39 = (int *)v37;
      if (v38 + v20 >= v9 - (v38 + v20) - v16)
      {
        uint64_t v42 = v38;
        uint64_t result = (int *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(v37, v21, v43, v45, a5, v35, a7, v44);
        a2 = v22;
        a4 = v45;
        uint64_t v35 = v20;
        a8 = v44;
        a5 = v42;
        a3 = v39;
        int v12 = (int *)((char *)v12 + v13);
      }
      else
      {
        unint64_t v40 = v22;
        a4 = v45;
        uint64_t v41 = v20;
        a8 = v44;
        uint64_t result = (int *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(&v12[v13 / 4], v40, v37, v45, v38, v41, a7, v44);
        int v12 = v39;
        a2 = v21;
        a3 = v43;
      }
      uint64_t v9 = v35;
      if (!v35) {
        return result;
      }
    }
    return std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(v12, (int *)a2, a3, a4, a5, v9, a7);
  }
  return result;
}

int *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(int *result, int *a2, int *a3, uint64_t **a4)
{
  if (result != a2)
  {
    int v4 = *result++;
    *a3 = v4;
    if (result != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = **a4;
      uint64_t v7 = a3;
      float v8 = a3;
      do
      {
        uint64_t v10 = *v8++;
        int v9 = v10;
        uint64_t v11 = *result;
        if (*(float *)(v6 + 4 * v11) >= *(float *)(v6 + 4 * v10))
        {
          *float v8 = v11;
        }
        else
        {
          v7[1] = v9;
          int v12 = a3;
          if (v7 != a3)
          {
            uint64_t v13 = v5;
            while (1)
            {
              int v12 = (int *)((char *)a3 + v13);
              uint64_t v14 = *(int *)((char *)a3 + v13 - 4);
              if (*(float *)(v6 + 4 * *result) >= *(float *)(v6 + 4 * v14)) {
                break;
              }
              *int v12 = v14;
              v13 -= 4;
              if (!v13)
              {
                int v12 = a3;
                break;
              }
            }
          }
          *int v12 = *result;
        }
        ++result;
        v5 += 4;
        uint64_t v7 = v8;
      }
      while (result != a2);
    }
  }
  return result;
}

int *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(int *result, int *a2, int *a3, int *a4, _DWORD *a5, void **a6)
{
  if (result == a2)
  {
LABEL_9:
    while (a3 != a4)
    {
      int v10 = *a3++;
      *a5++ = v10;
    }
  }
  else
  {
    uint64_t v6 = *a6;
    while (a3 != a4)
    {
      uint64_t v7 = *a3;
      float v8 = *(float *)(*v6 + 4 * v7);
      float v9 = *(float *)(*v6 + 4 * *result);
      if (v8 >= v9) {
        LODWORD(v7) = *result;
      }
      a3 += v8 < v9;
      result += v8 >= v9;
      *a5++ = v7;
      if (result == a2) {
        goto LABEL_9;
      }
    }
    if (result != a2)
    {
      uint64_t v11 = 0;
      do
      {
        a5[v11] = result[v11];
        ++v11;
      }
      while (&result[v11] != a2);
    }
  }
  return result;
}

int *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(int *result, int *a2, int *a3, void **a4, uint64_t a5, uint64_t a6, char *__src)
{
  if (a5 <= a6)
  {
    if (result != a2)
    {
      unint64_t v11 = 0;
      do
      {
        *(_DWORD *)&__src[v11] = result[v11 / 4];
        v11 += 4;
      }
      while (&result[v11 / 4] != a2);
      if (v11)
      {
        int v12 = *a4;
        uint64_t v13 = __src;
        while (a2 != a3)
        {
          uint64_t v14 = *a2;
          float v15 = *(float *)(*v12 + 4 * v14);
          float v16 = *(float *)(*v12 + 4 * *(int *)v13);
          if (v15 >= v16) {
            LODWORD(v14) = *(_DWORD *)v13;
          }
          a2 += v15 < v16;
          v13 += 4 * (v15 >= v16);
          *result++ = v14;
          if (&__src[v11] == v13) {
            return result;
          }
        }
        return (int *)memmove(result, v13, __src - v13 + v11);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)&__src[v7 * 4] = a2[v7];
      ++v7;
    }
    while (&a2[v7] != a3);
    if (v7 * 4)
    {
      float v8 = &__src[v7 * 4];
      float v9 = a3 - 1;
      while (a2 != result)
      {
        uint64_t v10 = *((int *)v8 - 1);
        if (*(float *)(**a4 + 4 * v10) >= *(float *)(**a4 + 4 * *(a2 - 1))) {
          v8 -= 4;
        }
        else {
          LODWORD(v10) = *--a2;
        }
        *v9-- = v10;
        if (v8 == __src) {
          return result;
        }
      }
      uint64_t v17 = 0;
      do
      {
        v9[v17] = *(_DWORD *)&v8[v17 * 4 - 4];
        --v17;
      }
      while (&v8[v17 * 4] != __src);
    }
  }
  return result;
}

void *std::vector<int>::vector<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = a2;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      uint64_t v5 = v7;
    }
    while (v7 != a3);
  }
  std::vector<int>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, a2, a3, v4);
  return a1;
}

void *std::vector<int>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    std::vector<int>::__vallocate[abi:ne180100](result, a4);
    return (void *)std::vector<int>::__construct_at_end<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(v6, a2, a3);
  }
  return result;
}

void sub_1B227BAD0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinksFinal(uint64_t a1, int a2, int a3)
{
  if (a3) {
    *(void *)(a1 + 600) = *(void *)(a1 + 144);
  }
  unint64_t v4 = *(uint64_t **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = (char **)(a1 + 480);
    uint64_t v104 = a1 + 496;
    do
    {
      unint64_t v6 = *v4;
      unsigned int v7 = *((_DWORD *)v4 + 4);
      unsigned int v108 = v7;
      uint64_t v8 = *(void *)(a1 + 360);
      if (*(float *)(a1 + 224) == 0.0)
      {
        float v12 = 0.0;
      }
      else
      {
        (*(void (**)(void, unint64_t))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184), v6);
        float v10 = INFINITY;
        if (*(_DWORD *)(v8 + 36 * v7 + 28) >> 26) {
          float v11 = INFINITY;
        }
        else {
          float v11 = v9;
        }
        if (v11 != INFINITY) {
          float v10 = v11
        }
              + (*(float (**)(void, unint64_t))(**(void **)(a1 + 288) + 16))(*(void *)(a1 + 288), HIDWORD(v6));
        float v12 = v10 * *(float *)(a1 + 224);
      }
      uint64_t v13 = (float *)(v8 + 36 * v7);
      v107[0] = &v108;
      *((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 320, &v108, (uint64_t)&std::piecewise_construct, v107)+ 5) = v12;
      float v14 = v12 + *v13;
      float v15 = *(float *)(a1 + 148);
      if (v14 >= *(float *)(a1 + 144)) {
        float v14 = *(float *)(a1 + 144);
      }
      *(float *)(a1 + 144) = v14;
      float v16 = *v13;
      if (*v13 >= v15) {
        float v16 = v15;
      }
      *(float *)(a1 + 148) = v16;
      if (a3)
      {
        unint64_t v17 = v108 | ((unint64_t)*(unsigned int *)(v8 + 36 * v7 + 4) << 32);
        uint64_t v19 = *(unint64_t **)(a1 + 488);
        unint64_t v18 = *(void *)(a1 + 496);
        if ((unint64_t)v19 >= v18)
        {
          uint64_t v21 = ((char *)v19 - *v5) >> 3;
          if ((unint64_t)(v21 + 1) >> 61) {
LABEL_130:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v22 = v18 - (void)*v5;
          uint64_t v23 = v22 >> 2;
          if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
            uint64_t v23 = v21 + 1;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v104, v24);
          }
          else {
            uint64_t v25 = 0;
          }
          unint64_t v26 = (unint64_t *)&v25[8 * v21];
          *unint64_t v26 = v17;
          uint64_t v20 = v26 + 1;
          uint64_t v28 = *(char **)(a1 + 480);
          uint64_t v27 = *(char **)(a1 + 488);
          if (v27 != v28)
          {
            do
            {
              unint64_t v29 = *((void *)v27 - 1);
              v27 -= 8;
              *--unint64_t v26 = v29;
            }
            while (v27 != v28);
            uint64_t v27 = *v5;
          }
          *(void *)(a1 + 480) = v26;
          *(void *)(a1 + 488) = v20;
          *(void *)(a1 + 496) = &v25[8 * v24];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *uint64_t v19 = v17;
          uint64_t v20 = v19 + 1;
        }
        *(void *)(a1 + 488) = v20;
      }
      unint64_t v4 = (uint64_t *)v4[3];
    }
    while (v4);
  }
  uint64_t v30 = a2;
  uint64_t v103 = (void **)(a1 + 576);
  uint64_t v105 = (void **)(a1 + 448);
  uint64_t v100 = a1 + 320;
  uint64_t v98 = 8 * v30;
  do
  {
    unsigned int v108 = 0;
    uint64_t v31 = *(unsigned int *)(*(void *)(a1 + 96) + v98);
    unsigned int v108 = v31;
    if (!v31) {
      break;
    }
    char v99 = 0;
    do
    {
      uint64_t v32 = *(void *)(a1 + 360);
      v107[0] = &v108;
      unsigned int v33 = (float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v100, &v108, (uint64_t)&std::piecewise_construct, v107);
      float v34 = *(float *)(a1 + 144);
      if (v34 == INFINITY) {
        float v35 = *(float *)(a1 + 148);
      }
      else {
        float v35 = v34 - v33[5];
      }
      uint64_t v36 = v32 + 36 * v31;
      float v37 = *(float *)v36 - v35;
      uint64_t v101 = v32;
      uint64_t v38 = *(unsigned int *)(v36 + 8);
      if (*(_DWORD *)(v36 + 8))
      {
        uint64_t v39 = 0;
        do
        {
          uint64_t v40 = *(void *)(a1 + 376);
          uint64_t v41 = (float *)(v40 + 24 * v38);
          uint64_t v42 = (float *)(*(void *)(a1 + 360) + 36 * *(unsigned int *)v41);
          float v43 = v42[1];
          float v44 = v43 + (float)((float)((float)(*(float *)v36 + v41[3]) + v41[2]) - *v42);
          if (v44 <= *(float *)(a1 + 204))
          {
            if (v44 >= 0.0)
            {
              float v50 = v43 + (float)((float)((float)(*(float *)v36 + v41[3]) + v41[2]) - *v42);
            }
            else
            {
              float v50 = 0.0;
              if (v44 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v107);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Negative extra_cost: ", 21);
                std::ostream::operator<<();
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v107);
              }
            }
            if (v50 < v37) {
              float v37 = v50;
            }
            uint64_t v45 = *(unsigned int *)(v40 + 24 * v38 + 16);
            uint64_t v39 = v38;
          }
          else
          {
            uint64_t v45 = *(unsigned int *)(v40 + 24 * v38 + 16);
            long long v46 = (_DWORD *)(v40 + 24 * v39 + 16);
            if (!v39) {
              long long v46 = (_DWORD *)(v36 + 8);
            }
            *long long v46 = v45;
            if (a3)
            {
              int v48 = *(char **)(a1 + 456);
              unint64_t v47 = *(void *)(a1 + 464);
              if ((unint64_t)v48 >= v47)
              {
                uint64_t v52 = (char *)*v105;
                uint64_t v53 = (v48 - (unsigned char *)*v105) >> 2;
                unint64_t v54 = v53 + 1;
                if ((unint64_t)(v53 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v55 = v47 - (void)v52;
                if (v55 >> 1 > v54) {
                  unint64_t v54 = v55 >> 1;
                }
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v56 = v54;
                }
                if (v56)
                {
                  uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 464, v56);
                  uint64_t v52 = *(char **)(a1 + 448);
                  int v48 = *(char **)(a1 + 456);
                }
                else
                {
                  uint64_t v57 = 0;
                }
                uint64_t v58 = &v57[4 * v53];
                *(_DWORD *)uint64_t v58 = v38;
                unint64_t v49 = v58 + 4;
                while (v48 != v52)
                {
                  int v59 = *((_DWORD *)v48 - 1);
                  v48 -= 4;
                  *((_DWORD *)v58 - 1) = v59;
                  v58 -= 4;
                }
                *(void *)(a1 + 448) = v58;
                *(void *)(a1 + 456) = v49;
                *(void *)(a1 + 464) = &v57[4 * v56];
                if (v52) {
                  operator delete(v52);
                }
              }
              else
              {
                *(_DWORD *)int v48 = v38;
                unint64_t v49 = v48 + 4;
              }
              *(void *)(a1 + 456) = v49;
              unint64_t v60 = *(char **)(a1 + 584);
              unint64_t v61 = *(void *)(a1 + 592);
              if ((unint64_t)v60 >= v61)
              {
                uint64_t v63 = (char *)*v103;
                uint64_t v64 = (v60 - (unsigned char *)*v103) >> 2;
                unint64_t v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v66 = v61 - (void)v63;
                if (v66 >> 1 > v65) {
                  unint64_t v65 = v66 >> 1;
                }
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v67 = v65;
                }
                if (v67)
                {
                  float v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 592, v67);
                  unint64_t v60 = *(char **)(a1 + 584);
                  uint64_t v63 = *(char **)(a1 + 576);
                }
                else
                {
                  float v68 = 0;
                }
                float v69 = &v68[4 * v64];
                *(_DWORD *)float v69 = v108;
                char v62 = v69 + 4;
                while (v60 != v63)
                {
                  int v70 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v69 - 1) = v70;
                  v69 -= 4;
                }
                *(void *)(a1 + 576) = v69;
                *(void *)(a1 + 584) = v62;
                *(void *)(a1 + 592) = &v68[4 * v67];
                if (v63) {
                  operator delete(v63);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v60 = v108;
                char v62 = v60 + 4;
              }
              *(void *)(a1 + 584) = v62;
            }
            --*(_DWORD *)(a1 + 312);
          }
          uint64_t v38 = v45;
        }
        while (v45);
      }
      float v71 = INFINITY;
      if (v37 <= *(float *)(a1 + 204)) {
        float v71 = v37;
      }
      uint64_t v72 = v101 + 36 * v31;
      float v74 = *(float *)(v72 + 4);
      uint64_t v73 = (float *)(v72 + 4);
      float v75 = v74;
      if (v74 != v71
        && (COERCE_INT(fabs(v75 - v71)) > 2139095039
         || fabsf(v75 - v71) > (float)((float)(fabsf(v75) + fabsf(v71)) * 0.00001)))
      {
        char v99 = 1;
      }
      *uint64_t v73 = v71;
      uint64_t v31 = *(unsigned int *)(v101 + 36 * v31 + 12);
      unsigned int v108 = v31;
    }
    while (v31);
  }
  while ((v99 & 1) != 0);
  uint64_t v76 = *(unsigned int *)(*(void *)(a1 + 120) + v98);
  unsigned int v108 = v76;
  if (v76)
  {
    float v77 = (char **)(a1 + 480);
    do
    {
      uint64_t v78 = *(void *)(a1 + 360);
      if (a3)
      {
        unint64_t v79 = v76 | ((unint64_t)*(unsigned int *)(v78 + 36 * v76 + 4) << 32);
        unint64_t v81 = *(unint64_t **)(a1 + 488);
        unint64_t v80 = *(void *)(a1 + 496);
        if ((unint64_t)v81 >= v80)
        {
          uint64_t v83 = ((char *)v81 - *v77) >> 3;
          if ((unint64_t)(v83 + 1) >> 61) {
            goto LABEL_130;
          }
          uint64_t v84 = v80 - (void)*v77;
          uint64_t v85 = v84 >> 2;
          if (v84 >> 2 <= (unint64_t)(v83 + 1)) {
            uint64_t v85 = v83 + 1;
          }
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v86 = v85;
          }
          if (v86) {
            uint64_t v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 496, v86);
          }
          else {
            uint64_t v87 = 0;
          }
          long long v88 = (unint64_t *)&v87[8 * v83];
          *long long v88 = v79;
          unsigned int v82 = v88 + 1;
          unint64_t v90 = *(char **)(a1 + 480);
          uint64_t v89 = *(char **)(a1 + 488);
          if (v89 != v90)
          {
            do
            {
              unint64_t v91 = *((void *)v89 - 1);
              v89 -= 8;
              *--long long v88 = v91;
            }
            while (v89 != v90);
            uint64_t v89 = *v77;
          }
          *(void *)(a1 + 480) = v88;
          *(void *)(a1 + 488) = v82;
          *(void *)(a1 + 496) = &v87[8 * v86];
          if (v89) {
            operator delete(v89);
          }
        }
        else
        {
          *unint64_t v81 = v79;
          unsigned int v82 = v81 + 1;
        }
        *(void *)(a1 + 488) = v82;
      }
      v107[0] = &v108;
      long long v92 = (float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v100, &v108, (uint64_t)&std::piecewise_construct, v107);
      float v93 = *(float *)(a1 + 144);
      if (v93 == INFINITY) {
        float v94 = *(float *)(a1 + 148);
      }
      else {
        float v94 = v93 - v92[5];
      }
      float v95 = *(float *)(v78 + 36 * v76) - v94;
      uint64_t v96 = v78 + 36 * v76;
      *(float *)(v96 + 4) = v95;
      float v97 = (_DWORD *)(v96 + 4);
      if (v95 > *(float *)(a1 + 204)) {
        *float v97 = 2139095040;
      }
      uint64_t v76 = *(unsigned int *)(v78 + 36 * v76 + 12);
      unsigned int v108 = v76;
    }
    while (v76);
  }
}

void sub_1B227C260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinks(uint64_t a1, unsigned int a2, unsigned char *a3, unsigned char *a4, int a5, float a6)
{
  *a3 = 0;
  *a4 = 0;
  long long v88 = (char **)(a1 + 480);
  uint64_t v87 = a1 + 496;
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 96) + 8 * a2);
  uint64_t v85 = 8 * a2;
  if (v8)
  {
    float v94 = (void **)(a1 + 576);
    float v95 = (void **)(a1 + 448);
    uint64_t v90 = a1 + 592;
    uint64_t v91 = a1 + 464;
    char v89 = a5;
    do
    {
      int v9 = 0;
      do
      {
        uint64_t v10 = *(void *)(a1 + 360);
        if (v89)
        {
          uint64_t v11 = *(void *)(a1 + 360);
          unint64_t v12 = v8 | ((unint64_t)*(unsigned int *)(v10 + 36 * v8 + 4) << 32);
          float v14 = *(unint64_t **)(a1 + 488);
          unint64_t v13 = *(void *)(a1 + 496);
          if ((unint64_t)v14 >= v13)
          {
            uint64_t v16 = ((char *)v14 - *v88) >> 3;
            if ((unint64_t)(v16 + 1) >> 61) {
LABEL_110:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v17 = v13 - (void)*v88;
            uint64_t v18 = v17 >> 2;
            if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
              uint64_t v18 = v16 + 1;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v18;
            }
            if (v19) {
              uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v87, v19);
            }
            else {
              uint64_t v20 = 0;
            }
            uint64_t v21 = (unint64_t *)&v20[8 * v16];
            *uint64_t v21 = v12;
            float v15 = v21 + 1;
            uint64_t v23 = *(char **)(a1 + 480);
            uint64_t v22 = *(char **)(a1 + 488);
            if (v22 != v23)
            {
              do
              {
                unint64_t v24 = *((void *)v22 - 1);
                v22 -= 8;
                *--uint64_t v21 = v24;
              }
              while (v22 != v23);
              uint64_t v22 = *v88;
            }
            *(void *)(a1 + 480) = v21;
            *(void *)(a1 + 488) = v15;
            *(void *)(a1 + 496) = &v20[8 * v19];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            *float v14 = v12;
            float v15 = v14 + 1;
          }
          *(void *)(a1 + 488) = v15;
          uint64_t v10 = v11;
        }
        int v93 = v9;
        uint64_t v25 = v10 + 36 * v8;
        unsigned int v28 = *(_DWORD *)(v25 + 8);
        uint64_t v27 = (_DWORD *)(v25 + 8);
        uint64_t v26 = v28;
        uint64_t v92 = v10;
        if (v28)
        {
          uint64_t v29 = 0;
          uint64_t v30 = (float *)(v10 + 36 * v8);
          float v31 = INFINITY;
          do
          {
            uint64_t v32 = *(void *)(a1 + 376);
            unsigned int v33 = (float *)(v32 + 24 * v26);
            float v34 = (float *)(*(void *)(a1 + 360) + 36 * *(unsigned int *)v33);
            float v35 = v34[1] + (float)((float)((float)(*v30 + v33[3]) + v33[2]) - *v34);
            if (v35 <= *(float *)(a1 + 204))
            {
              if (v35 >= 0.0)
              {
                float v41 = v34[1] + (float)((float)((float)(*v30 + v33[3]) + v33[2]) - *v34);
              }
              else
              {
                float v41 = 0.0;
                if (v35 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v99);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Negative extra_cost: ", 21);
                  std::ostream::operator<<();
                  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v99);
                }
              }
              if (v41 < v31) {
                float v31 = v41;
              }
              uint64_t v37 = *(unsigned int *)(v32 + 24 * v26 + 16);
              uint64_t v29 = v26;
            }
            else
            {
              uint64_t v36 = v27;
              if (v29) {
                uint64_t v36 = (_DWORD *)(*(void *)(a1 + 376) + 24 * v29 + 16);
              }
              uint64_t v37 = *(unsigned int *)(v32 + 24 * v26 + 16);
              *uint64_t v36 = v37;
              if (a5)
              {
                uint64_t v39 = *(char **)(a1 + 456);
                unint64_t v38 = *(void *)(a1 + 464);
                if ((unint64_t)v39 >= v38)
                {
                  float v43 = (char *)*v95;
                  uint64_t v44 = (v39 - (unsigned char *)*v95) >> 2;
                  unint64_t v45 = v44 + 1;
                  if ((unint64_t)(v44 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v46 = v38 - (void)v43;
                  if (v46 >> 1 > v45) {
                    unint64_t v45 = v46 >> 1;
                  }
                  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v47 = v45;
                  }
                  if (v47)
                  {
                    int v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v91, v47);
                    float v43 = *(char **)(a1 + 448);
                    uint64_t v39 = *(char **)(a1 + 456);
                  }
                  else
                  {
                    int v48 = 0;
                  }
                  unint64_t v49 = &v48[4 * v44];
                  *(_DWORD *)unint64_t v49 = v26;
                  uint64_t v40 = v49 + 4;
                  while (v39 != v43)
                  {
                    int v50 = *((_DWORD *)v39 - 1);
                    v39 -= 4;
                    *((_DWORD *)v49 - 1) = v50;
                    v49 -= 4;
                  }
                  *(void *)(a1 + 448) = v49;
                  *(void *)(a1 + 456) = v40;
                  *(void *)(a1 + 464) = &v48[4 * v47];
                  if (v43) {
                    operator delete(v43);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v39 = v26;
                  uint64_t v40 = v39 + 4;
                }
                *(void *)(a1 + 456) = v40;
                unint64_t v51 = *(char **)(a1 + 584);
                unint64_t v52 = *(void *)(a1 + 592);
                if ((unint64_t)v51 >= v52)
                {
                  unint64_t v54 = (char *)*v94;
                  uint64_t v55 = (v51 - (unsigned char *)*v94) >> 2;
                  unint64_t v56 = v55 + 1;
                  if ((unint64_t)(v55 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v57 = v52 - (void)v54;
                  if (v57 >> 1 > v56) {
                    unint64_t v56 = v57 >> 1;
                  }
                  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v58 = v56;
                  }
                  if (v58)
                  {
                    int v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v90, v58);
                    unint64_t v51 = *(char **)(a1 + 584);
                    unint64_t v54 = *(char **)(a1 + 576);
                  }
                  else
                  {
                    int v59 = 0;
                  }
                  unint64_t v60 = &v59[4 * v55];
                  *(_DWORD *)unint64_t v60 = v8;
                  uint64_t v53 = v60 + 4;
                  while (v51 != v54)
                  {
                    int v61 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v60 - 1) = v61;
                    v60 -= 4;
                  }
                  *(void *)(a1 + 576) = v60;
                  *(void *)(a1 + 584) = v53;
                  *(void *)(a1 + 592) = &v59[4 * v58];
                  if (v54) {
                    operator delete(v54);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v51 = v8;
                  uint64_t v53 = v51 + 4;
                }
                *(void *)(a1 + 584) = v53;
              }
              *a4 = 1;
              --*(_DWORD *)(a1 + 312);
            }
            uint64_t v26 = v37;
          }
          while (v37);
        }
        else
        {
          float v31 = INFINITY;
        }
        uint64_t v62 = v92 + 36 * v8;
        int v9 = v93;
        if (vabds_f32(v31, *(float *)(v62 + 4)) > a6) {
          int v9 = 1;
        }
        *(float *)(v62 + 4) = v31;
        uint64_t v8 = *(unsigned int *)(v62 + 12);
      }
      while (v8);
      if ((v9 & 1) == 0) {
        break;
      }
      char v89 = 0;
      *a3 = 1;
      uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 96) + v85);
    }
    while (v8);
  }
  uint64_t v63 = *(unsigned int *)(*(void *)(a1 + 120) + v85);
  for (unsigned int i = v63; v63; unsigned int i = v63)
  {
    uint64_t v64 = *(void *)(a1 + 360);
    if (a5)
    {
      unint64_t v65 = v63 | ((unint64_t)*(unsigned int *)(v64 + 36 * v63 + 4) << 32);
      unint64_t v67 = *(unint64_t **)(a1 + 488);
      unint64_t v66 = *(void *)(a1 + 496);
      if ((unint64_t)v67 >= v66)
      {
        uint64_t v69 = ((char *)v67 - *v88) >> 3;
        if ((unint64_t)(v69 + 1) >> 61) {
          goto LABEL_110;
        }
        uint64_t v70 = v66 - (void)*v88;
        uint64_t v71 = v70 >> 2;
        if (v70 >> 2 <= (unint64_t)(v69 + 1)) {
          uint64_t v71 = v69 + 1;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v72 = v71;
        }
        if (v72) {
          uint64_t v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v87, v72);
        }
        else {
          uint64_t v73 = 0;
        }
        float v74 = (unint64_t *)&v73[8 * v69];
        unint64_t *v74 = v65;
        float v68 = v74 + 1;
        uint64_t v76 = *(char **)(a1 + 480);
        float v75 = *(char **)(a1 + 488);
        if (v75 != v76)
        {
          do
          {
            unint64_t v77 = *((void *)v75 - 1);
            v75 -= 8;
            *--float v74 = v77;
          }
          while (v75 != v76);
          float v75 = *v88;
        }
        *(void *)(a1 + 480) = v74;
        *(void *)(a1 + 488) = v68;
        *(void *)(a1 + 496) = &v73[8 * v72];
        if (v75) {
          operator delete(v75);
        }
      }
      else
      {
        *unint64_t v67 = v65;
        float v68 = v67 + 1;
      }
      *(void *)(a1 + 488) = v68;
    }
    v99[0] = &i;
    uint64_t v78 = (float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 320, &i, (uint64_t)&std::piecewise_construct, v99);
    float v79 = *(float *)(a1 + 144);
    if (v79 == INFINITY) {
      float v80 = *(float *)(a1 + 148);
    }
    else {
      float v80 = v79 - v78[5];
    }
    float v81 = *(float *)(v64 + 36 * v63) - v80;
    uint64_t v82 = v64 + 36 * v63;
    float v84 = *(float *)(v82 + 4);
    uint64_t v83 = (float *)(v82 + 4);
    if (vabds_f32(v81, v84) > a6) {
      *a3 = 1;
    }
    *uint64_t v83 = v81;
    if (v81 > *(float *)(a1 + 204))
    {
      *uint64_t v83 = INFINITY;
      *a4 = 1;
    }
    uint64_t v63 = *(unsigned int *)(v64 + 36 * v63 + 12);
  }
}

void sub_1B227C8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame(uint64_t *result, unsigned int a2, int a3)
{
  unint64_t v4 = result;
  uint64_t v102 = a2;
  uint64_t v5 = *(unsigned int *)(result[12] + 8 * a2);
  unsigned int v104 = v5;
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v96 = (void **)(result + 66);
    uint64_t v98 = (void **)(result + 50);
    uint64_t v94 = (uint64_t)(result + 68);
    uint64_t v95 = (uint64_t)(result + 52);
    uint64_t v100 = (char **)(result + 63);
    uint64_t v93 = (uint64_t)(result + 65);
    do
    {
      uint64_t v7 = v5;
      uint64_t v8 = v4[45];
      uint64_t v9 = v8 + 36 * v5;
      unsigned int v11 = *(_DWORD *)(v9 + 12);
      uint64_t v10 = (float *)(v9 + 12);
      uint64_t v5 = v11;
      if (*(v10 - 2) == INFINITY)
      {
        if (v6) {
          unint64_t v12 = (_DWORD *)(v8 + 36 * v6 + 12);
        }
        else {
          unint64_t v12 = (_DWORD *)(v4[12] + 8 * v102);
        }
        *unint64_t v12 = v5;
        if (a3)
        {
          float v14 = (char *)v4[51];
          unint64_t v13 = v4[52];
          if ((unint64_t)v14 >= v13)
          {
            uint64_t v16 = (char *)*v98;
            uint64_t v17 = (v14 - (unsigned char *)*v98) >> 2;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62) {
LABEL_119:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v19 = v13 - (void)v16;
            if (v19 >> 1 > v18) {
              unint64_t v18 = v19 >> 1;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20)
            {
              uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v95, v20);
              uint64_t v16 = (char *)v4[50];
              float v14 = (char *)v4[51];
            }
            else
            {
              uint64_t v21 = 0;
            }
            uint64_t v22 = &v21[4 * v17];
            *(_DWORD *)uint64_t v22 = v104;
            float v15 = v22 + 4;
            while (v14 != v16)
            {
              int v23 = *((_DWORD *)v14 - 1);
              v14 -= 4;
              *((_DWORD *)v22 - 1) = v23;
              v22 -= 4;
            }
            v4[50] = (uint64_t)v22;
            v4[51] = (uint64_t)v15;
            v4[52] = (uint64_t)&v21[4 * v20];
            if (v16) {
              operator delete(v16);
            }
          }
          else
          {
            *(_DWORD *)float v14 = v104;
            float v15 = v14 + 4;
          }
          v4[51] = (uint64_t)v15;
          unint64_t v24 = (char *)v4[67];
          unint64_t v25 = v4[68];
          if ((unint64_t)v24 >= v25)
          {
            uint64_t v27 = (char *)*v96;
            uint64_t v28 = (v24 - (unsigned char *)*v96) >> 2;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 62) {
LABEL_120:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v30 = v25 - (void)v27;
            if (v30 >> 1 > v29) {
              unint64_t v29 = v30 >> 1;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v29;
            }
            if (v31)
            {
              uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v94, v31);
              unint64_t v24 = (char *)v4[67];
              uint64_t v27 = (char *)v4[66];
            }
            else
            {
              uint64_t v32 = 0;
            }
            unsigned int v33 = &v32[4 * v28];
            *(_DWORD *)unsigned int v33 = a2;
            uint64_t v26 = v33 + 4;
            while (v24 != v27)
            {
              int v34 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *((_DWORD *)v33 - 1) = v34;
              v33 -= 4;
            }
            v4[66] = (uint64_t)v33;
            v4[67] = (uint64_t)v26;
            v4[68] = (uint64_t)&v32[4 * v31];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v24 = a2;
            uint64_t v26 = v24 + 4;
          }
          v4[67] = (uint64_t)v26;
          if (std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(v4 + 40, &v104))
          {
            uint64_t v105 = &v104;
            float v35 = std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(v4 + 40), &v104, (uint64_t)&std::piecewise_construct, &v105);
            unint64_t v36 = v104 | ((unint64_t)*((unsigned int *)v35 + 5) << 32);
            uint64_t v37 = (unint64_t *)v4[64];
            unint64_t v38 = v4[65];
            if ((unint64_t)v37 >= v38)
            {
              uint64_t v40 = ((char *)v37 - *v100) >> 3;
              if ((unint64_t)(v40 + 1) >> 61) {
LABEL_121:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              uint64_t v41 = v38 - (void)*v100;
              uint64_t v42 = v41 >> 2;
              if (v41 >> 2 <= (unint64_t)(v40 + 1)) {
                uint64_t v42 = v40 + 1;
              }
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v43 = v42;
              }
              if (v43) {
                uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v93, v43);
              }
              else {
                uint64_t v44 = 0;
              }
              unint64_t v45 = (unint64_t *)&v44[8 * v40];
              *unint64_t v45 = v36;
              uint64_t v39 = v45 + 1;
              unint64_t v47 = (char *)v4[63];
              uint64_t v46 = (char *)v4[64];
              if (v46 != v47)
              {
                do
                {
                  unint64_t v48 = *((void *)v46 - 1);
                  v46 -= 8;
                  *--unint64_t v45 = v48;
                }
                while (v46 != v47);
                uint64_t v46 = *v100;
              }
              v4[63] = (uint64_t)v45;
              v4[64] = (uint64_t)v39;
              v4[65] = (uint64_t)&v44[8 * v43];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *uint64_t v37 = v36;
              uint64_t v39 = v37 + 1;
            }
            v4[64] = (uint64_t)v39;
          }
        }
        uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__erase_unique<unsigned int>(v4 + 40, &v104);
        *uint64_t v10 = 0.0;
        --*((_DWORD *)v4 + 77);
        uint64_t v7 = v6;
      }
      unsigned int v104 = v5;
      uint64_t v6 = v7;
    }
    while (v5);
  }
  uint64_t v49 = *(unsigned int *)(v4[15] + 8 * v102);
  unsigned int v104 = v49;
  if (v49)
  {
    uint64_t v50 = 0;
    float v97 = (void **)(v4 + 69);
    char v99 = (void **)(v4 + 53);
    uint64_t v101 = (char **)(v4 + 63);
    do
    {
      uint64_t v51 = v49;
      uint64_t v52 = v4[45];
      uint64_t v53 = v52 + 36 * v49;
      unsigned int v55 = *(_DWORD *)(v53 + 12);
      unint64_t v54 = (float *)(v53 + 12);
      uint64_t v49 = v55;
      if (*(v54 - 2) == INFINITY)
      {
        if (v50) {
          unint64_t v56 = (_DWORD *)(v52 + 36 * v50 + 12);
        }
        else {
          unint64_t v56 = (_DWORD *)(v4[15] + 8 * v102);
        }
        *unint64_t v56 = v49;
        if (a3)
        {
          unint64_t v58 = (char *)v4[54];
          unint64_t v57 = v4[55];
          if ((unint64_t)v58 >= v57)
          {
            unint64_t v60 = (char *)*v99;
            uint64_t v61 = (v58 - (unsigned char *)*v99) >> 2;
            unint64_t v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 62) {
              goto LABEL_119;
            }
            uint64_t v63 = v57 - (void)v60;
            if (v63 >> 1 > v62) {
              unint64_t v62 = v63 >> 1;
            }
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v64 = v62;
            }
            if (v64)
            {
              unint64_t v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v4 + 55), v64);
              unint64_t v60 = (char *)v4[53];
              unint64_t v58 = (char *)v4[54];
            }
            else
            {
              unint64_t v65 = 0;
            }
            unint64_t v66 = &v65[4 * v61];
            *(_DWORD *)unint64_t v66 = v104;
            int v59 = v66 + 4;
            while (v58 != v60)
            {
              int v67 = *((_DWORD *)v58 - 1);
              v58 -= 4;
              *((_DWORD *)v66 - 1) = v67;
              v66 -= 4;
            }
            v4[53] = (uint64_t)v66;
            v4[54] = (uint64_t)v59;
            v4[55] = (uint64_t)&v65[4 * v64];
            if (v60) {
              operator delete(v60);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v58 = v104;
            int v59 = v58 + 4;
          }
          v4[54] = (uint64_t)v59;
          float v68 = (char *)v4[70];
          unint64_t v69 = v4[71];
          if ((unint64_t)v68 >= v69)
          {
            uint64_t v71 = (char *)*v97;
            uint64_t v72 = (v68 - (unsigned char *)*v97) >> 2;
            unint64_t v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 62) {
              goto LABEL_120;
            }
            uint64_t v74 = v69 - (void)v71;
            if (v74 >> 1 > v73) {
              unint64_t v73 = v74 >> 1;
            }
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v75 = v73;
            }
            if (v75)
            {
              uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v4 + 71), v75);
              float v68 = (char *)v4[70];
              uint64_t v71 = (char *)v4[69];
            }
            else
            {
              uint64_t v76 = 0;
            }
            unint64_t v77 = &v76[4 * v72];
            *(_DWORD *)unint64_t v77 = a2;
            uint64_t v70 = v77 + 4;
            while (v68 != v71)
            {
              int v78 = *((_DWORD *)v68 - 1);
              v68 -= 4;
              *((_DWORD *)v77 - 1) = v78;
              v77 -= 4;
            }
            v4[69] = (uint64_t)v77;
            v4[70] = (uint64_t)v70;
            v4[71] = (uint64_t)&v76[4 * v75];
            if (v71) {
              operator delete(v71);
            }
          }
          else
          {
            *(_DWORD *)float v68 = a2;
            uint64_t v70 = v68 + 4;
          }
          v4[70] = (uint64_t)v70;
          uint64_t v105 = &v104;
          float v79 = std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(v4 + 40), &v104, (uint64_t)&std::piecewise_construct, &v105);
          unint64_t v80 = v104 | ((unint64_t)*((unsigned int *)v79 + 5) << 32);
          float v81 = (unint64_t *)v4[64];
          unint64_t v82 = v4[65];
          if ((unint64_t)v81 >= v82)
          {
            uint64_t v84 = ((char *)v81 - *v101) >> 3;
            if ((unint64_t)(v84 + 1) >> 61) {
              goto LABEL_121;
            }
            uint64_t v85 = v82 - (void)*v101;
            uint64_t v86 = v85 >> 2;
            if (v85 >> 2 <= (unint64_t)(v84 + 1)) {
              uint64_t v86 = v84 + 1;
            }
            if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v87 = v86;
            }
            if (v87) {
              long long v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v4 + 65), v87);
            }
            else {
              long long v88 = 0;
            }
            char v89 = (unint64_t *)&v88[8 * v84];
            *char v89 = v80;
            uint64_t v83 = v89 + 1;
            uint64_t v91 = (char *)v4[63];
            uint64_t v90 = (char *)v4[64];
            if (v90 != v91)
            {
              do
              {
                unint64_t v92 = *((void *)v90 - 1);
                v90 -= 8;
                *--char v89 = v92;
              }
              while (v90 != v91);
              uint64_t v90 = *v101;
            }
            v4[63] = (uint64_t)v89;
            v4[64] = (uint64_t)v83;
            v4[65] = (uint64_t)&v88[8 * v87];
            if (v90) {
              operator delete(v90);
            }
          }
          else
          {
            *float v81 = v80;
            uint64_t v83 = v81 + 1;
          }
          v4[64] = (uint64_t)v83;
        }
        uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__erase_unique<unsigned int>(v4 + 40, &v104);
        *unint64_t v54 = 0.0;
        --*((_DWORD *)v4 + 77);
        uint64_t v51 = v50;
      }
      unsigned int v104 = v49;
      uint64_t v50 = v51;
    }
    while (v49);
  }
  return result;
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CompactTokensAndLinks(uint64_t a1, clockid_t a2)
{
  if (*(unsigned char *)(a1 + 472))
  {
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Skipping compaction final pruning because has been done", 55);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81);
    }
    return;
  }
  uint64_t v3 = (kaldi::quasar::E2ETokenHeap *)(a1 + 360);
  v79[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v79, a2);
  uint64_t v80 = 0;
  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VisitLiveTokens<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CompactTokensAndLinks(void)::{lambda#1}>((kaldi::quasar::E2ETokenHeap *)a1, a1);
  unint64_t v4 = *(unsigned int **)(a1 + 448);
  for (unsigned int i = *(unsigned int **)(a1 + 456); v4 != i; ++v4)
  {
    uint64_t v6 = *v4;
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 376);
      do
      {
        uint64_t v8 = v7 + 24 * v6;
        uint64_t v6 = *(unsigned int *)(v8 + 16);
        *(_DWORD *)(v8 + 20) |= 0x80000000;
      }
      while (v6);
    }
  }
  kaldi::quasar::E2ETokenHeap::RemoveDeadObjects(v3, (uint64_t *)v76);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    uint64_t v10 = v76[0];
    do
    {
      *(_DWORD *)(v9 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v10[*(unsigned int *)(v9 + 16)];
      uint64_t v9 = *(void *)(v9 + 24);
    }
    while (v9);
  }
  unsigned int v11 = *(_DWORD **)(a1 + 96);
  unint64_t v12 = *(_DWORD **)(a1 + 104);
  if (v11 != v12)
  {
    unint64_t v13 = v76[0];
    do
    {
      *unsigned int v11 = v13[*v11];
      v11 += 2;
    }
    while (v11 != v12);
  }
  float v14 = *(_DWORD **)(a1 + 120);
  float v15 = *(_DWORD **)(a1 + 128);
  if (v14 != v15)
  {
    uint64_t v16 = v76[0];
    do
    {
      *float v14 = v16[*v14];
      v14 += 2;
    }
    while (v14 != v15);
  }
  uint64_t v17 = *(_DWORD **)(a1 + 576);
  unint64_t v18 = *(_DWORD **)(a1 + 584);
  if (v17 != v18)
  {
    uint64_t v19 = v76[0];
    do
    {
      *uint64_t v17 = v19[*v17];
      ++v17;
    }
    while (v17 != v18);
  }
  unint64_t v20 = *(_DWORD **)(a1 + 400);
  uint64_t v21 = *(_DWORD **)(a1 + 408);
  if (v20 != v21)
  {
    uint64_t v22 = v76[0];
    do
    {
      _DWORD *v20 = v22[*v20];
      ++v20;
    }
    while (v20 != v21);
  }
  int v23 = *(_DWORD **)(a1 + 424);
  unint64_t v24 = *(_DWORD **)(a1 + 432);
  if (v23 != v24)
  {
    unint64_t v25 = v76[0];
    do
    {
      *int v23 = v25[*v23];
      ++v23;
    }
    while (v23 != v24);
  }
  uint64_t v26 = *(_DWORD **)(a1 + 448);
  uint64_t v27 = *(_DWORD **)(a1 + 456);
  if (v26 != v27)
  {
    uint64_t v28 = v77;
    do
    {
      *uint64_t v26 = v28[*v26];
      ++v26;
    }
    while (v26 != v27);
  }
  memset(v74, 0, sizeof(v74));
  int v75 = 1065353216;
  for (uint64_t j = *(uint64_t **)(a1 + 336); j; uint64_t j = (uint64_t *)*j)
  {
    LODWORD(v81[0]) = *((_DWORD *)v76[0] + *((unsigned int *)j + 4));
    HIDWORD(v81[0]) = *((_DWORD *)j + 5);
    std::__hash_table<std::__hash_value_type<char32_t,char32_t>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,char32_t>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,char32_t>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,char32_t>>>::__emplace_unique_key_args<char32_t,std::pair<char32_t const,char32_t> const&>((uint64_t)v74, (unsigned int *)v81, v81);
  }
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__move_assign(a1 + 320, (uint64_t *)v74);
  std::string __p = 0;
  uint64_t v72 = 0;
  unint64_t v73 = 0;
  uint64_t v30 = (unsigned int **)(a1 + 480);
  unint64_t v31 = *(unsigned int **)(a1 + 480);
  uint64_t v32 = *(unsigned int **)(a1 + 488);
  if (v31 == v32)
  {
    unsigned int v33 = 0;
    if (v31)
    {
LABEL_52:
      *(void *)(a1 + 488) = v31;
      operator delete(v31);
      float *v30 = 0;
      *(void *)(a1 + 488) = 0;
      *(void *)(a1 + 496) = 0;
      unsigned int v33 = v72;
    }
  }
  else
  {
    unsigned int v33 = 0;
    do
    {
      int v34 = *((_DWORD *)v76[0] + *v31);
      unsigned int v35 = v31[1];
      if (v33 >= v73)
      {
        unint64_t v36 = (char *)__p;
        uint64_t v37 = (v33 - (unsigned char *)__p) >> 3;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v73 - (unsigned char *)__p;
        if ((v73 - (unsigned char *)__p) >> 2 > v38) {
          unint64_t v38 = v39 >> 2;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v73, v40);
          unint64_t v36 = (char *)__p;
          unsigned int v33 = v72;
        }
        else
        {
          uint64_t v41 = 0;
        }
        uint64_t v42 = &v41[8 * v37];
        *(_DWORD *)uint64_t v42 = v34;
        *((_DWORD *)v42 + 1) = v35;
        unint64_t v43 = v42;
        if (v33 != v36)
        {
          do
          {
            uint64_t v44 = *((void *)v33 - 1);
            v33 -= 8;
            *((void *)v43 - 1) = v44;
            v43 -= 8;
          }
          while (v33 != v36);
          unint64_t v36 = (char *)__p;
        }
        unsigned int v33 = v42 + 8;
        std::string __p = v43;
        uint64_t v72 = v42 + 8;
        unint64_t v73 = &v41[8 * v40];
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        *(_DWORD *)unsigned int v33 = v34;
        *((_DWORD *)v33 + 1) = v35;
        v33 += 8;
      }
      uint64_t v72 = v33;
      v31 += 2;
    }
    while (v31 != v32);
    unint64_t v31 = *v30;
    if (*v30) {
      goto LABEL_52;
    }
  }
  unint64_t v45 = v73;
  *(void *)(a1 + 480) = __p;
  *(void *)(a1 + 488) = v33;
  *(void *)(a1 + 496) = v45;
  uint64_t v72 = 0;
  unint64_t v73 = 0;
  uint64_t v70 = 0;
  std::string __p = 0;
  float v68 = 0;
  unint64_t v69 = 0;
  uint64_t v46 = (unsigned int **)(a1 + 504);
  unint64_t v47 = *(unsigned int **)(a1 + 504);
  unint64_t v48 = *(unsigned int **)(a1 + 512);
  if (v47 == v48)
  {
    uint64_t v49 = 0;
    if (!v47) {
      goto LABEL_74;
    }
  }
  else
  {
    uint64_t v49 = 0;
    do
    {
      int v50 = *((_DWORD *)v76[0] + *v47);
      unsigned int v51 = v47[1];
      if (v49 >= v70)
      {
        uint64_t v52 = v68;
        uint64_t v53 = (v49 - v68) >> 3;
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v55 = v70 - v68;
        if ((v70 - v68) >> 2 > v54) {
          unint64_t v54 = v55 >> 2;
        }
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v54;
        }
        if (v56)
        {
          unint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v70, v56);
          uint64_t v52 = v68;
          uint64_t v49 = v69;
        }
        else
        {
          unint64_t v57 = 0;
        }
        unint64_t v58 = &v57[8 * v53];
        *(_DWORD *)unint64_t v58 = v50;
        *((_DWORD *)v58 + 1) = v51;
        int v59 = v58;
        if (v49 != v52)
        {
          do
          {
            uint64_t v60 = *((void *)v49 - 1);
            v49 -= 8;
            *((void *)v59 - 1) = v60;
            v59 -= 8;
          }
          while (v49 != v52);
          uint64_t v52 = v68;
        }
        uint64_t v49 = v58 + 8;
        float v68 = v59;
        uint64_t v70 = &v57[8 * v56];
        if (v52) {
          operator delete(v52);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v49 = v50;
        *((_DWORD *)v49 + 1) = v51;
        v49 += 8;
      }
      unint64_t v69 = v49;
      v47 += 2;
    }
    while (v47 != v48);
    unint64_t v47 = *v46;
    if (!*v46) {
      goto LABEL_74;
    }
  }
  *(void *)(a1 + 512) = v47;
  operator delete(v47);
  *uint64_t v46 = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  uint64_t v49 = v69;
LABEL_74:
  uint64_t v61 = v70;
  *(void *)(a1 + 504) = v68;
  *(void *)(a1 + 512) = v49;
  *(void *)(a1 + 520) = v61;
  uint64_t v70 = 0;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Compacted in ", 13);
    kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v62);
    uint64_t v63 = (void *)std::ostream::operator<<();
    unint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" ms ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"tokens ", 7);
    unint64_t v65 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" -> ", 4);
    unint64_t v66 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" and forward links ", 19);
    int v67 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" -> ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81);
  }
  if (__p)
  {
    uint64_t v72 = (char *)__p;
    operator delete(__p);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v74);
  if (v77)
  {
    int v78 = v77;
    operator delete(v77);
  }
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
}

void sub_1B227D5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a17);
  kaldi::LatticeWordAligner::ComputationState::~ComputationState((kaldi::LatticeWordAligner::ComputationState *)&a22);
  _Unwind_Resume(a1);
}

kaldi::quasar::E2ETokenHeap *kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VisitLiveTokens<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CompactTokensAndLinks(void)::{lambda(unsigned int)#1}>(kaldi::quasar::E2ETokenHeap *result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *((void *)result + 2); i; uint64_t i = *(void *)(i + 24))
    uint64_t result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken((kaldi::quasar::E2ETokenHeap *)(a2 + 360), *(_DWORD *)(i + 16), 1);
  uint64_t v5 = (unsigned int *)*((void *)v3 + 12);
  for (uint64_t j = (unsigned int *)*((void *)v3 + 13);
        v5 != j;
        uint64_t result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken((kaldi::quasar::E2ETokenHeap *)(a2 + 360), v7, 1))
  {
    unsigned int v7 = *v5;
    v5 += 2;
  }
  uint64_t v8 = (unsigned int *)*((void *)v3 + 15);
  for (unsigned int k = (unsigned int *)*((void *)v3 + 16);
        v8 != k;
        uint64_t result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken((kaldi::quasar::E2ETokenHeap *)(a2 + 360), v10, 1))
  {
    unsigned int v10 = *v8;
    v8 += 2;
  }
  unsigned int v11 = (unsigned int *)*((void *)v3 + 72);
  for (uint64_t m = (unsigned int *)*((void *)v3 + 73);
        v11 != m;
        uint64_t result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken((kaldi::quasar::E2ETokenHeap *)(a2 + 360), v13, 1))
  {
    unsigned int v13 = *v11++;
  }
  float v14 = (unsigned int *)*((void *)v3 + 50);
  for (uint64_t n = (unsigned int *)*((void *)v3 + 51);
        v14 != n;
        uint64_t result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken((kaldi::quasar::E2ETokenHeap *)(a2 + 360), v16, 1))
  {
    unsigned int v16 = *v14++;
  }
  uint64_t v17 = (unsigned int *)*((void *)v3 + 53);
  for (iuint64_t i = (unsigned int *)*((void *)v3 + 54);
        v17 != ii;
        uint64_t result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken((kaldi::quasar::E2ETokenHeap *)(a2 + 360), v19, 1))
  {
    unsigned int v19 = *v17++;
  }
  unint64_t v20 = (unsigned int *)*((void *)v3 + 60);
  for (juint64_t j = (unsigned int *)*((void *)v3 + 61);
        v20 != jj;
        uint64_t result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken((kaldi::quasar::E2ETokenHeap *)(a2 + 360), v22, 1))
  {
    unsigned int v22 = *v20;
    v20 += 2;
  }
  unint64_t v24 = (unsigned int *)*((void *)v3 + 63);
  int v23 = (unsigned int *)*((void *)v3 + 64);
  if (v24 != v23)
  {
    unint64_t v25 = (kaldi::quasar::E2ETokenHeap *)(a2 + 360);
    do
    {
      unsigned int v26 = *v24;
      v24 += 2;
      uint64_t result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken(v25, v26, 1);
    }
    while (v24 != v23);
  }
  return result;
}

uint64_t kaldi::quasar::E2ETokenHeap::RemoveDeadObjects@<X0>(kaldi::quasar::E2ETokenHeap *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = *((unsigned int *)this + 3);
  if (v4 >= 2)
  {
    uint64_t v5 = 0;
    for (unint64_t i = 1; i < v4; ++i)
    {
      uint64_t v7 = *(void *)this + v5;
      unsigned int v8 = *(_DWORD *)(v7 + 64) & 0x3FFFFFF;
      if (v8 && (*(_DWORD *)(v7 + 60) & 0x80000000) != 0)
      {
        kaldi::quasar::E2ETokenHeap::MarkAndTraceToken(this, v8, 1);
        unint64_t v4 = *((unsigned int *)this + 3);
      }
      v5 += 36;
    }
  }
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::RemoveDeadElements((uint64_t)this, (std::vector<unsigned int> *)a2);
  uint64_t result = kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::RemoveDeadElements((uint64_t)this + 16, (std::vector<unsigned int> *)a2 + 1);
  uint64_t v10 = *((unsigned int *)this + 3);
  if (v10 >= 2)
  {
    uint64_t v11 = *a2;
    uint64_t v12 = a2[3];
    unsigned int v13 = (unsigned int *)(*(void *)this + 44);
    uint64_t v14 = v10 - 1;
    do
    {
      uint64_t v15 = *v13;
      v13[1] = *(_DWORD *)(v11 + 4 * v13[1]);
      v13[5] = *(_DWORD *)(v11 + 4 * (v13[5] & 0x3FFFFFF)) | v13[5] & 0xFC000000;
      *unsigned int v13 = *(_DWORD *)(v12 + 4 * v15);
      v13 += 9;
      --v14;
    }
    while (v14);
  }
  uint64_t v16 = *((unsigned int *)this + 7);
  if (v16 >= 2)
  {
    uint64_t v17 = *a2;
    uint64_t v18 = a2[3];
    unsigned int v19 = (_DWORD *)(*((void *)this + 2) + 40);
    uint64_t v20 = v16 - 1;
    do
    {
      *(v19 - 4) = *(_DWORD *)(v17 + 4 * *(v19 - 4));
      *unsigned int v19 = *(_DWORD *)(v18 + 4 * *v19);
      v19 += 6;
      --v20;
    }
    while (v20);
  }
  return result;
}

void sub_1B227D8D0(_Unwind_Exception *a1)
{
  kaldi::LatticeWordAligner::ComputationState::~ComputationState(v1);
  _Unwind_Resume(a1);
}

kaldi::quasar::E2ETokenHeap *kaldi::quasar::E2ETokenHeap::MarkAndTraceToken(kaldi::quasar::E2ETokenHeap *this, unsigned int a2, int a3)
{
  if (a2)
  {
    uint64_t v3 = this;
    uint64_t v4 = *(void *)this;
    uint64_t v5 = *(void *)this + 36 * a2;
    int v8 = *(_DWORD *)(v5 + 24);
    uint64_t v6 = (unsigned int *)(v5 + 24);
    int v7 = v8;
    if ((v8 & 0x80000000) == 0)
    {
      *uint64_t v6 = v7 | 0x80000000;
      uint64_t v9 = *(unsigned int *)(v4 + 36 * a2 + 8);
      if (v9)
      {
        uint64_t v10 = *((void *)this + 2);
        do
        {
          uint64_t v11 = v10 + 24 * v9;
          uint64_t v9 = *(unsigned int *)(v11 + 16);
          *(_DWORD *)(v11 + 20) |= 0x80000000;
        }
        while (v9);
      }
      if (a3)
      {
        for (uint64_t i = v4 + 36 * a2; ; uint64_t i = *(void *)v3 + 36 * v13)
        {
          unsigned int v13 = *(_DWORD *)(i + 12);
          if (!v13) {
            break;
          }
          this = (kaldi::quasar::E2ETokenHeap *)kaldi::quasar::E2ETokenHeap::MarkAndTraceToken(v3, *(_DWORD *)(i + 12), 0);
        }
      }
    }
  }
  return this;
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::RemoveDeadElements(uint64_t a1, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::size_type v4 = *(unsigned int *)(a1 + 12);
  std::vector<int>::resize(this, v4);
  if (v4 < 2)
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = 1;
    uint64_t v8 = 1;
    do
    {
      if ((*(_DWORD *)(v6 + v5 + 60) & 0x80000000) != 0)
      {
        if (v7 != v8)
        {
          uint64_t v9 = v6 + v5 + 36;
          uint64_t v10 = v6 + 36 * v8;
          long long v11 = *(_OWORD *)v9;
          long long v12 = *(_OWORD *)(v9 + 16);
          *(_DWORD *)(v10 + 32) = *(_DWORD *)(v9 + 32);
          *(_OWORD *)uint64_t v10 = v11;
          *(_OWORD *)(v10 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v12;
          uint64_t v6 = *(void *)a1;
        }
        *(_DWORD *)(v6 + 36 * v8 + 24) &= ~0x80000000;
        this->__begin_[v7] = v8++;
      }
      else
      {
        this->__begin_[v7] = -1;
      }
      ++v7;
      v5 += 36;
    }
    while (v4 != v7);
  }
  return kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::ShrinkBuffer(a1, v8);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::RemoveDeadElements(uint64_t a1, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::size_type v4 = *(unsigned int *)(a1 + 12);
  std::vector<int>::resize(this, v4);
  if (v4 < 2)
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = 1;
    uint64_t v8 = 1;
    do
    {
      uint64_t v9 = v6 + v5;
      if ((*(_DWORD *)(v6 + v5 + 44) & 0x80000000) != 0)
      {
        if (v7 != v8)
        {
          uint64_t v10 = v6 + 24 * v8;
          long long v11 = *(_OWORD *)(v9 + 24);
          *(void *)(v10 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(void *)(v9 + 40);
          *(_OWORD *)uint64_t v10 = v11;
          uint64_t v6 = *(void *)a1;
        }
        *(_DWORD *)(v6 + 24 * v8 + 20) &= ~0x80000000;
        this->__begin_[v7] = v8++;
      }
      else
      {
        this->__begin_[v7] = -1;
      }
      ++v7;
      v5 += 24;
    }
    while (v4 != v7);
  }
  return kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::ShrinkBuffer(a1, v8);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::ShrinkBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t result = sysconf(29);
  uint64_t v5 = (result - 1 + 36 * a2) & -result;
  uint64_t v6 = (result - 1 + 36 * *(unsigned int *)(a1 + 12)) & -result;
  if (v6 != v5)
  {
    uint64_t result = madvise((void *)(v5 + *(void *)a1), v6 - v5, 7);
    if (result)
    {
      int v7 = result;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" Could not madvise: ", 20);
      uint64_t v9 = strerror(v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, v9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
  }
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::ShrinkBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t result = sysconf(29);
  uint64_t v5 = (result - 1 + 24 * a2) & -result;
  uint64_t v6 = (result - 1 + 24 * *(unsigned int *)(a1 + 12)) & -result;
  if (v6 != v5)
  {
    uint64_t result = madvise((void *)(v5 + *(void *)a1), v6 - v5, 7);
    if (result)
    {
      int v7 = result;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" Could not madvise: ", 20);
      uint64_t v9 = strerror(v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, v9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
  }
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t std::set<int>::set[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  std::vector<unsigned int>::size_type v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_1B227DD4C(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,quasar::UnkMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, int *a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a1 + 280))(a1, 0);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 288))(a1, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v6, &v25);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v25 + 24))(v25))
        {
          uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 32))(v25);
          if (*(_DWORD *)(v7 + 4) == a2[1])
          {
            int v8 = *a2;
            int v9 = *(_DWORD *)(v7 + 16);
            LODWORD(v23[0]) = *(_DWORD *)(v7 + 4);
            HIDWORD(v23[0]) = v8;
          }
          else
          {
            v23[0] = *(void *)v7;
            int v9 = *(_DWORD *)(v7 + 16);
          }
          v23[1] = *(void *)(v7 + 8);
          int v24 = v9;
          (*(void (**)(uint64_t, void *))(*(void *)v25 + 88))(v25, v23);
          (*(void (**)(uint64_t))(*(void *)v25 + 40))(v25);
        }
        if (v25) {
          (*(void (**)(void))(*(void *)v25 + 8))();
        }
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(v23, a1, v6);
        uint64_t v10 = v23[0];
        if (a2[1] || !*a2) {
          goto LABEL_24;
        }
        int v11 = FLAGS_fst_error_fatal;
        if (FLAGS_fst_error_fatal)
        {
          std::string::basic_string[abi:ne180100]<0>(v20, "FATAL");
          long long v12 = fst::LogMessage::LogMessage((fst *)&v22, (uint64_t)v20);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          long long v12 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
        }
        unsigned int v13 = (void *)fst::cerr(v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
        if (v11)
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v22);
          if (v21 < 0)
          {
            uint64_t v14 = (void *)v20[0];
LABEL_22:
            operator delete(v14);
          }
        }
        else
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
          if (v18 < 0)
          {
            uint64_t v14 = __p[0];
            goto LABEL_22;
          }
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
LABEL_24:
        uint64_t v16 = v10;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v6, &v16);
        uint64_t v6 = (v6 + 1);
      }
      while ((int)v6 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    unint64_t v15 = fst::InvertProperties(v5);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v15, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B227E1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinalEos()
{
  return INFINITY;
}

void std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<int,std::pair<int,int>>,void *> *>>(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  int v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = *((int *)a2 + 4);
      *((_DWORD *)v8 + 4) = v9;
      *(uint64_t *)((char *)v8 + 20) = *(void *)((char *)a2 + 20);
      uint64_t v10 = (uint64_t *)*v8;
      v8[1] = v9;
      uint64_t inserted = (void *)std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__node_insert_multi_prepare((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (void *)*a2;
      int v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      long long v12 = (uint64_t *)*v8;
      operator delete(v8);
      int v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__emplace_multi<std::pair<int const,std::pair<int,int>> const&>(a1, a2 + 2);
      a2 = (void *)*a2;
    }
  }
}

void sub_1B227E344(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B227E364(_Unwind_Exception *a1)
{
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  uint64_t v16 = *(void *)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    uint64_t v16 = *(void *)v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = *(void *)(v16 + 8);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = *(void *)(v16 + 8);
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && *(_DWORD *)(v16 + 16) == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = (uint64_t **)i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (uint64_t *)*v13;
            }
            while (v13 && *((_DWORD *)i + 4) == *((_DWORD *)v13 + 4));
            void *v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = (uint64_t **)i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

_DWORD *std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__emplace_multi<std::pair<int const,std::pair<int,int>> const&>(void *a1, uint64_t *a2)
{
  int8x8_t v4 = operator new(0x20uLL);
  int32x2_t v4[6] = *((_DWORD *)a2 + 2);
  uint64_t v5 = *a2;
  *((void *)v4 + 2) = *a2;
  *(void *)int8x8_t v4 = 0;
  *((void *)v4 + 1) = (int)v5;
  uint64_t inserted = (void *)std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__node_insert_multi_prepare((uint64_t)a1, (int)v5, v4 + 4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_1B227E7A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,float>,std::__tree_node<std::__value_type<int,float>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      unint64_t v8 = v6;
    }
    uint8x8_t v14 = result;
    unint64_t v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      unint64_t v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint8x8_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = *((_DWORD *)v9 + 7);
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          std::__tree<int>::__node_insert_multi(v5, (uint64_t)v8);
          unint64_t v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            unint64_t v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          BOOL v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              BOOL v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              uint8x8_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          uint8x8_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_multi<std::pair<int const,float> const&>(v5, (void *)((char *)a2 + 28));
      unint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          size_t v13 = v12;
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          size_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B227E910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_multi<std::pair<int const,float> const&>(uint64_t **a1, uint64_t *a2)
{
  int8x8_t v4 = (uint64_t *)operator new(0x28uLL);
  uint64_t v5 = *a2;
  *(uint64_t *)((char *)v4 + 28) = *a2;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (*((_DWORD *)v7 + 7) <= (int)v5) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        unint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    unint64_t v8 = v6 + 1;
  }
  else
  {
    unint64_t v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__assign_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__vdeallocate(a1);
    if (a4 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  unint64_t v14 = (a1[1] - v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + 32 * v14;
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>((uint64_t)&v20, a2, v15, v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(v8, v15, a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = a1[1];
  if (v18 != v16)
  {
    do
    {
      unint64_t v19 = *(std::__shared_weak_count **)(v18 - 16);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  a1[1] = v17;
}

void sub_1B227EAF8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B227EB00(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<quasar::SymbolTableList,std::allocator<quasar::SymbolTableList>,quasar::SymbolTableList&,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  int8x8_t v4 = (char *)operator new(0x30uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::SymbolTableList>::__shared_ptr_emplace[abi:ne180100]<quasar::SymbolTableList&,std::allocator<quasar::SymbolTableList>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1B227EB50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<quasar::SymbolTableList>::__shared_ptr_emplace[abi:ne180100]<quasar::SymbolTableList&,std::allocator<quasar::SymbolTableList>,0>(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1F0A60090;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = 0;
  std::vector<quasar::SymbolTableList::Data>::__init_with_size[abi:ne180100]<quasar::SymbolTableList::Data*,quasar::SymbolTableList::Data*>((void *)(a1 + 24), *a2, a2[1], (a2[1] - *a2) >> 5);
  return a1;
}

void sub_1B227EBC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::vector<quasar::SymbolTableList::Data>::__init_with_size[abi:ne180100]<quasar::SymbolTableList::Data*,quasar::SymbolTableList::Data*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SymbolTableList::Data>,quasar::SymbolTableList::Data*,quasar::SymbolTableList::Data*,quasar::SymbolTableList::Data*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B227EC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::SymbolTableList::Data>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SymbolTableList::Data>,quasar::SymbolTableList::Data*,quasar::SymbolTableList::Data*,quasar::SymbolTableList::Data*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    do
    {
      *(void *)uint64_t v4 = *(void *)a2;
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)(v4 + 8) = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v6 = *(void *)(a2 + 16);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 24);
      *(void *)(v4 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v6;
      v4 += 32;
      a2 += 32;
    }
    while (a2 != a3);
    uint64_t v11 = v4;
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SymbolTableList::Data>,quasar::SymbolTableList::Data*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SymbolTableList::Data>,quasar::SymbolTableList::Data*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SymbolTableList::Data>,quasar::SymbolTableList::Data*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SymbolTableList::Data>,quasar::SymbolTableList::Data*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 24);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 32;
  }
}

void std::vector<quasar::LmeInfo>::__assign_with_size[abi:ne180100]<quasar::LmeInfo*,quasar::LmeInfo*>(uint64_t *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<quasar::LmeInfo>::__vdeallocate(a1);
    if (a4 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*,quasar::LmeInfo*,quasar::LmeInfo*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v9) >> 3) < a4)
  {
    uint64_t v13 = (uint64_t *)a2 + ((a1[1] - v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::LmeInfo *,quasar::LmeInfo *,quasar::LmeInfo *,0>((uint64_t *)a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*,quasar::LmeInfo*,quasar::LmeInfo*>(v8, (long long *)v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::LmeInfo *,quasar::LmeInfo *,quasar::LmeInfo *,0>((uint64_t *)a2, (uint64_t *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0) {
        operator delete(*(void **)(v16 - 24));
      }
      v16 -= 40;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_1B227EEE8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B227EEF0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::LmeInfo *,quasar::LmeInfo *,quasar::LmeInfo *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    uint64_t v6 = *v4;
    *(_DWORD *)(a3 + 8) = *((_DWORD *)v4 + 2);
    *(void *)a3 = v6;
    std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v4 + 2));
    a3 += 40;
    v4 += 5;
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<quasar::QsrTextSymbolTable> const&,long long &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xA8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::QsrTextSymbolTable> const&,long long &,std::allocator<quasar::QsrTextSymbolTable>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B227F03C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::QsrTextSymbolTable> const&,long long &,std::allocator<quasar::QsrTextSymbolTable>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60678;
  std::allocator<quasar::QsrTextSymbolTable>::construct[abi:ne180100]<quasar::QsrTextSymbolTable,std::shared_ptr<quasar::QsrTextSymbolTable> const&,long long &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B227F0B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::QsrTextSymbolTable>::construct[abi:ne180100]<quasar::QsrTextSymbolTable,std::shared_ptr<quasar::QsrTextSymbolTable> const&,long long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *a4;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0u;
  uint64_t v7 = *(void *)(v5 + 104);
  *(void *)(a2 + 96) = *(void *)(v5 + 96);
  *(void *)(a2 + 104) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(v5 + 112);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 120) = v6;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  int v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *int v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B227F3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 1;
}

void sub_1B227F448(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::quasar::OffsetOutputLabelMapper,void>()
{
  uint64_t v0 = operator new(0x28uLL);
  std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::quasar::OffsetOutputLabelMapper,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>,0>(v0);
}

void sub_1B227F508(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::quasar::OffsetOutputLabelMapper,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E688;
  fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::ArcMapFst();
}

void sub_1B227F564(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::ArcMapFst()
{
}

void sub_1B227F6A4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::~ArcMapFst(void *a1)
{
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Final(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Copy()
{
}

void sub_1B227F888(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::InitStateIterator()
{
}

void sub_1B227F918(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B227FA08(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Init(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if (result == -1)
  {
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 0x3FFFFFFF0004, 0);
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | result;
    if (*(_DWORD *)(a1 + 156) == 2) {
      *(_DWORD *)(a1 + 160) = 0;
    }
  }
  return result;
}

void sub_1B227FB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::~ArcMapFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A38970;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3) {
      MEMORY[0x1B3EA8670](v3, 0x1000C4052888210);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((void *)a1);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A41990;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

float fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Final(uint64_t a1, int a2)
{
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2))goto LABEL_20; {
  int v4 = *(_DWORD *)(a1 + 156);
  }
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      if (*(_DWORD *)(a1 + 160) == a2) {
        float v5 = 0.0;
      }
      else {
        float v5 = INFINITY;
      }
LABEL_18:
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      *(float *)MutableState = v5;
      goto LABEL_19;
    }
    uint64_t v8 = *(void *)(a1 + 136);
    int v6 = *(_DWORD *)(a1 + 160);
LABEL_11:
    BOOL v10 = v6 != -1 && v6 <= a2;
    float v5 = (*(float (**)(uint64_t, void))(*(void *)v8 + 32))(v8, (a2 - v10));
    goto LABEL_18;
  }
  int v6 = *(_DWORD *)(a1 + 160);
  if (v6 != a2)
  {
    uint64_t v8 = *(void *)(a1 + 136);
    goto LABEL_11;
  }
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  *(_DWORD *)MutableState = 0;
LABEL_19:
  *((_DWORD *)MutableState + 12) |= 9u;
LABEL_20:
  uint64_t v11 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v11 + 76) == a2) {
    uint64_t v12 = v11 + 80;
  }
  else {
    uint64_t v12 = *(void *)(v11 + 8) + 8 * (a2 + 1);
  }
  return **(float **)v12;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Expand(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  uint64_t v5 = *(void *)(a1 + 136);
  BOOL v7 = v4 != -1 && v4 <= a2;
  unint64_t v30 = 0;
  (*(void (**)(uint64_t, void, long long *))(*(void *)v5 + 136))(v5, (a2 - v7), &v27);
  while (1)
  {
    if (!(void)v27)
    {
      if (v30 >= v28) {
        goto LABEL_32;
      }
      goto LABEL_17;
    }
    if ((*(unsigned int (**)(void))(*(void *)v27 + 24))(v27)) {
      break;
    }
    if ((void)v27)
    {
      uint64_t v8 = (unint64_t *)(*(uint64_t (**)(void))(*(void *)v27 + 32))();
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v8 = (unint64_t *)(*((void *)&v27 + 1) + 16 * v30);
LABEL_18:
    unint64_t v10 = *v8;
    unint64_t v9 = v8[1];
    unint64_t v11 = HIDWORD(v9);
    int v12 = *(_DWORD *)(a1 + 160);
    if (v12 != -1 && v12 <= SHIDWORD(v9)) {
      LODWORD(v11) = HIDWORD(v9) + 1;
    }
    if ((int)v11 >= *(_DWORD *)(a1 + 164)) {
      *(_DWORD *)(a1 + 164) = v11 + 1;
    }
    unint64_t v14 = HIDWORD(v10);
    if (SHIDWORD(v10) >= 1) {
      LODWORD(v14) = **(_DWORD **)(a1 + 144) + HIDWORD(v10);
    }
    *(void *)&long long v26 = v10 | ((unint64_t)v14 << 32);
    *((void *)&v26 + 1) = v9 | ((unint64_t)v11 << 32);
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v26);
    if ((void)v27) {
      (*(void (**)(void))(*(void *)v27 + 40))(v27);
    }
    else {
      ++v30;
    }
  }
  if ((void)v27)
  {
    (*(void (**)(void))(*(void *)v27 + 8))();
    goto LABEL_34;
  }
LABEL_32:
  if (v29) {
    --*v29;
  }
LABEL_34:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0|| (LODWORD(v27) = fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Final(a1, a2), LODWORD(v26) = 2139095040, *(float *)&v27 == INFINITY))
  {
    int v16 = *(_DWORD *)(a1 + 156);
    if (v16 == 2)
    {
      int v20 = *(_DWORD *)(a1 + 160);
      BOOL v22 = v20 != -1 && v20 <= a2;
      float v23 = (*(float (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v22));
      *(float *)&long long v27 = v23;
      LODWORD(v26) = 2139095040;
      if (v23 != INFINITY)
      {
        unsigned int v24 = *(_DWORD *)(a1 + 160);
        *(void *)&long long v27 = 0;
        *((void *)&v27 + 1) = __PAIR64__(v24, LODWORD(v23));
        uint64_t v25 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v25, &v27);
      }
    }
    else if (v16 == 1)
    {
      int v17 = *(_DWORD *)(a1 + 160);
      BOOL v19 = v17 != -1 && v17 <= a2;
      (*(void (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), (a2 - v19));
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B22801CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A41990;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B228037C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B228045C(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A3A008;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = *(void *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1B2280508(_Unwind_Exception *exception_object)
{
  if (*v1) {
    fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::StateIterator(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A3A008;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A3A008;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

void std::allocate_shared[abi:ne180100]<fst::quasar::MergeTrieFst,std::allocator<fst::quasar::MergeTrieFst>,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,void>(uint64_t a1, uint64_t a2, int *a3, int *a4, long long *a5)
{
  unint64_t v9 = operator new(0x30uLL);
  std::__shared_ptr_emplace<fst::quasar::MergeTrieFst>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,std::allocator<fst::quasar::MergeTrieFst>,0>(v9, a2, a3, a4, a5);
}

void sub_1B22806F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::quasar::MergeTrieFst>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,std::allocator<fst::quasar::MergeTrieFst>,0>(void *a1, uint64_t a2, int *a3, int *a4, long long *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E4C8;
  fst::quasar::MergeTrieFst::MergeTrieFst(a1 + 3, a2, *a3, *a4, a5);
}

void sub_1B2280758(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::quasar::MergeTrieFst>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E4C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::quasar::MergeTrieFst>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E4C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::quasar::MergeTrieFst>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A5C0C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5C0C8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::operator()@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(result[1] + 2124))
  {
    uint64_t result = std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,void>(&v5);
    *(_OWORD *)a3 = v5;
  }
  else
  {
    uint64_t v4 = a2[1];
    *(void *)a3 = *a2;
    *(void *)(a3 + 8) = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::StateAccessRecordingFst>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,std::allocator<quasar::StateAccessRecordingFst>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B228098C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::StateAccessRecordingFst>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,std::allocator<quasar::StateAccessRecordingFst>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61478;
  quasar::StateAccessRecordingFst::StateAccessRecordingFst(a1 + 3);
  return a1;
}

void sub_1B22809E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A5C120;
  return result;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5C120;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::operator()(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__func()
{
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A5C178;
  return result;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5C178;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::operator()(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x28uLL);
  uint64_t result = std::__shared_ptr_emplace<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2280C9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E3E8;
  a1[3] = &unk_1F0A3F868;
  a1[4] = a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 268697600, 1);
  return a1;
}

void sub_1B2280D44(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E3E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E3E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

uint64_t fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

void fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetArc(uint64_t a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher((uint64_t)&v1, *(void *)(a1 + 8), 0, 1);
}

void sub_1B2280ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~NonBackoffDeterministicOnDemandFst()
{
}

void *std::allocate_shared[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  int v6 = operator new(0x90uLL);
  uint64_t result = std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B2280F4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E3B0;
  std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B2280FC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = *a3;
  uint64_t v15 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v5 = (std::__shared_weak_count *)a4[1];
  uint64_t v12 = *a4;
  unint64_t v13 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v11 = _D0;
  fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeDeterministicOnDemandFst(a2, &v14, &v12, &v11);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1B228105C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,kaldi::quasar::AutoRegressiveGraphSearchDecoderConfig &,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,kaldi::quasar::DynamicClassTagDict *,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void (****a3)(void)@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0x298uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,kaldi::quasar::AutoRegressiveGraphSearchDecoderConfig &,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,kaldi::quasar::DynamicClassTagDict *,std::allocator<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1B22810E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,kaldi::quasar::AutoRegressiveGraphSearchDecoderConfig &,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,kaldi::quasar::DynamicClassTagDict *,std::allocator<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(void *a1, uint64_t a2, uint64_t a3, void (****a4)(void), uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F488;
  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AutoRegressiveGraphSearchDecoder((uint64_t)(a1 + 3), a2, a3, *a4, *a5);
  return a1;
}

void sub_1B228114C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F488;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AutoRegressiveGraphSearchDecoder(uint64_t a1, uint64_t a2, uint64_t a3, void (***a4)(void), uint64_t a5)
{
  *(void *)a1 = &unk_1F0A515D8;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  uint64_t v9 = a1 + 16;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_1B2565910;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 184) = a2;
  long long v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 208) = v10;
  long long v11 = *(_OWORD *)(a3 + 32);
  long long v12 = *(_OWORD *)(a3 + 48);
  long long v13 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 272) = v13;
  *(_OWORD *)(a1 + 224) = v11;
  *(_OWORD *)(a1 + 240) = v12;
  *(void *)(a1 + 288) = a4;
  *(void *)(a1 + 296) = a5;
  *(unsigned char *)(a1 + 304) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x10000000, 0) == 0x10000000;
  *(void *)(a1 + 308) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  if (*(int *)(a3 + 84) >= 0x3FFFFFF) {
    unsigned int v14 = 0x3FFFFFF;
  }
  else {
    unsigned int v14 = *(_DWORD *)(a3 + 84);
  }
  kaldi::quasar::E2ETokenHeap::E2ETokenHeap((kaldi::quasar::E2ETokenHeap *)(a1 + 360), v14, *(_DWORD *)(a3 + 88));
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 4kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(void *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(void *)(a1 + 592) = 0;
  (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  (**a4)(a4);
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(v9, 0x3E8uLL);
  return a1;
}

void sub_1B22813D0(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(v1 + 40));
  int v6 = *v4;
  if (*v4)
  {
    v1[21] = v6;
    operator delete(v6);
  }
  BOOL v7 = (void *)v1[15];
  if (v7)
  {
    v1[16] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v3;
  if (*v3)
  {
    v1[13] = v8;
    operator delete(v8);
  }
  kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::~HashList(v2);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~AutoRegressiveGraphSearchDecoder(void *a1)
{
  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~AutoRegressiveGraphSearchDecoder(a1);
  JUMPOUT(0x1B3EA8670);
}

void *kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::~HashList(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      ++v3;
      uint64_t v2 = *(void *)(v2 + 24);
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)a1[7];
  char v5 = (unsigned char *)a1[8];
  if (v5 == (unsigned char *)v4)
  {
    uint64_t v7 = 0;
    uint64_t v4 = (void *)a1[8];
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (v4[v6])
      {
        MEMORY[0x1B3EA8630](v4[v6], 0x1020C80B07198D1);
        uint64_t v4 = (void *)a1[7];
        char v5 = (unsigned char *)a1[8];
      }
      ++v6;
      v7 += 1024;
    }
    while (v6 < (v5 - (unsigned char *)v4) >> 3);
  }
  if (v3 != v7 && kaldi::g_kaldi_verbose_level > -2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Possible memory leak: ", 22);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" != ", 4);
    uint64_t v9 = (void *)std::ostream::operator<<();
    long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": you might have forgotten to call Delete on ", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"some Elems", 10);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    uint64_t v4 = (void *)a1[7];
  }
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  long long v11 = (void *)a1[3];
  if (v11)
  {
    a1[4] = v11;
    operator delete(v11);
  }
  return a1;
}

void *kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~AutoRegressiveGraphSearchDecoder(void *a1)
{
  *a1 = &unk_1F0A515D8;
  uint64_t v2 = a1[3];
  if (v2 != -1)
  {
    uint64_t v3 = a1[5];
    do
    {
      uint64_t v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      uint64_t v2 = *v4;
    }
    while (v2 != -1);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  a1[3] = -1;
  if (v5)
  {
    uint64_t v6 = a1[8];
    do
    {
      uint64_t v7 = v5;
      uint64_t v5 = *(void *)(v5 + 24);
      *(void *)(v7 + 24) = v6;
      uint64_t v6 = v7;
    }
    while (v5);
    a1[8] = v7;
  }
  uint64_t v8 = (void *)a1[76];
  if (v8)
  {
    free(v8);
    a1[76] = 0;
    a1[77] = 0;
  }
  a1[79] = 0;
  a1[78] = 0;
  uint64_t v9 = (void *)a1[72];
  if (v9)
  {
    a1[73] = v9;
    operator delete(v9);
  }
  long long v10 = (void *)a1[69];
  if (v10)
  {
    a1[70] = v10;
    operator delete(v10);
  }
  long long v11 = (void *)a1[66];
  if (v11)
  {
    a1[67] = v11;
    operator delete(v11);
  }
  long long v12 = (void *)a1[63];
  if (v12)
  {
    a1[64] = v12;
    operator delete(v12);
  }
  long long v13 = (void *)a1[60];
  if (v13)
  {
    a1[61] = v13;
    operator delete(v13);
  }
  unsigned int v14 = (void *)a1[56];
  if (v14)
  {
    a1[57] = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)a1[53];
  if (v15)
  {
    a1[54] = v15;
    operator delete(v15);
  }
  int v16 = (void *)a1[50];
  if (v16)
  {
    a1[51] = v16;
    operator delete(v16);
  }
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)(a1 + 47));
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::Clear((uint64_t)(a1 + 45));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 40));
  int v17 = (void *)a1[20];
  if (v17)
  {
    a1[21] = v17;
    operator delete(v17);
  }
  float v18 = (void *)a1[15];
  if (v18)
  {
    a1[16] = v18;
    operator delete(v18);
  }
  BOOL v19 = (void *)a1[12];
  if (v19)
  {
    a1[13] = v19;
    operator delete(v19);
  }
  kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::~HashList(a1 + 2);
  return a1;
}

uint64_t *std::map<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::shared_ptr<void>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<void>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B2281828(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void **std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__node_handle_insert_unique[abi:ne180100]<std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>,std::__insert_return_type<std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>*,long>>,std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>>>@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  uint64_t v5 = *a2;
  if (!*a2)
  {
    *(void *)a3 = result + 1;
    *(unsigned char *)(a3 + 8) = 0;
LABEL_9:
    *(void *)(a3 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
    *(void *)(a3 + 24) = 0;
    return result;
  }
  uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)result, &v8, (const void **)(v5 + 32));
  if (!*result)
  {
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v3, v8, result, (uint64_t *)v5);
    *a2 = 0;
    if (*((unsigned char *)a2 + 9)) {
      *((unsigned char *)a2 + 9) = 0;
    }
    *(void *)a3 = v5;
    *(unsigned char *)(a3 + 8) = 1;
    goto LABEL_9;
  }
  *(void *)a3 = *result;
  *(unsigned char *)(a3 + 8) = 0;
  *(void *)(a3 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *a2;
  unsigned int v7 = *((unsigned __int16 *)a2 + 4);
  *(_WORD *)(a3 + 24) = v7;
  *a2 = 0;
  if (v7 >= 0x100) {
    *((unsigned char *)a2 + 9) = 0;
  }
  return result;
}

void sub_1B22819E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B2281ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1B2281C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1B2281DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1B2281FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

void sub_1B2282184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double quasar::AudioAnalyticsDecoder::AudioAnalyticsDecoder(uint64_t a1, long long *a2)
{
  uint64_t v2 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v2 = &unk_1F0A55898;
  *(void *)&double result = 0x50000000ALL;
  *(void *)(v2 + 448) = 0x50000000ALL;
  *(unsigned char *)(v2 + 57) = 0;
  return result;
}

void quasar::AudioAnalyticsDecoder::~AudioAnalyticsDecoder(quasar::AudioAnalyticsDecoder *this)
{
  quasar::Decoder::~Decoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::AudioAnalyticsDecoder::registerParams(quasar::AudioAnalyticsDecoder *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "audio-analytics-only");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 112, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "min-voicing-duration");
  std::string::basic_string[abi:ne180100]<0>(v4, "Minimum duration of voicing");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v4, 0, 112, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "acoustic-feature-window-width");
  std::string::basic_string[abi:ne180100]<0>(v4, "Minimum width of the normalization window for acoustic audio analytics features");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 452, (uint64_t)v4, 0, 112, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B22824AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::AudioAnalyticsDecoder::runImpl(uint64_t a1, int32x2_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    signed int v10 = 0;
    float v11 = (float)(*(int (**)(void))(**(void **)&(*a2)[2] + 24))(*(void *)&(*a2)[2]);
    while (kaldi::OnlineFeatureMatrix::IsValidFrame(v9, v10, 1))
      ++v10;
    _ZNSt3__115allocate_sharedB8ne180100IN5kaldi6MatrixIfEENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v52);
    kaldi::Matrix<float>::Matrix((uint64_t)v51);
    if (*(unsigned char *)(*(void *)(*(void *)a4 + 24) + 53))
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"Utterance feature cache is disabled. Skipping audio analytics.", 62);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v25);
      }
LABEL_10:
      uint64_t v12 = 0;
      goto LABEL_42;
    }
    uint64_t v13 = (uint64_t)a2[67];
    if (v13)
    {
      unsigned int v14 = (std::__shared_weak_count *)a2[68];
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      kaldi::OnlineCacheInput::GetCachedData(v13, v52, v51);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      if (kaldi::MatrixBase<float>::NumRows((uint64_t)v51)
        && kaldi::MatrixBase<float>::NumCols((uint64_t)v51))
      {
        unint64_t v43 = 0;
        uint64_t v42 = 0;
        int v15 = (*(uint64_t (**)(void))(**(void **)&(*a2)[2] + 24))(*(void *)&(*a2)[2]);
        quasar::AudioAnalyticsProcessor::computeAnalytics((float **)v51, &v42, v15, *(_DWORD *)(a1 + 448), *(_DWORD *)(a1 + 452), 0, (uint64_t)v44);
        if (v43) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v43);
        }
        *(_DWORD *)(*(void *)a3 + 576) = v10;
        int v16 = *(_DWORD *)(*(void *)a4 + 8);
        quasar::RecogResult::RecogResult((quasar::RecogResult *)&v25);
        int v17 = *(std::__shared_weak_count **)(*(void *)a4 + 32);
        uint64_t v23 = *(void *)(*(void *)a4 + 24);
        unsigned int v24 = v17;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        float v18 = (void *)quasar::RecogResult::setParams((uint64_t)&v25, &v23);
        BOOL v19 = quasar::RecogResult::setLmeStatus(v18, (uint64_t *)(*(void *)a3 + 584));
        quasar::RecogResult::setAudioAnalytics((uint64_t)v19, (const quasar::AudioAnalytics *)v44);
        int v20 = v16 + v10;
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        HIDWORD(v32) = (float)(v11 * (float)*(unsigned int *)(*(void *)a4 + 8));
        LODWORD(v33) = (float)(v11 * (float)v20);
        (*(void (**)(void, long long *, uint64_t))(**(void **)(*(void *)a3 + 560) + 40))(*(void *)(*(void *)a3 + 560), &v25, 1);
        if (quasar::gLogLevel >= 4)
        {
          memset(v22, 0, sizeof(v22));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Audio analytics finished..", 26);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v22);
        }
        quasar::RecogResult::~RecogResult((quasar::RecogResult *)&v25);
        if (__p)
        {
          int v50 = __p;
          operator delete(__p);
        }
        if (v47)
        {
          unint64_t v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          uint64_t v46 = v45;
          operator delete(v45);
        }
        if (v44[0])
        {
          v44[1] = v44[0];
          operator delete(v44[0]);
        }
        goto LABEL_10;
      }
      if (quasar::gLogLevel >= 4)
      {
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"No audio features generated. Rejecting utterance.", 49);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v25);
      }
    }
    else if (quasar::gLogLevel >= 1)
    {
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v25 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"Error: Utterance features were improperly cached.", 49);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v25);
    }
    uint64_t v12 = 2;
LABEL_42:
    kaldi::Matrix<float>::~Matrix((uint64_t)v51);
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    goto LABEL_44;
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"Error: no utterance features were provided", 42);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v25);
  }
  uint64_t v12 = 2;
LABEL_44:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v12;
}

void sub_1B22829A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&a45);
  quasar::AudioAnalytics::~AudioAnalytics((quasar::AudioAnalytics *)&STACK[0x2A8]);
  kaldi::Matrix<float>::~Matrix(v46 - 136);
  unint64_t v48 = *(std::__shared_weak_count **)(v46 - 88);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::AudioAnalyticsDecoder::computesAudioAnalytics(quasar::AudioAnalyticsDecoder *this)
{
  return 1;
}

uint64_t quasar::AudioAnalyticsDecoder::requiresCacheFeatInputItf(quasar::AudioAnalyticsDecoder *this)
{
  return 1;
}

uint64_t quasar::AudioAnalyticsDecoder::affectsRecognitionResults(quasar::AudioAnalyticsDecoder *this)
{
  return 1;
}

uint64_t quasar::AudioAnalyticsDecoder::supportsEager(quasar::AudioAnalyticsDecoder *this)
{
  return 0;
}

uint64_t QuasarCCorrectiveRerankingParser_new(uint64_t a1)
{
  v3[4] = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F0A1CBC0;
  v3[1] = a1;
  void v3[3] = v3;
  uint64_t v1 = CapiHelpers_new<QuasarCCorrectiveRerankingParser,quasar::corrective_reranking::Parser>((uint64_t)v3);
  std::__function::__value_func<quasar::corrective_reranking::Parser * ()(void)>::~__value_func[abi:ne180100](v3);
  return v1;
}

void sub_1B2282B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<quasar::corrective_reranking::Parser * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CapiHelpers_new<QuasarCCorrectiveRerankingParser,quasar::corrective_reranking::Parser>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1);
}

void **CapiHelpers_delete<QuasarCCorrectiveRerankingParser,quasar::corrective_reranking::Parser>(void **result)
{
  if (result)
  {
    uint64_t v1 = result;
    quasar::corrective_reranking::Models::~Models((quasar::corrective_reranking::Models *)(result + 74));
    quasar::corrective_reranking::Config::~Config(v1);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t QuasarCCorrectiveRerankingParser_runJson(uint64_t a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1F0A1CC18;
  v4[1] = a2;
  v4[3] = v4;
  uint64_t v2 = CapiHelpers_execute<QuasarCCorrectiveRerankingParser const,quasar::corrective_reranking::Parser const,char *>(a1, (uint64_t)v4);
  std::__function::__value_func<char * ()(quasar::corrective_reranking::Parser const*)>::~__value_func[abi:ne180100](v4);
  return v2;
}

void sub_1B2282DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<char * ()(quasar::corrective_reranking::Parser const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CapiHelpers_execute<QuasarCCorrectiveRerankingParser const,quasar::corrective_reranking::Parser const,char *>(uint64_t a1, uint64_t a2)
{
  return std::function<char * ()(quasar::corrective_reranking::Parser const*)>::operator()(a2, a1);
}

void std::__function::__func<QuasarCCorrectiveRerankingParser_new::$_0,std::allocator<QuasarCCorrectiveRerankingParser_new::$_0>,quasar::corrective_reranking::Parser * ()(void)>::~__func()
{
}

void *std::__function::__func<QuasarCCorrectiveRerankingParser_new::$_0,std::allocator<QuasarCCorrectiveRerankingParser_new::$_0>,quasar::corrective_reranking::Parser * ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F0A1CBC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QuasarCCorrectiveRerankingParser_new::$_0,std::allocator<QuasarCCorrectiveRerankingParser_new::$_0>,quasar::corrective_reranking::Parser * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A1CBC0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QuasarCCorrectiveRerankingParser_new::$_0,std::allocator<QuasarCCorrectiveRerankingParser_new::$_0>,quasar::corrective_reranking::Parser * ()(void)>::operator()()
{
}

void sub_1B2282FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1B3EA8670](v15, 0x1032C4038310758);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QuasarCCorrectiveRerankingParser_new::$_0,std::allocator<QuasarCCorrectiveRerankingParser_new::$_0>,quasar::corrective_reranking::Parser * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<QuasarCCorrectiveRerankingParser_new::$_0,std::allocator<QuasarCCorrectiveRerankingParser_new::$_0>,quasar::corrective_reranking::Parser * ()(void)>::target_type()
{
}

void *std::__function::__value_func<quasar::corrective_reranking::Parser * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::function<char * ()(quasar::corrective_reranking::Parser const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<QuasarCCorrectiveRerankingParser_runJson::$_0,std::allocator<QuasarCCorrectiveRerankingParser_runJson::$_0>,char * ()(quasar::corrective_reranking::Parser const*)>::~__func()
{
}

void *std::__function::__func<QuasarCCorrectiveRerankingParser_runJson::$_0,std::allocator<QuasarCCorrectiveRerankingParser_runJson::$_0>,char * ()(quasar::corrective_reranking::Parser const*)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F0A1CC18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QuasarCCorrectiveRerankingParser_runJson::$_0,std::allocator<QuasarCCorrectiveRerankingParser_runJson::$_0>,char * ()(quasar::corrective_reranking::Parser const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A1CC18;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QuasarCCorrectiveRerankingParser_runJson::$_0,std::allocator<QuasarCCorrectiveRerankingParser_runJson::$_0>,char * ()(quasar::corrective_reranking::Parser const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&v3, *(char **)(a1 + 8));
  quasar::corrective_reranking::Parser::runJson(v2, &v3);
}

char *sub_1B2283214(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char __s1, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (v27 < 0) {
    operator delete(v26);
  }
  if ((v29 & 0x80000000) == 0) {
    return strdup((const char *)&v28);
  }
  unsigned int v24 = strdup(v28);
  operator delete(v28);
  return v24;
}

void sub_1B2283268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<QuasarCCorrectiveRerankingParser_runJson::$_0,std::allocator<QuasarCCorrectiveRerankingParser_runJson::$_0>,char * ()(quasar::corrective_reranking::Parser const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QuasarCCorrectiveRerankingParser_runJson::$_0,std::allocator<QuasarCCorrectiveRerankingParser_runJson::$_0>,char * ()(quasar::corrective_reranking::Parser const*)>::target_type()
{
}

void *std::__function::__value_func<char * ()(quasar::corrective_reranking::Parser const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t kaldi::quasar::Features::GetFeatureMap(kaldi::quasar::Features *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&kaldi::quasar::Features::GetFeatureMap(void)::flag, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    std::string v3 = &v4;
    std::__call_once(&kaldi::quasar::Features::GetFeatureMap(void)::flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::quasar::Features::GetFeatureMap(void)::$_0 &&>>);
  }
  return kaldi::quasar::Features::GetFeatureMap(void)::m_heap;
}

void kaldi::quasar::GetStatePosts(int a1@<W0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  uint64_t v9 = (uint64_t **)(*a2 + 24 * a1);
  long long v33 = 0;
  uint64_t v34 = 0;
  long long v32 = 0;
  std::vector<std::pair<int,float>>::__init_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>((char *)&v32, *v9, v9[1], v9[1] - *v9);
  char v29 = 0;
  long long v30 = 0;
  uint64_t v31 = 0;
  std::string __p = 0;
  char v27 = 0;
  uint64_t v28 = 0;
  uint64_t v10 = *a3;
  if (a3[1] != *a3)
  {
    float v11 = (uint64_t **)(v10 + 24 * a1);
    if (&v29 != (void **)v11)
    {
      uint64_t v12 = *(uint64_t **)(v10 + 24 * a1 + 8);
      std::vector<std::pair<int,float>>::__assign_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(&v29, *v11, v12, v12 - *v11);
    }
    uint64_t v13 = (uint64_t **)(*a4 + 24 * a1);
    if (&__p != (void **)v13)
    {
      unsigned int v14 = *(uint64_t **)(*a4 + 24 * a1 + 8);
      std::vector<std::pair<int,float>>::__assign_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(&__p, *v13, v14, v14 - *v13);
    }
  }
  uint64_t v15 = v32;
  if (v33 != v32)
  {
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = v15[v16];
      uint64_t v25 = v17;
      int v18 = 0;
      int v19 = 0;
      if (v30 != v29)
      {
        unint64_t v20 = (v30 - (unsigned char *)v29) >> 3;
        if (v20 <= 1) {
          unint64_t v20 = 1;
        }
        unint64_t v21 = (int *)((char *)v29 + 4);
        while (*(v21 - 1) != v17)
        {
          v21 += 2;
          if (!--v20)
          {
            int v19 = 0;
            goto LABEL_16;
          }
        }
        int v19 = *v21;
      }
LABEL_16:
      if (v27 != __p)
      {
        unint64_t v22 = (v27 - (unsigned char *)__p) >> 3;
        if (v22 <= 1) {
          unint64_t v22 = 1;
        }
        uint64_t v23 = (int *)((char *)__p + 4);
        while (*(v23 - 1) != v17)
        {
          v23 += 2;
          if (!--v22) {
            goto LABEL_24;
          }
        }
        int v18 = *v23;
      }
LABEL_24:
      long long v35 = &v25;
      unsigned int v24 = std::__hash_table<std::__hash_value_type<int,kaldi::quasar::ScoreTuple>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::ScoreTuple>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::ScoreTuple>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::ScoreTuple>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, (int *)&v25, (uint64_t)&std::piecewise_construct, (_DWORD **)&v35);
      v24[5] = HIDWORD(v17);
      v24[6] = v19;
      v24[7] = v18;
      ++v16;
      uint64_t v15 = v32;
    }
    while (v16 < (v33 - (unsigned char *)v32) >> 3);
  }
  if (__p)
  {
    char v27 = __p;
    operator delete(__p);
  }
  if (v29)
  {
    long long v30 = v29;
    operator delete(v29);
  }
  if (v32)
  {
    long long v33 = v32;
    operator delete(v32);
  }
}

void sub_1B22835E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v17);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::WordConf::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  uint64_t v4 = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = v4;
  if (a1 == a2)
  {
    long long v6 = *(_OWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = v6;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 168), *(char **)(a2 + 168), *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
    long long v5 = *(_OWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = v5;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 216), *(char **)(a2 + 216), *(void *)(a2 + 224), (uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 2);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 240), *(std::string **)(a2 + 240), *(long long **)(a2 + 248), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 3));
  }
  return a1;
}

void kaldi::quasar::ProcessRegionInformation(const char *a1, const char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  kaldi::SplitStringToVector((const std::string *)a3, a1, 1, (uint64_t)&v28);
  uint64_t v7 = v28;
  uint64_t v8 = v29;
  if (v29 == v28)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Invalid list of region specifiers provided ", 43);
    int v23 = *(char *)(a3 + 23);
    if (v23 >= 0) {
      uint64_t v24 = a3;
    }
    else {
      uint64_t v24 = *(void *)a3;
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v25 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Using non-terminal regions for combination from ", 48);
    int v10 = *(char *)(a3 + 23);
    if (v10 >= 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = *(void *)a3;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v12 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v27);
    uint64_t v7 = v28;
    uint64_t v8 = v29;
  }
  if (v8 != v7)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      memset(v26, 0, sizeof(v26));
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
        uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Splitting into labels : ", 24);
        uint64_t v16 = v28 + v13;
        int v17 = *(char *)(v28 + v13 + 23);
        if (v17 >= 0) {
          uint64_t v18 = v28 + v13;
        }
        else {
          uint64_t v18 = *(void *)v16;
        }
        if (v17 >= 0) {
          uint64_t v19 = *(unsigned __int8 *)(v16 + 23);
        }
        else {
          uint64_t v19 = *(void *)(v16 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v18, v19);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v27);
        uint64_t v7 = v28;
      }
      kaldi::SplitStringToVector((const std::string *)(v7 + v13), a2, 1, (uint64_t)v26);
      unint64_t v20 = a4[1];
      if (v20 >= a4[2])
      {
        uint64_t v21 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a4, v26);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a4, v26);
        uint64_t v21 = v20 + 24;
      }
      a4[1] = v21;
      v27[0] = (void **)v26;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v27);
      ++v14;
      uint64_t v7 = v28;
      v13 += 24;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3));
  }
  v27[0] = (void **)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v27);
}

void sub_1B2283938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)(v12 - 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CandidateFound(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a3 != -1)
  {
    char v3 = 1;
    return v3 & 1;
  }
  uint64_t v7 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    char v3 = 0;
    float v10 = 0.0;
    float v11 = 0.0;
    while (1)
    {
      if (*(_DWORD *)(v7 + v8 + 4) != *(_DWORD *)(a2 + 4)) {
        goto LABEL_22;
      }
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v41, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" Check start ", 13);
        uint64_t v12 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" end ", 5);
        uint64_t v13 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" against start ", 15);
        unint64_t v14 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" end ", 5);
        uint64_t v15 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" lab in lat ", 12);
        uint64_t v16 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" lab in check ", 14);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v41);
      }
      uint64_t v17 = *a1;
      uint64_t v18 = *a1 + v8;
      if ((v3 & 1) == 0)
      {
        *(_OWORD *)a3 = *(_OWORD *)v18;
        long long v26 = *(_OWORD *)(v18 + 16);
        long long v27 = *(_OWORD *)(v18 + 32);
        long long v28 = *(_OWORD *)(v18 + 48);
        *(_OWORD *)(a3 + 60) = *(_OWORD *)(v18 + 60);
        *(_OWORD *)(a3 + 32) = v27;
        *(_OWORD *)(a3 + 48) = v28;
        *(_OWORD *)(a3 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v26;
        if (v18 != a3) {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 80), *(char **)(v17 + v8 + 80), *(void *)(v17 + v8 + 88), (uint64_t)(*(void *)(v17 + v8 + 88) - *(void *)(v17 + v8 + 80)) >> 2);
        }
        float v29 = (float)vaba_s32(vdup_lane_s32(vabd_s32(*(int32x2_t *)(a3 + 12), *(int32x2_t *)(a2 + 12)), 1), *(int32x2_t *)(a3 + 12), *(int32x2_t *)(a2 + 12)).i32[0];
        float v10 = *(float *)(a3 + 52);
        char v3 = 1;
        goto LABEL_23;
      }
      int32x2_t v19 = *(int32x2_t *)(a2 + 12);
      int32x2_t v20 = vabd_s32(*(int32x2_t *)(v18 + 12), v19);
      int32x2_t v21 = vabd_s32(*(int32x2_t *)(a3 + 12), v19);
      float32x2_t v22 = vcvt_f32_s32(vadd_s32(vzip2_s32(v20, v21), vzip1_s32(v20, v21)));
      float v40 = v22.f32[0];
      if (v22.f32[0] >= v22.f32[1])
      {
        if (v22.f32[0] != v22.f32[1] || *(float *)(v17 + v8 + 52) <= v10)
        {
          char v3 = 1;
LABEL_22:
          float v29 = v11;
          goto LABEL_23;
        }
        *(_OWORD *)a3 = *(_OWORD *)v18;
        long long v30 = *(_OWORD *)(v18 + 16);
        long long v31 = *(_OWORD *)(v18 + 32);
        long long v32 = *(_OWORD *)(v18 + 48);
        *(_OWORD *)(a3 + 60) = *(_OWORD *)(v18 + 60);
        *(_OWORD *)(a3 + 32) = v31;
        *(_OWORD *)(a3 + 48) = v32;
        *(_OWORD *)(a3 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v30;
        if (v18 != a3) {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 80), *(char **)(v17 + v8 + 80), *(void *)(v17 + v8 + 88), (uint64_t)(*(void *)(v17 + v8 + 88) - *(void *)(v17 + v8 + 80)) >> 2);
        }
        float v10 = *(float *)(*a1 + v8 + 52);
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)v18;
        long long v23 = *(_OWORD *)(v18 + 16);
        long long v24 = *(_OWORD *)(v18 + 32);
        long long v25 = *(_OWORD *)(v18 + 48);
        *(_OWORD *)(a3 + 60) = *(_OWORD *)(v18 + 60);
        *(_OWORD *)(a3 + 32) = v24;
        *(_OWORD *)(a3 + 48) = v25;
        *(_OWORD *)(a3 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v23;
        if (v18 != a3) {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 80), *(char **)(v17 + v8 + 80), *(void *)(v17 + v8 + 88), (uint64_t)(*(void *)(v17 + v8 + 88) - *(void *)(v17 + v8 + 80)) >> 2);
        }
      }
      char v3 = 1;
      float v29 = v40;
LABEL_23:
      ++v9;
      uint64_t v7 = *a1;
      v8 += 104;
      float v11 = v29;
      if (v9 >= 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3)) {
        goto LABEL_26;
      }
    }
  }
  char v3 = 0;
LABEL_26:
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v41, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Found state ", 12);
    long long v33 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" id ", 4);
    uint64_t v34 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" start ", 7);
    long long v35 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" end ", 5);
    long long v36 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" For MBR start ", 15);
    long long v37 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" end ", 5);
    long long v38 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" distance is ", 13);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v41);
  }
  return v3 & 1;
}

void sub_1B2283D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::GetCandidateFeatures(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, float **a5, const std::string *a6, int a7, int *a8, _DWORD *a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  memset(v175, 0, 24);
  if (!kaldi::quasar::CandidateFound(a2, a3, a14))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"No arc to continue with", 23);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__str);
  }
  uint64_t v172 = 0;
  unint64_t v173 = 0;
  unint64_t v174 = 0;
  int v17 = *(_DWORD *)(a14 + 28);
  int v18 = *(_DWORD *)a14;
  int v169 = 0;
  uint64_t v170 = 0;
  unint64_t v171 = 0;
  uint64_t v166 = 0;
  int v167 = 0;
  unint64_t v168 = 0;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__str, 3);
    int32x2_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Match ", 6);
    std::string __p = (void *)*(int *)(a14 + 4);
    if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a4, (unint64_t *)&__p))
    {
      int v158 = (void *)*(int *)(a14 + 4);
      int32x2_t v20 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a4, (unint64_t *)&v158);
      if (*((char *)v20 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v164, (const std::string::value_type *)v20[3], v20[4]);
      }
      else {
        std::string v164 = *(std::string *)((unsigned char *)v20 + 1);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v164, "not_in_static_vocab");
    }
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int32x2_t v21 = &v164;
    }
    else {
      int32x2_t v21 = (std::string *)v164.__r_.__value_.__r.__words[0];
    }
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v164.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v164.__r_.__value_.__l.__size_;
    }
    long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" Find Overlapping With ", 23);
    std::ostream::operator<<();
    if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v164.__r_.__value_.__l.__data_);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__str);
  }
  memset(&v164, 0, sizeof(v164));
  std::string __p = 0;
  uint64_t v162 = 0;
  uint64_t v163 = 0;
  int v158 = 0;
  uint64_t v159 = 0;
  int v160 = 0;
  if (a7)
  {
    long long v24 = *(float **)(a10 + 168);
    float v25 = v24[30];
    v24[29] = *(float *)(a14 + 40) + v24[29];
    v24[30] = *(float *)(a14 + 36) + v25;
    v24[31] = *(float *)(a14 + 32) + v24[31];
  }
  uint64_t v26 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v27 = 0;
    while (1)
    {
      long long v28 = (int *)(v26 + 104 * v27);
      int v29 = v28[10];
      int v30 = *v28;
      int v31 = v28[1];
      int v32 = *(unsigned __int8 *)(a1 + 3);
      if (v30 == v17 && v32 != 0)
      {
        uint64_t v34 = v167;
        if ((unint64_t)v167 >= v168)
        {
          long long v36 = v166;
          int64_t v37 = ((char *)v167 - (char *)v166) >> 3;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 61) {
            goto LABEL_202;
          }
          uint64_t v39 = v168 - (void)v166;
          if ((uint64_t)(v168 - (void)v166) >> 2 > v38) {
            unint64_t v38 = v39 >> 2;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            long long v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v168, v40);
            long long v36 = v166;
            uint64_t v34 = v167;
          }
          else
          {
            long long v41 = 0;
          }
          uint64_t v42 = (float *)&v41[8 * v37];
          *(_DWORD *)uint64_t v42 = v31;
          *((_DWORD *)v42 + 1) = v29;
          unint64_t v43 = v42;
          if (v34 != v36)
          {
            do
            {
              uint64_t v44 = *((void *)v34 - 1);
              v34 -= 2;
              *((void *)v43 - 1) = v44;
              v43 -= 2;
            }
            while (v34 != v36);
            long long v36 = v166;
          }
          long long v35 = v42 + 2;
          uint64_t v166 = v43;
          int v167 = v42 + 2;
          unint64_t v168 = (unint64_t)&v41[8 * v40];
          if (v36) {
            operator delete(v36);
          }
        }
        else
        {
          *(_DWORD *)int v167 = v31;
          *((_DWORD *)v34 + 1) = v29;
          long long v35 = v34 + 2;
        }
        int v167 = v35;
        uint64_t v26 = *a2;
        int v32 = *(unsigned __int8 *)(a1 + 3);
      }
      if (*(_DWORD *)(v26 + 104 * v27 + 28) == v18 && v32 != 0)
      {
        uint64_t v46 = v170;
        if ((unint64_t)v170 >= v171)
        {
          unint64_t v48 = v169;
          int64_t v49 = ((char *)v170 - (char *)v169) >> 3;
          unint64_t v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 61) {
LABEL_202:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v51 = v171 - (void)v169;
          if ((uint64_t)(v171 - (void)v169) >> 2 > v50) {
            unint64_t v50 = v51 >> 2;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v50;
          }
          if (v52)
          {
            uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v171, v52);
            unint64_t v48 = v169;
            uint64_t v46 = v170;
          }
          else
          {
            uint64_t v53 = 0;
          }
          unint64_t v54 = (float *)&v53[8 * v49];
          *(_DWORD *)unint64_t v54 = v31;
          *((_DWORD *)v54 + 1) = v29;
          uint64_t v55 = v54;
          if (v46 != v48)
          {
            do
            {
              uint64_t v56 = *((void *)v46 - 1);
              v46 -= 2;
              *((void *)v55 - 1) = v56;
              v55 -= 2;
            }
            while (v46 != v48);
            unint64_t v48 = v169;
          }
          unint64_t v47 = v54 + 2;
          int v169 = v55;
          uint64_t v170 = v54 + 2;
          unint64_t v171 = (unint64_t)&v53[8 * v52];
          if (v48) {
            operator delete(v48);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v170 = v31;
          *((_DWORD *)v46 + 1) = v29;
          unint64_t v47 = v46 + 2;
        }
        uint64_t v170 = v47;
        uint64_t v26 = *a2;
      }
      int v57 = *(_DWORD *)(a14 + 12);
      int v58 = *(_DWORD *)(a14 + 20);
      float v59 = (double)v57 + (double)v58 * 0.1;
      float v60 = (double)v57 + (double)v58 * -0.1;
      uint64_t v61 = v26 + 104 * v27;
      float v62 = (float)*(int *)(v61 + 12);
      BOOL v63 = v62 <= v59 && (float)*(int *)(v26 + 104 * v27 + 16) >= v60;
      float v64 = (double)(v58 + v57) + (double)v58 * 0.1;
      BOOL v65 = v62 <= v64 && (float)*(int *)(v26 + 104 * v27 + 16) >= v60;
      if (v62 >= v60) {
        break;
      }
      if (v63 || v65) {
        goto LABEL_75;
      }
LABEL_129:
      if (++v27 >= (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a2[1] - v26) >> 3))) {
        goto LABEL_130;
      }
    }
    if ((float)*(int *)(v26 + 104 * v27 + 16) <= v64) {
      BOOL v63 = 1;
    }
    if (!v63 && !v65) {
      goto LABEL_129;
    }
LABEL_75:
    unint64_t v66 = v173;
    if (v173 >= v174)
    {
      uint64_t v67 = std::vector<kaldi::ChosenArc>::__push_back_slow_path<kaldi::ChosenArc const&>(&v172, v61);
    }
    else
    {
      std::vector<kaldi::ChosenArc>::__construct_one_at_end[abi:ne180100]<kaldi::ChosenArc const&>((uint64_t)&v172, v61);
      uint64_t v67 = v66 + 104;
    }
    unint64_t v173 = v67;
    *(float *)(*(void *)(a12 + 168) + 40) = *(float *)(*(void *)(a12 + 168) + 40) + 1.0;
    kaldi::quasar::WordConf::UpdatePostNumerators(a13, (float *)(*a2 + 104 * v27));
    uint64_t v68 = *a2;
    int v69 = *(_DWORD *)(*a2 + 104 * v27 + 4);
    if (v69 == *(_DWORD *)(a14 + 4))
    {
      kaldi::quasar::WordConf::UpdatePostNumerators(a12, (float *)(v68 + 104 * v27));
      uint64_t v68 = *a2;
      int v69 = *(_DWORD *)(*a2 + 104 * v27 + 4);
    }
    int v70 = *(_DWORD *)(v68 + 104 * v27 + 40);
    std::string::size_type v71 = v164.__r_.__value_.__l.__size_;
    if (v164.__r_.__value_.__l.__size_ >= v164.__r_.__value_.__r.__words[2])
    {
      unint64_t v73 = (void *)v164.__r_.__value_.__r.__words[0];
      uint64_t v74 = (uint64_t)(v164.__r_.__value_.__l.__size_ - v164.__r_.__value_.__r.__words[0]) >> 3;
      unint64_t v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v76 = v164.__r_.__value_.__r.__words[2] - v164.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v164.__r_.__value_.__r.__words[2] - v164.__r_.__value_.__r.__words[0]) >> 2 > v75) {
        unint64_t v75 = v76 >> 2;
      }
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v77 = v75;
      }
      if (v77)
      {
        int v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v164.__r_.__value_.__r.__words[2], v77);
        std::string::size_type v71 = v164.__r_.__value_.__l.__size_;
        unint64_t v73 = (void *)v164.__r_.__value_.__r.__words[0];
      }
      else
      {
        int v78 = 0;
      }
      float v79 = &v78[8 * v74];
      *(_DWORD *)float v79 = v69;
      *((_DWORD *)v79 + 1) = v70;
      std::string::size_type v80 = (std::string::size_type)v79;
      if ((void *)v71 != v73)
      {
        do
        {
          uint64_t v81 = *(void *)(v71 - 8);
          v71 -= 8;
          *(void *)(v80 - 8) = v81;
          v80 -= 8;
        }
        while ((void *)v71 != v73);
        unint64_t v73 = (void *)v164.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v72 = (std::string::size_type)(v79 + 8);
      v164.__r_.__value_.__r.__words[0] = v80;
      v164.__r_.__value_.__l.__size_ = (std::string::size_type)(v79 + 8);
      v164.__r_.__value_.__r.__words[2] = (std::string::size_type)&v78[8 * v77];
      if (v73) {
        operator delete(v73);
      }
    }
    else
    {
      *(_DWORD *)v164.__r_.__value_.__l.__size_ = v69;
      *(_DWORD *)(v71 + 4) = v70;
      std::string::size_type v72 = v71 + 8;
    }
    v164.__r_.__value_.__l.__size_ = v72;
    uint64_t v82 = *a2 + 104 * v27;
    int v83 = *(_DWORD *)(v82 + 4);
    int v84 = *(_DWORD *)(v82 + 60);
    uint64_t v85 = v162;
    if (v162 >= v163)
    {
      unint64_t v87 = (char *)__p;
      uint64_t v88 = (v162 - (unsigned char *)__p) >> 3;
      unint64_t v89 = v88 + 1;
      if ((unint64_t)(v88 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v90 = v163 - (unsigned char *)__p;
      if ((v163 - (unsigned char *)__p) >> 2 > v89) {
        unint64_t v89 = v90 >> 2;
      }
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v91 = v89;
      }
      if (v91)
      {
        unint64_t v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v163, v91);
        unint64_t v87 = (char *)__p;
        uint64_t v85 = v162;
      }
      else
      {
        unint64_t v92 = 0;
      }
      uint64_t v93 = &v92[8 * v88];
      *(_DWORD *)uint64_t v93 = v83;
      *((_DWORD *)v93 + 1) = v84;
      uint64_t v94 = v93;
      if (v85 != v87)
      {
        do
        {
          uint64_t v95 = *((void *)v85 - 1);
          v85 -= 8;
          *((void *)v94 - 1) = v95;
          v94 -= 8;
        }
        while (v85 != v87);
        unint64_t v87 = (char *)__p;
      }
      uint64_t v86 = v93 + 8;
      std::string __p = v94;
      uint64_t v162 = v93 + 8;
      uint64_t v163 = &v92[8 * v91];
      if (v87) {
        operator delete(v87);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v162 = v83;
      *((_DWORD *)v85 + 1) = v84;
      uint64_t v86 = v85 + 8;
    }
    uint64_t v162 = v86;
    uint64_t v96 = *a2 + 104 * v27;
    int v97 = *(_DWORD *)(v96 + 4);
    int v98 = *(_DWORD *)(v96 + 64);
    char v99 = v159;
    if (v159 >= v160)
    {
      uint64_t v101 = (char *)v158;
      uint64_t v102 = (v159 - (unsigned char *)v158) >> 3;
      unint64_t v103 = v102 + 1;
      if ((unint64_t)(v102 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v104 = v160 - (unsigned char *)v158;
      if ((v160 - (unsigned char *)v158) >> 2 > v103) {
        unint64_t v103 = v104 >> 2;
      }
      if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v105 = v103;
      }
      if (v105)
      {
        unsigned int v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v160, v105);
        uint64_t v101 = (char *)v158;
        char v99 = v159;
      }
      else
      {
        unsigned int v106 = 0;
      }
      uint64_t v107 = &v106[8 * v102];
      *(_DWORD *)uint64_t v107 = v97;
      *((_DWORD *)v107 + 1) = v98;
      unsigned int v108 = v107;
      if (v99 != v101)
      {
        do
        {
          uint64_t v109 = *((void *)v99 - 1);
          v99 -= 8;
          *((void *)v108 - 1) = v109;
          v108 -= 8;
        }
        while (v99 != v101);
        uint64_t v101 = (char *)v158;
      }
      uint64_t v100 = v107 + 8;
      int v158 = v108;
      uint64_t v159 = v107 + 8;
      int v160 = &v106[8 * v105];
      if (v101) {
        operator delete(v101);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v159 = v97;
      *((_DWORD *)v99 + 1) = v98;
      uint64_t v100 = v99 + 8;
    }
    uint64_t v159 = v100;
    uint64_t v26 = *a2;
    goto LABEL_129;
  }
LABEL_130:
  if (a7)
  {
    unint64_t v110 = a11[1];
    if (v110 >= a11[2])
    {
      uint64_t v111 = std::vector<std::vector<kaldi::ChosenArc>>::__push_back_slow_path<std::vector<kaldi::ChosenArc> const&>(a11, &v172);
    }
    else
    {
      std::vector<std::vector<kaldi::ChosenArc>>::__construct_one_at_end[abi:ne180100]<std::vector<kaldi::ChosenArc> const&>((uint64_t)a11, &v172);
      uint64_t v111 = v110 + 24;
    }
    a11[1] = v111;
  }
  if (*(unsigned char *)(a1 + 4)) {
    kaldi::quasar::WordConf::ProcessRankInfo(a12, *(_DWORD *)(a14 + 4), (uint64_t *)&v164, (uint64_t *)&__p, (uint64_t *)&v158, a13);
  }
  unint64_t v112 = 126 - 2 * __clz(((char *)v167 - (char *)v166) >> 3);
  if (v167 == v166) {
    uint64_t v113 = 0;
  }
  else {
    uint64_t v113 = v112;
  }
  std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,false>((uint64_t)v166, v167, (uint64_t)&v157, v113, 1);
  unint64_t v114 = 126 - 2 * __clz(((char *)v170 - (char *)v169) >> 3);
  if (v170 == v169) {
    uint64_t v115 = 0;
  }
  else {
    uint64_t v115 = v114;
  }
  std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,false>((uint64_t)v169, v170, (uint64_t)&v157, v115, 1);
  if (v167 != v166)
  {
    unint64_t v116 = ((char *)v167 - (char *)v166) >> 3;
    uint64_t v117 = *(void *)(a13 + 168);
    uint64_t v118 = v166 + 1;
    int v119 = *(_DWORD *)v166;
    uint64_t v120 = *(void *)(a12 + 168);
    if (v116 <= 1) {
      unint64_t v116 = 1;
    }
    do
    {
      *(float *)(v117 + 92) = *v118 + *(float *)(v117 + 92);
      if (*((_DWORD *)v118 - 1) == v119)
      {
        *(float *)(v120 + 92) = *v118 + *(float *)(v120 + 92);
        *(_DWORD *)(a12 + 148) = v119;
      }
      v118 += 2;
      --v116;
    }
    while (v116);
  }
  if (v170 != v169)
  {
    unint64_t v121 = ((char *)v170 - (char *)v169) >> 3;
    uint64_t v122 = *(void *)(a13 + 168);
    unint64_t v123 = v169 + 1;
    int v124 = *(_DWORD *)v169;
    uint64_t v125 = *(void *)(a12 + 168);
    if (v121 <= 1) {
      unint64_t v121 = 1;
    }
    do
    {
      *(float *)(v122 + 100) = *v123 + *(float *)(v122 + 100);
      if (*((_DWORD *)v123 - 1) == v124)
      {
        *(float *)(v125 + 100) = *v123 + *(float *)(v125 + 100);
        *(_DWORD *)(a12 + 152) = v124;
      }
      v123 += 2;
      --v121;
    }
    while (v121);
  }
  *(_DWORD *)(a12 + 144) = *(_DWORD *)(a3 + 4);
  MEMORY[0x1B3EA7B20](a12 + 96, "");
  MEMORY[0x1B3EA7B20](a12 + 72, "");
  if (v170 != v169)
  {
    unint64_t v157 = *(int *)v169;
    if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a4, &v157))
    {
      unint64_t v156 = *(int *)v169;
      unsigned int v126 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a4, &v156);
      if (*((char *)v126 + 47) < 0) {
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v126[3], v126[4]);
      }
      else {
        std::string __str = *(std::string *)((unsigned char *)v126 + 1);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "NULL");
    }
    std::string::operator=((std::string *)(a12 + 96), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  if (v167 == v166) {
    goto LABEL_170;
  }
  unint64_t v157 = *(int *)v166;
  if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a4, &v157))
  {
    unint64_t v156 = *(int *)v166;
    unsigned int v127 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a4, &v156);
    if (*((char *)v127 + 47) < 0) {
      std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v127[3], v127[4]);
    }
    else {
      std::string __str = *(std::string *)((unsigned char *)v127 + 1);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "NULL");
  }
  std::string::operator=((std::string *)(a12 + 72), &__str);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_170:
    if (a7) {
      goto LABEL_171;
    }
LABEL_174:
    float v129 = **a5;
    goto LABEL_176;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if ((a7 & 1) == 0) {
    goto LABEL_174;
  }
LABEL_171:
  if (*(_DWORD *)(a14 + 4))
  {
    uint64_t v128 = *a8;
    *a8 = v128 + 1;
    float v129 = (*a5)[v128];
    ++*a9;
  }
  else
  {
    float v129 = 1.0;
  }
LABEL_176:
  int v131 = v169;
  unsigned int v130 = v170;
  uint64_t v133 = v166;
  uint64_t v132 = v167;
  long long v134 = *(_OWORD *)(a14 + 48);
  v151[2] = *(_OWORD *)(a14 + 32);
  v152[0] = v134;
  *(_OWORD *)((char *)v152 + 12) = *(_OWORD *)(a14 + 60);
  long long v135 = *(_OWORD *)(a14 + 16);
  v151[0] = *(_OWORD *)a14;
  v151[1] = v135;
  int v154 = 0;
  uint64_t v155 = 0;
  uint64_t v136 = *(const void **)(a14 + 80);
  uint64_t v137 = *(void *)(a14 + 88);
  uint64_t v153 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v153, v136, v137, (v137 - (uint64_t)v136) >> 2);
  kaldi::quasar::WordConf::NormaliseWrdScores(a12, a13, a1, (uint64_t)v151, (float)(unint64_t)(((char *)v130 - (char *)v131) >> 3), (float)(unint64_t)(((char *)v132 - (char *)v133) >> 3), v129);
  if (v153)
  {
    int v154 = v153;
    operator delete(v153);
  }
  __str.__r_.__value_.__r.__words[0] = *(int *)(a3 + 4);
  uint64_t v138 = (const std::string *)std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a4, (unint64_t *)&__str);
  uint64_t v139 = v138;
  uint64_t v140 = a4[3];
  if (!v138 && v140)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Word with ID = ", 15);
    int v145 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)" does not exist in word map. Is a dynamic vocabulary being used?", 64);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__str);
  }
  if (v140)
  {
    std::string::operator=((std::string *)(a12 + 24), v138 + 1);
    if (SHIBYTE(v139[1].__r_.__value_.__r.__words[2]) < 0) {
      unint64_t v141 = v139[1].__r_.__value_.__l.__size_;
    }
    else {
      unint64_t v141 = HIBYTE(v139[1].__r_.__value_.__r.__words[2]);
    }
    *(float *)(*(void *)(a12 + 168) + 376) = (float)v141;
  }
  std::string::operator=((std::string *)a12, a6);
  if (a7)
  {
    uint64_t v142 = *(float **)(a10 + 168);
    float v143 = v142[27];
    float v144 = *(float *)(*(void *)(a12 + 168) + 40) + v142[28];
    v142[32] = v129 + v142[32];
    v142[27] = v143 + 1.0;
    v142[28] = v144;
  }
  if (v158)
  {
    uint64_t v159 = (char *)v158;
    operator delete(v158);
  }
  if (__p)
  {
    uint64_t v162 = (char *)__p;
    operator delete(__p);
  }
  if (v164.__r_.__value_.__r.__words[0])
  {
    v164.__r_.__value_.__l.__size_ = v164.__r_.__value_.__r.__words[0];
    operator delete(v164.__r_.__value_.__l.__data_);
  }
  if (v166)
  {
    int v167 = v166;
    operator delete(v166);
  }
  if (v169)
  {
    uint64_t v170 = v169;
    operator delete(v169);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v175;
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
}

void sub_1B2284B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a52);
  float v59 = *(void **)(v57 - 216);
  if (v59)
  {
    *(void *)(v57 - 208) = v59;
    operator delete(v59);
  }
  float v60 = *(void **)(v57 - 192);
  if (v60)
  {
    *(void *)(v57 - 184) = v60;
    operator delete(v60);
  }
  a52 = (void *)(v57 - 168);
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  a52 = (void *)(v57 - 144);
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  _Unwind_Resume(a1);
}

float kaldi::quasar::WordConf::UpdatePostNumerators(uint64_t a1, float *a2)
{
  char v3 = *(float **)(a1 + 168);
  v3[9] = v3[9] + 1.0;
  float v4 = exp(a2[9] / 10.0 - a2[8]) + v3[6];
  v3[6] = v4;
  float v5 = exp(-a2[8]) + v3[7];
  v3[7] = v5;
  float v6 = exp(a2[9] / -10.0) + v3[8];
  v3[8] = v6;
  float v7 = v3[3];
  void v3[2] = a2[10] + v3[2];
  float v8 = v3[12];
  v3[13] = a2[15] + v3[13];
  v3[14] = a2[16] + v3[14];
  void v3[3] = a2[12] + v7;
  float v9 = v3[5];
  v3[4] = a2[11] + v3[4];
  void v3[5] = a2[13] + v9;
  float result = a2[14] + v8;
  v3[12] = result;
  return result;
}

float kaldi::quasar::WordConf::ProcessRankInfo(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12 = (float *)a3[1];
  unint64_t v13 = 126 - 2 * __clz(((uint64_t)v12 - *a3) >> 3);
  if (v12 == (float *)*a3) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13;
  }
  std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,false>(*a3, v12, (uint64_t)v37, v14, 1);
  uint64_t v15 = (float *)a4[1];
  unint64_t v16 = 126 - 2 * __clz(((uint64_t)v15 - *a4) >> 3);
  if (v15 == (float *)*a4) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v16;
  }
  std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,false>(*a4, v15, (uint64_t)v37, v17, 1);
  int v18 = (float *)a5[1];
  unint64_t v19 = 126 - 2 * __clz(((uint64_t)v18 - *a5) >> 3);
  if (v18 == (float *)*a5) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,false>(*a5, v18, (uint64_t)v37, v20, 1);
  uint64_t v22 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v23 = 0;
    int v24 = kaldi::g_kaldi_verbose_level;
    do
    {
      if (v24 >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v37, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Rank in list = ", 15);
        float v25 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" Orig = ", 8);
        uint64_t v26 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" sc= ", 5);
        uint64_t v27 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" LOW ", 5);
        long long v28 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" sc= ", 5);
        int v29 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" HIGH ", 6);
        int v30 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" sc= ", 5);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v37);
        int v24 = kaldi::g_kaldi_verbose_level;
        uint64_t v22 = *a3;
      }
      if (*(_DWORD *)(v22 + 8 * v23) == a2) {
        *(float *)(*(void *)(a1 + 168) + 68) = (float)(*(float *)(v22 + 8 * v23 + 4)
      }
                                                         / (float)(unint64_t)(v23 + 1))
                                                 + *(float *)(*(void *)(a1 + 168) + 68);
      uint64_t v31 = *a4;
      if (*(_DWORD *)(*a4 + 8 * v23) == a2) {
        *(float *)(*(void *)(a1 + 168) + 72) = (float)(*(float *)(v31 + 8 * v23 + 4)
      }
                                                         / (float)(unint64_t)(v23 + 1))
                                                 + *(float *)(*(void *)(a1 + 168) + 72);
      uint64_t v32 = *a5;
      unint64_t v33 = v23 + 1;
      float v34 = (float)(unint64_t)(v23 + 1);
      if (*(_DWORD *)(*a5 + 8 * v23) == a2) {
        *(float *)(*(void *)(a1 + 168) + 76) = (float)(*(float *)(v32 + 8 * v23 + 4) / v34)
      }
                                                 + *(float *)(*(void *)(a1 + 168) + 76);
      long long v35 = *(float **)(a6 + 168);
      float v36 = v35[18];
      v35[17] = (float)(*(float *)(v22 + 8 * v23 + 4) / v34) + v35[17];
      v35[18] = v36 + (float)(*(float *)(v31 + 8 * v23 + 4) / v34);
      float result = v35[19] + (float)(*(float *)(v32 + 8 * v23 + 4) / v34);
      v35[19] = result;
      ++v23;
    }
    while (v33 < (a3[1] - v22) >> 3);
  }
  return result;
}

void sub_1B228503C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::quasar::WordConf::NormaliseWrdScores(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6, float a7)
{
  float v7 = *(float **)(a1 + 168);
  float v8 = *(float **)(a2 + 168);
  float v9 = v7[18];
  float v10 = 1.0;
  float v11 = v7[17] / v8[17];
  if (COERCE_UNSIGNED_INT(fabs(v11)) >= 0x7F800000) {
    float v11 = 1.0;
  }
  v7[17] = v11;
  float v12 = v9 / v8[18];
  if ((LODWORD(v12) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v13 = 1.0;
  }
  else {
    float v13 = v12;
  }
  v7[18] = v13;
  if (COERCE_UNSIGNED_INT(fabs(v7[19] / v8[19])) >= 0x7F800000) {
    float v14 = 1.0;
  }
  else {
    float v14 = v7[19] / v8[19];
  }
  float v15 = vabds_f32(v11, v13);
  int v16 = fabs(v11 - v13);
  float v17 = 0.0;
  if (v16 >= 2139095040) {
    float v15 = 0.0;
  }
  v7[19] = v14;
  v7[20] = v15;
  float v18 = v11 - v14;
  float v19 = vabds_f32(v11, v14);
  if ((LODWORD(v18) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v19 = 0.0;
  }
  v7[21] = v19;
  if (COERCE_UNSIGNED_INT(fabs(v7[25] / v8[25])) >= 0x7F800000) {
    float v20 = 1.0;
  }
  else {
    float v20 = v7[25] / v8[25];
  }
  v7[25] = v20;
  if (COERCE_UNSIGNED_INT(fabs(v7[23] / v8[23])) >= 0x7F800000) {
    float v21 = 1.0;
  }
  else {
    float v21 = v7[23] / v8[23];
  }
  v7[23] = v21;
  float v22 = v7[3];
  if (COERCE_INT(fabs(v7[2] / v8[2])) >= 2139095040) {
    float v23 = 0.5;
  }
  else {
    float v23 = v7[2] / v8[2];
  }
  v7[2] = v23;
  float v24 = v7[12];
  if (COERCE_UNSIGNED_INT(fabs(v7[13] / v8[13])) >= 0x7F800000) {
    float v25 = 0.5;
  }
  else {
    float v25 = v7[13] / v8[13];
  }
  v7[13] = v25;
  if (COERCE_UNSIGNED_INT(fabs(v7[14] / v8[14])) >= 0x7F800000) {
    float v26 = 0.5;
  }
  else {
    float v26 = v7[14] / v8[14];
  }
  v7[14] = v26;
  if (COERCE_UNSIGNED_INT(fabs(v22 / v8[3])) >= 0x7F800000) {
    float v27 = 1.0;
  }
  else {
    float v27 = v22 / v8[3];
  }
  v7[3] = v27;
  float v28 = v7[4];
  float v29 = v7[5];
  if (COERCE_INT(fabs(v28 / v8[4])) < 2139095040) {
    float v17 = v28 / v8[4];
  }
  v7[4] = v17;
  if (COERCE_INT(fabs(v29 / v8[5])) >= 2139095040) {
    float v30 = 0.5;
  }
  else {
    float v30 = v29 / v8[5];
  }
  void v7[5] = v30;
  float v31 = v7[7];
  if (COERCE_UNSIGNED_INT(fabs(v7[6] / v8[6])) >= 0x7F800000) {
    float v32 = 0.5;
  }
  else {
    float v32 = v7[6] / v8[6];
  }
  v7[6] = v32;
  if (COERCE_INT(fabs(v31 / v8[7])) >= 2139095040) {
    float v33 = 0.5;
  }
  else {
    float v33 = v31 / v8[7];
  }
  v7[7] = v33;
  float v34 = v7[9];
  if (COERCE_UNSIGNED_INT(fabs(v7[8] / v8[8])) >= 0x7F800000) {
    float v35 = 0.5;
  }
  else {
    float v35 = v7[8] / v8[8];
  }
  unsigned char v7[8] = v35;
  if (COERCE_INT(fabs(v24 / v8[12])) < 2139095040) {
    float v10 = v24 / v8[12];
  }
  void v7[11] = v34 / v7[10];
  v7[12] = v10;
  v7[15] = vabds_f32(v23, v26);
  v7[16] = vabds_f32(v23, v25);
  v7[26] = a5;
  unsigned __int8 v7[24] = a6;
  int v36 = *(_DWORD *)(a4 + 12);
  float v37 = (float)(*(_DWORD *)(a4 + 16) - v36);
  float *v7 = (float)v36 / (float)(1000.0 / *(float *)(a3 + 12));
  float result = v37 / (float)(1000.0 / *(float *)(a3 + 12));
  v7[1] = result;
  v7[22] = a7;
  return result;
}

void kaldi::quasar::ComputeTimeBasedPosterior(int a1, unsigned int a2, uint64_t a3, void *a4, uint64_t a5)
{
  LODWORD(v8) = a1;
  int v9 = *(_DWORD *)(a5 + 12);
  BOOL v10 = __OFSUB__(a1, v9);
  int v11 = a1 - v9;
  if ((v11 < 0) ^ v10 | (v11 == 0)) {
    int v12 = 0;
  }
  else {
    int v12 = v11;
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Recomputing TBP on Ref Interval ", 32);
    float v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" - ", 3);
    float v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" for arc on ", 12);
    float v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" - ", 3);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31);
  }
  float v16 = 0.0;
  float v17 = 0.0;
  if (v8 < a2)
  {
    unint64_t v8 = (int)v8;
    do
    {
      LODWORD(v31[0]) = v8;
      float v18 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a4, (int *)v31);
      if (v18)
      {
        if (v8 < *(int *)(a5 + 12) || v8 > *(int *)(a5 + 16))
        {
          for (uint64_t i = v18[5]; i; uint64_t i = *(void *)i)
            float v17 = v17 + *(float *)(i + 20);
        }
        else
        {
          uint64_t v21 = v12;
          uint64_t v22 = *(void *)(a5 + 80);
          if (v12 < (unint64_t)((*(void *)(a5 + 88) - v22) >> 2))
          {
            ++v12;
            uint64_t v23 = v18[5];
            if (v23)
            {
              int v24 = *(_DWORD *)(v22 + 4 * v21);
              do
              {
                if (*(_DWORD *)(v23 + 16) == v24) {
                  float v25 = *(float *)(v23 + 20);
                }
                else {
                  float v25 = -0.0;
                }
                float v16 = v16 + v25;
                float v17 = v17 + *(float *)(v23 + 20);
                uint64_t v23 = *(void *)v23;
              }
              while (v23);
            }
          }
        }
      }
      ++v8;
    }
    while (v8 < (int)a2);
  }
  if (kaldi::g_kaldi_verbose_level <= 2)
  {
    float v28 = v16 / v17;
  }
  else
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Recomputed TBP is ", 18);
    float v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" / ", 3);
    float v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" = ", 3);
    float v28 = v16 / v17;
    float v29 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" post score avg is ", 19);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31);
  }
  float v30 = 1.0;
  if ((LODWORD(v28) & 0x7FFFFFFFu) < 0x7F800000) {
    float v30 = v28;
  }
  *(float *)(a5 + 68) = v30;
}

void sub_1B228559C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ProcessArc(int a1@<W0>, kaldi::SilencePhoneSet *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _DWORD *a5@<X4>, void *a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v72 = *(void *)(a3 + 8);
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  unint64_t v73 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v73, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
  int v69 = 0;
  int v70 = 0;
  uint64_t v71 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v69, v73, (uint64_t)v74, (v74 - (unsigned char *)v73) >> 2);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Compact Lattice Current state=", 30);
    float v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ARC ilabel: ", 13);
    float v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" olabel: ", 9);
    float v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" weight1: ", 10);
    float v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" weight2: ", 10);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Next State=", 11);
      uint64_t v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" duratiouint64_t n = ", 12);
      uint64_t v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" from ", 6);
      uint64_t v23 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" to ", 4);
      int v24 = (void *)std::ostream::operator<<();
      float v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" word is ", 9);
      unint64_t v66 = *(int *)(a3 + 4);
      if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a7, &v66))
      {
        unint64_t v65 = *(int *)(a3 + 4);
        float v26 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a7, &v65);
        if (*((char *)v26 + 47) < 0) {
          std::string::__init_copy_ctor_external(&v67, (const std::string::value_type *)v26[3], v26[4]);
        }
        else {
          std::string v67 = *(std::string *)((unsigned char *)v26 + 1);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v67, "not_in_static_vocab");
      }
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float v27 = &v67;
      }
      else {
        float v27 = (std::string *)v67.__r_.__value_.__r.__words[0];
      }
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v67.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, size);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68);
    }
  }
  float v29 = v69;
  uint64_t v30 = v70 - v69;
  if (v70 == v69)
  {
    int v32 = 0;
  }
  else
  {
    unint64_t v31 = 0;
    int v32 = 0;
    do
    {
      v32 += !kaldi::SilencePhoneSet::isSilencePhone(a2, *(_DWORD *)&v29[4 * v31++]);
      float v29 = v69;
      uint64_t v30 = v70 - v69;
    }
    while (v31 < (v70 - v69) >> 2);
  }
  uint64_t v33 = v30 >> 2;
  if (*(_DWORD *)(a3 + 4)) {
    int v34 = v32;
  }
  else {
    int v34 = v30 >> 2;
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Original Duration Was ", 22);
    float v35 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" without silence it is ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68);
  }
  int v63 = v34;
  uint64_t v36 = *(int *)(a3 + 40);
  uint64_t v37 = *a4;
  int v38 = *(_DWORD *)(*a4 + 4 * v36);
  if (v38 >= 1 && v38 != *(_DWORD *)(v37 + 4 * a1) + v33 && kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Warning - state Time Mismatch - ", 32);
    unint64_t v40 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" and ", 5);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68);
    uint64_t v37 = *a4;
    uint64_t v36 = *(int *)(a3 + 40);
  }
  *(_DWORD *)(v37 + 4 * v36) = *(_DWORD *)(v37 + 4 * a1) + v33;
  unint64_t v41 = *(int *)(v37 + 4 * a1);
  if (v41 >= *(_DWORD *)(v37 + 4 * *(int *)(a3 + 40)))
  {
    float32x2_t v42 = 0;
    float v46 = 0.0;
    float v43 = 2.0;
    float v44 = -2.0;
    double v56 = 1.0;
LABEL_50:
    LODWORD(vkaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 1.0;
    *(void *)&long long v64 = v16;
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"No states in the word posterior computation - this may be because the word has 0 duration (could happen for class LM)", 117);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v68);
      uint64_t v37 = *a4;
    }
    goto LABEL_52;
  }
  float32x2_t v42 = 0;
  *(void *)&long long v16 = 0;
  long long v64 = v16;
  float v43 = 2.0;
  float v44 = -2.0;
  float v45 = 1.0;
  float v46 = 0.0;
  do
  {
    LODWORD(v68[0]) = v41;
    unint64_t v47 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a6, (int *)v68);
    if (v47)
    {
      unint64_t v48 = v47 + 3;
      if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v47 + 3, (int *)&v69[4 * (v41 - *(int *)(*a4 + 4 * a1))]))
      {
        int64_t v49 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v48, (int *)&v69[4 * (v41 - *(int *)(*a4 + 4 * a1))]);
        float v50 = *((float *)v49 + 5);
        float32x2_t v51 = (float32x2_t)v49[3];
      }
      else
      {
        float32x2_t v51 = 0;
        float v50 = 0.0;
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Couldn't find state ", 20);
          uint64_t v53 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" at time ", 9);
          unint64_t v54 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" defaulting posterior to 0, w1=", 31);
          uint64_t v55 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" w2=", 4);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68);
        }
      }
    }
    else
    {
      float32x2_t v51 = 0;
      float v50 = 0.0;
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Time = ", 7);
        unint64_t v52 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" not in state posterior map...", 30);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
      }
    }
    float v46 = v46 + v50;
    float32x2_t v42 = vadd_f32(v42, v51);
    float v45 = v45 * v50;
    if (v50 < v43) {
      float v43 = v50;
    }
    if (v50 > v44) {
      float v44 = v50;
    }
    long long v16 = v64;
    *(float *)&long long v16 = *(float *)&v64 + 1.0;
    long long v64 = v16;
    ++v41;
    uint64_t v37 = *a4;
  }
  while (v41 < *(int *)(*a4 + 4 * *(int *)(a3 + 40)));
  double v56 = v45;
  if (*(float *)&v16 == 0.0) {
    goto LABEL_50;
  }
LABEL_52:
  float v57 = pow(v56, 1.0 / *(float *)&v64);
  int v58 = *(_DWORD *)(a3 + 4);
  int v59 = (*a5)++;
  int v60 = *(_DWORD *)(v37 + 4 * a1);
  *(void *)(a8 + 80) = 0;
  int v61 = *(_DWORD *)(a3 + 40);
  *(void *)(a8 + 88) = 0;
  *(void *)(a8 + 96) = 0;
  *(_DWORD *)a8 = a1;
  *(_DWORD *)(a8 + 4) = v58;
  *(_DWORD *)(a8 + 8) = v59;
  *(_DWORD *)(a8 + 12) = v60;
  *(_DWORD *)(a8 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v60 + v33;
  *(_DWORD *)(a8 + 20) = v63;
  *(_DWORD *)(a8 + 24) = -1;
  *(_DWORD *)(a8 + 28) = v61;
  *(void *)(a8 + 32) = v72;
  *(float *)(a8 + 40) = v46 / *(float *)&v64;
  *(float *)(a8 + 44) = v43;
  *(float *)(a8 + 48) = v44;
  *(float *)(a8 + 52) = v57;
  *(_DWORD *)(a8 + 56) = 1065353216;
  *(float32x2_t *)(a8 + 60) = vdiv_f32(v42, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v64, 0));
  float v62 = v69;
  if ((char **)(a8 + 80) != &v69)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a8 + 80), v69, (uint64_t)v70, (v70 - v69) >> 2);
    float v62 = v69;
  }
  if (v62)
  {
    int v70 = v62;
    operator delete(v62);
  }
  if (v73)
  {
    uint64_t v74 = v73;
    operator delete(v73);
  }
}

void sub_1B2285CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a23);
  float v25 = *(void **)(v23 - 208);
  if (v25)
  {
    *(void *)(v23 - 200) = v25;
    operator delete(v25);
  }
  float v26 = *(void **)(v23 - 176);
  if (v26)
  {
    *(void *)(v23 - 168) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

float kaldi::quasar::ComputeArcOverlap(uint64_t a1, uint64_t a2)
{
  char v2 = *(float **)(a1 + 168);
  float v3 = *v2;
  float v4 = *v2 + v2[1];
  float v5 = *(float **)(a2 + 168);
  float v6 = *v5;
  float v7 = *v5 + v5[1];
  float v8 = v7 - *v5;
  if (v7 > v4) {
    float v8 = v4 - *v5;
  }
  BOOL v9 = v6 > v3;
  if (v6 < v3) {
    float v10 = v7 - v3;
  }
  else {
    float v10 = v8;
  }
  float v11 = v4 - v3;
  if (v9 || v7 < v4) {
    float v13 = v10;
  }
  else {
    float v13 = v11;
  }
  if (v11 <= 0.0) {
    float v11 = 1.0;
  }
  return v13 / v11;
}

void kaldi::quasar::MBRToOneBest(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v7 = 0;
    do
    {
      float v13 = 0;
      uint64_t v14 = 0;
      std::string __p = 0;
      v10[0] = -1;
      int32x2_t v11 = vcvt_s32_f32(*(float32x2_t *)(*a2 + 8 * v7));
      v10[1] = *(_DWORD *)(v4 + 4 * v7);
      unint64_t v8 = a3[1];
      if (v8 >= a3[2])
      {
        uint64_t v9 = std::vector<kaldi::ChosenArc>::__push_back_slow_path<kaldi::ChosenArc const&>(a3, (uint64_t)v10);
      }
      else
      {
        std::vector<kaldi::ChosenArc>::__construct_one_at_end[abi:ne180100]<kaldi::ChosenArc const&>((uint64_t)a3, (uint64_t)v10);
        uint64_t v9 = v8 + 104;
      }
      a3[1] = v9;
      if (__p)
      {
        float v13 = __p;
        operator delete(__p);
      }
      ++v7;
      uint64_t v4 = *a1;
    }
    while (v7 < (a1[1] - *a1) >> 2);
  }
}

void sub_1B2285ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::GenSausageStructFeats(uint64_t a1, const kaldi::quasar::WordConf *a2, _DWORD *a3, kaldi::quasar::WordConf *a4, uint64_t a5, void *a6)
{
  int v12 = (_DWORD *)*((void *)a2 + 21);
  v12[66] = a3[10];
  v12[67] = a3[11];
  v12[68] = a3[12];
  if (!a3[1]) {
    v12[69] = 1065353216;
  }
  kaldi::quasar::WordConf::WordConf(&v51, a4);
  kaldi::quasar::WordConf::WordConf(&v50, a2);
  float v13 = kaldi::quasar::ComputeArcOverlap((uint64_t)&v51, (uint64_t)&v50);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&v50);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&v51);
  uint64_t v14 = *((void *)a2 + 21);
  *(float *)(v14 + 280) = v13;
  uint64_t v15 = *((void *)a4 + 21);
  float v16 = 1000.0 / *(float *)(a1 + 12);
  double v17 = (float)(*(float *)(v15 + 4) * v16);
  double v18 = *(float *)(v14 + 4);
  double v19 = v16;
  if ((v18 + v18) * v19 <= v17)
  {
    *(_DWORD *)(v14 + 308) = 1065353216;
    float v20 = 1000.0 / *(float *)(a1 + 12);
    double v17 = (float)(*(float *)(v15 + 4) * v20);
    double v19 = v20;
  }
  if (v18 * 0.5 * v19 >= v17) {
    *(_DWORD *)(v14 + 312) = 1065353216;
  }
  *(_DWORD *)(v14 + 336) = *(_DWORD *)(a5 + 68);
  v48.__r_.__value_.__r.__words[0] = (int)a3[1];
  if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a6, (unint64_t *)&v48))
  {
    __p.__r_.__value_.__r.__words[0] = (int)a3[1];
    uint64_t v21 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a6, (unint64_t *)&__p);
    if (*((char *)v21 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v49, (const std::string::value_type *)v21[3], v21[4]);
    }
    else {
      std::string v49 = *(std::string *)((unsigned char *)v21 + 1);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "NULL");
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v48, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  }
  else {
    std::string v48 = v49;
  }
  uint64_t v22 = (char *)a4 + 24;
  if (*((char *)a4 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a4 + 3), *((void *)a4 + 4));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v22;
    __p.__r_.__value_.__r.__words[2] = *((void *)a4 + 5);
  }
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v23 = &v48;
  }
  else {
    uint64_t v23 = (std::string *)v48.__r_.__value_.__r.__words[0];
  }
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v48.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v25 = &v49;
    }
    else {
      float v25 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    do
    {
      v25->__r_.__value_.__s.__data_[0] = __tolower(v23->__r_.__value_.__s.__data_[0]);
      float v25 = (std::string *)((char *)v25 + 1);
      uint64_t v23 = (std::string *)((char *)v23 + 1);
      --size;
    }
    while (size);
  }
  if (*((char *)a4 + 47) >= 0)
  {
    uint64_t v26 = *((unsigned __int8 *)a4 + 47);
  }
  else
  {
    uint64_t v22 = (char *)*((void *)a4 + 3);
    uint64_t v26 = *((void *)a4 + 4);
  }
  unsigned __int8 v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v26)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    do
    {
      p_p->__r_.__value_.__s.__data_[0] = __tolower(*v22);
      p_p = (std::string *)((char *)p_p + 1);
      ++v22;
      --v26;
    }
    while (v26);
    unsigned __int8 v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v27 & 0x80u) == 0) {
    float v29 = &__p;
  }
  else {
    float v29 = p_p;
  }
  if ((v27 & 0x80u) == 0) {
    int64_t v30 = v27;
  }
  else {
    int64_t v30 = __p.__r_.__value_.__l.__size_;
  }
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v31 = &v49;
  }
  else {
    unint64_t v31 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v32 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v32 = v49.__r_.__value_.__l.__size_;
  }
  if (v30)
  {
    uint64_t v33 = (char *)v31 + v32;
    if (v32 >= v30)
    {
      int v39 = v29->__r_.__value_.__s.__data_[0];
      int64_t v40 = v32;
      unint64_t v41 = v31;
      do
      {
        int64_t v42 = v40 - v30;
        if (v42 == -1) {
          break;
        }
        float v43 = (char *)memchr(v41, v39, v42 + 1);
        if (!v43) {
          break;
        }
        int v34 = v43;
        if (!memcmp(v43, v29, v30)) {
          goto LABEL_52;
        }
        unint64_t v41 = (std::string *)(v34 + 1);
        int64_t v40 = v33 - (v34 + 1);
      }
      while (v40 >= v30);
    }
    int v34 = (char *)v31 + v32;
LABEL_52:
    if (v34 == v33) {
      uint64_t v35 = -1;
    }
    else {
      uint64_t v35 = v34 - (char *)v31;
    }
    if (v32) {
      goto LABEL_56;
    }
LABEL_62:
    uint64_t v38 = 0;
    goto LABEL_63;
  }
  uint64_t v35 = 0;
  if (!v32) {
    goto LABEL_62;
  }
LABEL_56:
  uint64_t v36 = (char *)v29 + v30;
  if (v30 >= v32)
  {
    int v44 = v31->__r_.__value_.__s.__data_[0];
    float v45 = v29;
    do
    {
      if (v30 - v32 == -1) {
        break;
      }
      float v46 = (char *)memchr(v45, v44, v30 - v32 + 1);
      if (!v46) {
        break;
      }
      uint64_t v37 = v46;
      if (!memcmp(v46, v31, v32)) {
        goto LABEL_58;
      }
      float v45 = (std::string *)(v37 + 1);
      int64_t v30 = v36 - (v37 + 1);
    }
    while (v30 >= v32);
  }
  uint64_t v37 = v36;
LABEL_58:
  uint64_t v38 = v37 - (char *)v29;
  if (v37 == v36) {
    uint64_t v38 = -1;
  }
LABEL_63:
  if (v35 != -1) {
    *(_DWORD *)(*((void *)a2 + 21) + 300) = 1065353216;
  }
  if (v38 != -1) {
    *(_DWORD *)(*((void *)a2 + 21) + 288) = 1065353216;
  }
  if ((v27 & 0x80) != 0) {
    operator delete(p_p);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
}

void sub_1B2286324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ProcessConfusions(uint64_t result, int a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = (uint64_t *)(*a3 + 24 * (int)result);
  uint64_t v5 = *v4;
  float v6 = (float)(unint64_t)(0xF83E0F83E0F83E1 * ((v4[1] - *v4) >> 3));
  uint64_t v7 = *(void *)(*v4 + 264 * a2 + 168);
  *(float *)(v7 + 340) = v6;
  if (result)
  {
    if (*(_DWORD *)(*(void *)(v3 + 24 * (int)result - 24) + 144) == *(_DWORD *)(v5 + 264 * a2 + 152)) {
      *(_DWORD *)(v7 + 344) = 1065353216;
    }
    float v8 = *(float *)(v5 + 264 * a2 + 208);
  }
  else
  {
    *(_DWORD *)(v7 + 344) = 1065353216;
    float v8 = 1.0;
  }
  *(float *)(v7 + 352) = v8;
  if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - v3) >> 3) - 1 == (int)result)
  {
    *(_DWORD *)(v7 + 348) = 1065353216;
    float v9 = 1.0;
  }
  else
  {
    if (*(_DWORD *)(*(void *)(v3 + 24 * (int)result + 24) + 144) == *(_DWORD *)(v5 + 264 * a2 + 148)) {
      *(_DWORD *)(v7 + 348) = 1065353216;
    }
    float v9 = *(float *)(v5 + 264 * a2 + 204);
  }
  *(float *)(v7 + 356) = v9;
  return result;
}

void kaldi::quasar::AlignOneBestWithSausages(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6 = *a3;
  if (a3[1] == *a3) {
    return;
  }
  uint64_t v7 = a3;
  float v8 = a2;
  int v9 = 0;
  unint64_t v10 = 0;
  uint64_t v121 = a6 + 16;
  do
  {
    int v127 = *(_DWORD *)(v6 + 4 * v10);
    uint64_t v145 = 0;
    uint64_t v146 = 0;
    uint64_t v147 = 0;
    uint64_t v142 = 0;
    float v143 = 0;
    uint64_t v144 = 0;
    uint64_t v11 = *v8;
    if (0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3) <= v9)
    {
      int v9 = -1;
      goto LABEL_145;
    }
    unint64_t v122 = v10;
    char v12 = 0;
    unint64_t v13 = v9;
    int v9 = -1;
    do
    {
      std::string __p = 0;
      uint64_t v139 = 0;
      uint64_t v140 = 0;
      uint64_t v14 = *(void *)(v11 + 24 * v13);
      if (*(void *)(v11 + 24 * v13 + 8) == v14)
      {
LABEL_11:
        if (v12) {
          goto LABEL_136;
        }
        std::vector<std::pair<int,float>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,float> const*>,std::__wrap_iter<std::pair<int,float> const*>>((uint64_t)&v142, v143, *(uint64_t **)(*a1 + 24 * v13), *(uint64_t **)(*a1 + 24 * v13 + 8), (uint64_t)(*(void *)(*a1 + 24 * v13 + 8) - *(void *)(*a1 + 24 * v13)) >> 3);
        std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>,std::__wrap_iter<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>>(&v145, v146, *(void *)(*v8 + 24 * v13), *(void *)(*v8 + 24 * v13 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*v8 + 24 * v13 + 8) - *(void *)(*v8 + 24 * v13)) >> 3));
        char v12 = 0;
        goto LABEL_137;
      }
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      float v17 = -100.0;
      uint64_t v18 = 4;
      while (1)
      {
        double v19 = (uint64_t **)(*a1 + 24 * v13);
        if (*(_DWORD *)(v14 + v15) == v127) {
          break;
        }
        float v20 = *(float *)((char *)*v19 + v18);
        if (v20 > v17)
        {
          uint64_t v21 = v14 + v15;
          uint64_t v136 = *(void ***)(v14 + v15 + 8);
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v137, v14 + v15 + 16);
          int v141 = *(_DWORD *)(v21 + 48);
          uint64_t v11 = *v8;
          float v17 = v20;
        }
        ++v16;
        uint64_t v14 = *(void *)(v11 + 24 * v13);
        v15 += 56;
        v18 += 8;
        if (v16 >= 0x6DB6DB6DB6DB6DB7 * ((*(void *)(v11 + 24 * v13 + 8) - v14) >> 3)) {
          goto LABEL_11;
        }
      }
      unint64_t v22 = a4[1];
      if (v22 >= a4[2])
      {
        uint64_t v23 = std::vector<std::vector<std::pair<int,float>>>::__push_back_slow_path<std::vector<std::pair<int,float>> const&>(a4, v19);
      }
      else
      {
        std::vector<std::vector<std::pair<int,float>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<int,float>> const&>((uint64_t)a4, v19);
        uint64_t v23 = v22 + 24;
      }
      a4[1] = v23;
      v135[0] = 0;
      v135[1] = 0;
      long long v134 = (uint64_t *)v135;
      float v25 = v142;
      int v24 = v143;
      if (v143 == v142) {
        goto LABEL_67;
      }
      uint64_t v132 = 0;
      uint64_t v133 = 0;
      int v131 = &v132;
      uint64_t v27 = *(void *)(v23 - 24);
      uint64_t v26 = *(void *)(v23 - 16);
      if (v27 != v26)
      {
        do
        {
          int v28 = *(_DWORD *)(v27 + 4);
          float v129 = (uint64_t *)v27;
          *((_DWORD *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v131, (int *)v27, (uint64_t)&std::piecewise_construct, (unsigned int **)&v129)+ 8) = v28;
          v27 += 8;
        }
        while (v27 != v26);
        float v25 = v142;
        int v24 = v143;
      }
      while (v25 != v24)
      {
        float v29 = v132;
        if (!v132) {
          goto LABEL_30;
        }
        int v30 = *(_DWORD *)v25;
        unint64_t v31 = (float *)&v132;
        do
        {
          int64_t v32 = v29;
          uint64_t v33 = v31;
          int v34 = *((_DWORD *)v29 + 7);
          if (v34 >= v30) {
            unint64_t v31 = v29;
          }
          else {
            v29 += 2;
          }
          float v29 = *(float **)v29;
        }
        while (v29);
        if (v31 == (float *)&v132) {
          goto LABEL_30;
        }
        if (v34 < v30) {
          int64_t v32 = v33;
        }
        if (v30 >= *((_DWORD *)v32 + 7))
        {
          float v48 = *((float *)v25 + 1);
          if (v31[8] >= v48) {
            goto LABEL_50;
          }
          float v129 = v25;
          *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v131, (int *)v25, (uint64_t)&std::piecewise_construct, (unsigned int **)&v129)+ 8) = v48;
          int v49 = *((_DWORD *)v25 + 1);
          float v129 = v25;
          std::string v50 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v134, (int *)v25, (uint64_t)&std::piecewise_construct, (unsigned int **)&v129);
        }
        else
        {
LABEL_30:
          uint64_t v35 = a4[1];
          uint64_t v38 = *(uint64_t **)(v35 - 16);
          uint64_t v37 = (void **)(v35 - 16);
          uint64_t v36 = v38;
          unint64_t v39 = (unint64_t)v37[1];
          if ((unint64_t)v38 >= v39)
          {
            unint64_t v41 = v37 - 1;
            uint64_t v42 = (uint64_t)*(v37 - 1);
            uint64_t v43 = ((uint64_t)v36 - v42) >> 3;
            if ((unint64_t)(v43 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v44 = v39 - v42;
            uint64_t v45 = v44 >> 2;
            if (v44 >> 2 <= (unint64_t)(v43 + 1)) {
              uint64_t v45 = v43 + 1;
            }
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v45;
            }
            if (v46) {
              unint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v37 + 1), v46);
            }
            else {
              unint64_t v47 = 0;
            }
            std::string v51 = (uint64_t *)&v47[8 * v43];
            *std::string v51 = *v25;
            int64_t v40 = v51 + 1;
            unint64_t v52 = (char *)*v37;
            uint64_t v53 = (char *)*v41;
            if (*v37 != *v41)
            {
              do
              {
                uint64_t v54 = *((void *)v52 - 1);
                v52 -= 8;
                *--std::string v51 = v54;
              }
              while (v52 != v53);
              unint64_t v52 = (char *)*v41;
            }
            *unint64_t v41 = v51;
            *uint64_t v37 = v40;
            v37[1] = &v47[8 * v46];
            if (v52) {
              operator delete(v52);
            }
          }
          else
          {
            *uint64_t v36 = *v25;
            int64_t v40 = v36 + 1;
          }
          *uint64_t v37 = v40;
          int v49 = *((_DWORD *)v25 + 1);
          float v129 = v25;
          std::string v50 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v131, (int *)v25, (uint64_t)&std::piecewise_construct, (unsigned int **)&v129);
        }
        *((_DWORD *)v50 + 8) = v49;
LABEL_50:
        ++v25;
      }
      uint64_t v55 = a4[1];
      double v56 = *(int **)(v55 - 24);
      float v57 = *(int **)(v55 - 16);
      if (v56 != v57)
      {
        int v58 = v135[0];
        do
        {
          if (v58)
          {
            int v59 = *v56;
            int v60 = v135;
            int v61 = v58;
            do
            {
              float v62 = v61;
              int v63 = v60;
              int v64 = *((_DWORD *)v61 + 7);
              if (v64 >= v59) {
                int v60 = (void **)v61;
              }
              else {
                ++v61;
              }
              int v61 = (void *)*v61;
            }
            while (v61);
            if (v60 != v135)
            {
              if (v64 < v59) {
                float v62 = v63;
              }
              if (v59 >= *((_DWORD *)v62 + 7)) {
                v56[1] = *((_DWORD *)v60 + 8);
              }
            }
          }
          v56 += 2;
        }
        while (v56 != v57);
      }
      float v143 = v142;
      std::__tree<int>::destroy((uint64_t)&v131, v132);
LABEL_67:
      unint64_t v65 = (uint64_t *)(*a2 + 24 * v13);
      unint64_t v66 = a5[1];
      if (v66 >= a5[2])
      {
        uint64_t v67 = std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__push_back_slow_path<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> const&>(a5, v65);
      }
      else
      {
        std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> const&>((uint64_t)a5, v65);
        uint64_t v67 = v66 + 24;
      }
      a5[1] = v67;
      uint64_t v69 = v145;
      uint64_t v68 = v146;
      if (v146 != v145)
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        int v131 = &v132;
        v130[0] = 0;
        v130[1] = 0;
        float v129 = (uint64_t *)v130;
        uint64_t v71 = *(void *)(v67 - 24);
        uint64_t v70 = *(void *)(v67 - 16);
        if (v71 != v70)
        {
          do
          {
            v148[0] = (_DWORD *)v71;
            uint64_t v72 = std::__tree<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::__map_value_compare<int,std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v131, (int *)v71, (uint64_t)&std::piecewise_construct, v148);
            v72[5] = *(uint64_t **)(v71 + 8);
            uint64_t v73 = v71 + 16;
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v72 + 6), v73);
            *((_DWORD *)v72 + 20) = *(_DWORD *)(v73 + 32);
            uint64_t v71 = v73 + 40;
          }
          while (v71 != v70);
          uint64_t v69 = v145;
          uint64_t v68 = v146;
        }
        while (v69 != v68)
        {
          uint64_t v74 = v132;
          if (!v132) {
            goto LABEL_84;
          }
          int v75 = *(_DWORD *)v69;
          int64_t v76 = &v132;
          do
          {
            unint64_t v77 = (float **)v74;
            int v78 = v76;
            int v79 = *((_DWORD *)v74 + 8);
            std::string::size_type v80 = (float **)(v74 + 2);
            if (v79 >= v75)
            {
              std::string::size_type v80 = v77;
              int64_t v76 = v77;
            }
            uint64_t v74 = *v80;
          }
          while (v74);
          if (v76 == &v132) {
            goto LABEL_84;
          }
          if (v79 < v75) {
            unint64_t v77 = v78;
          }
          if (v75 >= *((_DWORD *)v77 + 8))
          {
            v148[0] = (_DWORD *)v69;
            unint64_t v87 = std::__tree<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::__map_value_compare<int,std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v129, (int *)v69, (uint64_t)&std::piecewise_construct, v148);
            v87[5] = *(uint64_t **)(v69 + 8);
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v87 + 6), v69 + 16);
          }
          else
          {
LABEL_84:
            uint64_t v81 = -1 - 0x5555555555555555 * ((a5[1] - *a5) >> 3);
            uint64_t v82 = *a5 + 24 * v81;
            unint64_t v85 = *(void *)(v82 + 8);
            unint64_t v83 = *(void *)(v82 + 16);
            int v84 = (uint64_t *)(v82 + 8);
            if (v85 >= v83)
            {
              uint64_t v86 = std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>((uint64_t *)(*a5 + 24 * v81), v69);
            }
            else
            {
              std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](v85, v69);
              uint64_t v86 = v85 + 56;
              *int v84 = v85 + 56;
            }
            *int v84 = v86;
            v148[0] = (_DWORD *)v69;
            unint64_t v87 = std::__tree<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::__map_value_compare<int,std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v131, (int *)v69, (uint64_t)&std::piecewise_construct, v148);
            v87[5] = *(uint64_t **)(v69 + 8);
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v87 + 6), v69 + 16);
          }
          *((_DWORD *)v87 + 20) = *(_DWORD *)(v69 + 48);
          v69 += 56;
        }
        uint64_t v88 = a5[1];
        unint64_t v89 = *(int **)(v88 - 24);
        for (uint64_t i = *(int **)(v88 - 16); v89 != i; v89 += 14)
        {
          unint64_t v91 = v135[0];
          if (v135[0])
          {
            int v92 = *v89;
            uint64_t v93 = v135;
            do
            {
              uint64_t v94 = v91;
              uint64_t v95 = v93;
              int v96 = *((_DWORD *)v91 + 7);
              int v97 = v91 + 1;
              if (v96 >= v92)
              {
                int v97 = v94;
                uint64_t v93 = (void **)v94;
              }
              unint64_t v91 = (void *)*v97;
            }
            while (v91);
            if (v93 != v135)
            {
              if (v96 < v92) {
                uint64_t v94 = v95;
              }
              int v98 = v130[0];
              if (v92 >= *((_DWORD *)v94 + 7) && v130[0] != 0)
              {
                uint64_t v100 = v130;
                do
                {
                  uint64_t v101 = v98;
                  uint64_t v102 = v100;
                  int v103 = *((_DWORD *)v98 + 8);
                  uint64_t v104 = v98 + 1;
                  if (v103 >= v92)
                  {
                    uint64_t v104 = v101;
                    uint64_t v100 = (void **)v101;
                  }
                  int v98 = (void *)*v104;
                }
                while (v98);
                if (v100 != v130)
                {
                  if (v103 < v92) {
                    uint64_t v101 = v102;
                  }
                  if (v92 >= *((_DWORD *)v101 + 8))
                  {
                    *((void *)v89 + 1) = v100[5];
                    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v89 + 4), (uint64_t)(v100 + 6));
                    v89[12] = *((_DWORD *)v100 + 20);
                  }
                }
              }
            }
          }
        }
        uint64_t v105 = v145;
        for (uint64_t j = v146; j != v105; j -= 56)
        {
          uint64_t v107 = *(void **)(j - 32);
          if (v107)
          {
            *(void *)(j - 24) = v107;
            operator delete(v107);
          }
        }
        uint64_t v146 = v105;
        std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v129, v130[0]);
        std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v131, v132);
      }
      float v8 = a2;
      uint64_t v108 = *(void *)(*a2 + 24 * v13);
      unint64_t v110 = *(_DWORD **)(a6 + 8);
      unint64_t v109 = *(void *)(a6 + 16);
      if ((unint64_t)v110 >= v109)
      {
        unint64_t v112 = *(_DWORD **)a6;
        uint64_t v113 = ((uint64_t)v110 - *(void *)a6) >> 2;
        unint64_t v114 = v113 + 1;
        if ((unint64_t)(v113 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v115 = v109 - (void)v112;
        if (v115 >> 1 > v114) {
          unint64_t v114 = v115 >> 1;
        }
        if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v116 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v116 = v114;
        }
        if (v116)
        {
          uint64_t v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v121, v116);
          unint64_t v112 = *(_DWORD **)a6;
          unint64_t v110 = *(_DWORD **)(a6 + 8);
        }
        else
        {
          uint64_t v117 = 0;
        }
        uint64_t v118 = &v117[4 * v113];
        *(_DWORD *)uint64_t v118 = *(_DWORD *)(v108 + v15);
        uint64_t v111 = v118 + 4;
        while (v110 != v112)
        {
          int v119 = *--v110;
          *((_DWORD *)v118 - 1) = v119;
          v118 -= 4;
        }
        *(void *)a6 = v118;
        *(void *)(a6 + 8) = v111;
        *(void *)(a6 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = &v117[4 * v116];
        if (v112) {
          operator delete(v112);
        }
      }
      else
      {
        *unint64_t v110 = *(_DWORD *)(v108 + v15);
        uint64_t v111 = v110 + 1;
      }
      *(void *)(a6 + 8) = v111;
      int v9 = v13 + 1;
      std::__tree<int>::destroy((uint64_t)&v134, v135[0]);
LABEL_136:
      char v12 = 1;
LABEL_137:
      if (__p)
      {
        uint64_t v139 = __p;
        operator delete(__p);
      }
      if ((v9 & 0x80000000) == 0) {
        break;
      }
      ++v13;
      uint64_t v11 = *v8;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3));
    uint64_t v7 = a3;
    if (v142)
    {
      float v143 = v142;
      operator delete(v142);
    }
    unint64_t v10 = v122;
LABEL_145:
    uint64_t v136 = (void **)&v145;
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v136);
    ++v10;
    uint64_t v6 = *v7;
  }
  while (v10 < (v7[1] - *v7) >> 2);
}

void sub_1B2286DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  std::__tree<int>::destroy((uint64_t)&a29, a30);
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v37 = *(void **)(v35 - 168);
  if (v37)
  {
    *(void *)(v35 - 160) = v37;
    operator delete(v37);
  }
  a32 = v35 - 144;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AddCandidateToMap(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(&v31, *(void *)(v5 + 24 * v8), *(void *)(v5 + 24 * v8 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v5 + 24 * v8 + 8) - *(void *)(v5 + 24 * v8)) >> 3));
      uint64_t v9 = v31;
      if (v32 != v31)
      {
        unint64_t v10 = 0;
        do
        {
          uint64_t v11 = v9 + 56 * v10;
          float v25 = *(void ***)(v11 + 8);
          uint64_t v26 = *(void *)(v11 + 16);
          int v28 = 0;
          uint64_t v29 = 0;
          std::string __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v11 + 24), *(void *)(v11 + 32), (uint64_t)(*(void *)(v11 + 32) - *(void *)(v11 + 24)) >> 2);
          int v30 = *(_DWORD *)(v9 + 56 * v10 + 48);
          int v24 = v8;
          int v34 = &v24;
          char v12 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a5, &v24, (uint64_t)&std::piecewise_construct, &v34);
          unint64_t v13 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v12 + 3, (int *)(v31 + 56 * v10));
          int v24 = v8;
          int v34 = &v24;
          std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a5, &v24, (uint64_t)&std::piecewise_construct, &v34);
          if (!v13
            && v25 == *(_DWORD *)a2
            && v30 == *(_DWORD *)(a2 + 40)
            && HIDWORD(v25) == *(_DWORD *)(a2 + 4)
            && *(float *)&v26 == *(float *)(a2 + 8)
            && *((float *)&v26 + 1) == *(float *)(a2 + 12)
            && (uint64_t v14 = *(const void **)(a2 + 16), v28 - (unsigned char *)__p == *(void *)(a2 + 24) - (void)v14)
            && !memcmp(__p, v14, v28 - (unsigned char *)__p))
          {
            ++*a4;
            int v24 = v8;
            int v34 = &v24;
            unint64_t v16 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a5, &v24, (uint64_t)&std::piecewise_construct, &v34);
            int v34 = (int *)(v31 + 56 * v10);
            float v17 = std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v16 + 3), v34, (uint64_t)&std::piecewise_construct, &v34);
            *(_OWORD *)(v17 + 3) = *(_OWORD *)a3;
            long long v18 = *(_OWORD *)(a3 + 16);
            long long v19 = *(_OWORD *)(a3 + 32);
            long long v20 = *(_OWORD *)(a3 + 48);
            *(_OWORD *)((char *)v17 + 84) = *(_OWORD *)(a3 + 60);
            *(_OWORD *)(v17 + 9) = v20;
            *(_OWORD *)(v17 + 7) = v19;
            *(_OWORD *)(v17 + 5) = v18;
            if (v17 + 3 != (void *)a3) {
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v17 + 104, *(char **)(a3 + 80), *(void *)(a3 + 88), (uint64_t)(*(void *)(a3 + 88) - *(void *)(a3 + 80)) >> 2);
            }
            char v15 = 0;
            unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v32 - v31) >> 3);
          }
          else
          {
            char v15 = 1;
          }
          if (__p)
          {
            int v28 = __p;
            operator delete(__p);
          }
          if ((v15 & 1) == 0) {
            break;
          }
          ++v10;
          uint64_t v9 = v31;
        }
        while (v10 < 0x6DB6DB6DB6DB6DB7 * ((v32 - v31) >> 3));
      }
      float v25 = (void **)&v31;
      std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v25);
      ++v8;
      uint64_t v5 = *a1;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  }
}

void sub_1B2287198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  a14 = &a20;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeGenerateConfidenceSausagesOnline(uint64_t a1, kaldi::SilencePhoneSet *a2, const kaldi::TransitionModel *a3, const fst::SymbolTable *a4, uint64_t a5, void *a6, uint64_t a7, void *a8, void *a9, void *a10, const kaldi::quasar::WordConf *a11, const kaldi::quasar::WordConf *a12, const kaldi::quasar::WordConf *a13, int a14, unsigned int a15)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v367, 3);
    long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v367, (uint64_t)"Utterance ID is ", 16);
    int v19 = *(char *)(a1 + 23);
    if (v19 >= 0) {
      long long v20 = (const std::string::value_type *)a1;
    }
    else {
      long long v20 = *(const std::string::value_type **)a1;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v367);
  }
  kaldi::MinimumBayesRisk::MinimumBayesRisk(v367, a7, *(unsigned __int8 *)(a5 + 1), a15, 0xFFFFFFFFLL);
  v365 = 0;
  v364 = 0;
  uint64_t v366 = 0;
  std::vector<int>::size_type v22 = (int)((uint64_t)(*(void *)(*(void *)(a7 + 8) + 72) - *(void *)(*(void *)(a7 + 8) + 64)) >> 3);
  LODWORD(__x.__r_.__value_.__l.__data_) = 0;
  std::vector<int>::vector(&v363, v22, (const std::vector<int>::value_type *)&__x);
  memset(v362, 0, sizeof(v362));
  std::vector<std::vector<std::pair<int,float>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(v362, v369, v370, 0xAAAAAAAAAAAAAAABLL * (v370 - v369));
  uint64_t v360 = 0;
  uint64_t v359 = 0;
  uint64_t v361 = 0;
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>(&v359, v371, v372, 0xAAAAAAAAAAAAAAABLL * (v372 - v371));
  std::unordered_map<unsigned long,short>::unordered_map((uint64_t)v358, (uint64_t)&v373);
  v356 = 0;
  uint64_t v355 = 0;
  unint64_t v357 = 0;
  memset(v353, 0, sizeof(v353));
  int v354 = 1065353216;
  v351 = 0;
  v350 = 0;
  uint64_t v352 = 0;
  v348 = 0;
  v347 = 0;
  uint64_t v349 = 0;
  kaldi::quasar::AlignOneBestWithSausages(v362, &v359, v368, (uint64_t *)&v350, (uint64_t *)&v347, (uint64_t)&v364);
  kaldi::quasar::MBRToOneBest((uint64_t *)&v364, v374, v346);
  std::vector<std::vector<std::pair<int,float>>>::__assign_with_size[abi:ne180100]<std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(v362, v350, v351, 0xAAAAAAAAAAAAAAABLL * (v351 - v350));
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__assign_with_size[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>((uint64_t)&v359, v347, v348, 0xAAAAAAAAAAAAAAABLL * (v348 - v347));
  int v345 = 0;
  int v23 = 0;
  if (v360 != v359)
  {
    uint64_t v24 = 0;
    unint64_t v25 = (v360 - v359) / 24;
    if (v25 <= 1) {
      unint64_t v25 = 1;
    }
    do
    {
      uint64_t v26 = *(int **)(v359 + 24 * v24);
      uint64_t v27 = *(void *)(v359 + 24 * v24 + 8) - (void)v26;
      if (v27)
      {
        unint64_t v28 = v27 / 56;
        if (v28 <= 1) {
          unint64_t v28 = 1;
        }
        do
        {
          int v29 = *v26;
          v26 += 14;
          int v30 = v29 | a15;
          if (v29) {
            BOOL v31 = 1;
          }
          else {
            BOOL v31 = v30 == 0;
          }
          if (v31) {
            ++v23;
          }
          --v28;
        }
        while (v28);
      }
      ++v24;
    }
    while (v24 != v25);
  }
  int v344 = 0;
  uint64_t v260 = a7;
  uint64_t v261 = a1;
  uint64_t v271 = a5;
  if (((*(void *)(*(void *)(a7 + 8) + 72) - *(void *)(*(void *)(a7 + 8) + 64)) & 0x7FFFFFFF8) != 0)
  {
    v269 = 0;
    std::string::size_type v263 = *(void *)(MEMORY[0x1E4FBA408] + 64);
    std::string::size_type v264 = *MEMORY[0x1E4FBA408];
    std::string::size_type v262 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    do
    {
      v311 = &unk_1F0A3E980;
      unint64_t v314 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(v260);
      uint64_t v32 = *(void **)(v260 + 8);
      uint64_t v33 = v32[8];
      v312 = *(void **)(v33 + 8 * (int)v269);
      __s1 = v32 + 1;
      unint64_t v34 = v314;
      uint64_t v35 = *((void *)v312 + 6);
      if (v314 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)v312 + 7) - v35) >> 4))
      {
        do
        {
          uint64_t v36 = (long long *)(v35 + 48 * v34);
          long long v315 = *v36;
          unint64_t v317 = 0;
          uint64_t v318 = 0;
          v316 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v316, *((const void **)v36 + 2), *((void *)v36 + 3), (uint64_t)(*((void *)v36 + 3) - *((void *)v36 + 2)) >> 2);
          int v319 = *(_DWORD *)(v35 + 48 * v34 + 40);
          kaldi::quasar::ProcessArc((int)v269, a2, (uint64_t)&v315, (uint64_t *)&v363, &v344, a6, a8, (uint64_t)v325);
          uint64_t v37 = v356;
          if ((unint64_t)v356 >= v357)
          {
            uint64_t v41 = std::vector<kaldi::ChosenArc>::__push_back_slow_path<kaldi::ChosenArc const&>(&v355, (uint64_t)v325);
          }
          else
          {
            _OWORD *v356 = v325[0];
            long long v38 = v325[1];
            long long v39 = v325[2];
            long long v40 = v326[0];
            *(_OWORD *)((char *)v37 + 60) = *(_OWORD *)((char *)v326 + 12);
            v37[2] = v39;
            v37[3] = v40;
            v37[1] = v38;
            *((void *)v37 + 11) = 0;
            *((void *)v37 + 12) = 0;
            *((void *)v37 + 10) = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v37 + 10, v327, (uint64_t)v328, (v328 - (unsigned char *)v327) >> 2);
            uint64_t v41 = (uint64_t)v37 + 104;
          }
          v356 = (_OWORD *)v41;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__x);
          uint64_t v42 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"_", 1);
          uint64_t v43 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"_", 1);
          std::ostream::operator<<();
          *(void *)&long long v288 = 0;
          uint64_t v44 = 0x100000000;
          if (!__CFADD__(HIDWORD(v315), DWORD2(v315))) {
            uint64_t v44 = 0;
          }
          uint64_t v45 = v44 | (HIDWORD(v315) + DWORD2(v315));
          unint64_t v46 = (int *)v316;
          if ((void *)v317 != v316)
          {
            unint64_t v47 = (uint64_t)(v317 - (void)v316) >> 2;
            if (v47 <= 1) {
              unint64_t v47 = 1;
            }
            uint64_t v48 = 6967;
            do
            {
              uint64_t v49 = *v46++;
              v45 += v48 * v49;
              v48 *= 7499;
              --v47;
            }
            while (v47);
          }
          std::stringbuf::str();
          std::string v50 = (char *)BYTE7(v305);
          if (SBYTE7(v305) < 0) {
            std::string v50 = (char *)__p[1];
          }
          std::string v51 = __p;
          if (SBYTE7(v305) < 0) {
            std::string v51 = (void **)__p[0];
          }
          for (uint64_t i = 0; v50; --v50)
          {
            uint64_t v53 = *(char *)v51;
            std::string v51 = (void **)((char *)v51 + 1);
            uint64_t i = v53 + 7853 * i;
          }
          if (SBYTE7(v305) < 0) {
            operator delete(__p[0]);
          }
          *(void *)&long long v288 = i + v45;
          __p[0] = &v288;
          if (*((_WORD *)std::__hash_table<std::__hash_value_type<unsigned long,short>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,short>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,short>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,short>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v358, (unint64_t *)&v288, (uint64_t)&std::piecewise_construct, (void **)__p)+ 12) == 1)kaldi::quasar::AddCandidateToMap(&v359, (uint64_t)&v315, (uint64_t)v325, &v345, (uint64_t)v353); {
          __x.__r_.__value_.__r.__words[0] = v264;
          }
          *(std::string::size_type *)((char *)__x.__r_.__value_.__r.__words + *(void *)(v264 - 24)) = v263;
          __x.__r_.__value_.__r.__words[2] = v262;
          v337 = (void *)(MEMORY[0x1E4FBA470] + 16);
          if (v341 < 0) {
            operator delete(v340);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1B3EA8520](&v342);
          if (v327)
          {
            v328 = v327;
            operator delete(v327);
          }
          if (v316)
          {
            unint64_t v317 = (unint64_t)v316;
            operator delete(v316);
          }
          unint64_t v34 = v314 + 1;
          unint64_t v314 = v34;
          uint64_t v35 = *((void *)v312 + 6);
        }
        while (v34 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)v312 + 7) - v35) >> 4));
        uint64_t v32 = *(void **)(v260 + 8);
        uint64_t v33 = v32[8];
      }
      v269 = (kaldi::quasar::WordConf *)((char *)v269 + 1);
    }
    while ((unint64_t)v269 < (int)((unint64_t)(v32[9] - v33) >> 3));
    int v54 = v345;
  }
  else
  {
    int v54 = 0;
  }
  if (v54 < v23)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__x);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Needed to find ", 15);
    v259 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v259, (uint64_t)" actually only found ", 21);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__x);
  }
  uint64_t v335 = 0;
  v333 = 0;
  v332 = 0;
  unint64_t v334 = 0;
  v330 = 0;
  uint64_t v329 = 0;
  unint64_t v331 = 0;
  kaldi::quasar::WordConf::WordConf((kaldi::quasar::WordConf *)v325);
  memset(v324, 0, sizeof(v324));
  if (v365 == v364)
  {
    int v68 = kaldi::g_kaldi_verbose_level;
    goto LABEL_85;
  }
  uint64_t v55 = 0;
  while (1)
  {
    kaldi::quasar::WordConf::WordConf((kaldi::quasar::WordConf *)&v315);
    kaldi::quasar::WordConf::WordConf((kaldi::quasar::WordConf *)&v311);
    LODWORD(__x.__r_.__value_.__l.__data_) = v55;
    *(void *)&long long v288 = &__x;
    double v56 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v353, (int *)&__x, (uint64_t)&std::piecewise_construct, (_DWORD **)&v288);
    *(void *)&long long v288 = (char *)v364 + 4 * v55;
    float v57 = std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v56 + 3), (int *)v288, (uint64_t)&std::piecewise_construct, (_DWORD **)&v288);
    long long v58 = *(_OWORD *)(v57 + 7);
    long long v305 = *(_OWORD *)(v57 + 5);
    long long v306 = v58;
    v307[0] = *(_OWORD *)(v57 + 9);
    *(_OWORD *)((char *)v307 + 12) = *(_OWORD *)((char *)v57 + 84);
    *(_OWORD *)std::string __p = *(_OWORD *)(v57 + 3);
    v309 = 0;
    uint64_t v310 = 0;
    v308 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v308, (const void *)v57[13], v57[14], (uint64_t)(v57[14] - v57[13]) >> 2);
    int v59 = *((_DWORD *)v364 + v55);
    if (HIDWORD(__p[0]))
    {
      if (v59) {
        goto LABEL_63;
      }
    }
    else if (!(v59 | a15))
    {
LABEL_63:
      if (LODWORD(__p[0]) == -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__x);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Couldn't find arc", 17);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__x);
      }
      uint64_t v60 = v346[0];
      uint64_t v303 = 0;
      v301 = 0;
      v302 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v301, v375, v376, (v376 - (uint64_t)v375) >> 2);
      if (*(char *)(a1 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v300, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else {
        std::string v300 = *(std::string *)a1;
      }
      kaldi::quasar::GetCandidateFeatures(a5, &v355, v60 + 104 * v55, a8, (float **)&v301, &v300, 1, (int *)&v335 + 1, &v335, (uint64_t)v325, v324, (uint64_t)&v315, (uint64_t)&v311, (uint64_t)__p);
      if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v300.__r_.__value_.__l.__data_);
      }
      if (v301)
      {
        v302 = v301;
        operator delete(v301);
      }
      int v61 = v333;
      if ((unint64_t)v333 >= v334)
      {
        float v62 = (std::string *)std::vector<kaldi::quasar::WordConf>::__push_back_slow_path<kaldi::quasar::WordConf const&>((uint64_t *)&v332, (const kaldi::quasar::WordConf *)&v315);
      }
      else
      {
        kaldi::quasar::WordConf::WordConf(v333, (const kaldi::quasar::WordConf *)&v315);
        float v62 = v61 + 11;
      }
      v333 = v62;
      int v63 = v330;
      if ((unint64_t)v330 >= v331)
      {
        uint64_t v67 = std::vector<kaldi::ChosenArc>::__push_back_slow_path<kaldi::ChosenArc const&>(&v329, (uint64_t)__p);
      }
      else
      {
        _OWORD *v330 = *(_OWORD *)__p;
        long long v64 = v305;
        long long v65 = v306;
        long long v66 = v307[0];
        *(_OWORD *)((char *)v63 + 60) = *(_OWORD *)((char *)v307 + 12);
        v63[2] = v65;
        v63[3] = v66;
        v63[1] = v64;
        *((void *)v63 + 11) = 0;
        *((void *)v63 + 12) = 0;
        *((void *)v63 + 10) = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v63 + 10, v308, (uint64_t)v309, (v309 - (unsigned char *)v308) >> 2);
        uint64_t v67 = (uint64_t)v63 + 104;
      }
      v330 = (_OWORD *)v67;
    }
    if (v308)
    {
      v309 = v308;
      operator delete(v308);
    }
    kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&v311);
    kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&v315);
    if (++v55 >= (unint64_t)((v365 - (unsigned char *)v364) >> 2))
    {
      int v68 = kaldi::g_kaldi_verbose_level;
      if (v335 != HIDWORD(v335) && kaldi::g_kaldi_verbose_level > -2)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__x);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Warning: MISMATCH BETWEEN LENGTH OF 1-BEST and LENGTH OF CONFIDENCE VECTOR", 74);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__x);
        int v68 = kaldi::g_kaldi_verbose_level;
      }
LABEL_85:
      if (v68 >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Finished generating 1-best word-level confidence features for ", 62);
        uint64_t v69 = (void *)std::ostream::operator<<();
        uint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" words in utterance ", 20);
        int v71 = *(char *)(a1 + 23);
        if (v71 >= 0) {
          uint64_t v72 = a1;
        }
        else {
          uint64_t v72 = *(void *)a1;
        }
        if (v71 >= 0) {
          uint64_t v73 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          uint64_t v73 = *(void *)(a1 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, v72, v73);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
      }
      uint64_t v74 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a9, (unsigned __int8 *)a1);
      int v75 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a10, (unsigned __int8 *)a1);
      kaldi::quasar::WordConf::NormaliseUttScores((uint64_t)v325, (float *)v74 + 10, (float *)v75 + 10);
      v298 = 0;
      uint64_t v297 = 0;
      unint64_t v299 = 0;
      int v78 = v332;
      if (v333 == v332)
      {
        uint64_t v145 = 0;
        uint64_t v144 = 0;
      }
      else
      {
        unint64_t v79 = 0;
        do
        {
          uint64_t v272 = 0;
          v273 = 0;
          unint64_t v274 = 0;
          v295 = 0;
          v294 = 0;
          v296 = 0;
          kaldi::quasar::ComputeTimeBasedPosterior((int)(float)(*(float *)v78[11 * v79 + 7].__r_.__value_.__l.__data_ * (float)(1000.0 / *(float *)(a5 + 12))), (int)(float)((float)(1000.0 / *(float *)(a5 + 12))* (float)(*(float *)v78[11 * v79 + 7].__r_.__value_.__l.__data_+ *(float *)(v78[11 * v79 + 7].__r_.__value_.__r.__words[0] + 4))), v76, a6, v329 + 104 * v79);
          kaldi::quasar::WordConf::AddUttFeatures((uint64_t)&v332[11 * v79], (uint64_t)v325);
          std::string::size_type v80 = (_DWORD *)(v329 + 104 * v79);
          uint64_t v81 = &v332[11 * v79];
          uint64_t data = v81[7].__r_.__value_.__l.__data_;
          data[66] = v80[10];
          data[67] = v80[11];
          data[68] = v80[12];
          data[82] = 1118044160;
          int v83 = v80[17];
          LODWORD(v81[8].__r_.__value_.__r.__words[1]) = v83;
          data[84] = v83;
          v292 = 0;
          v291 = 0;
          v293 = 0;
          long long v288 = 0u;
          *(_OWORD *)v289 = 0u;
          int v290 = 1065353216;
          *(_OWORD *)__srlong long c = 0u;
          long long v286 = 0u;
          int v287 = 1065353216;
          int v84 = (char *)v273;
          if ((unint64_t)v273 >= v274)
          {
            unint64_t v85 = (void *)std::vector<kaldi::quasar::WordConf>::__push_back_slow_path<kaldi::quasar::WordConf const&>(&v272, (const kaldi::quasar::WordConf *)v81);
          }
          else
          {
            kaldi::quasar::WordConf::WordConf((std::string *)v273, (const kaldi::quasar::WordConf *)v81);
            unint64_t v85 = v84 + 264;
          }
          v273 = v85;
          if (*(void *)(v324[0] + 24 * v79 + 8) != *(void *)(v324[0] + 24 * v79))
          {
            unint64_t v86 = 0;
            do
            {
              LODWORD(__x.__r_.__value_.__l.__data_) = v79;
              *(void *)&long long v315 = &__x;
              unint64_t v87 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v353, (int *)&__x, (uint64_t)&std::piecewise_construct, (_DWORD **)&v315);
              uint64_t v88 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v87 + 3, (int *)(*(void *)(v324[0] + 24 * v79) + 104 * v86 + 4));
              if (*(_DWORD *)(*(void *)(v324[0] + 24 * v79) + 104 * v86 + 4) != LODWORD(v332[11 * v79 + 6].__r_.__value_.__l.__data_)
                && *(unsigned char *)(a5 + 2) != 0)
              {
                uint64_t v90 = v88;
                LODWORD(__x.__r_.__value_.__l.__data_) = v79;
                *(void *)&long long v315 = &__x;
                std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v353, (int *)&__x, (uint64_t)&std::piecewise_construct, (_DWORD **)&v315);
                if (v90)
                {
                  long long v91 = *(_OWORD *)(v90 + 7);
                  long long v305 = *(_OWORD *)(v90 + 5);
                  long long v306 = v91;
                  v307[0] = *(_OWORD *)(v90 + 9);
                  *(_OWORD *)((char *)v307 + 12) = *(_OWORD *)((char *)v90 + 84);
                  *(_OWORD *)std::string __p = *(_OWORD *)(v90 + 3);
                  v309 = 0;
                  uint64_t v310 = 0;
                  v308 = 0;
                  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v308, (const void *)v90[13], v90[14], (v90[14] - v90[13]) >> 2);
                  kaldi::quasar::WordConf::WordConf((kaldi::quasar::WordConf *)&v315);
                  kaldi::quasar::WordConf::WordConf((kaldi::quasar::WordConf *)&v311);
                  v283 = 0;
                  v282 = 0;
                  v284 = 0;
                  uint64_t v92 = v362[0] + 24 * v79;
                  uint64_t v94 = *(float **)v92;
                  uint64_t v93 = *(float **)(v92 + 8);
                  if (v94 != v93)
                  {
                    do
                    {
                      if (*(_DWORD *)v94 == *(_DWORD *)(*(void *)(v324[0] + 24 * v79) + 104 * v86 + 4)) {
                        goto LABEL_109;
                      }
                      v94 += 2;
                    }
                    while (v94 != v93);
                    uint64_t v94 = v93;
                  }
LABEL_109:
                  uint64_t v95 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v284, 1uLL);
                  uint64_t v97 = v96;
                  int v98 = v283;
                  char v99 = (float *)v282;
                  *uint64_t v95 = v94[1];
                  uint64_t v100 = (uint64_t)(v95 + 1);
                  uint64_t v101 = (char *)v95;
                  while (v98 != v99)
                  {
                    int v102 = *((_DWORD *)v98-- - 1);
                    *((_DWORD *)v101 - 1) = v102;
                    v101 -= 4;
                  }
                  v282 = v101;
                  v283 = v95 + 1;
                  v284 = &v95[v97];
                  if (v99)
                  {
                    operator delete(v99);
                    uint64_t v101 = (char *)v282;
                  }
                  v283 = (float *)v100;
                  uint64_t v103 = *(void *)(v324[0] + 24 * v79);
                  uint64_t v281 = 0;
                  v280 = 0;
                  v279 = 0;
                  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v279, v101, v100, (v100 - (uint64_t)v101) >> 2);
                  if (*(char *)(v261 + 23) < 0) {
                    std::string::__init_copy_ctor_external(&v278, *(const std::string::value_type **)v261, *(void *)(v261 + 8));
                  }
                  else {
                    std::string v278 = *(std::string *)v261;
                  }
                  kaldi::quasar::GetCandidateFeatures(v271, &v355, v103 + 104 * v86, a8, (float **)&v279, &v278, 0, (int *)&v335 + 1, &v335, (uint64_t)v325, v324, (uint64_t)&v315, (uint64_t)&v311, (uint64_t)__p);
                  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v278.__r_.__value_.__l.__data_);
                  }
                  if (v279)
                  {
                    v280 = v279;
                    operator delete(v279);
                  }
                  *(float *)(v322 + 88) = v94[1];
                  kaldi::quasar::WordConf::AddUttFeatures((uint64_t)&v315, (uint64_t)v325);
                  kaldi::quasar::WordConf::SetOneBestFeatures((uint64_t)&v315, (uint64_t)&v332[11 * v79]);
                  kaldi::quasar::GenSausageStructFeats(v271, (const kaldi::quasar::WordConf *)&v315, (_DWORD *)(*(void *)(v324[0] + 24 * v79) + 104 * v86), (kaldi::quasar::WordConf *)&v332[11 * v79], v329 + 104 * v79, a8);
                  kaldi::quasar::ComputeTimeBasedPosterior((int)(float)(*(float *)v332[11 * v79 + 7].__r_.__value_.__l.__data_* (float)(1000.0 / *(float *)(v271 + 12))), (int)(float)((float)(1000.0 / *(float *)(v271 + 12))* (float)(*(float *)v332[11 * v79 + 7].__r_.__value_.__l.__data_+ *(float *)(v332[11 * v79 + 7].__r_.__value_.__r.__words[0] + 4))), v104, a6, *(void *)(v324[0] + 24 * v79) + 104 * v86);
                  uint64_t v105 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v288, v321);
                  if (v105)
                  {
                    float v106 = *((float *)v105 + 5);
                    uint64_t v107 = *(void *)(v324[0] + 24 * v79);
                    float v108 = *(float *)(v107 + 104 * v86 + 68);
                    if (v106 < v108)
                    {
                      unint64_t v109 = (float *)v291;
                      if (v291 == v292)
                      {
                        uint64_t v111 = (float *)v291;
                      }
                      else
                      {
                        int v110 = *(_DWORD *)(v107 + 104 * v86 + 4);
                        uint64_t v111 = (float *)v291;
                        do
                        {
                          if (*(_DWORD *)v111 == v110 && v111[1] == v106) {
                            goto LABEL_150;
                          }
                          v111 += 2;
                        }
                        while (v111 != v292);
                        uint64_t v111 = v292;
                      }
LABEL_150:
                      if (kaldi::g_kaldi_verbose_level >= 3)
                      {
                        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
                        int v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Candidate Update: ", 18);
                        if ((v320 & 0x80u) == 0) {
                          uint64_t v128 = &v317;
                        }
                        else {
                          uint64_t v128 = (unint64_t *)v317;
                        }
                        if ((v320 & 0x80u) == 0) {
                          uint64_t v129 = v320;
                        }
                        else {
                          uint64_t v129 = v318;
                        }
                        unsigned int v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)v128, v129);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)" from ", 6);
                        v275 = v321;
                        std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)&v288, v321, (uint64_t)&std::piecewise_construct, &v275);
                        int v131 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)" to ", 4);
                        std::ostream::operator<<();
                        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
                        float v108 = *(float *)(*(void *)(v324[0] + 24 * v79) + 104 * v86 + 68);
                      }
                      v109[2 * (((char *)v111 - (char *)v109) >> 3) + 1] = v108;
                      v275 = v321;
                      *((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)&v288, v321, (uint64_t)&std::piecewise_construct, &v275)+ 5) = v108;
                      uint64_t v132 = *(void *)(v324[0] + 24 * v79) + 104 * v86;
                      *(_DWORD *)(v322 + 332) = *(_DWORD *)(v132 + 68);
                      int v323 = *(_DWORD *)(v132 + 68);
                      v275 = v321;
                      uint64_t v133 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__src, v321, (uint64_t)&std::piecewise_construct, &v275);
                      kaldi::quasar::WordConf::operator=(v272 + 264 * *((int *)v133 + 5), (uint64_t)&v315);
                    }
                  }
                  else
                  {
                    if (kaldi::g_kaldi_verbose_level >= 3)
                    {
                      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
                      uint64_t v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Add Candidate: ", 15);
                      if ((v320 & 0x80u) == 0) {
                        unint64_t v114 = &v317;
                      }
                      else {
                        unint64_t v114 = (unint64_t *)v317;
                      }
                      if ((v320 & 0x80u) == 0) {
                        uint64_t v115 = v320;
                      }
                      else {
                        uint64_t v115 = v318;
                      }
                      unint64_t v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)v114, v115);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)" to candidate/confusion set", 27);
                      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
                    }
                    int v117 = v321[0];
                    int v118 = *(_DWORD *)(*(void *)(v324[0] + 24 * v79) + 104 * v86 + 68);
                    int v119 = v292;
                    if (v292 >= (float *)v293)
                    {
                      uint64_t v121 = (float *)v291;
                      uint64_t v122 = ((char *)v292 - (unsigned char *)v291) >> 3;
                      unint64_t v123 = v122 + 1;
                      if ((unint64_t)(v122 + 1) >> 61) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v124 = v293 - (unsigned char *)v291;
                      if ((v293 - (unsigned char *)v291) >> 2 > v123) {
                        unint64_t v123 = v124 >> 2;
                      }
                      if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v125 = v123;
                      }
                      if (v125)
                      {
                        unsigned int v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v293, v125);
                        int v119 = v292;
                        uint64_t v121 = (float *)v291;
                      }
                      else
                      {
                        unsigned int v126 = 0;
                      }
                      long long v134 = (int *)&v126[8 * v122];
                      *long long v134 = v117;
                      v134[1] = v118;
                      long long v135 = v134;
                      if (v119 != v121)
                      {
                        do
                        {
                          uint64_t v136 = *((void *)v119 - 1);
                          v119 -= 2;
                          *((void *)v135 - 1) = v136;
                          v135 -= 2;
                        }
                        while (v119 != v121);
                        uint64_t v121 = (float *)v291;
                      }
                      uint64_t v120 = (float *)(v134 + 2);
                      v291 = v135;
                      v292 = (float *)(v134 + 2);
                      v293 = &v126[8 * v125];
                      if (v121) {
                        operator delete(v121);
                      }
                    }
                    else
                    {
                      float *v292 = *(float *)v321;
                      *((_DWORD *)v119 + 1) = v118;
                      uint64_t v120 = v119 + 2;
                    }
                    v292 = v120;
                    int v137 = *(_DWORD *)(*(void *)(v324[0] + 24 * v79) + 104 * v86 + 68);
                    v275 = v321;
                    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)&v288, v321, (uint64_t)&std::piecewise_construct, &v275)+ 5) = v137;
                    uint64_t v138 = *(void *)(v324[0] + 24 * v79) + 104 * v86;
                    *(_DWORD *)(v322 + 332) = *(_DWORD *)(v138 + 68);
                    int v323 = *(_DWORD *)(v138 + 68);
                    uint64_t v139 = (char *)v273;
                    if ((unint64_t)v273 >= v274)
                    {
                      uint64_t v140 = (void *)std::vector<kaldi::quasar::WordConf>::__push_back_slow_path<kaldi::quasar::WordConf const&>(&v272, (const kaldi::quasar::WordConf *)&v315);
                    }
                    else
                    {
                      kaldi::quasar::WordConf::WordConf((std::string *)v273, (const kaldi::quasar::WordConf *)&v315);
                      uint64_t v140 = v139 + 264;
                    }
                    v273 = v140;
                    uint64_t v141 = v272;
                    v275 = v321;
                    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__src, v321, (uint64_t)&std::piecewise_construct, &v275)+ 5) = 1041204193 * (((unint64_t)v140 - v141) >> 3) - 1;
                  }
                  if (v282)
                  {
                    v283 = (float *)v282;
                    operator delete(v282);
                  }
                  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&v311);
                  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&v315);
                  a5 = v271;
                  if (v308)
                  {
                    v309 = v308;
                    operator delete(v308);
                  }
                }
              }
              ++v86;
            }
            while (v86 < 0x4EC4EC4EC4EC4EC5
                        * ((uint64_t)(*(void *)(v324[0] + 24 * v79 + 8) - *(void *)(v324[0] + 24 * v79)) >> 3));
          }
          uint64_t v142 = v298;
          if ((unint64_t)v298 >= v299)
          {
            uint64_t v143 = std::vector<std::vector<kaldi::quasar::WordConf>>::__push_back_slow_path<std::vector<kaldi::quasar::WordConf> const&>(&v297, &v272);
          }
          else
          {
            void *v298 = 0;
            v142[1] = 0;
            v142[2] = 0;
            std::vector<kaldi::quasar::WordConf>::__init_with_size[abi:ne180100]<kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(v142, v272, (uint64_t)v273, 0xF83E0F83E0F83E1 * (((uint64_t)v273 - v272) >> 3));
            uint64_t v143 = (uint64_t)(v142 + 3);
          }
          v298 = (void *)v143;
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__src);
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v288);
          if (v291)
          {
            v292 = (float *)v291;
            operator delete(v291);
          }
          __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v294;
          std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
          __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v272;
          std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
          ++v79;
          int v78 = v332;
        }
        while (v79 < 0xF83E0F83E0F83E1 * (((char *)v333 - (char *)v332) >> 3));
        uint64_t v144 = v298;
        uint64_t v145 = v297;
      }
      v295 = 0;
      v294 = 0;
      v296 = 0;
      v292 = 0;
      v291 = 0;
      v293 = 0;
      v283 = 0;
      v282 = 0;
      v284 = 0;
      if (v144 == (void *)v145)
      {
LABEL_312:
        uint64_t v241 = v260;
        uint64_t v242 = *(void *)(v260 + 8);
        v277 = (void *)v242;
        ++*(_DWORD *)(v242 + 56);
        v276 = &unk_1F0A46010;
        if (((*(void *)(v242 + 72) - *(void *)(v242 + 64)) & 0x7FFFFFFF8) != 0)
        {
          unint64_t v243 = 0;
          int v244 = -1;
          do
          {
            *(void *)&long long v315 = &unk_1F0A3E980;
            unint64_t v317 = 0;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(v241);
            v245 = *(void **)(v241 + 8);
            uint64_t v246 = v245[8];
            *((void *)&v315 + 1) = *(void *)(v246 + 8 * (int)v243);
            v316 = v245 + 1;
            unint64_t v247 = v317;
            uint64_t v248 = *(void *)(*((void *)&v315 + 1) + 48);
            if (v317 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*((void *)&v315 + 1) + 56) - v248) >> 4))
            {
              uint64_t v241 = v260;
            }
            else
            {
              do
              {
                uint64_t v249 = v248 + 48 * v247;
                *(_OWORD *)&__x.__r_.__value_.__l.__data_ = *(_OWORD *)v249;
                v337 = 0;
                uint64_t v338 = 0;
                __x.__r_.__value_.__r.__words[2] = 0;
                std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__x.__r_.__value_.__r.__words[2], *(const void **)(v249 + 16), *(void *)(v249 + 24), (uint64_t)(*(void *)(v249 + 24) - *(void *)(v249 + 16)) >> 2);
                LODWORD(v339) = *(_DWORD *)(v248 + 48 * v247 + 40);
                if (SHIDWORD(__x.__r_.__value_.__r.__words[0]) > v244) {
                  int v244 = HIDWORD(__x.__r_.__value_.__r.__words[0]);
                }
                if (__x.__r_.__value_.__r.__words[2])
                {
                  v337 = (void *)__x.__r_.__value_.__r.__words[2];
                  operator delete((void *)__x.__r_.__value_.__r.__words[2]);
                }
                unint64_t v247 = v317 + 1;
                unint64_t v317 = v247;
                uint64_t v248 = *(void *)(*((void *)&v315 + 1) + 48);
              }
              while (v247 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*((void *)&v315 + 1) + 56) - v248) >> 4));
              uint64_t v241 = v260;
              v245 = *(void **)(v260 + 8);
              uint64_t v246 = v245[8];
            }
            ++v243;
          }
          while (v243 < (int)((unint64_t)(v245[9] - v246) >> 3));
          if (((v277[9] - v277[8]) & 0x7FFFFFFF8) != 0)
          {
            unint64_t v250 = 0;
            do
            {
              v311 = &unk_1F0A3E980;
              unint64_t v314 = 0;
              fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)&v276);
              v251 = v277;
              uint64_t v252 = v277[8];
              v312 = *(void **)(v252 + 8 * (int)v250);
              __s1 = v277 + 1;
              unint64_t v253 = v314;
              uint64_t v254 = *((void *)v312 + 6);
              if (v314 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)v312 + 7) - v254) >> 4))
              {
                do
                {
                  uint64_t v255 = v254 + 48 * v253;
                  *(_OWORD *)&__x.__r_.__value_.__l.__data_ = *(_OWORD *)v255;
                  v337 = 0;
                  uint64_t v338 = 0;
                  __x.__r_.__value_.__r.__words[2] = 0;
                  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__x.__r_.__value_.__r.__words[2], *(const void **)(v255 + 16), *(void *)(v255 + 24), (uint64_t)(*(void *)(v255 + 24) - *(void *)(v255 + 16)) >> 2);
                  LODWORD(v339) = *(_DWORD *)(v254 + 48 * v253 + 40);
                  if (HIDWORD(__x.__r_.__value_.__r.__words[0]) == a15)
                  {
                    long long v315 = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
                    unint64_t v317 = 0;
                    uint64_t v318 = 0;
                    v316 = 0;
                    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v316, (const void *)__x.__r_.__value_.__r.__words[2], (uint64_t)v337, (int64_t)((int64_t)v337 - __x.__r_.__value_.__r.__words[2]) >> 2);
                    int v319 = v339;
                    DWORD1(v315) = v244 + 1;
                    LODWORD(v315) = v244 + 1;
                    fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&v311, (float *)&v315);
                    unint64_t v256 = v314;
                    uint64_t v257 = *((void *)v312 + 6);
                    v258 = (std::string::size_type *)(v257 + 48 * v314);
                    __x.__r_.__value_.__r.__words[0] = *v258;
                    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&__x.__r_.__value_.__l.__size_, (uint64_t)(v258 + 1));
                    LODWORD(v339) = *(_DWORD *)(v257 + 48 * v256 + 40);
                    if (v316)
                    {
                      unint64_t v317 = (unint64_t)v316;
                      operator delete(v316);
                    }
                  }
                  if (__x.__r_.__value_.__r.__words[2])
                  {
                    v337 = (void *)__x.__r_.__value_.__r.__words[2];
                    operator delete((void *)__x.__r_.__value_.__r.__words[2]);
                  }
                  unint64_t v253 = v314 + 1;
                  unint64_t v314 = v253;
                  uint64_t v254 = *((void *)v312 + 6);
                }
                while (v253 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)v312 + 7) - v254) >> 4));
                v251 = v277;
                uint64_t v252 = v277[8];
              }
              ++v250;
            }
            while (v250 < (int)((unint64_t)(v251[9] - v252) >> 3));
          }
        }
        if (kaldi::g_kaldi_verbose_level > 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Using special symbol for silence = ", 35);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
        }
        fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst();
      }
      unint64_t v146 = 0;
      while (2)
      {
        uint64_t v148 = (int **)(v145 + 24 * v146);
        uint64_t v149 = *v148;
        unint64_t v150 = 0xF83E0F83E0F83E1 * (((char *)v148[1] - (char *)*v148) >> 3);
        uint64_t v151 = (float32x2_t *)*((void *)*v148 + 21);
        v151[42].f32[1] = (float)v150;
        v151[46] = (float32x2_t)0x3F80000000000000;
        if (v150 >= 2)
        {
          float v152 = v151[45].f32[0];
          float v153 = v151[45].f32[1];
          unint64_t v154 = v150 - 1;
          uint64_t v155 = (float *)(v149 + 116);
          float v156 = 0.0;
          float v157 = 1.0;
          unint64_t v158 = v154;
          do
          {
            uint64_t v159 = (float *)*((void *)v155 - 4);
            float v152 = v159[2] + v152;
            v151[45].f32[0] = v152;
            float v160 = v159[3];
            if (v160 > v156)
            {
              v151[46].f32[0] = v160;
              float v156 = v160;
            }
            float v161 = v159[4];
            if (v161 < v157)
            {
              v151[46].f32[1] = v161;
              float v157 = v161;
            }
            float v153 = *v155 + v153;
            v151[45].f32[1] = v153;
            v155 += 66;
            --v158;
          }
          while (v158);
          *(float *)v77.i32 = (float)v154;
          int32x2_t v77 = (int32x2_t)vdiv_f32(v151[45], (float32x2_t)vdup_lane_s32(v77, 0));
          v151[45] = (float32x2_t)v77;
        }
        if (v149[36] <= 499999999) {
          float v162 = 0.0;
        }
        else {
          float v162 = 1.0;
        }
        v151[48].f32[1] = v162;
        v151[50].i32[0] = 1065353216;
        if (*(unsigned char *)v271)
        {
          kaldi::quasar::WordConf::ApplyModel((kaldi::quasar::WordConf *)v149, a11);
          if (kaldi::g_kaldi_verbose_level >= 3)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Confidence score @ word ", 24);
            uint64_t v163 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)" is ", 4);
            std::string v164 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)" MBR SCORE IS ", 14);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
          }
        }
        else
        {
          if (*(unsigned char *)(v271 + 7)) {
            __int32 v165 = v149[50];
          }
          else {
            __int32 v165 = v151[11].i32[0];
          }
          v149[48] = v165;
        }
        uint64_t v166 = v297;
        int v167 = (uint64_t *)(v297 + 24 * v146);
        uint64_t v169 = *v167;
        uint64_t v168 = v167[1];
        float v170 = *(float *)(v169 + 192);
        char v171 = *(_DWORD *)(v169 + 144) == a15;
        unint64_t v172 = 0xF83E0F83E0F83E1 * ((v168 - v169) >> 3);
        if (v172 < 2)
        {
          float v175 = *(float *)(v169 + 192);
        }
        else
        {
          uint64_t v173 = 456;
          unint64_t v174 = 1;
          float v175 = *(float *)(v169 + 192);
          do
          {
            if (*(unsigned char *)(v271 + 5))
            {
              kaldi::quasar::ProcessConfusions(v146, v174, &v297);
              uint64_t v166 = v297;
            }
            uint64_t v176 = *(void *)(v166 + 24 * v146);
            uint64_t v177 = v176 + v173;
            v178 = *(_DWORD **)(v176 + v173 - 24);
            v178[97] = 0;
            int v179 = *(_DWORD *)(v176 + v173 - 48);
            uint64_t v180 = *(void *)(v176 + 168);
            if (v179 > 499999999)
            {
              *(_DWORD *)(v180 + 396) = 1065353216;
              v178[97] = 1065353216;
            }
            v178[98] = *(_DWORD *)(v180 + 388);
            v178[100] = 0;
            kaldi::quasar::WordConf::ApplyModel((kaldi::quasar::WordConf *)(v177 - 192), a12);
            if (kaldi::g_kaldi_verbose_level >= 3)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Confidence score @ alt word ", 28);
              uint64_t v181 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)" is ", 4);
              v182 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)" MBR SCORE IS ", 14);
              std::ostream::operator<<();
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
            }
            uint64_t v166 = v297;
            v183 = (uint64_t *)(v297 + 24 * v146);
            uint64_t v169 = *v183;
            uint64_t v168 = v183[1];
            float v184 = *(float *)(v169 + v173);
            float v170 = v170 + v184;
            v171 |= *(_DWORD *)(v169 + v173 - 48) == 0;
            if (v184 > v175) {
              float v175 = *(float *)(v169 + v173);
            }
            ++v174;
            unint64_t v172 = 0xF83E0F83E0F83E1 * ((v168 - v169) >> 3);
            v173 += 264;
          }
          while (v174 < v172);
        }
        *(_DWORD *)(*(void *)(v169 + 168) + 404) = 0;
        uint64_t v185 = v168;
        if (v168 != v169)
        {
          uint64_t v186 = 0;
          unint64_t v187 = 0;
          do
          {
            LODWORD(__x.__r_.__value_.__l.__data_) = v146;
            *(void *)&long long v315 = &__x;
            v188 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v353, (int *)&__x, (uint64_t)&std::piecewise_construct, (_DWORD **)&v315);
            *(void *)&long long v315 = *(void *)(v297 + 24 * v146) + v186 + 144;
            v189 = std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v188 + 3), (int *)v315, (uint64_t)&std::piecewise_construct, (_DWORD **)&v315);
            uint64_t v191 = *(void *)(v297 + 24 * v146);
            v192 = (char *)(v191 + v186 + 216);
            if (v192 != (char *)(v189 + 13))
            {
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v192, (char *)v189[13], v189[14], (uint64_t)(v189[14] - v189[13]) >> 2);
              uint64_t v191 = *(void *)(v297 + 24 * v146);
            }
            kaldi::quasar::WordConf::ComputePhonesAndDurations((kaldi::quasar::WordConf *)(v191 + v186), v190, a3, a4);
            uint64_t v166 = v297;
            uint64_t v168 = *(void *)(v297 + 24 * v146);
            if (v187)
            {
              int v193 = kaldi::LevenshteinEditDistance<std::string>((uint64_t *)(v168 + 240), (uint64_t *)(v168 + 240 + v186));
              uint64_t v166 = v297;
              uint64_t v168 = *(void *)(v297 + 24 * v146);
              *(float *)(*(void *)(v168 + v186 + 168) + 404) = (float)v193;
            }
            ++v187;
            uint64_t v185 = *(void *)(v166 + 24 * v146 + 8);
            unint64_t v172 = 0xF83E0F83E0F83E1 * ((v185 - v168) >> 3);
            v186 += 264;
          }
          while (v187 < v172);
        }
        if (v172 < 2)
        {
          *(_DWORD *)(*(void *)(v168 + 168) + 408) = 0;
        }
        else if (v185 != v168)
        {
          unint64_t v194 = 0;
          do
          {
            if (v185 == v168)
            {
              int v197 = 0x7FFFFFFF;
              uint64_t v185 = v168;
              uint64_t v199 = v168;
            }
            else
            {
              v195 = a12;
              unint64_t v196 = 0;
              int v197 = 0x7FFFFFFF;
              uint64_t v198 = 240;
              uint64_t v199 = v168;
              do
              {
                if (v194 != v196)
                {
                  int v200 = kaldi::LevenshteinEditDistance<std::string>((uint64_t *)(v199 + 264 * v194 + 240), (uint64_t *)(v199 + v198));
                  if (v200 < v197) {
                    int v197 = v200;
                  }
                  uint64_t v166 = v297;
                }
                ++v196;
                v201 = (uint64_t *)(v166 + 24 * v146);
                uint64_t v199 = *v201;
                v198 += 264;
              }
              while (v196 < 0xF83E0F83E0F83E1 * ((v201[1] - *v201) >> 3));
              uint64_t v168 = *(void *)(v166 + 24 * v146);
              uint64_t v185 = *(void *)(v166 + 24 * v146 + 8);
              a12 = v195;
            }
            *(float *)(*(void *)(v199 + 264 * v194++ + 168) + 408) = (float)v197;
          }
          while (v194 < 0xF83E0F83E0F83E1 * ((v185 - v168) >> 3));
        }
        float v202 = -1.0;
        if (!(v171 & 1 | (*(unsigned char *)(v271 + 8) == 0)))
        {
          kaldi::quasar::WordConf::WordConf(&__x, *(const kaldi::quasar::WordConf **)(v166 + 24 * v146));
          kaldi::quasar::WordConf::ApplyModel((kaldi::quasar::WordConf *)&__x, a13);
          float v202 = v343;
          if (v343 > v175) {
            float v175 = v343;
          }
          float v170 = v170 + v343;
          kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&__x);
        }
        if (*(unsigned char *)(v271 + 9))
        {
          v203 = v295;
          if (v295 < v296)
          {
            if (v170 == 0.0) {
              float v204 = 0.000001;
            }
            else {
              float v204 = v170;
            }
            float *v295 = v204;
            v205 = v203 + 1;
LABEL_249:
            v207 = v205;
LABEL_279:
            v295 = v207;
            v221 = v283;
            if (v283 >= v284)
            {
              v223 = (float *)v282;
              uint64_t v224 = ((char *)v283 - (unsigned char *)v282) >> 2;
              unint64_t v225 = v224 + 1;
              if ((unint64_t)(v224 + 1) >> 62) {
                goto LABEL_339;
              }
              uint64_t v226 = (char *)v284 - (unsigned char *)v282;
              if (((char *)v284 - (unsigned char *)v282) >> 1 > v225) {
                unint64_t v225 = v226 >> 1;
              }
              if ((unint64_t)v226 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v227 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v227 = v225;
              }
              if (v227)
              {
                v228 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v284, v227);
                v221 = v283;
                v223 = (float *)v282;
              }
              else
              {
                v228 = 0;
              }
              v229 = (float *)&v228[4 * v224];
              float *v229 = v175;
              v222 = v229 + 1;
              while (v221 != v223)
              {
                int v230 = *((_DWORD *)v221-- - 1);
                *((_DWORD *)v229-- - 1) = v230;
              }
              v282 = v229;
              v283 = v222;
              v284 = (float *)&v228[4 * v227];
              if (v223) {
                operator delete(v223);
              }
            }
            else
            {
              float *v283 = v175;
              v222 = v221 + 1;
            }
            v283 = v222;
            v231 = v292;
            if (v292 >= (float *)v293)
            {
              v233 = (float *)v291;
              uint64_t v234 = ((char *)v292 - (unsigned char *)v291) >> 2;
              unint64_t v235 = v234 + 1;
              if ((unint64_t)(v234 + 1) >> 62) {
LABEL_339:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              uint64_t v236 = v293 - (unsigned char *)v291;
              if ((v293 - (unsigned char *)v291) >> 1 > v235) {
                unint64_t v235 = v236 >> 1;
              }
              if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v237 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v237 = v235;
              }
              if (v237)
              {
                v238 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v293, v237);
                v231 = v292;
                v233 = (float *)v291;
              }
              else
              {
                v238 = 0;
              }
              v239 = (float *)&v238[4 * v234];
              float *v239 = v202;
              v232 = v239 + 1;
              while (v231 != v233)
              {
                int v240 = *((_DWORD *)v231-- - 1);
                *((_DWORD *)v239-- - 1) = v240;
              }
              v291 = v239;
              v292 = v232;
              v293 = &v238[4 * v237];
              if (v233) {
                operator delete(v233);
              }
            }
            else
            {
              float *v292 = v202;
              v232 = v231 + 1;
            }
            v292 = v232;
            ++v146;
            uint64_t v145 = v297;
            if (v146 >= 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v298 - v297) >> 3)) {
              goto LABEL_312;
            }
            continue;
          }
          v208 = (float *)v294;
          uint64_t v209 = ((char *)v295 - (unsigned char *)v294) >> 2;
          unint64_t v210 = v209 + 1;
          if ((unint64_t)(v209 + 1) >> 62) {
            goto LABEL_339;
          }
          uint64_t v211 = (char *)v296 - (unsigned char *)v294;
          if (((char *)v296 - (unsigned char *)v294) >> 1 > v210) {
            unint64_t v210 = v211 >> 1;
          }
          if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v212 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v212 = v210;
          }
          if (v212)
          {
            v213 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v296, v212);
            v203 = v295;
            v208 = (float *)v294;
          }
          else
          {
            v213 = 0;
          }
          v217 = (float *)&v213[4 * v209];
          if (v170 == 0.0) {
            float v218 = 0.000001;
          }
          else {
            float v218 = v170;
          }
          float *v217 = v218;
          v207 = v217 + 1;
          while (v203 != v208)
          {
            int v219 = *((_DWORD *)v203-- - 1);
            *((_DWORD *)v217-- - 1) = v219;
          }
        }
        else
        {
          v206 = v295;
          if (v295 < v296)
          {
            float *v295 = 1.0;
            v205 = v206 + 1;
            goto LABEL_249;
          }
          v208 = (float *)v294;
          uint64_t v214 = ((char *)v295 - (unsigned char *)v294) >> 2;
          unint64_t v215 = v214 + 1;
          if ((unint64_t)(v214 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v216 = (char *)v296 - (unsigned char *)v294;
          if (((char *)v296 - (unsigned char *)v294) >> 1 > v215) {
            unint64_t v215 = v216 >> 1;
          }
          if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v212 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v212 = v215;
          }
          if (v212)
          {
            v213 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v296, v212);
            v206 = v295;
            v208 = (float *)v294;
          }
          else
          {
            v213 = 0;
          }
          v217 = (float *)&v213[4 * v214];
          float *v217 = 1.0;
          v207 = v217 + 1;
          while (v206 != v208)
          {
            int v220 = *((_DWORD *)v206-- - 1);
            *((_DWORD *)v217-- - 1) = v220;
          }
        }
        break;
      }
      v294 = v217;
      v295 = v207;
      v296 = (float *)&v213[4 * v212];
      if (v208) {
        operator delete(v208);
      }
      goto LABEL_279;
    }
  }
}

void sub_1B228B0F4()
{
}

void sub_1B228B0FC(_Unwind_Exception *a1)
{
  char v2 = (void *)STACK[0x368];
  if (STACK[0x368])
  {
    STACK[0x370] = (unint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)STACK[0x3D0];
  if (STACK[0x3D0])
  {
    STACK[0x3D8] = (unint64_t)v3;
    operator delete(v3);
  }
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&STACK[0x3F0]);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&STACK[0x4F8]);
  STACK[0x758] = (unint64_t)&STACK[0x600];
  std::vector<std::vector<kaldi::ChosenArc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&STACK[0x618]);
  STACK[0x758] = (unint64_t)&STACK[0x720];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x738];
  std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x878];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x890];
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x8A8];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::~__hash_table((uint64_t)&STACK[0x8C0]);
  STACK[0x758] = (unint64_t)&STACK[0x8E8];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&STACK[0x900]);
  STACK[0x758] = (unint64_t)&STACK[0x928];
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x940];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  uint64_t v4 = (void *)STACK[0x958];
  if (STACK[0x958])
  {
    STACK[0x960] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x970];
  if (STACK[0x970])
  {
    STACK[0x978] = (unint64_t)v5;
    operator delete(v5);
  }
  kaldi::MinimumBayesRisk::~MinimumBayesRisk((kaldi::MinimumBayesRisk *)&STACK[0x988]);
  _Unwind_Resume(a1);
}

void sub_1B228B1CC()
{
}

void sub_1B228B1D4()
{
}

void sub_1B228B1DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1B228B6D0);
}

void sub_1B228B1F8()
{
}

void sub_1B228B20C()
{
  if (STACK[0x760])
  {
    STACK[0x768] = STACK[0x760];
    JUMPOUT(0x1B228B568);
  }
  JUMPOUT(0x1B228B6F8);
}

void sub_1B228B230()
{
}

void sub_1B228B244()
{
}

void sub_1B228B264()
{
}

void sub_1B228B2C4()
{
  uint64_t v0 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1B228B45CLL);
}

void sub_1B228B2D0()
{
}

void sub_1B228B2F0()
{
}

void sub_1B228B300()
{
  uint64_t v0 = (void *)STACK[0x768];
  if (STACK[0x768])
  {
    STACK[0x770] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1B228B750);
}

void sub_1B228B310()
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  uint64_t v0 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1B228B45CLL);
}

void sub_1B228B338()
{
}

void sub_1B228B340()
{
}

void sub_1B228B348()
{
}

void sub_1B228B364()
{
  STACK[0x8F0] = v0;
  uint64_t v1 = (void *)STACK[0x668];
  if (STACK[0x668])
  {
    STACK[0x670] = (unint64_t)v1;
    operator delete(v1);
  }
  char v2 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B228B7D0);
}

void sub_1B228B374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  long long v64 = (void *)STACK[0x400];
  if (STACK[0x400])
  {
    STACK[0x408] = (unint64_t)v64;
    operator delete(v64);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&a36);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ImplToFst(&a43);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ImplToFst(&a45);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ImplToFst(&a47);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ImplToFst(&a54);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ImplToFst(&a58);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&a60);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(&a62);
  STACK[0x758] = (unint64_t)&a64;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  JUMPOUT(0x1B228B718);
}

void sub_1B228B388()
{
  unint64_t v0 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v0;
    operator delete(v0);
  }
  uint64_t v1 = (void *)STACK[0x768];
  if (STACK[0x768])
  {
    STACK[0x770] = (unint64_t)v1;
    operator delete(v1);
  }
  JUMPOUT(0x1B228B750);
}

void sub_1B228B3BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56)
{
  if (__p) {
    operator delete(__p);
  }
  if (a55) {
    operator delete(a55);
  }
  JUMPOUT(0x1B228B6F0);
}

void sub_1B228B3D4()
{
  unint64_t v0 = (void *)STACK[0x760];
  if (STACK[0x760])
  {
    STACK[0x768] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1B228B55CLL);
}

void sub_1B228B3F0()
{
}

void sub_1B228B3F8()
{
  unint64_t v0 = (void *)STACK[0x668];
  if (STACK[0x668])
  {
    STACK[0x670] = (unint64_t)v0;
    operator delete(v0);
  }
  uint64_t v1 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v1;
    operator delete(v1);
  }
  JUMPOUT(0x1B228B7D0);
}

void sub_1B228B400()
{
}

void sub_1B228B40C()
{
}

void sub_1B228B42C()
{
}

void sub_1B228B434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ImplToFst(&a72);
  uint64_t v72 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v72;
    operator delete(v72);
  }
  STACK[0x758] = (unint64_t)&STACK[0x208];
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&STACK[0x380]);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&STACK[0x240]);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&STACK[0x250]);
  JUMPOUT(0x1B228B758);
}

void sub_1B228B444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x508])
  {
    STACK[0x510] = STACK[0x508];
    JUMPOUT(0x1B228B4E8);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ImplToFst(&a72);
  uint64_t v72 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v72;
    operator delete(v72);
  }
  STACK[0x758] = (unint64_t)&STACK[0x208];
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x758]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(&STACK[0x380]);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&STACK[0x240]);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst(&STACK[0x250]);
  JUMPOUT(0x1B228B758);
}

void sub_1B228B44C()
{
  unint64_t v0 = (void *)STACK[0x400];
  if (STACK[0x400])
  {
    STACK[0x408] = (unint64_t)v0;
    operator delete(v0);
  }
  if (STACK[0x508])
  {
    STACK[0x510] = STACK[0x508];
    JUMPOUT(0x1B228B4E8);
  }
  JUMPOUT(0x1B228B718);
}

void sub_1B228B458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  int v54 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v54;
    operator delete(v54);
  }
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&STACK[0x3F0]);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&STACK[0x4F8]);
  uint64_t v55 = (void *)STACK[0x3D0];
  if (STACK[0x3D0])
  {
    STACK[0x3D8] = (unint64_t)v55;
    operator delete(v55);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&STACK[0x2B0]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&STACK[0x2E0]);
  double v56 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v56;
    operator delete(v56);
  }
  STACK[0x758] = (unint64_t)&STACK[0x320];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&a54;
  std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  JUMPOUT(0x1B228B788);
}

void sub_1B228B498()
{
  if (STACK[0x400])
  {
    STACK[0x408] = STACK[0x400];
    JUMPOUT(0x1B228B550);
  }
  JUMPOUT(0x1B228B55CLL);
}

void sub_1B228B4A0()
{
  unint64_t v0 = (void *)STACK[0x770];
  if (STACK[0x770])
  {
    STACK[0x778] = (unint64_t)v0;
    operator delete(v0);
  }
  if (STACK[0x400])
  {
    STACK[0x408] = STACK[0x400];
    JUMPOUT(0x1B228B4D8);
  }
  JUMPOUT(0x1B228B4DCLL);
}

void sub_1B228B4C8()
{
  if (STACK[0x770])
  {
    STACK[0x778] = STACK[0x770];
    JUMPOUT(0x1B228B4D8);
  }
  if (STACK[0x508])
  {
    STACK[0x510] = STACK[0x508];
    JUMPOUT(0x1B228B4E8);
  }
  JUMPOUT(0x1B228B718);
}

void sub_1B228B538()
{
}

void sub_1B228B558()
{
  unint64_t v0 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1B228B6F8);
}

void sub_1B228B570(_Unwind_Exception *a1)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x758]);
  char v2 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v4;
    operator delete(v4);
  }
  STACK[0x758] = (unint64_t)&STACK[0x338];
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x600];
  std::vector<std::vector<kaldi::ChosenArc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&STACK[0x618]);
  STACK[0x758] = (unint64_t)&STACK[0x720];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x738];
  std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x878];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x890];
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x8A8];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::~__hash_table((uint64_t)&STACK[0x8C0]);
  STACK[0x758] = (unint64_t)&STACK[0x8E8];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&STACK[0x900]);
  STACK[0x758] = (unint64_t)&STACK[0x928];
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x940];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  uint64_t v5 = (void *)STACK[0x958];
  if (STACK[0x958])
  {
    STACK[0x960] = (unint64_t)v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)STACK[0x970];
  if (STACK[0x970])
  {
    STACK[0x978] = (unint64_t)v6;
    operator delete(v6);
  }
  kaldi::MinimumBayesRisk::~MinimumBayesRisk((kaldi::MinimumBayesRisk *)&STACK[0x988]);
  _Unwind_Resume(a1);
}

void sub_1B228B584()
{
}

void sub_1B228B5B4(_Unwind_Exception *a1)
{
  char v2 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v4;
    operator delete(v4);
  }
  STACK[0x758] = (unint64_t)&STACK[0x338];
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x600];
  std::vector<std::vector<kaldi::ChosenArc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&STACK[0x618]);
  STACK[0x758] = (unint64_t)&STACK[0x720];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x738];
  std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x878];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x890];
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x8A8];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::~__hash_table((uint64_t)&STACK[0x8C0]);
  STACK[0x758] = (unint64_t)&STACK[0x8E8];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&STACK[0x900]);
  STACK[0x758] = (unint64_t)&STACK[0x928];
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  STACK[0x758] = (unint64_t)&STACK[0x940];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x758]);
  uint64_t v5 = (void *)STACK[0x958];
  if (STACK[0x958])
  {
    STACK[0x960] = (unint64_t)v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)STACK[0x970];
  if (STACK[0x970])
  {
    STACK[0x978] = (unint64_t)v6;
    operator delete(v6);
  }
  kaldi::MinimumBayesRisk::~MinimumBayesRisk((kaldi::MinimumBayesRisk *)&STACK[0x988]);
  _Unwind_Resume(a1);
}

void sub_1B228B5BC()
{
  unint64_t v0 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v0;
    operator delete(v0);
  }
  uint64_t v1 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v1;
    operator delete(v1);
  }
  if (STACK[0x768])
  {
    STACK[0x770] = STACK[0x768];
    JUMPOUT(0x1B228B6C4);
  }
  JUMPOUT(0x1B228B6C8);
}

void sub_1B228B5D4()
{
}

void sub_1B228B5E0()
{
}

void sub_1B228B5E8()
{
}

void sub_1B228B5F0()
{
  unint64_t v0 = (void *)STACK[0x400];
  if (STACK[0x400])
  {
    STACK[0x408] = (unint64_t)v0;
    operator delete(v0);
  }
  if (STACK[0x508])
  {
    STACK[0x510] = STACK[0x508];
    JUMPOUT(0x1B228B66CLL);
  }
  JUMPOUT(0x1B228B670);
}

void sub_1B228B5F8()
{
  if (STACK[0x770])
  {
    STACK[0x778] = STACK[0x770];
    JUMPOUT(0x1B228B6B4);
  }
  JUMPOUT(0x1B228B6B8);
}

void sub_1B228B600()
{
  unint64_t v0 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v0;
    operator delete(v0);
  }
  if (STACK[0x770])
  {
    STACK[0x778] = STACK[0x770];
    JUMPOUT(0x1B228B6B4);
  }
  JUMPOUT(0x1B228B6B8);
}

void sub_1B228B608()
{
}

void sub_1B228B634()
{
  unint64_t v0 = (void *)STACK[0x770];
  if (STACK[0x770])
  {
    STACK[0x778] = (unint64_t)v0;
    operator delete(v0);
  }
  uint64_t v1 = (void *)STACK[0x400];
  if (STACK[0x400])
  {
    STACK[0x408] = (unint64_t)v1;
    operator delete(v1);
  }
  JUMPOUT(0x1B228B660);
}

void sub_1B228B684()
{
  unint64_t v0 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v0;
    operator delete(v0);
  }
  uint64_t v1 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v1;
    operator delete(v1);
  }
  JUMPOUT(0x1B228B6A8);
}

uint64_t kaldi::quasar::WordConf::NormaliseUttScores(uint64_t result, float *a2, float *a3)
{
  uint64_t v3 = *(float **)(result + 168);
  float v4 = v3[27];
  if (COERCE_UNSIGNED_INT(fabs(v3[28] / v4)) >= 0x7F800000) {
    float v5 = 1.0;
  }
  else {
    float v5 = v3[28] / v4;
  }
  float v6 = v3[29];
  if (COERCE_INT(fabs(v3[30] / v4)) >= 2139095040) {
    float v7 = 0.5;
  }
  else {
    float v7 = v3[30] / v4;
  }
  float v8 = v3[32];
  if (COERCE_INT(fabs(v3[31] / v4)) >= 2139095040) {
    float v9 = 0.5;
  }
  else {
    float v9 = v3[31] / v4;
  }
  v3[30] = v7;
  v3[31] = v9;
  float v10 = v6 / v4;
  if ((LODWORD(v10) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v11 = 0.5;
  }
  else {
    float v11 = v10;
  }
  v3[28] = v5;
  v3[29] = v11;
  float v12 = v8 / v4;
  if ((LODWORD(v12) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v13 = 0.5;
  }
  else {
    float v13 = v12;
  }
  v3[32] = v13;
  float v14 = *a2;
  if ((*(_DWORD *)a2 & 0x7FFFFFFFu) >= 0x7F800000) {
    float v14 = 0.0;
  }
  v3[33] = v14;
  float v15 = a2[1];
  if ((LODWORD(v15) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v15 = 0.0;
  }
  void v3[34] = v15;
  float v16 = a2[2];
  if ((LODWORD(v16) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v16 = 0.0;
  }
  v3[35] = v16;
  float v17 = *a3;
  if ((*(_DWORD *)a3 & 0x7FFFFFFFu) >= 0x7F800000) {
    float v17 = 0.0;
  }
  v3[36] = v17;
  float v18 = a3[1];
  if ((LODWORD(v18) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v18 = 0.0;
  }
  v3[37] = v18;
  float v19 = a3[2];
  if ((LODWORD(v19) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v19 = 0.0;
  }
  v3[38] = v19;
  return result;
}

float kaldi::quasar::WordConf::AddUttFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 168);
  uint64_t v3 = *(void *)(a1 + 168);
  *(_DWORD *)(v3 + 108) = *(_DWORD *)(v2 + 108);
  *(_DWORD *)(v3 + 112) = *(_DWORD *)(v2 + 112);
  *(_DWORD *)(v3 + 1kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(_DWORD *)(v2 + 116);
  *(_DWORD *)(v3 + 120) = *(_DWORD *)(v2 + 120);
  *(_DWORD *)(v3 + 124) = *(_DWORD *)(v2 + 124);
  *(_DWORD *)(v3 + 128) = *(_DWORD *)(v2 + 128);
  *(_DWORD *)(v3 + 132) = *(_DWORD *)(v2 + 132);
  *(_DWORD *)(v3 + 136) = *(_DWORD *)(v2 + 136);
  *(_DWORD *)(v3 + 140) = *(_DWORD *)(v2 + 140);
  *(_DWORD *)(v3 + 144) = *(_DWORD *)(v2 + 144);
  *(_DWORD *)(v3 + 148) = *(_DWORD *)(v2 + 148);
  float result = *(float *)(v2 + 152);
  *(float *)(v3 + 152) = result;
  return result;
}

float kaldi::quasar::WordConf::SetOneBestFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 168);
  uint64_t v3 = *(void *)(a1 + 168);
  *(_DWORD *)(v3 + 156) = *(_DWORD *)v2;
  *(_DWORD *)(v3 + 160) = *(_DWORD *)(v2 + 4);
  *(_DWORD *)(v3 + 164) = *(_DWORD *)(v2 + 8);
  *(_DWORD *)(v3 + 168) = *(_DWORD *)(v2 + 12);
  *(_DWORD *)(v3 + 172) = *(_DWORD *)(v2 + 16);
  *(_DWORD *)(v3 + 176) = *(_DWORD *)(v2 + 20);
  *(_DWORD *)(v3 + 180) = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v3 + 184) = *(_DWORD *)(v2 + 28);
  *(_DWORD *)(v3 + 188) = *(_DWORD *)(v2 + 32);
  *(_DWORD *)(v3 + 192) = *(_DWORD *)(v2 + 36);
  *(_DWORD *)(v3 + 196) = *(_DWORD *)(v2 + 40);
  *(_DWORD *)(v3 + 200) = *(_DWORD *)(v2 + 44);
  *(_DWORD *)(v3 + 204) = *(_DWORD *)(v2 + 48);
  *(_DWORD *)(v3 + 208) = *(_DWORD *)(v2 + 52);
  *(_DWORD *)(v3 + 212) = *(_DWORD *)(v2 + 56);
  *(_DWORD *)(v3 + 2kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(_DWORD *)(v2 + 60);
  *(_DWORD *)(v3 + 220) = *(_DWORD *)(v2 + 64);
  *(_DWORD *)(v3 + 224) = *(_DWORD *)(v2 + 68);
  *(_DWORD *)(v3 + 228) = *(_DWORD *)(v2 + 72);
  *(_DWORD *)(v3 + 232) = *(_DWORD *)(v2 + 76);
  *(_DWORD *)(v3 + 236) = *(_DWORD *)(v2 + 80);
  *(_DWORD *)(v3 + 240) = *(_DWORD *)(v2 + 84);
  *(_DWORD *)(v3 + 244) = *(_DWORD *)(v2 + 88);
  *(_DWORD *)(v3 + 248) = *(_DWORD *)(v2 + 92);
  *(_DWORD *)(v3 + 252) = *(_DWORD *)(v2 + 96);
  *(_DWORD *)(v3 + 256) = *(_DWORD *)(v2 + 100);
  *(_DWORD *)(v3 + 260) = *(_DWORD *)(v2 + 104);
  float result = *(float *)(v2 + 388);
  *(float *)(v3 + 392) = result;
  return result;
}

void kaldi::quasar::WordConf::ApplyModel(kaldi::quasar::WordConf *this, const kaldi::quasar::WordConf *a2)
{
  uint64_t v4 = *((void *)this + 21);
  uint64_t v3 = *((void *)this + 22);
  int v5 = kaldi::g_kaldi_verbose_level;
  if (v3 != v4)
  {
    unint64_t v7 = 0;
    float v8 = *((float *)a2 + 49);
    do
    {
      float v8 = v8 + (float)(*(float *)(v4 + 4 * v7) * *(float *)(*((void *)a2 + 21) + 4 * v7));
      float v9 = expf(v8);
      *((float *)this + 48) = v9 / (float)(v9 + 1.0);
      if (v5 >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Scaling feature ", 16);
        float v10 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" with value of ", 15);
        float v11 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" by weight = ", 13);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
        int v5 = kaldi::g_kaldi_verbose_level;
        uint64_t v4 = *((void *)this + 21);
        uint64_t v3 = *((void *)this + 22);
      }
      ++v7;
    }
    while (v7 < (v3 - v4) >> 2);
  }
  if ((*((_DWORD *)this + 48) & 0x7FFFFFFFu) > 0x7F7FFFFF || *((float *)this + 48) == 0.0)
  {
    if (v5 >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Warning - confidence is NaN or inf, or will be inf in log - confidence model could be bad/compromised. Defaulting to 1.0", 120);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      int v5 = kaldi::g_kaldi_verbose_level;
    }
    *((_DWORD *)this + 48) = 1065353216;
  }
  if (v5 >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Confidence score is ", 20);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
  }
}

void sub_1B228BCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::WordConf::ComputePhonesAndDurations(kaldi::quasar::WordConf *this, const kaldi::SilencePhoneSet *a2, const kaldi::TransitionModel *a3, const fst::SymbolTable *a4)
{
  uint64_t v4 = a4;
  std::string __p = 0;
  int v61 = 0;
  float v62 = 0;
  float v57 = 0;
  long long v58 = 0;
  int v59 = 0;
  memset(v56, 0, sizeof(v56));
  uint64_t v6 = *((void *)this + 27);
  if (*((void *)this + 28) != v6)
  {
    unint64_t v8 = 0;
    int v9 = 0;
    int v10 = -1;
    do
    {
      int v11 = v10;
      int v12 = kaldi::TransitionModel::TransitionIdToPhone(a3, *(_DWORD *)(v6 + 4 * v8));
      int v10 = v12;
      if (v8 && v12 != v11)
      {
        float v13 = v61;
        if (v61 >= v62)
        {
          float v15 = (char *)__p;
          uint64_t v16 = (v61 - (unsigned char *)__p) >> 2;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            goto LABEL_78;
          }
          uint64_t v18 = v62 - (unsigned char *)__p;
          if ((v62 - (unsigned char *)__p) >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            long long v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v62, v19);
            float v15 = (char *)__p;
            float v13 = v61;
          }
          else
          {
            long long v20 = 0;
          }
          uint64_t v21 = (int *)&v20[4 * v16];
          *uint64_t v21 = v11;
          float v14 = (char *)(v21 + 1);
          while (v13 != v15)
          {
            int v22 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--uint64_t v21 = v22;
          }
          std::string __p = v21;
          int v61 = v14;
          float v62 = &v20[4 * v19];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *(_DWORD *)int v61 = v11;
          float v14 = v13 + 4;
        }
        int v61 = v14;
        int v23 = v58;
        if (v58 >= v59)
        {
          unint64_t v25 = (char *)v57;
          uint64_t v26 = (v58 - (unsigned char *)v57) >> 2;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62) {
LABEL_78:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v28 = v59 - (unsigned char *)v57;
          if ((v59 - (unsigned char *)v57) >> 1 > v27) {
            unint64_t v27 = v28 >> 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            int v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v59, v29);
            unint64_t v25 = (char *)v57;
            int v23 = v58;
          }
          else
          {
            int v30 = 0;
          }
          BOOL v31 = &v30[4 * v26];
          *(_DWORD *)BOOL v31 = v9;
          uint64_t v24 = v31 + 4;
          while (v23 != v25)
          {
            int v32 = *((_DWORD *)v23 - 1);
            v23 -= 4;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          float v57 = v31;
          long long v58 = v24;
          int v59 = &v30[4 * v29];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *(_DWORD *)long long v58 = v9;
          uint64_t v24 = v23 + 4;
        }
        int v9 = 0;
        long long v58 = v24;
      }
      ++v9;
      ++v8;
      uint64_t v6 = *((void *)this + 27);
    }
    while (v8 < (*((void *)this + 28) - v6) >> 2);
    uint64_t v4 = a4;
    if (v9)
    {
      uint64_t v33 = v61;
      if (v61 >= v62)
      {
        uint64_t v35 = (char *)__p;
        uint64_t v36 = (v61 - (unsigned char *)__p) >> 2;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62) {
          goto LABEL_79;
        }
        uint64_t v38 = v62 - (unsigned char *)__p;
        if ((v62 - (unsigned char *)__p) >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          long long v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v62, v39);
          uint64_t v35 = (char *)__p;
          uint64_t v33 = v61;
        }
        else
        {
          long long v40 = 0;
        }
        uint64_t v41 = (int *)&v40[4 * v36];
        uint64_t v42 = &v40[4 * v39];
        *uint64_t v41 = v10;
        unint64_t v34 = (char *)(v41 + 1);
        while (v33 != v35)
        {
          int v43 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *--uint64_t v41 = v43;
        }
        std::string __p = v41;
        int v61 = v34;
        float v62 = v42;
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *(_DWORD *)int v61 = v10;
        unint64_t v34 = v33 + 4;
      }
      int v61 = v34;
      uint64_t v44 = v58;
      if (v58 < v59)
      {
        *(_DWORD *)long long v58 = v9;
        uint64_t v45 = v44 + 4;
LABEL_72:
        long long v58 = v45;
        goto LABEL_73;
      }
      unint64_t v46 = (char *)v57;
      uint64_t v47 = (v58 - (unsigned char *)v57) >> 2;
      unint64_t v48 = v47 + 1;
      if (!((unint64_t)(v47 + 1) >> 62))
      {
        uint64_t v49 = v59 - (unsigned char *)v57;
        if ((v59 - (unsigned char *)v57) >> 1 > v48) {
          unint64_t v48 = v49 >> 1;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          std::string v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v59, v50);
          unint64_t v46 = (char *)v57;
          uint64_t v44 = v58;
        }
        else
        {
          std::string v51 = 0;
        }
        unint64_t v52 = &v51[4 * v47];
        uint64_t v53 = &v51[4 * v50];
        *(_DWORD *)unint64_t v52 = v9;
        uint64_t v45 = v52 + 4;
        while (v44 != v46)
        {
          int v54 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v52 - 1) = v54;
          v52 -= 4;
        }
        float v57 = v52;
        long long v58 = v45;
        int v59 = v53;
        if (v46) {
          operator delete(v46);
        }
        goto LABEL_72;
      }
LABEL_79:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
  }
LABEL_73:
  kaldi::quasar::PhoneIdsAndDurationsToString((uint64_t *)&__p, &v57, (uint64_t)v4, (uint64_t)this + 120, (uint64_t *)this + 30);
  int v63 = v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v63);
  if (v57)
  {
    long long v58 = (char *)v57;
    operator delete(v57);
  }
  if (__p)
  {
    int v61 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B228C0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char *a20)
{
  a20 = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::LevenshteinEditDistance<std::string>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  std::vector<int>::vector(&v42, (int)v40 + 1);
  std::vector<int>::vector(&v41, (int)v40 + 1);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 3);
  std::vector<int>::pointer begin = v42.__begin_;
  std::vector<int>::pointer end = v42.__end_;
  if (v42.__end_ != v42.__begin_)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v42.__end_ - v42.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      begin[v7] = v7;
      ++v7;
    }
    while (v8 != v7);
  }
  if ((int)v4 >= 1)
  {
    uint64_t v39 = (v4 + 1);
    uint64_t v9 = 1;
    do
    {
      std::vector<int>::pointer v10 = v42.__begin_;
      int v11 = *v42.__begin_ + 1;
      int v12 = (char *)v41.__begin_;
      *v41.__begin_ = v11;
      if ((int)v40 >= 1)
      {
        uint64_t v13 = *a1 + 24 * v9 - 24;
        uint64_t v14 = *a2;
        uint64_t v15 = 1;
        do
        {
          int v16 = v10[v15 - 1];
          unint64_t v17 = (unsigned __int8 **)(v14 + 24 * (v15 - 1));
          uint64_t v18 = *(unsigned __int8 *)(v13 + 23);
          if ((v18 & 0x80u) == 0) {
            unint64_t v19 = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 23);
          }
          else {
            unint64_t v19 = *(unsigned __int8 **)(v13 + 8);
          }
          long long v20 = (unsigned __int8 *)*((unsigned __int8 *)v17 + 23);
          int v21 = (char)v20;
          if ((char)v20 < 0) {
            long long v20 = v17[1];
          }
          if (v19 == v20)
          {
            if (v21 >= 0) {
              int v22 = (unsigned __int8 *)(v14 + 24 * (v15 - 1));
            }
            else {
              int v22 = *v17;
            }
            if ((v18 & 0x80) != 0)
            {
              BOOL v32 = memcmp(*(const void **)v13, v22, *(void *)(v13 + 8)) == 0;
            }
            else if (*(unsigned char *)(v13 + 23))
            {
              uint64_t v23 = v18 - 1;
              uint64_t v24 = (unsigned __int8 *)v13;
              do
              {
                int v26 = *v24++;
                int v25 = v26;
                int v28 = *v22++;
                int v27 = v28;
                BOOL v30 = v23-- != 0;
                BOOL v31 = v25 == v27;
                BOOL v32 = v25 == v27;
              }
              while (v31 && v30);
            }
            else
            {
              BOOL v32 = 1;
            }
          }
          else
          {
            BOOL v32 = 0;
          }
          int v33 = v16 + !v32;
          int v34 = v10[v15];
          if (v11 < v34) {
            int v34 = v11;
          }
          if (v34 + 1 < v33) {
            int v11 = v34 + 1;
          }
          else {
            int v11 = v33;
          }
          *(_DWORD *)&v12[4 * v15++] = v11;
        }
        while (v15 != v40 + 1);
      }
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v42, v12, (uint64_t)v41.__end_, ((char *)v41.__end_ - v12) >> 2);
      ++v9;
    }
    while (v9 != v39);
    std::vector<int>::pointer end = v42.__end_;
  }
  uint64_t v35 = *(end - 1);
  if (v41.__begin_)
  {
    v41.__end_ = v41.__begin_;
    operator delete(v41.__begin_);
  }
  if (v42.__begin_)
  {
    v42.__end_ = v42.__begin_;
    operator delete(v42.__begin_);
  }
  return v35;
}

void sub_1B228C368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::One();
  *(_DWORD *)a1 = *(_DWORD *)v2;
  uint64_t v3 = *(void *)(v2 + 4);
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  unint64_t v4 = (void *)(a1 + 16);
  *(void *)((char *)v4 - 12) = v3;
  v4[1] = 0;
  v4[2] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, 0, 0, 0);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(v6, a2, a3);
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  int v7 = *a3;
  uint64_t v8 = *(void *)(a3 + 1);
  std::vector<int>::pointer v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)a3 + 2), *((void *)a3 + 3), (uint64_t)(*((void *)a3 + 3) - *((void *)a3 + 2)) >> 2);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal(v6, a2, (uint64_t)&v7);
  if (__p)
  {
    std::vector<int>::pointer v10 = __p;
    operator delete(__p);
  }
}

void sub_1B228C5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v4 = &v6;
  memset(v5, 0, sizeof(v5));
  v1[0] = a1;
  v1[1] = (uint64_t)&v6;
  memset(v2, 0, sizeof(v2));
  fst::StateMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(a1, v1);
  int v7 = (void **)v2;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v7 = (void **)v5;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1B228C668(_Unwind_Exception *a1)
{
  uint64_t v4 = v1;
  *(void *)(v3 - 40) = v2;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  *(void *)(v3 - 40) = v4;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  _Unwind_Resume(a1);
}

uint64_t fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::One()
{
  {
    operator new();
  }
  return fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::One(void)::one;
}

void sub_1B228C718(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1000C403E1C8BA9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::compose()
{
}

void sub_1B228C858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>((uint64_t)v1, a1);
}

void sub_1B228C9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  fst::AutoQueue<int>::~AutoQueue(&a25);
  a14 = v25 - 104;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

void *fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero();
  *(_DWORD *)a1 = *(_DWORD *)v2;
  uint64_t v3 = *(void *)(v2 + 4);
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  uint64_t v4 = (void *)(a1 + 16);
  *(void *)((char *)v4 - 12) = v3;
  v4[1] = 0;
  v4[2] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, 0, 0, 0);
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *(_DWORD *)v3;
  *(void *)(a3 + 4) = *(void *)(v3 + 4);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a3 + 16), *(const void **)(v3 + 16), *(void *)(v3 + 24), (uint64_t)(*(void *)(v3 + 24) - *(void *)(v3 + 16)) >> 2);
}

kaldi::quasar::WordConf *kaldi::quasar::WordConf::WordConf(kaldi::quasar::WordConf *this)
{
  *((_OWORD *)this + 3) = 0u;
  uint64_t v2 = (char *)this + 48;
  *((_OWORD *)this + 6) = 0u;
  uint64_t v3 = (std::string *)((char *)this + 96);
  *((void *)this + 21) = 0;
  uint64_t v4 = (char *)this + 168;
  int v5 = (char *)this + 24;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *(_OWORD *)((char *)this + 2kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0u;
  char v6 = (std::string *)((char *)this + 72);
  int v7 = (char *)this + 120;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  uint64_t FeatureMap = kaldi::quasar::Features::GetFeatureMap(this);
  std::vector<float>::resize((uint64_t)v4, *(void *)(FeatureMap + 24), &kaldi::quasar::kConfidenceFeatureDefaultLow);
  uint64_t v9 = (const std::string *)MEMORY[0x1B3EA7B20](v2, "INIT");
  std::string::operator=((std::string *)this, v9);
  MEMORY[0x1B3EA7B20](v5, "NULL");
  std::vector<int>::pointer v10 = (const std::string *)MEMORY[0x1B3EA7B20](v7, "");
  uint64_t v11 = std::string::operator=(v3, v10);
  std::string::operator=(v6, v11);
  *((_DWORD *)this + 52) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 18) = -1;
  *((void *)this + 19) = -1;
  *((void *)this + 20) = -1;
  *((_DWORD *)this + 48) = -1082130432;
  return this;
}

void sub_1B228CC18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<int>::pointer v10 = v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  int v12 = *v10;
  if (*v10)
  {
    *(void *)(v2 + 224) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *v8;
  if (*v8)
  {
    *(void *)(v2 + 176) = v13;
    operator delete(v13);
  }
  if (*(char *)(v2 + 143) < 0) {
    operator delete(*v7);
  }
  if (*(char *)(v2 + 119) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v2 + 95) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::WordConf::WordConf(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v4 = a1 + 48;
  *(void *)(a1 + 168) = 0;
  int v5 = (void *)(a1 + 168);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 2kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  uint64_t FeatureMap = kaldi::quasar::Features::GetFeatureMap((kaldi::quasar::Features *)a1);
  std::vector<float>::resize((uint64_t)v5, *(void *)(FeatureMap + 24), &kaldi::quasar::kConfidenceFeatureDefaultLow);
  int v7 = (const std::string *)MEMORY[0x1B3EA7B20](v4, "MODEL");
  std::string::operator=((std::string *)a1, v7);
  int v8 = *(char *)(a2 + 23);
  if (v8 < 0)
  {
    if (*(void *)(a2 + 8) != 4)
    {
LABEL_7:
      memset(&__str, 0, sizeof(__str));
      char v61 = 0;
      kaldi::Input::Input(v60, a2, &v61);
      int v10 = 0;
      uint64_t v11 = (std::locale::id *)MEMORY[0x1E4FBA258];
      while (1)
      {
        int v12 = (void *)kaldi::Input::Stream((kaldi::Input *)v60);
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
        uint64_t v13 = std::locale::use_facet((const std::locale *)&v59, v11);
        unsigned __int8 v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale((std::locale *)&v59);
        uint64_t v15 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, (uint64_t)&__str, v14);
        if ((*((unsigned char *)v15 + *(void *)(*v15 - 24) + 32) & 5) != 0)
        {
          if (kaldi::g_kaldi_verbose_level >= 2)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58, 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Read in Confidence Model , added ", 33);
            std::string v51 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" features", 9);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58);
          }
          kaldi::Input::~Input((kaldi::Input *)v60);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          return a1;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t size = __str.__r_.__value_.__l.__size_;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        uint64_t v18 = (char *)p_str + size;
        if (size >= 1)
        {
          unint64_t v19 = p_str;
          do
          {
            long long v20 = memchr(v19, 32, size);
            if (!v20) {
              break;
            }
            if (*v20 == 32) {
              goto LABEL_21;
            }
            unint64_t v19 = (std::string *)(v20 + 1);
            int64_t size = v18 - (unsigned char *)v19;
          }
          while (v18 - (unsigned char *)v19 > 0);
        }
        long long v20 = v18;
LABEL_21:
        if (v20 == v18) {
          std::string::size_type v21 = -1;
        }
        else {
          std::string::size_type v21 = v20 - (unsigned char *)p_str;
        }
        std::string::basic_string(&v59, &__str, 0, v21, (std::allocator<char> *)v63);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t v22 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t v22 = __str.__r_.__value_.__l.__size_;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v23 = &__str;
        }
        else {
          uint64_t v23 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        uint64_t v24 = (char *)v23 + v22;
        if (v22 < 1)
        {
          std::string::size_type v28 = 0;
        }
        else
        {
          size_t v25 = v22;
          int v26 = v23;
          do
          {
            int v27 = memchr(v26, 32, v25);
            if (!v27) {
              break;
            }
            if (*v27 == 32) {
              goto LABEL_36;
            }
            int v26 = (std::string *)(v27 + 1);
            size_t v25 = v24 - (unsigned char *)v26;
          }
          while (v24 - (unsigned char *)v26 > 0);
          int v27 = (char *)v23 + v22;
LABEL_36:
          if (v27 == v24) {
            std::string::size_type v28 = 0;
          }
          else {
            std::string::size_type v28 = v27 - (unsigned char *)v23 + 1;
          }
          size_t v29 = v22;
          BOOL v30 = v23;
          do
          {
            unint64_t v31 = (unint64_t)memchr(v30, 32, v29);
            if (!v31) {
              break;
            }
            if (*(unsigned char *)v31 == 32) {
              goto LABEL_46;
            }
            BOOL v30 = (std::string *)(v31 + 1);
            size_t v29 = v24 - (unsigned char *)v30;
          }
          while (v24 - (unsigned char *)v30 > 0);
        }
        unint64_t v31 = (unint64_t)v23 + v22;
LABEL_46:
        BOOL v32 = (char *)v23 + ~v31;
        if ((unsigned char *)v31 == v24) {
          BOOL v32 = 0;
        }
        std::string::basic_string(&v58, &__str, v28, (std::string::size_type)&v32[v22], (std::allocator<char> *)v63);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v35 = (void *)v58.__r_.__value_.__r.__words[0];
          double v34 = atof(v58.__r_.__value_.__l.__data_);
          operator delete(v35);
        }
        else
        {
          double v34 = atof((const char *)&v58);
        }
        float v36 = v34;
        if ((*((unsigned char *)&v59.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (v59.__r_.__value_.__l.__size_ == 8 && *(void *)v59.__r_.__value_.__l.__data_ == 0x746E6174736E6F63) {
            goto LABEL_76;
          }
          if (v59.__r_.__value_.__l.__size_ != 9) {
            goto LABEL_63;
          }
          unint64_t v37 = (std::string *)v59.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (HIBYTE(v59.__r_.__value_.__r.__words[2]) == 8)
          {
            if (v59.__r_.__value_.__r.__words[0] != 0x746E6174736E6F63) {
              goto LABEL_63;
            }
            goto LABEL_76;
          }
          if (HIBYTE(v59.__r_.__value_.__r.__words[2]) != 9) {
            goto LABEL_63;
          }
          unint64_t v37 = &v59;
        }
        std::string::size_type v38 = v37->__r_.__value_.__r.__words[0];
        int v39 = v37->__r_.__value_.__s.__data_[8];
        if (v38 != 0x7065637265746E69 || v39 != 116)
        {
LABEL_63:
          std::vector<int> v41 = (void *)kaldi::quasar::Features::GetFeatureMap(v33);
          std::vector<int> v42 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v41, (unsigned __int8 *)&v59);
          int v43 = (kaldi::quasar::Features *)kaldi::quasar::Features::GetFeatureMap((kaldi::quasar::Features *)v42);
          if (!v42)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
            int v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Feature ", 8);
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v55 = &v59;
            }
            else {
              uint64_t v55 = (std::string *)v59.__r_.__value_.__r.__words[0];
            }
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v56 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v56 = v59.__r_.__value_.__l.__size_;
            }
            float v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, v56);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" is not in the model definition.", 32);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v58);
          }
          uint64_t v44 = (void *)kaldi::quasar::Features::GetFeatureMap(v43);
          *(float *)(*v5
                   + 4
                   * *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v44, (unsigned __int8 *)&v59)+ 10)) = v36;
          if (kaldi::g_kaldi_verbose_level >= 3)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58, 3);
            uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Setting ", 8);
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v46 = &v59;
            }
            else {
              unint64_t v46 = (std::string *)v59.__r_.__value_.__r.__words[0];
            }
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v47 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v47 = v59.__r_.__value_.__l.__size_;
            }
            unint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
            uint64_t v49 = (kaldi::quasar::Features *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" to ", 4);
            unint64_t v50 = (void *)kaldi::quasar::Features::GetFeatureMap(v49);
            std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v50, (unsigned __int8 *)&v59);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58);
          }
          ++v10;
          goto LABEL_73;
        }
LABEL_76:
        *(float *)(a1 + 196) = v36;
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Setting constant term/intercept to ", 35);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58);
        }
LABEL_73:
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
      }
    }
    uint64_t v9 = *(_DWORD **)a2;
  }
  else
  {
    uint64_t v9 = (_DWORD *)a2;
    if (v8 != 4) {
      goto LABEL_7;
    }
  }
  if (*v9 != 1280070990) {
    goto LABEL_7;
  }
  unint64_t v52 = (const std::string *)MEMORY[0x1B3EA7B20](v4, "NULL");
  std::string::operator=((std::string *)a1, v52);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"No Confidence Model Supplied.", 29);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v58);
  }
  *(_DWORD *)(a1 + 196) = -1027080192;
  return a1;
}

void sub_1B228D340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12)
{
  if (*(char *)(v14 - 153) < 0) {
    operator delete(*(void **)(v14 - 176));
  }
  kaldi::Input::~Input((kaldi::Input *)(v14 - 152));
  if (*(char *)(v14 - 113) < 0) {
    operator delete(*(void **)(v14 - 136));
  }
  a12 = (void **)(v12 + 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  int v16 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 224) = v16;
    operator delete(v16);
  }
  unint64_t v17 = *v13;
  if (*v13)
  {
    *(void *)(v12 + 176) = v17;
    operator delete(v17);
  }
  if (*(char *)(v12 + 143) < 0) {
    operator delete(*(void **)(v12 + 120));
  }
  if (*(char *)(v12 + 119) < 0) {
    operator delete(*(void **)(v12 + 96));
  }
  if (*(char *)(v12 + 95) < 0) {
    operator delete(*(void **)(v12 + 72));
  }
  if (*(char *)(v12 + 71) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v12 + 47) < 0) {
    operator delete(*(void **)(v12 + 24));
  }
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(a1);
}

void sub_1B228D348()
{
  std::locale::~locale((std::locale *)(v0 - 176));
  JUMPOUT(0x1B228D380);
}

void sub_1B228D37C()
{
}

void kaldi::quasar::PhoneIdsAndDurationsToString(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  v50[2] = *(void ***)MEMORY[0x1E4F143B8];
  if (*(char *)(a4 + 23) < 0)
  {
    **(unsigned char **)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 23) = 0;
  }
  std::vector<std::string>::__clear[abi:ne180100](a5);
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (*a1 != v10 && a2[1] - *a2 == v10 - v9)
  {
    unint64_t v11 = 0;
    uint64_t v12 = (void ***)(a4 + 8);
    do
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, void))(*(void *)a3 + 88))(&v49, a3, *(int *)(v9 + 4 * v11));
      std::string::size_type size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
      char v14 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v49.__r_.__value_.__l.__size_;
      }
      if (!size) {
        goto LABEL_76;
      }
      memset(v48, 0, sizeof(v48));
      kaldi::SplitStringToVector(&v49, "_", 0, (uint64_t)v48);
      if (*(char *)(a4 + 23) < 0)
      {
        uint64_t v15 = *v12;
        if (*v12) {
          goto LABEL_14;
        }
      }
      else if (*(unsigned char *)(a4 + 23))
      {
        uint64_t v15 = *v12;
LABEL_14:
        if (*(char *)(a4 + 23) >= 0) {
          size_t v16 = *(unsigned __int8 *)(a4 + 23);
        }
        else {
          size_t v16 = (size_t)v15;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v43, v16 + 1);
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v17 = &v43;
        }
        else {
          unint64_t v17 = (std::string *)v43.__r_.__value_.__r.__words[0];
        }
        if (v16)
        {
          if (*(char *)(a4 + 23) >= 0) {
            uint64_t v18 = (unsigned char *)a4;
          }
          else {
            uint64_t v18 = *(unsigned char **)a4;
          }
          memmove(v17, v18, v16);
        }
        *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + vkaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 95;
        int v19 = *((char *)v48[0] + 23);
        if (v19 >= 0) {
          long long v20 = (const std::string::value_type *)v48[0];
        }
        else {
          long long v20 = *(const std::string::value_type **)v48[0];
        }
        if (v19 >= 0) {
          std::string::size_type v21 = *((unsigned __int8 *)v48[0] + 23);
        }
        else {
          std::string::size_type v21 = *((void *)v48[0] + 1);
        }
        int64_t v22 = std::string::append(&v43, v20, v21);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        uint64_t v24 = std::string::append(&v44, "_");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v42, *(_DWORD *)(*a2 + 4 * v11));
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v26 = &v42;
        }
        else {
          int v26 = (std::string *)v42.__r_.__value_.__r.__words[0];
        }
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v27 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v27 = v42.__r_.__value_.__l.__size_;
        }
        std::string::size_type v28 = std::string::append(&v45, (const std::string::value_type *)v26, v27);
        char v29 = 0;
        goto LABEL_56;
      }
      BOOL v30 = v48[0];
      if (*((char *)v48[0] + 23) >= 0) {
        size_t v31 = *((unsigned __int8 *)v48[0] + 23);
      }
      else {
        size_t v31 = *((void *)v48[0] + 1);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v47, v31 + 1);
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v32 = &v47;
      }
      else {
        BOOL v32 = (std::string *)v47.__r_.__value_.__r.__words[0];
      }
      if (v31)
      {
        if (*((char *)v30 + 23) >= 0) {
          int v33 = v30;
        }
        else {
          int v33 = *(long long **)v30;
        }
        memmove(v32, v33, v31);
      }
      *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v31) = 95;
      std::to_string(&v46, *(_DWORD *)(*a2 + 4 * v11));
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v34 = &v46;
      }
      else {
        double v34 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v46.__r_.__value_.__l.__size_;
      }
      std::string::size_type v28 = std::string::append(&v47, (const std::string::value_type *)v34, v35);
      char v29 = 1;
LABEL_56:
      std::string::size_type v36 = v28->__r_.__value_.__r.__words[0];
      v50[0] = (void **)v28->__r_.__value_.__l.__size_;
      *(void ***)((char *)v50 + 7) = *(void ***)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
      char v37 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(void *)a4 = v36;
      *uint64_t v12 = v50[0];
      *(void ***)(a4 + 15) = *(void ***)((char *)v50 + 7);
      *(unsigned char *)(a4 + 23) = v37;
      if (v29)
      {
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_72;
        }
        std::string::size_type v38 = (void *)v47.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_72;
        }
        std::string::size_type v38 = (void *)v43.__r_.__value_.__r.__words[0];
      }
      operator delete(v38);
LABEL_72:
      unint64_t v39 = a5[1];
      if (v39 >= a5[2])
      {
        uint64_t v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a5, v48[0]);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a5, v48[0]);
        uint64_t v40 = v39 + 24;
      }
      a5[1] = v40;
      v50[0] = (void **)v48;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v50);
      char v14 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
LABEL_76:
      if (v14 < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      ++v11;
      uint64_t v9 = *a1;
    }
    while (v11 < (a1[1] - *a1) >> 2);
  }
}

void sub_1B228D83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  *(void *)(v49 - 120) = &a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v49 - 120));
  if (*(char *)(v49 - 129) < 0) {
    operator delete(*(void **)(v49 - 152));
  }
  _Unwind_Resume(a1);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_1F0A39308;
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)v7);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 64) = v7[0];
  *(void *)(a1 + 68) = *(void *)&v7[1];
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 80), __p, (uint64_t)v9, (v9 - (unsigned char *)__p) >> 2);
  *(_DWORD *)(a1 + 104) = -1;
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 114) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MemoryPool((void *)(a1 + 120), 1);
}

void sub_1B228DAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
  if (a18 < 0) {
    operator delete(__p);
  }
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~MemoryPool(v21);
  long long v23 = *v20;
  if (*v20)
  {
    *(void *)(v19 + 88) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36BF8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36BF8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~SortedMatcher(void *a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~SortedMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Copy()
{
}

void sub_1B228DC34(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C4012E4573CLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3) {
    return 3;
  }
  if (v2) {
    uint64_t v6 = 0x40000000;
  }
  else {
    uint64_t v6 = 0x10000000;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v8 = 3221225472;
  }
  else {
    uint64_t v8 = 805306368;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v10 = 0x80000000;
  if (!v2) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 114)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Flags()
{
  return 0;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Final_(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) + 32);
  return v1();
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36BF8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B228DE58(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Size()
{
  return 40;
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37BB0;
  a1[1] = 48 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B228DF70(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37BB0;
  int v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::Size()
{
  return 48;
}

void *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~SortedMatcher(void *a1)
{
  *a1 = &unk_1F0A39308;
  int v2 = (void *)a1[3];
  uint64_t v3 = (quasar::Bitmap *)(a1 + 15);
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    else
    {
      uint64_t v4 = (_DWORD *)v2[3];
      if (v4) {
        --*v4;
      }
    }
    v2[5] = a1[22];
    a1[22] = v2;
  }
  uint64_t v5 = a1[1];
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  a1[15] = &unk_1F0A36BF8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena(a1 + 16);
  quasar::Bitmap::~Bitmap(v3);
  uint64_t v6 = (void *)a1[10];
  if (v6)
  {
    a1[11] = v6;
    operator delete(v6);
  }
  return a1;
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A39308;
  *(void *)(a1 + 8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 88))(*(void *)(a2 + 8), a3);
  *(_DWORD *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 68);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 68) = v5;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 114) = *(unsigned char *)(a2 + 114);
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MemoryPool((void *)(a1 + 120), 1);
}

void sub_1B228E25C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 88) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetState(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 16) != a2)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
      uint64_t v5 = (void *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      *(unsigned char *)(v3 + 114) = 1;
    }
    uint64_t v6 = *(void **)(v3 + 24);
    if (v6)
    {
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Reinit(v6, *(void *)(v3 + 8), a2);
      uint64_t v7 = *(void **)(v3 + 24);
    }
    else
    {
      uint64_t v7 = *(void **)(v3 + 176);
      if (v7)
      {
        *(void *)(v3 + 176) = v7[5];
      }
      else
      {
        uint64_t v7 = (void *)fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Allocate((void *)(v3 + 128), 1);
        void v7[5] = 0;
      }
      uint64_t v8 = *(void *)(v3 + 8);
      _DWORD v7[4] = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v8 + 136))(v8, a2, v7);
      *(void *)(v3 + 24) = v7;
    }
    if (*v7) {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 80))(*v7, 16, 16);
    }
    unint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 8) + 40))(*(void *)(v3 + 8), a2);
    *(void *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 104) = a2;
  }
  return result;
}

void sub_1B228E430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Reinit(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (!v6) {
    goto LABEL_5;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a3);
  if (result) {
    return result;
  }
  if (*a1)
  {
    (*(void (**)(void))(*(void *)*a1 + 8))(*a1);
  }
  else
  {
LABEL_5:
    uint64_t v8 = (_DWORD *)a1[3];
    if (v8) {
      --*v8;
    }
  }
  a1[4] = 0;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 136);
  return v9(a2, a3, a1);
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Find(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 113) = 1;
  if (*(unsigned char *)(a1 + 114))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(unsigned char *)(a1 + 112) = a2 == 0;
    if (a2 == -1) {
      int v4 = 0;
    }
    else {
      int v4 = a2;
    }
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Search(a1) & 1) != 0
        || *(unsigned char *)(a1 + 112) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Search(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 24);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 32)) {
      uint64_t v3 = 2;
    }
    else {
      uint64_t v3 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 80))(v2, v3, 15);
  }
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    int v4 = *(void **)(a1 + 24);
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 56))(*v4);
    }
    else {
      v4[4] = 0;
    }
    while (1)
    {
      char v14 = *(void **)(a1 + 24);
      if (*v14)
      {
        if ((*(uint64_t (**)(void))(*(void *)*v14 + 24))(*v14)) {
          return 0;
        }
      }
      else if (v14[4] >= v14[2])
      {
        return 0;
      }
      uint64_t v15 = *(uint64_t **)(a1 + 24);
      uint64_t v16 = *v15;
      if (*(_DWORD *)(a1 + 32))
      {
        uint64_t v17 = v16 ? (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16) : v15[1] + 56 * v15[4];
        uint64_t v18 = (_DWORD *)(v17 + 4);
      }
      else
      {
        uint64_t v18 = (_DWORD *)(v16 ? (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16) : v15[1] + 56 * v15[4]);
      }
      int v19 = *(_DWORD *)(a1 + 40);
      int v20 = *v18 <= v19 ? 0 : 7;
      if (*v18 == v19) {
        int v20 = 1;
      }
      if (v20) {
        break;
      }
      std::string::size_type v21 = *(void **)(a1 + 24);
      if (*v21) {
        (*(void (**)(void))(*(void *)*v21 + 40))(*v21);
      }
      else {
        ++v21[4];
      }
    }
    uint64_t result = 0;
    if (v20 == 1) {
      return 1;
    }
    return result;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  if (!v5)
  {
    unint64_t v6 = 0;
LABEL_53:
    long long v23 = *(uint64_t **)(a1 + 24);
    uint64_t result = *v23;
    if (*v23)
    {
      (*(void (**)(uint64_t, unint64_t))(*(void *)result + 64))(result, v6);
      return 0;
    }
    else
    {
      v23[4] = v6;
    }
    return result;
  }
  unint64_t v6 = 0;
  while (1)
  {
    unint64_t v7 = (v5 + v6) >> 1;
    uint64_t v8 = *(void **)(a1 + 24);
    if (*v8) {
      (*(void (**)(void, unint64_t))(*(void *)*v8 + 64))(*v8, (v5 + v6) >> 1);
    }
    else {
      void v8[4] = v7;
    }
    uint64_t v9 = *(uint64_t **)(a1 + 24);
    uint64_t v10 = *v9;
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v11 = v10 ? (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10) : v9[1] + 56 * v9[4];
      uint64_t v12 = (_DWORD *)(v11 + 4);
    }
    else
    {
      uint64_t v12 = (_DWORD *)(v10 ? (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10) : v9[1] + 56 * v9[4]);
    }
    int v13 = *(_DWORD *)(a1 + 40);
    if (*v12 <= v13) {
      break;
    }
    unint64_t v5 = (v5 + v6) >> 1;
LABEL_25:
    if (v6 >= v5) {
      goto LABEL_53;
    }
  }
  if (*v12 < v13)
  {
    unint64_t v6 = v7 + 1;
    goto LABEL_25;
  }
  while (v7 > v6)
  {
    uint64_t v24 = *(void **)(a1 + 24);
    --v7;
    if (*v24) {
      (*(void (**)(void, unint64_t))(*(void *)*v24 + 64))(*v24, v7);
    }
    else {
      v24[4] = v7;
    }
    long long v25 = *(uint64_t **)(a1 + 24);
    uint64_t v26 = *v25;
    if (*(_DWORD *)(a1 + 32))
    {
      if (v26) {
        uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 32))(v26);
      }
      else {
        uint64_t v27 = v25[1] + 56 * v25[4];
      }
      std::string::size_type v28 = (_DWORD *)(v27 + 4);
    }
    else if (v26)
    {
      std::string::size_type v28 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 32))(v26);
    }
    else
    {
      std::string::size_type v28 = (_DWORD *)(v25[1] + 56 * v25[4]);
    }
    if (*v28 != *(_DWORD *)(a1 + 40))
    {
      char v29 = *(void **)(a1 + 24);
      unint64_t v30 = v7 + 1;
      if (*v29) {
        (*(void (**)(void, unint64_t))(*(void *)*v29 + 64))(*v29, v30);
      }
      else {
        v29[4] = v30;
      }
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112)) {
    return 0;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (*v3)
  {
    if ((*(uint64_t (**)(void))(*(void *)*v3 + 24))(*v3)) {
      return 1;
    }
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 113)) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = **(void **)(a1 + 24);
  if (v5)
  {
    if (v4) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 80))(v5, v6, 15);
    int v4 = *(_DWORD *)(a1 + 32);
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *v7;
  if (v4)
  {
    if (v8) {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
    }
    else {
      uint64_t v9 = v7[1] + 56 * v7[4];
    }
    uint64_t v10 = (_DWORD *)(v9 + 4);
  }
  else if (v8)
  {
    uint64_t v10 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
  }
  else
  {
    uint64_t v10 = (_DWORD *)(v7[1] + 56 * v7[4]);
  }
  return *v10 != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Value(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112)) {
    return a1 + 56;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (!*v3) {
    return v3[1] + 56 * v3[4];
  }
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 80))(*v3, 15, 15);
  uint64_t v3 = *(void **)(a1 + 24);
  if (!*v3) {
    return v3[1] + 56 * v3[4];
  }
  int v4 = *(uint64_t (**)(void))(*(void *)*v3 + 32);
  return v4();
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Next(uint64_t result)
{
  if (*(unsigned char *)(result + 112))
  {
    *(unsigned char *)(result + 112) = 0;
  }
  else
  {
    uint64_t v1 = *(uint64_t **)(result + 24);
    uint64_t result = *v1;
    if (*v1) {
      return (*(uint64_t (**)(void))(*(void *)result + 40))();
    }
    else {
      ++v1[4];
    }
  }
  return result;
}

void fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ComposeFst(void *a1)
{
  fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Start(uint64_t a1)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Start(*(void *)(a1 + 8));
}

void *fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    unint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Copy()
{
}

void sub_1B228EE80(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B228EF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B228F070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitStateIterator()
{
}

void sub_1B228F16C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitMatcher(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a1, a2);
}

uint64_t fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::IsMemoryMapped()
{
  return 0;
}

void fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::CreateBase2<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B228F35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Type()
{
  {
    operator new();
  }
  return fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Type(void)::type;
}

void sub_1B228F4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  MEMORY[0x1B3EA8670](v21, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3AF00;
  uint64_t v8 = *(__n128 **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  __n128 v9 = *v8;
  *(__n128 *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 32))(v9.n128_u64[0], v9);
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 32))(*(void *)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B228F778(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::CacheBaseImpl(a1, a4);
  void *v7 = &unk_1F0A3DC68;
  fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitBase((uint64_t)v7, a2, a3);
  return a1;
}

void sub_1B228F840(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 144) + 48))(*(void *)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 1) != 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v13 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v14 = (void *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
  }
  else if (((*(uint64_t (**)(void))(**(void **)(a1 + 152) + 48))(*(void *)(a1 + 152)) & 1) != 0 {
         && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 1))
  }
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v3 = (void *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
  }
  else
  {
    int v4 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0);
    int v5 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0);
    if (v5) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = v4 == 1;
    }
    if (v6) {
      int v7 = 2;
    }
    else {
      int v7 = 1;
    }
    BOOL v8 = v4 == 1;
    if (v4 == 1) {
      int v9 = v7;
    }
    else {
      int v9 = 0;
    }
    if (v8 || v5 == 0) {
      goto LABEL_36;
    }
    int v9 = 1;
    if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 1) == 1) {
      goto LABEL_36;
    }
    if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 1))
    {
      int v9 = 0;
      goto LABEL_36;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v9 = 3;
LABEL_36:
  *(_DWORD *)(a1 + 184) = v9;
}

void sub_1B228FB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B228FDA4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  int v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B228FF50(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C402C4AA645);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1[22] + 80);
  uint64_t v7 = (unsigned int *)(v6 + 12 * a2);
  uint64_t v8 = *v7;
  (*(void (**)(float *__return_ptr))(**(void **)(a1[18] + 8) + 32))(&v23);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v19);
  float v14 = v23;
  float v30 = v19;
  v9.n128_f32[0] = v23;
  BOOL v10 = v23 == v19
     && (v30 = v24[1], float v14 = v24[0], v28 = v20[1], v29 = v20[0], v9.n128_f32[0] = v24[0], v24[0] == v20[0])
     && (v9.n128_f32[0] = v30, v30 == v28)
     && v26 - (unsigned char *)v25 == v22 - (unsigned char *)__p
     && memcmp(v25, __p, v26 - (unsigned char *)v25) == 0;
  if (__p)
  {
    int64_t v22 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    *(float *)a3 = v23;
    *(void *)(a3 + 4) = *(void *)v24;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a3 + 16), v25, (uint64_t)v26, (v26 - (unsigned char *)v25) >> 2);
  }
  else
  {
    int v11 = v7[1];
    (*(void (**)(float *__return_ptr, __n128))(**(void **)(a1[19] + 8) + 32))(&v19, v9);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v14);
    float v30 = v19;
    float v29 = v14;
    BOOL v12 = v19 == v14
       && (v29 = v20[1], v30 = v20[0], v28 = v15, float v27 = v16, v20[0] == v15)
       && v29 == v27
       && v22 - (unsigned char *)__p == v18 - (unsigned char *)v17
       && memcmp(__p, v17, v22 - (unsigned char *)__p) == 0;
    if (v17)
    {
      char v18 = v17;
      operator delete(v17);
    }
    if (v12)
    {
      *(float *)a3 = v19;
      *(void *)(a3 + 4) = *(void *)v20;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a3 + 16), __p, (uint64_t)v22, (v22 - (unsigned char *)__p) >> 2);
    }
    else
    {
      uint64_t v13 = a1[17];
      LOBYTE(v14) = *(unsigned char *)(v6 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetState(v13, v8, v11, &v14);
      fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)&v23, (uint64_t)&v19, a3);
    }
    if (__p)
    {
      int64_t v22 = __p;
      operator delete(__p);
    }
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
}

void sub_1B2290318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FDC0;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38CB8;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    operator new();
  }
  *(void *)(a1 + 120) = v4;
  *(unsigned char *)(a1 + 128) = v4 == 0;
  return a1;
}

void sub_1B22904A0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  uint64_t v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "compose");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
  uint64_t v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  if (!fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
    }
    uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)&__str);
    __n128 v9 = (void *)fst::cerr(v8);
    BOOL v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ComposeFst: output symbol table of 1st argument ", 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"does not match input symbol table of 2nd argument", 49);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v11);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120))(a3);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v12);
}

void sub_1B22906AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(void *a1)
{
  *a1 = &unk_1F0A38CB8;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    unsigned int v3 = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorCacheStore(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  }
  uint64_t v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitMatcher()
{
  return 0;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FDC0;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorCacheStore(void *a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1B22908F8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  std::__list_imp<char *>::clear(v2);
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Clear(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2 != a1[1])
  {
    unint64_t v3 = 0;
    uint64_t v2 = a1[1];
    do
    {
      fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(*(void *)(v2 + 8 * v3++));
      uint64_t v2 = a1[1];
    }
    while (v3 < (a1[2] - v2) >> 3);
  }
  a1[2] = v2;
  return std::__list_imp<char *>::clear(a1 + 4);
}

void fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(uint64_t a1)
{
  if (a1)
  {
    unint64_t v3 = (void **)(a1 + 56);
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    uint64_t v2 = *(void **)(a1 + 16);
    if (v2)
    {
      *(void *)(a1 + 24) = v2;
      operator delete(v2);
    }
    operator delete((void *)a1);
  }
}

void *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorCacheStore(void *a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B2290B18(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C4012E4573CLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3AF00;
  uint64_t v2 = (uint64_t *)a1[17];
  if (v2)
  {
    unint64_t v3 = fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40AD892F49);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(a1);
}

uint64_t *fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~SequenceComposeFilter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B2290D78(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_1B2290E74(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FDC0;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38CB8;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_1B229101C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1) {
      MutableState = 0;
    }
    else {
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 80) = MutableState;
  }
  return a1;
}

char *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    uint64_t v13 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v13);
  }
  else
  {
    uint64_t v8 = *(char **)(v6 + 8 * a2);
    if (v8) {
      return v8;
    }
  }
  uint64_t v8 = (char *)operator new(0x58uLL);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)v8);
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(void *)(*(void *)(a1 + 8) + 8 * v4) = v8;
  if (*(unsigned char *)a1)
  {
    __n128 v9 = operator new(0x18uLL);
    v9[4] = a2;
    uint64_t v11 = *(void *)(a1 + 32);
    BOOL v10 = (void *)(a1 + 32);
    *(void *)__n128 v9 = v11;
    *((void *)v9 + 1) = v10;
    *(void *)(v11 + 8) = v9;
    *BOOL v10 = v9;
    ++v10[2];
  }
  return v8;
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Clear(a1);
  uint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        uint64_t v8 = operator new(0x58uLL);
        fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::CacheState((uint64_t)v8, v7);
        if (*(unsigned char *)a1)
        {
          __n128 v9 = operator new(0x18uLL);
          v9[4] = v6;
          uint64_t v10 = a1[4];
          *(void *)__n128 v9 = v10;
          *((void *)v9 + 1) = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      uint64_t v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          char v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        }
        else {
          char v18 = 0;
        }
        float v19 = &v18[8 * v14];
        *(void *)float v19 = v8;
        uint64_t v13 = v19 + 8;
        uint64_t v21 = (char *)a1[1];
        int v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          int v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v8;
        uint64_t v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::CacheState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  long long v4 = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*>>((void *)(a1 + 56), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
  *(void *)(a1 + 80) = *(unsigned int *)(a2 + 80);
  return a1;
}

void sub_1B22913D4(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B2291458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  unsigned int v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(a1, v4, v6);
      v6 += 56;
      uint64_t v4 = v12 + 56;
      v12 += 56;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B2291510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  uint64_t v4 = *(void *)(a3 + 12);
  *(void *)(a2 + 24) = 0;
  uint64_t v5 = a2 + 24;
  *(void *)(a2 + 12) = v4;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a2 + 24), *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 2);
  *(_DWORD *)(v5 + 24) = *(_DWORD *)(a3 + 48);
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 - 32);
    if (v3)
    {
      *(void *)(v1 - 24) = v3;
      operator delete(v3);
    }
    v1 -= 56;
  }
}

uint64_t fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SequenceComposeFilter(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, a3);
  *(void *)(a1 + 8) = (*(uint64_t (**)(void, uint64_t))(*(void *)a2[1] + 16))(a2[1], a3);
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = (*(uint64_t (**)(void))(**(void **)a1 + 32))();
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetState(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(unsigned char *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(unsigned char *)(a1 + 32) = *a4;
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), a2);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 32))(&v15);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v10);
    BOOL v8 = 0;
    int v22 = v15;
    float v21 = v10;
    if (*(float *)&v15 == v10)
    {
      int v22 = HIDWORD(v15);
      float v21 = v16;
      float v20 = v11;
      float v19 = v12;
      BOOL v8 = *((float *)&v15 + 1) == v11
        && v21 == v19
        && v18 - (unsigned char *)v17 == v14 - (unsigned char *)__p
        && memcmp(v17, __p, v18 - (unsigned char *)v17) == 0;
    }
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
    if (v17)
    {
      char v18 = v17;
      operator delete(v17);
    }
    BOOL v9 = v6 == v7 && v8;
    *(unsigned char *)(a1 + 33) = v9;
    *(unsigned char *)(a1 + 34) = v7 == 0;
  }
}

void sub_1B22918AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 144) + 8) + 40))(*(void *)(*(void *)(a1 + 144) + 8));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 152) + 8) + 40))(*(void *)(*(void *)(a1 + 152) + 8), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    float v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    float v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B2291A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetState(a7, a4);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v15);
  LODWORD(v19) = a8 - 1;
  HIDWORD(v19) = a8 << 31 >> 31;
  int v20 = v15;
  uint64_t v21 = *(void *)((char *)&v15 + 4);
  float v23 = 0;
  uint64_t v24 = 0;
  int v22 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v22, __p, (uint64_t)v17, (v17 - (unsigned char *)__p) >> 2);
  int v25 = a6;
  if (__p)
  {
    unint64_t v17 = (char *)__p;
    operator delete(__p);
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(a1, a2, a7, &v19, a8);
  unint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a5 + 136))(a5, a6, &v15);
  while (1)
  {
    if (!(void)v15)
    {
      if (v18 >= (unint64_t)__p) {
        goto LABEL_15;
      }
LABEL_9:
      char v14 = (uint64_t *)(*((void *)&v15 + 1) + 56 * v18);
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15 + 24))(v15)) {
      break;
    }
    if (!(void)v15) {
      goto LABEL_9;
    }
    char v14 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v15 + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(a1, a2, a7, v14, a8);
    if ((void)v15) {
      (*(void (**)(void))(*(void *)v15 + 40))(v15);
    }
    else {
      ++v18;
    }
  }
  if ((void)v15)
  {
    (*(void (**)(void))(*(void *)v15 + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v17) {
    --*(_DWORD *)v17;
  }
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetArcs(a1, a2);
  if (v22)
  {
    float v23 = v22;
    operator delete(v22);
  }
}

void sub_1B2291C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, int a5)
{
  float v10 = (int *)a4 + 1;
  if (!a5) {
    float v10 = (int *)a4;
  }
  BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Find(a3, *v10);
  if (result)
  {
    for (BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(a3);
          !result;
          BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(a3))
    {
      uint64_t v12 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Value(a3);
      uint64_t v31 = *(void *)v12;
      int v32 = *(_DWORD *)(v12 + 8);
      uint64_t v33 = *(void *)(v12 + 12);
      std::string::size_type v35 = 0;
      uint64_t v36 = 0;
      double v34 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v34, *(const void **)(v12 + 24), *(void *)(v12 + 32), (uint64_t)(*(void *)(v12 + 32) - *(void *)(v12 + 24)) >> 2);
      int v37 = *(_DWORD *)(v12 + 48);
      uint64_t v24 = *a4;
      int v25 = *((_DWORD *)a4 + 2);
      uint64_t v26 = *(uint64_t *)((char *)a4 + 12);
      float v28 = 0;
      uint64_t v29 = 0;
      uint64_t v13 = (const void *)a4[3];
      uint64_t v14 = a4[4];
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v13, v14, (v14 - (uint64_t)v13) >> 2);
      int v30 = *((_DWORD *)a4 + 12);
      if (a5)
      {
        long long v15 = *(unsigned __int8 **)(a1 + 136);
        if (HIDWORD(v24) != -1)
        {
          if (v31 == -1)
          {
            int v19 = v15[32];
            if (v19) {
              char v20 = -1;
            }
            else {
              char v20 = 0;
            }
            char v23 = v20;
            if (v19) {
              goto LABEL_34;
            }
          }
          else
          {
            if (HIDWORD(v24)) {
              char v16 = 0;
            }
            else {
              char v16 = -1;
            }
            char v23 = v16;
            if (!HIDWORD(v24)) {
              goto LABEL_34;
            }
          }
          goto LABEL_28;
        }
        if (!v15[33])
        {
          char v23 = v15[34] ^ 1;
LABEL_28:
          fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, (int *)&v24, (uint64_t)&v31, &v23);
        }
      }
      else
      {
        unint64_t v17 = *(unsigned __int8 **)(a1 + 136);
        if (HIDWORD(v31) != -1)
        {
          if (v24 == -1)
          {
            int v21 = v17[32];
            if (v21) {
              char v22 = -1;
            }
            else {
              char v22 = 0;
            }
            char v23 = v22;
            if (v21) {
              goto LABEL_34;
            }
          }
          else
          {
            if (HIDWORD(v31)) {
              char v18 = 0;
            }
            else {
              char v18 = -1;
            }
            char v23 = v18;
            if (!HIDWORD(v31)) {
              goto LABEL_34;
            }
          }
          goto LABEL_33;
        }
        if (!v17[33])
        {
          char v23 = v17[34] ^ 1;
LABEL_33:
          fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, (int *)&v31, (uint64_t)&v24, &v23);
        }
      }
LABEL_34:
      if (__p)
      {
        float v28 = __p;
        operator delete(__p);
      }
      if (v34)
      {
        std::string::size_type v35 = v34;
        operator delete(v34);
      }
      fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Next(a3);
    }
  }
  return result;
}

void sub_1B2291F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetArcs(uint64_t a1, int a2)
{
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = *((void *)MutableState + 7);
  uint64_t v6 = *((void *)MutableState + 8) - v5;
  if (v6)
  {
    unint64_t v7 = v6 / 56;
    int v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    BOOL v9 = (int *)(v5 + 48);
    do
    {
      int v11 = *v9;
      v9 += 14;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 20) |= 0xAu;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(uint64_t a1, int a2, int *a3, uint64_t a4, char *a5)
{
  int v7 = *(_DWORD *)(a4 + 48);
  LODWORD(v22) = a3[12];
  HIDWORD(v22) = v7;
  char v23 = *a5;
  int v8 = *a3;
  int v9 = *(_DWORD *)(a4 + 4);
  fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)(a3 + 2), a4 + 8, (uint64_t)&v12);
  int Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(a1 + 176), &v22, 1);
  v16[0] = v8;
  v16[1] = v9;
  void v16[2] = v12;
  uint64_t v17 = v13;
  int v19 = 0;
  uint64_t v20 = 0;
  char v18 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, __p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 2);
  int v21 = Id;
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
  MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::PushArc(MutableState, (uint64_t)v16);
  if (v18)
  {
    int v19 = v18;
    operator delete(v18);
  }
}

void sub_1B22920FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6 = *(float *)a1;
  float v7 = NAN;
  if (*(float *)a1 != -INFINITY)
  {
    float v8 = *(float *)a2;
    float v7 = NAN;
    if (*(float *)a2 != -INFINITY)
    {
      BOOL v9 = v8 == INFINITY || v6 == INFINITY;
      float v10 = v6 + v8;
      if (v9) {
        float v7 = INFINITY;
      }
      else {
        float v7 = v10;
      }
    }
  }
  float32x2_t v18 = vadd_f32(*(float32x2_t *)(a1 + 4), *(float32x2_t *)(a2 + 4));
  int v11 = (float *)fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero();
  *(float *)&v19.__begin_ = v7;
  float v22 = 0.0;
  float v22 = *v11;
  if (v7 == v22
    && (float v22 = v18.f32[1],
        LODWORD(v19.__begin_) = v18.i32[0],
        float v21 = 0.0,
        float v21 = v11[1],
        float v20 = 0.0,
        float v20 = v11[2],
        v18.f32[0] == v21)
    && v22 == v20)
  {
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(a3);
  }
  else
  {
    memset(&v19, 0, sizeof(v19));
    std::vector<int>::resize(&v19, ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2)+ ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2));
    std::vector<unsigned int>::pointer begin = v19.__begin_;
    uint64_t v13 = *(unsigned char **)(a1 + 16);
    uint64_t v14 = *(unsigned char **)(a1 + 24);
    int64_t v15 = v14 - v13;
    if (v14 != v13) {
      memmove(v19.__begin_, v13, v14 - v13);
    }
    char v16 = *(unsigned char **)(a2 + 16);
    uint64_t v17 = *(unsigned char **)(a2 + 24);
    if (v17 != v16) {
      memmove((char *)begin + v15, v16, v17 - v16);
    }
    *(float *)a3 = v7;
    *(float32x2_t *)(a3 + 4) = v18;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a3 + 16), v19.__begin_, (uint64_t)v19.__end_, v19.__end_ - v19.__begin_);
    if (v19.__begin_)
    {
      v19.__end_ = v19.__begin_;
      operator delete(v19.__begin_);
    }
  }
}

void sub_1B2292308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero()
{
  {
    operator new();
  }
  return fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero(void)::zero;
}

void sub_1B22923B0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1000C403E1C8BA9);
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero(void)::zero;
}

void sub_1B2292468(_Unwind_Exception *a1)
{
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::GetMutableState(a1, a2);
  uint64_t v4 = MutableState;
  if (*(unsigned char *)(a1 + 88))
  {
    int v5 = *((_DWORD *)MutableState + 20);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 20) = v5 | 4;
      unint64_t v6 = *((void *)MutableState + 8) - *((void *)MutableState + 7) + *(void *)(a1 + 112) + 88;
      *(void *)(a1 + 112) = v6;
      *(unsigned char *)(a1 + 104) = 1;
      if (v6 > *(void *)(a1 + 96)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

uint64_t fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[9];
  uint64_t v3 = (uint64_t)(a1 + 9);
  unint64_t v5 = *(void *)(v3 - 8);
  if (v5 >= v4)
  {
    uint64_t result = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(a1 + 7, a2);
  }
  else
  {
    std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(v3, *(void *)(v3 - 8), a2);
    uint64_t result = v5 + 56;
    a1[8] = v5 + 56;
  }
  a1[8] = result;
  return result;
}

void sub_1B2292560(_Unwind_Exception *a1)
{
  *(void *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2) {
    return *(char **)(a1 + 80);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 76) = a2;
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 80) = MutableState;
      *((_DWORD *)MutableState + 20) |= 4u;
      std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::reserve((uint64_t *)MutableState + 7, 0x80uLL);
      return *(char **)(a1 + 80);
    }
    uint64_t v5 = *(void *)(a1 + 80);
    if (!*(_DWORD *)(v5 + 84))
    {
      *(_DWORD *)(a1 + 76) = a2;
      fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Reset(v5);
      uint64_t result = *(char **)(a1 + 80);
      *((_DWORD *)result + 20) |= 4u;
      return result;
    }
    *(_DWORD *)(v5 + 80) &= ~4u;
    *(unsigned char *)(a1 + 72) = 0;
  }
  int v6 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      float v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      BOOL v9 = (void *)fst::cerr(v8);
      float v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      int v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      int v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache std::string::size_type size = ", 15);
      uint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache fralong long c = ", 15);
      uint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      int64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    uint64_t v17 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      int v18 = *(_DWORD *)(v17 + 16);
      if (v18) {
        int v19 = v18 - 1;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 76);
      }
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::GetMutableState(a1, v19);
      unint64_t v21 = *(void *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 21))
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v22 = *((_DWORD *)MutableState + 20);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              unint64_t v23 = *((void *)MutableState + 8) - *((void *)MutableState + 7) + 88;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Delete((void *)a1);
            uint64_t v17 = *(void *)(a1 + 56);
            continue;
          }
        }
        else
        {
          int v22 = *((_DWORD *)MutableState + 20);
          if ((v22 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      *((_DWORD *)MutableState + 20) &= ~8u;
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
      *(void *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 112) <= v16)
    {
      unint64_t v24 = *(void *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          uint64_t v25 = *(void *)(a1 + 96);
          do
          {
            v25 *= 2;
            BOOL v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(void *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        float v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        float v28 = (void *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      uint64_t v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      int v30 = (void *)fst::cerr(v29);
      uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      int v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      uint64_t v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache std::string::size_type size = ", 15);
      double v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache fralong long c = ", 15);
      std::string::size_type v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      uint64_t v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
    }
  }
}

void sub_1B2292A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Reset(uint64_t a1)
{
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v2);
  *(_DWORD *)a1 = v2;
  *(void *)(a1 + 4) = v3;
  if (&v2 != (int *)a1) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 16), (char *)__p, (uint64_t)v5, (v5 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100]((uint64_t *)(a1 + 56));
}

void sub_1B2292B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    _DWORD v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B2292BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  unsigned int v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 56;
      std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(a1, v7 - 56, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 56;
      *((void *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1B2292D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 24);
    if (v3)
    {
      *(void *)(v1 + 32) = v3;
      operator delete(v3);
    }
    v1 += 56;
  }
}

uint64_t std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v2 - 56;
    uint64_t v5 = *(void **)(v2 - 32);
    if (v5)
    {
      *(void *)(v2 - 24) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 56;
    }
  }
}

uint64_t fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 16), *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  }
  return a1;
}

void fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Delete(void *a1)
{
  int v1 = *(_DWORD *)(a1[7] + 16);
  if (!v1 || v1 - 1 == *((_DWORD *)a1 + 19))
  {
    *((_DWORD *)a1 + 19) = -1;
    a1[10] = 0;
  }
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Delete(a1);
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Delete(void *a1)
{
  fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(*(void *)(a1[1] + 8 * *(int *)(a1[7] + 16)));
  uint64_t v2 = a1[6];
  *(void *)(a1[1] + 8 * *(int *)(a1[7] + 16)) = 0;
  uint64_t v3 = (uint64_t *)a1[7];
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  *(void *)(v5 + 8) = v4;
  *(void *)v3[1] = v5;
  a1[6] = v2 - 1;
  a1[7] = v4;
  operator delete(v3);
}

uint64_t std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  float v10 = v7;
  uint64_t v11 = &v7[56 * v3];
  uint64_t v13 = &v7[56 * v6];
  std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  int v12 = v11 + 56;
  std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1B2293044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 104))
  {
    if ((*(unsigned char *)(a2 + 80) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 64) - *(void *)(a2 + 56) + *(void *)(a1 + 112);
      *(void *)(a1 + 112) = v4;
      if (v4 > *(void *)(a1 + 96))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GC(a1, (char *)a2, 0, 0.666);
      }
    }
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3CE60;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 144) + 16))(*(void *)(a3 + 144), 0);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 152) + 16))(*(void *)(a3 + 152), 0);
  *(unsigned char *)(a1 + 48) = 0;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v8);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 64) = v8;
  *(void *)(a1 + 68) = v9;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 80), __p, (uint64_t)v11, (v11 - (unsigned char *)__p) >> 2);
  *(_DWORD *)(a1 + 104) = -1;
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  if (a4 == 1) {
    *(int32x2_t *)(a1 + 56) = vrev64_s32(*(int32x2_t *)(a1 + 56));
  }
  return a1;
}

void sub_1B229321C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B22932CC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F1C402C4AA645);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != 4
        || (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) == 4
          && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 168)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 24) = a2;
    uint64_t v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetState(*(void *)(result + 32), *v3);
    uint64_t result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetState(*(void *)(v2 + 40), v4);
    *(_DWORD *)(v2 + 104) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)(a1 + 40);
      uint64_t v3 = (uint64_t *)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 32);
    uint64_t v3 = (uint64_t *)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(*(void *)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(v2);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 56;
  }
  else {
    return a1 + 112;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void *)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void *)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3CE60;
  uint64_t v2 = a1[4];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void *)a1[17];
  if (v4)
  {
    a1[18] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A3CE60;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 32) + 16))(*(void *)(a2 + 32), a3);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 40) + 16))(*(void *)(a2 + 40), a3);
  *(unsigned char *)(a1 + 48) = 0;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)v10);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)v10;
  *(void *)(a1 + 68) = *(void *)&v10[4];
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 80), __p, (uint64_t)v12, (v12 - (unsigned char *)__p) >> 2);
  *(_DWORD *)(a1 + 104) = -1;
  if (__p)
  {
    int v12 = __p;
    operator delete(__p);
  }
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  if (a3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(v10, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(v10, "ERROR");
    }
    unint64_t v6 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)v10);
    uint64_t v7 = (void *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (SHIBYTE(__p) < 0) {
      operator delete(*(void **)v10);
    }
    *(unsigned char *)(a1 + 168) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1) {
    *(int32x2_t *)(a1 + 56) = vrev64_s32(*(int32x2_t *)(a1 + 56));
  }
  return a1;
}

void sub_1B2293960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
  if (a18 < 0) {
    operator delete(__p);
  }
  unint64_t v23 = *v21;
  if (*v21)
  {
    *(void *)(v19 + 144) = v23;
    operator delete(v23);
  }
  unint64_t v24 = *v20;
  if (*v20)
  {
    *(void *)(v19 + 88) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Find(a3, a2);
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Value(a3);
    float v10 = (int *)(v9 + 4);
    if (v8) {
      float v10 = (int *)v9;
    }
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Find(a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(a2)
       || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(a3))
  {
    if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(a3))
    {
      fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Next(a2);
      while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(a2))
      {
        int v6 = *(_DWORD *)(a1 + 28);
        uint64_t v7 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Value(a2);
        int v8 = (int *)(v7 + 4);
        if (v6) {
          int v8 = (int *)v7;
        }
        if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Find(a3, *v8))
        {
          break;
        }
        fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Next(a2);
      }
    }
    while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(a3))
    {
      uint64_t v9 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Value(a2);
      uint64_t v10 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Value(a3);
      fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Next(a3);
      uint64_t v11 = *(unsigned int *)(a1 + 24);
      if (*(_DWORD *)(a1 + 28)) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = v9;
      }
      uint64_t v22 = *(void *)v12;
      int v23 = *(_DWORD *)(v12 + 8);
      uint64_t v24 = *(void *)(v12 + 12);
      BOOL v26 = 0;
      uint64_t v27 = 0;
      uint64_t v25 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v25, *(const void **)(v12 + 24), *(void *)(v12 + 32), (uint64_t)(*(void *)(v12 + 32) - *(void *)(v12 + 24)) >> 2);
      int v28 = *(_DWORD *)(v12 + 48);
      if (!*(_DWORD *)(a1 + 28)) {
        uint64_t v9 = v10;
      }
      uint64_t v15 = *(void *)v9;
      int v16 = *(_DWORD *)(v9 + 8);
      uint64_t v17 = *(void *)(v9 + 12);
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v9 + 24), *(void *)(v9 + 32), (uint64_t)(*(void *)(v9 + 32) - *(void *)(v9 + 24)) >> 2);
      int v21 = *(_DWORD *)(v9 + 48);
      char matched = fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v11, &v22, &v15);
      if (__p)
      {
        uint64_t v19 = __p;
        operator delete(__p);
      }
      if (v25)
      {
        BOOL v26 = v25;
        operator delete(v25);
      }
      if (matched) {
        return 1;
      }
    }
  }
  return 0;
}

void sub_1B2293C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v5 = *(unsigned __int8 **)(*(void *)(a1 + 16) + 136);
  int v6 = a3[1];
  if (v6 == -1)
  {
    if (v5[33]) {
      return 0;
    }
    LOBYTE(v5) = v5[34] ^ 1;
  }
  else if (*a4 == -1)
  {
    uint64_t v7 = 0;
    LODWORD(v5) = v5[32];
    if (v5) {
      return v7;
    }
  }
  else
  {
    LOBYTE(v5) = 0;
    if (!v6) {
      return 0;
    }
  }
  int v8 = a4[12];
  LODWORD(v14) = a3[12];
  HIDWORD(v14) = v8;
  char v15 = (char)v5;
  *(_DWORD *)(a1 + 112) = *a3;
  *(_DWORD *)(a1 + 1kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = a4[1];
  fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)(a3 + 2), (uint64_t)(a4 + 2), (uint64_t)&v10);
  *(_DWORD *)(a1 + 120) = v10;
  *(void *)(a1 + 124) = v11;
  if ((int *)(a1 + 120) != &v10) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 136), (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  uint64_t v7 = 1;
  *(_DWORD *)(a1 + 160) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(*(void *)(a1 + 16) + 176), &v14, 1);
  return v7;
}

void sub_1B2293D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Type()
{
  {
    operator new();
  }
  return fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Type(void)::type;
}

void sub_1B2293E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(unsigned char *)(a1 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3) {
          *(_DWORD *)(a1 + 68) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

void *fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 72))(&v12, a1, a2);
    int v7 = v12;
    uint64_t v8 = v13;
    int v10 = 0;
    uint64_t v11 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v14, (uint64_t)v15, (v15 - (unsigned char *)v14) >> 2);
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetFinal(a1, a2, &v7);
    if (__p)
    {
      int v10 = __p;
      operator delete(__p);
    }
    if (v14)
    {
      char v15 = v14;
      operator delete(v14);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final(a1, a2, a3);
}

void sub_1B2294074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  int v5 = *a3;
  uint64_t v6 = *(void *)(a3 + 1);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)a3 + 2), *((void *)a3 + 3), (uint64_t)(*((void *)a3 + 3) - *((void *)a3 + 2)) >> 2);
  *(_DWORD *)MutableState = v5;
  *(void *)(MutableState + 4) = v6;
  if (MutableState != (char *)&v5) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(MutableState + 16, (char *)__p, (uint64_t)v8, (v8 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  *((_DWORD *)MutableState + 20) |= 9u;
}

void sub_1B2294160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v5 + 76) == a2) {
    uint64_t v6 = (uint64_t *)(v5 + 80);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(v5 + 8) + 8 * (a2 + 1));
  }
  uint64_t v7 = *v6;
  *(_DWORD *)a3 = *(_DWORD *)v7;
  *(void *)(a3 + 4) = *(void *)(v7 + 4);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a3 + 16), *(const void **)(v7 + 16), *(void *)(v7 + 24), (uint64_t)(*(void *)(v7 + 24) - *(void *)(v7 + 16)) >> 2);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumArcs(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)v5 + 64) - *(void *)(*(void *)v5 + 56)) >> 3);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumInputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 40);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumOutputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 48);
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      uint64_t v9 = (void *)fst::cerr(v8);
      int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(a1, a2, a3, 1);
  }
}

void sub_1B22944B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v9 = v8;
  if (!a4
    || (uint64_t v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    unint64_t v9 = v8 & 7;
    unint64_t v98 = v9;
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      uint64_t v92 = 0;
      v93[0] = 0;
      v93[1] = 0;
      uint64_t v94 = &v98;
      fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, (uint64_t)&v92);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0) {
      goto LABEL_175;
    }
    int v71 = a3;
    uint64_t v12 = a2 & 0xC0000;
    uint64_t v13 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0) {
      uint64_t v13 = 0x10425A850000;
    }
    unint64_t v14 = v9 | v13;
    uint64_t v15 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0) {
      v14 |= 0x100000uLL;
    }
    unint64_t v98 = v14;
    memset(&v91, 0, sizeof(v91));
    memset(&v90, 0, sizeof(v90));
    unsigned int v89 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v87);
    int v16 = 0;
LABEL_12:
    if (!v87)
    {
      if ((int)v89 >= v88) {
        goto LABEL_167;
      }
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v87 + 16))(v87))
    {
      if (v87)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v87 + 24))();
LABEL_18:
        std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v17);
        uint64_t v94 = 0;
        uint64_t v95 = 0;
        uint64_t v96 = 0;
        v91.__end_ = v91.__begin_;
        v90.__end_ = v90.__begin_;
        if (v12) {
          std::vector<int>::reserve(&v91, v18);
        }
        if (v15) {
          std::vector<int>::reserve(&v90, v18);
        }
        unint64_t v86 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 136))(a1, v17, &v82);
        char v19 = 1;
        while (1)
        {
          if (v82)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v82 + 24))(v82))
            {
              if (v82)
              {
                (*(void (**)(void))(*(void *)v82 + 8))();
              }
              else
              {
LABEL_110:
                if (v85) {
                  --*(_DWORD *)v85;
                }
              }
              if (!v12
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v91.__end_ - (char *)v91.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_119:
                if (!v15) {
                  goto LABEL_130;
                }
LABEL_120:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v90.__end_ - (char *)v90.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  unint64_t v58 = v90.__end_ - v90.__begin_;
                  if (v58 <= 2) {
                    unint64_t v58 = 2;
                  }
                  std::vector<unsigned int>::pointer v59 = v90.__begin_ + 1;
                  unsigned int v60 = *v90.__begin_;
                  unint64_t v61 = v58 - 1;
                  while (1)
                  {
                    unsigned int v63 = *v59++;
                    unsigned int v62 = v63;
                    if (v63 == v60) {
                      break;
                    }
                    unsigned int v60 = v62;
                    if (!--v61) {
                      goto LABEL_130;
                    }
                  }
                  unint64_t v98 = v98 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_130;
              }
              unint64_t v52 = v91.__end_ - v91.__begin_;
              if (v52 <= 2) {
                unint64_t v52 = 2;
              }
              std::vector<unsigned int>::pointer v53 = v91.__begin_ + 1;
              unsigned int v54 = *v91.__begin_;
              unint64_t v55 = v52 - 1;
              while (1)
              {
                unsigned int v57 = *v53++;
                unsigned int v56 = v57;
                if (v57 == v54) {
                  break;
                }
                unsigned int v54 = v56;
                if (!--v55) {
                  goto LABEL_119;
                }
              }
              unint64_t v98 = v98 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v15) {
                goto LABEL_120;
              }
LABEL_130:
              if (v16 >= 1) {
                unint64_t v98 = v98 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v82, a1, v17);
              fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v77);
              float v72 = *(float *)&v82;
              float v102 = v77;
              v64.n128_u32[0] = v82;
              if (*(float *)&v82 != v77
                || (float v72 = *((float *)&v82 + 1),
                    float v102 = *(float *)&v83,
                    float v101 = v78,
                    float v100 = v79,
                    v64.n128_u32[0] = HIDWORD(v82),
                    *((float *)&v82 + 1) != v78)
                || (v64.n128_f32[0] = v102, v102 != v100))
              {
                BOOL v65 = 1;
                goto LABEL_136;
              }
              long long v66 = v80;
              if (v85 - (unsigned char *)v84 == v81 - (unsigned char *)v80)
              {
                BOOL v65 = memcmp(v84, v80, v85 - (unsigned char *)v84) != 0;
LABEL_136:
                long long v66 = v80;
                if (v80)
                {
LABEL_137:
                  uint64_t v81 = v66;
                  operator delete(v66);
                }
              }
              else
              {
                BOOL v65 = 1;
                if (v80) {
                  goto LABEL_137;
                }
              }
              if (v65)
              {
                fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v77);
                float v72 = *(float *)&v82;
                float v102 = v77;
                v67.n128_u32[0] = v82;
                if (*(float *)&v82 != v77
                  || (float v72 = *((float *)&v82 + 1),
                      float v102 = *(float *)&v83,
                      float v101 = v78,
                      float v100 = v79,
                      v67.n128_u32[0] = HIDWORD(v82),
                      *((float *)&v82 + 1) != v78)
                  || (v67.n128_f32[0] = v102, v102 != v100))
                {
                  BOOL v68 = 1;
                  goto LABEL_143;
                }
                uint64_t v69 = v80;
                if (v85 - (unsigned char *)v84 == v81 - (unsigned char *)v80)
                {
                  BOOL v68 = memcmp(v84, v80, v85 - (unsigned char *)v84) != 0;
LABEL_143:
                  uint64_t v69 = v80;
                  if (v80)
                  {
LABEL_144:
                    uint64_t v81 = v69;
                    operator delete(v69);
                  }
                }
                else
                {
                  BOOL v68 = 1;
                  if (v80) {
                    goto LABEL_144;
                  }
                }
                if (v68) {
                  unint64_t v98 = v98 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                }
                ++v16;
              }
              else if ((*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)a1 + 40))(a1, v17, v64) != 1)
              {
                unint64_t v98 = v98 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              if (v84)
              {
                unint64_t v85 = (char *)v84;
                operator delete(v84);
              }
              if (v94)
              {
                uint64_t v95 = v94;
                operator delete(v94);
              }
              if (v87) {
                (*(void (**)(uint64_t, __n128))(*(void *)v87 + 32))(v87, v67);
              }
              else {
                ++v89;
              }
              goto LABEL_12;
            }
            if (v82)
            {
              uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v82 + 32))();
              goto LABEL_29;
            }
          }
          else if (v86 >= (unint64_t)v84)
          {
            goto LABEL_110;
          }
          uint64_t v20 = v83 + 56 * v86;
LABEL_29:
          int v21 = *(_DWORD *)v20;
          int v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            unint64_t v98 = v98 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            int v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (!v22) {
                goto LABEL_39;
              }
              goto LABEL_35;
            }
            unint64_t v23 = v98;
          }
          else
          {
            unint64_t v23 = v98 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          unint64_t v98 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (!v22)
          {
LABEL_39:
            unint64_t v98 = v98 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
            if (v19) {
              goto LABEL_44;
            }
            goto LABEL_40;
          }
LABEL_35:
          if (v19) {
            goto LABEL_44;
          }
LABEL_40:
          if (v21 < (int)v92) {
            unint64_t v98 = v98 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
          }
          if (v22 < SHIDWORD(v92)) {
            unint64_t v98 = v98 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
          }
LABEL_44:
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One((uint64_t)&v77);
          float v72 = 0.0;
          float v72 = *(float *)(v20 + 8);
          float v102 = v77;
          if (v72 != v77) {
            goto LABEL_49;
          }
          float v72 = 0.0;
          float v72 = *(float *)(v20 + 12);
          float v102 = 0.0;
          float v102 = *(float *)(v20 + 16);
          float v101 = v78;
          float v100 = v79;
          if (v72 != v78
            || v102 != v100
            || (uint64_t v24 = *(const void **)(v20 + 24),
                size_t v25 = *(void *)(v20 + 32) - (void)v24,
                BOOL v26 = v80,
                v25 != v81 - (unsigned char *)v80)
            || memcmp(v24, v80, v25))
          {
LABEL_49:
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v72);
            float v102 = 0.0;
            float v102 = *(float *)(v20 + 8);
            float v101 = v72;
            if (v102 != v72
              || (float v102 = 0.0,
                  float v102 = *(float *)(v20 + 12),
                  float v101 = 0.0,
                  float v101 = *(float *)(v20 + 16),
                  float v100 = v73,
                  float v99 = v74,
                  v102 != v73)
              || v101 != v99)
            {
              BOOL v27 = 1;
              goto LABEL_53;
            }
            unint64_t v50 = *(const void **)(v20 + 24);
            size_t v51 = *(void *)(v20 + 32) - (void)v50;
            int v28 = __p;
            if (v51 == v76 - (unsigned char *)__p)
            {
              BOOL v27 = memcmp(v50, __p, v51) != 0;
LABEL_53:
              int v28 = __p;
              if (__p)
              {
LABEL_54:
                uint64_t v76 = v28;
                operator delete(v28);
              }
            }
            else
            {
              BOOL v27 = 1;
              if (__p) {
                goto LABEL_54;
              }
            }
            BOOL v26 = v80;
            if (!v80) {
              goto LABEL_57;
            }
LABEL_56:
            uint64_t v81 = v26;
            operator delete(v26);
            goto LABEL_57;
          }
          BOOL v27 = 0;
          if (v26) {
            goto LABEL_56;
          }
LABEL_57:
          if (v27) {
            unint64_t v98 = v98 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          int v29 = *(_DWORD *)(v20 + 48);
          if (v29 <= (int)v17) {
            unint64_t v98 = v98 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          }
          if (v29 != v17 + 1) {
            unint64_t v98 = v98 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          }
          uint64_t v92 = *(void *)v20;
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)v93, v20 + 8);
          int v97 = *(_DWORD *)(v20 + 48);
          if (v12)
          {
            std::vector<unsigned int>::pointer end = v91.__end_;
            if (v91.__end_ >= v91.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer begin = v91.__begin_;
              int64_t v33 = v91.__end_ - v91.__begin_;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62) {
                goto LABEL_177;
              }
              int64_t v35 = (char *)v91.__end_cap_.__value_ - (char *)v91.__begin_;
              if (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 1 > v34) {
                unint64_t v34 = v35 >> 1;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36)
              {
                int v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v91.__end_cap_, v36);
                std::vector<unsigned int>::pointer begin = v91.__begin_;
                std::vector<unsigned int>::pointer end = v91.__end_;
              }
              else
              {
                int v37 = 0;
              }
              char v38 = (unsigned int *)&v37[4 * v33];
              *char v38 = *(_DWORD *)v20;
              uint64_t v31 = v38 + 1;
              while (end != begin)
              {
                unsigned int v39 = *--end;
                *--char v38 = v39;
              }
              v91.__begin_ = v38;
              v91.__end_ = v31;
              v91.__end_cap_.__value_ = (unsigned int *)&v37[4 * v36];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *v91.__end_ = *(_DWORD *)v20;
              uint64_t v31 = end + 1;
            }
            v91.__end_ = v31;
          }
          if (v15)
          {
            std::vector<unsigned int>::pointer v40 = v90.__end_;
            if (v90.__end_ >= v90.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer v42 = v90.__begin_;
              int64_t v43 = v90.__end_ - v90.__begin_;
              unint64_t v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 62) {
LABEL_177:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              int64_t v45 = (char *)v90.__end_cap_.__value_ - (char *)v90.__begin_;
              if (((char *)v90.__end_cap_.__value_ - (char *)v90.__begin_) >> 1 > v44) {
                unint64_t v44 = v45 >> 1;
              }
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v44;
              }
              if (v46)
              {
                std::string v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v90.__end_cap_, v46);
                std::vector<unsigned int>::pointer v42 = v90.__begin_;
                std::vector<unsigned int>::pointer v40 = v90.__end_;
              }
              else
              {
                std::string v47 = 0;
              }
              unint64_t v48 = (unsigned int *)&v47[4 * v43];
              *unint64_t v48 = *(_DWORD *)(v20 + 4);
              std::vector<int> v41 = v48 + 1;
              while (v40 != v42)
              {
                unsigned int v49 = *--v40;
                *--unint64_t v48 = v49;
              }
              v90.__begin_ = v48;
              v90.__end_ = v41;
              v90.__end_cap_.__value_ = (unsigned int *)&v47[4 * v46];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              *v90.__end_ = *(_DWORD *)(v20 + 4);
              std::vector<int> v41 = v40 + 1;
            }
            v90.__end_ = v41;
          }
          if (v82)
          {
            (*(void (**)(uint64_t))(*(void *)v82 + 40))(v82);
            char v19 = 0;
          }
          else
          {
            char v19 = 0;
            ++v86;
          }
        }
      }
LABEL_17:
      uint64_t v17 = v89;
      goto LABEL_18;
    }
    if (v87) {
      (*(void (**)(void))(*(void *)v87 + 8))();
    }
LABEL_167:
    a3 = v71;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) != -1
      && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1))
    {
      unint64_t v98 = v98 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v90.__begin_)
    {
      v90.__end_ = v90.__begin_;
      operator delete(v90.__begin_);
    }
    if (v91.__begin_)
    {
      v91.__end_ = v91.__begin_;
      operator delete(v91.__begin_);
    }
    unint64_t v9 = v98;
LABEL_175:
    uint64_t v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1B2295150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a35) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B2295AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + 52) = 0;
    **(void **)(a1 + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

uint64_t fst::CountStates<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B2295E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>();
  }
  _Unwind_Resume(exception_object);
}

void fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v27);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)&v22);
  int v34 = v27;
  float v33 = v22;
  BOOL v6 = *(float *)&v27 != v22
    || (v34 = HIDWORD(v27), v33 = v28, v32 = v23, float v31 = v24, *((float *)&v27 + 1) != v23)
    || v33 != v31
    || v30 - (unsigned char *)v29 != v26 - (unsigned char *)__p
    || memcmp(v29, __p, v30 - (unsigned char *)v29) != 0;
  if (__p)
  {
    BOOL v26 = __p;
    operator delete(__p);
  }
  if (v29)
  {
    int v30 = v29;
    operator delete(v29);
  }
  if (v6) {
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * a2) != *(_DWORD *)(v7 + 4 * a2)) {
    goto LABEL_26;
  }
  char v8 = 0;
  uint64_t v9 = *(void **)(a1 + 80);
  uint64_t v10 = v9[1];
  uint64_t v11 = **(void **)(a1 + 16);
  uint64_t v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    unint64_t v13 = *v12--;
    v8 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while (v13 != a2);
  uint64_t v14 = *(void **)a1;
  uint64_t v15 = **(void **)(a1 + 72);
  for (uint64_t i = (int *)(v10 - 4); ; --i)
  {
    unint64_t v17 = *i;
    if (v14) {
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    }
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = 1 << v17;
    if ((v8 & 1) == 0) {
      break;
    }
    *(void *)(v11 + 8 * v18) |= v19;
    *(void *)(v15 + 8 * v18) &= ~v19;
    if (v17 == a2)
    {
      v9[1] = i;
      goto LABEL_25;
    }
LABEL_23:
    ;
  }
  *(void *)(v15 + 8 * v18) &= ~v19;
  if (v17 != a2) {
    goto LABEL_23;
  }
  v9[1] = i;
  **(void **)(a1 + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_25:
  ++*(_DWORD *)(a1 + 48);
LABEL_26:
  if (a3 != -1)
  {
    uint64_t v20 = **(void **)(a1 + 16);
    if ((*(void *)(v20 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2)) {
      *(void *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v21 = *(_DWORD *)(v7 + 4 * a2);
    if (v21 < *(_DWORD *)(v7 + 4 * a3)) {
      *(_DWORD *)(v7 + 4 * a3) = v21;
    }
  }
}

void sub_1B2296140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36E78;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36E78;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36E78;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B22961F8(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37E30;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B2296310(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37E30;
  uint64_t v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      int64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      char v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        std::vector<int> v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)std::vector<int> v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      int64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        size_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)size_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  std::vector<unsigned int>::pointer v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B2296758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    uint64_t v10 = v26 + 56 * v27;
    *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v26;
    *(void *)(a1 + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v24 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v24 = v13;
    }
    *(void *)(a1 + 8) = v24;
    uint64_t v15 = malloc_type_malloc(56 * v24, 0x10100407878D4B7uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(void **)(a1 + 16);
    uint64_t v15 = *(void **)a1;
  }
  *(void *)(a1 + 24) = &v14[7 * v13];
  uint64_t v16 = v25;
  uint64_t v17 = v26;
  unint64_t v19 = v27;
  uint64_t v18 = v28;
  if (v28) {
    ++*v28;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(v15 - 7) = *(void *)v23;
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v15 - 6), v23 + 8);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 56 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B2296A34(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

void *fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::ComposeFst(void *a1, uint64_t a2, int a3)
{
  *a1 = &unk_1F0A36880;
  a1[1] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v6 = (_DWORD *)a1[1];
    if (v6)
    {
      int v7 = v6[14] - 1;
      v6[14] = v7;
      if (!v7) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
    }
    a1[1] = v5;
  }
  else
  {
    fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetImpl((uint64_t)a1, v4, 0);
  }
  return a1;
}

void sub_1B2296B44(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

_DWORD *fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetImpl(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    ++*(_DWORD *)(a2 + 56);
  }
  uint64_t result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    int v6 = result[14] - 1;
    result[14] = v6;
    if (!v6) {
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
  }
  *(void *)(a1 + 8) = a2;
  return result;
}

void *fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A43EC8;
  unint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void fst::StateIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  uint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::ArcIterator(&v19, *(void *)(a1 + 8), v6);
    unint64_t v7 = v20;
    uint64_t v8 = *((void *)v19 + 7);
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((*((void *)v19 + 8) - v8) >> 3);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v20 < v9)
    {
      int v11 = *(_DWORD *)(v10 + 68);
      uint64_t v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        int v14 = *v12;
        v12 += 14;
        int v13 = v14;
        if (v11 <= v14)
        {
          int v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      unint64_t v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    BOOL v4 = v15 >= v17;
    if (v15 < v17) {
      break;
    }
    uint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B2296DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)(*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 48))(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B2296E78(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
  }
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A42EA0;
  int v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    unint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  int v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B2297198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::Features::GetFeatureMap(void)::$_0::operator()()
{
}

void sub_1B22992AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

uint64_t std::vector<kaldi::quasar::WordConf>::__push_back_slow_path<kaldi::quasar::WordConf const&>(uint64_t *a1, const kaldi::quasar::WordConf *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0xF83E0F83E0F83E1 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xF83E0F83E0F83ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xF83E0F83E0F83E1 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x7C1F07C1F07C1FLL) {
    unint64_t v9 = 0xF83E0F83E0F83ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::WordConf>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v13 = v10;
  uint64_t v14 = (std::string *)&v10[264 * v4];
  uint64_t v16 = &v10[264 * v9];
  kaldi::quasar::WordConf::WordConf(v14, a2);
  int v15 = v14 + 11;
  std::vector<kaldi::quasar::WordConf>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::quasar::WordConf>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B22994A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::WordConf>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::WordConf>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  unint64_t v5 = (long long *)*a1;
  uint64_t v4 = (long long *)a1[1];
  uint64_t v6 = a2[1];
  if (v4 != (long long *)*a1)
  {
    do
    {
      v6 -= 264;
      uint64_t v4 = (long long *)((char *)v4 - 264);
      std::allocator<kaldi::quasar::WordConf>::construct[abi:ne180100]<kaldi::quasar::WordConf,kaldi::quasar::WordConf>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 std::allocator<kaldi::quasar::WordConf>::construct[abi:ne180100]<kaldi::quasar::WordConf,kaldi::quasar::WordConf>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v4 = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 40) = *((void *)a3 + 5);
  *(_OWORD *)(a2 + ++*(_DWORD *)(result + 24) = v4;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 3) = 0;
  long long v5 = a3[3];
  *(void *)(a2 + 64) = *((void *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  *((void *)a3 + 6) = 0;
  long long v6 = *(long long *)((char *)a3 + 72);
  *(void *)(a2 + 88) = *((void *)a3 + 11);
  *(_OWORD *)(a2 + 72) = v6;
  *((void *)a3 + 9) = 0;
  *((void *)a3 + 10) = 0;
  *((void *)a3 + 11) = 0;
  long long v7 = a3[6];
  *(void *)(a2 + 112) = *((void *)a3 + 14);
  *(_OWORD *)(a2 + 96) = v7;
  *((void *)a3 + 12) = 0;
  *((void *)a3 + 13) = 0;
  *((void *)a3 + 14) = 0;
  long long v8 = *(long long *)((char *)a3 + 120);
  *(void *)(a2 + 136) = *((void *)a3 + 17);
  *(_OWORD *)(a2 + 120) = v8;
  *((void *)a3 + 15) = 0;
  *((void *)a3 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *((void *)a3 + 17) = 0;
  uint64_t v9 = *((void *)a3 + 20);
  *(_OWORD *)(a2 + 144) = a3[9];
  *(void *)(a2 + 160) = v9;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 1--*(_DWORD *)(a9 + 84) = 0;
  *(_OWORD *)(a2 + 168) = *(long long *)((char *)a3 + 168);
  *(void *)(a2 + 1--*(_DWORD *)(a9 + 84) = *((void *)a3 + 23);
  *((void *)a3 + 21) = 0;
  *((void *)a3 + 22) = 0;
  *((void *)a3 + 23) = 0;
  long long v10 = a3[12];
  *(_DWORD *)(a2 + 208) = *((_DWORD *)a3 + 52);
  *(_OWORD *)(a2 + 192) = v10;
  *(void *)(a2 + 2++*(_DWORD *)(result + 24) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 2kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
  *(_OWORD *)(a2 + 2kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(long long *)((char *)a3 + 216);
  *(void *)(a2 + 232) = *((void *)a3 + 29);
  *((void *)a3 + 27) = 0;
  *((void *)a3 + 28) = 0;
  *((void *)a3 + 29) = 0;
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  __n128 result = (__n128)a3[15];
  *(__n128 *)(a2 + 240) = result;
  *(void *)(a2 + 256) = *((void *)a3 + 32);
  *((void *)a3 + 30) = 0;
  *((void *)a3 + 31) = 0;
  *((void *)a3 + 32) = 0;
  return result;
}

uint64_t std::__split_buffer<kaldi::quasar::WordConf>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = i - 264;
    kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)(i - 264));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::vector<kaldi::quasar::WordConf>>::__push_back_slow_path<std::vector<kaldi::quasar::WordConf> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  int v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<kaldi::quasar::WordConf>::__init_with_size[abi:ne180100]<kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(v11, *a2, a2[1], 0xF83E0F83E0F83E1 * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<kaldi::quasar::WordConf>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<kaldi::quasar::WordConf>>::~__split_buffer(v14);
  return v12;
}

void sub_1B22997CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<kaldi::quasar::WordConf>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<kaldi::quasar::WordConf>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  int v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<kaldi::quasar::WordConf>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<kaldi::quasar::WordConf>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v4;
    uint64_t v5 = v4;
    std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<kaldi::quasar::WordConf>>::__assign_with_size[abi:ne180100]<std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<kaldi::quasar::WordConf>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    char v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    long long v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<kaldi::quasar::WordConf> *,std::vector<kaldi::quasar::WordConf> *,std::vector<kaldi::quasar::WordConf> *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    char v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<kaldi::quasar::WordConf> *,std::vector<kaldi::quasar::WordConf> *,std::vector<kaldi::quasar::WordConf> *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  int v15 = v14;
  uint64_t v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      unint64_t v19 = v16;
      std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B2299B7C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B2299B84(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<kaldi::quasar::WordConf> *,std::vector<kaldi::quasar::WordConf> *,std::vector<kaldi::quasar::WordConf> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t *)a4) {
        std::vector<kaldi::quasar::WordConf>::__assign_with_size[abi:ne180100]<kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(a4, *v5, v5[1], 0xF83E0F83E0F83E1 * ((v5[1] - *v5) >> 3));
      }
      v5 += 3;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<kaldi::quasar::WordConf>::__assign_with_size[abi:ne180100]<kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<kaldi::quasar::WordConf>::__vdeallocate((void **)a1);
    if (a4 > 0xF83E0F83E0F83ELL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x1F07C1F07C1F07C2 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x7C1F07C1F07C1FLL) {
      unint64_t v11 = 0xF83E0F83E0F83ELL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<kaldi::quasar::WordConf>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::WordConf>,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::WordConf *,kaldi::quasar::WordConf *,kaldi::quasar::WordConf *,0>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::WordConf>,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::WordConf *,kaldi::quasar::WordConf *,kaldi::quasar::WordConf *,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
      kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)(v16 - 264));
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B2299D8C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B2299D94(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::WordConf>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)(v3 - 264));
      while (v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::WordConf *,kaldi::quasar::WordConf *,kaldi::quasar::WordConf *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      kaldi::quasar::WordConf::operator=(a3, v4);
      v4 += 264;
      a3 += 264;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *std::__hash_table<std::__hash_value_type<int,kaldi::quasar::ScoreTuple>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::ScoreTuple>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::ScoreTuple>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::ScoreTuple>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x20uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  void v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B229A06C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<long long,std::string>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::string>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::string>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::string>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  float v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  *float v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B229A2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::string>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<kaldi::ChosenArc>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<kaldi::ChosenArc>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 104)
  {
    unint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void *std::vector<kaldi::ChosenArc>::__construct_one_at_end[abi:ne180100]<kaldi::ChosenArc const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v3 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 48) = v6;
  *(_OWORD *)(v3 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v4;
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a2;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 80) = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v3 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
  *(void *)(a1 + 8) = v3 + 104;
  return result;
}

void sub_1B229A3E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::ChosenArc>::__push_back_slow_path<kaldi::ChosenArc const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x13B13B13B13B13BLL) {
    unint64_t v9 = 0x276276276276276;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v20 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::LmInfo>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[104 * v4];
  v17[0] = v10;
  v17[1] = v11;
  unint64_t v18 = v11;
  unint64_t v19 = &v10[104 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v13 = *(_OWORD *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 + 60);
  *((_OWORD *)v11 + 2) = v13;
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 1) = v12;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((void *)v11 + 11) = 0;
  *((void *)v11 + 12) = 0;
  *((void *)v11 + 10) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v11 + 10, *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
  v18 += 104;
  std::vector<kaldi::ChosenArc>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<kaldi::ChosenArc>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1B229A524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::ChosenArc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::ChosenArc>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::ChosenArc>,std::reverse_iterator<kaldi::ChosenArc*>,std::reverse_iterator<kaldi::ChosenArc*>,std::reverse_iterator<kaldi::ChosenArc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::ChosenArc>,std::reverse_iterator<kaldi::ChosenArc*>,std::reverse_iterator<kaldi::ChosenArc*>,std::reverse_iterator<kaldi::ChosenArc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  unsigned int v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 104) = *(_OWORD *)(a3 - 104);
      long long v8 = *(_OWORD *)(a3 - 88);
      long long v9 = *(_OWORD *)(a3 - 72);
      long long v10 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 44) = *(_OWORD *)(a3 - 44);
      *(_OWORD *)(v7 - 56) = v10;
      *(_OWORD *)(v7 - 72) = v9;
      *(_OWORD *)(v7 - 88) = v8;
      *(void *)(v7 - kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a3 - kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v16 + 1) - 104;
      *((void *)&v16 + 1) -= 104;
      a3 -= 104;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,std::reverse_iterator<kaldi::ChosenArc*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,std::reverse_iterator<kaldi::ChosenArc*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,std::reverse_iterator<kaldi::ChosenArc*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,std::reverse_iterator<kaldi::ChosenArc*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 80);
    if (v3)
    {
      *(void *)(v1 + 88) = v3;
      operator delete(v3);
    }
    v1 += 104;
  }
}

uint64_t std::__split_buffer<kaldi::ChosenArc>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<kaldi::ChosenArc>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v2 - 104;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 104;
    }
  }
}

void *std::vector<std::vector<kaldi::ChosenArc>>::__construct_one_at_end[abi:ne180100]<std::vector<kaldi::ChosenArc> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  void v3[2] = 0;
  uint64_t result = std::vector<kaldi::ChosenArc>::__init_with_size[abi:ne180100]<kaldi::ChosenArc*,kaldi::ChosenArc*>(v3, *a2, a2[1], 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B229A7F8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<kaldi::ChosenArc>>::__push_back_slow_path<std::vector<kaldi::ChosenArc> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  long long v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<kaldi::ChosenArc>::__init_with_size[abi:ne180100]<kaldi::ChosenArc*,kaldi::ChosenArc*>(v11, *a2, a2[1], 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<kaldi::ChosenArc>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<kaldi::ChosenArc>>::~__split_buffer(v14);
  return v12;
}

void sub_1B229A918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<kaldi::ChosenArc>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::ChosenArc>::__init_with_size[abi:ne180100]<kaldi::ChosenArc*,kaldi::ChosenArc*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<kaldi::ChosenArc>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::ChosenArc>,kaldi::ChosenArc*,kaldi::ChosenArc*,kaldi::ChosenArc*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B229A994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::ChosenArc>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::LmInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::ChosenArc>,kaldi::ChosenArc*,kaldi::ChosenArc*,kaldi::ChosenArc*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
      long long v7 = *(_OWORD *)(v6 + 16);
      long long v8 = *(_OWORD *)(v6 + 32);
      long long v9 = *(_OWORD *)(v6 + 48);
      *(_OWORD *)(v4 + 60) = *(_OWORD *)(v6 + 60);
      *(_OWORD *)(v4 + 32) = v8;
      *(_OWORD *)(v4 + 48) = v9;
      *(_OWORD *)(v4 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v7;
      *(void *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = 0;
      *(void *)(v4 + 80) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v4 + 80), *(const void **)(v6 + 80), *(void *)(v6 + 88), (uint64_t)(*(void *)(v6 + 88) - *(void *)(v6 + 80)) >> 2);
      uint64_t v4 = v14 + 104;
      v14 += 104;
      v6 += 104;
    }
    while (v6 != a3);
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,kaldi::ChosenArc*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1B229AACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,kaldi::ChosenArc*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,kaldi::ChosenArc*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,kaldi::ChosenArc*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(void *)(v1 - kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v3;
      operator delete(v3);
    }
    v1 -= 104;
  }
}

uint64_t std::vector<std::vector<kaldi::ChosenArc>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::ChosenArc>>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::ChosenArc>>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::ChosenArc>>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::ChosenArc>>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::ChosenArc>>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::ChosenArc>>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<kaldi::ChosenArc>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<kaldi::ChosenArc>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v4;
    uint64_t v5 = v4;
    std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,false>(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (float *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v23 = *(a2 - 1);
          float v24 = v11[1];
          if (v23 > v24)
          {
            float v25 = *v11;
            *uint64_t v11 = *(a2 - 2);
            *(a2 - 2) = v25;
            v11[1] = v23;
            *(a2 - 1) = v24;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v11, v11 + 2, v11 + 4, a2 - 2);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,std::pair<int,float> *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    BOOL v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v11 + 2, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      float v18 = *v11;
      *uint64_t v11 = *v17;
      *BOOL v17 = v18;
      int v19 = *((_DWORD *)v11 + 1);
      v11[1] = v17[1];
      *((_DWORD *)v17 + 1) = v19;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(v11 - 1) <= v11[1])
    {
      uint64_t result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::quasar::SortPred &>(v11, a2);
      uint64_t v11 = (float *)result;
      goto LABEL_19;
    }
LABEL_14:
    size_t v20 = (float *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::quasar::SortPred &>(v11, a2);
    if ((v21 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v11, v20);
    uint64_t v11 = v20 + 2;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v20 + 2, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v22)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,false>(v10, v20, a3, -v13, a5 & 1);
      uint64_t v11 = v20 + 2;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>((uint64_t)v11, a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v11, a2);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(uint64_t result, _DWORD *a2)
{
  if ((_DWORD *)result != a2)
  {
    uint64_t v2 = (_DWORD *)(result + 8);
    if ((_DWORD *)(result + 8) != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (_DWORD *)result;
      do
      {
        float v5 = *((float *)v4 + 3);
        float v6 = *((float *)v4 + 1);
        uint64_t v4 = v2;
        if (v5 > v6)
        {
          int v7 = *v2;
          uint64_t v8 = v3;
          while (1)
          {
            uint64_t v9 = result + v8;
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(result + v8);
            *(_DWORD *)(v9 + 12) = *(_DWORD *)(result + v8 + 4);
            if (!v8) {
              break;
            }
            v8 -= 8;
            if (v5 <= *(float *)(v9 - 4))
            {
              uint64_t v10 = result + v8 + 8;
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *(_DWORD *)uint64_t v10 = v7;
          *(float *)(v10 + 4) = v5;
        }
        uint64_t v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(_DWORD *result, _DWORD *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = (float *)(result + 3);
      do
      {
        float v4 = *((float *)result + 3);
        float v5 = *((float *)result + 1);
        uint64_t result = v2;
        if (v4 > v5)
        {
          int v6 = *v2;
          int v7 = v3;
          do
          {
            uint64_t v8 = v7;
            *(v7 - 1) = *(v7 - 3);
            int v9 = *((_DWORD *)v7 - 2);
            v7 -= 2;
            *(_DWORD *)uint64_t v8 = v9;
          }
          while (v4 > *(v8 - 4));
          *((_DWORD *)v7 - 1) = v6;
          float *v7 = v4;
        }
        uint64_t v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(float *a1, float *a2, float *a3)
{
  float v3 = a2[1];
  float v4 = a1[1];
  float v5 = a3[1];
  if (v3 > v4)
  {
    float v6 = *a1;
    if (v5 > v3)
    {
      *a1 = *a3;
      *a3 = v6;
      a1[1] = v5;
      a3[1] = v4;
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    a1[1] = v3;
    a2[1] = v4;
    float v11 = a3[1];
    if (v11 <= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v6;
    a2[1] = v11;
    a3[1] = v4;
    return 2;
  }
  if (v5 > v3)
  {
    float v7 = *a2;
    *a2 = *a3;
    *a3 = v7;
    a2[1] = v5;
    a3[1] = v3;
    float v8 = a2[1];
    float v9 = a1[1];
    if (v8 <= v9) {
      return 1;
    }
    float v10 = *a1;
    *a1 = *a2;
    *a2 = v10;
    a1[1] = v8;
    a2[1] = v9;
    return 2;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::quasar::SortPred &>(float *a1, float *a2)
{
  float v2 = a1[1];
  if (v2 <= *(a2 - 1))
  {
    unint64_t v6 = (unint64_t)(a1 + 2);
    do
    {
      unint64_t v4 = v6;
      if (v6 >= (unint64_t)a2) {
        break;
      }
      float v7 = *(float *)(v6 + 4);
      v6 += 8;
    }
    while (v2 <= v7);
  }
  else
  {
    float v3 = a1;
    do
    {
      unint64_t v4 = (unint64_t)(v3 + 2);
      float v5 = v3[3];
      v3 += 2;
    }
    while (v2 <= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    float v8 = a2;
  }
  else
  {
    do
    {
      float v8 = a2 - 2;
      float v9 = *(a2 - 1);
      a2 -= 2;
    }
    while (v2 > v9);
  }
  float v10 = *a1;
  while (v4 < (unint64_t)v8)
  {
    int v11 = *(_DWORD *)v4;
    *(float *)unint64_t v4 = *v8;
    *(_DWORD *)float v8 = v11;
    int v12 = *(_DWORD *)(v4 + 4);
    *(float *)(v4 + 4) = v8[1];
    *((_DWORD *)v8 + 1) = v12;
    do
    {
      float v13 = *(float *)(v4 + 12);
      v4 += 8;
    }
    while (v2 <= v13);
    do
    {
      float v14 = *(v8 - 1);
      v8 -= 2;
    }
    while (v2 > v14);
  }
  if ((float *)(v4 - 8) != a1)
  {
    *a1 = *(float *)(v4 - 8);
    a1[1] = *(float *)(v4 - 4);
  }
  *(float *)(v4 - 8) = v10;
  *(float *)(v4 - 4) = v2;
  return v4;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::quasar::SortPred &>(float *a1, float *a2)
{
  uint64_t v2 = 0;
  float v3 = *a1;
  float v4 = a1[1];
  do
  {
    float v5 = a1[v2 + 3];
    v2 += 2;
  }
  while (v5 > v4);
  unint64_t v6 = (unint64_t)&a1[v2];
  if (v2 == 2)
  {
    while (v6 < (unint64_t)a2)
    {
      float v7 = a2 - 2;
      float v9 = *(a2 - 1);
      a2 -= 2;
      if (v9 > v4) {
        goto LABEL_9;
      }
    }
    float v7 = a2;
  }
  else
  {
    do
    {
      float v7 = a2 - 2;
      float v8 = *(a2 - 1);
      a2 -= 2;
    }
    while (v8 <= v4);
  }
LABEL_9:
  unint64_t v10 = (unint64_t)&a1[v2];
  if (v6 < (unint64_t)v7)
  {
    int v11 = v7;
    do
    {
      int v12 = *(_DWORD *)v10;
      *(float *)unint64_t v10 = *v11;
      *(_DWORD *)int v11 = v12;
      int v13 = *(_DWORD *)(v10 + 4);
      *(float *)(v10 + 4) = v11[1];
      *((_DWORD *)v11 + 1) = v13;
      do
      {
        float v14 = *(float *)(v10 + 12);
        v10 += 8;
      }
      while (v14 > v4);
      do
      {
        float v15 = *(v11 - 1);
        v11 -= 2;
      }
      while (v15 <= v4);
    }
    while (v10 < (unint64_t)v11);
  }
  if ((float *)(v10 - 8) != a1)
  {
    *a1 = *(float *)(v10 - 8);
    a1[1] = *(float *)(v10 - 4);
  }
  *(float *)(v10 - 8) = v3;
  *(float *)(v10 - 4) = v4;
  return v10 - 8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(float *a1, float *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(a2 - 1);
      float v7 = a1[1];
      if (v6 > v7)
      {
        float v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      float v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4);
      unint64_t v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    float v13 = v10[1];
    if (v13 > v9[1])
    {
      int v14 = *(_DWORD *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        unint64_t v16 = (float *)((char *)a1 + v15);
        v16[6] = *(float *)((char *)a1 + v15 + 16);
        v16[7] = *(float *)((char *)a1 + v15 + 20);
        if (v15 == -16) {
          break;
        }
        v15 -= 8;
        if (v13 <= v16[3])
        {
          uint64_t v17 = (uint64_t)a1 + v15 + 24;
          goto LABEL_12;
        }
      }
      uint64_t v17 = (uint64_t)a1;
LABEL_12:
      *(_DWORD *)uint64_t v17 = v14;
      *(float *)(v17 + 4) = v13;
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    float v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(float *a1, float *a2, float *a3, float *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(a1, a2, a3);
  float v9 = a4[1];
  float v10 = a3[1];
  if (v9 > v10)
  {
    float v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    a3[1] = v9;
    a4[1] = v10;
    float v12 = a3[1];
    float v13 = a2[1];
    if (v12 > v13)
    {
      float v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      float v15 = a2[1];
      float v16 = a1[1];
      if (v15 > v16)
      {
        float v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(a1, a2, a3, a4);
  float v11 = a5[1];
  float v12 = a4[1];
  if (v11 > v12)
  {
    float v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    a4[1] = v11;
    a5[1] = v12;
    float v14 = a4[1];
    float v15 = a3[1];
    if (v14 > v15)
    {
      float v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      a3[1] = v14;
      a4[1] = v15;
      float v17 = a3[1];
      float v18 = a2[1];
      if (v17 > v18)
      {
        float v19 = *a2;
        *a2 = *a3;
        *a3 = v19;
        a2[1] = v17;
        a3[1] = v18;
        float v20 = a2[1];
        float v21 = a1[1];
        if (v20 > v21)
        {
          float v22 = *a1;
          *a1 = *a2;
          *a2 = v22;
          a1[1] = v20;
          a2[1] = v21;
        }
      }
    }
  }
  return result;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,std::pair<int,float> *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      float v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    float v13 = a2;
    if (a2 != a3)
    {
      float v14 = a2;
      do
      {
        float v15 = v14[1];
        float v16 = a1[1];
        if (v15 > v16)
        {
          float v17 = *v14;
          *float v14 = *a1;
          *a1 = v17;
          v14[1] = v16;
          a1[1] = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      float v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v18 = (unint64_t)v8 >> 3;
      float v19 = a2 - 2;
      do
      {
        float v20 = *a1;
        int v21 = *((_DWORD *)a1 + 1);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>((uint64_t)a1, a4, v18);
        if (v19 == v22)
        {
          *float v22 = v20;
          *((_DWORD *)v22 + 1) = v21;
        }
        else
        {
          *float v22 = *v19;
          v22[1] = v19[1];
          *float v19 = v20;
          *((_DWORD *)v19 + 1) = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 3);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (float *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && v8[1] > v8[3])
      {
        v8 += 2;
        uint64_t v7 = v9;
      }
      float v10 = v8[1];
      float v11 = a4[1];
      if (v10 <= v11)
      {
        float v12 = *a4;
        do
        {
          float v13 = a4;
          a4 = v8;
          *float v13 = *v8;
          v13[1] = v10;
          if (v5 < v7) {
            break;
          }
          uint64_t v14 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (float *)(result + 8 * v7);
          uint64_t v15 = v14 + 2;
          if (v15 < a3 && v8[1] > v8[3])
          {
            v8 += 2;
            uint64_t v7 = v15;
          }
          float v10 = v8[1];
        }
        while (v10 <= v11);
        *a4 = v12;
        a4[1] = v11;
      }
    }
  }
  return result;
}

float std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    a1 += 8 * (v3 + 1);
    uint64_t v7 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v8 = v7 + 2;
    if (v8 < a3 && *(float *)(a1 + 4) > *(float *)(a1 + 12))
    {
      a1 += 8;
      uint64_t v3 = v8;
    }
    *(_DWORD *)uint64_t v6 = *(_DWORD *)a1;
    float result = *(float *)(a1 + 4);
    *(float *)(v6 + 4) = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    float v5 = *(float *)(result + 8 * v4 + 4);
    float v6 = *(float *)(a2 - 4);
    if (v5 > v6)
    {
      int v9 = *(_DWORD *)(a2 - 8);
      uint64_t v7 = a2 - 8;
      int v8 = v9;
      do
      {
        uint64_t v10 = v7;
        uint64_t v7 = result + 8 * v4;
        *(_DWORD *)uint64_t v10 = *(_DWORD *)v7;
        *(float *)(v10 + 4) = v5;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        float v5 = *(float *)(result + 8 * v4 + 4);
      }
      while (v5 > v6);
      *(_DWORD *)uint64_t v7 = v8;
      *(float *)(v7 + 4) = v6;
    }
  }
  return result;
}

void *std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  void v3[2] = 0;
  float result = std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v3, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B229BBCC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__push_back_slow_path<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  float v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  float v16 = &v10[24 * v9];
  *(void *)float v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v11, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~__split_buffer(v14);
  return v12;
}

void sub_1B229BCEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t **std::__tree<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::__map_value_compare<int,std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    float v11 = operator new(0x58uLL);
    v11[8] = **a4;
    *((void *)v11 + 8) = 0;
    *((void *)v11 + 9) = 0;
    *((void *)v11 + 7) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  long long v13 = v10;
  long long v14 = &v10[56 * v4];
  float v16 = &v10[56 * v9];
  std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100]((uint64_t)v14, a2);
  uint64_t v15 = v14 + 56;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B229C0FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 56;
      std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](v7 - 56, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 56;
      *((void *)&v15 + 1) -= 56;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1B229C294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>,std::__wrap_iter<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        uint64_t v21 = a3 + 56 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__move_range((uint64_t)a1, v5, v12, v5 + 56 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x492492492492492) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((a2 - v13) >> 3);
      unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x249249249249249) {
        unint64_t v18 = 0x492492492492492;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        float v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v9, v18);
      }
      else {
        float v19 = 0;
      }
      uint64_t v22 = (uint64_t)&v19[56 * v15];
      v26[0] = v19;
      v26[1] = v22;
      uint64_t v27 = v22;
      uint64_t v28 = &v19[56 * v18];
      uint64_t v23 = 56 * a5;
      uint64_t v24 = v22 + 56 * a5;
      do
      {
        std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](v22, v7);
        v22 += 56;
        v7 += 56;
        v23 -= 56;
      }
      while (v23);
      uint64_t v27 = v24;
      uint64_t v5 = std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_1B229C4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](v8, v10);
      v10 += 56;
      v8 += 56;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>((uint64_t)&v12, a2, v7, v6);
}

void sub_1B229C58C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](v4, v6);
      v6 += 56;
      uint64_t v4 = v11 + 56;
      v11 += 56;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B229C6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      *(_DWORD *)(v8 - 56) = *(_DWORD *)(a3 + v7 - 56);
      *(void *)(v8 - 48) = *(void *)(a3 + v7 - 48);
      fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(a4 + v7 - 40, a3 + v7 - 40);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 56;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_DWORD *)a4 = *(_DWORD *)v5;
    *(void *)(a4 + 8) = *(void *)(v5 + 8);
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(a4 + 16, v5 + 16);
    *(_DWORD *)(a4 + 48) = *(_DWORD *)(v5 + 48);
    a4 += 56;
    v5 += 56;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](v4, v6);
      v6 += 56;
      uint64_t v4 = v11 + 56;
      v11 += 56;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B229C8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B229C938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](v4, v6);
      v6 += 56;
      uint64_t v4 = v11 + 56;
      v11 += 56;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B229C9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  unint64_t v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)unint64_t v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + ++*(_DWORD *)(result + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *uint64_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_1B229CC54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::~__hash_table((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      unint64_t v4 = (void *)v2[13];
      if (v4)
      {
        v2[14] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x80uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[14] = 0;
  v11[15] = 0;
  v11[13] = 0;
  *((_DWORD *)v11 + 6) = -1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v11 = *v21;
LABEL_38:
    *uint64_t v21 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B229CF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,kaldi::ChosenArc>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,kaldi::ChosenArc>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[13];
    if (v3)
    {
      __p[14] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B229D070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v4, *v6, v6[1], 0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 3));
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B229D144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::unordered_map<unsigned long,short>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long,char>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,char>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,char>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,char>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,char> const&>(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_1B229D23C(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::vector<std::vector<std::pair<int,float>>>::__assign_with_size[abi:ne180100]<std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(uint64_t *a1, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  char v9 = (uint64_t **)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<std::vector<int>>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,float>>>,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v9) >> 3) < a4)
  {
    uint64_t v13 = &a2[(a1[1] - (uint64_t)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *>((uint64_t)&v20, a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,float>>>,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = a1[1];
  if (v16 != v14)
  {
    uint64_t v17 = a1[1];
    do
    {
      size_t v19 = *(void **)(v17 - 24);
      v17 -= 24;
      unint64_t v18 = v19;
      if (v19)
      {
        *(void *)(v16 - kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  a1[1] = v15;
}

void sub_1B229D450(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B229D458(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__assign_with_size[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *>((uint64_t)&v17, a2, v13, (uint64_t *)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *>((uint64_t)&v18, a2, a3, (uint64_t *)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      size_t v19 = v16;
      std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B229D5D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B229D5DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__vdeallocate(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    unint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        uint64_t v5 = v3;
        std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4) {
        std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__assign_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(a4, *v5, v5[1], 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3));
      }
      v5 += 3;
      a4 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__assign_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vdeallocate(a1);
    if (a4 > 0x492492492492492) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((a1[1] - v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((a1[1] - v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>((uint64_t)&v18, a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>((uint64_t)&v19, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      char v17 = *(void **)(v16 - 32);
      if (v17)
      {
        *(void *)(v16 - ++*(_DWORD *)(result + 24) = v17;
        operator delete(v17);
      }
      v16 -= 56;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_1B229D874(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B229D87C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long,short>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,short>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,short>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,short>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x20uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  *((_WORD *)v11 + 12) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  char v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    char v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B229DAD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<kaldi::ChosenArc>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorFst()
{
}

void sub_1B229DBB8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  uint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 56);
  uint64_t v4 = *v5;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B229DD94(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(v4[8] + 8 * a2);
  v5[5] = 0;
  int32x2_t v5[6] = 0;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v5 + 7);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56);
  return std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::InitMutableArcIterator()
{
}

void sub_1B229E25C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FDC0;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A4F0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B229E35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D2F0;
  uint64_t v2 = (void *)a1[9];
  if (v2 != (void *)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void *)a1[8];
    do
    {
      fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B229E534(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FDC0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A4F0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v21 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v19);
  while (1)
  {
    if (!v19)
    {
      if ((int)v21 >= v20) {
        goto LABEL_33;
      }
LABEL_11:
      uint64_t v9 = v21;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 16))(v19)) {
      break;
    }
    if (!v19) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24))(v19);
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddState((void *)a1);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(v16, a2, v9);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal(a1, v9, (int *)v16);
    if (__p)
    {
      size_t v18 = __p;
      operator delete(__p);
    }
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 56), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __str.__r_.__value_.__r.__words[2]) {
          goto LABEL_26;
        }
LABEL_20:
        unint64_t v11 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v15);
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__str.__r_.__value_.__r.__words[0]) {
        goto LABEL_20;
      }
      unint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_21:
      fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__str.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_28;
    }
LABEL_26:
    if (v14) {
      --*v14;
    }
LABEL_28:
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 32))(v19);
    }
    else {
      ++v21;
    }
  }
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
LABEL_33:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B229EA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFstBaseImpl(v21);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddState(void *a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((uint64_t)v2);
  unint64_t v3 = a1[10];
  *((void *)v2 + 9) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  uint64_t v4 = (void *)a1[9];
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = a1[8];
    uint64_t v7 = ((uint64_t)v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v3 - v6;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v10);
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v12 = &v11[8 * v7];
    float v13 = &v11[8 * v10];
    *(void *)unint64_t v12 = v2;
    uint64_t v5 = v12 + 8;
    std::string::size_type v15 = (char *)a1[8];
    float v14 = (char *)a1[9];
    if (v14 != v15)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      float v14 = (char *)a1[8];
    }
    a1[8] = v12;
    a1[9] = v5;
    a1[10] = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    void *v4 = v2;
    uint64_t v5 = v4 + 1;
  }
  a1[9] = v5;
  return (((unint64_t)v5 - a1[8]) >> 3) - 1;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8 * a2);
  int v4 = *a3;
  uint64_t v5 = *(void *)(a3 + 1);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)a3 + 2), *((void *)a3 + 3), (uint64_t)(*((void *)a3 + 3) - *((void *)a3 + 2)) >> 2);
  *(_DWORD *)uint64_t v3 = v4;
  *(void *)(v3 + 4) = v5;
  if ((int *)v3 != &v4) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 + 16), (char *)__p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_1B229ECCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[5];
  }
  if (!a2[1]) {
    ++a1[6];
  }
  uint64_t v3 = (uint64_t)(a1 + 9);
  unint64_t v4 = a1[8];
  if (v4 >= a1[9])
  {
    uint64_t result = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(a1 + 7, (uint64_t)a2);
  }
  else
  {
    std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(v3, a1[8], (uint64_t)a2);
    uint64_t result = v4 + 56;
    a1[8] = v4 + 56;
  }
  a1[8] = result;
  return result;
}

void sub_1B229ED6C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v38 = 0u;
  long long v39 = 0u;
  *(_OWORD *)uint64_t v36 = 0u;
  *(_OWORD *)int v37 = 0u;
  uint64_t v6 = -1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = -1;
  uint64_t v40 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v41 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v41 = (int)fst::CountStates<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  uint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(&__p);
    uint64_t v6 = v45;
    if (v45 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, &__p, v9, (uint64_t)v35);
  uint64_t v31 = v9;
  uint64_t v32 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v10 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    int v33 = v7;
    uint64_t v12 = 0;
    uint64_t v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*a1 + 32))(&__p, a1, v12);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Write((uint64_t)&__p, a2);
      if (__p.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v44 = __p.__r_.__value_.__r.__words[2];
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
      }
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      uint64_t v14 = *(void *)(*(void *)(a1[1] + 64) + 8 * v12);
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v15 = *(void *)(v14 + 64);
      if (v15 == v16) {
        unint64_t v17 = 0;
      }
      else {
        unint64_t v17 = *(_DWORD **)(v14 + 56);
      }
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = (v15 - v16) / 56;
        }
        uint64_t v19 = v17;
        do
        {
          int v20 = *v19;
          v19 += 14;
          LODWORD(__p.__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p.__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Write((uint64_t)(v17 + 2), a2);
          LODWORD(__p.__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          unint64_t v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
    int v7 = v33;
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    unsigned int v21 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    unint64_t v22 = (void *)fst::cerr(v21);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_32:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_35;
  }
  if (!v7)
  {
    if (v41 == v11)
    {
      uint64_t updated = 1;
      goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    uint64_t v29 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    long long v30 = (void *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_32;
  }
  uint64_t v41 = v11;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, &__p, v31, (uint64_t)v35, v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_35:
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[1]);
  }
  if (SHIBYTE(v37[0]) < 0) {
    operator delete(v36[0]);
  }
  return updated;
}

void sub_1B229F240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    unint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

void *fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Write(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 4;
  std::ostream::write();
  fst::LatticeWeightTpl<float>::Write(v4, (uint64_t)a2);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0)
  {
    unint64_t v5 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
    std::ostream::write();
    if ((int)(v5 >> 2) >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v5 & 0x3FFFFFFFCLL;
      do
      {
        std::ostream::write();
        v6 += 4;
      }
      while (v7 != v6);
    }
  }
  return a2;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      int v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      uint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B229F960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>::Type()
{
  {
    operator new();
  }
  return fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>::Type(void)::type;
}

void sub_1B229FA90(_Unwind_Exception *a1)
{
}

uint64_t fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        unint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          uint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          uint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}