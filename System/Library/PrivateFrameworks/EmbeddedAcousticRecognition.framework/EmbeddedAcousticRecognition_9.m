uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Copy()
{
}

void sub_1B1FB9EBC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitStateIterator()
{
}

void sub_1B1FB9F4C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B1FBA03C(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Init(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 112))(*(void *)(a1 + 136));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v2);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 48) = 0;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (result == -1)
  {
    *(_DWORD *)(a1 + 156) = 0;
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    *(_DWORD *)(a1 + 156) = 1;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 0x3FFFFFFF0004, 0);
    if (*(unsigned char *)(*(void *)(a1 + 144) + 4)) {
      uint64_t v5 = result & 0x2EBC21080003 | 4;
    }
    else {
      uint64_t v5 = result & 0x2EBC21080007;
    }
    *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | v5;
    if (*(_DWORD *)(a1 + 156) == 2) {
      *(_DWORD *)(a1 + 160) = 0;
    }
  }
  return result;
}

void sub_1B1FBA1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0)|| *(unsigned char *)(*(void *)(a1 + 144) + 4)))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A38AC0;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3) {
      MEMORY[0x1B3EA8670](v3, 0x1000C4090D0E795);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((void *)a1);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A41DB0;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
      int v3 = *(_DWORD *)(a1 + 160);
      if (v3 != -1 && v3 <= v2) {
        int v5 = v2 + 1;
      }
      else {
        int v5 = v2;
      }
      if (v5 >= *(_DWORD *)(a1 + 164)) {
        *(_DWORD *)(a1 + 164) = v5 + 1;
      }
      *(_DWORD *)(a1 + 64) = v5;
      *(unsigned char *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= v5) {
        *(_DWORD *)(a1 + 68) = v5 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

float fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final(uint64_t a1, int a2)
{
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2))goto LABEL_21; {
  int v4 = *(_DWORD *)(a1 + 156);
  }
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      if (*(_DWORD *)(a1 + 160) == a2) {
        float v5 = 0.0;
      }
      else {
        float v5 = INFINITY;
      }
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      *(float *)MutableState = v5;
      goto LABEL_20;
    }
    v7 = *(int **)(a1 + 144);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v23);
    fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)__p, 0, 0, &v23, -1);
    unint64_t v8 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()(v7, __p);
    int v10 = v9;
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v28);
    std::__list_imp<char *>::clear(v27);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v25);
    std::__list_imp<char *>::clear(v24);
    if (v8)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      v11 = fst::LogMessage::LogMessage((fst *)&v22, (uint64_t)__p);
      v12 = (void *)fst::cerr(v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v22);
      if (SHIBYTE(v27[0]) < 0) {
        operator delete(__p[0]);
      }
      *(void *)(a1 + 8) |= 4uLL;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)(a1 + 160) == a2)
  {
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    *(_DWORD *)MutableState = 0;
  }
  else
  {
    v13 = *(int **)(a1 + 144);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v19);
    fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)__p, 0, 0, &v19, -1);
    unint64_t v14 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()(v13, __p);
    int v10 = v15;
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v28);
    std::__list_imp<char *>::clear(v27);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v21);
    std::__list_imp<char *>::clear(v20);
    if (!v14)
    {
LABEL_19:
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      *(_DWORD *)MutableState = v10;
      goto LABEL_20;
    }
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    *(_DWORD *)MutableState = 2139095040;
  }
LABEL_20:
  *((_DWORD *)MutableState + 12) |= 9u;
LABEL_21:
  uint64_t v16 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v16 + 76) == a2) {
    uint64_t v17 = v16 + 80;
  }
  else {
    uint64_t v17 = *(void *)(v16 + 8) + 8 * (a2 + 1);
  }
  return **(float **)v17;
}

void sub_1B1FBA790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()(int *a1, _DWORD *a2)
{
  if (a2[18] == -1
    && (uint64_t v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero(),
        fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(a2 + 2, v4)))
  {
    unint64_t v5 = 0;
    unsigned int v6 = *a2;
  }
  else
  {
    unsigned int v18 = -1;
    if (!fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::Extract((uint64_t)(a2 + 2), &v17, &v18)|| (unsigned int v6 = *a2, *a2 != a2[1]))
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      v7 = fst::LogMessage::LogMessage((fst *)&v16, (uint64_t)__p);
      unint64_t v8 = (void *)fst::cerr(v7);
      int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"FromGallicMapper: unrepresentable weight: ", 42);
      int v10 = fst::operator<<<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(v9, (uint64_t)(a2 + 2));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" for arc with ilabel = ", 23);
      v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", olabel = ", 11);
      v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", nextstate = ", 14);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v16);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      *((unsigned char *)a1 + 4) = 1;
      unsigned int v6 = *a2;
    }
    if (!v6 && v18 && a2[18] == -1) {
      unsigned int v6 = *a1;
    }
    unint64_t v5 = (unint64_t)v18 << 32;
  }
  return v5 | v6;
}

void sub_1B1FBA9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::Extract(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    float v4 = *(float *)(a1 + 32);
    if (v3 == -2 && *(void *)(a1 + 24) == 0)
    {
      BOOL v6 = 1;
LABEL_13:
      BOOL v8 = v3 == -2 && v6;
      if (v8 || v4 == -INFINITY) {
        goto LABEL_22;
      }
      goto LABEL_18;
    }
    if (v4 == -INFINITY || (unint64_t)(*(void *)(a1 + 56) - 1) >= 0xFFFFFFFFFFFFFFFELL)
    {
      BOOL v6 = *(void *)(a1 + 24) == 0;
      goto LABEL_13;
    }
    return 0;
  }
  if (*(float *)(a1 + 32) == -INFINITY)
  {
LABEL_22:
    *a3 = 0;
    *a2 = 2139095040;
    return 1;
  }
  if ((unint64_t)(*(void *)(a1 + 56) - 1) < 0xFFFFFFFFFFFFFFFELL) {
    return 0;
  }
LABEL_18:
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9 == -1) {
    goto LABEL_22;
  }
  if (v9) {
    a1 = *(void *)(a1 + 40) + 16;
  }
  return fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Extract<(fst::GallicType)1>((unsigned int *)a1, a2, a3);
}

void *fst::operator<<<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  int v5 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
  {
    if (*(void *)(a2 + 24)) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = v5 == -2;
    }
    if (!v6 && *(float *)(a2 + 32) != -INFINITY) {
      goto LABEL_7;
    }
LABEL_23:
    int v10 = "EmptySet";
    uint64_t v11 = 8;
    goto LABEL_50;
  }
  float v9 = *(float *)(a2 + 32);
  if (v9 >= -INFINITY && v9 <= -INFINITY) {
    goto LABEL_23;
  }
LABEL_7:
  uint64_t v7 = a2 + 40;
  if ((unint64_t)(*(void *)(a2 + 56) + 1) < 2)
  {
LABEL_8:
    fst::CompositeWeightWriter::CompositeWeightWriter((uint64_t)v21, a1);
    if (*FLAGS_fst_weight_parentheses)
    {
      char v22 = *FLAGS_fst_weight_parentheses;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21[0], (uint64_t)&v22, 1);
    }
    if (*(_DWORD *)a2)
    {
      if (*(void *)(a2 + 24)) {
        BOOL v8 = 0;
      }
      else {
        BOOL v8 = *(_DWORD *)a2 == -2;
      }
      if (v8 || *(float *)(a2 + 32) == -INFINITY) {
        goto LABEL_24;
      }
    }
    else if (*(float *)(a2 + 32) == -INFINITY)
    {
      goto LABEL_24;
    }
    fst::CompositeWeightWriter::WriteElement<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>((uint64_t)v21, a2);
    while (v4 != v7)
    {
      fst::CompositeWeightWriter::WriteElement<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>((uint64_t)v21, v4 + 16);
      uint64_t v4 = *(void *)(v4 + 8);
    }
LABEL_24:
    if (*FLAGS_fst_weight_parentheses)
    {
      char v22 = *(unsigned char *)(FLAGS_fst_weight_parentheses + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21[0], (uint64_t)&v22, 1);
    }
    return a1;
  }
  char v13 = 0;
  BOOL v16 = v5 != -2 || *(void *)(a2 + 24) != 0 || v5 == 0;
  uint64_t v17 = *(void *)(a2 + 48);
  while (1)
  {
    char v18 = v13;
    if (v13)
    {
      uint64_t v19 = v17 + 16;
      if (v17 == v7) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v19 = a2;
      if (!v16) {
        goto LABEL_8;
      }
    }
    if (*(_DWORD *)v19)
    {
      if (*(_DWORD *)v19 == -2 && *(void *)(v19 + 24) == 0) {
        break;
      }
    }
    if (*(float *)(v19 + 32) == -INFINITY) {
      break;
    }
    char v13 = 1;
    if (v18) {
      uint64_t v17 = *(void *)(v17 + 8);
    }
  }
  int v10 = "BadSet";
  uint64_t v11 = 6;
LABEL_50:
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v10, v11);
}

void *fst::CompositeWeightWriter::WriteElement<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 >= 1)
  {
    int v5 = *(void **)a1;
    LOBYTE(v7[0]) = *FLAGS_fst_weight_separator;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, 1);
  }
  fst::CompositeWeightWriter::CompositeWeightWriter((uint64_t)v7, *(void **)a1);
  if (*FLAGS_fst_weight_parentheses)
  {
    char v8 = *FLAGS_fst_weight_parentheses;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7[0], (uint64_t)&v8, 1);
  }
  fst::CompositeWeightWriter::WriteElement<fst::StringWeight<int,(fst::StringType)1>>((uint64_t)v7, (int *)a2);
  uint64_t result = fst::CompositeWeightWriter::WriteElement<fst::LogWeightTpl<float>>((uint64_t)v7, (float *)(a2 + 32));
  if (*FLAGS_fst_weight_parentheses)
  {
    char v8 = *(unsigned char *)(FLAGS_fst_weight_parentheses + 1);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7[0], (uint64_t)&v8, 1);
  }
  return result;
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  uint64_t v5 = *(void *)(a1 + 136);
  BOOL v7 = v4 != -1 && v4 <= a2;
  unint64_t v44 = 0;
  (*(void (**)(uint64_t, void, unint64_t *))(*(void *)v5 + 136))(v5, (a2 - v7), &v40);
  while (1)
  {
    if (!v40)
    {
      if (v44 >= v42) {
        goto LABEL_30;
      }
      goto LABEL_17;
    }
    if ((*(unsigned int (**)(unint64_t))(*(void *)v40 + 24))(v40)) {
      break;
    }
    if (v40)
    {
      uint64_t v8 = (*(uint64_t (**)(unint64_t))(*(void *)v40 + 32))(v40);
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v8 = v41 + 80 * v44;
LABEL_18:
    unint64_t v33 = *(void *)v8;
    float v34 = *(float *)(v8 + 8);
    std::list<int>::list(v36, v8 + 16);
    int v37 = *(_DWORD *)(v8 + 40);
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v38, v8 + 48);
    int v9 = *(_DWORD *)(v8 + 72);
    int v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= v9) {
      ++v9;
    }
    if (v9 >= *(_DWORD *)(a1 + 164)) {
      *(_DWORD *)(a1 + 164) = v9 + 1;
    }
    int v39 = v9;
    *(void *)&long long v32 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()(*(int **)(a1 + 144), &v33);
    *((void *)&v32 + 1) = v12;
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v32);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v38);
    std::__list_imp<char *>::clear(v36);
    if (v40) {
      (*(void (**)(unint64_t))(*(void *)v40 + 40))(v40);
    }
    else {
      ++v44;
    }
  }
  if (v40)
  {
    (*(void (**)(unint64_t))(*(void *)v40 + 8))(v40);
    goto LABEL_32;
  }
LABEL_30:
  if (v43) {
    --*v43;
  }
LABEL_32:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0|| (LODWORD(v33) = fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final(a1, a2), LODWORD(v40) = 2139095040, *(float *)&v33 == INFINITY))
  {
    int v14 = *(_DWORD *)(a1 + 156);
    if (v14 == 2)
    {
      v21 = *(int **)(a1 + 144);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v26);
      fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)&v33, 0, 0, &v26, -1);
      unint64_t v22 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()(v21, &v33);
      float v24 = v23;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v38);
      std::__list_imp<char *>::clear(v36);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v28);
      std::__list_imp<char *>::clear(v27);
      if (v22 || (*(float *)&unint64_t v33 = v24, LODWORD(v40) = 2139095040, v24 != INFINITY))
      {
        int v25 = *(_DWORD *)(a1 + 160);
        unint64_t v33 = v22;
        float v34 = v24;
        int v35 = v25;
        uint64_t v19 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        v20 = &v33;
        goto LABEL_43;
      }
    }
    else if (v14 == 1)
    {
      char v15 = *(int **)(a1 + 144);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v29);
      fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)&v33, 0, 0, &v29, -1);
      unint64_t v16 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()(v15, &v33);
      unint64_t v40 = v16;
      uint64_t v41 = v17;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v38);
      std::__list_imp<char *>::clear(v36);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v31);
      std::__list_imp<char *>::clear(v30);
      if (v16)
      {
        int v18 = *(_DWORD *)(a1 + 160);
        if (v18 == -1)
        {
          int v18 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v18;
          *(_DWORD *)(a1 + 164) = v18 + 1;
        }
        HIDWORD(v41) = v18;
        uint64_t v19 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
        v20 = &v40;
LABEL_43:
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v19, v20);
      }
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1FBB2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v3 + 48));
  std::__list_imp<char *>::clear((void *)(v3 + 16));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)va1);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A41DB0;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1FBB4C8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FBB5A8(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F0A3A188;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = *(void *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1B1FBB654(_Unwind_Exception *exception_object)
{
  if (*v1) {
    fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::StateIterator(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    uint64_t v2 = result;
    if (!*(unsigned char *)(result + 44))
    {
      uint64_t result = *(void *)(result + 16);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
        if (result) {
          return result;
        }
        uint64_t v1 = *(void *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      uint64_t v3 = *(int **)(v1 + 144);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v1 + 136) + 32))(&v5);
      fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)v8, 0, 0, &v5, -1);
      unint64_t v4 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()(v3, v8);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v10);
      std::__list_imp<char *>::clear(v9);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v7);
      uint64_t result = (uint64_t)std::__list_imp<char *>::clear(v6);
      if (v4) {
        *(unsigned char *)(v2 + 44) = 1;
      }
    }
  }
  return result;
}

void sub_1B1FBB78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v2 + 48));
  std::__list_imp<char *>::clear((void *)(v2 + 16));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)va1);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A3A188;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~StateIterator(void *a1)
{
  *a1 = &unk_1F0A3A188;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Done(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2)) {
      return *(unsigned char *)(a1 + 44) == 0;
    }
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(unsigned char *)(a1 + 44) == 0;
  }
  return 0;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Next(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 40);
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if ((result & 1) == 0)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
LABEL_7:
        return fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 44)) {
    *(unsigned char *)(a1 + 44) = 0;
  }
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  else {
    *(_DWORD *)(a1 + 32) = 0;
  }
  *(unsigned char *)(a1 + 44) = *(_DWORD *)(*(void *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A44668;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A41830;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3E2F8;
  uint64_t v2 = a1[20];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFstImplBase(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FBBCD8(_Unwind_Exception *a1)
{
  fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFstImplBase(v1);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1FBBD60(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 52);
  _Unwind_Resume(a1);
}

void *fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFst(void *a1, uint64_t a2, int a3)
{
  *a1 = &unk_1F0A3B438;
  a1[1] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v6 = (_DWORD *)a1[1];
    if (v6)
    {
      int v7 = v6[14] - 1;
      v6[14] = v7;
      if (!v7) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
    }
    a1[1] = v5;
  }
  else
  {
    fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetImpl((uint64_t)a1, v4, 0);
  }
  return a1;
}

void sub_1B1FBBE34(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  uint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ArcIterator(&v20, *(void *)(a1 + 8), v6);
    unint64_t v7 = v21;
    uint64_t v8 = *((void *)v20 + 3);
    uint64_t v9 = *((void *)v20 + 4) - v8;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      uint64_t v11 = v9 >> 4;
      int v12 = *(_DWORD *)(v10 + 68);
      char v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        int v15 = *v13;
        v13 += 4;
        int v14 = v15;
        if (v12 <= v15)
        {
          int v12 = v14 + 1;
          *(_DWORD *)(v10 + 68) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      unint64_t v21 = v11;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v16 = *(_DWORD *)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(v17 + 68);
    --*((_DWORD *)v20 + 13);
    BOOL v4 = v16 >= v18;
    if (v16 < v18) {
      break;
    }
    uint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v17);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1FBBFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)(*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 48))(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1FBC058(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

void fst::Push<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, int a2)
{
  memset(v2, 0, sizeof(v2));
  fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a1, (uint64_t)v2, a2 == 0);
}

void sub_1B1FBC2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  std::__list_imp<char *>::clear(v20);
  std::__list_imp<char *>::clear(v19);
  a19 = (void **)(v21 - 72);
  std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::AcceptorMinimize<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 0x200010000, 1)) {
    fst::Connect<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a1);
  }
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  int v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"FST is not an unweighted acceptor", 33);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
}

void sub_1B1FBC5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v6);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 288))(a2, 0);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result == -1)
  {
    if ((v7 & 4) != 0)
    {
      int v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192);
      return v18(a2, 4, 4);
    }
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    BOOL v9 = fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a1) != -1;
    (*(void (**)(uint64_t, BOOL))(*(void *)a2 + 248))(a2, v9);
  }
  LODWORD(v++*(_DWORD *)(result + 24) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v22);
  while (!v22)
  {
    if ((int)v24 >= (int)v23) {
      goto LABEL_14;
    }
LABEL_9:
    (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 32))(v22);
    }
    else {
      LODWORD(v++*(_DWORD *)(result + 24) = v24 + 1;
    }
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v22 + 16))(v22)) {
    goto LABEL_9;
  }
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
LABEL_14:
  unsigned int v33 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v31);
  LODWORD(v10) = -1;
  while (2)
  {
    if (!v31)
    {
      if ((int)v33 >= v32) {
        goto LABEL_47;
      }
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v31 + 16))(v31))
    {
      if (v31)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 24))(v31);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v11 = v33;
LABEL_21:
      if (v11 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v11);
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 256))(a2, v11, v12);
      unint64_t v26 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 136))(a1, v11, &v22);
LABEL_24:
      if (v22)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 24))(v22))
        {
          if (v22)
          {
            (*(void (**)(void))(*(void *)v22 + 8))();
            goto LABEL_37;
          }
LABEL_35:
          if (v25) {
            --*v25;
          }
LABEL_37:
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v19, a1, v11);
          uint64_t v22 = 0;
          LODWORD(v23) = v19;
          std::list<int>::list(&v24, (uint64_t)v20);
          int v27 = v21;
          int v28 = -1;
          unint64_t v29 = fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()((uint64_t *)a3, (int *)&v22);
          uint64_t v30 = v15;
          std::__list_imp<char *>::clear(&v24);
          std::__list_imp<char *>::clear(v20);
          if (v29)
          {
            if (v10 == -1)
            {
              uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
              (*(void (**)(uint64_t, uint64_t, double))(*(void *)a2 + 184))(a2, v10, 0.0);
            }
            HIDWORD(v30) = v10;
            (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(void *)a2 + 208))(a2, v11, &v29);
            (*(void (**)(uint64_t, uint64_t, float))(*(void *)a2 + 184))(a2, v11, INFINITY);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, float))(*(void *)a2 + 184))(a2, v11, *(float *)&v30);
          }
          if (v31) {
            (*(void (**)(uint64_t))(*(void *)v31 + 32))(v31);
          }
          else {
            ++v33;
          }
          continue;
        }
        if (v22)
        {
          char v13 = (int *)(*(uint64_t (**)(void))(*(void *)v22 + 32))();
          goto LABEL_30;
        }
      }
      else if (v26 >= v24)
      {
        goto LABEL_35;
      }
      char v13 = (int *)(v23 + 56 * v26);
LABEL_30:
      unint64_t v29 = fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()((uint64_t *)a3, v13);
      uint64_t v30 = v14;
      (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(void *)a2 + 208))(a2, v11, &v29);
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
      }
      else {
        ++v26;
      }
      goto LABEL_24;
    }
    break;
  }
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
LABEL_47:
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v17 = v7 & 0x2EBC21080007;
  if (*(unsigned char *)(a3 + 72)) {
    uint64_t v17 = v7 & 0x2EBC21080003 | 4;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, v17 | v16, 0x3FFFFFFF0007);
}

void sub_1B1FBCF30(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  uint64_t v5 = *(void *)(v3 - 104);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFst()
{
}

void sub_1B1FBD060(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  BOOL v4 = *(_DWORD **)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *v4;
  uint64_t result = std::list<int>::list((void *)(a3 + 8), (uint64_t)(v4 + 2));
  *(_DWORD *)(a3 + 32) = v4[8];
  return result;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  unint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 56);
  uint64_t v4 = *v5;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B1FBD404(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

void *fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  int v8 = *a3;
  std::list<int>::list(v9, (uint64_t)(a3 + 2));
  int v10 = a3[8];
  fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(v6, a2, &v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1B1FBD524(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteArcs(v4, a2);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56);
  return std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::InitMutableArcIterator()
{
}

void sub_1B1FBD9D0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FF48;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A5D0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B1FBDAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D3D0;
  uint64_t v2 = (void *)a1[9];
  if (v2 != (void *)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void *)a1[8];
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FF48;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1FBDDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1FBDEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B1FBDFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B1FBE0B0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FF48;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A5D0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v20 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v18);
  while (1)
  {
    if (!v18)
    {
      if ((int)v20 >= v19) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v20;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 16))(v18)) {
      break;
    }
    if (!v18) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 24))(v18);
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddState((void *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v16, a2, v9);
    fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(a1, v9, (int *)&v16);
    std::__list_imp<char *>::clear(v17);
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 56), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __str.__r_.__value_.__r.__words[2]) {
          goto LABEL_24;
        }
LABEL_18:
        uint64_t v11 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v15);
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__str.__r_.__value_.__r.__words[0]) {
        goto LABEL_18;
      }
      uint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_19:
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__str.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v14) {
      --*v14;
    }
LABEL_26:
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 32))(v18);
    }
    else {
      ++v20;
    }
  }
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B1FBE5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(v16);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B1FBE820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>();
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddState(void *a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  uint64_t v3 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  *(_DWORD *)uint64_t v2 = *v3;
  std::list<int>::list((void *)v2 + 1, (uint64_t)(v3 + 2));
  unint64_t v4 = a1[10];
  *((_DWORD *)v2 + 8) = v3[8];
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *((void *)v2 + 9) = 0;
  uint64_t v5 = (void *)a1[9];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1[8];
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v11);
    }
    else {
      char v12 = 0;
    }
    char v13 = &v12[8 * v8];
    uint64_t v14 = &v12[8 * v11];
    *(void *)char v13 = v2;
    int v6 = v13 + 8;
    uint64_t v16 = (char *)a1[8];
    std::string::size_type v15 = (char *)a1[9];
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      std::string::size_type v15 = (char *)a1[8];
    }
    a1[8] = v13;
    a1[9] = v6;
    a1[10] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v5 = v2;
    int v6 = v5 + 1;
  }
  a1[9] = v6;
  return (((unint64_t)v6 - a1[8]) >> 3) - 1;
}

void *fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8 * a2);
  int v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  int v5 = a3[8];
  int v9 = v5;
  *(_DWORD *)uint64_t v4 = v7;
  if ((int *)v4 != &v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v4 + 8), v8[1], (uint64_t)v8);
    int v5 = v9;
  }
  *(_DWORD *)(v4 + 32) = v5;
  return std::__list_imp<char *>::clear(v8);
}

void sub_1B1FBE9F0(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero(void)::zero;
}

void sub_1B1FBEAA0(_Unwind_Exception *a1)
{
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Zero()
{
  {
    operator new();
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Zero(void)::zero;
}

void sub_1B1FBEB74(_Unwind_Exception *a1)
{
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Zero()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Zero(void)::zero;
}

void sub_1B1FBEC74(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    uint64_t v7[3] = v7[0] + 56 * v6;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1FBED68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(void *)(v12 - 56) = *(void *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((void *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1FBEE94(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[5];
  }
  if (!a2[1]) {
    ++a1[6];
  }
  uint64_t v3 = a1 + 7;
  unint64_t v4 = a1[8];
  if (v4 >= a1[9])
  {
    uint64_t result = std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>((uint64_t)v3, (uint64_t)a2);
    uint64_t result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

void *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t result = std::list<int>::list((void *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1B1FBEF88(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[56 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((void *)v11 + 2, a2 + 16);
  uint64_t v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1FBF0C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      unint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, a3, 1);
  }
}

void sub_1B1FBF214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v8 = v7;
  if (!a4
    || (uint64_t v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    unint64_t v8 = v7 & 7;
    unint64_t v116 = v8;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      v112 = (uint64_t *)&v116;
      fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, (uint64_t)&v109);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0) {
      goto LABEL_211;
    }
    uint64_t v11 = a2 & 0xC0000;
    uint64_t v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0) {
      uint64_t v12 = 0x10425A850000;
    }
    unint64_t v13 = v8 | v12;
    uint64_t v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0) {
      v13 |= 0x100000uLL;
    }
    unint64_t v116 = v13;
    memset(&v108, 0, sizeof(v108));
    memset(&v107, 0, sizeof(v107));
    unsigned int v106 = 0;
    uint64_t v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v104);
    int v16 = 0;
LABEL_12:
    if (!v104)
    {
      if ((int)v106 >= v105) {
        goto LABEL_203;
      }
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v104 + 16))(v104))
    {
      if (v104)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v104 + 24))();
LABEL_18:
        std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v17);
        uint64_t v111 = (uint64_t)&v111;
        v112 = &v111;
        uint64_t v113 = 0;
        LODWORD(v110) = 0;
        v108.__end_ = v108.__begin_;
        v107.__end_ = v107.__begin_;
        if (v11) {
          std::vector<int>::reserve(&v108, v18);
        }
        if (v14) {
          std::vector<int>::reserve(&v107, v18);
        }
        int v98 = v16;
        unint64_t v103 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 136))(v15, v17, &v99);
        char v19 = 1;
        while (1)
        {
          if (v99)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v99 + 24))(v99))
            {
              if (v99)
              {
                (*(void (**)(void))(*(void *)v99 + 8))();
              }
              else
              {
LABEL_132:
                if (v102) {
                  --*v102;
                }
              }
              uint64_t v15 = a1;
              int v16 = v98;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v108.__end_ - (char *)v108.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14) {
                  goto LABEL_152;
                }
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  unint64_t v72 = v107.__end_ - v107.__begin_;
                  if (v72 <= 2) {
                    unint64_t v72 = 2;
                  }
                  std::vector<unsigned int>::pointer v73 = v107.__begin_ + 1;
                  unsigned int v74 = *v107.__begin_;
                  unint64_t v75 = v72 - 1;
                  while (1)
                  {
                    unsigned int v77 = *v73++;
                    unsigned int v76 = v77;
                    if (v77 == v74) {
                      break;
                    }
                    unsigned int v74 = v76;
                    if (!--v75) {
                      goto LABEL_152;
                    }
                  }
                  unint64_t v116 = v116 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              unint64_t v66 = v108.__end_ - v108.__begin_;
              if (v66 <= 2) {
                unint64_t v66 = 2;
              }
              std::vector<unsigned int>::pointer v67 = v108.__begin_ + 1;
              unsigned int v68 = *v108.__begin_;
              unint64_t v69 = v66 - 1;
              while (1)
              {
                unsigned int v71 = *v67++;
                unsigned int v70 = v71;
                if (v71 == v68) {
                  break;
                }
                unsigned int v68 = v70;
                if (!--v69) {
                  goto LABEL_141;
                }
              }
              unint64_t v116 = v116 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14) {
                goto LABEL_142;
              }
LABEL_152:
              if (v98 >= 1) {
                unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v99, a1, v17);
              uint64_t v78 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
              if (v99) {
                v79 = (char *)v102 + 1;
              }
              else {
                v79 = 0;
              }
              if (*(_DWORD *)v78) {
                uint64_t v80 = *(void *)(v78 + 24) + 1;
              }
              else {
                uint64_t v80 = 0;
              }
              if (v79 != (char *)v80) {
                goto LABEL_174;
              }
              char v81 = 0;
              unint64_t v82 = v101;
              v83 = (uint64_t *)(v78 + 16);
              BOOL v84 = v99 && v99 == *(_DWORD *)v78;
              BOOL v85 = !v84;
              while (1)
              {
                uint64_t v86 = *v83;
                if ((v81 & 1) == 0 && v85) {
                  break;
                }
                if ((uint64_t *)v82 == &v100) {
                  goto LABEL_173;
                }
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16)) {
                  goto LABEL_174;
                }
                unint64_t v82 = *(void *)(v82 + 8);
                v83 = (uint64_t *)(v86 + 8);
                char v81 = 1;
              }
              if (v99) {
                goto LABEL_174;
              }
LABEL_173:
              float v118 = *(float *)&v103;
              float v117 = 0.0;
              float v117 = *(float *)(v78 + 32);
              if (*(float *)&v103 == v117)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 40))(a1, v17, *(float *)&v103) != 1)unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000; {
              }
                }
              else
              {
LABEL_174:
                uint64_t v87 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
                if (v99) {
                  v88 = (char *)v102 + 1;
                }
                else {
                  v88 = 0;
                }
                if (*(_DWORD *)v87) {
                  uint64_t v89 = *(void *)(v87 + 24) + 1;
                }
                else {
                  uint64_t v89 = 0;
                }
                if (v88 != (char *)v89) {
                  goto LABEL_194;
                }
                char v90 = 0;
                unint64_t v91 = v101;
                v92 = (uint64_t *)(v87 + 16);
                BOOL v93 = v99 && v99 == *(_DWORD *)v87;
                BOOL v94 = !v93;
                while (1)
                {
                  uint64_t v95 = *v92;
                  if ((v90 & 1) == 0 && v94) {
                    break;
                  }
                  if ((uint64_t *)v91 == &v100) {
                    goto LABEL_193;
                  }
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16)) {
                    goto LABEL_194;
                  }
                  unint64_t v91 = *(void *)(v91 + 8);
                  v92 = (uint64_t *)(v95 + 8);
                  char v90 = 1;
                }
                if (v99) {
                  goto LABEL_194;
                }
LABEL_193:
                float v118 = *(float *)&v103;
                float v117 = 0.0;
                float v117 = *(float *)(v87 + 32);
                if (*(float *)&v103 != v117) {
LABEL_194:
                }
                  unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                int v16 = v98 + 1;
              }
              std::__list_imp<char *>::clear(&v100);
              std::__list_imp<char *>::clear(&v111);
              if (v104) {
                (*(void (**)(uint64_t))(*(void *)v104 + 32))(v104);
              }
              else {
                ++v106;
              }
              goto LABEL_12;
            }
            if (v99)
            {
              uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v99 + 32))();
              goto LABEL_29;
            }
          }
          else if (v103 >= v101)
          {
            goto LABEL_132;
          }
          uint64_t v20 = v100 + 56 * v103;
LABEL_29:
          int v21 = *(_DWORD *)v20;
          int v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            unint64_t v116 = v116 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            int v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22) {
                goto LABEL_35;
              }
              goto LABEL_39;
            }
            unint64_t v23 = v116;
          }
          else
          {
            unint64_t v23 = v116 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          unint64_t v116 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_44;
          }
LABEL_39:
          unint64_t v116 = v116 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v109) {
              unint64_t v116 = v116 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            }
            if (v22 < SHIDWORD(v109)) {
              unint64_t v116 = v116 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
            }
          }
LABEL_44:
          uint64_t v24 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
          int v25 = *(_DWORD *)(v20 + 8);
          if (v25) {
            uint64_t v26 = *(void *)(v20 + 32) + 1;
          }
          else {
            uint64_t v26 = 0;
          }
          if (*(_DWORD *)v24) {
            uint64_t v27 = *(void *)(v24 + 24) + 1;
          }
          else {
            uint64_t v27 = 0;
          }
          if (v26 != v27) {
            goto LABEL_64;
          }
          char v28 = 0;
          unint64_t v29 = (uint64_t *)(v20 + 24);
          uint64_t v30 = (uint64_t *)(v24 + 16);
          BOOL v31 = v25 && v25 == *(_DWORD *)v24;
          BOOL v32 = !v31;
          while (1)
          {
            uint64_t v33 = *v29;
            uint64_t v34 = *v30;
            if ((v28 & 1) == 0 && v32) {
              break;
            }
            if (v33 == v20 + 16) {
              goto LABEL_63;
            }
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16)) {
              goto LABEL_64;
            }
            unint64_t v29 = (uint64_t *)(v33 + 8);
            uint64_t v30 = (uint64_t *)(v34 + 8);
            char v28 = 1;
          }
          if (v25) {
            goto LABEL_64;
          }
LABEL_63:
          float v118 = 0.0;
          float v118 = *(float *)(v20 + 40);
          float v117 = 0.0;
          float v117 = *(float *)(v24 + 32);
          if (v118 != v117)
          {
LABEL_64:
            uint64_t v35 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
            int v25 = *(_DWORD *)(v20 + 8);
            if (v25) {
              uint64_t v36 = *(void *)(v20 + 32) + 1;
            }
            else {
              uint64_t v36 = 0;
            }
            if (*(_DWORD *)v35) {
              uint64_t v37 = *(void *)(v35 + 24) + 1;
            }
            else {
              uint64_t v37 = 0;
            }
            if (v36 != v37) {
              goto LABEL_84;
            }
            char v38 = 0;
            int v39 = (uint64_t *)(v20 + 24);
            unint64_t v40 = (uint64_t *)(v35 + 16);
            BOOL v41 = v25 && v25 == *(_DWORD *)v35;
            BOOL v42 = !v41;
            while (1)
            {
              uint64_t v43 = *v39;
              uint64_t v44 = *v40;
              if ((v38 & 1) == 0 && v42) {
                break;
              }
              if (v43 == v20 + 16) {
                goto LABEL_83;
              }
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16)) {
                goto LABEL_84;
              }
              int v39 = (uint64_t *)(v43 + 8);
              unint64_t v40 = (uint64_t *)(v44 + 8);
              char v38 = 1;
            }
            if (v25) {
              goto LABEL_84;
            }
LABEL_83:
            float v118 = 0.0;
            float v118 = *(float *)(v20 + 40);
            float v117 = 0.0;
            float v117 = *(float *)(v35 + 32);
            if (v118 != v117) {
LABEL_84:
            }
              unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          int v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17) {
            unint64_t v116 = v116 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          }
          if (v45 != v17 + 1) {
            unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          }
          uint64_t v109 = *(void *)v20;
          LODWORD(v110) = v25;
          if (&v109 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v111, *(void *)(v20 + 24), v20 + 16);
            int v45 = *(_DWORD *)(v20 + 48);
          }
          int v114 = *(_DWORD *)(v20 + 40);
          int v115 = v45;
          if (v11)
          {
            std::vector<unsigned int>::pointer end = v108.__end_;
            if (v108.__end_ >= v108.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer begin = v108.__begin_;
              int64_t v49 = v108.__end_ - v108.__begin_;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62) {
                goto LABEL_213;
              }
              int64_t v51 = (char *)v108.__end_cap_.__value_ - (char *)v108.__begin_;
              if (((char *)v108.__end_cap_.__value_ - (char *)v108.__begin_) >> 1 > v50) {
                unint64_t v50 = v51 >> 1;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v108.__end_cap_, v52);
                std::vector<unsigned int>::pointer begin = v108.__begin_;
                std::vector<unsigned int>::pointer end = v108.__end_;
              }
              else
              {
                v53 = 0;
              }
              v54 = (unsigned int *)&v53[4 * v49];
              unsigned int *v54 = *(_DWORD *)v20;
              v47 = v54 + 1;
              while (end != begin)
              {
                unsigned int v55 = *--end;
                *--v54 = v55;
              }
              v108.__begin_ = v54;
              v108.__end_ = v47;
              v108.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *v108.__end_ = *(_DWORD *)v20;
              v47 = end + 1;
            }
            v108.__end_ = v47;
          }
          if (v14)
          {
            std::vector<unsigned int>::pointer v56 = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer v58 = v107.__begin_;
              int64_t v59 = v107.__end_ - v107.__begin_;
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62) {
LABEL_213:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              int64_t v61 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v60) {
                unint64_t v60 = v61 >> 1;
              }
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v60;
              }
              if (v62)
              {
                v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v62);
                std::vector<unsigned int>::pointer v58 = v107.__begin_;
                std::vector<unsigned int>::pointer v56 = v107.__end_;
              }
              else
              {
                v63 = 0;
              }
              v64 = (unsigned int *)&v63[4 * v59];
              unsigned int *v64 = *(_DWORD *)(v20 + 4);
              v57 = v64 + 1;
              while (v56 != v58)
              {
                unsigned int v65 = *--v56;
                *--v64 = v65;
              }
              v107.__begin_ = v64;
              v107.__end_ = v57;
              v107.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              *v107.__end_ = *(_DWORD *)(v20 + 4);
              v57 = v56 + 1;
            }
            v107.__end_ = v57;
          }
          if (v99)
          {
            (*(void (**)(uint64_t))(*(void *)v99 + 40))(v99);
            char v19 = 0;
          }
          else
          {
            char v19 = 0;
            ++v103;
          }
        }
      }
LABEL_17:
      uint64_t v17 = v106;
      goto LABEL_18;
    }
    if (v104) {
      (*(void (**)(void))(*(void *)v104 + 8))();
    }
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15))
    {
      unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    if (v108.__begin_)
    {
      v108.__end_ = v108.__begin_;
      operator delete(v108.__begin_);
    }
    unint64_t v8 = v116;
LABEL_211:
    uint64_t v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1B1FBFE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One(void)::one;
}

void sub_1B1FBFFC0(_Unwind_Exception *a1)
{
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FC086C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
    **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

unint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v34);
  uint64_t v6 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  if (v34) {
    uint64_t v7 = v35[2] + 1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (*(_DWORD *)v6) {
    uint64_t v8 = *(void *)(v6 + 24) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 == v8)
  {
    char v9 = 0;
    uint64_t v10 = v35[1];
    uint64_t v11 = (uint64_t *)(v6 + 16);
    if (v34) {
      BOOL v12 = v34 == *(_DWORD *)v6;
    }
    else {
      BOOL v12 = 0;
    }
    int v13 = !v12;
    int v14 = v13 ^ 1;
    while (1)
    {
      uint64_t v15 = *v11;
      if ((v9 & 1) == 0 && !v14) {
        break;
      }
      if ((void *)v10 == v35) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16)) {
        goto LABEL_21;
      }
      uint64_t v10 = *(void *)(v10 + 8);
      uint64_t v11 = (uint64_t *)(v15 + 8);
      char v9 = 1;
    }
    if (v34) {
      goto LABEL_21;
    }
LABEL_42:
    float v38 = v36;
    float v37 = 0.0;
    float v37 = *(float *)(v6 + 32);
    float v32 = v36;
    float v33 = v37;
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      unint64_t v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  unint64_t v17 = a2;
  *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  uint64_t v18 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17)) {
    goto LABEL_36;
  }
  char v19 = 0;
  uint64_t v20 = *(void **)(a1 + 80);
  uint64_t v21 = v20[1];
  uint64_t v22 = **(void **)(a1 + 16);
  unint64_t v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    unint64_t v24 = *v23--;
    v19 |= *(void *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while (v24 != a2);
  int v25 = *(void **)a1;
  uint64_t v26 = **(void **)(a1 + 72);
  for (i = (int *)(v21 - 4); ; --i)
  {
    unint64_t v28 = *i;
    if (v25) {
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    }
    unint64_t result = v28 >> 6;
    uint64_t v29 = 1 << v28;
    if ((v19 & 1) == 0) {
      break;
    }
    *(void *)(v22 + 8 * result) |= v29;
    *(void *)(v26 + 8 * result) &= ~v29;
    if (v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(void *)(v26 + 8 * result) &= ~v29;
  if (v28 != a2) {
    goto LABEL_33;
  }
  v20[1] = i;
  **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    uint64_t v30 = **(void **)(a1 + 16);
    if ((*(void *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17)) {
      *(void *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3)) {
      *(_DWORD *)(v18 + 4 * a3) = v31;
    }
  }
  return result;
}

void sub_1B1FC0D28(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36F90;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36F90;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36F90;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1FC0DD8(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37F48;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1FC0EF0(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37F48;
  uint64_t v2 = a1 + 3;
  for (i = (void *)a1[4]; i != v2; i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::vector<unsigned int>::pointer v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1FC1338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::One()
{
  {
    operator new();
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::One(void)::one;
}

void sub_1B1FC1420(_Unwind_Exception *a1)
{
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::One()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::One(void)::one;
}

void sub_1B1FC151C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    uint64_t v10 = v27 + 56 * v28;
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v25 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v25 = v13;
    }
    *(void *)(a1 + 8) = v25;
    uint64_t v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(uint64_t **)(a1 + 16);
    uint64_t v15 = *(uint64_t **)a1;
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = &v14[7 * v13];
  uint64_t v16 = v26;
  uint64_t v17 = v27;
  unint64_t v19 = v28;
  uint64_t v18 = v29;
  if (v29) {
    ++*v29;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    uint64_t v24 = v15 - 7;
    *uint64_t v24 = *(void *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(void *)(v23 + 24), v23 + 16);
    }
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 56 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B1FC1810(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::WriteFst<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v37 = 0u;
  long long v38 = 0u;
  *(_OWORD *)uint64_t v35 = 0u;
  *(_OWORD *)uint64_t v36 = 0u;
  uint64_t v6 = -1;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = -1;
  uint64_t v39 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v40 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v40 = (int)fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t)a1);
    goto LABEL_6;
  }
  unint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v43;
    if (v43 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v9, (uint64_t)v34);
  uint64_t v31 = v9;
  uint64_t v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v10 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(__p);
      std::__list_imp<char *>::clear(&__p[0].__r_.__value_.__l.__size_);
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      uint64_t v14 = *(void *)(*(void *)(a1[1] + 64) + 8 * v12);
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v15 = *(void *)(v14 + 64);
      if (v15 == v16) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *(_DWORD **)(v14 + 56);
      }
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = (v15 - v16) / 56;
        }
        unint64_t v19 = v17;
        do
        {
          int v20 = *v19;
          v19 += 14;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(v17 + 2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          uint64_t v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    int v21 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    uint64_t v22 = (void *)fst::cerr(v21);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_30:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v33);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_33;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      uint64_t updated = 1;
      goto LABEL_33;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v29 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    long long v30 = (void *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_30;
  }
  uint64_t v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_33:
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[1]);
  }
  if (SHIBYTE(v36[0]) < 0) {
    operator delete(v35[0]);
  }
  return updated;
}

void sub_1B1FC1D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a17);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      int v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      uint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      unint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B1FC2370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::Type()
{
  {
    operator new();
  }
  return fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::Type(void)::type;
}

void sub_1B1FC2464(_Unwind_Exception *a1)
{
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        uint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B1FC27B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void *fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(void *a1, int a2, int *a3)
{
  uint64_t v6 = *(int **)(a1[8] + 8 * a2);
  int v18 = *v6;
  std::list<int>::list(v19, (uint64_t)(v6 + 2));
  int v20 = v6[8];
  int v15 = *a3;
  std::list<int>::list(v16, (uint64_t)(a3 + 2));
  int v17 = a3[8];
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal((uint64_t)a1, a2, &v15);
  std::__list_imp<char *>::clear(v16);
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  int v12 = v18;
  std::list<int>::list(v13, (uint64_t)v19);
  int v14 = v20;
  int v9 = *a3;
  std::list<int>::list(v10, (uint64_t)(a3 + 2));
  int v11 = a3[8];
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>(v7, &v12, &v9);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(v13);
  return std::__list_imp<char *>::clear(v19);
}

void sub_1B1FC2990(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::SetFinalProperties<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>(unint64_t a1, int *a2, int *a3)
{
  uint64_t v6 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  int v7 = *a2;
  if (*a2) {
    uint64_t v8 = *((void *)a2 + 3) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (*(_DWORD *)v6) {
    uint64_t v9 = *(void *)(v6 + 24) + 1;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8 != v9) {
    goto LABEL_22;
  }
  char v10 = 0;
  int v11 = (uint64_t *)(a2 + 4);
  int v12 = (uint64_t *)(v6 + 16);
  BOOL v13 = v7 && v7 == *(_DWORD *)v6;
  BOOL v14 = !v13;
  int v15 = !v14;
  while (1)
  {
    uint64_t v16 = *v11;
    uint64_t v17 = *v12;
    if ((v10 & 1) == 0 && !v15) {
      break;
    }
    if ((int *)v16 == a2 + 2) {
      goto LABEL_21;
    }
    if (*(_DWORD *)(v16 + 16) != *(_DWORD *)(v17 + 16)) {
      goto LABEL_22;
    }
    int v11 = (uint64_t *)(v16 + 8);
    int v12 = (uint64_t *)(v17 + 8);
    char v10 = 1;
  }
  if (v7) {
    goto LABEL_22;
  }
LABEL_21:
  if (*((float *)a2 + 8) != *(float *)(v6 + 32))
  {
LABEL_22:
    uint64_t v18 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
    int v19 = *a2;
    if (*a2) {
      uint64_t v20 = *((void *)a2 + 3) + 1;
    }
    else {
      uint64_t v20 = 0;
    }
    if (*(_DWORD *)v18) {
      uint64_t v21 = *(void *)(v18 + 24) + 1;
    }
    else {
      uint64_t v21 = 0;
    }
    if (v20 != v21) {
      goto LABEL_43;
    }
    char v22 = 0;
    char v23 = (uint64_t *)(a2 + 4);
    int v24 = (uint64_t *)(v18 + 16);
    BOOL v25 = v19 && v19 == *(_DWORD *)v18;
    BOOL v26 = !v25;
    int v27 = !v26;
    while (1)
    {
      uint64_t v28 = *v23;
      uint64_t v29 = *v24;
      if ((v22 & 1) == 0 && !v27) {
        break;
      }
      if ((int *)v28 == a2 + 2) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v28 + 16) != *(_DWORD *)(v29 + 16)) {
        goto LABEL_43;
      }
      char v23 = (uint64_t *)(v28 + 8);
      int v24 = (uint64_t *)(v29 + 8);
      char v22 = 1;
    }
    if (v19) {
      goto LABEL_43;
    }
LABEL_42:
    if (*((float *)a2 + 8) != *(float *)(v18 + 32)) {
LABEL_43:
    }
      a1 &= ~0x100000000uLL;
  }
  uint64_t v30 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  int v31 = *a3;
  if (*a3) {
    uint64_t v32 = *((void *)a3 + 3) + 1;
  }
  else {
    uint64_t v32 = 0;
  }
  if (*(_DWORD *)v30) {
    uint64_t v33 = *(void *)(v30 + 24) + 1;
  }
  else {
    uint64_t v33 = 0;
  }
  if (v32 != v33) {
    goto LABEL_65;
  }
  char v34 = 0;
  long long v35 = (uint64_t *)(a3 + 4);
  long long v36 = (uint64_t *)(v30 + 16);
  BOOL v37 = v31 && v31 == *(_DWORD *)v30;
  BOOL v38 = !v37;
  int v39 = !v38;
  while (1)
  {
    uint64_t v40 = *v35;
    uint64_t v41 = *v36;
    if ((v34 & 1) == 0 && !v39) {
      break;
    }
    if ((int *)v40 == a3 + 2) {
      goto LABEL_64;
    }
    if (*(_DWORD *)(v40 + 16) != *(_DWORD *)(v41 + 16)) {
      goto LABEL_65;
    }
    long long v35 = (uint64_t *)(v40 + 8);
    long long v36 = (uint64_t *)(v41 + 8);
    char v34 = 1;
  }
  if (v31) {
    goto LABEL_65;
  }
LABEL_64:
  if (*((float *)a3 + 8) != *(float *)(v30 + 32))
  {
LABEL_65:
    uint64_t v42 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
    int v43 = *a3;
    if (*a3) {
      uint64_t v44 = *((void *)a3 + 3) + 1;
    }
    else {
      uint64_t v44 = 0;
    }
    if (*(_DWORD *)v42) {
      uint64_t v45 = *(void *)(v42 + 24) + 1;
    }
    else {
      uint64_t v45 = 0;
    }
    if (v44 != v45) {
      goto LABEL_86;
    }
    char v46 = 0;
    uint64_t v47 = (uint64_t *)(a3 + 4);
    v48 = (uint64_t *)(v42 + 16);
    BOOL v49 = v43 && v43 == *(_DWORD *)v42;
    BOOL v50 = !v49;
    int v51 = !v50;
    while (1)
    {
      uint64_t v52 = *v47;
      uint64_t v53 = *v48;
      if ((v46 & 1) == 0 && !v51) {
        break;
      }
      if ((int *)v52 == a3 + 2) {
        goto LABEL_85;
      }
      if (*(_DWORD *)(v52 + 16) != *(_DWORD *)(v53 + 16)) {
        goto LABEL_86;
      }
      uint64_t v47 = (uint64_t *)(v52 + 8);
      v48 = (uint64_t *)(v53 + 8);
      char v46 = 1;
    }
    if (v43) {
      goto LABEL_86;
    }
LABEL_85:
    if (*((float *)a3 + 8) != *(float *)(v42 + 32)) {
LABEL_86:
    }
      a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  return a1 & 0x3FFFFFF0007;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(void *a1, int a2, int *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 56)) {
    int v7 = 0;
  }
  else {
    int v7 = (_DWORD *)(v6 - 56);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);
  return fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(v9, a3);
}

uint64_t fst::AddArcProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(unint64_t a1, int a2, int *a3, _DWORD *a4)
{
  int v6 = *a3;
  int v7 = a3[1];
  unint64_t v8 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*a3 == v7) {
    unint64_t v8 = a1;
  }
  unint64_t v9 = v8 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v7) {
    unint64_t v9 = v8 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  }
  if (!v6) {
    unint64_t v8 = v9;
  }
  if (v7) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v8 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if (a4)
  {
    if (*a4 <= v6) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v10 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    }
    if (a4[1] > v7) {
      unint64_t v10 = v11 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    }
    else {
      unint64_t v10 = v11;
    }
  }
  uint64_t v12 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  int v13 = a3[2];
  if (v13) {
    uint64_t v14 = *((void *)a3 + 4) + 1;
  }
  else {
    uint64_t v14 = 0;
  }
  if (*(_DWORD *)v12) {
    uint64_t v15 = *(void *)(v12 + 24) + 1;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v14 != v15) {
    goto LABEL_38;
  }
  char v16 = 0;
  uint64_t v17 = (uint64_t *)(a3 + 6);
  uint64_t v18 = (uint64_t *)(v12 + 16);
  BOOL v19 = v13 && v13 == *(_DWORD *)v12;
  BOOL v20 = !v19;
  int v21 = !v20;
  while (1)
  {
    uint64_t v22 = *v17;
    uint64_t v23 = *v18;
    if ((v16 & 1) == 0 && !v21) {
      break;
    }
    if ((int *)v22 == a3 + 4) {
      goto LABEL_37;
    }
    if (*(_DWORD *)(v22 + 16) != *(_DWORD *)(v23 + 16)) {
      goto LABEL_38;
    }
    uint64_t v17 = (uint64_t *)(v22 + 8);
    uint64_t v18 = (uint64_t *)(v23 + 8);
    char v16 = 1;
  }
  if (v13) {
    goto LABEL_38;
  }
LABEL_37:
  if (*((float *)a3 + 10) != *(float *)(v12 + 32))
  {
LABEL_38:
    uint64_t v24 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
    int v25 = a3[2];
    if (v25) {
      uint64_t v26 = *((void *)a3 + 4) + 1;
    }
    else {
      uint64_t v26 = 0;
    }
    if (*(_DWORD *)v24) {
      uint64_t v27 = *(void *)(v24 + 24) + 1;
    }
    else {
      uint64_t v27 = 0;
    }
    if (v26 != v27) {
      goto LABEL_59;
    }
    char v28 = 0;
    uint64_t v29 = (uint64_t *)(a3 + 6);
    uint64_t v30 = (uint64_t *)(v24 + 16);
    BOOL v31 = v25 && v25 == *(_DWORD *)v24;
    BOOL v32 = !v31;
    int v33 = !v32;
    while (1)
    {
      uint64_t v34 = *v29;
      uint64_t v35 = *v30;
      if ((v28 & 1) == 0 && !v33) {
        break;
      }
      if ((int *)v34 == a3 + 4) {
        goto LABEL_58;
      }
      if (*(_DWORD *)(v34 + 16) != *(_DWORD *)(v35 + 16)) {
        goto LABEL_59;
      }
      uint64_t v29 = (uint64_t *)(v34 + 8);
      uint64_t v30 = (uint64_t *)(v35 + 8);
      char v28 = 1;
    }
    if (v25) {
      goto LABEL_59;
    }
LABEL_58:
    if (*((float *)a3 + 10) != *(float *)(v24 + 32)) {
LABEL_59:
    }
      unint64_t v10 = v10 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (a3[12] <= a2) {
    unint64_t v36 = v10 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  }
  else {
    unint64_t v36 = v10;
  }
  if ((v36 & 0x4000000000) != 0) {
    return v36 & 0x5D7FFEB0007 | 0x2800000000;
  }
  else {
    return v36 & 0x5D7FFEB0007;
  }
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates(uint64_t a1, char **a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v35, v5, &__x);
  int v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v35.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v35.__begin_[v12] == -1)
      {
        fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(void *)(v11 + 8 * v12));
      }
      else
      {
        v35.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      int64x2_t v17 = *(int64x2_t *)(v16 + 40);
      uint64_t v18 = *(void *)(v16 + 64) - *(void *)(v16 + 56);
      if (v18) {
        uint64_t v19 = *(void *)(v16 + 56);
      }
      else {
        uint64_t v19 = 0;
      }
      if (v18)
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = (int *)(v19 + 48);
        uint64_t v23 = v19 + 16;
        do
        {
          int v24 = v35.__begin_[*v22];
          if (v24 == -1)
          {
            uint64_t v27 = *((void *)v22 - 6);
            v28.i64[0] = v27;
            v28.i64[1] = HIDWORD(v27);
            int64x2_t v17 = vaddq_s64(v17, vceqzq_s64(v28));
          }
          else
          {
            *uint64_t v22 = v24;
            if (v20 != v21)
            {
              int64x2_t v32 = v17;
              uint64_t v25 = v19 + 56 * v21;
              *(void *)uint64_t v25 = *((void *)v22 - 6);
              *(_DWORD *)(v25 + 8) = *(v22 - 10);
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v25 + 16), *((void *)v22 - 3), v23);
              uint64_t v26 = v19 + 56 * v21;
              *(_DWORD *)(v26 + 40) = *(v22 - 2);
              *(_DWORD *)(v26 + 48) = *v22;
              uint64_t v14 = *v4;
              int64x2_t v17 = v32;
            }
            ++v21;
          }
          ++v20;
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          unint64_t v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v16 + 64) - *(void *)(v16 + 56)) >> 3);
          v22 += 14;
          v23 += 56;
        }
        while (v20 < v29);
        int64x2_t v33 = v17;
      }
      else
      {
        int64x2_t v33 = *(int64x2_t *)(v16 + 40);
        uint64_t v21 = 0;
        unint64_t v29 = 0;
      }
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs((void *)v16, v29 - v21);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 40) = v33;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v30 = *(int *)(a1 + 88);
  if (v30 == -1)
  {
    BOOL v31 = v35.__begin_;
    if (!v35.__begin_) {
      return;
    }
  }
  else
  {
    BOOL v31 = v35.__begin_;
    *(_DWORD *)(a1 + 88) = v35.__begin_[v30];
  }
  v35.__end_ = v31;
  operator delete(v31);
}

void sub_1B1FC3238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteArcs(void *a1, int a2)
{
  BOOL v3 = *(void **)(a1[8] + 8 * a2);
  v3[5] = 0;
  v3[6] = 0;
  uint64_t v5 = v3[7];
  uint64_t v4 = v3[8];
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = v4 - 56;
      std::__list_imp<char *>::clear((void *)(v4 - 40));
      uint64_t v4 = v6;
    }
    while (v6 != v5);
  }
  v3[8] = v5;
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 64)
                                                             - *(void *)(*(void *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 56) + 56 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 56);
  uint64_t v6 = (int *)(v5 + 56 * v4);
  int v7 = *v6;
  int v8 = v6[1];
  if (*v6 != v8) {
    **(void **)(a1 + 16) &= ~0x20000uLL;
  }
  if (v7)
  {
    if (!v8)
    {
      unint64_t v9 = *(unint64_t **)(a1 + 16);
      unint64_t v10 = *v9;
LABEL_8:
      *unint64_t v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    unint64_t v9 = *(unint64_t **)(a1 + 16);
    unint64_t v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      unint64_t v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      *unint64_t v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  uint64_t v12 = v5 + 56 * v4;
  uint64_t v13 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  int v16 = *(_DWORD *)(v12 + 8);
  unint64_t v15 = (int *)(v12 + 8);
  int v14 = v16;
  if (v16) {
    uint64_t v17 = *((void *)v15 + 3) + 1;
  }
  else {
    uint64_t v17 = 0;
  }
  if (*(_DWORD *)v13) {
    uint64_t v18 = *(void *)(v13 + 24) + 1;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17 != v18) {
    goto LABEL_30;
  }
  char v19 = 0;
  unint64_t v20 = (uint64_t *)(v15 + 4);
  uint64_t v21 = (uint64_t *)(v13 + 16);
  BOOL v22 = v14 && v14 == *(_DWORD *)v13;
  BOOL v23 = !v22;
  int v24 = !v23;
  while (1)
  {
    uint64_t v25 = *v20;
    uint64_t v26 = *v21;
    if ((v19 & 1) == 0 && !v24) {
      break;
    }
    if ((int *)v25 == v15 + 2) {
      goto LABEL_29;
    }
    if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v26 + 16)) {
      goto LABEL_30;
    }
    unint64_t v20 = (uint64_t *)(v25 + 8);
    uint64_t v21 = (uint64_t *)(v26 + 8);
    char v19 = 1;
  }
  if (v14) {
    goto LABEL_30;
  }
LABEL_29:
  if (*((float *)v15 + 8) != *(float *)(v13 + 32))
  {
LABEL_30:
    uint64_t v27 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
    int v28 = *v15;
    if (*v15) {
      uint64_t v29 = *((void *)v15 + 3) + 1;
    }
    else {
      uint64_t v29 = 0;
    }
    if (*(_DWORD *)v27) {
      uint64_t v30 = *(void *)(v27 + 24) + 1;
    }
    else {
      uint64_t v30 = 0;
    }
    if (v29 != v30) {
      goto LABEL_51;
    }
    char v31 = 0;
    int64x2_t v32 = (uint64_t *)(v15 + 4);
    int64x2_t v33 = (uint64_t *)(v27 + 16);
    BOOL v34 = v28 && v28 == *(_DWORD *)v27;
    BOOL v35 = !v34;
    int v36 = !v35;
    while (1)
    {
      uint64_t v37 = *v32;
      uint64_t v38 = *v33;
      if ((v31 & 1) == 0 && !v36) {
        break;
      }
      if ((int *)v37 == v15 + 2) {
        goto LABEL_50;
      }
      if (*(_DWORD *)(v37 + 16) != *(_DWORD *)(v38 + 16)) {
        goto LABEL_51;
      }
      int64x2_t v32 = (uint64_t *)(v37 + 8);
      int64x2_t v33 = (uint64_t *)(v38 + 8);
      char v31 = 1;
    }
    if (v28) {
      goto LABEL_51;
    }
LABEL_50:
    if (*((float *)v15 + 8) != *(float *)(v27 + 32)) {
LABEL_51:
    }
      **(void **)(a1 + 16) &= ~0x100000000uLL;
  }
  uint64_t v39 = 0x30FC30007;
  if (*(_DWORD *)a2 == *v6 && *(_DWORD *)(a2 + 4) == v6[1] && *(_DWORD *)(a2 + 48) == *(_DWORD *)(v5 + 56 * v4 + 48)) {
    uint64_t v39 = 0x3FFFFFFF0007;
  }
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArc(*(uint64_t **)(a1 + 8), a2, *(void *)(a1 + 24));
  int v40 = *(_DWORD *)a2;
  int v41 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v41) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v40)
  {
    if (!v41)
    {
      uint64_t v42 = *(unint64_t **)(a1 + 16);
      unint64_t v43 = *v42;
LABEL_63:
      *uint64_t v42 = v43 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    uint64_t v42 = *(unint64_t **)(a1 + 16);
    unint64_t v44 = *v42 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *uint64_t v42 = v44;
    if (!v41)
    {
      unint64_t v43 = v44 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *uint64_t v42 = v43;
      goto LABEL_63;
    }
  }
  uint64_t result = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  int v46 = *(_DWORD *)(a2 + 8);
  if (v46) {
    uint64_t v47 = *(void *)(a2 + 32) + 1;
  }
  else {
    uint64_t v47 = 0;
  }
  if (*(_DWORD *)result) {
    uint64_t v48 = *(void *)(result + 24) + 1;
  }
  else {
    uint64_t v48 = 0;
  }
  if (v47 != v48) {
    goto LABEL_85;
  }
  char v49 = 0;
  BOOL v50 = (uint64_t *)(a2 + 24);
  int v51 = (uint64_t *)(result + 16);
  BOOL v52 = v46 && v46 == *(_DWORD *)result;
  BOOL v53 = !v52;
  int v54 = !v53;
  while (1)
  {
    uint64_t v55 = *v50;
    uint64_t v56 = *v51;
    if ((v49 & 1) == 0 && !v54) {
      break;
    }
    if (v55 == a2 + 16) {
      goto LABEL_84;
    }
    if (*(_DWORD *)(v55 + 16) != *(_DWORD *)(v56 + 16)) {
      goto LABEL_85;
    }
    BOOL v50 = (uint64_t *)(v55 + 8);
    int v51 = (uint64_t *)(v56 + 8);
    char v49 = 1;
  }
  if (v46) {
    goto LABEL_85;
  }
LABEL_84:
  if (*(float *)(a2 + 40) != *(float *)(result + 32))
  {
LABEL_85:
    uint64_t result = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
    int v57 = *(_DWORD *)(a2 + 8);
    if (v57) {
      uint64_t v58 = *(void *)(a2 + 32) + 1;
    }
    else {
      uint64_t v58 = 0;
    }
    if (*(_DWORD *)result) {
      uint64_t v59 = *(void *)(result + 24) + 1;
    }
    else {
      uint64_t v59 = 0;
    }
    if (v58 != v59) {
      goto LABEL_106;
    }
    char v60 = 0;
    int64_t v61 = (uint64_t *)(a2 + 24);
    unint64_t v62 = (uint64_t *)(result + 16);
    BOOL v63 = v57 && v57 == *(_DWORD *)result;
    BOOL v64 = !v63;
    int v65 = !v64;
    while (1)
    {
      uint64_t v66 = *v61;
      uint64_t v67 = *v62;
      if ((v60 & 1) == 0 && !v65) {
        break;
      }
      if (v66 == a2 + 16) {
        goto LABEL_105;
      }
      if (*(_DWORD *)(v66 + 16) != *(_DWORD *)(v67 + 16)) {
        goto LABEL_106;
      }
      int64_t v61 = (uint64_t *)(v66 + 8);
      unint64_t v62 = (uint64_t *)(v67 + 8);
      char v60 = 1;
    }
    if (v57) {
      goto LABEL_106;
    }
LABEL_105:
    if (*(float *)(a2 + 40) != *(float *)(result + 32)) {
LABEL_106:
    }
      **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(void **)(a1 + 16) &= v39;
  return result;
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 288))(a2, 0);
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result == -1)
  {
    if ((v5 & 4) != 0)
    {
      uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192);
      return v18(a2, 4, 4);
    }
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    BOOL v7 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1) != 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)a2 + 248))(a2, v7);
  }
  LODWORD(v30[0]) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v28);
  while (!v28)
  {
    if (SLODWORD(v30[0]) >= v29) {
      goto LABEL_14;
    }
LABEL_9:
    (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 32))(v28);
    }
    else {
      ++LODWORD(v30[0]);
    }
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v28 + 16))(v28)) {
    goto LABEL_9;
  }
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
LABEL_14:
  unsigned int v39 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v37);
  while (2)
  {
    if (!v37)
    {
      if ((int)v39 >= v38) {
        goto LABEL_53;
      }
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v37 + 16))(v37))
    {
      if (v37)
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 24))(v37);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v8 = v39;
LABEL_21:
      if (v8 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 256))(a2, v8, v9);
      unint64_t v36 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 136))(a1, v8, &v32);
LABEL_24:
      if (v32)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v32 + 24))(v32))
        {
          if (v32)
          {
            (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
            goto LABEL_37;
          }
LABEL_35:
          if (v35) {
            --*v35;
          }
LABEL_37:
          *(float *)&unsigned int v11 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v8);
          uint64_t v32 = 0;
          unint64_t v33 = v11 | 0xFFFFFFFF00000000;
          fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v32, (uint64_t)&v28);
          if (v28)
          {
            int v12 = FLAGS_fst_error_fatal;
            if (FLAGS_fst_error_fatal)
            {
              std::string::basic_string[abi:ne180100]<0>(v25, "FATAL");
              uint64_t v13 = fst::LogMessage::LogMessage((fst *)&v27, (uint64_t)v25);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
              uint64_t v13 = fst::LogMessage::LogMessage((fst *)&v24, (uint64_t)__p);
            }
            int v14 = (void *)fst::cerr(v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
            if (v12)
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v27);
              if (v26 < 0)
              {
                unint64_t v15 = (void *)v25[0];
                goto LABEL_46;
              }
            }
            else
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v24);
              if (v23 < 0)
              {
                unint64_t v15 = __p[0];
LABEL_46:
                operator delete(v15);
              }
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
          }
          int v19 = v29;
          std::list<int>::list(v20, (uint64_t)v30);
          int v21 = v31;
          (*(void (**)(uint64_t, uint64_t, int *))(*(void *)a2 + 184))(a2, v8, &v19);
          std::__list_imp<char *>::clear(v20);
          std::__list_imp<char *>::clear(v30);
          if (v37) {
            (*(void (**)(uint64_t))(*(void *)v37 + 32))(v37);
          }
          else {
            ++v39;
          }
          continue;
        }
        if (v32)
        {
          unint64_t v10 = (float *)(*(uint64_t (**)(uint64_t))(*(void *)v32 + 32))(v32);
          goto LABEL_30;
        }
      }
      else if (v36 >= v34)
      {
        goto LABEL_35;
      }
      unint64_t v10 = (float *)(v33 + 16 * v36);
LABEL_30:
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()(v10, (uint64_t)&v28);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 208))(a2, v8, &v28);
      std::__list_imp<char *>::clear(v30);
      if (v32) {
        (*(void (**)(uint64_t))(*(void *)v32 + 40))(v32);
      }
      else {
        ++v36;
      }
      goto LABEL_24;
    }
    break;
  }
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
LABEL_53:
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v17 = fst::ProjectProperties(v5, 1);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 192))(a2, v17 & 0x3FFCFFFF0007 | v16, 0x3FFFFFFF0007);
}

void sub_1B1FC40EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a24);
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__list_imp<char *>::clear(v35);
  uint64_t v38 = *(void *)(v36 - 112);
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  _Unwind_Resume(a1);
}

void *fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()@<X0>(float *a1@<X1>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)a1 + 3) == -1)
  {
    float v30 = 0.0;
    float v30 = a1[2];
    v29[8] = 2139095040;
    if (v30 == INFINITY)
    {
      int v12 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
      int v23 = *v12;
      BOOL v7 = v24;
      std::list<int>::list(v24, (uint64_t)(v12 + 2));
      int v25 = v12[8];
      *(void *)a2 = 0;
      *(_DWORD *)(a2 + 8) = v23;
      std::list<int>::list((void *)(a2 + 16), (uint64_t)v24);
      *(_DWORD *)(a2 + 40) = v25;
      *(_DWORD *)(a2 + 48) = -1;
      return std::__list_imp<char *>::clear(v7);
    }
    uint64_t v8 = (int *)fst::StringWeight<int,(fst::StringType)0>::One();
    int v26 = *v8;
    BOOL v7 = v27;
    std::list<int>::list(v27, (uint64_t)(v8 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v28, &v26, a1[2]);
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = v28;
    uint64_t v9 = v29;
    std::list<int>::list((void *)(a2 + 16), (uint64_t)v29);
    *(_DWORD *)(a2 + 40) = v29[6];
    *(_DWORD *)(a2 + 48) = -1;
    goto LABEL_7;
  }
  float v5 = *a1;
  int v4 = *((_DWORD *)a1 + 1);
  if (!v4)
  {
    unint64_t v10 = (int *)fst::StringWeight<int,(fst::StringType)0>::One();
    int v19 = *v10;
    BOOL v7 = v20;
    std::list<int>::list(v20, (uint64_t)(v10 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v21, &v19, a1[2]);
    int v11 = *((_DWORD *)a1 + 3);
    *(float *)a2 = v5;
    *(float *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v21;
    uint64_t v9 = v22;
    std::list<int>::list((void *)(a2 + 16), (uint64_t)v22);
    *(_DWORD *)(a2 + 40) = v22[6];
    *(_DWORD *)(a2 + 48) = v11;
LABEL_7:
    std::__list_imp<char *>::clear(v9);
    return std::__list_imp<char *>::clear(v7);
  }
  fst::StringWeight<int,(fst::StringType)0>::StringWeight((uint64_t)&v14, v4);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v16, &v14, a1[2]);
  int v6 = *((_DWORD *)a1 + 3);
  *(float *)a2 = v5;
  *(float *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v16;
  std::list<int>::list((void *)(a2 + 16), (uint64_t)v17);
  *(_DWORD *)(a2 + 40) = v18;
  *(_DWORD *)(a2 + 48) = v6;
  std::__list_imp<char *>::clear(v17);
  BOOL v7 = &v15;
  return std::__list_imp<char *>::clear(v7);
}

void sub_1B1FC4430(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight(uint64_t a1, int *a2, float a3)
{
  int v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::ProductWeight(a1, &v6, a3);
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1B1FC44E8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::ProductWeight(uint64_t a1, int *a2, float a3)
{
  int v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  *(_DWORD *)a1 = v6;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)v7);
  *(float *)(a1 + 32) = a3;
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1B1FC456C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFst();
  }
  fst::AutoQueue<int>::AutoQueue<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t)v3, a1);
}

void sub_1B1FC47CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  fst::AutoQueue<int>::~AutoQueue((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *fst::ComputeTotalWeight<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) <= (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
      BOOL v7 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
    }
    else {
      BOOL v7 = (_DWORD *)(*a2 + 40 * (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1));
    }
    *(_DWORD *)a4 = *v7;
    uint64_t result = std::list<int>::list((void *)(a4 + 8), (uint64_t)(v7 + 2));
    *(_DWORD *)(a4 + 32) = v7[8];
  }
  else
  {
    uint64_t v8 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
    *(_DWORD *)a4 = *v8;
    uint64_t result = std::list<int>::list((void *)(a4 + 8), (uint64_t)(v8 + 2));
    *(_DWORD *)(a4 + 32) = v8[8];
    uint64_t v10 = *a2;
    if (a2[1] != *a2)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)a1 + 32))(&v19, a1, v12);
        fst::Times<int,(fst::StringType)0>((int *)(v10 + v11), (uint64_t)&v19, (uint64_t)&v28);
        float v13 = *(float *)(v10 + v11 + 32);
        float v14 = NAN;
        if (v13 != -INFINITY)
        {
          float v14 = NAN;
          if (v21 != -INFINITY)
          {
            float v14 = INFINITY;
            BOOL v15 = v21 == INFINITY || v13 == INFINITY;
            float v16 = v13 + v21;
            if (!v15) {
              float v14 = v16;
            }
          }
        }
        fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v22, &v28, v14);
        std::__list_imp<char *>::clear(v29);
        fst::Plus<int>(a4, (uint64_t)v22, (uint64_t)&v28);
        float v17 = *(float *)(a4 + 32);
        float v18 = NAN;
        if (v17 != -INFINITY)
        {
          float v18 = NAN;
          if (v24 != -INFINITY)
          {
            if (v17 >= v24) {
              float v18 = v24;
            }
            else {
              float v18 = *(float *)(a4 + 32);
            }
          }
        }
        fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v25, &v28, v18);
        std::__list_imp<char *>::clear(v29);
        *(_DWORD *)a4 = v25;
        if (&v25 != (int *)a4) {
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a4 + 8), v26[1], (uint64_t)v26);
        }
        *(_DWORD *)(a4 + 32) = v27;
        std::__list_imp<char *>::clear(v26);
        std::__list_imp<char *>::clear(v23);
        uint64_t result = std::__list_imp<char *>::clear(v20);
        ++v12;
        uint64_t v10 = *a2;
        v11 += 40;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > v12);
    }
  }
  return result;
}

void sub_1B1FC4B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  std::__list_imp<char *>::clear(v11);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(a10);
  std::__list_imp<char *>::clear(a9);
  _Unwind_Resume(a1);
}

void sub_1B1FC4B5C()
{
}

uint64_t fst::Reweight<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t *a1, void *a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 160))(a1);
  if (!result) {
    return result;
  }
  if (a3 == 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&v113, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&v113, "ERROR");
    }
    int v6 = fst::LogMessage::LogMessage((fst *)&v120, (uint64_t)&v113);
    BOOL v7 = (void *)fst::cerr(v6);
    char v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Reweight: Reweighting to the final states requires ", 51);
    BOOL v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Weight to be right distributive: ", 33);
    uint64_t v51 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Type();
    int v52 = *(char *)(v51 + 23);
    if (v52 >= 0) {
      uint64_t v53 = v51;
    }
    else {
      uint64_t v53 = *(void *)v51;
    }
    if (v52 >= 0) {
      uint64_t v54 = *(unsigned __int8 *)(v51 + 23);
    }
    else {
      uint64_t v54 = *(void *)(v51 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, v53, v54);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v120);
    if (SHIBYTE(v115[0]) < 0) {
      operator delete(v113);
    }
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 192))(a1, 4, 4);
  }
  int v127 = 0;
  (*(void (**)(uint64_t *, uint64_t *))(*a1 + 128))(a1, &v125);
  while (1)
  {
    if (v125)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v125 + 16))(v125)) {
        goto LABEL_91;
      }
      if (v125)
      {
        int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v125 + 24))(v125);
        goto LABEL_12;
      }
    }
    else if (v127 >= v126)
    {
      goto LABEL_91;
    }
    int v8 = v127;
LABEL_12:
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) == v8) {
      break;
    }
    uint64_t v9 = v8;
    uint64_t v10 = *a2 + 40 * v8;
    int v120 = *(_DWORD *)v10;
    std::list<int>::list(&v121, v10 + 8);
    float v124 = *(float *)(v10 + 32);
    uint64_t v11 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
    if (v120) {
      uint64_t v12 = v123 + 1;
    }
    else {
      uint64_t v12 = 0;
    }
    if (*(_DWORD *)v11) {
      uint64_t v13 = *(void *)(v11 + 24) + 1;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v12 != v13) {
      goto LABEL_33;
    }
    char v14 = 0;
    uint64_t v15 = v122;
    float v16 = (uint64_t *)(v11 + 16);
    BOOL v17 = v120 && v120 == *(_DWORD *)v11;
    BOOL v18 = !v17;
    while (1)
    {
      uint64_t v19 = *v16;
      if ((v14 & 1) == 0 && v18) {
        break;
      }
      if ((uint64_t *)v15 == &v121) {
        goto LABEL_32;
      }
      if (*(_DWORD *)(v15 + 16) != *(_DWORD *)(v19 + 16)) {
        goto LABEL_33;
      }
      uint64_t v15 = *(void *)(v15 + 8);
      float v16 = (uint64_t *)(v19 + 8);
      char v14 = 1;
    }
    if (v120) {
      goto LABEL_33;
    }
LABEL_32:
    *(float *)&uint64_t v113 = v124;
    LODWORD(v108) = 0;
    LODWORD(v108) = *(_DWORD *)(v11 + 32);
    if (v124 != *(float *)&v108)
    {
LABEL_33:
      (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 296))(a1, v9, &v119);
      while (!(*(unsigned int (**)(uint64_t))(*(void *)v119 + 24))(v119))
      {
        uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v119 + 32))(v119);
        uint64_t v113 = *(void **)v20;
        LODWORD(v114) = *(_DWORD *)(v20 + 8);
        std::list<int>::list(v115, v20 + 16);
        unint64_t v21 = *(int *)(v20 + 48);
        float v117 = *(float *)(v20 + 40);
        int v118 = v21;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) > v21)
        {
          uint64_t v22 = *a2 + 40 * (int)v21;
          LODWORD(v108) = *(_DWORD *)v22;
          std::list<int>::list(&v109, v22 + 8);
          float v112 = *(float *)(v22 + 32);
          uint64_t v23 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
          if (v108) {
            uint64_t v24 = v111 + 1;
          }
          else {
            uint64_t v24 = 0;
          }
          if (*(_DWORD *)v23) {
            uint64_t v25 = *(void *)(v23 + 24) + 1;
          }
          else {
            uint64_t v25 = 0;
          }
          if (v24 != v25) {
            goto LABEL_56;
          }
          char v26 = 0;
          uint64_t v27 = v110;
          int v28 = (uint64_t *)(v23 + 16);
          BOOL v29 = v108 && v108 == *(_DWORD *)v23;
          BOOL v30 = !v29;
          while (1)
          {
            uint64_t v31 = *v28;
            if ((v26 & 1) == 0 && v30) {
              break;
            }
            if ((uint64_t *)v27 == &v109) {
              goto LABEL_55;
            }
            if (*(_DWORD *)(v27 + 16) != *(_DWORD *)(v31 + 16)) {
              goto LABEL_56;
            }
            uint64_t v27 = *(void *)(v27 + 8);
            int v28 = (uint64_t *)(v31 + 8);
            char v26 = 1;
          }
          if (v108) {
            goto LABEL_56;
          }
LABEL_55:
          float v105 = v112;
          float v102 = 0.0;
          float v102 = *(float *)(v23 + 32);
          if (v112 != v102)
          {
LABEL_56:
            if (!a3)
            {
              fst::Times<int,(fst::StringType)0>((int *)&v114, (uint64_t)&v108, (uint64_t)&v128);
              float v32 = NAN;
              if (v117 != -INFINITY)
              {
                float v32 = NAN;
                if (v112 != -INFINITY)
                {
                  float v32 = INFINITY;
                  if (v112 != INFINITY && v117 != INFINITY) {
                    float v32 = v117 + v112;
                  }
                }
              }
              fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v102, (int *)&v128, v32);
              std::__list_imp<char *>::clear(v129);
              fst::DivideLeft<int,(fst::StringType)0>((int *)&v102, &v120, (uint64_t)&v128);
              float v34 = NAN;
              if (v104 != -INFINITY)
              {
                if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
                {
                  float v34 = INFINITY;
                  if (v104 != INFINITY) {
                    float v34 = v104 - v124;
                  }
                }
                else
                {
                  float v34 = NAN;
                }
              }
              fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v105, (int *)&v128, v34);
              std::__list_imp<char *>::clear(v129);
              *(float *)&uint64_t v114 = v105;
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v115, v106[1], (uint64_t)v106);
              float v117 = v107;
              std::__list_imp<char *>::clear(v106);
              std::__list_imp<char *>::clear(v103);
            }
            (*(void (**)(uint64_t, void **))(*(void *)v119 + 88))(v119, &v113);
          }
          std::__list_imp<char *>::clear(&v109);
        }
        std::__list_imp<char *>::clear(v115);
        (*(void (**)(uint64_t))(*(void *)v119 + 40))(v119);
      }
      if (v119) {
        (*(void (**)(uint64_t))(*(void *)v119 + 8))(v119);
      }
      if (!a3)
      {
        (*(void (**)(void **__return_ptr))(*a1 + 32))(&v113);
        fst::DivideLeft<int,(fst::StringType)0>((int *)&v113, &v120, (uint64_t)&v108);
        float v35 = NAN;
        if (v116 != -INFINITY)
        {
          if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            float v35 = INFINITY;
            if (v116 != INFINITY) {
              float v35 = v116 - v124;
            }
          }
          else
          {
            float v35 = NAN;
          }
        }
        fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v100, (int *)&v108, v35);
        std::__list_imp<char *>::clear(&v109);
        (*(void (**)(uint64_t *, uint64_t, unsigned char *))(*a1 + 184))(a1, v9, v100);
        std::__list_imp<char *>::clear(v101);
        std::__list_imp<char *>::clear(&v114);
      }
    }
    std::__list_imp<char *>::clear(&v121);
    if (v125) {
      (*(void (**)(uint64_t))(*(void *)v125 + 32))(v125);
    }
    else {
      ++v127;
    }
  }
  while (1)
  {
LABEL_91:
    if (!v125)
    {
      if (v127 >= v126) {
        break;
      }
      goto LABEL_88;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v125 + 16))(v125)) {
      break;
    }
    if (!v125) {
      goto LABEL_90;
    }
    (*(void (**)(uint64_t))(*(void *)v125 + 24))(v125);
LABEL_88:
    if (v125) {
      (*(void (**)(uint64_t))(*(void *)v125 + 32))(v125);
    }
    else {
LABEL_90:
    }
      ++v127;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) <= (*(int (**)(uint64_t *))(*a1 + 24))(a1)) {
    uint64_t v36 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  }
  else {
    uint64_t v36 = *a2 + 40 * (*(int (**)(uint64_t *))(*a1 + 24))(a1);
  }
  int v120 = *(_DWORD *)v36;
  std::list<int>::list(&v121, v36 + 8);
  float v124 = *(float *)(v36 + 32);
  uint64_t v37 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
  unsigned int v39 = a1;
  if (v120) {
    uint64_t v40 = v123 + 1;
  }
  else {
    uint64_t v40 = 0;
  }
  if (*(_DWORD *)v37) {
    uint64_t v41 = *(void *)(v37 + 24) + 1;
  }
  else {
    uint64_t v41 = 0;
  }
  if (v40 != v41) {
    goto LABEL_127;
  }
  char v42 = 0;
  uint64_t v43 = v122;
  unint64_t v44 = (uint64_t *)(v37 + 16);
  BOOL v45 = v120 && v120 == *(_DWORD *)v37;
  BOOL v46 = !v45;
  int v47 = !v46;
  while (1)
  {
    uint64_t v48 = *v44;
    if ((v42 & 1) == 0 && !v47) {
      break;
    }
    if ((uint64_t *)v43 == &v121) {
      goto LABEL_126;
    }
    if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v48 + 16)) {
      goto LABEL_127;
    }
    uint64_t v43 = *(void *)(v43 + 8);
    unint64_t v44 = (uint64_t *)(v48 + 8);
    char v42 = 1;
  }
  if (v120) {
    goto LABEL_127;
  }
LABEL_126:
  *(float *)&uint64_t v113 = v124;
  LODWORD(v108) = 0;
  LODWORD(v108) = *(_DWORD *)(v37 + 32);
  v38.n128_f32[0] = v124;
  if (v124 != *(float *)&v108)
  {
LABEL_127:
    uint64_t v55 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
    if (v120) {
      uint64_t v56 = v123 + 1;
    }
    else {
      uint64_t v56 = 0;
    }
    if (*(_DWORD *)v55) {
      uint64_t v57 = *(void *)(v55 + 24) + 1;
    }
    else {
      uint64_t v57 = 0;
    }
    if (v56 != v57) {
      goto LABEL_148;
    }
    char v58 = 0;
    uint64_t v59 = v122;
    char v60 = (uint64_t *)(v55 + 16);
    BOOL v61 = v120 && v120 == *(_DWORD *)v55;
    BOOL v62 = !v61;
    int v63 = !v62;
    while (1)
    {
      uint64_t v64 = *v60;
      if ((v58 & 1) == 0 && !v63) {
        break;
      }
      if ((uint64_t *)v59 == &v121) {
        goto LABEL_147;
      }
      if (*(_DWORD *)(v59 + 16) != *(_DWORD *)(v64 + 16)) {
        goto LABEL_148;
      }
      uint64_t v59 = *(void *)(v59 + 8);
      char v60 = (uint64_t *)(v64 + 8);
      char v58 = 1;
    }
    if (v120) {
      goto LABEL_148;
    }
LABEL_147:
    *(float *)&uint64_t v113 = v124;
    LODWORD(v108) = 0;
    LODWORD(v108) = *(_DWORD *)(v55 + 32);
    v38.n128_f32[0] = v124;
    if (v124 != *(float *)&v108)
    {
LABEL_148:
      uint64_t v65 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x2000000000, 1);
      uint64_t v66 = *a1;
      if ((v65 & 0x2000000000) != 0)
      {
        unsigned int v92 = (*(uint64_t (**)(uint64_t *))(v66 + 24))(a1);
        (*(void (**)(uint64_t *))(*a1 + 296))(a1);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v128 + 24))(v128))
        {
          uint64_t v71 = (*(uint64_t (**)(uint64_t))(*(void *)v128 + 32))(v128);
          uint64_t v113 = *(void **)v71;
          LODWORD(v114) = *(_DWORD *)(v71 + 8);
          std::list<int>::list(v115, v71 + 16);
          int v72 = *(_DWORD *)(v71 + 48);
          float v117 = *(float *)(v71 + 40);
          int v118 = v72;
          if (a3)
          {
            uint64_t v73 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
            fst::Divide<int>((int *)v73, &v120, 1, (uint64_t)&v102);
            float v74 = *(float *)(v73 + 32);
            float v75 = NAN;
            if (v74 != -INFINITY)
            {
              if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
              {
                float v75 = INFINITY;
                if (v74 != INFINITY) {
                  float v75 = v74 - v124;
                }
              }
              else
              {
                float v75 = NAN;
              }
            }
            fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v105, (int *)&v102, v75);
            std::__list_imp<char *>::clear(v103);
            fst::Times<int,(fst::StringType)0>((int *)&v105, (uint64_t)&v114, (uint64_t)&v102);
            float v79 = NAN;
            if (v107 != -INFINITY)
            {
              float v79 = NAN;
              if (v117 != -INFINITY)
              {
                float v79 = INFINITY;
                if (v117 != INFINITY && v107 != INFINITY) {
                  float v79 = v107 + v117;
                }
              }
            }
            fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v108, (int *)&v102, v79);
            std::__list_imp<char *>::clear(v103);
            LODWORD(v114) = v108;
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v115, v110, (uint64_t)&v109);
            float v117 = v112;
            std::__list_imp<char *>::clear(&v109);
            uint64_t v78 = v106;
          }
          else
          {
            fst::Times<int,(fst::StringType)0>(&v120, (uint64_t)&v114, (uint64_t)&v105);
            float v76 = NAN;
            if (v124 != -INFINITY)
            {
              float v76 = NAN;
              if (v117 != -INFINITY)
              {
                float v76 = INFINITY;
                if (v117 != INFINITY && v124 != INFINITY) {
                  float v76 = v124 + v117;
                }
              }
            }
            fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v108, (int *)&v105, v76);
            std::__list_imp<char *>::clear(v106);
            LODWORD(v114) = v108;
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v115, v110, (uint64_t)&v109);
            float v117 = v112;
            uint64_t v78 = &v109;
          }
          std::__list_imp<char *>::clear(v78);
          (*(void (**)(uint64_t, void **))(*(void *)v128 + 88))(v128, &v113);
          std::__list_imp<char *>::clear(v115);
          (*(void (**)(uint64_t))(*(void *)v128 + 40))(v128);
        }
        if (v128) {
          (*(void (**)(uint64_t))(*(void *)v128 + 8))(v128);
        }
        unsigned int v39 = a1;
        if (a3)
        {
          uint64_t v81 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
          fst::Divide<int>((int *)v81, &v120, 1, (uint64_t)&v108);
          float v82 = *(float *)(v81 + 32);
          float v83 = NAN;
          if (v82 != -INFINITY)
          {
            if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              float v83 = INFINITY;
              if (v82 != INFINITY) {
                float v83 = v82 - v124;
              }
            }
            else
            {
              float v83 = NAN;
            }
          }
          fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v113, (int *)&v108, v83);
          std::__list_imp<char *>::clear(&v109);
          (*(void (**)(uint64_t *__return_ptr, uint64_t *, void))(*a1 + 32))(&v108, a1, v92);
          fst::Times<int,(fst::StringType)0>((int *)&v113, (uint64_t)&v108, (uint64_t)&v105);
          float v87 = NAN;
          if (v116 != -INFINITY)
          {
            float v87 = NAN;
            if (v112 != -INFINITY)
            {
              float v87 = INFINITY;
              if (v112 != INFINITY && v116 != INFINITY) {
                float v87 = v116 + v112;
              }
            }
          }
          fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v96, (int *)&v105, v87);
          std::__list_imp<char *>::clear(v106);
          (*(void (**)(uint64_t *, void, unsigned char *))(*a1 + 184))(a1, v92, v96);
          std::__list_imp<char *>::clear(v97);
          BOOL v84 = &v109;
        }
        else
        {
          (*(void (**)(void **__return_ptr, uint64_t *, void))(*a1 + 32))(&v113, a1, v92);
          fst::Times<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>((uint64_t)&v120, (uint64_t)&v113, (uint64_t)v98);
          (*(void (**)(uint64_t *, void, unsigned char *))(*a1 + 184))(a1, v92, v98);
          BOOL v84 = &v99;
        }
        std::__list_imp<char *>::clear(v84);
        uint64_t v86 = &v114;
      }
      else
      {
        uint64_t v67 = (*(uint64_t (**)(uint64_t *))(v66 + 200))(a1);
        if (a3)
        {
          uint64_t v68 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
          fst::Divide<int>((int *)v68, &v120, 1, (uint64_t)&v113);
          float v69 = *(float *)(v68 + 32);
          float v70 = NAN;
          if (v69 != -INFINITY)
          {
            if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              float v70 = INFINITY;
              if (v69 != INFINITY) {
                float v70 = v69 - v124;
              }
            }
            else
            {
              float v70 = NAN;
            }
          }
          fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v108, (int *)&v113, v70);
          std::__list_imp<char *>::clear(&v114);
        }
        else
        {
          LODWORD(v108) = v120;
          std::list<int>::list(&v109, (uint64_t)&v121);
          float v112 = v124;
        }
        int v93 = v108;
        std::list<int>::list(v94, (uint64_t)&v109);
        float v95 = v112;
        int v85 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
        uint64_t v113 = 0;
        LODWORD(v114) = v93;
        std::list<int>::list(v115, (uint64_t)v94);
        float v117 = v95;
        int v118 = v85;
        std::__list_imp<char *>::clear(v94);
        unsigned int v39 = a1;
        (*(void (**)(uint64_t *, uint64_t, void **))(*a1 + 208))(a1, v67, &v113);
        (*(void (**)(uint64_t *, uint64_t))(*v39 + 176))(v39, v67);
        std::__list_imp<char *>::clear(v115);
        uint64_t v86 = &v109;
      }
      std::__list_imp<char *>::clear(v86);
    }
  }
  unint64_t v89 = (*(uint64_t (**)(uint64_t *, uint64_t, void, __n128))(*v39 + 64))(v39, 0x3FFFFFFF0007, 0, v38);
  unint64_t v90 = fst::ReweightProperties(v89);
  (*(void (**)(uint64_t *, unint64_t, uint64_t))(*v39 + 192))(v39, v90, 0x3FFFFFFF0007);
  std::__list_imp<char *>::clear(&v121);
  uint64_t result = v125;
  if (v125) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v125 + 8))(v125);
  }
  return result;
}

void sub_1B1FC5E08(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  std::__list_imp<char *>::clear((void *)(v3 - 240));
  std::__list_imp<char *>::clear(v2);
  uint64_t v5 = *(void *)(v3 - 144);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(a1);
}

void *fst::RemoveWeight<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = (void *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
  int v7 = *(_DWORD *)a2;
  if (*(_DWORD *)a2) {
    uint64_t v8 = *(void *)(a2 + 24) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (*(_DWORD *)result) {
    uint64_t v9 = result[3] + 1;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8 == v9)
  {
    char v10 = 0;
    uint64_t v11 = (uint64_t *)(a2 + 16);
    uint64_t v12 = result + 2;
    if (v7) {
      BOOL v13 = v7 == *(_DWORD *)result;
    }
    else {
      BOOL v13 = 0;
    }
    int v14 = !v13;
    int v15 = v14 ^ 1;
    while (1)
    {
      uint64_t v16 = *v11;
      uint64_t v17 = *v12;
      if ((v10 & 1) == 0 && !v15) {
        break;
      }
      if (v16 == a2 + 8) {
        goto LABEL_21;
      }
      if (*(_DWORD *)(v16 + 16) != *(_DWORD *)(v17 + 16)) {
        goto LABEL_22;
      }
      uint64_t v11 = (uint64_t *)(v16 + 8);
      uint64_t v12 = (uint64_t *)(v17 + 8);
      char v10 = 1;
    }
    if (v7) {
      goto LABEL_22;
    }
LABEL_21:
    LODWORD(v43) = 0;
    LODWORD(v43) = *(_DWORD *)(a2 + 32);
    float v40 = 0.0;
    float v40 = *((float *)result + 8);
    if (*(float *)&v43 == v40) {
      return result;
    }
  }
LABEL_22:
  uint64_t result = (void *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  int v18 = *(_DWORD *)a2;
  if (*(_DWORD *)a2) {
    uint64_t v19 = *(void *)(a2 + 24) + 1;
  }
  else {
    uint64_t v19 = 0;
  }
  if (*(_DWORD *)result) {
    uint64_t v20 = result[3] + 1;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v19 == v20)
  {
    char v21 = 0;
    uint64_t v22 = (uint64_t *)(a2 + 16);
    uint64_t v23 = result + 2;
    if (v18) {
      BOOL v24 = v18 == *(_DWORD *)result;
    }
    else {
      BOOL v24 = 0;
    }
    int v25 = !v24;
    int v26 = v25 ^ 1;
    while (1)
    {
      uint64_t v27 = *v22;
      uint64_t v28 = *v23;
      if ((v21 & 1) == 0 && !v26) {
        break;
      }
      if (v27 == a2 + 8) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v27 + 16) != *(_DWORD *)(v28 + 16)) {
        goto LABEL_43;
      }
      uint64_t v22 = (uint64_t *)(v27 + 8);
      uint64_t v23 = (uint64_t *)(v28 + 8);
      char v21 = 1;
    }
    if (v18) {
      goto LABEL_43;
    }
LABEL_42:
    LODWORD(v43) = 0;
    LODWORD(v43) = *(_DWORD *)(a2 + 32);
    float v40 = 0.0;
    float v40 = *((float *)result + 8);
    if (*(float *)&v43 == v40) {
      return result;
    }
  }
LABEL_43:
  if (a3)
  {
    unsigned int v54 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)a1 + 128))(a1, &v52);
    while (1)
    {
      uint64_t result = v52;
      if (!v52) {
        break;
      }
      int v29 = (*(uint64_t (**)(void *))(*v52 + 16))(v52);
      uint64_t result = v52;
      if (v29)
      {
        if (v52) {
          return (void *)(*(uint64_t (**)(void))(*v52 + 8))();
        }
        return result;
      }
      if (!v52) {
        goto LABEL_51;
      }
      uint64_t v30 = (*(uint64_t (**)(void))(*v52 + 24))();
      if (v52) {
        uint64_t v31 = (*(uint64_t (**)(void *))(*v52 + 24))(v52);
      }
      else {
        uint64_t v31 = v54;
      }
LABEL_52:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v43, a1, v31);
      fst::Divide<int>((int *)&v43, (int *)a2, 1, (uint64_t)&v40);
      float v32 = NAN;
      if (v46 != -INFINITY)
      {
        if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          float v32 = INFINITY;
          if (v46 != INFINITY) {
            float v32 = v46 - *(float *)(a2 + 32);
          }
        }
        else
        {
          float v32 = NAN;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v50, (int *)&v40, v32);
      std::__list_imp<char *>::clear(v41);
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 184))(a1, v30, v50);
      std::__list_imp<char *>::clear(v51);
      std::__list_imp<char *>::clear(&v44);
      if (v52) {
        (*(void (**)(void *))(*v52 + 32))(v52);
      }
      else {
        ++v54;
      }
    }
    if ((int)v54 >= (int)v53) {
      return result;
    }
LABEL_51:
    uint64_t v30 = v54;
    uint64_t v31 = v54;
    goto LABEL_52;
  }
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v33, &v49);
  while (!(*(unsigned int (**)(uint64_t))(*(void *)v49 + 24))(v49))
  {
    uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 32))(v49);
    uint64_t v43 = *(void *)v34;
    LODWORD(v44) = *(_DWORD *)(v34 + 8);
    std::list<int>::list(v45, v34 + 16);
    int v35 = *(_DWORD *)(v34 + 48);
    float v47 = *(float *)(v34 + 40);
    int v48 = v35;
    fst::DivideLeft<int,(fst::StringType)0>((int *)&v44, (int *)a2, (uint64_t)&v52);
    float v36 = NAN;
    if (v47 != -INFINITY)
    {
      if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        float v36 = INFINITY;
        if (v47 != INFINITY) {
          float v36 = v47 - *(float *)(a2 + 32);
        }
      }
      else
      {
        float v36 = NAN;
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v40, (int *)&v52, v36);
    std::__list_imp<char *>::clear(&v53);
    *(float *)&uint64_t v44 = v40;
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v45, v41[1], (uint64_t)v41);
    float v47 = v42;
    std::__list_imp<char *>::clear(v41);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v49 + 88))(v49, &v43);
    std::__list_imp<char *>::clear(v45);
    (*(void (**)(uint64_t))(*(void *)v49 + 40))(v49);
  }
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v43, a1, v33);
  fst::DivideLeft<int,(fst::StringType)0>((int *)&v43, (int *)a2, (uint64_t)&v40);
  float v37 = NAN;
  if (v46 != -INFINITY)
  {
    if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      float v37 = INFINITY;
      if (v46 != INFINITY) {
        float v37 = v46 - *(float *)(a2 + 32);
      }
    }
    else
    {
      float v37 = NAN;
    }
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v38, (int *)&v40, v37);
  std::__list_imp<char *>::clear(v41);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v33, &v38);
  std::__list_imp<char *>::clear(v39);
  return std::__list_imp<char *>::clear(&v44);
}

void sub_1B1FC67D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__list_imp<char *>::clear((void *)(v12 + 8));
  std::__list_imp<char *>::clear(va);
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v12[0] = a1;
  v12[1] = a2;
  v12[2] = *(void *)a3;
  int v13 = *(_DWORD *)(a3 + 16);
  char v14 = *(unsigned char *)(a3 + 20);
  char v15 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  memset(v19, 0, 29);
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      uint64_t v6 = v4 - 40;
      std::__list_imp<char *>::clear((void *)(v4 - 32));
      uint64_t v4 = v6;
    }
    while (v6 != v5);
  }
  a2[1] = v5;
  fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::ShortestDistance(v12);
  if (BYTE12(v19[1]))
  {
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    if (v7 != *a2)
    {
      do
      {
        uint64_t v9 = v7 - 40;
        std::__list_imp<char *>::clear((void *)(v7 - 32));
        uint64_t v7 = v9;
      }
      while (v9 != v8);
    }
    a2[1] = v8;
    char v10 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::NoWeight();
    std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::resize(a2, 1uLL, v10);
  }
  return fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)v12);
}

void sub_1B1FC69B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t *a2, char a3)
{
  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    int v8 = fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a1);
    (*(void (**)(uint64_t *, void))(*a2 + 248))(a2, (v8 + 1));
  }
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v104 = 0;
  unsigned int v64 = v9;
  if (a3) {
    goto LABEL_67;
  }
  LODWORD(v94) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v92);
  for (uint64_t i = 0xFFFFFFFFLL; ; uint64_t i = v13)
  {
    if (v92)
    {
      char v11 = (*(uint64_t (**)(uint64_t))(*(void *)v92 + 16))(v92);
      uint64_t v12 = v92;
      if (v11) {
        goto LABEL_39;
      }
      if (v92)
      {
        uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v92 + 24))();
        goto LABEL_11;
      }
    }
    else if ((int)v94 >= (int)v93)
    {
      goto LABEL_41;
    }
    uint64_t v13 = v94;
LABEL_11:
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&p_p, a1, v13);
    uint64_t v14 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
    uint64_t v15 = p_p ? (uint64_t)v100 + 1 : 0;
    uint64_t v16 = *(_DWORD *)v14 ? *(void *)(v14 + 24) + 1 : 0;
    if (v15 != v16) {
      break;
    }
    char v17 = 0;
    uint64_t v18 = v99;
    uint64_t v19 = (uint64_t *)(v14 + 16);
    if (p_p) {
      BOOL v20 = p_p == *(_DWORD *)v14;
    }
    else {
      BOOL v20 = 0;
    }
    int v21 = !v20;
    while (1)
    {
      uint64_t v22 = *v19;
      if ((v17 & 1) == 0 && v21 == 1) {
        break;
      }
      if ((uint64_t *)v18 == &v98) {
        goto LABEL_36;
      }
      if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v22 + 16)) {
        goto LABEL_30;
      }
      uint64_t v18 = *(void *)(v18 + 8);
      uint64_t v19 = (uint64_t *)(v22 + 8);
      char v17 = 1;
    }
    if (p_p) {
      break;
    }
LABEL_36:
    *(float *)&std::string __p = v101;
    float v75 = 0.0;
    float v75 = *(float *)(v14 + 32);
    float v23 = v101;
    std::__list_imp<char *>::clear(&v98);
    if (v23 != v75) {
      goto LABEL_31;
    }
    uint64_t v13 = i;
LABEL_32:
    if (v92) {
      (*(void (**)(uint64_t))(*(void *)v92 + 32))(v92);
    }
    else {
      LODWORD(v94) = v94 + 1;
    }
  }
LABEL_30:
  std::__list_imp<char *>::clear(&v98);
LABEL_31:
  if (i == -1) {
    goto LABEL_32;
  }
  uint64_t i = 0xFFFFFFFFLL;
  uint64_t v12 = v92;
LABEL_39:
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
LABEL_41:
  if (i == -1)
  {
LABEL_67:
    uint64_t i = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
    int v35 = 1;
    goto LABEL_68;
  }
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&p_p, a1, i);
  uint64_t v24 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
  if (p_p) {
    int v25 = (char *)v100 + 1;
  }
  else {
    int v25 = 0;
  }
  if (*(_DWORD *)v24) {
    uint64_t v26 = *(void *)(v24 + 24) + 1;
  }
  else {
    uint64_t v26 = 0;
  }
  if (v25 != (char *)v26) {
    goto LABEL_63;
  }
  char v27 = 0;
  uint64_t v28 = v99;
  int v29 = (uint64_t *)(v24 + 16);
  BOOL v30 = p_p && p_p == *(_DWORD *)v24;
  BOOL v31 = !v30;
  int v32 = !v31;
  while (1)
  {
    uint64_t v33 = *v29;
    if ((v27 & 1) == 0 && !v32) {
      break;
    }
    if ((uint64_t *)v28 == &v98) {
      goto LABEL_65;
    }
    if (*(_DWORD *)(v28 + 16) != *(_DWORD *)(v33 + 16)) {
      goto LABEL_63;
    }
    uint64_t v28 = *(void *)(v28 + 8);
    int v29 = (uint64_t *)(v33 + 8);
    char v27 = 1;
  }
  if (p_p)
  {
LABEL_63:
    std::__list_imp<char *>::clear(&v98);
    goto LABEL_64;
  }
LABEL_65:
  *(float *)&uint64_t v92 = v101;
  LODWORD(__p) = 0;
  LODWORD(__p) = *(_DWORD *)(v24 + 32);
  float v34 = v101;
  std::__list_imp<char *>::clear(&v98);
  if (v34 != *(float *)&__p)
  {
LABEL_64:
    std::string __p = 0;
    uint64_t v79 = 0;
    unint64_t v80 = 0;
    p_p = &__p;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = &v104;
    fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, (uint64_t)&p_p);
  }
  int v35 = 0;
LABEL_68:
  unsigned int v91 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v89);
  while (2)
  {
    if (!v89)
    {
      if ((int)v91 >= v90) {
        goto LABEL_137;
      }
      goto LABEL_74;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v89 + 16))(v89))
    {
      if (v89)
      {
        uint64_t v36 = (*(uint64_t (**)(void))(*(void *)v89 + 24))();
LABEL_75:
        int v37 = v36 + v35;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v37)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if (v36 == v64)
        {
          uint64_t v38 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
          int v86 = *v38;
          std::list<int>::list(v87, (uint64_t)(v38 + 2));
          int v88 = v38[8];
          (*(void (**)(uint64_t *, void, int *))(*a2 + 184))(a2, (v36 + v35), &v86);
          std::__list_imp<char *>::clear(v87);
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v92);
        uint64_t v39 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
        if (v92) {
          uint64_t v40 = v95 + 1;
        }
        else {
          uint64_t v40 = 0;
        }
        if (*(_DWORD *)v39) {
          uint64_t v41 = *(void *)(v39 + 24) + 1;
        }
        else {
          uint64_t v41 = 0;
        }
        if (v40 == v41)
        {
          char v42 = 0;
          uint64_t v43 = v94;
          uint64_t v44 = (uint64_t *)(v39 + 16);
          if (v92) {
            BOOL v45 = v92 == *(_DWORD *)v39;
          }
          else {
            BOOL v45 = 0;
          }
          int v46 = !v45;
          while (1)
          {
            uint64_t v47 = *v44;
            if ((v42 & 1) == 0 && v46 == 1) {
              break;
            }
            if ((uint64_t *)v43 == &v93) {
              goto LABEL_100;
            }
            if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v47 + 16)) {
              goto LABEL_99;
            }
            uint64_t v43 = *(void *)(v43 + 8);
            uint64_t v44 = (uint64_t *)(v47 + 8);
            char v42 = 1;
          }
          if (v92) {
            goto LABEL_99;
          }
LABEL_100:
          LODWORD(p_p) = v96;
          LODWORD(__p) = 0;
          LODWORD(__p) = *(_DWORD *)(v39 + 32);
          BOOL v48 = *(float *)&v96 != *(float *)&__p;
        }
        else
        {
LABEL_99:
          BOOL v48 = 1;
        }
        if ((v35 & v48) == 1)
        {
          fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Reverse(&v92, (uint64_t)&v83);
          p_p = 0;
          LODWORD(v98) = v83;
          std::list<int>::list(&v99, (uint64_t)v84);
          float v102 = v85;
          int v103 = v36 + v35;
          std::__list_imp<char *>::clear(v84);
          (*(void (**)(uint64_t *, void, void ***))(*a2 + 208))(a2, 0, &p_p);
          std::__list_imp<char *>::clear(&v99);
        }
        unint64_t v82 = 0;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v36, &__p);
LABEL_104:
        if (__p)
        {
          if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p))
          {
            if (__p)
            {
              (*(void (**)(void))(*(void *)__p + 8))();
              goto LABEL_132;
            }
LABEL_130:
            if (v81) {
              --*v81;
            }
LABEL_132:
            std::__list_imp<char *>::clear(&v93);
            if (v89) {
              (*(void (**)(uint64_t))(*(void *)v89 + 32))(v89);
            }
            else {
              ++v91;
            }
            continue;
          }
          if (__p)
          {
            uint64_t v49 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
LABEL_110:
            int v50 = *(_DWORD *)(v49 + 48);
            fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Reverse((_DWORD *)(v49 + 8), (uint64_t)&v75);
            uint64_t v51 = (v50 + v35);
            if (v51 == i) {
              char v52 = v35;
            }
            else {
              char v52 = 1;
            }
            if ((v52 & 1) == 0)
            {
              (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v70);
              fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Reverse(&v70, (uint64_t)&v72);
              fst::Times<int,(fst::StringType)1>(&v72, (uint64_t)&v75, (uint64_t)&v105);
              float v53 = NAN;
              if (v74 != -INFINITY)
              {
                float v53 = NAN;
                if (v77 != -INFINITY)
                {
                  float v53 = INFINITY;
                  if (v77 != INFINITY && v74 != INFINITY) {
                    float v53 = v74 + v77;
                  }
                }
              }
              fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&p_p, &v105, v53);
              std::__list_imp<char *>::clear(v106);
              float v75 = *(float *)&p_p;
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v76, v99, (uint64_t)&v98);
              float v77 = v101;
              std::__list_imp<char *>::clear(&v98);
              std::__list_imp<char *>::clear(v73);
              std::__list_imp<char *>::clear(v71);
            }
            uint64_t v55 = *(void ***)v49;
            float v67 = v75;
            std::list<int>::list(v68, (uint64_t)v76);
            float v69 = v77;
            p_p = v55;
            *(float *)&uint64_t v98 = v67;
            std::list<int>::list(&v99, (uint64_t)v68);
            float v102 = v69;
            int v103 = v37;
            std::__list_imp<char *>::clear(v68);
            while (1)
            {
              int v56 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              uint64_t v57 = *a2;
              if (v56 > (int)v51) {
                break;
              }
              (*(void (**)(uint64_t *))(v57 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, void ***))(v57 + 208))(a2, v51, &p_p);
            std::__list_imp<char *>::clear(&v99);
            std::__list_imp<char *>::clear(v76);
            if (__p) {
              (*(void (**)(void *))(*(void *)__p + 40))(__p);
            }
            else {
              ++v82;
            }
            goto LABEL_104;
          }
        }
        else if (v82 >= v80)
        {
          goto LABEL_130;
        }
        uint64_t v49 = v79 + 56 * v82;
        goto LABEL_110;
      }
LABEL_74:
      uint64_t v36 = v91;
      goto LABEL_75;
    }
    break;
  }
  if (v89) {
    (*(void (**)(void))(*(void *)v89 + 8))();
  }
LABEL_137:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, i);
  if (i == v64) {
    char v58 = v35;
  }
  else {
    char v58 = 1;
  }
  if ((v58 & 1) == 0)
  {
    (*(void (**)(void ***__return_ptr, uint64_t, void))(*(void *)a1 + 32))(&p_p, a1, v64);
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Reverse(&p_p, (uint64_t)v65);
    (*(void (**)(uint64_t *, void, char *))(*a2 + 184))(a2, v64, v65);
    std::__list_imp<char *>::clear(v66);
    std::__list_imp<char *>::clear(&v98);
  }
  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  unint64_t v60 = v104 | v59;
  uint64_t v61 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v62 = fst::ReverseProperties(v60, v35);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v61 | v62, 0x3FFFFFFF0007);
}

void sub_1B1FC7968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistance<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v13[0] = a1;
  v13[1] = a2;
  v13[2] = *(void *)a3;
  int v14 = *(_DWORD *)(a3 + 16);
  char v15 = *(unsigned char *)(a3 + 20);
  char v16 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  memset(v20, 0, 29);
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5 != *a2)
  {
    do
    {
      uint64_t v7 = v5 - 40;
      std::__list_imp<char *>::clear((void *)(v5 - 32));
      uint64_t v5 = v7;
    }
    while (v7 != v6);
  }
  a2[1] = v6;
  fst::ShortestDistanceState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::ShortestDistance(v13, *(_DWORD *)(a3 + 12));
  if (BYTE12(v20[1]))
  {
    uint64_t v9 = *a2;
    uint64_t v8 = a2[1];
    if (v8 != *a2)
    {
      do
      {
        uint64_t v10 = v8 - 40;
        std::__list_imp<char *>::clear((void *)(v8 - 32));
        uint64_t v8 = v10;
      }
      while (v10 != v9);
    }
    a2[1] = v9;
    char v11 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::NoWeight();
    std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::resize(a2, 1uLL, v11);
  }
  return fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)v13);
}

void sub_1B1FC7C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *result) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    return std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__append(result, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *result + 40 * a2;
    if (v4 != v8)
    {
      do
      {
        uint64_t v9 = v4 - 40;
        uint64_t result = std::__list_imp<char *>::clear((void *)(v4 - 32));
        uint64_t v4 = v9;
      }
      while (v9 != v8);
    }
    v3[1] = v8;
  }
  return result;
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::NoWeight()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::NoWeight(void)::no_weight;
}

void sub_1B1FC7D84(_Unwind_Exception *a1)
{
}

void *fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1B1FC7E18(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v6 = 0;
        v5[0] = v3;
        v5[1] = 0;
        v5[2] = 0;
        void v5[3] = &v6;
        fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a2, (uint64_t)v5);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B1FC8590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  BOOL v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  BOOL v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::NaturalLess<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    unint64_t v12 = v11 >> 2;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    bzero(*(void **)a3, 4 * v12);
  }
  unsigned int v73 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v71);
  while (1)
  {
    uint64_t result = v71;
    if (!v71)
    {
      if ((int)v73 >= v72) {
        return result;
      }
LABEL_11:
      uint64_t v15 = v73;
      goto LABEL_12;
    }
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 16))(v71);
    uint64_t result = v71;
    if (v14) {
      break;
    }
    if (!v71) {
      goto LABEL_11;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v71 + 24))();
LABEL_12:
    unint64_t v70 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v15, v68);
    uint64_t v16 = (int)v15;
    while (1)
    {
      if (!v68[0])
      {
        if (v70 >= v68[2]) {
          goto LABEL_114;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v68[0] + 24))(v68[0])) {
        break;
      }
      if (v68[0])
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v68[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v17 = v68[1] + 56 * v70;
LABEL_19:
      uint64_t v18 = *(int *)(*a2 + 4 * v16);
      if (v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 48)))
      {
        long long v19 = *(_DWORD **)a3;
        if (!a4
          || (uint64_t v20 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One(),
              fst::NaturalLess<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::operator()(a4, v17 + 8, v20)))
        {
          int v21 = 1;
          goto LABEL_65;
        }
        if ((v19[v18] | 2) == 2)
        {
          uint64_t v22 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
          int v23 = *(_DWORD *)(v17 + 8);
          if (v23) {
            uint64_t v24 = *(void *)(v17 + 32) + 1;
          }
          else {
            uint64_t v24 = 0;
          }
          if (*(_DWORD *)v22) {
            uint64_t v25 = *(void *)(v22 + 24) + 1;
          }
          else {
            uint64_t v25 = 0;
          }
          if (v24 != v25) {
            goto LABEL_44;
          }
          char v26 = 0;
          char v27 = (uint64_t *)(v17 + 24);
          uint64_t v28 = (uint64_t *)(v22 + 16);
          BOOL v29 = v23 && v23 == *(_DWORD *)v22;
          BOOL v30 = !v29;
          while (1)
          {
            uint64_t v31 = *v27;
            uint64_t v32 = *v28;
            if ((v26 & 1) == 0 && v30) {
              break;
            }
            if (v31 == v17 + 16) {
              goto LABEL_43;
            }
            if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16)) {
              goto LABEL_44;
            }
            char v27 = (uint64_t *)(v31 + 8);
            uint64_t v28 = (uint64_t *)(v32 + 8);
            char v26 = 1;
          }
          if (v23) {
            goto LABEL_44;
          }
LABEL_43:
          float v75 = 0.0;
          float v75 = *(float *)(v17 + 40);
          float v74 = 0.0;
          float v74 = *(float *)(v22 + 32);
          if (v75 != v74)
          {
LABEL_44:
            uint64_t v33 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
            int v34 = *(_DWORD *)(v17 + 8);
            if (v34) {
              uint64_t v35 = *(void *)(v17 + 32) + 1;
            }
            else {
              uint64_t v35 = 0;
            }
            if (*(_DWORD *)v33) {
              uint64_t v36 = *(void *)(v33 + 24) + 1;
            }
            else {
              uint64_t v36 = 0;
            }
            if (v35 != v36) {
              goto LABEL_64;
            }
            char v37 = 0;
            uint64_t v38 = (uint64_t *)(v17 + 24);
            uint64_t v39 = (uint64_t *)(v33 + 16);
            BOOL v40 = v34 && v34 == *(_DWORD *)v33;
            BOOL v41 = !v40;
            while (1)
            {
              uint64_t v42 = *v38;
              uint64_t v43 = *v39;
              if ((v37 & 1) == 0 && v41) {
                break;
              }
              if (v42 == v17 + 16) {
                goto LABEL_63;
              }
              if (*(_DWORD *)(v42 + 16) != *(_DWORD *)(v43 + 16)) {
                goto LABEL_64;
              }
              uint64_t v38 = (uint64_t *)(v42 + 8);
              uint64_t v39 = (uint64_t *)(v43 + 8);
              char v37 = 1;
            }
            if (v34) {
              goto LABEL_64;
            }
LABEL_63:
            float v75 = 0.0;
            float v75 = *(float *)(v17 + 40);
            float v74 = 0.0;
            float v74 = *(float *)(v33 + 32);
            if (v75 != v74)
            {
LABEL_64:
              int v21 = 3;
              goto LABEL_65;
            }
          }
          int v21 = 2;
LABEL_65:
          v19[v18] = v21;
        }
        *a5 = 0;
      }
      uint64_t v44 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
      int v46 = *(_DWORD *)(v17 + 8);
      if (v46) {
        uint64_t v47 = *(void *)(v17 + 32) + 1;
      }
      else {
        uint64_t v47 = 0;
      }
      if (*(_DWORD *)v44) {
        uint64_t v48 = *(void *)(v44 + 24) + 1;
      }
      else {
        uint64_t v48 = 0;
      }
      if (v47 != v48) {
        goto LABEL_87;
      }
      char v49 = 0;
      int v50 = (uint64_t *)(v17 + 24);
      uint64_t v51 = (uint64_t *)(v44 + 16);
      BOOL v52 = v46 && v46 == *(_DWORD *)v44;
      BOOL v53 = !v52;
      while (1)
      {
        uint64_t v54 = *v50;
        uint64_t v55 = *v51;
        if ((v49 & 1) == 0 && v53) {
          break;
        }
        if (v54 == v17 + 16) {
          goto LABEL_86;
        }
        if (*(_DWORD *)(v54 + 16) != *(_DWORD *)(v55 + 16)) {
          goto LABEL_87;
        }
        int v50 = (uint64_t *)(v54 + 8);
        uint64_t v51 = (uint64_t *)(v55 + 8);
        char v49 = 1;
      }
      if (v46) {
        goto LABEL_87;
      }
LABEL_86:
      float v75 = 0.0;
      float v75 = *(float *)(v17 + 40);
      float v74 = 0.0;
      float v74 = *(float *)(v44 + 32);
      v45.n128_f32[0] = v75;
      if (v75 != v74)
      {
LABEL_87:
        uint64_t v56 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
        int v57 = *(_DWORD *)(v17 + 8);
        if (v57) {
          uint64_t v58 = *(void *)(v17 + 32) + 1;
        }
        else {
          uint64_t v58 = 0;
        }
        if (*(_DWORD *)v56) {
          uint64_t v59 = *(void *)(v56 + 24) + 1;
        }
        else {
          uint64_t v59 = 0;
        }
        if (v58 != v59) {
          goto LABEL_107;
        }
        char v60 = 0;
        uint64_t v61 = (uint64_t *)(v17 + 24);
        unint64_t v62 = (uint64_t *)(v56 + 16);
        BOOL v63 = v57 && v57 == *(_DWORD *)v56;
        BOOL v64 = !v63;
        while (1)
        {
          uint64_t v65 = *v61;
          uint64_t v66 = *v62;
          if ((v60 & 1) == 0 && v64) {
            break;
          }
          if (v65 == v17 + 16) {
            goto LABEL_106;
          }
          if (*(_DWORD *)(v65 + 16) != *(_DWORD *)(v66 + 16)) {
            goto LABEL_107;
          }
          uint64_t v61 = (uint64_t *)(v65 + 8);
          unint64_t v62 = (uint64_t *)(v66 + 8);
          char v60 = 1;
        }
        if (v57) {
          goto LABEL_107;
        }
LABEL_106:
        float v75 = 0.0;
        float v75 = *(float *)(v17 + 40);
        float v74 = 0.0;
        float v74 = *(float *)(v56 + 32);
        v45.n128_f32[0] = v75;
        if (v75 != v74) {
LABEL_107:
        }
          *a6 = 0;
      }
      if (v68[0]) {
        (*(void (**)(void, __n128))(*(void *)v68[0] + 40))(v68[0], v45);
      }
      else {
        ++v70;
      }
    }
    if (v68[0])
    {
      (*(void (**)(void))(*(void *)v68[0] + 8))();
      goto LABEL_116;
    }
LABEL_114:
    if (v69) {
      --*v69;
    }
LABEL_116:
    if (v71) {
      (*(void (**)(uint64_t))(*(void *)v71 + 32))(v71);
    }
    else {
      ++v73;
    }
  }
  if (v71) {
    return (*(uint64_t (**)(void))(*(void *)v71 + 8))();
  }
  return result;
}

void sub_1B1FC8CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  unint64_t v2 = &v3;
  fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::TopOrderVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>();
}

void sub_1B1FC8EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  int v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::TopOrderVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>()
{
}

void sub_1B1FC9798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Type()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Type(void)::type;
}

void sub_1B1FC98B4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

BOOL fst::NaturalLess<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst::Plus<int>(a2, a3, (uint64_t)&v29);
  float v5 = *(float *)(a2 + 32);
  float v6 = NAN;
  if (v5 != -INFINITY)
  {
    float v7 = *(float *)(a3 + 32);
    float v6 = NAN;
    if (v7 != -INFINITY)
    {
      if (v5 >= v7) {
        float v6 = *(float *)(a3 + 32);
      }
      else {
        float v6 = *(float *)(a2 + 32);
      }
    }
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v26, (int *)&v29, v6);
  std::__list_imp<char *>::clear(v30);
  if (v26) {
    uint64_t v8 = v27[2] + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = *(_DWORD *)a2;
  if (*(_DWORD *)a2) {
    uint64_t v10 = *(void *)(a2 + 24) + 1;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v8 != v10) {
    goto LABEL_41;
  }
  uint64_t v11 = v27[1];
  uint64_t v12 = *(void *)(a2 + 16);
  if (v26) {
    BOOL v13 = v26 == v9;
  }
  else {
    BOOL v13 = 0;
  }
  int v14 = !v13;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v14 != 1)
  {
    while ((void *)v11 != v27)
    {
      if (*(_DWORD *)(v11 + 16) != *(_DWORD *)(v15 + 16)) {
        goto LABEL_41;
      }
      uint64_t v11 = *(void *)(v11 + 8);
      uint64_t v15 = *(void *)(v15 + 8);
    }
  }
  else if (v26)
  {
LABEL_41:
    BOOL v24 = 0;
    goto LABEL_42;
  }
  float v29 = v28;
  float v31 = 0.0;
  float v16 = *(float *)(a2 + 32);
  float v31 = v16;
  if (v28 != v16) {
    goto LABEL_41;
  }
  if (*(_DWORD *)a3) {
    uint64_t v17 = *(void *)(a3 + 24) + 1;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v8 == v17)
  {
    char v18 = 0;
    uint64_t v19 = (uint64_t *)(a3 + 16);
    if (v9) {
      BOOL v20 = v9 == *(_DWORD *)a3;
    }
    else {
      BOOL v20 = 0;
    }
    int v21 = !v20;
    int v22 = v21 ^ 1;
    while (1)
    {
      uint64_t v23 = *v19;
      if ((v18 & 1) == 0 && !v22) {
        break;
      }
      if (v12 == a2 + 8) {
        goto LABEL_45;
      }
      if (*(_DWORD *)(v12 + 16) != *(_DWORD *)(v23 + 16)) {
        goto LABEL_44;
      }
      uint64_t v12 = *(void *)(v12 + 8);
      uint64_t v19 = (uint64_t *)(v23 + 8);
      char v18 = 1;
    }
    if (v9) {
      goto LABEL_44;
    }
LABEL_45:
    float v29 = v16;
    float v31 = 0.0;
    float v31 = *(float *)(a3 + 32);
    BOOL v24 = v16 != v31;
  }
  else
  {
LABEL_44:
    BOOL v24 = 1;
  }
LABEL_42:
  std::__list_imp<char *>::clear(v27);
  return v24;
}

void sub_1B1FC9AF0(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::ShortestDistance(void *a1)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 24))(*a1) != -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v2 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    char v3 = (void *)fst::cerr(v2);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ShortestDistance: Weight needs to be right distributive: ", 57);
    uint64_t v5 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Type();
    int v6 = *(char *)(v5 + 23);
    if (v6 >= 0) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = *(void *)v5;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      uint64_t v8 = *(void *)(v5 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_15;
  }
  if ((*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
LABEL_15:
  }
    *((unsigned char *)a1 + 116) = 1;
}

void sub_1B1FC9C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *fst::Times<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  fst::Times<int,(fst::StringType)0>((int *)a1, a2, (uint64_t)&v12);
  float v6 = *(float *)(a1 + 32);
  float v7 = NAN;
  if (v6 != -INFINITY)
  {
    float v8 = *(float *)(a2 + 32);
    float v7 = NAN;
    if (v8 != -INFINITY)
    {
      float v7 = INFINITY;
      BOOL v9 = v8 == INFINITY || v6 == INFINITY;
      float v10 = v6 + v8;
      if (!v9) {
        float v7 = v10;
      }
    }
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight(a3, &v12, v7);
  return std::__list_imp<char *>::clear(v13);
}

void sub_1B1FC9D30(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      *(_DWORD *)(a7 + v11 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((void *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1FC9E4C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 8;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFst()
{
}

void sub_1B1FC9ED0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(_DWORD **)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *v4;
  uint64_t result = std::list<int>::list((void *)(a3 + 8), (uint64_t)(v4 + 2));
  *(_DWORD *)(a3 + 32) = v4[8];
  return result;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  unint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 56);
  uint64_t v4 = *v5;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B1FCA274(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

void *fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  int v8 = *a3;
  std::list<int>::list(v9, (uint64_t)(a3 + 2));
  int v10 = a3[8];
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(v6, a2, &v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1B1FCA394(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::DeleteArcs(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56);
  return std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::InitMutableArcIterator()
{
}

void sub_1B1FCA8D4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FCA8;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A3D8;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B1FCA9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D1D8;
  uint64_t v2 = (void *)a1[9];
  if (v2 != (void *)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void *)a1[8];
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FCA8;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1FCACE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1FCADE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B1FCAEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B1FCAFB4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FCA8;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A3D8;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v20 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v18);
  while (1)
  {
    if (!v18)
    {
      if ((int)v20 >= v19) {
        goto LABEL_31;
      }
LABEL_11:
      uint64_t v9 = v20;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 16))(v18)) {
      break;
    }
    if (!v18) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 24))(v18);
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::AddState((void *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v16, a2, v9);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(a1, v9, (int *)&v16);
    std::__list_imp<char *>::clear(v17);
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 56), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __str.__r_.__value_.__r.__words[2]) {
          goto LABEL_24;
        }
LABEL_18:
        uint64_t v11 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v15);
        goto LABEL_19;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__str.__r_.__value_.__r.__words[0]) {
        goto LABEL_18;
      }
      uint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_19:
      fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__str.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v14) {
      --*v14;
    }
LABEL_26:
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 32))(v18);
    }
    else {
      ++v20;
    }
  }
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
LABEL_31:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B1FCB4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(v16);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

void sub_1B1FCB724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>();
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::AddState(void *a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  uint64_t v3 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
  *(_DWORD *)uint64_t v2 = *v3;
  std::list<int>::list((void *)v2 + 1, (uint64_t)(v3 + 2));
  unint64_t v4 = a1[10];
  *((_DWORD *)v2 + 8) = v3[8];
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *((void *)v2 + 9) = 0;
  uint64_t v5 = (void *)a1[9];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1[8];
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v11);
    }
    else {
      char v12 = 0;
    }
    char v13 = &v12[8 * v8];
    uint64_t v14 = &v12[8 * v11];
    *(void *)char v13 = v2;
    int v6 = v13 + 8;
    uint64_t v16 = (char *)a1[8];
    std::string::size_type v15 = (char *)a1[9];
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      std::string::size_type v15 = (char *)a1[8];
    }
    a1[8] = v13;
    a1[9] = v6;
    a1[10] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v5 = v2;
    int v6 = v5 + 1;
  }
  a1[9] = v6;
  return (((unint64_t)v6 - a1[8]) >> 3) - 1;
}

void *fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8 * a2);
  int v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  int v5 = a3[8];
  int v9 = v5;
  *(_DWORD *)uint64_t v4 = v7;
  if ((int *)v4 != &v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v4 + 8), v8[1], (uint64_t)v8);
    int v5 = v9;
  }
  *(_DWORD *)(v4 + 32) = v5;
  return std::__list_imp<char *>::clear(v8);
}

void sub_1B1FCB8F4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero(void)::zero;
}

void sub_1B1FCB9A4(_Unwind_Exception *a1)
{
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Zero()
{
  {
    operator new();
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Zero(void)::zero;
}

void sub_1B1FCBA78(_Unwind_Exception *a1)
{
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Zero()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Zero(void)::zero;
}

void sub_1B1FCBB78(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 56 * v6;
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1FCBC6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(void *)(v12 - 56) = *(void *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((void *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1FCBD98(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[5];
  }
  if (!a2[1]) {
    ++a1[6];
  }
  uint64_t v3 = a1 + 7;
  unint64_t v4 = a1[8];
  if (v4 >= a1[9])
  {
    uint64_t result = std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__push_back_slow_path<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> const&>((uint64_t)v3, (uint64_t)a2);
    uint64_t result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

void *std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t result = std::list<int>::list((void *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1B1FCBE8C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__push_back_slow_path<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[56 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((void *)v11 + 2, a2 + 16);
  uint64_t v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1FCBFCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      unint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, a2, a3, 1);
  }
}

void sub_1B1FCC118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v8 = v7;
  if (!a4
    || (uint64_t v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    unint64_t v8 = v7 & 7;
    unint64_t v116 = v8;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      float v112 = (uint64_t *)&v116;
      fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(a1, (uint64_t)&v109);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0) {
      goto LABEL_211;
    }
    uint64_t v11 = a2 & 0xC0000;
    uint64_t v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0) {
      uint64_t v12 = 0x10425A850000;
    }
    unint64_t v13 = v8 | v12;
    uint64_t v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0) {
      v13 |= 0x100000uLL;
    }
    unint64_t v116 = v13;
    memset(&v108, 0, sizeof(v108));
    memset(&v107, 0, sizeof(v107));
    unsigned int v106 = 0;
    uint64_t v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v104);
    int v16 = 0;
LABEL_12:
    if (!v104)
    {
      if ((int)v106 >= v105) {
        goto LABEL_203;
      }
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v104 + 16))(v104))
    {
      if (v104)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v104 + 24))();
LABEL_18:
        std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v17);
        uint64_t v111 = (uint64_t)&v111;
        float v112 = &v111;
        uint64_t v113 = 0;
        LODWORD(v110) = 0;
        v108.__end_ = v108.__begin_;
        v107.__end_ = v107.__begin_;
        if (v11) {
          std::vector<int>::reserve(&v108, v18);
        }
        if (v14) {
          std::vector<int>::reserve(&v107, v18);
        }
        int v98 = v16;
        unint64_t v103 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 136))(v15, v17, &v99);
        char v19 = 1;
        while (1)
        {
          if (v99)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v99 + 24))(v99))
            {
              if (v99)
              {
                (*(void (**)(void))(*(void *)v99 + 8))();
              }
              else
              {
LABEL_132:
                if (v102) {
                  --*v102;
                }
              }
              uint64_t v15 = a1;
              int v16 = v98;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v108.__end_ - (char *)v108.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14) {
                  goto LABEL_152;
                }
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  unint64_t v72 = v107.__end_ - v107.__begin_;
                  if (v72 <= 2) {
                    unint64_t v72 = 2;
                  }
                  std::vector<unsigned int>::pointer v73 = v107.__begin_ + 1;
                  unsigned int v74 = *v107.__begin_;
                  unint64_t v75 = v72 - 1;
                  while (1)
                  {
                    unsigned int v77 = *v73++;
                    unsigned int v76 = v77;
                    if (v77 == v74) {
                      break;
                    }
                    unsigned int v74 = v76;
                    if (!--v75) {
                      goto LABEL_152;
                    }
                  }
                  unint64_t v116 = v116 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              unint64_t v66 = v108.__end_ - v108.__begin_;
              if (v66 <= 2) {
                unint64_t v66 = 2;
              }
              std::vector<unsigned int>::pointer v67 = v108.__begin_ + 1;
              unsigned int v68 = *v108.__begin_;
              unint64_t v69 = v66 - 1;
              while (1)
              {
                unsigned int v71 = *v67++;
                unsigned int v70 = v71;
                if (v71 == v68) {
                  break;
                }
                unsigned int v68 = v70;
                if (!--v69) {
                  goto LABEL_141;
                }
              }
              unint64_t v116 = v116 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14) {
                goto LABEL_142;
              }
LABEL_152:
              if (v98 >= 1) {
                unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v99, a1, v17);
              uint64_t v78 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
              if (v99) {
                uint64_t v79 = (char *)v102 + 1;
              }
              else {
                uint64_t v79 = 0;
              }
              if (*(_DWORD *)v78) {
                uint64_t v80 = *(void *)(v78 + 24) + 1;
              }
              else {
                uint64_t v80 = 0;
              }
              if (v79 != (char *)v80) {
                goto LABEL_174;
              }
              char v81 = 0;
              unint64_t v82 = v101;
              int v83 = (uint64_t *)(v78 + 16);
              BOOL v84 = v99 && v99 == *(_DWORD *)v78;
              BOOL v85 = !v84;
              while (1)
              {
                uint64_t v86 = *v83;
                if ((v81 & 1) == 0 && v85) {
                  break;
                }
                if ((uint64_t *)v82 == &v100) {
                  goto LABEL_173;
                }
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16)) {
                  goto LABEL_174;
                }
                unint64_t v82 = *(void *)(v82 + 8);
                int v83 = (uint64_t *)(v86 + 8);
                char v81 = 1;
              }
              if (v99) {
                goto LABEL_174;
              }
LABEL_173:
              float v118 = *(float *)&v103;
              float v117 = 0.0;
              float v117 = *(float *)(v78 + 32);
              if (*(float *)&v103 == v117)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 40))(a1, v17, *(float *)&v103) != 1)unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000; {
              }
                }
              else
              {
LABEL_174:
                uint64_t v87 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
                if (v99) {
                  int v88 = (char *)v102 + 1;
                }
                else {
                  int v88 = 0;
                }
                if (*(_DWORD *)v87) {
                  uint64_t v89 = *(void *)(v87 + 24) + 1;
                }
                else {
                  uint64_t v89 = 0;
                }
                if (v88 != (char *)v89) {
                  goto LABEL_194;
                }
                char v90 = 0;
                unint64_t v91 = v101;
                uint64_t v92 = (uint64_t *)(v87 + 16);
                BOOL v93 = v99 && v99 == *(_DWORD *)v87;
                BOOL v94 = !v93;
                while (1)
                {
                  uint64_t v95 = *v92;
                  if ((v90 & 1) == 0 && v94) {
                    break;
                  }
                  if ((uint64_t *)v91 == &v100) {
                    goto LABEL_193;
                  }
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16)) {
                    goto LABEL_194;
                  }
                  unint64_t v91 = *(void *)(v91 + 8);
                  uint64_t v92 = (uint64_t *)(v95 + 8);
                  char v90 = 1;
                }
                if (v99) {
                  goto LABEL_194;
                }
LABEL_193:
                float v118 = *(float *)&v103;
                float v117 = 0.0;
                float v117 = *(float *)(v87 + 32);
                if (*(float *)&v103 != v117) {
LABEL_194:
                }
                  unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                int v16 = v98 + 1;
              }
              std::__list_imp<char *>::clear(&v100);
              std::__list_imp<char *>::clear(&v111);
              if (v104) {
                (*(void (**)(uint64_t))(*(void *)v104 + 32))(v104);
              }
              else {
                ++v106;
              }
              goto LABEL_12;
            }
            if (v99)
            {
              uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v99 + 32))();
              goto LABEL_29;
            }
          }
          else if (v103 >= v101)
          {
            goto LABEL_132;
          }
          uint64_t v20 = v100 + 56 * v103;
LABEL_29:
          int v21 = *(_DWORD *)v20;
          int v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            unint64_t v116 = v116 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            int v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22) {
                goto LABEL_35;
              }
              goto LABEL_39;
            }
            unint64_t v23 = v116;
          }
          else
          {
            unint64_t v23 = v116 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          unint64_t v116 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_44;
          }
LABEL_39:
          unint64_t v116 = v116 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v109) {
              unint64_t v116 = v116 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            }
            if (v22 < SHIDWORD(v109)) {
              unint64_t v116 = v116 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
            }
          }
LABEL_44:
          uint64_t v24 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
          int v25 = *(_DWORD *)(v20 + 8);
          if (v25) {
            uint64_t v26 = *(void *)(v20 + 32) + 1;
          }
          else {
            uint64_t v26 = 0;
          }
          if (*(_DWORD *)v24) {
            uint64_t v27 = *(void *)(v24 + 24) + 1;
          }
          else {
            uint64_t v27 = 0;
          }
          if (v26 != v27) {
            goto LABEL_64;
          }
          char v28 = 0;
          float v29 = (uint64_t *)(v20 + 24);
          BOOL v30 = (uint64_t *)(v24 + 16);
          BOOL v31 = v25 && v25 == *(_DWORD *)v24;
          BOOL v32 = !v31;
          while (1)
          {
            uint64_t v33 = *v29;
            uint64_t v34 = *v30;
            if ((v28 & 1) == 0 && v32) {
              break;
            }
            if (v33 == v20 + 16) {
              goto LABEL_63;
            }
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16)) {
              goto LABEL_64;
            }
            float v29 = (uint64_t *)(v33 + 8);
            BOOL v30 = (uint64_t *)(v34 + 8);
            char v28 = 1;
          }
          if (v25) {
            goto LABEL_64;
          }
LABEL_63:
          float v118 = 0.0;
          float v118 = *(float *)(v20 + 40);
          float v117 = 0.0;
          float v117 = *(float *)(v24 + 32);
          if (v118 != v117)
          {
LABEL_64:
            uint64_t v35 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
            int v25 = *(_DWORD *)(v20 + 8);
            if (v25) {
              uint64_t v36 = *(void *)(v20 + 32) + 1;
            }
            else {
              uint64_t v36 = 0;
            }
            if (*(_DWORD *)v35) {
              uint64_t v37 = *(void *)(v35 + 24) + 1;
            }
            else {
              uint64_t v37 = 0;
            }
            if (v36 != v37) {
              goto LABEL_84;
            }
            char v38 = 0;
            uint64_t v39 = (uint64_t *)(v20 + 24);
            BOOL v40 = (uint64_t *)(v35 + 16);
            BOOL v41 = v25 && v25 == *(_DWORD *)v35;
            BOOL v42 = !v41;
            while (1)
            {
              uint64_t v43 = *v39;
              uint64_t v44 = *v40;
              if ((v38 & 1) == 0 && v42) {
                break;
              }
              if (v43 == v20 + 16) {
                goto LABEL_83;
              }
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16)) {
                goto LABEL_84;
              }
              uint64_t v39 = (uint64_t *)(v43 + 8);
              BOOL v40 = (uint64_t *)(v44 + 8);
              char v38 = 1;
            }
            if (v25) {
              goto LABEL_84;
            }
LABEL_83:
            float v118 = 0.0;
            float v118 = *(float *)(v20 + 40);
            float v117 = 0.0;
            float v117 = *(float *)(v35 + 32);
            if (v118 != v117) {
LABEL_84:
            }
              unint64_t v116 = v116 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          int v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17) {
            unint64_t v116 = v116 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          }
          if (v45 != v17 + 1) {
            unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          }
          uint64_t v109 = *(void *)v20;
          LODWORD(v110) = v25;
          if (&v109 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v111, *(void *)(v20 + 24), v20 + 16);
            int v45 = *(_DWORD *)(v20 + 48);
          }
          int v114 = *(_DWORD *)(v20 + 40);
          int v115 = v45;
          if (v11)
          {
            std::vector<unsigned int>::pointer end = v108.__end_;
            if (v108.__end_ >= v108.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer begin = v108.__begin_;
              int64_t v49 = v108.__end_ - v108.__begin_;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62) {
                goto LABEL_213;
              }
              int64_t v51 = (char *)v108.__end_cap_.__value_ - (char *)v108.__begin_;
              if (((char *)v108.__end_cap_.__value_ - (char *)v108.__begin_) >> 1 > v50) {
                unint64_t v50 = v51 >> 1;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                BOOL v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v108.__end_cap_, v52);
                std::vector<unsigned int>::pointer begin = v108.__begin_;
                std::vector<unsigned int>::pointer end = v108.__end_;
              }
              else
              {
                BOOL v53 = 0;
              }
              uint64_t v54 = (unsigned int *)&v53[4 * v49];
              unsigned int *v54 = *(_DWORD *)v20;
              uint64_t v47 = v54 + 1;
              while (end != begin)
              {
                unsigned int v55 = *--end;
                *--uint64_t v54 = v55;
              }
              v108.__begin_ = v54;
              v108.__end_ = v47;
              v108.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *v108.__end_ = *(_DWORD *)v20;
              uint64_t v47 = end + 1;
            }
            v108.__end_ = v47;
          }
          if (v14)
          {
            std::vector<unsigned int>::pointer v56 = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              std::vector<unsigned int>::pointer v58 = v107.__begin_;
              int64_t v59 = v107.__end_ - v107.__begin_;
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62) {
LABEL_213:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              int64_t v61 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v60) {
                unint64_t v60 = v61 >> 1;
              }
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v60;
              }
              if (v62)
              {
                BOOL v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v62);
                std::vector<unsigned int>::pointer v58 = v107.__begin_;
                std::vector<unsigned int>::pointer v56 = v107.__end_;
              }
              else
              {
                BOOL v63 = 0;
              }
              BOOL v64 = (unsigned int *)&v63[4 * v59];
              unsigned int *v64 = *(_DWORD *)(v20 + 4);
              int v57 = v64 + 1;
              while (v56 != v58)
              {
                unsigned int v65 = *--v56;
                *--BOOL v64 = v65;
              }
              v107.__begin_ = v64;
              v107.__end_ = v57;
              v107.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              *v107.__end_ = *(_DWORD *)(v20 + 4);
              int v57 = v56 + 1;
            }
            v107.__end_ = v57;
          }
          if (v99)
          {
            (*(void (**)(uint64_t))(*(void *)v99 + 40))(v99);
            char v19 = 0;
          }
          else
          {
            char v19 = 0;
            ++v103;
          }
        }
      }
LABEL_17:
      uint64_t v17 = v106;
      goto LABEL_18;
    }
    if (v104) {
      (*(void (**)(void))(*(void *)v104 + 8))();
    }
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15))
    {
      unint64_t v116 = v116 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    if (v108.__begin_)
    {
      v108.__end_ = v108.__begin_;
      operator delete(v108.__begin_);
    }
    unint64_t v8 = v116;
LABEL_211:
    uint64_t v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1B1FCCD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One(void)::one;
}

void sub_1B1FCCEC4(_Unwind_Exception *a1)
{
}

void fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FCD770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
    **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

unint64_t fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v34);
  uint64_t v6 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
  if (v34) {
    uint64_t v7 = v35[2] + 1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (*(_DWORD *)v6) {
    uint64_t v8 = *(void *)(v6 + 24) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 == v8)
  {
    char v9 = 0;
    uint64_t v10 = v35[1];
    uint64_t v11 = (uint64_t *)(v6 + 16);
    if (v34) {
      BOOL v12 = v34 == *(_DWORD *)v6;
    }
    else {
      BOOL v12 = 0;
    }
    int v13 = !v12;
    int v14 = v13 ^ 1;
    while (1)
    {
      uint64_t v15 = *v11;
      if ((v9 & 1) == 0 && !v14) {
        break;
      }
      if ((void *)v10 == v35) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16)) {
        goto LABEL_21;
      }
      uint64_t v10 = *(void *)(v10 + 8);
      uint64_t v11 = (uint64_t *)(v15 + 8);
      char v9 = 1;
    }
    if (v34) {
      goto LABEL_21;
    }
LABEL_42:
    float v38 = v36;
    float v37 = 0.0;
    float v37 = *(float *)(v6 + 32);
    float v32 = v36;
    float v33 = v37;
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      unint64_t v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    unint64_t result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  unint64_t v17 = a2;
  *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  uint64_t v18 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17)) {
    goto LABEL_36;
  }
  char v19 = 0;
  uint64_t v20 = *(void **)(a1 + 80);
  uint64_t v21 = v20[1];
  uint64_t v22 = **(void **)(a1 + 16);
  unint64_t v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    unint64_t v24 = *v23--;
    v19 |= *(void *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while (v24 != a2);
  int v25 = *(void **)a1;
  uint64_t v26 = **(void **)(a1 + 72);
  for (uint64_t i = (int *)(v21 - 4); ; --i)
  {
    unint64_t v28 = *i;
    if (v25) {
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    }
    unint64_t result = v28 >> 6;
    uint64_t v29 = 1 << v28;
    if ((v19 & 1) == 0) {
      break;
    }
    *(void *)(v22 + 8 * result) |= v29;
    *(void *)(v26 + 8 * result) &= ~v29;
    if (v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(void *)(v26 + 8 * result) &= ~v29;
  if (v28 != a2) {
    goto LABEL_33;
  }
  v20[1] = i;
  **(void **)(a1 + ++*(void *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    uint64_t v30 = **(void **)(a1 + 16);
    if ((*(void *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17)) {
      *(void *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3)) {
      *(_DWORD *)(v18 + 4 * a3) = v31;
    }
  }
  return result;
}

void sub_1B1FCDC2C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36DB0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36DB0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36DB0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1FCDCDC(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37D68;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1FCDDF4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37D68;
  uint64_t v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::vector<unsigned int>::pointer v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  BOOL v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1FCE23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::One()
{
  {
    operator new();
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::One(void)::one;
}

void sub_1B1FCE324(_Unwind_Exception *a1)
{
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::One()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::One(void)::one;
}

void sub_1B1FCE420(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    uint64_t v10 = v27 + 56 * v28;
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + ++*(void *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v25 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v25 = v13;
    }
    *(void *)(a1 + 8) = v25;
    uint64_t v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(uint64_t **)(a1 + 16);
    uint64_t v15 = *(uint64_t **)a1;
  }
  *(void *)(a1 + ++*(void *)(result + 24) = &v14[7 * v13];
  uint64_t v16 = v26;
  uint64_t v17 = v27;
  unint64_t v19 = v28;
  uint64_t v18 = v29;
  if (v29) {
    ++*v29;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    uint64_t v24 = v15 - 7;
    *uint64_t v24 = *(void *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(void *)(v23 + 24), v23 + 16);
    }
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 56 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B1FCE714(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v37 = 0u;
  long long v38 = 0u;
  *(_OWORD *)uint64_t v35 = 0u;
  *(_OWORD *)uint64_t v36 = 0u;
  uint64_t v6 = -1;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = -1;
  uint64_t v39 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v40 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v40 = (int)fst::CountStates<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t)a1);
    goto LABEL_6;
  }
  unint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v43;
    if (v43 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v9, (uint64_t)v34);
  uint64_t v31 = v9;
  uint64_t v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v10 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(__p);
      std::__list_imp<char *>::clear(&__p[0].__r_.__value_.__l.__size_);
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      uint64_t v14 = *(void *)(*(void *)(a1[1] + 64) + 8 * v12);
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v15 = *(void *)(v14 + 64);
      if (v15 == v16) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *(_DWORD **)(v14 + 56);
      }
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = (v15 - v16) / 56;
        }
        unint64_t v19 = v17;
        do
        {
          int v20 = *v19;
          v19 += 14;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(v17 + 2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          uint64_t v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    int v21 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    uint64_t v22 = (void *)fst::cerr(v21);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_30:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v33);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_33;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      uint64_t updated = 1;
      goto LABEL_33;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v29 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    long long v30 = (void *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_30;
  }
  uint64_t v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_33:
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[1]);
  }
  if (SHIBYTE(v36[0]) < 0) {
    operator delete(v35[0]);
  }
  return updated;
}

void sub_1B1FCEC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a17);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      int v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      uint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      unint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B1FCF274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Type()
{
  {
    operator new();
  }
  return fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Type(void)::type;
}

void sub_1B1FCF368(_Unwind_Exception *a1)
{
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        uint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B1FCF6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void *fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(void *a1, int a2, int *a3)
{
  uint64_t v6 = *(int **)(a1[8] + 8 * a2);
  int v18 = *v6;
  std::list<int>::list(v19, (uint64_t)(v6 + 2));
  int v20 = v6[8];
  int v15 = *a3;
  std::list<int>::list(v16, (uint64_t)(a3 + 2));
  int v17 = a3[8];
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal((uint64_t)a1, a2, &v15);
  std::__list_imp<char *>::clear(v16);
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  int v12 = v18;
  std::list<int>::list(v13, (uint64_t)v19);
  int v14 = v20;
  int v9 = *a3;
  std::list<int>::list(v10, (uint64_t)(a3 + 2));
  int v11 = a3[8];
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>(v7, &v12, &v9);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(v13);
  return std::__list_imp<char *>::clear(v19);
}

void sub_1B1FCF894(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::SetFinalProperties<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>(unint64_t a1, int *a2, int *a3)
{
  uint64_t v6 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
  int v7 = *a2;
  if (*a2) {
    uint64_t v8 = *((void *)a2 + 3) + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (*(_DWORD *)v6) {
    uint64_t v9 = *(void *)(v6 + 24) + 1;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8 != v9) {
    goto LABEL_22;
  }
  char v10 = 0;
  int v11 = (uint64_t *)(a2 + 4);
  int v12 = (uint64_t *)(v6 + 16);
  BOOL v13 = v7 && v7 == *(_DWORD *)v6;
  BOOL v14 = !v13;
  int v15 = !v14;
  while (1)
  {
    uint64_t v16 = *v11;
    uint64_t v17 = *v12;
    if ((v10 & 1) == 0 && !v15) {
      break;
    }
    if ((int *)v16 == a2 + 2) {
      goto LABEL_21;
    }
    if (*(_DWORD *)(v16 + 16) != *(_DWORD *)(v17 + 16)) {
      goto LABEL_22;
    }
    int v11 = (uint64_t *)(v16 + 8);
    int v12 = (uint64_t *)(v17 + 8);
    char v10 = 1;
  }
  if (v7) {
    goto LABEL_22;
  }
LABEL_21:
  if (*((float *)a2 + 8) != *(float *)(v6 + 32))
  {
LABEL_22:
    uint64_t v18 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
    int v19 = *a2;
    if (*a2) {
      uint64_t v20 = *((void *)a2 + 3) + 1;
    }
    else {
      uint64_t v20 = 0;
    }
    if (*(_DWORD *)v18) {
      uint64_t v21 = *(void *)(v18 + 24) + 1;
    }
    else {
      uint64_t v21 = 0;
    }
    if (v20 != v21) {
      goto LABEL_43;
    }
    char v22 = 0;
    char v23 = (uint64_t *)(a2 + 4);
    int v24 = (uint64_t *)(v18 + 16);
    BOOL v25 = v19 && v19 == *(_DWORD *)v18;
    BOOL v26 = !v25;
    int v27 = !v26;
    while (1)
    {
      uint64_t v28 = *v23;
      uint64_t v29 = *v24;
      if ((v22 & 1) == 0 && !v27) {
        break;
      }
      if ((int *)v28 == a2 + 2) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v28 + 16) != *(_DWORD *)(v29 + 16)) {
        goto LABEL_43;
      }
      char v23 = (uint64_t *)(v28 + 8);
      int v24 = (uint64_t *)(v29 + 8);
      char v22 = 1;
    }
    if (v19) {
      goto LABEL_43;
    }
LABEL_42:
    if (*((float *)a2 + 8) != *(float *)(v18 + 32)) {
LABEL_43:
    }
      a1 &= ~0x100000000uLL;
  }
  uint64_t v30 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
  int v31 = *a3;
  if (*a3) {
    uint64_t v32 = *((void *)a3 + 3) + 1;
  }
  else {
    uint64_t v32 = 0;
  }
  if (*(_DWORD *)v30) {
    uint64_t v33 = *(void *)(v30 + 24) + 1;
  }
  else {
    uint64_t v33 = 0;
  }
  if (v32 != v33) {
    goto LABEL_65;
  }
  char v34 = 0;
  long long v35 = (uint64_t *)(a3 + 4);
  long long v36 = (uint64_t *)(v30 + 16);
  BOOL v37 = v31 && v31 == *(_DWORD *)v30;
  BOOL v38 = !v37;
  int v39 = !v38;
  while (1)
  {
    uint64_t v40 = *v35;
    uint64_t v41 = *v36;
    if ((v34 & 1) == 0 && !v39) {
      break;
    }
    if ((int *)v40 == a3 + 2) {
      goto LABEL_64;
    }
    if (*(_DWORD *)(v40 + 16) != *(_DWORD *)(v41 + 16)) {
      goto LABEL_65;
    }
    long long v35 = (uint64_t *)(v40 + 8);
    long long v36 = (uint64_t *)(v41 + 8);
    char v34 = 1;
  }
  if (v31) {
    goto LABEL_65;
  }
LABEL_64:
  if (*((float *)a3 + 8) != *(float *)(v30 + 32))
  {
LABEL_65:
    uint64_t v42 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
    int v43 = *a3;
    if (*a3) {
      uint64_t v44 = *((void *)a3 + 3) + 1;
    }
    else {
      uint64_t v44 = 0;
    }
    if (*(_DWORD *)v42) {
      uint64_t v45 = *(void *)(v42 + 24) + 1;
    }
    else {
      uint64_t v45 = 0;
    }
    if (v44 != v45) {
      goto LABEL_86;
    }
    char v46 = 0;
    uint64_t v47 = (uint64_t *)(a3 + 4);
    uint64_t v48 = (uint64_t *)(v42 + 16);
    BOOL v49 = v43 && v43 == *(_DWORD *)v42;
    BOOL v50 = !v49;
    int v51 = !v50;
    while (1)
    {
      uint64_t v52 = *v47;
      uint64_t v53 = *v48;
      if ((v46 & 1) == 0 && !v51) {
        break;
      }
      if ((int *)v52 == a3 + 2) {
        goto LABEL_85;
      }
      if (*(_DWORD *)(v52 + 16) != *(_DWORD *)(v53 + 16)) {
        goto LABEL_86;
      }
      uint64_t v47 = (uint64_t *)(v52 + 8);
      uint64_t v48 = (uint64_t *)(v53 + 8);
      char v46 = 1;
    }
    if (v43) {
      goto LABEL_86;
    }
LABEL_85:
    if (*((float *)a3 + 8) != *(float *)(v42 + 32)) {
LABEL_86:
    }
      a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  return a1 & 0x3FFFFFF0007;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::AddArc(void *a1, int a2, int *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 56)) {
    int v7 = 0;
  }
  else {
    int v7 = (_DWORD *)(v6 - 56);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);
  return fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(v9, a3);
}

uint64_t fst::AddArcProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(unint64_t a1, int a2, int *a3, _DWORD *a4)
{
  int v6 = *a3;
  int v7 = a3[1];
  unint64_t v8 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*a3 == v7) {
    unint64_t v8 = a1;
  }
  unint64_t v9 = v8 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v7) {
    unint64_t v9 = v8 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  }
  if (!v6) {
    unint64_t v8 = v9;
  }
  if (v7) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v8 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if (a4)
  {
    if (*a4 <= v6) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v10 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    }
    if (a4[1] > v7) {
      unint64_t v10 = v11 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    }
    else {
      unint64_t v10 = v11;
    }
  }
  uint64_t v12 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
  int v13 = a3[2];
  if (v13) {
    uint64_t v14 = *((void *)a3 + 4) + 1;
  }
  else {
    uint64_t v14 = 0;
  }
  if (*(_DWORD *)v12) {
    uint64_t v15 = *(void *)(v12 + 24) + 1;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v14 != v15) {
    goto LABEL_38;
  }
  char v16 = 0;
  uint64_t v17 = (uint64_t *)(a3 + 6);
  uint64_t v18 = (uint64_t *)(v12 + 16);
  BOOL v19 = v13 && v13 == *(_DWORD *)v12;
  BOOL v20 = !v19;
  int v21 = !v20;
  while (1)
  {
    uint64_t v22 = *v17;
    uint64_t v23 = *v18;
    if ((v16 & 1) == 0 && !v21) {
      break;
    }
    if ((int *)v22 == a3 + 4) {
      goto LABEL_37;
    }
    if (*(_DWORD *)(v22 + 16) != *(_DWORD *)(v23 + 16)) {
      goto LABEL_38;
    }
    uint64_t v17 = (uint64_t *)(v22 + 8);
    uint64_t v18 = (uint64_t *)(v23 + 8);
    char v16 = 1;
  }
  if (v13) {
    goto LABEL_38;
  }
LABEL_37:
  if (*((float *)a3 + 10) != *(float *)(v12 + 32))
  {
LABEL_38:
    uint64_t v24 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
    int v25 = a3[2];
    if (v25) {
      uint64_t v26 = *((void *)a3 + 4) + 1;
    }
    else {
      uint64_t v26 = 0;
    }
    if (*(_DWORD *)v24) {
      uint64_t v27 = *(void *)(v24 + 24) + 1;
    }
    else {
      uint64_t v27 = 0;
    }
    if (v26 != v27) {
      goto LABEL_59;
    }
    char v28 = 0;
    uint64_t v29 = (uint64_t *)(a3 + 6);
    uint64_t v30 = (uint64_t *)(v24 + 16);
    BOOL v31 = v25 && v25 == *(_DWORD *)v24;
    BOOL v32 = !v31;
    int v33 = !v32;
    while (1)
    {
      uint64_t v34 = *v29;
      uint64_t v35 = *v30;
      if ((v28 & 1) == 0 && !v33) {
        break;
      }
      if ((int *)v34 == a3 + 4) {
        goto LABEL_58;
      }
      if (*(_DWORD *)(v34 + 16) != *(_DWORD *)(v35 + 16)) {
        goto LABEL_59;
      }
      uint64_t v29 = (uint64_t *)(v34 + 8);
      uint64_t v30 = (uint64_t *)(v35 + 8);
      char v28 = 1;
    }
    if (v25) {
      goto LABEL_59;
    }
LABEL_58:
    if (*((float *)a3 + 10) != *(float *)(v24 + 32)) {
LABEL_59:
    }
      unint64_t v10 = v10 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (a3[12] <= a2) {
    unint64_t v36 = v10 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  }
  else {
    unint64_t v36 = v10;
  }
  if ((v36 & 0x4000000000) != 0) {
    return v36 & 0x5D7FFEB0007 | 0x2800000000;
  }
  else {
    return v36 & 0x5D7FFEB0007;
  }
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v35, v5, &__x);
  int v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v35.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v35.__begin_[v12] == -1)
      {
        fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(void *)(v11 + 8 * v12));
      }
      else
      {
        v35.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      int64x2_t v17 = *(int64x2_t *)(v16 + 40);
      uint64_t v18 = *(void *)(v16 + 64) - *(void *)(v16 + 56);
      if (v18) {
        uint64_t v19 = *(void *)(v16 + 56);
      }
      else {
        uint64_t v19 = 0;
      }
      if (v18)
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = (int *)(v19 + 48);
        uint64_t v23 = v19 + 16;
        do
        {
          int v24 = v35.__begin_[*v22];
          if (v24 == -1)
          {
            uint64_t v27 = *((void *)v22 - 6);
            v28.i64[0] = v27;
            v28.i64[1] = HIDWORD(v27);
            int64x2_t v17 = vaddq_s64(v17, vceqzq_s64(v28));
          }
          else
          {
            *uint64_t v22 = v24;
            if (v20 != v21)
            {
              int64x2_t v32 = v17;
              uint64_t v25 = v19 + 56 * v21;
              *(void *)uint64_t v25 = *((void *)v22 - 6);
              *(_DWORD *)(v25 + 8) = *(v22 - 10);
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v25 + 16), *((void *)v22 - 3), v23);
              uint64_t v26 = v19 + 56 * v21;
              *(_DWORD *)(v26 + 40) = *(v22 - 2);
              *(_DWORD *)(v26 + 48) = *v22;
              uint64_t v14 = *v4;
              int64x2_t v17 = v32;
            }
            ++v21;
          }
          ++v20;
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          unint64_t v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v16 + 64) - *(void *)(v16 + 56)) >> 3);
          v22 += 14;
          v23 += 56;
        }
        while (v20 < v29);
        int64x2_t v33 = v17;
      }
      else
      {
        int64x2_t v33 = *(int64x2_t *)(v16 + 40);
        uint64_t v21 = 0;
        unint64_t v29 = 0;
      }
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs((void *)v16, v29 - v21);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 40) = v33;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v30 = *(int *)(a1 + 88);
  if (v30 == -1)
  {
    BOOL v31 = v35.__begin_;
    if (!v35.__begin_) {
      return;
    }
  }
  else
  {
    BOOL v31 = v35.__begin_;
    *(_DWORD *)(a1 + 88) = v35.__begin_[v30];
  }
  v35.__end_ = v31;
  operator delete(v31);
}

void sub_1B1FD013C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::DeleteArcs(void *a1, int a2)
{
  BOOL v3 = *(void **)(a1[8] + 8 * a2);
  v3[5] = 0;
  v3[6] = 0;
  uint64_t v5 = v3[7];
  uint64_t v4 = v3[8];
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = v4 - 56;
      std::__list_imp<char *>::clear((void *)(v4 - 40));
      uint64_t v4 = v6;
    }
    while (v6 != v5);
  }
  v3[8] = v5;
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 64)
                                                             - *(void *)(*(void *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 56) + 56 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::SetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 56);
  uint64_t v6 = (int *)(v5 + 56 * v4);
  int v7 = *v6;
  int v8 = v6[1];
  if (*v6 != v8) {
    **(void **)(a1 + 16) &= ~0x20000uLL;
  }
  if (v7)
  {
    if (!v8)
    {
      unint64_t v9 = *(unint64_t **)(a1 + 16);
      unint64_t v10 = *v9;
LABEL_8:
      *unint64_t v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    unint64_t v9 = *(unint64_t **)(a1 + 16);
    unint64_t v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      unint64_t v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      *unint64_t v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  uint64_t v12 = v5 + 56 * v4;
  uint64_t v13 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
  int v16 = *(_DWORD *)(v12 + 8);
  unint64_t v15 = (int *)(v12 + 8);
  int v14 = v16;
  if (v16) {
    uint64_t v17 = *((void *)v15 + 3) + 1;
  }
  else {
    uint64_t v17 = 0;
  }
  if (*(_DWORD *)v13) {
    uint64_t v18 = *(void *)(v13 + 24) + 1;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17 != v18) {
    goto LABEL_30;
  }
  char v19 = 0;
  unint64_t v20 = (uint64_t *)(v15 + 4);
  uint64_t v21 = (uint64_t *)(v13 + 16);
  BOOL v22 = v14 && v14 == *(_DWORD *)v13;
  BOOL v23 = !v22;
  int v24 = !v23;
  while (1)
  {
    uint64_t v25 = *v20;
    uint64_t v26 = *v21;
    if ((v19 & 1) == 0 && !v24) {
      break;
    }
    if ((int *)v25 == v15 + 2) {
      goto LABEL_29;
    }
    if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v26 + 16)) {
      goto LABEL_30;
    }
    unint64_t v20 = (uint64_t *)(v25 + 8);
    uint64_t v21 = (uint64_t *)(v26 + 8);
    char v19 = 1;
  }
  if (v14) {
    goto LABEL_30;
  }
LABEL_29:
  if (*((float *)v15 + 8) != *(float *)(v13 + 32))
  {
LABEL_30:
    uint64_t v27 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
    int v28 = *v15;
    if (*v15) {
      uint64_t v29 = *((void *)v15 + 3) + 1;
    }
    else {
      uint64_t v29 = 0;
    }
    if (*(_DWORD *)v27) {
      uint64_t v30 = *(void *)(v27 + 24) + 1;
    }
    else {
      uint64_t v30 = 0;
    }
    if (v29 != v30) {
      goto LABEL_51;
    }
    char v31 = 0;
    int64x2_t v32 = (uint64_t *)(v15 + 4);
    int64x2_t v33 = (uint64_t *)(v27 + 16);
    BOOL v34 = v28 && v28 == *(_DWORD *)v27;
    BOOL v35 = !v34;
    int v36 = !v35;
    while (1)
    {
      uint64_t v37 = *v32;
      uint64_t v38 = *v33;
      if ((v31 & 1) == 0 && !v36) {
        break;
      }
      if ((int *)v37 == v15 + 2) {
        goto LABEL_50;
      }
      if (*(_DWORD *)(v37 + 16) != *(_DWORD *)(v38 + 16)) {
        goto LABEL_51;
      }
      int64x2_t v32 = (uint64_t *)(v37 + 8);
      int64x2_t v33 = (uint64_t *)(v38 + 8);
      char v31 = 1;
    }
    if (v28) {
      goto LABEL_51;
    }
LABEL_50:
    if (*((float *)v15 + 8) != *(float *)(v27 + 32)) {
LABEL_51:
    }
      **(void **)(a1 + 16) &= ~0x100000000uLL;
  }
  uint64_t v39 = 0x30FC30007;
  if (*(_DWORD *)a2 == *v6 && *(_DWORD *)(a2 + 4) == v6[1] && *(_DWORD *)(a2 + 48) == *(_DWORD *)(v5 + 56 * v4 + 48)) {
    uint64_t v39 = 0x3FFFFFFF0007;
  }
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArc(*(uint64_t **)(a1 + 8), a2, *(void *)(a1 + 24));
  int v40 = *(_DWORD *)a2;
  int v41 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v41) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v40)
  {
    if (!v41)
    {
      uint64_t v42 = *(unint64_t **)(a1 + 16);
      unint64_t v43 = *v42;
LABEL_63:
      *uint64_t v42 = v43 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    uint64_t v42 = *(unint64_t **)(a1 + 16);
    unint64_t v44 = *v42 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *uint64_t v42 = v44;
    if (!v41)
    {
      unint64_t v43 = v44 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *uint64_t v42 = v43;
      goto LABEL_63;
    }
  }
  uint64_t result = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
  int v46 = *(_DWORD *)(a2 + 8);
  if (v46) {
    uint64_t v47 = *(void *)(a2 + 32) + 1;
  }
  else {
    uint64_t v47 = 0;
  }
  if (*(_DWORD *)result) {
    uint64_t v48 = *(void *)(result + 24) + 1;
  }
  else {
    uint64_t v48 = 0;
  }
  if (v47 != v48) {
    goto LABEL_85;
  }
  char v49 = 0;
  BOOL v50 = (uint64_t *)(a2 + 24);
  int v51 = (uint64_t *)(result + 16);
  BOOL v52 = v46 && v46 == *(_DWORD *)result;
  BOOL v53 = !v52;
  int v54 = !v53;
  while (1)
  {
    uint64_t v55 = *v50;
    uint64_t v56 = *v51;
    if ((v49 & 1) == 0 && !v54) {
      break;
    }
    if (v55 == a2 + 16) {
      goto LABEL_84;
    }
    if (*(_DWORD *)(v55 + 16) != *(_DWORD *)(v56 + 16)) {
      goto LABEL_85;
    }
    BOOL v50 = (uint64_t *)(v55 + 8);
    int v51 = (uint64_t *)(v56 + 8);
    char v49 = 1;
  }
  if (v46) {
    goto LABEL_85;
  }
LABEL_84:
  if (*(float *)(a2 + 40) != *(float *)(result + 32))
  {
LABEL_85:
    uint64_t result = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
    int v57 = *(_DWORD *)(a2 + 8);
    if (v57) {
      uint64_t v58 = *(void *)(a2 + 32) + 1;
    }
    else {
      uint64_t v58 = 0;
    }
    if (*(_DWORD *)result) {
      uint64_t v59 = *(void *)(result + 24) + 1;
    }
    else {
      uint64_t v59 = 0;
    }
    if (v58 != v59) {
      goto LABEL_106;
    }
    char v60 = 0;
    int64_t v61 = (uint64_t *)(a2 + 24);
    unint64_t v62 = (uint64_t *)(result + 16);
    BOOL v63 = v57 && v57 == *(_DWORD *)result;
    BOOL v64 = !v63;
    int v65 = !v64;
    while (1)
    {
      uint64_t v66 = *v61;
      uint64_t v67 = *v62;
      if ((v60 & 1) == 0 && !v65) {
        break;
      }
      if (v66 == a2 + 16) {
        goto LABEL_105;
      }
      if (*(_DWORD *)(v66 + 16) != *(_DWORD *)(v67 + 16)) {
        goto LABEL_106;
      }
      int64_t v61 = (uint64_t *)(v66 + 8);
      unint64_t v62 = (uint64_t *)(v67 + 8);
      char v60 = 1;
    }
    if (v57) {
      goto LABEL_106;
    }
LABEL_105:
    if (*(float *)(a2 + 40) != *(float *)(result + 32)) {
LABEL_106:
    }
      **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(void **)(a1 + 16) &= v39;
  return result;
}

void *fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1B1FD077C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1B1FD07EC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = 0;
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v16 = (uint64_t)&v16;
  uint64_t v17 = &v16;
  uint64_t v18 = 0;
  int v7 = a1 + 2;
  int v8 = (uint64_t *)(a1 + 4);
  unint64_t v9 = &v16;
LABEL_2:
  uint64_t v10 = *v8;
  int v11 = v4;
  while (1)
  {
    char v12 = v6;
    if (v6)
    {
      if ((_DWORD *)v10 == v7) {
        break;
      }
      int v4 = *(_DWORD *)(v10 + 16);
      goto LABEL_7;
    }
    int v4 = *a1;
    if (!*a1) {
      break;
    }
LABEL_7:
    if (v11)
    {
      uint64_t v13 = operator new(0x18uLL);
      v13[4] = v11;
      *(void *)uint64_t v13 = &v16;
      *((void *)v13 + 1) = v9;
      *unint64_t v9 = (uint64_t)v13;
      ++v5;
      unint64_t v9 = (uint64_t *)v13;
      uint64_t v17 = (uint64_t *)v13;
      uint64_t v18 = v5;
    }
    char v6 = 1;
    int v11 = v4;
    if (v12)
    {
      int v8 = (uint64_t *)(v10 + 8);
      goto LABEL_2;
    }
  }
  int v14 = a1[8];
  *(_DWORD *)a2 = v11;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)&v16);
  *(_DWORD *)(a2 + 32) = v14;
  return std::__list_imp<char *>::clear(&v16);
}

void sub_1B1FD0904(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::GallicWeight(uint64_t a1, int *a2, float a3)
{
  int v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::ProductWeight(a1, &v6, a3);
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1B1FD0984(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::ProductWeight(uint64_t a1, int *a2, float a3)
{
  int v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  *(_DWORD *)a1 = v6;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)v7);
  *(float *)(a1 + 32) = a3;
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1B1FD0A08(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v6 = 0;
        v5[0] = v3;
        v5[1] = 0;
        v5[2] = 0;
        void v5[3] = &v6;
        fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(a2, (uint64_t)v5);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B1FD117C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  uint64_t v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  char v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::NaturalLess<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    unint64_t v12 = v11 >> 2;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    bzero(*(void **)a3, 4 * v12);
  }
  unsigned int v73 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v71);
  while (1)
  {
    uint64_t result = v71;
    if (!v71)
    {
      if ((int)v73 >= v72) {
        return result;
      }
LABEL_11:
      uint64_t v15 = v73;
      goto LABEL_12;
    }
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 16))(v71);
    uint64_t result = v71;
    if (v14) {
      break;
    }
    if (!v71) {
      goto LABEL_11;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v71 + 24))();
LABEL_12:
    unint64_t v70 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v15, v68);
    uint64_t v16 = (int)v15;
    while (1)
    {
      if (!v68[0])
      {
        if (v70 >= v68[2]) {
          goto LABEL_114;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v68[0] + 24))(v68[0])) {
        break;
      }
      if (v68[0])
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v68[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v17 = v68[1] + 56 * v70;
LABEL_19:
      uint64_t v18 = *(int *)(*a2 + 4 * v16);
      if (v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 48)))
      {
        char v19 = *(_DWORD **)a3;
        if (!a4
          || (uint64_t v20 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One(),
              fst::NaturalLess<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::operator()(a4, v17 + 8, v20)))
        {
          int v21 = 1;
          goto LABEL_65;
        }
        if ((v19[v18] | 2) == 2)
        {
          uint64_t v22 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
          int v23 = *(_DWORD *)(v17 + 8);
          if (v23) {
            uint64_t v24 = *(void *)(v17 + 32) + 1;
          }
          else {
            uint64_t v24 = 0;
          }
          if (*(_DWORD *)v22) {
            uint64_t v25 = *(void *)(v22 + 24) + 1;
          }
          else {
            uint64_t v25 = 0;
          }
          if (v24 != v25) {
            goto LABEL_44;
          }
          char v26 = 0;
          uint64_t v27 = (uint64_t *)(v17 + 24);
          int v28 = (uint64_t *)(v22 + 16);
          BOOL v29 = v23 && v23 == *(_DWORD *)v22;
          BOOL v30 = !v29;
          while (1)
          {
            uint64_t v31 = *v27;
            uint64_t v32 = *v28;
            if ((v26 & 1) == 0 && v30) {
              break;
            }
            if (v31 == v17 + 16) {
              goto LABEL_43;
            }
            if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16)) {
              goto LABEL_44;
            }
            uint64_t v27 = (uint64_t *)(v31 + 8);
            int v28 = (uint64_t *)(v32 + 8);
            char v26 = 1;
          }
          if (v23) {
            goto LABEL_44;
          }
LABEL_43:
          float v75 = 0.0;
          float v75 = *(float *)(v17 + 40);
          float v74 = 0.0;
          float v74 = *(float *)(v22 + 32);
          if (v75 != v74)
          {
LABEL_44:
            uint64_t v33 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
            int v34 = *(_DWORD *)(v17 + 8);
            if (v34) {
              uint64_t v35 = *(void *)(v17 + 32) + 1;
            }
            else {
              uint64_t v35 = 0;
            }
            if (*(_DWORD *)v33) {
              uint64_t v36 = *(void *)(v33 + 24) + 1;
            }
            else {
              uint64_t v36 = 0;
            }
            if (v35 != v36) {
              goto LABEL_64;
            }
            char v37 = 0;
            uint64_t v38 = (uint64_t *)(v17 + 24);
            uint64_t v39 = (uint64_t *)(v33 + 16);
            BOOL v40 = v34 && v34 == *(_DWORD *)v33;
            BOOL v41 = !v40;
            while (1)
            {
              uint64_t v42 = *v38;
              uint64_t v43 = *v39;
              if ((v37 & 1) == 0 && v41) {
                break;
              }
              if (v42 == v17 + 16) {
                goto LABEL_63;
              }
              if (*(_DWORD *)(v42 + 16) != *(_DWORD *)(v43 + 16)) {
                goto LABEL_64;
              }
              uint64_t v38 = (uint64_t *)(v42 + 8);
              uint64_t v39 = (uint64_t *)(v43 + 8);
              char v37 = 1;
            }
            if (v34) {
              goto LABEL_64;
            }
LABEL_63:
            float v75 = 0.0;
            float v75 = *(float *)(v17 + 40);
            float v74 = 0.0;
            float v74 = *(float *)(v33 + 32);
            if (v75 != v74)
            {
LABEL_64:
              int v21 = 3;
              goto LABEL_65;
            }
          }
          int v21 = 2;
LABEL_65:
          v19[v18] = v21;
        }
        *a5 = 0;
      }
      uint64_t v44 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
      int v46 = *(_DWORD *)(v17 + 8);
      if (v46) {
        uint64_t v47 = *(void *)(v17 + 32) + 1;
      }
      else {
        uint64_t v47 = 0;
      }
      if (*(_DWORD *)v44) {
        uint64_t v48 = *(void *)(v44 + 24) + 1;
      }
      else {
        uint64_t v48 = 0;
      }
      if (v47 != v48) {
        goto LABEL_87;
      }
      char v49 = 0;
      BOOL v50 = (uint64_t *)(v17 + 24);
      int v51 = (uint64_t *)(v44 + 16);
      BOOL v52 = v46 && v46 == *(_DWORD *)v44;
      BOOL v53 = !v52;
      while (1)
      {
        uint64_t v54 = *v50;
        uint64_t v55 = *v51;
        if ((v49 & 1) == 0 && v53) {
          break;
        }
        if (v54 == v17 + 16) {
          goto LABEL_86;
        }
        if (*(_DWORD *)(v54 + 16) != *(_DWORD *)(v55 + 16)) {
          goto LABEL_87;
        }
        BOOL v50 = (uint64_t *)(v54 + 8);
        int v51 = (uint64_t *)(v55 + 8);
        char v49 = 1;
      }
      if (v46) {
        goto LABEL_87;
      }
LABEL_86:
      float v75 = 0.0;
      float v75 = *(float *)(v17 + 40);
      float v74 = 0.0;
      float v74 = *(float *)(v44 + 32);
      v45.n128_f32[0] = v75;
      if (v75 != v74)
      {
LABEL_87:
        uint64_t v56 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
        int v57 = *(_DWORD *)(v17 + 8);
        if (v57) {
          uint64_t v58 = *(void *)(v17 + 32) + 1;
        }
        else {
          uint64_t v58 = 0;
        }
        if (*(_DWORD *)v56) {
          uint64_t v59 = *(void *)(v56 + 24) + 1;
        }
        else {
          uint64_t v59 = 0;
        }
        if (v58 != v59) {
          goto LABEL_107;
        }
        char v60 = 0;
        int64_t v61 = (uint64_t *)(v17 + 24);
        unint64_t v62 = (uint64_t *)(v56 + 16);
        BOOL v63 = v57 && v57 == *(_DWORD *)v56;
        BOOL v64 = !v63;
        while (1)
        {
          uint64_t v65 = *v61;
          uint64_t v66 = *v62;
          if ((v60 & 1) == 0 && v64) {
            break;
          }
          if (v65 == v17 + 16) {
            goto LABEL_106;
          }
          if (*(_DWORD *)(v65 + 16) != *(_DWORD *)(v66 + 16)) {
            goto LABEL_107;
          }
          int64_t v61 = (uint64_t *)(v65 + 8);
          unint64_t v62 = (uint64_t *)(v66 + 8);
          char v60 = 1;
        }
        if (v57) {
          goto LABEL_107;
        }
LABEL_106:
        float v75 = 0.0;
        float v75 = *(float *)(v17 + 40);
        float v74 = 0.0;
        float v74 = *(float *)(v56 + 32);
        v45.n128_f32[0] = v75;
        if (v75 != v74) {
LABEL_107:
        }
          *a6 = 0;
      }
      if (v68[0]) {
        (*(void (**)(void, __n128))(*(void *)v68[0] + 40))(v68[0], v45);
      }
      else {
        ++v70;
      }
    }
    if (v68[0])
    {
      (*(void (**)(void))(*(void *)v68[0] + 8))();
      goto LABEL_116;
    }
LABEL_114:
    if (v69) {
      --*v69;
    }
LABEL_116:
    if (v71) {
      (*(void (**)(uint64_t))(*(void *)v71 + 32))(v71);
    }
    else {
      ++v73;
    }
  }
  if (v71) {
    return (*(uint64_t (**)(void))(*(void *)v71 + 8))();
  }
  return result;
}

void sub_1B1FD18BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  unint64_t v2 = &v3;
  fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::TopOrderVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>();
}

void sub_1B1FD1A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  int v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::TopOrderVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>()
{
}

void sub_1B1FD2384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Type()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Type(void)::type;
}

void sub_1B1FD24A0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

BOOL fst::NaturalLess<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst::Plus<int>(a2, a3, (uint64_t)&v29);
  float v5 = *(float *)(a2 + 32);
  float v6 = NAN;
  if (v5 != -INFINITY)
  {
    float v7 = *(float *)(a3 + 32);
    float v6 = NAN;
    if (v7 != -INFINITY)
    {
      if (v5 >= v7) {
        float v6 = *(float *)(a3 + 32);
      }
      else {
        float v6 = *(float *)(a2 + 32);
      }
    }
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v26, (int *)&v29, v6);
  std::__list_imp<char *>::clear(v30);
  if (v26) {
    uint64_t v8 = v27[2] + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = *(_DWORD *)a2;
  if (*(_DWORD *)a2) {
    uint64_t v10 = *(void *)(a2 + 24) + 1;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v8 != v10) {
    goto LABEL_41;
  }
  uint64_t v11 = v27[1];
  uint64_t v12 = *(void *)(a2 + 16);
  if (v26) {
    BOOL v13 = v26 == v9;
  }
  else {
    BOOL v13 = 0;
  }
  int v14 = !v13;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v14 != 1)
  {
    while ((void *)v11 != v27)
    {
      if (*(_DWORD *)(v11 + 16) != *(_DWORD *)(v15 + 16)) {
        goto LABEL_41;
      }
      uint64_t v11 = *(void *)(v11 + 8);
      uint64_t v15 = *(void *)(v15 + 8);
    }
  }
  else if (v26)
  {
LABEL_41:
    BOOL v24 = 0;
    goto LABEL_42;
  }
  float v29 = v28;
  float v31 = 0.0;
  float v16 = *(float *)(a2 + 32);
  float v31 = v16;
  if (v28 != v16) {
    goto LABEL_41;
  }
  if (*(_DWORD *)a3) {
    uint64_t v17 = *(void *)(a3 + 24) + 1;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v8 == v17)
  {
    char v18 = 0;
    uint64_t v19 = (uint64_t *)(a3 + 16);
    if (v9) {
      BOOL v20 = v9 == *(_DWORD *)a3;
    }
    else {
      BOOL v20 = 0;
    }
    int v21 = !v20;
    int v22 = v21 ^ 1;
    while (1)
    {
      uint64_t v23 = *v19;
      if ((v18 & 1) == 0 && !v22) {
        break;
      }
      if (v12 == a2 + 8) {
        goto LABEL_45;
      }
      if (*(_DWORD *)(v12 + 16) != *(_DWORD *)(v23 + 16)) {
        goto LABEL_44;
      }
      uint64_t v12 = *(void *)(v12 + 8);
      uint64_t v19 = (uint64_t *)(v23 + 8);
      char v18 = 1;
    }
    if (v9) {
      goto LABEL_44;
    }
LABEL_45:
    float v29 = v16;
    float v31 = 0.0;
    float v31 = *(float *)(a3 + 32);
    BOOL v24 = v16 != v31;
  }
  else
  {
LABEL_44:
    BOOL v24 = 1;
  }
LABEL_42:
  std::__list_imp<char *>::clear(v27);
  return v24;
}

void sub_1B1FD26DC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::ShortestDistanceState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::ShortestDistance(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
      return;
    }
    goto LABEL_207;
  }
  if (*((unsigned char *)a1 + 32))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    }
    uint64_t v4 = fst::LogMessage::LogMessage((fst *)v147, (uint64_t)&__p);
    float v5 = (void *)fst::cerr(v4);
    v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ShortestDistance: first_path option disallowed when ", 52);
    v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)"Weight does not have the path property: ", 40);
    uint64_t v134 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Type();
    int v135 = *(char *)(v134 + 23);
    if (v135 >= 0) {
      uint64_t v136 = v134;
    }
    else {
      uint64_t v136 = *(void *)v134;
    }
    if (v135 >= 0) {
      uint64_t v137 = *(unsigned __int8 *)(v134 + 23);
    }
    else {
      uint64_t v137 = *(void *)(v134 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, v136, v137);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v147);
    if (SHIBYTE(v152) < 0) {
      operator delete(__p);
    }
LABEL_207:
    v138 = (char *)a1 + 116;
    goto LABEL_208;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    float v6 = (uint64_t *)a1[1];
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    if (v7 != *v6)
    {
      do
      {
        uint64_t v9 = v7 - 40;
        std::__list_imp<char *>::clear((void *)(v7 - 32));
        uint64_t v7 = v9;
      }
      while (v9 != v8);
    }
    v6[1] = v8;
    uint64_t v11 = a1[5];
    uint64_t v10 = a1[6];
    if (v10 != v11)
    {
      do
      {
        uint64_t v12 = v10 - 40;
        std::__list_imp<char *>::clear((void *)(v10 - 32));
        uint64_t v10 = v12;
      }
      while (v12 != v11);
    }
    a1[6] = v11;
    a1[9] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  unint64_t v13 = a2;
  int v14 = (uint64_t *)a1[1];
  for (uint64_t i = v14 + 1; 0xCCCCCCCCCCCCCCCDLL * ((v14[1] - *v14) >> 3) <= a2; uint64_t i = v14 + 1)
  {
    float v16 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
    uint64_t v17 = v16;
    unint64_t v18 = v14[1];
    if (v18 >= v14[2])
    {
      uint64_t v19 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1> const&>(v14, v16);
    }
    else
    {
      *(_DWORD *)unint64_t v18 = *v16;
      std::list<int>::list((void *)(v18 + 8), (uint64_t)(v16 + 2));
      *(_DWORD *)(v18 + 32) = v17[8];
      uint64_t v19 = v18 + 40;
      uint64_t *i = v18 + 40;
    }
    uint64_t *i = v19;
    BOOL v20 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
    int v21 = v20;
    unint64_t v22 = a1[6];
    if (v22 >= a1[7])
    {
      uint64_t v23 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1> const&>(a1 + 5, v20);
    }
    else
    {
      *(_DWORD *)unint64_t v22 = *v20;
      std::list<int>::list((void *)(v22 + 8), (uint64_t)(v20 + 2));
      *(_DWORD *)(v22 + 32) = v21[8];
      uint64_t v23 = v22 + 40;
      a1[6] = v22 + 40;
    }
    a1[6] = v23;
    LOBYTE(__p) = 0;
    std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &__p);
    int v14 = (uint64_t *)a1[1];
  }
  if (*((unsigned char *)a1 + 33))
  {
    BOOL v24 = (char *)a1[11];
    uint64_t v25 = (char *)a1[12];
    unint64_t v26 = (v25 - v24) >> 2;
    if (v26 <= a2)
    {
      uint64_t v27 = a1 + 13;
      do
      {
        if ((unint64_t)v25 >= *v27)
        {
          unint64_t v29 = v26 + 1;
          if ((v26 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v30 = *v27 - (void)v24;
          if (v30 >> 1 > v29) {
            unint64_t v29 = v30 >> 1;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v31);
            BOOL v24 = (char *)a1[11];
            uint64_t v25 = (char *)a1[12];
          }
          else
          {
            uint64_t v32 = 0;
          }
          uint64_t v33 = &v32[4 * v26];
          *(_DWORD *)uint64_t v33 = -1;
          float v28 = v33 + 4;
          while (v25 != v24)
          {
            int v34 = *((_DWORD *)v25 - 1);
            v25 -= 4;
            *((_DWORD *)v33 - 1) = v34;
            v33 -= 4;
          }
          a1[11] = v33;
          a1[12] = v28;
          a1[13] = &v32[4 * v31];
          if (v24)
          {
            operator delete(v24);
            BOOL v24 = (char *)a1[11];
          }
          else
          {
            BOOL v24 = v33;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v25 = -1;
          float v28 = v25 + 4;
        }
        a1[12] = v28;
        unint64_t v26 = (v28 - v24) >> 2;
        uint64_t v25 = v28;
      }
      while (v26 <= a2);
    }
    *(_DWORD *)&v24[4 * a2] = *((_DWORD *)a1 + 28);
  }
  uint64_t v35 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
  uint64_t v36 = v35;
  uint64_t v37 = *(void *)a1[1] + 40 * (int)v13;
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v35;
  if (v37 != v35) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v37 + 8), *(void *)(v35 + 16), v35 + 8);
  }
  *(_DWORD *)(v37 + 32) = *(_DWORD *)(v36 + 32);
  uint64_t v38 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::One();
  uint64_t v39 = v38;
  BOOL v40 = a1 + 5;
  uint64_t v41 = a1[5] + 40 * (int)v13;
  *(_DWORD *)uint64_t v41 = *(_DWORD *)v38;
  if (v41 != v38) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v41 + 8), *(void *)(v38 + 16), v38 + 8);
  }
  *(_DWORD *)(v41 + 32) = *(_DWORD *)(v39 + 32);
  uint64_t v42 = a1 + 8;
  *(void *)(a1[8] + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v13);
  uint64_t v43 = a1 + 13;
  v138 = (char *)a1 + 116;
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_196;
    }
    int v44 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    __n128 v45 = (uint64_t *)a1[1];
    int v46 = v45 + 1;
    for (j = v44; 0xCCCCCCCCCCCCCCCDLL * ((v45[1] - *v45) >> 3) <= j; int v46 = v45 + 1)
    {
      uint64_t v48 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
      char v49 = v48;
      unint64_t v50 = v45[1];
      if (v50 >= v45[2])
      {
        uint64_t v51 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1> const&>(v45, v48);
      }
      else
      {
        *(_DWORD *)unint64_t v50 = *v48;
        std::list<int>::list((void *)(v50 + 8), (uint64_t)(v48 + 2));
        *(_DWORD *)(v50 + 32) = v49[8];
        uint64_t v51 = v50 + 40;
        *int v46 = v50 + 40;
      }
      *int v46 = v51;
      BOOL v52 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
      BOOL v53 = v52;
      unint64_t v54 = a1[6];
      if (v54 >= a1[7])
      {
        uint64_t v55 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1> const&>(a1 + 5, v52);
      }
      else
      {
        *(_DWORD *)unint64_t v54 = *v52;
        std::list<int>::list((void *)(v54 + 8), (uint64_t)(v52 + 2));
        *(_DWORD *)(v54 + 32) = v53[8];
        uint64_t v55 = v54 + 40;
        a1[6] = v54 + 40;
      }
      a1[6] = v55;
      LOBYTE(__p) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &__p);
      __n128 v45 = (uint64_t *)a1[1];
    }
    if (*((unsigned char *)a1 + 32))
    {
      (*(void (**)(void **__return_ptr))(*(void *)*a1 + 32))(&__p);
      uint64_t v56 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
      if (__p) {
        uint64_t v57 = v153 + 1;
      }
      else {
        uint64_t v57 = 0;
      }
      if (*(_DWORD *)v56) {
        uint64_t v58 = *(void *)(v56 + 24) + 1;
      }
      else {
        uint64_t v58 = 0;
      }
      if (v57 != v58) {
        goto LABEL_195;
      }
      char v59 = 0;
      uint64_t v60 = v152;
      int64_t v61 = (uint64_t *)(v56 + 16);
      BOOL v62 = __p && __p == *(_DWORD *)v56;
      BOOL v63 = !v62;
      while (1)
      {
        uint64_t v64 = *v61;
        if ((v59 & 1) == 0 && v63) {
          break;
        }
        if ((uint64_t *)v60 == &v151) {
          goto LABEL_79;
        }
        if (*(_DWORD *)(v60 + 16) != *(_DWORD *)(v64 + 16)) {
          goto LABEL_195;
        }
        uint64_t v60 = *(void *)(v60 + 8);
        int64_t v61 = (uint64_t *)(v64 + 8);
        char v59 = 1;
      }
      if (__p)
      {
LABEL_195:
        std::__list_imp<char *>::clear(&v151);
LABEL_196:
        ++*((_DWORD *)a1 + 28);
        if (!(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
          return;
        }
LABEL_208:
        unsigned char *v138 = 1;
        return;
      }
LABEL_79:
      *(float *)v147 = v154;
      float v144 = 0.0;
      float v144 = *(float *)(v56 + 32);
      float v65 = v154;
      float v66 = v144;
      std::__list_imp<char *>::clear(&v151);
      if (v65 != v66) {
        goto LABEL_196;
      }
    }
    *(void *)(*v42 + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << j);
    uint64_t v67 = *v40 + 40 * (int)j;
    LODWORD(__p) = *(_DWORD *)v67;
    std::list<int>::list(&v151, v67 + 8);
    float v154 = *(float *)(v67 + 32);
    uint64_t v68 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
    uint64_t v69 = v68;
    uint64_t v70 = *v40 + 40 * (int)j;
    *(_DWORD *)uint64_t v70 = *(_DWORD *)v68;
    if (v70 != v68) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v70 + 8), *(void *)(v68 + 16), v68 + 8);
    }
    *(_DWORD *)(v70 + 32) = *(_DWORD *)(v69 + 32);
    uint64_t v71 = *a1;
    unint64_t v149 = 0;
    (*(void (**)(uint64_t, unint64_t, void *))(*(void *)v71 + 136))(v71, j, v147);
    while (v147[0])
    {
      if ((*(uint64_t (**)(void))(*(void *)v147[0] + 24))(v147[0])) {
        goto LABEL_188;
      }
      if (v147[0])
      {
        uint64_t v72 = (*(uint64_t (**)(void))(*(void *)v147[0] + 32))(v147[0]);
        goto LABEL_89;
      }
LABEL_88:
      uint64_t v72 = v147[1] + 56 * v149;
LABEL_89:
      unsigned int v73 = (uint64_t *)a1[1];
      float v74 = v73 + 1;
      for (unint64_t k = *(int *)(v72 + 48); 0xCCCCCCCCCCCCCCCDLL * ((v73[1] - *v73) >> 3) <= k; unint64_t k = *(int *)(v72 + 48))
      {
        unsigned int v76 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
        unsigned int v77 = v76;
        uint64_t v78 = *v74;
        if (*v74 >= (unint64_t)v73[2])
        {
          uint64_t v79 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1> const&>(v73, v76);
        }
        else
        {
          *(_DWORD *)uint64_t v78 = *v76;
          std::list<int>::list((void *)(v78 + 8), (uint64_t)(v76 + 2));
          *(_DWORD *)(v78 + 32) = v77[8];
          uint64_t v79 = v78 + 40;
          *float v74 = v78 + 40;
        }
        *float v74 = v79;
        uint64_t v80 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
        char v81 = v80;
        unint64_t v82 = a1[6];
        if (v82 >= a1[7])
        {
          uint64_t v83 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1> const&>(a1 + 5, v80);
        }
        else
        {
          *(_DWORD *)unint64_t v82 = *v80;
          std::list<int>::list((void *)(v82 + 8), (uint64_t)(v80 + 2));
          *(_DWORD *)(v82 + 32) = v81[8];
          uint64_t v83 = v82 + 40;
          a1[6] = v82 + 40;
        }
        a1[6] = v83;
        LOBYTE(v144) = 0;
        std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v144);
        unsigned int v73 = (uint64_t *)a1[1];
        float v74 = v73 + 1;
      }
      if (*((unsigned char *)a1 + 33))
      {
        BOOL v84 = (char *)a1[11];
        BOOL v85 = (char *)a1[12];
        unint64_t v86 = (v85 - v84) >> 2;
        if (v86 <= (int)k)
        {
          do
          {
            if ((unint64_t)v85 >= *v43)
            {
              unint64_t v89 = v86 + 1;
              if ((v86 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v90 = *v43 - (void)v84;
              if (v90 >> 1 > v89) {
                unint64_t v89 = v90 >> 1;
              }
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v91 = v89;
              }
              if (v91)
              {
                uint64_t v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v91);
                BOOL v84 = (char *)a1[11];
                BOOL v85 = (char *)a1[12];
              }
              else
              {
                uint64_t v92 = 0;
              }
              BOOL v93 = &v92[4 * v86];
              *(_DWORD *)BOOL v93 = -1;
              int v88 = v93 + 4;
              while (v85 != v84)
              {
                int v94 = *((_DWORD *)v85 - 1);
                v85 -= 4;
                *((_DWORD *)v93 - 1) = v94;
                v93 -= 4;
              }
              a1[11] = v93;
              a1[12] = v88;
              a1[13] = &v92[4 * v91];
              if (v84)
              {
                operator delete(v84);
                BOOL v84 = (char *)a1[11];
              }
              else
              {
                BOOL v84 = v93;
              }
            }
            else
            {
              *(_DWORD *)BOOL v85 = -1;
              int v88 = v85 + 4;
            }
            a1[12] = v88;
            unint64_t v86 = (v88 - v84) >> 2;
            LODWORD(k) = *(_DWORD *)(v72 + 48);
            BOOL v85 = v88;
          }
          while (v86 <= (int)k);
          uint64_t v87 = (int)k;
        }
        else
        {
          uint64_t v87 = (int)k;
        }
        if (*(_DWORD *)&v84[4 * v87] != *((_DWORD *)a1 + 28))
        {
          uint64_t v95 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
          uint64_t v96 = v95;
          uint64_t v97 = *(void *)a1[1] + 40 * *(int *)(v72 + 48);
          *(_DWORD *)uint64_t v97 = *(_DWORD *)v95;
          if (v97 != v95) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v97 + 8), *(void *)(v95 + 16), v95 + 8);
          }
          *(_DWORD *)(v97 + 32) = *(_DWORD *)(v96 + 32);
          uint64_t v98 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::Zero();
          uint64_t v99 = v98;
          uint64_t v100 = *v40 + 40 * *(int *)(v72 + 48);
          *(_DWORD *)uint64_t v100 = *(_DWORD *)v98;
          if (v100 != v98) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v100 + 8), *(void *)(v98 + 16), v98 + 8);
          }
          *(_DWORD *)(v100 + 32) = *(_DWORD *)(v99 + 32);
          unint64_t v101 = *(int *)(v72 + 48);
          *(void *)(a1[8] + ((v101 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v101);
          *(_DWORD *)(a1[11] + 4 * v101) = *((_DWORD *)a1 + 28);
          LODWORD(k) = *(_DWORD *)(v72 + 48);
        }
      }
      uint64_t v102 = *(void *)a1[1];
      uint64_t v103 = a1[5];
      fst::Times<int,(fst::StringType)1>((int *)&__p, v72 + 8, (uint64_t)&v139);
      float v104 = NAN;
      if (v154 != -INFINITY)
      {
        float v105 = *(float *)(v72 + 40);
        float v104 = NAN;
        if (v105 != -INFINITY)
        {
          float v104 = INFINITY;
          if (v105 != INFINITY && v154 != INFINITY) {
            float v104 = v154 + v105;
          }
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v144, &v139, v104);
      uint64_t v107 = v102 + 40 * (int)k;
      std::__list_imp<char *>::clear(&v140);
      fst::Plus<int>(v107, (uint64_t)&v144, (uint64_t)&v155);
      float v108 = *(float *)(v107 + 32);
      float v109 = NAN;
      if (v108 != -INFINITY)
      {
        float v109 = NAN;
        if (v146 != -INFINITY)
        {
          if (v108 >= v146) {
            float v109 = v146;
          }
          else {
            float v109 = *(float *)(v107 + 32);
          }
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v139, &v155, v109);
      std::__list_imp<char *>::clear(v156);
      int v110 = *(_DWORD *)v107;
      if (*(_DWORD *)v107) {
        uint64_t v111 = *(void *)(v107 + 24) + 1;
      }
      else {
        uint64_t v111 = 0;
      }
      if (v139) {
        uint64_t v112 = v142 + 1;
      }
      else {
        uint64_t v112 = 0;
      }
      if (v111 == v112)
      {
        char v113 = 0;
        float v114 = *((float *)a1 + 7);
        int v115 = (uint64_t *)(v107 + 16);
        uint64_t v116 = v141;
        if (v110) {
          BOOL v117 = v110 == v139;
        }
        else {
          BOOL v117 = 0;
        }
        int v118 = !v117;
        while (1)
        {
          uint64_t v119 = *v115;
          if ((v113 & 1) == 0 && v118 == 1) {
            break;
          }
          if (v119 == v107 + 8) {
            goto LABEL_180;
          }
          if (*(_DWORD *)(v119 + 16) != *(_DWORD *)(v116 + 16)) {
            goto LABEL_156;
          }
          int v115 = (uint64_t *)(v119 + 8);
          uint64_t v116 = *(void *)(v116 + 8);
          char v113 = 1;
        }
        if (v110) {
          goto LABEL_156;
        }
LABEL_180:
        float v126 = *(float *)(v107 + 32);
        float v127 = v143;
        float v128 = v114 + v143;
        float v129 = v114 + v126;
        std::__list_imp<char *>::clear(&v140);
        if (v127 <= v129 && v126 <= v128) {
          goto LABEL_184;
        }
      }
      else
      {
LABEL_156:
        std::__list_imp<char *>::clear(&v140);
      }
      fst::Plus<int>(v107, (uint64_t)&v144, (uint64_t)&v155);
      float v120 = *(float *)(v107 + 32);
      float v121 = NAN;
      if (v120 != -INFINITY)
      {
        float v121 = NAN;
        if (v146 != -INFINITY)
        {
          if (v120 >= v146) {
            float v121 = v146;
          }
          else {
            float v121 = *(float *)(v107 + 32);
          }
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v139, &v155, v121);
      std::__list_imp<char *>::clear(v156);
      *(_DWORD *)uint64_t v107 = v139;
      if ((int *)v107 != &v139) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v107 + 8), v141, (uint64_t)&v140);
      }
      uint64_t v122 = v103 + 40 * (int)k;
      *(float *)(v107 + 32) = v143;
      std::__list_imp<char *>::clear(&v140);
      fst::Plus<int>(v122, (uint64_t)&v144, (uint64_t)&v155);
      float v123 = *(float *)(v122 + 32);
      float v124 = NAN;
      if (v123 != -INFINITY)
      {
        float v124 = NAN;
        if (v146 != -INFINITY)
        {
          if (v123 >= v146) {
            float v124 = v146;
          }
          else {
            float v124 = *(float *)(v122 + 32);
          }
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v139, &v155, v124);
      std::__list_imp<char *>::clear(v156);
      *(_DWORD *)uint64_t v122 = v139;
      if ((int *)v122 != &v139) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v122 + 8), v141, (uint64_t)&v140);
      }
      *(float *)(v122 + 32) = v143;
      std::__list_imp<char *>::clear(&v140);
      if (*(_DWORD *)v107 == -2 && !*(void *)(v107 + 24)
        || *(float *)(v107 + 32) == -INFINITY
        || *(_DWORD *)v122 == -2 && !*(void *)(v122 + 24)
        || *(float *)(v122 + 32) == -INFINITY)
      {
        unsigned char *v138 = 1;
        std::__list_imp<char *>::clear(v145);
        char v131 = 0;
        goto LABEL_189;
      }
      uint64_t v125 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[8] + (((unint64_t)*(int *)(v72 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v72 + 48)))
      {
        (*(void (**)(void))(v125 + 40))();
      }
      else
      {
        (*(void (**)(void))(v125 + 24))();
        *(void *)(*v42 + (((unint64_t)*(int *)(v72 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v72 + 48);
      }
LABEL_184:
      std::__list_imp<char *>::clear(v145);
      if (v147[0]) {
        (*(void (**)(void))(*(void *)v147[0] + 40))(v147[0]);
      }
      else {
        ++v149;
      }
    }
    if (v149 < v147[2]) {
      goto LABEL_88;
    }
LABEL_188:
    char v131 = 1;
LABEL_189:
    if (v147[0])
    {
      (*(void (**)(void))(*(void *)v147[0] + 8))(v147[0]);
    }
    else if (v148)
    {
      --*v148;
    }
    std::__list_imp<char *>::clear(&v151);
  }
  while ((v131 & 1) != 0);
}

void sub_1B1FD37BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  char v3 = result;
  uint64_t v4 = result[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *result) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    return std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__append(result, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *result + 40 * a2;
    if (v4 != v8)
    {
      do
      {
        uint64_t v9 = v4 - 40;
        uint64_t result = std::__list_imp<char *>::clear((void *)(v4 - 32));
        uint64_t v4 = v9;
      }
      while (v9 != v8);
    }
    v3[1] = v8;
  }
  return result;
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::NoWeight()
{
  {
    operator new();
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>::NoWeight(void)::no_weight;
}

void sub_1B1FD3A3C(_Unwind_Exception *a1)
{
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1> const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  float v16 = &v10[40 * v9];
  *(_DWORD *)uint64_t v11 = *a2;
  std::list<int>::list((void *)v11 + 1, (uint64_t)(a2 + 2));
  *((_DWORD *)v11 + 8) = a2[8];
  v15 += 40;
  std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1FD3B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      *(_DWORD *)(a7 + v11 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((void *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1FD3C94(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 8;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__append(uint64_t *a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = a1 + 2;
  uint64_t v7 = v8;
  uint64_t v9 = *(result - 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v15 = v9 + 40 * a2;
      uint64_t v16 = 40 * a2;
      do
      {
        *(_DWORD *)uint64_t v9 = *a3;
        uint64_t result = std::list<int>::list((void *)(v9 + 8), (uint64_t)(a3 + 2));
        *(_DWORD *)(v9 + 32) = a3[8];
        v9 += 40;
        v16 -= 40;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v11;
    }
    int v21 = result;
    if (v13) {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)result, v13);
    }
    else {
      int v14 = 0;
    }
    uint64_t v17 = v14;
    unint64_t v18 = &v14[40 * v10];
    uint64_t v19 = v18;
    BOOL v20 = &v14[40 * v13];
    std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__construct_at_end(&v17, a2, a3);
    std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__swap_out_circular_buffer(a1, &v17);
    return (void *)std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_1B1FD3E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)1>>::__construct_at_end(void *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a2)
  {
    uint64_t v6 = v4 + 40 * a2;
    uint64_t v7 = (uint64_t)(a3 + 2);
    uint64_t v8 = 40 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = *a3;
      uint64_t result = std::list<int>::list((void *)(v4 + 8), v7);
      *(_DWORD *)(v4 + 32) = a3[8];
      v4 += 40;
      v8 -= 40;
    }
    while (v8);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1B1FD3EB0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::NoWeight()
{
  {
    operator new();
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1B1FD3F54(_Unwind_Exception *a1)
{
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::NoWeight()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1B1FD4054(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

void *std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__append(uint64_t *a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = a1 + 2;
  uint64_t v7 = v8;
  uint64_t v9 = *(result - 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v15 = v9 + 40 * a2;
      uint64_t v16 = 40 * a2;
      do
      {
        *(_DWORD *)uint64_t v9 = *a3;
        uint64_t result = std::list<int>::list((void *)(v9 + 8), (uint64_t)(a3 + 2));
        *(_DWORD *)(v9 + 32) = a3[8];
        v9 += 40;
        v16 -= 40;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v11;
    }
    int v21 = result;
    if (v13) {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)result, v13);
    }
    else {
      int v14 = 0;
    }
    uint64_t v17 = v14;
    unint64_t v18 = &v14[40 * v10];
    uint64_t v19 = v18;
    BOOL v20 = &v14[40 * v13];
    std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__construct_at_end(&v17, a2, a3);
    std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, &v17);
    return (void *)std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_1B1FD41F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__construct_at_end(void *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a2)
  {
    uint64_t v6 = v4 + 40 * a2;
    uint64_t v7 = (uint64_t)(a3 + 2);
    uint64_t v8 = 40 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = *a3;
      uint64_t result = std::list<int>::list((void *)(v4 + 8), v7);
      *(_DWORD *)(v4 + 32) = a3[8];
      v4 += 40;
      v8 -= 40;
    }
    while (v8);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1B1FD4294(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::NoWeight()
{
  {
    operator new();
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1B1FD4338(_Unwind_Exception *a1)
{
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::NoWeight()
{
  {
    operator new();
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1B1FD4438(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1B3EA8670](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[40 * v9];
  *(_DWORD *)unint64_t v11 = *a2;
  std::list<int>::list((void *)v11 + 1, (uint64_t)(a2 + 2));
  *((_DWORD *)v11 + 8) = a2[8];
  v15 += 40;
  std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1FD4584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1B1FD45F4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::TropicalWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = 0;
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v16 = (uint64_t)&v16;
  uint64_t v17 = &v16;
  uint64_t v18 = 0;
  uint64_t v7 = a1 + 2;
  unint64_t v8 = (uint64_t *)(a1 + 4);
  unint64_t v9 = &v16;
LABEL_2:
  uint64_t v10 = *v8;
  int v11 = v4;
  while (1)
  {
    char v12 = v6;
    if (v6)
    {
      if ((_DWORD *)v10 == v7) {
        break;
      }
      int v4 = *(_DWORD *)(v10 + 16);
      goto LABEL_7;
    }
    int v4 = *a1;
    if (!*a1) {
      break;
    }
LABEL_7:
    if (v11)
    {
      unint64_t v13 = operator new(0x18uLL);
      v13[4] = v11;
      *(void *)unint64_t v13 = &v16;
      *((void *)v13 + 1) = v9;
      *unint64_t v9 = (uint64_t)v13;
      ++v5;
      unint64_t v9 = (uint64_t *)v13;
      uint64_t v17 = (uint64_t *)v13;
      uint64_t v18 = v5;
    }
    char v6 = 1;
    int v11 = v4;
    if (v12)
    {
      unint64_t v8 = (uint64_t *)(v10 + 8);
      goto LABEL_2;
    }
  }
  int v14 = a1[8];
  *(_DWORD *)a2 = v11;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)&v16);
  *(_DWORD *)(a2 + 32) = v14;
  return std::__list_imp<char *>::clear(&v16);
}

void sub_1B1FD470C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A42860;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void sub_1B1FD4894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *fst::DivideLeft<int,(fst::StringType)0>@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 && (*a1 == -2 ? (BOOL v6 = *((void *)a1 + 3) == 0) : (BOOL v6 = 0), v6)
    || *a2 && (*a2 == -2 ? (BOOL v7 = *((void *)a2 + 3) == 0) : (BOOL v7 = 0), v7))
  {
    BOOL v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)0>::NoWeight();
    goto LABEL_31;
  }
  uint64_t v8 = fst::StringWeight<int,(fst::StringType)0>::Zero();
  int v9 = *a2;
  if (*a2) {
    uint64_t v10 = *((void *)a2 + 3) + 1;
  }
  else {
    uint64_t v10 = 0;
  }
  if (*(_DWORD *)v8) {
    uint64_t v11 = *(void *)(v8 + 24) + 1;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v10 != v11)
  {
LABEL_35:
    uint64_t result = (void *)fst::StringWeight<int,(fst::StringType)0>::Zero();
    int v22 = *a1;
    if (*a1) {
      uint64_t v23 = *((void *)a1 + 3) + 1;
    }
    else {
      uint64_t v23 = 0;
    }
    if (*(_DWORD *)result) {
      uint64_t v24 = result[3] + 1;
    }
    else {
      uint64_t v24 = 0;
    }
    if (v23 != v24)
    {
      uint64_t v26 = *((void *)a1 + 2);
LABEL_55:
      unint64_t v33 = 0;
      char v34 = 0;
      *(void *)(a3 + 8) = a3 + 8;
      *(void *)(a3 + 16) = a3 + 8;
      *(void *)(a3 + ++*(void *)(result + 24) = 0;
      *(_DWORD *)a3 = 0;
      if (*a1)
      {
        do
        {
          if (!*a2 || *((void *)a2 + 3) + 1 <= v33)
          {
            uint64_t v35 = (int *)(v26 + 16);
            if ((v34 & 1) == 0) {
              uint64_t v35 = a1;
            }
            uint64_t result = fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a3, *v35);
          }
          if (v34) {
            uint64_t v26 = *(void *)(v26 + 8);
          }
          ++v33;
          char v34 = 1;
        }
        while ((int *)v26 != a1 + 2);
      }
      return result;
    }
    char v25 = 0;
    uint64_t v26 = *((void *)a1 + 2);
    uint64_t v27 = result + 2;
    if (v22) {
      BOOL v28 = v22 == *(_DWORD *)result;
    }
    else {
      BOOL v28 = 0;
    }
    int v29 = !v28;
    int v30 = v29 ^ 1;
    uint64_t v31 = *((void *)a1 + 2);
    while (1)
    {
      uint64_t v32 = *v27;
      if ((v25 & 1) == 0 && !v30) {
        break;
      }
      if ((int *)v31 == a1 + 2) {
        goto LABEL_72;
      }
      if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16)) {
        goto LABEL_55;
      }
      uint64_t v31 = *(void *)(v31 + 8);
      uint64_t v27 = (uint64_t *)(v32 + 8);
      char v25 = 1;
    }
    if (v22) {
      goto LABEL_55;
    }
LABEL_72:
    BOOL v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)0>::Zero();
LABEL_31:
    *(_DWORD *)a3 = *v20;
    return std::list<int>::list((void *)(a3 + 8), (uint64_t)(v20 + 2));
  }
  char v12 = 0;
  unint64_t v13 = (uint64_t *)(a2 + 4);
  uint64_t v14 = (uint64_t *)(v8 + 16);
  if (v9) {
    BOOL v15 = v9 == *(_DWORD *)v8;
  }
  else {
    BOOL v15 = 0;
  }
  int v16 = !v15;
  int v17 = v16 ^ 1;
  while (1)
  {
    uint64_t v18 = *v13;
    uint64_t v19 = *v14;
    if ((v12 & 1) == 0 && !v17) {
      break;
    }
    if ((int *)v18 == a2 + 2) {
      goto LABEL_68;
    }
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16)) {
      goto LABEL_35;
    }
    unint64_t v13 = (uint64_t *)(v18 + 8);
    uint64_t v14 = (uint64_t *)(v19 + 8);
    char v12 = 1;
  }
  if (v9) {
    goto LABEL_35;
  }
LABEL_68:
  return (void *)fst::StringWeight<int,(fst::StringType)0>::StringWeight(a3, -2);
}

void sub_1B1FD4B40(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::QuantizeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, float *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v5, &v24);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v24 + 24))(v24))
        {
          BOOL v6 = (float *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 32))(v24);
          fst::QuantizeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()(a2, v6, (uint64_t)&v29);
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v24 + 88))(v24, &v29);
          std::__list_imp<char *>::clear(v31);
          (*(void (**)(uint64_t))(*(void *)v24 + 40))(v24);
        }
        if (v24) {
          (*(void (**)(void))(*(void *)v24 + 8))();
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v21, a1, v5);
        uint64_t v24 = 0;
        int v25 = v21;
        std::list<int>::list(v26, (uint64_t)v22);
        int v27 = v23;
        int v28 = -1;
        fst::QuantizeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()(a2, (float *)&v24, (uint64_t)&v29);
        std::__list_imp<char *>::clear(v26);
        std::__list_imp<char *>::clear(v22);
        if (!v29) {
          goto LABEL_20;
        }
        int v7 = FLAGS_fst_error_fatal;
        if (FLAGS_fst_error_fatal)
        {
          std::string::basic_string[abi:ne180100]<0>(v18, "FATAL");
          uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)v18);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v17, (uint64_t)__p);
        }
        int v9 = (void *)fst::cerr(v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
        if (v7)
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v20);
          if (v19 < 0)
          {
            uint64_t v10 = (void *)v18[0];
LABEL_18:
            operator delete(v10);
          }
        }
        else
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v17);
          if (v16 < 0)
          {
            uint64_t v10 = __p[0];
            goto LABEL_18;
          }
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
LABEL_20:
        int v12 = v30;
        std::list<int>::list(v13, (uint64_t)v31);
        int v14 = v32;
        (*(void (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 184))(a1, v5, &v12);
        std::__list_imp<char *>::clear(v13);
        std::__list_imp<char *>::clear(v31);
        uint64_t v5 = (v5 + 1);
      }
      while ((int)v5 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, v11 & 0x3FFCFFFF0007, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1FD4FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a24);
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__list_imp<char *>::clear(v40);
  _Unwind_Resume(a1);
}

void *fst::QuantizeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()@<X0>(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = a2;
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Quantize(a2 + 2, (uint64_t)&v10, *a1);
  uint64_t v5 = *(void *)v3;
  int v7 = v10;
  std::list<int>::list(v8, (uint64_t)v11);
  int v9 = v12;
  *(float *)&int v3 = v3[12];
  *(void *)a3 = v5;
  *(_DWORD *)(a3 + 8) = v7;
  std::list<int>::list((void *)(a3 + 16), (uint64_t)v8);
  *(_DWORD *)(a3 + 40) = v9;
  *(_DWORD *)(a3 + 48) = v3;
  std::__list_imp<char *>::clear(v8);
  return std::__list_imp<char *>::clear(v11);
}

void sub_1B1FD514C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1B1FD51CC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1B1FD523C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::TropicalWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v8 = *a1;
  std::list<int>::list(v9, (uint64_t)(a1 + 2));
  float v6 = a1[8];
  if ((LODWORD(v6) & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
    float v6 = floorf((float)(v6 / a3) + 0.5) * a3;
  }
  *(float *)a2 = v8;
  std::list<int>::list((void *)(a2 + 8), (uint64_t)v9);
  *(float *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v9);
}

void sub_1B1FD52F8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::EncodeMapper(_DWORD *a1, int a2, int a3)
{
  *a1 = a2;
  a1[1] = a3;
  operator new();
}

void sub_1B1FD536C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A0C40782F6942);
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::EncodeTable(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  int v4 = a2;
  char v5 = a2 & 1;
  BOOL v6 = (a2 & 2) != 0;
  std::unordered_map<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,std::allocator<std::pair<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const* const,int>>>::unordered_map(a1 + 32, 0x400uLL, &v4);
  *(_DWORD *)(a1 + 80) = 1;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  return a1;
}

void sub_1B1FD5400(_Unwind_Exception *exception_object)
{
  int v3 = v2;
  char v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,std::allocator<std::pair<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const* const,int>>>::unordered_map(uint64_t a1, size_t a2, int *a3)
{
  int v4 = *a3;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 36) = v4 & 1;
  *(unsigned char *)(a1 + 37) = (v4 & 2) != 0;
  *(_DWORD *)(a1 + 40) = 1065353216;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1FD5470(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a1 + 280))(a1, 0);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 288))(a1, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if (*(_DWORD *)(a2 + 4) == 1 && (*(unsigned char *)a2 & 2) != 0)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
      int v7 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
      int v62 = *v7;
      std::list<int>::list(v63, (uint64_t)(v7 + 2));
      int v64 = v7[8];
      int v31 = v6;
      (*(void (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 184))(a1, v6, &v62);
      std::__list_imp<char *>::clear(v63);
      char v5 = 0;
    }
    else
    {
      int v31 = -1;
      char v5 = 1;
    }
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v8 = 0;
      while (1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v8, &v53);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v53 + 24))(v53))
        {
          uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 32))(v53);
          fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()((int *)a2, v9, (uint64_t)&v58);
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v53 + 88))(v53, &v58);
          std::__list_imp<char *>::clear(v60);
          (*(void (**)(uint64_t))(*(void *)v53 + 40))(v53);
        }
        if (v53) {
          (*(void (**)(void))(*(void *)v53 + 8))();
        }
        if (v5) {
          break;
        }
        if (v8 != v31)
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v38, a1, v8);
          uint64_t v53 = 0;
          int v54 = v38;
          std::list<int>::list(v55, (uint64_t)v39);
          float v56 = v40;
          int v57 = -1;
          fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()((int *)a2, (uint64_t)&v53, (uint64_t)&v58);
          std::__list_imp<char *>::clear(v55);
          std::__list_imp<char *>::clear(v39);
          if (v58)
          {
            int v13 = v59;
            goto LABEL_49;
          }
          uint64_t v14 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
          int v13 = v59;
          if (v59) {
            uint64_t v15 = v60[2] + 1;
          }
          else {
            uint64_t v15 = 0;
          }
          if (*(_DWORD *)v14) {
            uint64_t v16 = *(void *)(v14 + 24) + 1;
          }
          else {
            uint64_t v16 = 0;
          }
          if (v15 != v16) {
            goto LABEL_49;
          }
          char v17 = 0;
          uint64_t v18 = v60[1];
          char v19 = (uint64_t *)(v14 + 16);
          BOOL v20 = v59 && v59 == *(_DWORD *)v14;
          BOOL v21 = !v20;
          while (1)
          {
            uint64_t v22 = *v19;
            if ((v17 & 1) == 0 && v21) {
              break;
            }
            if ((void *)v18 == v60) {
              goto LABEL_48;
            }
            if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v22 + 16)) {
              goto LABEL_49;
            }
            uint64_t v18 = *(void *)(v18 + 8);
            char v19 = (uint64_t *)(v22 + 8);
            char v17 = 1;
          }
          if (v59) {
            goto LABEL_49;
          }
LABEL_48:
          *(float *)&uint64_t v53 = v61;
          float v65 = 0.0;
          float v65 = *(float *)(v14 + 32);
          if (v61 != v65)
          {
LABEL_49:
            uint64_t v25 = v58;
            int v35 = v13;
            std::list<int>::list(v36, (uint64_t)v60);
            float v37 = v61;
            uint64_t v53 = v25;
            int v54 = v35;
            std::list<int>::list(v55, (uint64_t)v36);
            float v56 = v37;
            int v57 = v31;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 208))(a1, v8, &v53);
            std::__list_imp<char *>::clear(v55);
            std::__list_imp<char *>::clear(v36);
          }
          uint64_t v26 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
          int v32 = *v26;
          std::list<int>::list(v33, (uint64_t)(v26 + 2));
          int v34 = v26[8];
          (*(void (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 184))(a1, v8, &v32);
          uint64_t v24 = v33;
LABEL_51:
          std::__list_imp<char *>::clear(v24);
          std::__list_imp<char *>::clear(v60);
        }
        uint64_t v8 = (v8 + 1);
        if ((int)v8 >= (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1)) {
          goto LABEL_53;
        }
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v50, a1, v8);
      uint64_t v53 = 0;
      int v54 = v50;
      std::list<int>::list(v55, (uint64_t)v51);
      float v56 = v52;
      int v57 = -1;
      fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()((int *)a2, (uint64_t)&v53, (uint64_t)&v58);
      std::__list_imp<char *>::clear(v55);
      std::__list_imp<char *>::clear(v51);
      if (!v58)
      {
LABEL_46:
        int v41 = v59;
        std::list<int>::list(v42, (uint64_t)v60);
        float v43 = v61;
        (*(void (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 184))(a1, v8, &v41);
        uint64_t v24 = v42;
        goto LABEL_51;
      }
      int v10 = FLAGS_fst_error_fatal;
      if (FLAGS_fst_error_fatal)
      {
        std::string::basic_string[abi:ne180100]<0>(v47, "FATAL");
        uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)v47);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v46, (uint64_t)__p);
      }
      int v12 = (void *)fst::cerr(v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
      if (v10)
      {
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
        if (v48 < 0)
        {
          int v23 = (void *)v47[0];
LABEL_44:
          operator delete(v23);
        }
      }
      else
      {
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v46);
        if (v45 < 0)
        {
          int v23 = __p[0];
          goto LABEL_44;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
      goto LABEL_46;
    }
LABEL_53:
    uint64_t v27 = 0x3FFF00000007;
    if ((*(_DWORD *)a2 & 1) == 0) {
      uint64_t v27 = 0x3FFFFFFF0007;
    }
    if ((*(_DWORD *)a2 & 2) != 0)
    {
      uint64_t v28 = 0x1D7C48100007;
      if (*(_DWORD *)(a2 + 4) == 1) {
        uint64_t v28 = 0x2EBC84200007;
      }
      v27 &= v28;
    }
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v29 = v30 | 4;
    }
    else {
      uint64_t v29 = v30;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, v27 & v29, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1FD5C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__list_imp<char *>::clear(v58);
  _Unwind_Resume(a1);
}

void *fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *(_DWORD *)(a2 + 48);
  if (a1[1] != 1)
  {
    if (v6 != -1 && *(_DWORD *)a2)
    {
      int v11 = *a1;
      if ((*a1 & 1) != 0 && *(_DWORD *)a2 != *(_DWORD *)(a2 + 4))
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(v65, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(v65, "ERROR");
        }
        int v12 = fst::LogMessage::LogMessage((fst *)&v67, (uint64_t)v65);
        int v13 = (void *)fst::cerr(v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"EncodeMapper: Label-encoded arc has different input and output labels", 69);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v67);
        if (v66 < 0) {
          operator delete(v65[0]);
        }
        *((unsigned char *)a1 + 16) = 1;
        int v11 = *a1;
      }
      if ((v11 & 2) != 0)
      {
        uint64_t v30 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
        int v31 = *(_DWORD *)(a2 + 8);
        uint64_t v32 = v31 ? *(void *)(a2 + 32) + 1 : 0;
        uint64_t v33 = *(_DWORD *)v30 ? *(void *)(v30 + 24) + 1 : 0;
        if (v32 != v33) {
          goto LABEL_66;
        }
        char v34 = 0;
        int v35 = (uint64_t *)(a2 + 24);
        uint64_t v36 = (uint64_t *)(v30 + 16);
        BOOL v37 = v31 && v31 == *(_DWORD *)v30;
        BOOL v38 = !v37;
        int v39 = !v38;
        while (1)
        {
          uint64_t v40 = *v35;
          uint64_t v41 = *v36;
          if ((v34 & 1) == 0 && !v39) {
            break;
          }
          if (v40 == a2 + 16) {
            goto LABEL_65;
          }
          if (*(_DWORD *)(v40 + 16) != *(_DWORD *)(v41 + 16)) {
            goto LABEL_66;
          }
          int v35 = (uint64_t *)(v40 + 8);
          uint64_t v36 = (uint64_t *)(v41 + 8);
          char v34 = 1;
        }
        if (v31) {
          goto LABEL_66;
        }
LABEL_65:
        LODWORD(__p[0]) = 0;
        LODWORD(__p[0]) = *(_DWORD *)(a2 + 40);
        LODWORD(v59[0]) = 0;
        LODWORD(v59[0]) = *(_DWORD *)(v30 + 32);
        if (*(float *)__p != *(float *)v59)
        {
LABEL_66:
          if (FLAGS_fst_error_fatal) {
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          }
          else {
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          }
          uint64_t v42 = fst::LogMessage::LogMessage((fst *)&v64, (uint64_t)__p);
          float v43 = (void *)fst::cerr(v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"EncodeMapper: Weight-encoded arc has non-trivial weight", 55);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v64);
          if (v63 < 0) {
            operator delete(__p[0]);
          }
          *((unsigned char *)a1 + 16) = 1;
        }
      }
      int v44 = (_DWORD *)fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Decode(*((void *)a1 + 1), *(_DWORD *)a2);
      if (v44)
      {
        int v45 = *v44;
        if (*a1) {
          char v46 = v44;
        }
        else {
          char v46 = (_DWORD *)a2;
        }
        int v47 = v46[1];
        if ((*a1 & 2) != 0) {
          char v48 = v44;
        }
        else {
          char v48 = (_DWORD *)a2;
        }
        if ((*a1 & 2) != 0) {
          char v49 = v44 + 2;
        }
        else {
          char v49 = (_DWORD *)(a2 + 8);
        }
        int v53 = v48[2];
        uint64_t v15 = v54;
        std::list<int>::list(v54, (uint64_t)(v49 + 2));
        int v55 = v49[8];
        int v16 = *(_DWORD *)(a2 + 48);
        *(_DWORD *)a3 = v45;
        *(_DWORD *)(a3 + 4) = v47;
        *(_DWORD *)(a3 + 8) = v53;
        std::list<int>::list((void *)(a3 + 16), (uint64_t)v54);
        int v17 = v55;
      }
      else
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(v59, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(v59, "ERROR");
        }
        uint64_t v50 = fst::LogMessage::LogMessage((fst *)&v61, (uint64_t)v59);
        uint64_t v51 = (void *)fst::cerr(v50);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"EncodeMapper: decode failed", 27);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v61);
        if (v60 < 0) {
          operator delete(v59[0]);
        }
        *((unsigned char *)a1 + 16) = 1;
        float v52 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::NoWeight();
        int v56 = *v52;
        uint64_t v15 = v57;
        std::list<int>::list(v57, (uint64_t)(v52 + 2));
        int v58 = v52[8];
        int v16 = *(_DWORD *)(a2 + 48);
        *(void *)a3 = -1;
        *(_DWORD *)(a3 + 8) = v56;
        std::list<int>::list((void *)(a3 + 16), (uint64_t)v57);
        int v17 = v58;
      }
      goto LABEL_89;
    }
    *(void *)a3 = *(void *)a2;
    int v14 = *(_DWORD *)(a2 + 8);
    goto LABEL_20;
  }
  if (v6 == -1)
  {
    if ((*(unsigned char *)a1 & 2) != 0)
    {
      uint64_t v19 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
      int v14 = *(_DWORD *)(a2 + 8);
      if (v14) {
        uint64_t v20 = *(void *)(a2 + 32) + 1;
      }
      else {
        uint64_t v20 = 0;
      }
      if (*(_DWORD *)v19) {
        uint64_t v21 = *(void *)(v19 + 24) + 1;
      }
      else {
        uint64_t v21 = 0;
      }
      if (v20 != v21) {
        goto LABEL_3;
      }
      char v22 = 0;
      int v23 = (uint64_t *)(a2 + 24);
      uint64_t v24 = (uint64_t *)(v19 + 16);
      BOOL v25 = v14 && v14 == *(_DWORD *)v19;
      BOOL v26 = !v25;
      int v27 = !v26;
      while (1)
      {
        uint64_t v28 = *v23;
        uint64_t v29 = *v24;
        if ((v22 & 1) == 0 && !v27) {
          break;
        }
        if (v28 == a2 + 16) {
          goto LABEL_91;
        }
        if (*(_DWORD *)(v28 + 16) != *(_DWORD *)(v29 + 16)) {
          goto LABEL_3;
        }
        int v23 = (uint64_t *)(v28 + 8);
        uint64_t v24 = (uint64_t *)(v29 + 8);
        char v22 = 1;
      }
      if (v14) {
        goto LABEL_3;
      }
LABEL_91:
      LODWORD(v65[0]) = 0;
      LODWORD(v65[0]) = *(_DWORD *)(a2 + 40);
      LODWORD(__p[0]) = 0;
      LODWORD(__p[0]) = *(_DWORD *)(v19 + 32);
      if (*(float *)v65 != *(float *)__p) {
        goto LABEL_3;
      }
    }
    else
    {
      int v14 = *(_DWORD *)(a2 + 8);
    }
    *(void *)a3 = *(void *)a2;
LABEL_20:
    *(_DWORD *)(a3 + 8) = v14;
    uint64_t result = std::list<int>::list((void *)(a3 + 16), a2 + 16);
    *(_DWORD *)(a3 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a3 + 48) = *(_DWORD *)(a2 + 48);
    return result;
  }
LABEL_3:
  int v7 = fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Encode(*((void *)a1 + 1), (int *)a2);
  int v8 = v7;
  if (*a1) {
    int v9 = v7;
  }
  else {
    int v9 = *(_DWORD *)(a2 + 4);
  }
  if ((*a1 & 2) != 0) {
    int v10 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
  }
  else {
    int v10 = (int *)(a2 + 8);
  }
  int v68 = *v10;
  uint64_t v15 = v69;
  std::list<int>::list(v69, (uint64_t)(v10 + 2));
  int v70 = v10[8];
  int v16 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)a3 = v8;
  *(_DWORD *)(a3 + 4) = v9;
  *(_DWORD *)(a3 + 8) = v68;
  std::list<int>::list((void *)(a3 + 16), (uint64_t)v69);
  int v17 = v70;
LABEL_89:
  *(_DWORD *)(a3 + 40) = v17;
  *(_DWORD *)(a3 + 48) = v16;
  return std::__list_imp<char *>::clear(v15);
}

void sub_1B1FD62EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Encode(uint64_t a1, int *a2)
{
  int v3 = *a2;
  int v4 = ((int)(*(_DWORD *)a1 << 31) >> 31) & a2[1];
  if ((*(_DWORD *)a1 & 2) != 0) {
    char v5 = a2 + 2;
  }
  else {
    char v5 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
  }
  int v9 = *v5;
  std::list<int>::list(v10, (uint64_t)(v5 + 2));
  int v11 = v5[8];
  v12[0] = v3;
  v12[1] = v4;
  v12[2] = v9;
  std::list<int>::list(v13, (uint64_t)v10);
  int v14 = v11;
  std::__list_imp<char *>::clear(v10);
  uint64_t v15 = v12;
  int v6 = std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>>>::find<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*>((void *)(a1 + 32), &v15);
  if (!v6) {
    operator new();
  }
  uint64_t v7 = *((unsigned int *)v6 + 6);
  std::__list_imp<char *>::clear(v13);
  return v7;
}

void sub_1B1FD65AC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Decode(uint64_t a1, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (a2 <= (unint64_t)((*(void *)(a1 + 16) - v2) >> 3)) {
      return *(void *)(v2 + 8 * (a2 - 1));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  int v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
  int v4 = (void *)fst::cerr(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"EncodeTable::Decode: unknown decode key: ", 41);
  std::ostream::operator<<();
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1FD6694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>>>::find<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*>(void *a1, int **a2)
{
  unint64_t v4 = fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey::operator()((uint64_t)(a1 + 4), *a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  int v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 5);
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        if (fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual::operator()(v12, v11[2], (uint64_t)*a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      int v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey::operator()(uint64_t a1, int *a2)
{
  uint64_t v2 = *a2;
  if (!*(unsigned char *)(a1 + 4))
  {
    if (!*(unsigned char *)(a1 + 5)) {
      return *a2;
    }
    uint64_t v3 = 7867 * fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(a2 + 2);
    goto LABEL_6;
  }
  uint64_t v3 = v2 + 7853 * a2[1];
  if (*(unsigned char *)(a1 + 5))
  {
    uint64_t v2 = 7867 * fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(a2 + 2);
LABEL_6:
    v3 += v2;
  }
  return v3;
}

BOOL fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 != *(_DWORD *)a3 || *(_DWORD *)(a2 + 4) != *(_DWORD *)(a3 + 4)) {
    return 0;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = v3 ? *(void *)(a2 + 32) + 1 : 0;
  int v5 = *(_DWORD *)(a3 + 8);
  uint64_t v6 = v5 ? *(void *)(a3 + 32) + 1 : 0;
  if (v4 != v6) {
    return 0;
  }
  char v7 = 0;
  unint64_t v8 = (uint64_t *)(a2 + 24);
  unint64_t v9 = (uint64_t *)(a3 + 24);
  if (v3) {
    BOOL v10 = v3 == v5;
  }
  else {
    BOOL v10 = 0;
  }
  int v11 = !v10;
  int v12 = v11 ^ 1;
  while (1)
  {
    uint64_t v13 = *v8;
    uint64_t v14 = *v9;
    if ((v7 & 1) == 0 && !v12) {
      break;
    }
    if (v13 == a2 + 16) {
      return *(float *)(a2 + 40) == *(float *)(a3 + 40);
    }
    if (*(_DWORD *)(v13 + 16) != *(_DWORD *)(v14 + 16)) {
      return 0;
    }
    unint64_t v8 = (uint64_t *)(v13 + 8);
    unint64_t v9 = (uint64_t *)(v14 + 8);
    char v7 = 1;
  }
  if (v3) {
    return 0;
  }
  return *(float *)(a2 + 40) == *(float *)(a3 + 40);
}

void *std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual,fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,int>>>::__emplace_unique_key_args<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const*,std::piecewise_construct_t const&,std::tuple<fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Tuple const* const&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, void **a4)
{
  unint64_t v8 = fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleKey::operator()(a1 + 32, *a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::TupleEqual::operator()(a1 + 40, v14[2], (uint64_t)*a2))
            {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v14 = operator new(0x20uLL);
  *uint64_t v14 = 0;
  v14[1] = v9;
  void v14[2] = **a4;
  *((_DWORD *)v14 + 6) = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 40);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  int v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *uint64_t v14 = *v23;
LABEL_38:
    *int v23 = v14;
    goto LABEL_39;
  }
  *uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    unint64_t v24 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    int v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1B1FD6B58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::Connect<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1)
{
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  uint64_t v2 = 0;
  v1[0] = 0;
  v1[1] = v4;
  v1[2] = v3;
  v1[3] = &v2;
  fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, (uint64_t)v1);
}

void sub_1B1FD6D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *(void **)(v11 - 112);
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(v11 - 88);
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void fst::ArcSort<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1)
{
  uint64_t v3 = a1;
  unint64_t v4 = &v6;
  memset(v5, 0, sizeof(v5));
  v1[0] = a1;
  v1[1] = (uint64_t)&v6;
  memset(v2, 0, sizeof(v2));
  fst::StateMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcSortMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(a1, v1);
  char v7 = (void **)v2;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&v7);
  char v7 = (void **)v5;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1B1FD6E2C(_Unwind_Exception *a1)
{
  uint64_t v4 = v1;
  *(void *)(v3 - 40) = v2;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  *(void *)(v3 - 40) = v4;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  _Unwind_Resume(a1);
}

void fst::MergeStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(void *a1, uint64_t a2)
{
  std::vector<int>::vector(&v22, (int)((uint64_t)(a1[5] - a1[4]) >> 3));
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v6 = v4 - v5;
  if (((unint64_t)(v4 - v5) >> 3))
  {
    uint64_t v7 = 0;
    unint64_t v8 = (int)(v6 >> 3);
    std::vector<int>::pointer begin = v22.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      *begin++ = **(_DWORD **)(v5 + (v7 >> 29));
      v7 += 0x100000000;
      --v8;
    }
    while (v8);
  }
  if ((v6 & 0x7FFFFFFF8) != 0)
  {
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(unsigned int **)(v5 + 8 * (int)v10);
      if (v11)
      {
        do
        {
          int v12 = *v11;
          (*(void (**)(uint64_t, void, uint64_t *))(*(void *)a2 + 296))(a2, *v11, &v21);
          while (!(*(unsigned int (**)(uint64_t))(*(void *)v21 + 24))(v21))
          {
            uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 32))(v21);
            uint64_t v16 = *(void *)v13;
            int v17 = *(_DWORD *)(v13 + 8);
            std::list<int>::list(v18, v13 + 16);
            uint64_t v14 = *(int *)(v13 + 48);
            int v19 = *(_DWORD *)(v13 + 40);
            int v20 = v14;
            int v20 = v22.__begin_[*(int *)(a1[10] + 4 * v14)];
            if (v12 == v22.__begin_[v10]) {
              (*(void (**)(uint64_t, uint64_t *))(*(void *)v21 + 88))(v21, &v16);
            }
            else {
              (*(void (**)(uint64_t))(*(void *)a2 + 208))(a2);
            }
            std::__list_imp<char *>::clear(v18);
            (*(void (**)(uint64_t))(*(void *)v21 + 40))(v21);
          }
          if (v21) {
            (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          }
          uint64_t v11 = (unsigned int *)*((void *)v11 + 1);
        }
        while (v11);
        uint64_t v5 = a1[4];
        uint64_t v4 = a1[5];
      }
      ++v10;
    }
    while (v10 < (int)((unint64_t)(v4 - v5) >> 3));
  }
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, v22.__begin_[*(int *)(a1[10] + 4 * v15)]);
  fst::Connect<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a2);
}

void sub_1B1FD7148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcSortMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v7);
        for (unint64_t i = a2[5]; ; a2[5] = i)
        {
          uint64_t v9 = a2[2];
          if (i >= 0x6DB6DB6DB6DB6DB7 * ((a2[3] - v9) >> 3)) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 208))(a1, v7, v9 + 56 * i);
          unint64_t i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 32))(&v10);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v7, &v10);
        std::__list_imp<char *>::clear(v11);
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1FD7478(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::ArcSortMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetState(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 2;
  uint64_t v5 = a1[2];
  a1[5] = 0;
  uint64_t v6 = a1[3];
  if (v6 != v5)
  {
    do
    {
      uint64_t v7 = v6 - 56;
      std::__list_imp<char *>::clear((void *)(v6 - 40));
      uint64_t v6 = v7;
    }
    while (v7 != v5);
  }
  a1[3] = v5;
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a2);
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::reserve(v4, v8);
  uint64_t v9 = *a1;
  unint64_t v20 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v9 + 136))(v9, a2, v18);
  while (1)
  {
    if (!v18[0])
    {
      if (v20 >= v18[2]) {
        goto LABEL_18;
      }
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(void))(*(void *)v18[0] + 24))(v18[0])) {
      break;
    }
    if (v18[0])
    {
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v18[0] + 32))();
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v10 = v18[1] + 56 * v20;
LABEL_10:
    unint64_t v11 = a1[3];
    if (v11 >= a1[4])
    {
      uint64_t v12 = std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>(v4, v10);
    }
    else
    {
      std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>((uint64_t)v4, v10);
      uint64_t v12 = v11 + 56;
    }
    a1[3] = v12;
    if (v18[0]) {
      (*(void (**)(void))(*(void *)v18[0] + 40))(v18[0]);
    }
    else {
      ++v20;
    }
  }
  if (v18[0])
  {
    (*(void (**)(void))(*(void *)v18[0] + 8))();
    goto LABEL_20;
  }
LABEL_18:
  if (v19) {
    --*v19;
  }
LABEL_20:
  uint64_t v13 = (void *)a1[2];
  uint64_t v14 = (uint64_t *)a1[3];
  unint64_t v15 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (v14 - v13));
  if (v14 == v13) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  return std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,false>(v13, v14, (uint64_t)v18, v16, 1);
}

void sub_1B1FD76D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::Reverse<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void *std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,false>(void *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v27 = *(a2 - 7);
          BOOL v26 = a2 - 7;
          uint64_t v46 = v27;
          int v47 = *((_DWORD *)v26 + 2);
          std::list<int>::list(v48, (uint64_t)(v26 + 2));
          int v49 = *((_DWORD *)v26 + 10);
          int v50 = *((_DWORD *)v26 + 12);
          uint64_t v41 = *(void *)v11;
          int v42 = *(_DWORD *)(v11 + 8);
          uint64_t v28 = std::list<int>::list(v43, v11 + 16);
          int v29 = *(_DWORD *)(v11 + 48);
          int v44 = *(_DWORD *)(v11 + 40);
          int v45 = v29;
          int v30 = v46;
          int v31 = v41;
          std::__list_imp<char *>::clear(v28);
          uint64_t result = std::__list_imp<char *>::clear(v48);
          if (v30 < v31) {
            uint64_t result = std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v11, v26);
          }
          break;
        case 3uLL:
          uint64_t result = (void *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v11, v11 + 56, (uint64_t)(a2 - 7));
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v11, v11 + 56, v11 + 112, (uint64_t)(a2 - 7));
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v11, v11 + 56, v11 + 112, v11 + 168, (uint64_t)(a2 - 7));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 1343)
    {
      if (a5) {
        return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((void *)v11, a2);
      }
      else {
        return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((void *)v11, a2);
      }
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = (uint64_t *)(v11 + 56 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x1C01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v10, v10 + 56 * (v15 >> 1), (uint64_t)(a2 - 7));
      uint64_t v18 = 56 * v16;
      uint64_t v19 = 56 * v16 + v10 - 56;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v10 + 56, v19, (uint64_t)(a2 - 14));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v10 + 112, v10 + 56 + v18, (uint64_t)(a2 - 21));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v19, (uint64_t)v17, v10 + 56 + v18);
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v10, v17);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v10 + 56 * (v15 >> 1), v10, (uint64_t)(a2 - 7));
      if (a5) {
        goto LABEL_14;
      }
    }
    uint64_t v36 = *(void *)(v10 - 56);
    int v37 = *(_DWORD *)(v10 - 48);
    std::list<int>::list(v38, v10 - 40);
    int v39 = *(_DWORD *)(v10 - 16);
    int v40 = *(_DWORD *)(v10 - 8);
    uint64_t v32 = *(void *)v10;
    unint64_t v20 = std::list<int>::list(v33, v10 + 16);
    int v21 = *(_DWORD *)(v10 + 48);
    int v34 = *(_DWORD *)(v10 + 40);
    int v35 = v21;
    int v22 = v36;
    std::__list_imp<char *>::clear(v20);
    std::__list_imp<char *>::clear(v38);
    if (v22 >= (int)v32)
    {
      uint64_t result = (void *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &>((uint64_t *)v10, a2);
      uint64_t v11 = (uint64_t)result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &>((uint64_t *)v10, (unint64_t)a2);
    if ((v24 & 1) == 0) {
      goto LABEL_17;
    }
    char v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v10, v23);
    uint64_t v11 = v23 + 56;
    uint64_t result = (void *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v23 + 56, (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (uint64_t *)v23;
      if (v25) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if ((v25 & 1) == 0)
    {
LABEL_17:
      uint64_t result = (void *)std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,false>(v10, v23, a3, -v13, a5 & 1);
      uint64_t v11 = v23 + 56;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if ((uint64_t *)v11 != a2) {
    return (void *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((uint64_t *)v11, (uint64_t)a2, (uint64_t)a2, a3);
  }
  return result;
}

void sub_1B1FD7AC4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = result + 7;
    if (result + 7 != a2)
    {
      uint64_t v4 = 0;
      unint64_t v20 = result + 2;
      char v5 = result;
      do
      {
        uint64_t v6 = v4;
        uint64_t v7 = v3;
        uint64_t v41 = v5[7];
        int v42 = *((_DWORD *)v5 + 16);
        std::list<int>::list(v43, (uint64_t)(v5 + 9));
        int v8 = *((_DWORD *)v5 + 26);
        int v44 = *((_DWORD *)v5 + 24);
        int v45 = v8;
        uint64_t v36 = *v5;
        int v37 = *((_DWORD *)v5 + 2);
        uint64_t v9 = std::list<int>::list(v38, (uint64_t)(v5 + 2));
        int v10 = *((_DWORD *)v5 + 12);
        int v39 = *((_DWORD *)v5 + 10);
        int v40 = v10;
        int v11 = v41;
        int v12 = v36;
        std::__list_imp<char *>::clear(v9);
        uint64_t result = std::__list_imp<char *>::clear(v43);
        if (v11 < v12)
        {
          uint64_t v31 = *v7;
          int v32 = *((_DWORD *)v5 + 16);
          std::list<int>::list(v33, (uint64_t)(v5 + 9));
          int v13 = *((_DWORD *)v5 + 26);
          int v34 = *((_DWORD *)v5 + 24);
          int v35 = v13;
          uint64_t v14 = v6;
          while (1)
          {
            unint64_t v15 = (char *)v2 + v14;
            *((void *)v15 + 7) = *(void *)((char *)v2 + v14);
            *((_DWORD *)v15 + 16) = *(_DWORD *)((char *)v2 + v14 + 8);
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((void *)((char *)v2 + v14 + 72), *(void *)((char *)v2 + v14 + 24), (uint64_t)v20 + v14);
            *((_DWORD *)v15 + ++*(void *)(result + 24) = *((_DWORD *)v15 + 10);
            *((_DWORD *)v15 + 26) = *((_DWORD *)v15 + 12);
            if (!v14) {
              break;
            }
            uint64_t v26 = v31;
            int v27 = v32;
            std::list<int>::list(v28, (uint64_t)v33);
            int v29 = v34;
            int v30 = v35;
            uint64_t v22 = *(void *)((char *)v2 + v14 - 56);
            std::list<int>::list(v23, (uint64_t)v2 + v14 - 40);
            int v16 = *(_DWORD *)((char *)v2 + v14 - 8);
            int v24 = *(_DWORD *)((char *)v2 + v14 - 16);
            int v25 = v16;
            int v17 = v26;
            std::__list_imp<char *>::clear(v23);
            std::__list_imp<char *>::clear(v28);
            v14 -= 56;
            if (v17 >= (int)v22)
            {
              uint64_t v18 = (uint64_t)v2 + v14 + 56;
              goto LABEL_10;
            }
          }
          uint64_t v18 = (uint64_t)v2;
LABEL_10:
          *(void *)uint64_t v18 = v31;
          *(_DWORD *)(v18 + 8) = v32;
          if ((uint64_t *)v18 != &v31) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v18 + 16), v33[1], (uint64_t)v33);
          }
          int v19 = v35;
          *(_DWORD *)(v18 + 40) = v34;
          *(_DWORD *)(v18 + 48) = v19;
          uint64_t result = std::__list_imp<char *>::clear(v33);
        }
        uint64_t v3 = v7 + 7;
        uint64_t v4 = v6 + 56;
        char v5 = v7;
      }
      while (v7 + 7 != a2);
    }
  }
  return result;
}

void sub_1B1FD7D7C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = result + 7;
    if (result + 7 != a2)
    {
      uint64_t v18 = 0;
      uint64_t v4 = result;
      do
      {
        char v5 = v3;
        uint64_t v38 = v4[7];
        int v39 = *((_DWORD *)v4 + 16);
        std::list<int>::list(v40, (uint64_t)(v4 + 9));
        int v6 = *((_DWORD *)v4 + 26);
        int v41 = *((_DWORD *)v4 + 24);
        int v42 = v6;
        uint64_t v33 = *v4;
        int v34 = *((_DWORD *)v4 + 2);
        uint64_t v7 = std::list<int>::list(v35, (uint64_t)(v4 + 2));
        int v8 = *((_DWORD *)v4 + 12);
        int v36 = *((_DWORD *)v4 + 10);
        int v37 = v8;
        int v17 = v38;
        int v9 = v33;
        std::__list_imp<char *>::clear(v7);
        uint64_t result = std::__list_imp<char *>::clear(v40);
        if (v17 < v9)
        {
          uint64_t v28 = *v5;
          int v29 = *((_DWORD *)v4 + 16);
          std::list<int>::list(v30, (uint64_t)(v4 + 9));
          int v10 = *((_DWORD *)v4 + 26);
          int v31 = *((_DWORD *)v4 + 24);
          int v32 = v10;
          uint64_t v11 = v18;
          do
          {
            int v12 = (char *)v2 + v11;
            *((void *)v12 + 7) = *(void *)((char *)v2 + v11);
            *((_DWORD *)v12 + 16) = *(_DWORD *)((char *)v2 + v11 + 8);
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((void *)((char *)v2 + v11 + 72), *(void *)((char *)v2 + v11 + 24), (uint64_t)v2 + v11 + 16);
            *((_DWORD *)v12 + ++*(void *)(result + 24) = *((_DWORD *)v12 + 10);
            *((_DWORD *)v12 + 26) = *((_DWORD *)v12 + 12);
            uint64_t v23 = v28;
            int v24 = v29;
            std::list<int>::list(v25, (uint64_t)v30);
            int v26 = v31;
            int v27 = v32;
            uint64_t v19 = *(void *)((char *)v2 + v11 - 56);
            std::list<int>::list(v20, (uint64_t)v2 + v11 - 40);
            int v13 = *(_DWORD *)((char *)v2 + v11 - 8);
            int v21 = *(_DWORD *)((char *)v2 + v11 - 16);
            int v22 = v13;
            LODWORD(v12) = v23;
            std::__list_imp<char *>::clear(v20);
            std::__list_imp<char *>::clear(v25);
            v11 -= 56;
          }
          while ((int)v12 < (int)v19);
          uint64_t v14 = (void *)((char *)v2 + v11);
          *(void *)((char *)v2 + v11 + 56) = v28;
          *(_DWORD *)((char *)v2 + v11 + 64) = v29;
          if ((void *)((char *)v2 + v11 + 56) != &v28) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v14 + 9, v30[1], (uint64_t)v30);
          }
          int v15 = v32;
          *((_DWORD *)v14 + ++*(void *)(result + 24) = v31;
          *((_DWORD *)v14 + 26) = v15;
          uint64_t result = std::__list_imp<char *>::clear(v30);
        }
        uint64_t v3 = v5 + 7;
        v18 += 56;
        uint64_t v4 = v5;
      }
      while (v5 + 7 != a2);
    }
  }
  return result;
}

void sub_1B1FD8024(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v74 = *(void *)a2;
  int v75 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = a2 + 16;
  std::list<int>::list(v76, a2 + 16);
  int v7 = *(_DWORD *)(a2 + 48);
  int v77 = *(_DWORD *)(a2 + 40);
  int v78 = v7;
  uint64_t v69 = *(void *)a1;
  int v70 = *(_DWORD *)(a1 + 8);
  int v8 = std::list<int>::list(v71, a1 + 16);
  int v9 = *(_DWORD *)(a1 + 48);
  int v72 = *(_DWORD *)(a1 + 40);
  int v73 = v9;
  int v10 = v74;
  std::__list_imp<char *>::clear(v8);
  std::__list_imp<char *>::clear(v76);
  if (v10 < (int)v69)
  {
    uint64_t v44 = *(void *)a3;
    int v45 = *(_DWORD *)(a3 + 8);
    std::list<int>::list(v46, a3 + 16);
    int v11 = *(_DWORD *)(a3 + 48);
    int v47 = *(_DWORD *)(a3 + 40);
    int v48 = v11;
    uint64_t v39 = *(void *)a2;
    int v40 = *(_DWORD *)(a2 + 8);
    int v12 = std::list<int>::list(v41, v6);
    int v13 = *(_DWORD *)(a2 + 48);
    int v42 = *(_DWORD *)(a2 + 40);
    int v43 = v13;
    int v14 = v44;
    std::__list_imp<char *>::clear(v12);
    std::__list_imp<char *>::clear(v46);
    if (v14 < (int)v39)
    {
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a3);
      return 1;
    }
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a2);
    uint64_t v34 = *(void *)a3;
    int v35 = *(_DWORD *)(a3 + 8);
    std::list<int>::list(v36, a3 + 16);
    int v25 = *(_DWORD *)(a3 + 48);
    int v37 = *(_DWORD *)(a3 + 40);
    int v38 = v25;
    uint64_t v30 = *(void *)a2;
    int v26 = std::list<int>::list(v31, v6);
    int v27 = *(_DWORD *)(a2 + 48);
    int v32 = *(_DWORD *)(a2 + 40);
    int v33 = v27;
    int v28 = v34;
    std::__list_imp<char *>::clear(v26);
    std::__list_imp<char *>::clear(v36);
    if (v28 >= (int)v30) {
      return 1;
    }
    uint64_t v23 = (uint64_t *)a2;
    int v24 = (uint64_t *)a3;
LABEL_9:
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(v23, v24);
    return 2;
  }
  uint64_t v64 = *(void *)a3;
  int v65 = *(_DWORD *)(a3 + 8);
  std::list<int>::list(v66, a3 + 16);
  int v15 = *(_DWORD *)(a3 + 48);
  int v67 = *(_DWORD *)(a3 + 40);
  int v68 = v15;
  uint64_t v59 = *(void *)a2;
  int v60 = *(_DWORD *)(a2 + 8);
  int v16 = std::list<int>::list(v61, v6);
  int v17 = *(_DWORD *)(a2 + 48);
  int v62 = *(_DWORD *)(a2 + 40);
  int v63 = v17;
  int v18 = v64;
  std::__list_imp<char *>::clear(v16);
  std::__list_imp<char *>::clear(v66);
  if (v18 < (int)v59)
  {
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a2, (uint64_t *)a3);
    uint64_t v54 = *(void *)a2;
    int v55 = *(_DWORD *)(a2 + 8);
    std::list<int>::list(v56, v6);
    int v19 = *(_DWORD *)(a2 + 48);
    int v57 = *(_DWORD *)(a2 + 40);
    int v58 = v19;
    uint64_t v49 = *(void *)a1;
    int v50 = *(_DWORD *)(a1 + 8);
    unint64_t v20 = std::list<int>::list(v51, a1 + 16);
    int v21 = *(_DWORD *)(a1 + 48);
    int v52 = *(_DWORD *)(a1 + 40);
    int v53 = v21;
    int v22 = v54;
    std::__list_imp<char *>::clear(v20);
    std::__list_imp<char *>::clear(v56);
    if (v22 >= (int)v49) {
      return 1;
    }
    uint64_t v23 = (uint64_t *)a1;
    int v24 = (uint64_t *)a2;
    goto LABEL_9;
  }
  return 0;
}

void sub_1B1FD8380(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  uint64_t v84 = *a1;
  int v85 = *((_DWORD *)a1 + 2);
  uint64_t v23 = a1 + 2;
  std::list<int>::list(v86, (uint64_t)(a1 + 2));
  int v4 = *((_DWORD *)v3 + 12);
  int v87 = *((_DWORD *)v3 + 10);
  int v88 = v4;
  uint64_t v79 = v84;
  int v80 = v85;
  std::list<int>::list(v81, (uint64_t)v86);
  int v82 = v87;
  int v83 = v88;
  uint64_t v74 = *(a2 - 7);
  int v75 = *((_DWORD *)a2 - 12);
  char v5 = std::list<int>::list(v76, (uint64_t)(a2 - 5));
  int v6 = *((_DWORD *)a2 - 2);
  int v77 = *((_DWORD *)a2 - 4);
  int v78 = v6;
  int v7 = v79;
  std::__list_imp<char *>::clear(v5);
  std::__list_imp<char *>::clear(v81);
  int v24 = v3;
  if (v7 >= (int)v74)
  {
    unint64_t v11 = (unint64_t)(v3 + 7);
    do
    {
      unint64_t v8 = v11;
      if (v11 >= (unint64_t)a2) {
        break;
      }
      uint64_t v59 = v84;
      int v60 = v85;
      std::list<int>::list(v61, (uint64_t)v86);
      int v62 = v87;
      int v63 = v88;
      uint64_t v54 = *(void *)v8;
      int v55 = *(_DWORD *)(v8 + 8);
      std::list<int>::list(v56, v8 + 16);
      int v12 = *(_DWORD *)(v8 + 48);
      int v57 = *(_DWORD *)(v8 + 40);
      int v58 = v12;
      int v13 = v59;
      std::__list_imp<char *>::clear(v56);
      std::__list_imp<char *>::clear(v61);
      unint64_t v11 = v8 + 56;
    }
    while (v13 >= (int)v54);
  }
  else
  {
    do
    {
      uint64_t v69 = v84;
      int v70 = v85;
      std::list<int>::list(v71, (uint64_t)v86);
      int v72 = v87;
      int v73 = v88;
      uint64_t v64 = v3[7];
      int v65 = *((_DWORD *)v3 + 16);
      std::list<int>::list(v66, (uint64_t)(v3 + 9));
      unint64_t v8 = (unint64_t)(v3 + 7);
      int v9 = *((_DWORD *)v3 + 26);
      int v67 = *((_DWORD *)v3 + 24);
      int v68 = v9;
      int v10 = v69;
      std::__list_imp<char *>::clear(v66);
      std::__list_imp<char *>::clear(v71);
      v3 += 7;
    }
    while (v10 >= (int)v64);
  }
  if (v8 >= (unint64_t)a2)
  {
    int v14 = a2;
  }
  else
  {
    do
    {
      uint64_t v49 = v84;
      int v50 = v85;
      std::list<int>::list(v51, (uint64_t)v86);
      int v52 = v87;
      int v53 = v88;
      uint64_t v44 = *(a2 - 7);
      int v45 = *((_DWORD *)a2 - 12);
      std::list<int>::list(v46, (uint64_t)(a2 - 5));
      int v14 = a2 - 7;
      int v15 = *((_DWORD *)a2 - 2);
      int v47 = *((_DWORD *)a2 - 4);
      int v48 = v15;
      int v16 = v49;
      std::__list_imp<char *>::clear(v46);
      std::__list_imp<char *>::clear(v51);
      a2 -= 7;
    }
    while (v16 < (int)v44);
  }
  while (v8 < (unint64_t)v14)
  {
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v8, v14);
    unint64_t v17 = v8;
    do
    {
      uint64_t v39 = v84;
      int v40 = v85;
      std::list<int>::list(v41, (uint64_t)v86);
      int v42 = v87;
      int v43 = v88;
      uint64_t v34 = *(void *)(v17 + 56);
      int v35 = *(_DWORD *)(v17 + 64);
      std::list<int>::list(v36, v17 + 72);
      unint64_t v8 = v17 + 56;
      int v37 = *(_DWORD *)(v17 + 96);
      int v38 = *(_DWORD *)(v17 + 104);
      int v18 = v39;
      int v19 = v34;
      std::__list_imp<char *>::clear(v36);
      std::__list_imp<char *>::clear(v41);
      v17 += 56;
    }
    while (v18 >= v19);
    unint64_t v20 = v14;
    do
    {
      uint64_t v29 = v84;
      int v30 = v85;
      std::list<int>::list(v31, (uint64_t)v86);
      int v32 = v87;
      int v33 = v88;
      uint64_t v25 = *(v20 - 7);
      std::list<int>::list(v26, (uint64_t)(v20 - 5));
      int v14 = v20 - 7;
      int v27 = *((_DWORD *)v20 - 4);
      int v28 = *((_DWORD *)v20 - 2);
      int v21 = v29;
      std::__list_imp<char *>::clear(v26);
      std::__list_imp<char *>::clear(v31);
      v20 -= 7;
    }
    while (v21 < (int)v25);
  }
  if ((uint64_t *)(v8 - 56) != v24)
  {
    *int v24 = *(void *)(v8 - 56);
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v8 - 48);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v23, *(void *)(v8 - 32), v8 - 40);
    *((_DWORD *)v24 + 10) = *(_DWORD *)(v8 - 16);
    *((_DWORD *)v24 + 12) = *(_DWORD *)(v8 - 8);
  }
  *(void *)(v8 - 56) = v84;
  *(_DWORD *)(v8 - 48) = v85;
  if ((uint64_t *)(v8 - 56) != &v84) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v8 - 40), v86[1], (uint64_t)v86);
  }
  *(_DWORD *)(v8 - 16) = v87;
  *(_DWORD *)(v8 - 8) = v88;
  std::__list_imp<char *>::clear(v86);
  return v8;
}

void sub_1B1FD8848(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v78 = *a1;
  int v79 = *((_DWORD *)a1 + 2);
  int v4 = a1 + 2;
  std::list<int>::list(v80, (uint64_t)(a1 + 2));
  uint64_t v5 = 0;
  int v6 = *((_DWORD *)a1 + 12);
  int v81 = *((_DWORD *)a1 + 10);
  int v82 = v6;
  do
  {
    uint64_t v73 = a1[v5 + 7];
    int v74 = a1[v5 + 8];
    std::list<int>::list(v75, (uint64_t)&a1[v5 + 9]);
    int v7 = a1[v5 + 13];
    int v76 = a1[v5 + 12];
    int v77 = v7;
    uint64_t v68 = v78;
    int v69 = v79;
    std::list<int>::list(v70, (uint64_t)v80);
    int v71 = v81;
    int v72 = v82;
    int v8 = v73;
    std::__list_imp<char *>::clear(v70);
    std::__list_imp<char *>::clear(v75);
    v5 += 7;
  }
  while (v8 < (int)v68);
  unint64_t v9 = (unint64_t)&a1[v5];
  if (v5 == 7)
  {
    while (v9 < a2)
    {
      uint64_t v63 = *(void *)(a2 - 56);
      int v64 = *(_DWORD *)(a2 - 48);
      std::list<int>::list(v65, a2 - 40);
      int v16 = *(_DWORD *)(a2 - 8);
      int v66 = *(_DWORD *)(a2 - 16);
      int v67 = v16;
      uint64_t v58 = v78;
      int v59 = v79;
      std::list<int>::list(v60, (uint64_t)v80);
      int v61 = v81;
      int v62 = v82;
      int v17 = v63;
      std::__list_imp<char *>::clear(v60);
      std::__list_imp<char *>::clear(v65);
      unint64_t v10 = a2 - 56;
      a2 -= 56;
      if (v17 < (int)v58) {
        goto LABEL_11;
      }
    }
    unint64_t v10 = a2;
  }
  else
  {
    unint64_t v10 = a2;
    do
    {
      uint64_t v12 = *(void *)(v10 - 56);
      unint64_t v11 = v10 - 56;
      uint64_t v53 = v12;
      int v54 = *(_DWORD *)(v11 + 8);
      unint64_t v13 = v11;
      std::list<int>::list(v55, v11 + 16);
      int v14 = *(_DWORD *)(a2 - 8);
      int v56 = *(_DWORD *)(a2 - 16);
      int v57 = v14;
      uint64_t v48 = v78;
      int v49 = v79;
      std::list<int>::list(v50, (uint64_t)v80);
      int v51 = v81;
      int v52 = v82;
      int v15 = v53;
      std::__list_imp<char *>::clear(v50);
      std::__list_imp<char *>::clear(v55);
      unint64_t v10 = v13;
      a2 = v13;
    }
    while (v15 >= (int)v48);
  }
LABEL_11:
  int v27 = v4;
  int v28 = a1;
  if (v9 < v10)
  {
    unint64_t v18 = v10;
    do
    {
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v9, (uint64_t *)v18);
      unint64_t v19 = v9;
      do
      {
        uint64_t v20 = *(void *)(v9 + 56);
        v9 += 56;
        uint64_t v43 = v20;
        int v44 = *(_DWORD *)(v9 + 8);
        std::list<int>::list(v45, v9 + 16);
        int v46 = *(_DWORD *)(v19 + 96);
        int v47 = *(_DWORD *)(v19 + 104);
        uint64_t v38 = v78;
        int v39 = v79;
        std::list<int>::list(v40, (uint64_t)v80);
        int v41 = v81;
        int v42 = v82;
        int v21 = v43;
        int v22 = v38;
        std::__list_imp<char *>::clear(v40);
        std::__list_imp<char *>::clear(v45);
        unint64_t v19 = v9;
      }
      while (v21 < v22);
      unint64_t v23 = v18;
      do
      {
        uint64_t v24 = *(void *)(v18 - 56);
        v18 -= 56;
        uint64_t v33 = v24;
        int v34 = *(_DWORD *)(v18 + 8);
        std::list<int>::list(v35, v18 + 16);
        int v36 = *(_DWORD *)(v23 - 16);
        int v37 = *(_DWORD *)(v23 - 8);
        int v29 = v78;
        std::list<int>::list(v30, (uint64_t)v80);
        int v31 = v81;
        int v32 = v82;
        int v25 = v33;
        std::__list_imp<char *>::clear(v30);
        std::__list_imp<char *>::clear(v35);
        unint64_t v23 = v18;
      }
      while (v25 >= v29);
    }
    while (v9 < v18);
  }
  if ((uint64_t *)(v9 - 56) != v28)
  {
    *int v28 = *(void *)(v9 - 56);
    *((_DWORD *)v28 + 2) = *(_DWORD *)(v9 - 48);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v27, *(void *)(v9 - 32), v9 - 40);
    *((_DWORD *)v28 + 10) = *(_DWORD *)(v9 - 16);
    *((_DWORD *)v28 + 12) = *(_DWORD *)(v9 - 8);
  }
  *(void *)(v9 - 56) = v78;
  *(_DWORD *)(v9 - 48) = v79;
  if ((uint64_t *)(v9 - 56) != &v78) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v9 - 40), v80[1], (uint64_t)v80);
  }
  *(_DWORD *)(v9 - 16) = v81;
  *(_DWORD *)(v9 - 8) = v82;
  std::__list_imp<char *>::clear(v80);
  return v9 - 56;
}

void sub_1B1FD8CF4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2)
{
  BOOL v4 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2 - 56;
      uint64_t v62 = *(void *)(a2 - 56);
      int v63 = *(_DWORD *)(a2 - 48);
      std::list<int>::list(v64, a2 - 40);
      int v6 = *(_DWORD *)(v5 + 48);
      int v65 = *(_DWORD *)(v5 + 40);
      int v66 = v6;
      uint64_t v57 = *(void *)a1;
      int v58 = *(_DWORD *)(a1 + 8);
      int v7 = std::list<int>::list(v59, a1 + 16);
      int v8 = *(_DWORD *)(a1 + 48);
      int v60 = *(_DWORD *)(a1 + 40);
      int v61 = v8;
      int v9 = v62;
      std::__list_imp<char *>::clear(v7);
      std::__list_imp<char *>::clear(v64);
      if (v9 < (int)v57) {
        std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)v5);
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a1 + 56, a2 - 56);
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a1 + 56, a1 + 112, a2 - 56);
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
      return v4;
    default:
      uint64_t v10 = a1 + 112;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a1 + 56, a1 + 112);
      uint64_t v11 = a1 + 168;
      if (a1 + 168 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v33 = 0;
      unint64_t v13 = v51;
      uint64_t v34 = a2;
      break;
  }
  while (1)
  {
    uint64_t v52 = *(void *)v11;
    int v53 = *(_DWORD *)(v11 + 8);
    std::list<int>::list(v54, v11 + 16);
    int v14 = *(_DWORD *)(v11 + 48);
    int v55 = *(_DWORD *)(v11 + 40);
    int v56 = v14;
    uint64_t v49 = *(void *)v10;
    int v50 = *(_DWORD *)(v10 + 8);
    int v15 = std::list<int>::list(v13, v10 + 16);
    int v16 = *(_DWORD *)(v10 + 48);
    v51[6] = *(_DWORD *)(v10 + 40);
    v51[8] = v16;
    int v17 = v52;
    int v18 = v49;
    unint64_t v19 = v15;
    std::__list_imp<char *>::clear(v15);
    std::__list_imp<char *>::clear(v54);
    if (v17 < v18) {
      break;
    }
    uint64_t v30 = v34;
    uint64_t v22 = v12;
    unint64_t v13 = v19;
LABEL_18:
    uint64_t v10 = v11;
    uint64_t v12 = v22 + 56;
    v11 += 56;
    if (v11 == v30) {
      return 1;
    }
  }
  uint64_t v44 = *(void *)v11;
  int v45 = *(_DWORD *)(v11 + 8);
  uint64_t v20 = std::list<int>::list(v46, v11 + 16);
  int v21 = *(_DWORD *)(v11 + 48);
  int v47 = *(_DWORD *)(v11 + 40);
  int v48 = v21;
  uint64_t v22 = v12;
  unint64_t v23 = v20;
  uint64_t v24 = v22;
  unint64_t v13 = v19;
  while (1)
  {
    uint64_t v25 = a1 + v24;
    *(void *)(v25 + 168) = *(void *)(a1 + v24 + 112);
    *(_DWORD *)(v25 + 176) = *(_DWORD *)(a1 + v24 + 120);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + v24 + 184), *(void *)(a1 + v24 + 136), a1 + 128 + v24);
    *(_DWORD *)(v25 + 208) = *(_DWORD *)(v25 + 152);
    *(_DWORD *)(v25 + 216) = *(_DWORD *)(v25 + 160);
    if (v24 == -112) {
      break;
    }
    uint64_t v39 = v44;
    int v40 = v45;
    std::list<int>::list(v41, (uint64_t)v23);
    int v42 = v47;
    int v43 = v48;
    uint64_t v35 = *(void *)(a1 + v24 + 56);
    std::list<int>::list(v36, a1 + v24 + 72);
    int v26 = *(_DWORD *)(a1 + v24 + 104);
    int v37 = *(_DWORD *)(a1 + v24 + 96);
    int v38 = v26;
    int v27 = v39;
    std::__list_imp<char *>::clear(v36);
    std::__list_imp<char *>::clear(v41);
    v24 -= 56;
    BOOL v28 = v27 < (int)v35;
    unint64_t v13 = v19;
    if (!v28)
    {
      uint64_t v29 = a1 + v24 + 168;
      goto LABEL_14;
    }
  }
  uint64_t v29 = a1;
LABEL_14:
  *(void *)uint64_t v29 = v44;
  *(_DWORD *)(v29 + 8) = v45;
  uint64_t v30 = v34;
  if ((uint64_t *)v29 != &v44) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v29 + 16), v46[1], (uint64_t)v23);
  }
  int v31 = v48;
  *(_DWORD *)(v29 + 40) = v47;
  *(_DWORD *)(v29 + 48) = v31;
  if (v33 != 7)
  {
    ++v33;
    std::__list_imp<char *>::clear(v23);
    goto LABEL_18;
  }
  BOOL v4 = v11 + 56 == v34;
  std::__list_imp<char *>::clear(v23);
  return v4;
}

void sub_1B1FD9158(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  BOOL v4 = a1 + 2;
  std::list<int>::list(v10, (uint64_t)(a1 + 2));
  int v5 = *((_DWORD *)a1 + 12);
  int v11 = *((_DWORD *)a1 + 10);
  int v12 = v5;
  *a1 = *a2;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  if (a1 != a2) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v4, a2[3], (uint64_t)(a2 + 2));
  }
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
  *a2 = v8;
  *((_DWORD *)a2 + 2) = v9;
  if (&v8 != a2) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(a2 + 2, v10[1], (uint64_t)v10);
  }
  int v6 = v12;
  *((_DWORD *)a2 + 10) = v11;
  *((_DWORD *)a2 + 12) = v6;
  return std::__list_imp<char *>::clear(v10);
}

void sub_1B1FD929C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a2, a3);
  uint64_t v45 = *(void *)a4;
  int v46 = *(_DWORD *)(a4 + 8);
  std::list<int>::list(v47, a4 + 16);
  int v8 = *(_DWORD *)(a4 + 48);
  int v48 = *(_DWORD *)(a4 + 40);
  int v49 = v8;
  uint64_t v40 = *(void *)a3;
  int v41 = *(_DWORD *)(a3 + 8);
  int v9 = std::list<int>::list(v42, a3 + 16);
  int v10 = *(_DWORD *)(a3 + 48);
  int v43 = *(_DWORD *)(a3 + 40);
  int v44 = v10;
  int v11 = v45;
  std::__list_imp<char *>::clear(v9);
  uint64_t result = std::__list_imp<char *>::clear(v47);
  if (v11 < (int)v40)
  {
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a3, (uint64_t *)a4);
    uint64_t v35 = *(void *)a3;
    int v36 = *(_DWORD *)(a3 + 8);
    std::list<int>::list(v37, a3 + 16);
    int v13 = *(_DWORD *)(a3 + 48);
    int v38 = *(_DWORD *)(a3 + 40);
    int v39 = v13;
    uint64_t v30 = *(void *)a2;
    int v31 = *(_DWORD *)(a2 + 8);
    int v14 = std::list<int>::list(v32, a2 + 16);
    int v15 = *(_DWORD *)(a2 + 48);
    int v33 = *(_DWORD *)(a2 + 40);
    int v34 = v15;
    int v16 = v35;
    std::__list_imp<char *>::clear(v14);
    uint64_t result = std::__list_imp<char *>::clear(v37);
    if (v16 < (int)v30)
    {
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a2, (uint64_t *)a3);
      uint64_t v25 = *(void *)a2;
      int v26 = *(_DWORD *)(a2 + 8);
      std::list<int>::list(v27, a2 + 16);
      int v17 = *(_DWORD *)(a2 + 48);
      int v28 = *(_DWORD *)(a2 + 40);
      int v29 = v17;
      uint64_t v21 = *(void *)a1;
      int v18 = std::list<int>::list(v22, a1 + 16);
      int v19 = *(_DWORD *)(a1 + 48);
      int v23 = *(_DWORD *)(a1 + 40);
      int v24 = v19;
      int v20 = v25;
      std::__list_imp<char *>::clear(v18);
      uint64_t result = std::__list_imp<char *>::clear(v27);
      if (v20 < (int)v21) {
        return std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
  return result;
}

void sub_1B1FD94B8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a2, a3, a4);
  uint64_t v61 = *(void *)a5;
  int v62 = *(_DWORD *)(a5 + 8);
  std::list<int>::list(v63, a5 + 16);
  int v10 = *(_DWORD *)(a5 + 48);
  int v64 = *(_DWORD *)(a5 + 40);
  int v65 = v10;
  uint64_t v56 = *(void *)a4;
  int v57 = *(_DWORD *)(a4 + 8);
  int v11 = std::list<int>::list(v58, a4 + 16);
  int v12 = *(_DWORD *)(a4 + 48);
  int v59 = *(_DWORD *)(a4 + 40);
  int v60 = v12;
  int v13 = v61;
  std::__list_imp<char *>::clear(v11);
  uint64_t result = std::__list_imp<char *>::clear(v63);
  if (v13 < (int)v56)
  {
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a4, (uint64_t *)a5);
    uint64_t v51 = *(void *)a4;
    int v52 = *(_DWORD *)(a4 + 8);
    std::list<int>::list(v53, a4 + 16);
    int v15 = *(_DWORD *)(a4 + 48);
    int v54 = *(_DWORD *)(a4 + 40);
    int v55 = v15;
    uint64_t v46 = *(void *)a3;
    int v47 = *(_DWORD *)(a3 + 8);
    int v16 = std::list<int>::list(v48, a3 + 16);
    int v17 = *(_DWORD *)(a3 + 48);
    int v49 = *(_DWORD *)(a3 + 40);
    int v50 = v17;
    int v18 = v51;
    std::__list_imp<char *>::clear(v16);
    uint64_t result = std::__list_imp<char *>::clear(v53);
    if (v18 < (int)v46)
    {
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a3, (uint64_t *)a4);
      uint64_t v41 = *(void *)a3;
      int v42 = *(_DWORD *)(a3 + 8);
      std::list<int>::list(v43, a3 + 16);
      int v19 = *(_DWORD *)(a3 + 48);
      int v44 = *(_DWORD *)(a3 + 40);
      int v45 = v19;
      uint64_t v36 = *(void *)a2;
      int v37 = *(_DWORD *)(a2 + 8);
      int v20 = std::list<int>::list(v38, a2 + 16);
      int v21 = *(_DWORD *)(a2 + 48);
      int v39 = *(_DWORD *)(a2 + 40);
      int v40 = v21;
      int v22 = v41;
      std::__list_imp<char *>::clear(v20);
      uint64_t result = std::__list_imp<char *>::clear(v43);
      if (v22 < (int)v36)
      {
        std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a2, (uint64_t *)a3);
        uint64_t v31 = *(void *)a2;
        int v32 = *(_DWORD *)(a2 + 8);
        std::list<int>::list(v33, a2 + 16);
        int v23 = *(_DWORD *)(a2 + 48);
        int v34 = *(_DWORD *)(a2 + 40);
        int v35 = v23;
        uint64_t v27 = *(void *)a1;
        int v24 = std::list<int>::list(v28, a1 + 16);
        int v25 = *(_DWORD *)(a1 + 48);
        int v29 = *(_DWORD *)(a1 + 40);
        int v30 = v25;
        int v26 = v31;
        std::__list_imp<char *>::clear(v24);
        uint64_t result = std::__list_imp<char *>::clear(v33);
        if (v26 < (int)v27) {
          return std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a2);
        }
      }
    }
  }
  return result;
}

void sub_1B1FD9770(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != (uint64_t *)a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - (void)a1;
    uint64_t v9 = (a2 - (uint64_t)a1) / 56;
    if (a2 - (uint64_t)a1 >= 57)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[7 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a4, v9, v12);
        v12 -= 7;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        uint64_t v25 = *(void *)v14;
        int v26 = *(_DWORD *)(v14 + 8);
        std::list<int>::list(v27, v14 + 16);
        int v15 = *(_DWORD *)(v14 + 48);
        int v28 = *(_DWORD *)(v14 + 40);
        int v29 = v15;
        uint64_t v21 = *a1;
        std::list<int>::list(v22, (uint64_t)(a1 + 2));
        int v16 = *((_DWORD *)a1 + 12);
        int v23 = *((_DWORD *)a1 + 10);
        int v24 = v16;
        int v17 = v25;
        std::__list_imp<char *>::clear(v22);
        std::__list_imp<char *>::clear(v27);
        if (v17 < (int)v21)
        {
          std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a4, v9, a1);
        }
        v14 += 56;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 57)
    {
      unint64_t v18 = v8 / 0x38uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, v6, a4, v18);
        v6 -= 56;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1B1FD9974(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(void *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v30 = result;
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    int v5 = a4;
    int64_t v28 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (a4 - result))
    {
      int64_t v6 = (0xDB6DB6DB6DB6DB6ELL * (a4 - result)) | 1;
      int v7 = &result[7 * v6];
      int64_t v8 = 0xDB6DB6DB6DB6DB6ELL * (a4 - result) + 2;
      if (v8 < a3)
      {
        uint64_t v70 = *v7;
        uint64_t v9 = &result[7 * v6];
        int v71 = v9[2];
        std::list<int>::list(v72, (uint64_t)(v9 + 4));
        int v10 = v9[12];
        int v73 = v9[10];
        int v74 = v10;
        uint64_t v65 = v7[7];
        int v66 = *((_DWORD *)v7 + 16);
        unint64_t v11 = std::list<int>::list(v67, (uint64_t)(v7 + 9));
        int v12 = *((_DWORD *)v7 + 26);
        int v68 = *((_DWORD *)v7 + 24);
        int v69 = v12;
        LODWORD(v9) = v70;
        std::__list_imp<char *>::clear(v11);
        std::__list_imp<char *>::clear(v72);
        v7 += 7 * ((int)v9 < (int)v65);
        if ((int)v9 < (int)v65) {
          int64_t v6 = v8;
        }
      }
      uint64_t v60 = *v7;
      int v61 = *((_DWORD *)v7 + 2);
      std::list<int>::list(v62, (uint64_t)(v7 + 2));
      int v13 = *((_DWORD *)v7 + 12);
      int v63 = *((_DWORD *)v7 + 10);
      int v64 = v13;
      uint64_t v55 = *v5;
      int v56 = *((_DWORD *)v5 + 2);
      uint64_t v14 = std::list<int>::list(v57, (uint64_t)(v5 + 2));
      int v15 = *((_DWORD *)v5 + 12);
      int v58 = *((_DWORD *)v5 + 10);
      int v59 = v15;
      int v16 = v60;
      std::__list_imp<char *>::clear(v14);
      uint64_t result = std::__list_imp<char *>::clear(v62);
      if (v16 >= (int)v55)
      {
        uint64_t v50 = *v5;
        int v51 = *((_DWORD *)v5 + 2);
        std::list<int>::list(v52, (uint64_t)(v5 + 2));
        int v17 = *((_DWORD *)v5 + 12);
        int v53 = *((_DWORD *)v5 + 10);
        int v54 = v17;
        do
        {
          unint64_t v18 = v7;
          *int v5 = *v7;
          *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
          if (v5 != v7) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v5 + 2, v7[3], (uint64_t)(v7 + 2));
          }
          *((_DWORD *)v5 + 10) = *((_DWORD *)v7 + 10);
          *((_DWORD *)v5 + 12) = *((_DWORD *)v7 + 12);
          if (v28 < v6) {
            break;
          }
          uint64_t v19 = (2 * v6) | 1;
          int v7 = &v30[7 * v19];
          int64_t v6 = 2 * v6 + 2;
          if (v6 >= a3)
          {
            int64_t v6 = v19;
          }
          else
          {
            uint64_t v45 = *v7;
            int v20 = &v30[7 * v19];
            int v46 = *((_DWORD *)v20 + 2);
            std::list<int>::list(v47, (uint64_t)(v20 + 2));
            uint64_t v21 = &v30[7 * v19];
            int v22 = *((_DWORD *)v21 + 10);
            LODWORD(v21) = *((_DWORD *)v21 + 12);
            int v48 = v22;
            int v49 = (int)v21;
            uint64_t v40 = v7[7];
            int v41 = *((_DWORD *)v7 + 16);
            std::list<int>::list(v42, (uint64_t)(v7 + 9));
            int v23 = *((_DWORD *)v7 + 26);
            int v43 = *((_DWORD *)v7 + 24);
            int v44 = v23;
            int v24 = v45;
            int v25 = v40;
            std::__list_imp<char *>::clear(v42);
            std::__list_imp<char *>::clear(v47);
            v7 += 7 * (v24 < v25);
            if (v24 >= v25) {
              int64_t v6 = v19;
            }
          }
          uint64_t v35 = *v7;
          int v36 = *((_DWORD *)v7 + 2);
          std::list<int>::list(v37, (uint64_t)(v7 + 2));
          int v26 = *((_DWORD *)v7 + 12);
          int v38 = *((_DWORD *)v7 + 10);
          int v39 = v26;
          int v31 = v50;
          std::list<int>::list(v32, (uint64_t)v52);
          int v33 = v53;
          int v34 = v54;
          int v27 = v35;
          std::__list_imp<char *>::clear(v32);
          std::__list_imp<char *>::clear(v37);
          int v5 = v18;
        }
        while (v27 >= v31);
        *unint64_t v18 = v50;
        *((_DWORD *)v18 + 2) = v51;
        if (v18 != &v50) {
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v18 + 2, v52[1], (uint64_t)v52);
        }
        *((_DWORD *)v18 + 10) = v53;
        *((_DWORD *)v18 + 12) = v54;
        return std::__list_imp<char *>::clear(v52);
      }
    }
  }
  return result;
}

void sub_1B1FD9D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    int v7 = result;
    uint64_t v12 = *result;
    int v13 = *((_DWORD *)result + 2);
    std::list<int>::list(&v14, (uint64_t)(result + 2));
    int v8 = *((_DWORD *)v7 + 12);
    int v16 = *((_DWORD *)v7 + 10);
    int v17 = v8;
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v7, a3, a4);
    int v10 = v9;
    if (v9 == (uint64_t *)(a2 - 56))
    {
      *uint64_t v9 = v12;
      *((_DWORD *)v9 + 2) = v13;
      if (v9 != &v12) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v9 + 2, v15, (uint64_t)&v14);
      }
      *((_DWORD *)v10 + 10) = v16;
      *((_DWORD *)v10 + 12) = v17;
    }
    else
    {
      *uint64_t v9 = *(void *)(a2 - 56);
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 - 48);
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v9 + 2, *(void *)(a2 - 32), a2 - 40);
      *((_DWORD *)v10 + 10) = *(_DWORD *)(a2 - 16);
      *((_DWORD *)v10 + 12) = *(_DWORD *)(a2 - 8);
      *(void *)(a2 - 56) = v12;
      *(_DWORD *)(a2 - 48) = v13;
      if ((uint64_t *)(a2 - 56) != &v12) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a2 - 40), v15, (uint64_t)&v14);
      }
      int v11 = v17;
      *(_DWORD *)(a2 - 16) = v16;
      *(_DWORD *)(a2 - 8) = v11;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v7, (uint64_t)(v10 + 7), a3, 0x6DB6DB6DB6DB6DB7 * (v10 + 7 - v7));
    }
    return std::__list_imp<char *>::clear(&v14);
  }
  return result;
}

void sub_1B1FD9F50(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = v5 + 1;
    uint64_t v9 = &a1[7 * v5 + 7];
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      uint64_t v18 = *v9;
      uint64_t v12 = &a1[7 * v8];
      int v19 = *((_DWORD *)v12 + 2);
      std::list<int>::list(v20, (uint64_t)(v12 + 2));
      int v21 = *((_DWORD *)v12 + 10);
      int v22 = *((_DWORD *)v12 + 12);
      uint64_t v14 = v9[7];
      std::list<int>::list(v15, (uint64_t)(v9 + 9));
      int v16 = *((_DWORD *)v9 + 24);
      int v17 = *((_DWORD *)v9 + 26);
      LODWORD(v12) = v18;
      std::__list_imp<char *>::clear(v15);
      std::__list_imp<char *>::clear(v20);
      v9 += 7 * ((int)v12 < (int)v14);
      if ((int)v12 < (int)v14) {
        uint64_t v5 = v11;
      }
    }
    *a1 = *v9;
    *((_DWORD *)a1 + 2) = *((_DWORD *)v9 + 2);
    if (a1 != v9) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(a1 + 2, v9[3], (uint64_t)(v9 + 2));
    }
    *((_DWORD *)a1 + 10) = *((_DWORD *)v9 + 10);
    *((_DWORD *)a1 + 12) = *((_DWORD *)v9 + 12);
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

void sub_1B1FDA0E4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = &result[7 * (v4 >> 1)];
    uint64_t v38 = *v8;
    int v39 = *((_DWORD *)v8 + 2);
    std::list<int>::list(v40, (uint64_t)(v8 + 2));
    int v9 = *((_DWORD *)v8 + 12);
    int v41 = *((_DWORD *)v8 + 10);
    int v42 = v9;
    uint64_t v10 = (uint64_t *)(a2 - 56);
    uint64_t v33 = *(void *)(a2 - 56);
    int v34 = *(_DWORD *)(a2 - 48);
    uint64_t v11 = std::list<int>::list(v35, a2 - 40);
    int v12 = *(_DWORD *)(a2 - 8);
    int v36 = *(_DWORD *)(a2 - 16);
    int v37 = v12;
    int v13 = v38;
    std::__list_imp<char *>::clear(v11);
    uint64_t result = std::__list_imp<char *>::clear(v40);
    if (v13 < (int)v33)
    {
      uint64_t v28 = *(void *)(a2 - 56);
      int v29 = *(_DWORD *)(a2 - 48);
      std::list<int>::list(v30, a2 - 40);
      int v14 = *(_DWORD *)(a2 - 8);
      int v31 = *(_DWORD *)(a2 - 16);
      int v32 = v14;
      do
      {
        uint64_t v15 = v8;
        *uint64_t v10 = *v8;
        *((_DWORD *)v10 + 2) = *((_DWORD *)v8 + 2);
        if (v10 != v8) {
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v10 + 2, v8[3], (uint64_t)(v8 + 2));
        }
        *((_DWORD *)v10 + 10) = *((_DWORD *)v8 + 10);
        *((_DWORD *)v10 + 12) = *((_DWORD *)v8 + 12);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = &v6[7 * v7];
        uint64_t v23 = *v8;
        int v24 = *((_DWORD *)v8 + 2);
        std::list<int>::list(v25, (uint64_t)(v8 + 2));
        int v16 = *((_DWORD *)v8 + 12);
        int v26 = *((_DWORD *)v8 + 10);
        int v27 = v16;
        int v19 = v28;
        std::list<int>::list(v20, (uint64_t)v30);
        int v21 = v31;
        int v22 = v32;
        int v17 = v23;
        std::__list_imp<char *>::clear(v20);
        std::__list_imp<char *>::clear(v25);
        uint64_t v10 = v15;
      }
      while (v17 < v19);
      *uint64_t v15 = v28;
      *((_DWORD *)v15 + 2) = v29;
      if (v15 != &v28) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 + 2, v30[1], (uint64_t)v30);
      }
      int v18 = v32;
      *((_DWORD *)v15 + 10) = v31;
      *((_DWORD *)v15 + 12) = v18;
      return std::__list_imp<char *>::clear(v30);
    }
  }
  return result;
}

void sub_1B1FDA344(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::AcyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::AcyclicMinimizer(uint64_t a1, void *a2)
{
  BOOL v4 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a2 + 64))(a2, 0x40000, 1) == 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = v4;
  if (!(*(uint64_t (**)(void *, uint64_t, uint64_t))(*a2 + 64))(a2, 0x40000, 1)) {
    FstCheck(1, "Weight::Properties() & kIdempotent", "../libquasar/libkaldi/tools/openfst/src/include/fst/minimize.h");
  }
  fst::AcyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Initialize(a1, (uint64_t)a2);
  fst::AcyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Refine((void *)a1, a2);
  return a1;
}

void sub_1B1FDA478(_Unwind_Exception *a1)
{
  fst::Partition<int>::~Partition(v1);
  _Unwind_Resume(a1);
}

void fst::AcyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Initialize(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FDA57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::AcyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Refine(void *a1, void *a2)
{
  uint64_t v2 = a1[5] - a1[4];
  if (((unint64_t)v2 >> 3))
  {
    uint64_t v5 = 0;
    unint64_t v6 = (int)(v2 >> 3);
    if (v6 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v6;
    }
    do
    {
      v17[0] = 0;
      v17[1] = 0;
      v17[2] = a2;
      void v17[3] = a1;
      int v18 = 7;
      int v16 = (uint64_t *)v17;
      uint64_t v8 = *(void *)(a1[4] + 8 * (int)v5);
      int v15 = *(_DWORD *)v8;
      int v19 = (unsigned int *)&v15;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8) = v5;
      for (uint64_t i = *(void *)(v8 + 8); i; uint64_t i = *(void *)(i + 8))
      {
        int v15 = 0;
        int v15 = *(_DWORD *)i;
        uint64_t v10 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>((uint64_t)&v16, (unsigned int *)&v15);
        if (v17 == (void **)v10) {
          int v11 = fst::Partition<int>::AddClass((uint64_t)a1);
        }
        else {
          int v11 = *(_DWORD *)(v10 + 32);
        }
        int v19 = (unsigned int *)&v15;
        *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8) = v11;
      }
      uint64_t v12 = *(void *)(a1[4] + 8 * (int)v5);
      while (v12)
      {
        int v15 = 0;
        int v15 = *(_DWORD *)v12;
        int v13 = *(_DWORD *)(a1[10] + 4 * v15);
        int v19 = (unsigned int *)&v15;
        int v14 = *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8);
        uint64_t v12 = *(void *)(v12 + 8);
        if (v13 != v14) {
          fst::Partition<int>::Move(a1, v15, v14);
        }
      }
      std::__tree<int>::destroy((uint64_t)&v16, v17[0]);
      ++v5;
    }
    while (v5 != v7);
  }
}

void sub_1B1FDA760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

uint64_t fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::AcyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::HeightVisitor,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    memset(&v6, 0, sizeof(v6));
    long long v4 = 0u;
    long long v5 = 0u;
    long long v3 = 0u;
    fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::MemoryPool(v2, 64);
  }
  return result;
}

void sub_1B1FDAF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  std::vector<char> v6 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__find_equal<int>((uint64_t)a1, &v10, a2);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = **a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__find_equal<int>(uint64_t a1, void *a2, unsigned int *a3)
{
  long long v5 = (uint64_t *)(a1 + 8);
  long long v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = (void *)(a1 + 24);
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        if (!fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()(v7, *a3, *((unsigned int *)v4 + 7)))break; {
        long long v4 = (uint64_t *)*v8;
        }
        long long v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()(v7, *((unsigned int *)v8 + 7), *a3))break; {
      long long v5 = v8 + 1;
      }
      long long v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (uint64_t *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()(void *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *((_DWORD *)a1 + 4);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 32))(&v30);
    uint64_t v16 = 0;
    unint64_t v17 = v32;
    if (v30)
    {
      unint64_t v18 = (int)v30;
      while (1)
      {
        v16 ^= v18;
        if ((uint64_t *)v17 == &v31) {
          break;
        }
        unint64_t v18 = *(int *)(v17 + 16) ^ (unint64_t)(2 * v16);
        unint64_t v17 = *(void *)(v17 + 8);
      }
    }
    unint64_t v19 = v34 ^ __ROR8__(v16, 59);
    std::__list_imp<char *>::clear(&v31);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 32))(&v30);
    uint64_t v20 = 0;
    unint64_t v21 = v32;
    if (v30)
    {
      unint64_t v22 = (int)v30;
      while (1)
      {
        v20 ^= v22;
        if ((uint64_t *)v21 == &v31) {
          break;
        }
        unint64_t v22 = *(int *)(v21 + 16) ^ (unint64_t)(2 * v20);
        unint64_t v21 = *(void *)(v21 + 8);
      }
    }
    unint64_t v23 = v34 ^ __ROR8__(v20, 59);
    std::__list_imp<char *>::clear(&v31);
    if (v19 < v23) {
      return 1;
    }
    if (v19 <= v23 && (a1[2] & 2) != 0) {
      goto LABEL_3;
    }
    return 0;
  }
  if ((v6 & 2) == 0) {
    return 0;
  }
LABEL_3:
  unint64_t v7 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 40))(*a1, a2);
  if (v7 < (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 40))(*a1, a3)) {
    return 1;
  }
  unint64_t v8 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 40))(*a1, a2);
  if (v8 > (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 40))(*a1, a3) || (a1[2] & 4) == 0) {
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v34 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v9 + 136))(v9, a2, &v30);
  uint64_t v10 = *a1;
  unint64_t v29 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v10 + 136))(v10, a3, v27);
  while (1)
  {
    if (v30)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v30 + 24))(v30)) {
        goto LABEL_48;
      }
    }
    else if (v34 >= v32)
    {
      goto LABEL_48;
    }
    if (v27[0])
    {
      if ((*(uint64_t (**)(void))(*(void *)v27[0] + 24))(v27[0])) {
        goto LABEL_48;
      }
    }
    else if (v29 >= v27[2])
    {
LABEL_48:
      uint64_t v24 = 0;
      char v25 = 1;
      goto LABEL_51;
    }
    if (v30) {
      int v11 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v30 + 32))(v30);
    }
    else {
      int v11 = (_DWORD *)(v31 + 56 * v34);
    }
    if (v27[0]) {
      uint64_t v12 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)v27[0] + 32))(v27[0]);
    }
    else {
      uint64_t v12 = (_DWORD *)(v27[1] + 56 * v29);
    }
    if (*v11 < *v12) {
      goto LABEL_49;
    }
    if (*v11 > *v12) {
      break;
    }
    uint64_t v13 = *(void *)(a1[1] + 80);
    int v14 = *(_DWORD *)(v13 + 4 * (int)v11[12]);
    int v15 = *(_DWORD *)(v13 + 4 * (int)v12[12]);
    if (v14 < v15)
    {
LABEL_49:
      char v25 = 0;
      uint64_t v24 = 1;
      goto LABEL_51;
    }
    if (v14 > v15) {
      break;
    }
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 40))(v30);
    }
    else {
      ++v34;
    }
    if (v27[0]) {
      (*(void (**)(void))(*(void *)v27[0] + 40))(v27[0]);
    }
    else {
      ++v29;
    }
  }
  char v25 = 0;
  uint64_t v24 = 0;
LABEL_51:
  if (v27[0])
  {
    (*(void (**)(void))(*(void *)v27[0] + 8))(v27[0]);
  }
  else if (v28)
  {
    --*v28;
  }
  if (v30)
  {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  else if (v33)
  {
    --*v33;
  }
  if (v25) {
    return 0;
  }
  return v24;
}

void sub_1B1FDB67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  else if (a17)
  {
    --*a17;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  long long v5 = (void *)(a1 + 24);
  uint64_t v6 = a1 + 8;
  do
  {
    int v7 = fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()(v5, *(unsigned int *)(v3 + 28), *a2);
    unint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      unint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2
    || fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::operator()(v5, *a2, *(unsigned int *)(v6 + 28)))
  {
    return v2;
  }
  return v6;
}

void fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::CyclicMinimizer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x40000, 1);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = v3 == 0;
  *(_DWORD *)(a1 + 192) = 2;
  *(unsigned char *)(a1 + 196) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 184) = &unk_1F0A450C0;
  fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFst();
}

void sub_1B1FDB8E4(_Unwind_Exception *a1)
{
  std::deque<int>::~deque[abi:ne180100](v2);
  fst::Partition<int>::~Partition(v1);
  _Unwind_Resume(a1);
}

void fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::Initialize(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 31);
  fst::Reverse<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a2, a1 + 31, 1);
  fst::ArcSort<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(v4);
  fst::Partition<int>::Initialize((uint64_t)a1, (((*(void *)(a1[32] + 72) - *(void *)(a1[32] + 64)) << 29) - 0x100000000) >> 32);
  fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::PrePartition(a1, a2);
  operator new();
}

void fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::Compute(void *a1)
{
  uint64_t v1 = a1[30];
  if (v1)
  {
    uint64_t v3 = (uint64_t)(a1 + 25);
    do
    {
      int v4 = *(_DWORD *)(*(void *)(a1[26] + ((a1[29] >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (a1[29] & 0x3FFLL));
      ++a1[29];
      a1[30] = v1 - 1;
      std::deque<int>::__maybe_remove_front_spare[abi:ne180100](v3, 1);
      fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::Split(a1, v4);
      uint64_t v1 = a1[30];
    }
    while (v1);
  }
}

void fst::ArcSort<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1)
{
  uint64_t v3 = a1;
  int v4 = &v6;
  memset(v5, 0, sizeof(v5));
  v1[0] = a1;
  v1[1] = (uint64_t)&v6;
  memset(v2, 0, sizeof(v2));
  fst::StateMap<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ArcSortMapper<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>(a1, v1);
  int v7 = (void **)v2;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v7 = (void **)v5;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1B1FDBA98(_Unwind_Exception *a1)
{
  uint64_t v4 = v1;
  *(void *)(v3 - 40) = v2;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  *(void *)(v3 - 40) = v4;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  _Unwind_Resume(a1);
}

void fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::PrePartition(void *a1, uint64_t a2)
{
  if (FLAGS_v >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
    uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v32, (uint64_t)&__p);
    long long v5 = (void *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"PrePartition", 12);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v32);
    if (SHIBYTE(v37) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v37 = 0;
  uint64_t v38 = a2;
  int v39 = a1;
  int v40 = 1;
  std::string __p = &v36;
  int v36 = 0;
  int v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v32);
  int v6 = fst::Partition<int>::AddClass((uint64_t)a1);
  if (v32) {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32);
  }
  else {
    int v7 = v34;
  }
  uint64_t v8 = *(void *)(a1[1] + 8 * v7);
  uint64_t v9 = a1[4];
  uint64_t v10 = *(void *)(v9 + 8 * v6);
  if (v10)
  {
    *(void *)(v10 + 16) = v8;
    uint64_t v10 = *(void *)(v9 + 8 * v6);
  }
  *(void *)(v8 + 8) = v10;
  *(void *)(v8 + 16) = 0;
  *(void *)(v9 + 8 * v6) = v8;
  *(_DWORD *)(a1[10] + 4 * v7) = v6;
  ++*(_DWORD *)(a1[13] + 4 * v6);
  if (v32) {
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32);
  }
  else {
    int v11 = v34;
  }
  int v31 = v11;
  v29[0] = &v31;
  *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v6;
  LODWORD(v29[0]) = v6;
  std::deque<int>::push_front((uint64_t)(a1 + 25), v29);
  uint64_t v12 = v32;
  if (v32) {
    goto LABEL_28;
  }
  ++v34;
  while (v32)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32)) {
      goto LABEL_30;
    }
    int v31 = 0;
    if (!v32) {
      goto LABEL_19;
    }
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32);
LABEL_20:
    int v31 = v13;
    uint64_t v14 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>((uint64_t)&__p, (unsigned int *)&v31);
    if (&v36 == (void **)v14)
    {
      int v21 = fst::Partition<int>::AddClass((uint64_t)a1);
      int v22 = v21;
      uint64_t v23 = v31;
      uint64_t v24 = *(void *)(a1[1] + 8 * v31);
      uint64_t v25 = a1[4];
      uint64_t v26 = *(void *)(v25 + 8 * v21);
      if (v26)
      {
        *(void *)(v26 + 16) = v24;
        uint64_t v26 = *(void *)(v25 + 8 * v21);
      }
      *(void *)(v24 + 8) = v26;
      *(void *)(v24 + 16) = 0;
      *(void *)(v25 + 8 * v21) = v24;
      *(_DWORD *)(a1[10] + 4 * v23) = v21;
      ++*(_DWORD *)(a1[13] + 4 * v21);
      v29[0] = &v31;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v21;
      LODWORD(v29[0]) = v22;
      std::deque<int>::push_front((uint64_t)(a1 + 25), v29);
    }
    else
    {
      uint64_t v15 = v31;
      int v16 = *(_DWORD *)(v14 + 32);
      uint64_t v17 = *(void *)(a1[1] + 8 * v31);
      uint64_t v18 = a1[4];
      uint64_t v19 = *(void *)(v18 + 8 * v16);
      if (v19)
      {
        *(void *)(v19 + 16) = v17;
        uint64_t v19 = *(void *)(v18 + 8 * v16);
      }
      *(void *)(v17 + 8) = v19;
      *(void *)(v17 + 16) = 0;
      *(void *)(v18 + 8 * v16) = v17;
      *(_DWORD *)(a1[10] + 4 * v15) = v16;
      ++*(_DWORD *)(a1[13] + 4 * v16);
      int v20 = *(_DWORD *)(v14 + 32);
      v29[0] = &v31;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v20;
    }
    uint64_t v12 = v32;
    if (v32) {
LABEL_28:
    }
      (*(void (**)(uint64_t))(*(void *)v32 + 32))(v12);
    else {
      ++v34;
    }
  }
  if (v34 < v33)
  {
LABEL_19:
    int v13 = v34;
    goto LABEL_20;
  }
LABEL_30:
  if (FLAGS_v >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "INFO");
    int v27 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)v29);
    uint64_t v28 = (void *)fst::cerr(v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Initial Partition: ", 19);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (v30 < 0) {
      operator delete(v29[0]);
    }
  }
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  std::__tree<int>::destroy((uint64_t)&__p, v36);
}

void sub_1B1FDBF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  std::__tree<int>::destroy((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

uint64_t fst::StateMap<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ArcSortMapper<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v7);
        for (unint64_t i = a2[5]; ; a2[5] = i)
        {
          uint64_t v9 = a2[2];
          if (i >= 0x6DB6DB6DB6DB6DB7 * ((a2[3] - v9) >> 3)) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 208))(a1, v7, v9 + 56 * i);
          unint64_t i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 32))(&v10);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v7, &v10);
        std::__list_imp<char *>::clear(v11);
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1FDC2C8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::ArcSortMapper<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetState(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 2;
  uint64_t v5 = a1[2];
  a1[5] = 0;
  uint64_t v6 = a1[3];
  if (v6 != v5)
  {
    do
    {
      uint64_t v7 = v6 - 56;
      std::__list_imp<char *>::clear((void *)(v6 - 40));
      uint64_t v6 = v7;
    }
    while (v7 != v5);
  }
  a1[3] = v5;
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a2);
  std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::reserve(v4, v8);
  uint64_t v9 = *a1;
  unint64_t v20 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v9 + 136))(v9, a2, v18);
  while (1)
  {
    if (!v18[0])
    {
      if (v20 >= v18[2]) {
        goto LABEL_18;
      }
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(void))(*(void *)v18[0] + 24))(v18[0])) {
      break;
    }
    if (v18[0])
    {
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v18[0] + 32))();
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v10 = v18[1] + 56 * v20;
LABEL_10:
    unint64_t v11 = a1[3];
    if (v11 >= a1[4])
    {
      uint64_t v12 = std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__push_back_slow_path<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> const&>(v4, v10);
    }
    else
    {
      std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> const&>((uint64_t)v4, v10);
      uint64_t v12 = v11 + 56;
    }
    a1[3] = v12;
    if (v18[0]) {
      (*(void (**)(void))(*(void *)v18[0] + 40))(v18[0]);
    }
    else {
      ++v20;
    }
  }
  if (v18[0])
  {
    (*(void (**)(void))(*(void *)v18[0] + 8))();
    goto LABEL_20;
  }
LABEL_18:
  if (v19) {
    --*v19;
  }
LABEL_20:
  int v13 = (void *)a1[2];
  uint64_t v14 = (uint64_t *)a1[3];
  unint64_t v15 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (v14 - v13));
  if (v14 == v13) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  return std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*,false>(v13, v14, (uint64_t)v18, v16, 1);
}

void sub_1B1FDC528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ArcSortMapper<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetState();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void *std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*,false>(void *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v27 = *(a2 - 7);
          uint64_t v26 = a2 - 7;
          uint64_t v46 = v27;
          int v47 = *((_DWORD *)v26 + 2);
          std::list<int>::list(v48, (uint64_t)(v26 + 2));
          int v49 = *((_DWORD *)v26 + 10);
          int v50 = *((_DWORD *)v26 + 12);
          uint64_t v41 = *(void *)v11;
          int v42 = *(_DWORD *)(v11 + 8);
          uint64_t v28 = std::list<int>::list(v43, v11 + 16);
          int v29 = *(_DWORD *)(v11 + 48);
          int v44 = *(_DWORD *)(v11 + 40);
          int v45 = v29;
          int v30 = v46;
          int v31 = v41;
          std::__list_imp<char *>::clear(v28);
          uint64_t result = std::__list_imp<char *>::clear(v48);
          if (v30 < v31) {
            uint64_t result = std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)v11, v26);
          }
          break;
        case 3uLL:
          uint64_t result = (void *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v11, v11 + 56, (uint64_t)(a2 - 7));
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v11, v11 + 56, v11 + 112, (uint64_t)(a2 - 7));
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v11, v11 + 56, v11 + 112, v11 + 168, (uint64_t)(a2 - 7));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 1343)
    {
      if (a5) {
        return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>((void *)v11, a2);
      }
      else {
        return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>((void *)v11, a2);
      }
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = (uint64_t *)(v11 + 56 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x1C01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v10, v10 + 56 * (v15 >> 1), (uint64_t)(a2 - 7));
      uint64_t v18 = 56 * v16;
      uint64_t v19 = 56 * v16 + v10 - 56;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v10 + 56, v19, (uint64_t)(a2 - 14));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v10 + 112, v10 + 56 + v18, (uint64_t)(a2 - 21));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v19, (uint64_t)v17, v10 + 56 + v18);
      std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)v10, v17);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v10 + 56 * (v15 >> 1), v10, (uint64_t)(a2 - 7));
      if (a5) {
        goto LABEL_14;
      }
    }
    uint64_t v36 = *(void *)(v10 - 56);
    int v37 = *(_DWORD *)(v10 - 48);
    std::list<int>::list(v38, v10 - 40);
    int v39 = *(_DWORD *)(v10 - 16);
    int v40 = *(_DWORD *)(v10 - 8);
    uint64_t v32 = *(void *)v10;
    unint64_t v20 = std::list<int>::list(v33, v10 + 16);
    int v21 = *(_DWORD *)(v10 + 48);
    int v34 = *(_DWORD *)(v10 + 40);
    int v35 = v21;
    int v22 = v36;
    std::__list_imp<char *>::clear(v20);
    std::__list_imp<char *>::clear(v38);
    if (v22 >= (int)v32)
    {
      uint64_t result = (void *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &>((uint64_t *)v10, a2);
      uint64_t v11 = (uint64_t)result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &>((uint64_t *)v10, (unint64_t)a2);
    if ((v24 & 1) == 0) {
      goto LABEL_17;
    }
    char v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v10, v23);
    uint64_t v11 = v23 + 56;
    uint64_t result = (void *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v23 + 56, (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (uint64_t *)v23;
      if (v25) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if ((v25 & 1) == 0)
    {
LABEL_17:
      uint64_t result = (void *)std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*,false>(v10, v23, a3, -v13, a5 & 1);
      uint64_t v11 = v23 + 56;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if ((uint64_t *)v11 != a2) {
    return (void *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>((uint64_t *)v11, (uint64_t)a2, (uint64_t)a2, a3);
  }
  return result;
}

void sub_1B1FDC914(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = result + 7;
    if (result + 7 != a2)
    {
      uint64_t v4 = 0;
      unint64_t v20 = result + 2;
      char v5 = result;
      do
      {
        uint64_t v6 = v4;
        uint64_t v7 = v3;
        uint64_t v41 = v5[7];
        int v42 = *((_DWORD *)v5 + 16);
        std::list<int>::list(v43, (uint64_t)(v5 + 9));
        int v8 = *((_DWORD *)v5 + 26);
        int v44 = *((_DWORD *)v5 + 24);
        int v45 = v8;
        uint64_t v36 = *v5;
        int v37 = *((_DWORD *)v5 + 2);
        uint64_t v9 = std::list<int>::list(v38, (uint64_t)(v5 + 2));
        int v10 = *((_DWORD *)v5 + 12);
        int v39 = *((_DWORD *)v5 + 10);
        int v40 = v10;
        int v11 = v41;
        int v12 = v36;
        std::__list_imp<char *>::clear(v9);
        uint64_t result = std::__list_imp<char *>::clear(v43);
        if (v11 < v12)
        {
          uint64_t v31 = *v7;
          int v32 = *((_DWORD *)v5 + 16);
          std::list<int>::list(v33, (uint64_t)(v5 + 9));
          int v13 = *((_DWORD *)v5 + 26);
          int v34 = *((_DWORD *)v5 + 24);
          int v35 = v13;
          uint64_t v14 = v6;
          while (1)
          {
            unint64_t v15 = (char *)v2 + v14;
            *((void *)v15 + 7) = *(void *)((char *)v2 + v14);
            *((_DWORD *)v15 + 16) = *(_DWORD *)((char *)v2 + v14 + 8);
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((void *)((char *)v2 + v14 + 72), *(void *)((char *)v2 + v14 + 24), (uint64_t)v20 + v14);
            *((_DWORD *)v15 + ++*(void *)(result + 24) = *((_DWORD *)v15 + 10);
            *((_DWORD *)v15 + 26) = *((_DWORD *)v15 + 12);
            if (!v14) {
              break;
            }
            uint64_t v26 = v31;
            int v27 = v32;
            std::list<int>::list(v28, (uint64_t)v33);
            int v29 = v34;
            int v30 = v35;
            uint64_t v22 = *(void *)((char *)v2 + v14 - 56);
            std::list<int>::list(v23, (uint64_t)v2 + v14 - 40);
            int v16 = *(_DWORD *)((char *)v2 + v14 - 8);
            int v24 = *(_DWORD *)((char *)v2 + v14 - 16);
            int v25 = v16;
            int v17 = v26;
            std::__list_imp<char *>::clear(v23);
            std::__list_imp<char *>::clear(v28);
            v14 -= 56;
            if (v17 >= (int)v22)
            {
              uint64_t v18 = (uint64_t)v2 + v14 + 56;
              goto LABEL_10;
            }
          }
          uint64_t v18 = (uint64_t)v2;
LABEL_10:
          *(void *)uint64_t v18 = v31;
          *(_DWORD *)(v18 + 8) = v32;
          if ((uint64_t *)v18 != &v31) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v18 + 16), v33[1], (uint64_t)v33);
          }
          int v19 = v35;
          *(_DWORD *)(v18 + 40) = v34;
          *(_DWORD *)(v18 + 48) = v19;
          uint64_t result = std::__list_imp<char *>::clear(v33);
        }
        uint64_t v3 = v7 + 7;
        uint64_t v4 = v6 + 56;
        char v5 = v7;
      }
      while (v7 + 7 != a2);
    }
  }
  return result;
}

void sub_1B1FDCBCC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = result + 7;
    if (result + 7 != a2)
    {
      uint64_t v18 = 0;
      uint64_t v4 = result;
      do
      {
        char v5 = v3;
        uint64_t v38 = v4[7];
        int v39 = *((_DWORD *)v4 + 16);
        std::list<int>::list(v40, (uint64_t)(v4 + 9));
        int v6 = *((_DWORD *)v4 + 26);
        int v41 = *((_DWORD *)v4 + 24);
        int v42 = v6;
        uint64_t v33 = *v4;
        int v34 = *((_DWORD *)v4 + 2);
        uint64_t v7 = std::list<int>::list(v35, (uint64_t)(v4 + 2));
        int v8 = *((_DWORD *)v4 + 12);
        int v36 = *((_DWORD *)v4 + 10);
        int v37 = v8;
        int v17 = v38;
        int v9 = v33;
        std::__list_imp<char *>::clear(v7);
        uint64_t result = std::__list_imp<char *>::clear(v40);
        if (v17 < v9)
        {
          uint64_t v28 = *v5;
          int v29 = *((_DWORD *)v4 + 16);
          std::list<int>::list(v30, (uint64_t)(v4 + 9));
          int v10 = *((_DWORD *)v4 + 26);
          int v31 = *((_DWORD *)v4 + 24);
          int v32 = v10;
          uint64_t v11 = v18;
          do
          {
            int v12 = (char *)v2 + v11;
            *((void *)v12 + 7) = *(void *)((char *)v2 + v11);
            *((_DWORD *)v12 + 16) = *(_DWORD *)((char *)v2 + v11 + 8);
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((void *)((char *)v2 + v11 + 72), *(void *)((char *)v2 + v11 + 24), (uint64_t)v2 + v11 + 16);
            *((_DWORD *)v12 + ++*(void *)(result + 24) = *((_DWORD *)v12 + 10);
            *((_DWORD *)v12 + 26) = *((_DWORD *)v12 + 12);
            uint64_t v23 = v28;
            int v24 = v29;
            std::list<int>::list(v25, (uint64_t)v30);
            int v26 = v31;
            int v27 = v32;
            uint64_t v19 = *(void *)((char *)v2 + v11 - 56);
            std::list<int>::list(v20, (uint64_t)v2 + v11 - 40);
            int v13 = *(_DWORD *)((char *)v2 + v11 - 8);
            int v21 = *(_DWORD *)((char *)v2 + v11 - 16);
            int v22 = v13;
            LODWORD(v12) = v23;
            std::__list_imp<char *>::clear(v20);
            std::__list_imp<char *>::clear(v25);
            v11 -= 56;
          }
          while ((int)v12 < (int)v19);
          uint64_t v14 = (void *)((char *)v2 + v11);
          *(void *)((char *)v2 + v11 + 56) = v28;
          *(_DWORD *)((char *)v2 + v11 + 64) = v29;
          if ((void *)((char *)v2 + v11 + 56) != &v28) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v14 + 9, v30[1], (uint64_t)v30);
          }
          int v15 = v32;
          *((_DWORD *)v14 + ++*(void *)(result + 24) = v31;
          *((_DWORD *)v14 + 26) = v15;
          uint64_t result = std::__list_imp<char *>::clear(v30);
        }
        uint64_t v3 = v5 + 7;
        v18 += 56;
        uint64_t v4 = v5;
      }
      while (v5 + 7 != a2);
    }
  }
  return result;
}

void sub_1B1FDCE74(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v74 = *(void *)a2;
  int v75 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = a2 + 16;
  std::list<int>::list(v76, a2 + 16);
  int v7 = *(_DWORD *)(a2 + 48);
  int v77 = *(_DWORD *)(a2 + 40);
  int v78 = v7;
  uint64_t v69 = *(void *)a1;
  int v70 = *(_DWORD *)(a1 + 8);
  int v8 = std::list<int>::list(v71, a1 + 16);
  int v9 = *(_DWORD *)(a1 + 48);
  int v72 = *(_DWORD *)(a1 + 40);
  int v73 = v9;
  int v10 = v74;
  std::__list_imp<char *>::clear(v8);
  std::__list_imp<char *>::clear(v76);
  if (v10 < (int)v69)
  {
    uint64_t v44 = *(void *)a3;
    int v45 = *(_DWORD *)(a3 + 8);
    std::list<int>::list(v46, a3 + 16);
    int v11 = *(_DWORD *)(a3 + 48);
    int v47 = *(_DWORD *)(a3 + 40);
    int v48 = v11;
    uint64_t v39 = *(void *)a2;
    int v40 = *(_DWORD *)(a2 + 8);
    int v12 = std::list<int>::list(v41, v6);
    int v13 = *(_DWORD *)(a2 + 48);
    int v42 = *(_DWORD *)(a2 + 40);
    int v43 = v13;
    int v14 = v44;
    std::__list_imp<char *>::clear(v12);
    std::__list_imp<char *>::clear(v46);
    if (v14 < (int)v39)
    {
      std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a1, (uint64_t *)a3);
      return 1;
    }
    std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a1, (uint64_t *)a2);
    uint64_t v34 = *(void *)a3;
    int v35 = *(_DWORD *)(a3 + 8);
    std::list<int>::list(v36, a3 + 16);
    int v25 = *(_DWORD *)(a3 + 48);
    int v37 = *(_DWORD *)(a3 + 40);
    int v38 = v25;
    uint64_t v30 = *(void *)a2;
    int v26 = std::list<int>::list(v31, v6);
    int v27 = *(_DWORD *)(a2 + 48);
    int v32 = *(_DWORD *)(a2 + 40);
    int v33 = v27;
    int v28 = v34;
    std::__list_imp<char *>::clear(v26);
    std::__list_imp<char *>::clear(v36);
    if (v28 >= (int)v30) {
      return 1;
    }
    uint64_t v23 = (uint64_t *)a2;
    int v24 = (uint64_t *)a3;
LABEL_9:
    std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(v23, v24);
    return 2;
  }
  uint64_t v64 = *(void *)a3;
  int v65 = *(_DWORD *)(a3 + 8);
  std::list<int>::list(v66, a3 + 16);
  int v15 = *(_DWORD *)(a3 + 48);
  int v67 = *(_DWORD *)(a3 + 40);
  int v68 = v15;
  uint64_t v59 = *(void *)a2;
  int v60 = *(_DWORD *)(a2 + 8);
  int v16 = std::list<int>::list(v61, v6);
  int v17 = *(_DWORD *)(a2 + 48);
  int v62 = *(_DWORD *)(a2 + 40);
  int v63 = v17;
  int v18 = v64;
  std::__list_imp<char *>::clear(v16);
  std::__list_imp<char *>::clear(v66);
  if (v18 < (int)v59)
  {
    std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a2, (uint64_t *)a3);
    uint64_t v54 = *(void *)a2;
    int v55 = *(_DWORD *)(a2 + 8);
    std::list<int>::list(v56, v6);
    int v19 = *(_DWORD *)(a2 + 48);
    int v57 = *(_DWORD *)(a2 + 40);
    int v58 = v19;
    uint64_t v49 = *(void *)a1;
    int v50 = *(_DWORD *)(a1 + 8);
    unint64_t v20 = std::list<int>::list(v51, a1 + 16);
    int v21 = *(_DWORD *)(a1 + 48);
    int v52 = *(_DWORD *)(a1 + 40);
    int v53 = v21;
    int v22 = v54;
    std::__list_imp<char *>::clear(v20);
    std::__list_imp<char *>::clear(v56);
    if (v22 >= (int)v49) {
      return 1;
    }
    uint64_t v23 = (uint64_t *)a1;
    int v24 = (uint64_t *)a2;
    goto LABEL_9;
  }
  return 0;
}

void sub_1B1FDD1D0(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  uint64_t v84 = *a1;
  int v85 = *((_DWORD *)a1 + 2);
  uint64_t v23 = a1 + 2;
  std::list<int>::list(v86, (uint64_t)(a1 + 2));
  int v4 = *((_DWORD *)v3 + 12);
  int v87 = *((_DWORD *)v3 + 10);
  int v88 = v4;
  uint64_t v79 = v84;
  int v80 = v85;
  std::list<int>::list(v81, (uint64_t)v86);
  int v82 = v87;
  int v83 = v88;
  uint64_t v74 = *(a2 - 7);
  int v75 = *((_DWORD *)a2 - 12);
  char v5 = std::list<int>::list(v76, (uint64_t)(a2 - 5));
  int v6 = *((_DWORD *)a2 - 2);
  int v77 = *((_DWORD *)a2 - 4);
  int v78 = v6;
  int v7 = v79;
  std::__list_imp<char *>::clear(v5);
  std::__list_imp<char *>::clear(v81);
  int v24 = v3;
  if (v7 >= (int)v74)
  {
    unint64_t v11 = (unint64_t)(v3 + 7);
    do
    {
      unint64_t v8 = v11;
      if (v11 >= (unint64_t)a2) {
        break;
      }
      uint64_t v59 = v84;
      int v60 = v85;
      std::list<int>::list(v61, (uint64_t)v86);
      int v62 = v87;
      int v63 = v88;
      uint64_t v54 = *(void *)v8;
      int v55 = *(_DWORD *)(v8 + 8);
      std::list<int>::list(v56, v8 + 16);
      int v12 = *(_DWORD *)(v8 + 48);
      int v57 = *(_DWORD *)(v8 + 40);
      int v58 = v12;
      int v13 = v59;
      std::__list_imp<char *>::clear(v56);
      std::__list_imp<char *>::clear(v61);
      unint64_t v11 = v8 + 56;
    }
    while (v13 >= (int)v54);
  }
  else
  {
    do
    {
      uint64_t v69 = v84;
      int v70 = v85;
      std::list<int>::list(v71, (uint64_t)v86);
      int v72 = v87;
      int v73 = v88;
      uint64_t v64 = v3[7];
      int v65 = *((_DWORD *)v3 + 16);
      std::list<int>::list(v66, (uint64_t)(v3 + 9));
      unint64_t v8 = (unint64_t)(v3 + 7);
      int v9 = *((_DWORD *)v3 + 26);
      int v67 = *((_DWORD *)v3 + 24);
      int v68 = v9;
      int v10 = v69;
      std::__list_imp<char *>::clear(v66);
      std::__list_imp<char *>::clear(v71);
      v3 += 7;
    }
    while (v10 >= (int)v64);
  }
  if (v8 >= (unint64_t)a2)
  {
    int v14 = a2;
  }
  else
  {
    do
    {
      uint64_t v49 = v84;
      int v50 = v85;
      std::list<int>::list(v51, (uint64_t)v86);
      int v52 = v87;
      int v53 = v88;
      uint64_t v44 = *(a2 - 7);
      int v45 = *((_DWORD *)a2 - 12);
      std::list<int>::list(v46, (uint64_t)(a2 - 5));
      int v14 = a2 - 7;
      int v15 = *((_DWORD *)a2 - 2);
      int v47 = *((_DWORD *)a2 - 4);
      int v48 = v15;
      int v16 = v49;
      std::__list_imp<char *>::clear(v46);
      std::__list_imp<char *>::clear(v51);
      a2 -= 7;
    }
    while (v16 < (int)v44);
  }
  while (v8 < (unint64_t)v14)
  {
    std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)v8, v14);
    unint64_t v17 = v8;
    do
    {
      uint64_t v39 = v84;
      int v40 = v85;
      std::list<int>::list(v41, (uint64_t)v86);
      int v42 = v87;
      int v43 = v88;
      uint64_t v34 = *(void *)(v17 + 56);
      int v35 = *(_DWORD *)(v17 + 64);
      std::list<int>::list(v36, v17 + 72);
      unint64_t v8 = v17 + 56;
      int v37 = *(_DWORD *)(v17 + 96);
      int v38 = *(_DWORD *)(v17 + 104);
      int v18 = v39;
      int v19 = v34;
      std::__list_imp<char *>::clear(v36);
      std::__list_imp<char *>::clear(v41);
      v17 += 56;
    }
    while (v18 >= v19);
    unint64_t v20 = v14;
    do
    {
      uint64_t v29 = v84;
      int v30 = v85;
      std::list<int>::list(v31, (uint64_t)v86);
      int v32 = v87;
      int v33 = v88;
      uint64_t v25 = *(v20 - 7);
      std::list<int>::list(v26, (uint64_t)(v20 - 5));
      int v14 = v20 - 7;
      int v27 = *((_DWORD *)v20 - 4);
      int v28 = *((_DWORD *)v20 - 2);
      int v21 = v29;
      std::__list_imp<char *>::clear(v26);
      std::__list_imp<char *>::clear(v31);
      v20 -= 7;
    }
    while (v21 < (int)v25);
  }
  if ((uint64_t *)(v8 - 56) != v24)
  {
    *int v24 = *(void *)(v8 - 56);
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v8 - 48);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v23, *(void *)(v8 - 32), v8 - 40);
    *((_DWORD *)v24 + 10) = *(_DWORD *)(v8 - 16);
    *((_DWORD *)v24 + 12) = *(_DWORD *)(v8 - 8);
  }
  *(void *)(v8 - 56) = v84;
  *(_DWORD *)(v8 - 48) = v85;
  if ((uint64_t *)(v8 - 56) != &v84) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v8 - 40), v86[1], (uint64_t)v86);
  }
  *(_DWORD *)(v8 - 16) = v87;
  *(_DWORD *)(v8 - 8) = v88;
  std::__list_imp<char *>::clear(v86);
  return v8;
}

void sub_1B1FDD698(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>> *,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v78 = *a1;
  int v79 = *((_DWORD *)a1 + 2);
  int v4 = a1 + 2;
  std::list<int>::list(v80, (uint64_t)(a1 + 2));
  uint64_t v5 = 0;
  int v6 = *((_DWORD *)a1 + 12);
  int v81 = *((_DWORD *)a1 + 10);
  int v82 = v6;
  do
  {
    uint64_t v73 = a1[v5 + 7];
    int v74 = a1[v5 + 8];
    std::list<int>::list(v75, (uint64_t)&a1[v5 + 9]);
    int v7 = a1[v5 + 13];
    int v76 = a1[v5 + 12];
    int v77 = v7;
    uint64_t v68 = v78;
    int v69 = v79;
    std::list<int>::list(v70, (uint64_t)v80);
    int v71 = v81;
    int v72 = v82;
    int v8 = v73;
    std::__list_imp<char *>::clear(v70);
    std::__list_imp<char *>::clear(v75);
    v5 += 7;
  }
  while (v8 < (int)v68);
  unint64_t v9 = (unint64_t)&a1[v5];
  if (v5 == 7)
  {
    while (v9 < a2)
    {
      uint64_t v63 = *(void *)(a2 - 56);
      int v64 = *(_DWORD *)(a2 - 48);
      std::list<int>::list(v65, a2 - 40);
      int v16 = *(_DWORD *)(a2 - 8);
      int v66 = *(_DWORD *)(a2 - 16);
      int v67 = v16;
      uint64_t v58 = v78;
      int v59 = v79;
      std::list<int>::list(v60, (uint64_t)v80);
      int v61 = v81;
      int v62 = v82;
      int v17 = v63;
      std::__list_imp<char *>::clear(v60);
      std::__list_imp<char *>::clear(v65);
      unint64_t v10 = a2 - 56;
      a2 -= 56;
      if (v17 < (int)v58) {
        goto LABEL_11;
      }
    }
    unint64_t v10 = a2;
  }
  else
  {
    unint64_t v10 = a2;
    do
    {
      uint64_t v12 = *(void *)(v10 - 56);
      unint64_t v11 = v10 - 56;
      uint64_t v53 = v12;
      int v54 = *(_DWORD *)(v11 + 8);
      unint64_t v13 = v11;
      std::list<int>::list(v55, v11 + 16);
      int v14 = *(_DWORD *)(a2 - 8);
      int v56 = *(_DWORD *)(a2 - 16);
      int v57 = v14;
      uint64_t v48 = v78;
      int v49 = v79;
      std::list<int>::list(v50, (uint64_t)v80);
      int v51 = v81;
      int v52 = v82;
      int v15 = v53;
      std::__list_imp<char *>::clear(v50);
      std::__list_imp<char *>::clear(v55);
      unint64_t v10 = v13;
      a2 = v13;
    }
    while (v15 >= (int)v48);
  }
LABEL_11:
  int v27 = v4;
  int v28 = a1;
  if (v9 < v10)
  {
    unint64_t v18 = v10;
    do
    {
      std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)v9, (uint64_t *)v18);
      unint64_t v19 = v9;
      do
      {
        uint64_t v20 = *(void *)(v9 + 56);
        v9 += 56;
        uint64_t v43 = v20;
        int v44 = *(_DWORD *)(v9 + 8);
        std::list<int>::list(v45, v9 + 16);
        int v46 = *(_DWORD *)(v19 + 96);
        int v47 = *(_DWORD *)(v19 + 104);
        uint64_t v38 = v78;
        int v39 = v79;
        std::list<int>::list(v40, (uint64_t)v80);
        int v41 = v81;
        int v42 = v82;
        int v21 = v43;
        int v22 = v38;
        std::__list_imp<char *>::clear(v40);
        std::__list_imp<char *>::clear(v45);
        unint64_t v19 = v9;
      }
      while (v21 < v22);
      unint64_t v23 = v18;
      do
      {
        uint64_t v24 = *(void *)(v18 - 56);
        v18 -= 56;
        uint64_t v33 = v24;
        int v34 = *(_DWORD *)(v18 + 8);
        std::list<int>::list(v35, v18 + 16);
        int v36 = *(_DWORD *)(v23 - 16);
        int v37 = *(_DWORD *)(v23 - 8);
        int v29 = v78;
        std::list<int>::list(v30, (uint64_t)v80);
        int v31 = v81;
        int v32 = v82;
        int v25 = v33;
        std::__list_imp<char *>::clear(v30);
        std::__list_imp<char *>::clear(v35);
        unint64_t v23 = v18;
      }
      while (v25 >= v29);
    }
    while (v9 < v18);
  }
  if ((uint64_t *)(v9 - 56) != v28)
  {
    *int v28 = *(void *)(v9 - 56);
    *((_DWORD *)v28 + 2) = *(_DWORD *)(v9 - 48);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v27, *(void *)(v9 - 32), v9 - 40);
    *((_DWORD *)v28 + 10) = *(_DWORD *)(v9 - 16);
    *((_DWORD *)v28 + 12) = *(_DWORD *)(v9 - 8);
  }
  *(void *)(v9 - 56) = v78;
  *(_DWORD *)(v9 - 48) = v79;
  if ((uint64_t *)(v9 - 56) != &v78) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v9 - 40), v80[1], (uint64_t)v80);
  }
  *(_DWORD *)(v9 - 16) = v81;
  *(_DWORD *)(v9 - 8) = v82;
  std::__list_imp<char *>::clear(v80);
  return v9 - 56;
}

void sub_1B1FDDB44(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(uint64_t a1, uint64_t a2)
{
  BOOL v4 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2 - 56;
      uint64_t v62 = *(void *)(a2 - 56);
      int v63 = *(_DWORD *)(a2 - 48);
      std::list<int>::list(v64, a2 - 40);
      int v6 = *(_DWORD *)(v5 + 48);
      int v65 = *(_DWORD *)(v5 + 40);
      int v66 = v6;
      uint64_t v57 = *(void *)a1;
      int v58 = *(_DWORD *)(a1 + 8);
      int v7 = std::list<int>::list(v59, a1 + 16);
      int v8 = *(_DWORD *)(a1 + 48);
      int v60 = *(_DWORD *)(a1 + 40);
      int v61 = v8;
      int v9 = v62;
      std::__list_imp<char *>::clear(v7);
      std::__list_imp<char *>::clear(v64);
      if (v9 < (int)v57) {
        std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a1, (uint64_t *)v5);
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a1 + 56, a2 - 56);
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a1 + 56, a1 + 112, a2 - 56);
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
      return v4;
    default:
      uint64_t v10 = a1 + 112;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a1 + 56, a1 + 112);
      uint64_t v11 = a1 + 168;
      if (a1 + 168 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v33 = 0;
      unint64_t v13 = v51;
      uint64_t v34 = a2;
      break;
  }
  while (1)
  {
    uint64_t v52 = *(void *)v11;
    int v53 = *(_DWORD *)(v11 + 8);
    std::list<int>::list(v54, v11 + 16);
    int v14 = *(_DWORD *)(v11 + 48);
    int v55 = *(_DWORD *)(v11 + 40);
    int v56 = v14;
    uint64_t v49 = *(void *)v10;
    int v50 = *(_DWORD *)(v10 + 8);
    int v15 = std::list<int>::list(v13, v10 + 16);
    int v16 = *(_DWORD *)(v10 + 48);
    v51[6] = *(_DWORD *)(v10 + 40);
    v51[8] = v16;
    int v17 = v52;
    int v18 = v49;
    unint64_t v19 = v15;
    std::__list_imp<char *>::clear(v15);
    std::__list_imp<char *>::clear(v54);
    if (v17 < v18) {
      break;
    }
    uint64_t v30 = v34;
    uint64_t v22 = v12;
    unint64_t v13 = v19;
LABEL_18:
    uint64_t v10 = v11;
    uint64_t v12 = v22 + 56;
    v11 += 56;
    if (v11 == v30) {
      return 1;
    }
  }
  uint64_t v44 = *(void *)v11;
  int v45 = *(_DWORD *)(v11 + 8);
  uint64_t v20 = std::list<int>::list(v46, v11 + 16);
  int v21 = *(_DWORD *)(v11 + 48);
  int v47 = *(_DWORD *)(v11 + 40);
  int v48 = v21;
  uint64_t v22 = v12;
  unint64_t v23 = v20;
  uint64_t v24 = v22;
  unint64_t v13 = v19;
  while (1)
  {
    uint64_t v25 = a1 + v24;
    *(void *)(v25 + 168) = *(void *)(a1 + v24 + 112);
    *(_DWORD *)(v25 + 176) = *(_DWORD *)(a1 + v24 + 120);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + v24 + 184), *(void *)(a1 + v24 + 136), a1 + 128 + v24);
    *(_DWORD *)(v25 + 208) = *(_DWORD *)(v25 + 152);
    *(_DWORD *)(v25 + 216) = *(_DWORD *)(v25 + 160);
    if (v24 == -112) {
      break;
    }
    uint64_t v39 = v44;
    int v40 = v45;
    std::list<int>::list(v41, (uint64_t)v23);
    int v42 = v47;
    int v43 = v48;
    uint64_t v35 = *(void *)(a1 + v24 + 56);
    std::list<int>::list(v36, a1 + v24 + 72);
    int v26 = *(_DWORD *)(a1 + v24 + 104);
    int v37 = *(_DWORD *)(a1 + v24 + 96);
    int v38 = v26;
    int v27 = v39;
    std::__list_imp<char *>::clear(v36);
    std::__list_imp<char *>::clear(v41);
    v24 -= 56;
    BOOL v28 = v27 < (int)v35;
    unint64_t v13 = v19;
    if (!v28)
    {
      uint64_t v29 = a1 + v24 + 168;
      goto LABEL_14;
    }
  }
  uint64_t v29 = a1;
LABEL_14:
  *(void *)uint64_t v29 = v44;
  *(_DWORD *)(v29 + 8) = v45;
  uint64_t v30 = v34;
  if ((uint64_t *)v29 != &v44) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v29 + 16), v46[1], (uint64_t)v23);
  }
  int v31 = v48;
  *(_DWORD *)(v29 + 40) = v47;
  *(_DWORD *)(v29 + 48) = v31;
  if (v33 != 7)
  {
    ++v33;
    std::__list_imp<char *>::clear(v23);
    goto LABEL_18;
  }
  BOOL v4 = v11 + 56 == v34;
  std::__list_imp<char *>::clear(v23);
  return v4;
}

void sub_1B1FDDFA8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  BOOL v4 = a1 + 2;
  std::list<int>::list(v10, (uint64_t)(a1 + 2));
  int v5 = *((_DWORD *)a1 + 12);
  int v11 = *((_DWORD *)a1 + 10);
  int v12 = v5;
  *a1 = *a2;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  if (a1 != a2) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v4, a2[3], (uint64_t)(a2 + 2));
  }
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
  *a2 = v8;
  *((_DWORD *)a2 + 2) = v9;
  if (&v8 != a2) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(a2 + 2, v10[1], (uint64_t)v10);
  }
  int v6 = v12;
  *((_DWORD *)a2 + 10) = v11;
  *((_DWORD *)a2 + 12) = v6;
  return std::__list_imp<char *>::clear(v10);
}

void sub_1B1FDE0EC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a2, a3);
  uint64_t v45 = *(void *)a4;
  int v46 = *(_DWORD *)(a4 + 8);
  std::list<int>::list(v47, a4 + 16);
  int v8 = *(_DWORD *)(a4 + 48);
  int v48 = *(_DWORD *)(a4 + 40);
  int v49 = v8;
  uint64_t v40 = *(void *)a3;
  int v41 = *(_DWORD *)(a3 + 8);
  int v9 = std::list<int>::list(v42, a3 + 16);
  int v10 = *(_DWORD *)(a3 + 48);
  int v43 = *(_DWORD *)(a3 + 40);
  int v44 = v10;
  int v11 = v45;
  std::__list_imp<char *>::clear(v9);
  uint64_t result = std::__list_imp<char *>::clear(v47);
  if (v11 < (int)v40)
  {
    std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a3, (uint64_t *)a4);
    uint64_t v35 = *(void *)a3;
    int v36 = *(_DWORD *)(a3 + 8);
    std::list<int>::list(v37, a3 + 16);
    int v13 = *(_DWORD *)(a3 + 48);
    int v38 = *(_DWORD *)(a3 + 40);
    int v39 = v13;
    uint64_t v30 = *(void *)a2;
    int v31 = *(_DWORD *)(a2 + 8);
    int v14 = std::list<int>::list(v32, a2 + 16);
    int v15 = *(_DWORD *)(a2 + 48);
    int v33 = *(_DWORD *)(a2 + 40);
    int v34 = v15;
    int v16 = v35;
    std::__list_imp<char *>::clear(v14);
    uint64_t result = std::__list_imp<char *>::clear(v37);
    if (v16 < (int)v30)
    {
      std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a2, (uint64_t *)a3);
      uint64_t v25 = *(void *)a2;
      int v26 = *(_DWORD *)(a2 + 8);
      std::list<int>::list(v27, a2 + 16);
      int v17 = *(_DWORD *)(a2 + 48);
      int v28 = *(_DWORD *)(a2 + 40);
      int v29 = v17;
      uint64_t v21 = *(void *)a1;
      int v18 = std::list<int>::list(v22, a1 + 16);
      int v19 = *(_DWORD *)(a1 + 48);
      int v23 = *(_DWORD *)(a1 + 40);
      int v24 = v19;
      int v20 = v25;
      std::__list_imp<char *>::clear(v18);
      uint64_t result = std::__list_imp<char *>::clear(v27);
      if (v20 < (int)v21) {
        return std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
  return result;
}

void sub_1B1FDE308(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a2, a3, a4);
  uint64_t v61 = *(void *)a5;
  int v62 = *(_DWORD *)(a5 + 8);
  std::list<int>::list(v63, a5 + 16);
  int v10 = *(_DWORD *)(a5 + 48);
  int v64 = *(_DWORD *)(a5 + 40);
  int v65 = v10;
  uint64_t v56 = *(void *)a4;
  int v57 = *(_DWORD *)(a4 + 8);
  int v11 = std::list<int>::list(v58, a4 + 16);
  int v12 = *(_DWORD *)(a4 + 48);
  int v59 = *(_DWORD *)(a4 + 40);
  int v60 = v12;
  int v13 = v61;
  std::__list_imp<char *>::clear(v11);
  uint64_t result = std::__list_imp<char *>::clear(v63);
  if (v13 < (int)v56)
  {
    std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a4, (uint64_t *)a5);
    uint64_t v51 = *(void *)a4;
    int v52 = *(_DWORD *)(a4 + 8);
    std::list<int>::list(v53, a4 + 16);
    int v15 = *(_DWORD *)(a4 + 48);
    int v54 = *(_DWORD *)(a4 + 40);
    int v55 = v15;
    uint64_t v46 = *(void *)a3;
    int v47 = *(_DWORD *)(a3 + 8);
    int v16 = std::list<int>::list(v48, a3 + 16);
    int v17 = *(_DWORD *)(a3 + 48);
    int v49 = *(_DWORD *)(a3 + 40);
    int v50 = v17;
    int v18 = v51;
    std::__list_imp<char *>::clear(v16);
    uint64_t result = std::__list_imp<char *>::clear(v53);
    if (v18 < (int)v46)
    {
      std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a3, (uint64_t *)a4);
      uint64_t v41 = *(void *)a3;
      int v42 = *(_DWORD *)(a3 + 8);
      std::list<int>::list(v43, a3 + 16);
      int v19 = *(_DWORD *)(a3 + 48);
      int v44 = *(_DWORD *)(a3 + 40);
      int v45 = v19;
      uint64_t v36 = *(void *)a2;
      int v37 = *(_DWORD *)(a2 + 8);
      int v20 = std::list<int>::list(v38, a2 + 16);
      int v21 = *(_DWORD *)(a2 + 48);
      int v39 = *(_DWORD *)(a2 + 40);
      int v40 = v21;
      int v22 = v41;
      std::__list_imp<char *>::clear(v20);
      uint64_t result = std::__list_imp<char *>::clear(v43);
      if (v22 < (int)v36)
      {
        std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a2, (uint64_t *)a3);
        uint64_t v31 = *(void *)a2;
        int v32 = *(_DWORD *)(a2 + 8);
        std::list<int>::list(v33, a2 + 16);
        int v23 = *(_DWORD *)(a2 + 48);
        int v34 = *(_DWORD *)(a2 + 40);
        int v35 = v23;
        uint64_t v27 = *(void *)a1;
        int v24 = std::list<int>::list(v28, a1 + 16);
        int v25 = *(_DWORD *)(a1 + 48);
        int v29 = *(_DWORD *)(a1 + 40);
        int v30 = v25;
        int v26 = v31;
        std::__list_imp<char *>::clear(v24);
        uint64_t result = std::__list_imp<char *>::clear(v33);
        if (v26 < (int)v27) {
          return std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)a1, (uint64_t *)a2);
        }
      }
    }
  }
  return result;
}

void sub_1B1FDE5C0(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != (uint64_t *)a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - (void)a1;
    uint64_t v9 = (a2 - (uint64_t)a1) / 56;
    if (a2 - (uint64_t)a1 >= 57)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[7 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a4, v9, v12);
        v12 -= 7;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        uint64_t v25 = *(void *)v14;
        int v26 = *(_DWORD *)(v14 + 8);
        std::list<int>::list(v27, v14 + 16);
        int v15 = *(_DWORD *)(v14 + 48);
        int v28 = *(_DWORD *)(v14 + 40);
        int v29 = v15;
        uint64_t v21 = *a1;
        std::list<int>::list(v22, (uint64_t)(a1 + 2));
        int v16 = *((_DWORD *)a1 + 12);
        int v23 = *((_DWORD *)a1 + 10);
        int v24 = v16;
        int v17 = v25;
        std::__list_imp<char *>::clear(v22);
        std::__list_imp<char *>::clear(v27);
        if (v17 < (int)v21)
        {
          std::swap[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t *)v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, a4, v9, a1);
        }
        v14 += 56;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 57)
    {
      unint64_t v18 = v8 / 0x38uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(a1, v6, a4, v18);
        v6 -= 56;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1B1FDE7C4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(void *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v30 = result;
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    int v5 = a4;
    int64_t v28 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (a4 - result))
    {
      int64_t v6 = (0xDB6DB6DB6DB6DB6ELL * (a4 - result)) | 1;
      int v7 = &result[7 * v6];
      int64_t v8 = 0xDB6DB6DB6DB6DB6ELL * (a4 - result) + 2;
      if (v8 < a3)
      {
        uint64_t v70 = *v7;
        uint64_t v9 = &result[7 * v6];
        int v71 = v9[2];
        std::list<int>::list(v72, (uint64_t)(v9 + 4));
        int v10 = v9[12];
        int v73 = v9[10];
        int v74 = v10;
        uint64_t v65 = v7[7];
        int v66 = *((_DWORD *)v7 + 16);
        unint64_t v11 = std::list<int>::list(v67, (uint64_t)(v7 + 9));
        int v12 = *((_DWORD *)v7 + 26);
        int v68 = *((_DWORD *)v7 + 24);
        int v69 = v12;
        LODWORD(v9) = v70;
        std::__list_imp<char *>::clear(v11);
        std::__list_imp<char *>::clear(v72);
        v7 += 7 * ((int)v9 < (int)v65);
        if ((int)v9 < (int)v65) {
          int64_t v6 = v8;
        }
      }
      uint64_t v60 = *v7;
      int v61 = *((_DWORD *)v7 + 2);
      std::list<int>::list(v62, (uint64_t)(v7 + 2));
      int v13 = *((_DWORD *)v7 + 12);
      int v63 = *((_DWORD *)v7 + 10);
      int v64 = v13;
      uint64_t v55 = *v5;
      int v56 = *((_DWORD *)v5 + 2);
      uint64_t v14 = std::list<int>::list(v57, (uint64_t)(v5 + 2));
      int v15 = *((_DWORD *)v5 + 12);
      int v58 = *((_DWORD *)v5 + 10);
      int v59 = v15;
      int v16 = v60;
      std::__list_imp<char *>::clear(v14);
      uint64_t result = std::__list_imp<char *>::clear(v62);
      if (v16 >= (int)v55)
      {
        uint64_t v50 = *v5;
        int v51 = *((_DWORD *)v5 + 2);
        std::list<int>::list(v52, (uint64_t)(v5 + 2));
        int v17 = *((_DWORD *)v5 + 12);
        int v53 = *((_DWORD *)v5 + 10);
        int v54 = v17;
        do
        {
          unint64_t v18 = v7;
          *int v5 = *v7;
          *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
          if (v5 != v7) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v5 + 2, v7[3], (uint64_t)(v7 + 2));
          }
          *((_DWORD *)v5 + 10) = *((_DWORD *)v7 + 10);
          *((_DWORD *)v5 + 12) = *((_DWORD *)v7 + 12);
          if (v28 < v6) {
            break;
          }
          uint64_t v19 = (2 * v6) | 1;
          int v7 = &v30[7 * v19];
          int64_t v6 = 2 * v6 + 2;
          if (v6 >= a3)
          {
            int64_t v6 = v19;
          }
          else
          {
            uint64_t v45 = *v7;
            int v20 = &v30[7 * v19];
            int v46 = *((_DWORD *)v20 + 2);
            std::list<int>::list(v47, (uint64_t)(v20 + 2));
            uint64_t v21 = &v30[7 * v19];
            int v22 = *((_DWORD *)v21 + 10);
            LODWORD(v21) = *((_DWORD *)v21 + 12);
            int v48 = v22;
            int v49 = (int)v21;
            uint64_t v40 = v7[7];
            int v41 = *((_DWORD *)v7 + 16);
            std::list<int>::list(v42, (uint64_t)(v7 + 9));
            int v23 = *((_DWORD *)v7 + 26);
            int v43 = *((_DWORD *)v7 + 24);
            int v44 = v23;
            int v24 = v45;
            int v25 = v40;
            std::__list_imp<char *>::clear(v42);
            std::__list_imp<char *>::clear(v47);
            v7 += 7 * (v24 < v25);
            if (v24 >= v25) {
              int64_t v6 = v19;
            }
          }
          uint64_t v35 = *v7;
          int v36 = *((_DWORD *)v7 + 2);
          std::list<int>::list(v37, (uint64_t)(v7 + 2));
          int v26 = *((_DWORD *)v7 + 12);
          int v38 = *((_DWORD *)v7 + 10);
          int v39 = v26;
          int v31 = v50;
          std::list<int>::list(v32, (uint64_t)v52);
          int v33 = v53;
          int v34 = v54;
          int v27 = v35;
          std::__list_imp<char *>::clear(v32);
          std::__list_imp<char *>::clear(v37);
          int v5 = v18;
        }
        while (v27 >= v31);
        *unint64_t v18 = v50;
        *((_DWORD *)v18 + 2) = v51;
        if (v18 != &v50) {
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v18 + 2, v52[1], (uint64_t)v52);
        }
        *((_DWORD *)v18 + 10) = v53;
        *((_DWORD *)v18 + 12) = v54;
        return std::__list_imp<char *>::clear(v52);
      }
    }
  }
  return result;
}

void sub_1B1FDEBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    int v7 = result;
    uint64_t v12 = *result;
    int v13 = *((_DWORD *)result + 2);
    std::list<int>::list(&v14, (uint64_t)(result + 2));
    int v8 = *((_DWORD *)v7 + 12);
    int v16 = *((_DWORD *)v7 + 10);
    int v17 = v8;
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v7, a3, a4);
    int v10 = v9;
    if (v9 == (uint64_t *)(a2 - 56))
    {
      *uint64_t v9 = v12;
      *((_DWORD *)v9 + 2) = v13;
      if (v9 != &v12) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v9 + 2, v15, (uint64_t)&v14);
      }
      *((_DWORD *)v10 + 10) = v16;
      *((_DWORD *)v10 + 12) = v17;
    }
    else
    {
      *uint64_t v9 = *(void *)(a2 - 56);
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 - 48);
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v9 + 2, *(void *)(a2 - 32), a2 - 40);
      *((_DWORD *)v10 + 10) = *(_DWORD *)(a2 - 16);
      *((_DWORD *)v10 + 12) = *(_DWORD *)(a2 - 8);
      *(void *)(a2 - 56) = v12;
      *(_DWORD *)(a2 - 48) = v13;
      if ((uint64_t *)(a2 - 56) != &v12) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a2 - 40), v15, (uint64_t)&v14);
      }
      int v11 = v17;
      *(_DWORD *)(a2 - 16) = v16;
      *(_DWORD *)(a2 - 8) = v11;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(v7, (uint64_t)(v10 + 7), a3, 0x6DB6DB6DB6DB6DB7 * (v10 + 7 - v7));
    }
    return std::__list_imp<char *>::clear(&v14);
  }
  return result;
}

void sub_1B1FDEDA0(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = v5 + 1;
    uint64_t v9 = &a1[7 * v5 + 7];
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      uint64_t v18 = *v9;
      uint64_t v12 = &a1[7 * v8];
      int v19 = *((_DWORD *)v12 + 2);
      std::list<int>::list(v20, (uint64_t)(v12 + 2));
      int v21 = *((_DWORD *)v12 + 10);
      int v22 = *((_DWORD *)v12 + 12);
      uint64_t v14 = v9[7];
      std::list<int>::list(v15, (uint64_t)(v9 + 9));
      int v16 = *((_DWORD *)v9 + 24);
      int v17 = *((_DWORD *)v9 + 26);
      LODWORD(v12) = v18;
      std::__list_imp<char *>::clear(v15);
      std::__list_imp<char *>::clear(v20);
      v9 += 7 * ((int)v12 < (int)v14);
      if ((int)v12 < (int)v14) {
        uint64_t v5 = v11;
      }
    }
    *a1 = *v9;
    *((_DWORD *)a1 + 2) = *((_DWORD *)v9 + 2);
    if (a1 != v9) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(a1 + 2, v9[3], (uint64_t)(v9 + 2));
    }
    *((_DWORD *)a1 + 10) = *((_DWORD *)v9 + 10);
    *((_DWORD *)a1 + 12) = *((_DWORD *)v9 + 12);
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

void sub_1B1FDEF34(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>> &,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>*>(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = &result[7 * (v4 >> 1)];
    uint64_t v38 = *v8;
    int v39 = *((_DWORD *)v8 + 2);
    std::list<int>::list(v40, (uint64_t)(v8 + 2));
    int v9 = *((_DWORD *)v8 + 12);
    int v41 = *((_DWORD *)v8 + 10);
    int v42 = v9;
    uint64_t v10 = (uint64_t *)(a2 - 56);
    uint64_t v33 = *(void *)(a2 - 56);
    int v34 = *(_DWORD *)(a2 - 48);
    uint64_t v11 = std::list<int>::list(v35, a2 - 40);
    int v12 = *(_DWORD *)(a2 - 8);
    int v36 = *(_DWORD *)(a2 - 16);
    int v37 = v12;
    int v13 = v38;
    std::__list_imp<char *>::clear(v11);
    uint64_t result = std::__list_imp<char *>::clear(v40);
    if (v13 < (int)v33)
    {
      uint64_t v28 = *(void *)(a2 - 56);
      int v29 = *(_DWORD *)(a2 - 48);
      std::list<int>::list(v30, a2 - 40);
      int v14 = *(_DWORD *)(a2 - 8);
      int v31 = *(_DWORD *)(a2 - 16);
      int v32 = v14;
      do
      {
        uint64_t v15 = v8;
        *uint64_t v10 = *v8;
        *((_DWORD *)v10 + 2) = *((_DWORD *)v8 + 2);
        if (v10 != v8) {
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v10 + 2, v8[3], (uint64_t)(v8 + 2));
        }
        *((_DWORD *)v10 + 10) = *((_DWORD *)v8 + 10);
        *((_DWORD *)v10 + 12) = *((_DWORD *)v8 + 12);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = &v6[7 * v7];
        uint64_t v23 = *v8;
        int v24 = *((_DWORD *)v8 + 2);
        std::list<int>::list(v25, (uint64_t)(v8 + 2));
        int v16 = *((_DWORD *)v8 + 12);
        int v26 = *((_DWORD *)v8 + 10);
        int v27 = v16;
        int v19 = v28;
        std::list<int>::list(v20, (uint64_t)v30);
        int v21 = v31;
        int v22 = v32;
        int v17 = v23;
        std::__list_imp<char *>::clear(v20);
        std::__list_imp<char *>::clear(v25);
        uint64_t v10 = v15;
      }
      while (v17 < v19);
      *uint64_t v15 = v28;
      *((_DWORD *)v15 + 2) = v29;
      if (v15 != &v28) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 + 2, v30[1], (uint64_t)v30);
      }
      int v18 = v32;
      *((_DWORD *)v15 + 10) = v31;
      *((_DWORD *)v15 + 12) = v18;
      return std::__list_imp<char *>::clear(v30);
    }
  }
  return result;
}

void sub_1B1FDF194(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::Split(void *a1, int a2)
{
  for (unint64_t i = *(int **)(a1[4] + 8 * a2); i; unint64_t i = (int *)*((void *)i + 1))
  {
    if (*(void *)(*(void *)(*(void *)(a1[32] + 64) + 8 * (*i + 1)) + 64) != *(void *)(*(void *)(*(void *)(a1[32] + 64) + 8 * (*i + 1)) + 56)) {
      operator new();
    }
  }
  uint64_t v4 = a1[33];
  uint64_t v5 = *(void **)v4;
  uint64_t v6 = (void *)(v4 + 8);
  uint64_t v7 = *(void *)(v4 + 8);
  if (*(void *)v4 != v7)
  {
    int v8 = -1;
    while (1)
    {
      int v9 = (void *)*v5;
      uint64_t v35 = *(void **)(v4 + 24);
      if (v7 - (uint64_t)v5 >= 9)
      {
        uint64_t v10 = (void *)*v5;
        uint64_t v11 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>> **>>(v5, (uint64_t)&v35, (unint64_t)(v7 - (void)v5) >> 3);
        int v12 = (void *)(v7 - 8);
        if ((void **)(v7 - 8) == v11)
        {
          void *v11 = v10;
        }
        else
        {
          void *v11 = (void *)*v12;
          void *v12 = v10;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>> **>>((BOOL)v5, (uint64_t)(v11 + 1), (uint64_t)&v35, v11 + 1 - (void **)v5);
        }
      }
      *v6 -= 8;
      if (!*v9) {
        break;
      }
      char v13 = (*(uint64_t (**)(void))(*(void *)*v9 + 24))(*v9);
      uint64_t v14 = *v9;
      if ((v13 & 1) == 0)
      {
        if (v14)
        {
          int v16 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
          if (*v9)
          {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)*v9 + 32))(*v9);
            goto LABEL_24;
          }
        }
        else
        {
LABEL_22:
          int v16 = (int *)(v9[1] + 56 * v9[4]);
        }
        uint64_t v17 = v9[1] + 56 * v9[4];
LABEL_24:
        uint64_t v18 = *(int *)(v17 + 48);
        int v19 = *v16;
        if (v8 != *v16) {
          fst::Partition<int>::FinalizeSplit<fst::LifoQueue<int>>((uint64_t)a1, (uint64_t)(a1 + 23));
        }
        if (*(_DWORD *)(a1[13] + 4 * *(int *)(a1[10] + 4 * (v18 - 1))) >= 2u) {
          fst::Partition<int>::SplitOn(a1, v18 - 1);
        }
        if (*v9)
        {
          (*(void (**)(void))(*(void *)*v9 + 40))(*v9);
          if (*v9)
          {
            if ((*(uint64_t (**)(void))(*(void *)*v9 + 24))(*v9))
            {
              if (*v9)
              {
                (*(void (**)(void))(*(void *)*v9 + 8))(*v9);
                goto LABEL_39;
              }
LABEL_37:
              int v24 = (_DWORD *)v9[3];
              if (v24) {
                --*v24;
              }
LABEL_39:
              MEMORY[0x1B3EA8670](v9, 0x1070C401ACC3EEFLL);
LABEL_55:
              int v8 = v19;
              goto LABEL_56;
            }
LABEL_35:
            int v20 = (void **)a1[33];
            int v21 = (char *)v20[1];
            unint64_t v22 = (unint64_t)v20[2];
            if ((unint64_t)v21 >= v22)
            {
              uint64_t v25 = (v21 - (unsigned char *)*v20) >> 3;
              if ((unint64_t)(v25 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v26 = v22 - (void)*v20;
              uint64_t v27 = v26 >> 2;
              if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
                uint64_t v27 = v25 + 1;
              }
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v27;
              }
              if (v28) {
                int v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v20 + 2), v28);
              }
              else {
                int v29 = 0;
              }
              int v30 = &v29[8 * v25];
              *(void *)int v30 = v9;
              uint64_t v23 = (uint64_t)(v30 + 8);
              int v32 = (char *)*v20;
              int v31 = (char *)v20[1];
              if (v31 != *v20)
              {
                do
                {
                  uint64_t v33 = *((void *)v31 - 1);
                  v31 -= 8;
                  *((void *)v30 - 1) = v33;
                  v30 -= 8;
                }
                while (v31 != v32);
                int v31 = (char *)*v20;
              }
              void *v20 = v30;
              v20[1] = (void *)v23;
              _OWORD v20[2] = &v29[8 * v28];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *(void *)int v21 = v9;
              uint64_t v23 = (uint64_t)(v21 + 8);
            }
            v20[1] = (void *)v23;
            int v34 = *v20;
            uint64_t v35 = v20[3];
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>> **>>((BOOL)v34, v23, (uint64_t)&v35, (v23 - (uint64_t)v34) >> 3);
            goto LABEL_55;
          }
        }
        else
        {
          ++v9[4];
        }
        if (v9[4] >= v9[2]) {
          goto LABEL_37;
        }
        goto LABEL_35;
      }
      if (!v14) {
        goto LABEL_16;
      }
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
LABEL_18:
      MEMORY[0x1B3EA8670](v9, 0x1070C401ACC3EEFLL);
LABEL_56:
      uint64_t v4 = a1[33];
      uint64_t v5 = *(void **)v4;
      uint64_t v6 = (void *)(v4 + 8);
      uint64_t v7 = *(void *)(v4 + 8);
      if (*(void *)v4 == v7) {
        goto LABEL_57;
      }
    }
    if (v9[4] < v9[2]) {
      goto LABEL_22;
    }
LABEL_16:
    uint64_t v15 = (_DWORD *)v9[3];
    if (v15) {
      --*v15;
    }
    goto LABEL_18;
  }
LABEL_57:
  fst::Partition<int>::FinalizeSplit<fst::LifoQueue<int>>((uint64_t)a1, (uint64_t)(a1 + 23));
}

void sub_1B1FDF738(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C401ACC3EEFLL);
  _Unwind_Resume(a1);
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>> **>>(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unint64_t v7 = v4 >> 1;
    int v8 = (void **)(result + 8 * (v4 >> 1));
    int v9 = (void **)(a2 - 8);
    uint64_t result = fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a3, *v8, *(void **)(a2 - 8));
    if (result)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *int v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        int v8 = (void **)(v6 + 8 * v7);
        uint64_t result = fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a3, *v8, v10);
        int v9 = (void **)v11;
      }
      while (result);
      void *v11 = v10;
    }
  }
  return result;
}

BOOL fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare::operator()(uint64_t a1, void *a2, void *a3)
{
  if (*a2) {
    unint64_t v4 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)*a2 + 32))(*a2);
  }
  else {
    unint64_t v4 = (_DWORD *)(a2[1] + 56 * a2[4]);
  }
  if (*a3) {
    uint64_t v5 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)*a3 + 32))(*a3);
  }
  else {
    uint64_t v5 = (_DWORD *)(a3[1] + 56 * a3[4]);
  }
  return *v4 > *v5;
}

void **std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>> **>>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    int v9 = (void **)&a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a2, *v9, (void *)a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void *fst::CyclicMinimizer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::LifoQueue<int>>::~CyclicMinimizer(void *a1)
{
  uint64_t v2 = a1[33];
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1B3EA8670](v2, 0xE0C40DD5D8FE3);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~ImplToFst(a1 + 31);
  std::deque<int>::~deque[abi:ne180100](a1 + 25);
  return fst::Partition<int>::~Partition(a1);
}

uint64_t fst::StateMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v7);
        for (unint64_t i = a2[5]; ; a2[5] = i)
        {
          uint64_t v9 = a2[2];
          if (i >= 0x6DB6DB6DB6DB6DB7 * ((a2[3] - v9) >> 3)) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 208))(a1, v7, v9 + 56 * i);
          unint64_t i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 32))(&v10);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v7, &v10);
        std::__list_imp<char *>::clear(v11);
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, v5 & 0xA6A0A950007, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1FDFC94(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::SetState(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1 + 2;
  uint64_t v5 = a1[2];
  a1[5] = 0;
  uint64_t v6 = a1[3];
  if (v6 != v5)
  {
    do
    {
      uint64_t v7 = v6 - 56;
      std::__list_imp<char *>::clear((void *)(v6 - 40));
      uint64_t v6 = v7;
    }
    while (v7 != v5);
  }
  a1[3] = v5;
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a2);
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::reserve(v4, v8);
  uint64_t v9 = *a1;
  unint64_t v21 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v9 + 136))(v9, a2, v19);
  while (1)
  {
    if (!v19[0])
    {
      if (v21 >= v19[2]) {
        goto LABEL_18;
      }
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(void))(*(void *)v19[0] + 24))(v19[0])) {
      break;
    }
    if (v19[0])
    {
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v19[0] + 32))();
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v10 = v19[1] + 56 * v21;
LABEL_10:
    unint64_t v11 = a1[3];
    if (v11 >= a1[4])
    {
      uint64_t v12 = std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>(v4, v10);
    }
    else
    {
      std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>((uint64_t)v4, v10);
      uint64_t v12 = v11 + 56;
    }
    a1[3] = v12;
    if (v19[0]) {
      (*(void (**)(void))(*(void *)v19[0] + 40))(v19[0]);
    }
    else {
      ++v21;
    }
  }
  if (v19[0])
  {
    (*(void (**)(void))(*(void *)v19[0] + 8))();
    goto LABEL_20;
  }
LABEL_18:
  if (v20) {
    --*v20;
  }
LABEL_20:
  char v13 = (void *)a1[2];
  uint64_t v14 = (uint64_t *)a1[3];
  unint64_t v15 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (v14 - v13));
  if (v14 == v13) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,false>(v13, v14, (uint64_t)v19, v16, 1);
  uint64_t v17 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *>,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Equal &>(a1[2], a1[3], (uint64_t)v19);
  return std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::resize(v4, 0x6DB6DB6DB6DB6DB7 * ((v17 - a1[2]) >> 3));
}

void sub_1B1FDFF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::Reverse<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *result) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return (uint64_t *)std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__append(result, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *result + 56 * a2;
    if (v3 != v7)
    {
      do
      {
        uint64_t v8 = v3 - 56;
        uint64_t result = std::__list_imp<char *>::clear((void *)(v3 - 40));
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    v2[1] = v7;
  }
  return result;
}

void *std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,false>(void *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v28 = *((_DWORD *)a2 - 14);
          if (v28 < *(_DWORD *)v11
            || v28 <= *(_DWORD *)v11
            && ((int v29 = *((_DWORD *)a2 - 13), v30 = *(_DWORD *)(v11 + 4), v29 < v30)
             || v29 <= v30 && *((_DWORD *)a2 - 2) < *(_DWORD *)(v11 + 48)))
          {
            uint64_t result = std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v11, a2 - 7);
          }
          break;
        case 3uLL:
          uint64_t result = (void *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v11, (uint64_t *)(v11 + 56), (uint64_t)(a2 - 7));
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v11, v11 + 56, v11 + 112, (uint64_t)(a2 - 7));
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v11, v11 + 56, v11 + 112, v11 + 168, (uint64_t)(a2 - 7));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 1343) {
      break;
    }
    if (v13 == 1)
    {
      if ((uint64_t *)v11 != a2)
      {
        return (void *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = (uint64_t *)(v11 + 56 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x1C01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v11, (uint64_t *)(v11 + 56 * (v15 >> 1)), (uint64_t)(a2 - 7));
      uint64_t v18 = 56 * v16;
      int v19 = (uint64_t *)(56 * v16 + v11 - 56);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v11 + 56, v19, (uint64_t)(a2 - 14));
      uint64_t v20 = v11 + 112;
      unint64_t v21 = (uint64_t *)(v11 + 56 + v18);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v20, v21, (uint64_t)(a2 - 21));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((uint64_t)v19, v17, (uint64_t)v21);
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v10, v17);
      if (a5) {
        goto LABEL_18;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v11 + 56 * (v15 >> 1), (uint64_t *)v11, (uint64_t)(a2 - 7));
      if (a5) {
        goto LABEL_18;
      }
    }
    int v22 = *(_DWORD *)(v10 - 56);
    if (v22 >= *(_DWORD *)v10)
    {
      if (v22 > *(_DWORD *)v10
        || (int v23 = *(_DWORD *)(v10 - 52), v24 = *(_DWORD *)(v10 + 4), v23 >= v24)
        && (v23 > v24 || *(_DWORD *)(v10 - 8) >= *(_DWORD *)(v10 + 48)))
      {
        uint64_t result = (void *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &>((uint64_t *)v10, (unint64_t)a2);
        uint64_t v11 = (uint64_t)result;
        goto LABEL_23;
      }
    }
LABEL_18:
    uint64_t v25 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &>((uint64_t *)v10, (unint64_t)a2);
    if ((v26 & 1) == 0) {
      goto LABEL_21;
    }
    char v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v10, v25);
    uint64_t v11 = (uint64_t)(v25 + 7);
    uint64_t result = (void *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((uint64_t)(v25 + 7), a2);
    if (result)
    {
      a4 = -v13;
      a2 = v25;
      if (v27) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if ((v27 & 1) == 0)
    {
LABEL_21:
      uint64_t result = (void *)std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,false>(v10, v25, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t)(v25 + 7);
LABEL_23:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((void *)v11, a2);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((void *)v11, a2);
  }
}

void *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (char *)result;
    unint64_t v4 = result + 7;
    if (result + 7 != a2)
    {
      uint64_t v5 = 0;
      char v6 = result;
      do
      {
        uint64_t v7 = v6;
        char v6 = v4;
        int v8 = v7[14];
        if (v8 < *v7 || v8 <= *v7 && ((int v9 = v7[15], v10 = v7[1], v9 < v10) || v9 <= v10 && v7[26] < v7[12]))
        {
          uint64_t v18 = *v6;
          int v19 = v7[16];
          std::list<int>::list(v20, (uint64_t)(v7 + 18));
          int v11 = v7[26];
          int v21 = v7[24];
          int v22 = v11;
          for (uint64_t i = v5; ; i -= 56)
          {
            uint64_t v13 = &v3[i];
            *((void *)v13 + 7) = *(void *)&v3[i];
            *((_DWORD *)v13 + 16) = *(_DWORD *)&v3[i + 8];
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)&v3[i + 72], *(void *)&v3[i + 24], (uint64_t)&v3[i + 16]);
            *((_DWORD *)v13 + ++*(void *)(result + 24) = *((_DWORD *)v13 + 10);
            *((_DWORD *)v13 + 26) = *((_DWORD *)v13 + 12);
            if (!i)
            {
              unint64_t v16 = v3;
              goto LABEL_17;
            }
            int v14 = *(_DWORD *)&v3[i - 56];
            if ((int)v18 >= v14)
            {
              if ((int)v18 > v14) {
                break;
              }
              int v15 = *(_DWORD *)&v3[i - 52];
              if (SHIDWORD(v18) >= v15 && (SHIDWORD(v18) > v15 || v22 >= *(_DWORD *)&v3[i - 8])) {
                break;
              }
            }
          }
          unint64_t v16 = &v3[i];
LABEL_17:
          *(void *)unint64_t v16 = v18;
          *((_DWORD *)v16 + 2) = v19;
          if (v16 != (char *)&v18) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)v16 + 2, v20[1], (uint64_t)v20);
          }
          int v17 = v22;
          *((_DWORD *)v16 + 10) = v21;
          *((_DWORD *)v16 + 12) = v17;
          uint64_t result = std::__list_imp<char *>::clear(v20);
        }
        unint64_t v4 = v6 + 7;
        v5 += 56;
      }
      while (v6 + 7 != a2);
    }
  }
  return result;
}

void sub_1B1FE0618(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = result + 7;
    if (result + 7 != a2)
    {
      uint64_t v5 = 0;
      char v6 = result;
      do
      {
        uint64_t v7 = v6;
        char v6 = v4;
        int v8 = v7[14];
        if (v8 < *v7 || v8 <= *v7 && ((int v9 = v7[15], v10 = v7[1], v9 < v10) || v9 <= v10 && v7[26] < v7[12]))
        {
          uint64_t v18 = *v6;
          int v19 = v7[16];
          std::list<int>::list(v20, (uint64_t)(v7 + 18));
          int v11 = v7[26];
          int v21 = v7[24];
          int v22 = v11;
          for (uint64_t i = v5; ; i -= 56)
          {
            uint64_t v13 = (char *)v3 + i;
            *((void *)v13 + 7) = *(void *)((char *)v3 + i);
            *((_DWORD *)v13 + 16) = *(_DWORD *)((char *)v3 + i + 8);
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((void *)((char *)v3 + i + 72), *(void *)((char *)v3 + i + 24), (uint64_t)v3 + i + 16);
            *((_DWORD *)v13 + ++*(void *)(result + 24) = *((_DWORD *)v13 + 10);
            *((_DWORD *)v13 + 26) = *((_DWORD *)v13 + 12);
            int v14 = *(_DWORD *)((char *)v3 + i - 56);
            if ((int)v18 >= v14)
            {
              if ((int)v18 > v14) {
                break;
              }
              int v15 = *(_DWORD *)((char *)v3 + i - 52);
              if (SHIDWORD(v18) >= v15 && (SHIDWORD(v18) > v15 || v22 >= *(_DWORD *)((char *)v3 + i - 8))) {
                break;
              }
            }
          }
          unint64_t v16 = (char *)v3 + i;
          *(void *)unint64_t v16 = v18;
          *((_DWORD *)v16 + 2) = v19;
          if (v16 != (char *)&v18) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)v16 + 2, v20[1], (uint64_t)v20);
          }
          int v17 = v22;
          *((_DWORD *)v16 + 10) = v21;
          *((_DWORD *)v16 + 12) = v17;
          uint64_t result = std::__list_imp<char *>::clear(v20);
        }
        unint64_t v4 = v6 + 7;
        v5 += 56;
      }
      while (v6 + 7 != a2);
    }
  }
  return result;
}

void sub_1B1FE07E4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 < *(_DWORD *)a1
    || v6 <= *(_DWORD *)a1
    && ((int v14 = *((_DWORD *)a2 + 1), v15 = *(_DWORD *)(a1 + 4), v14 < v15)
     || v14 <= v15 && *((_DWORD *)a2 + 12) < *(_DWORD *)(a1 + 48)))
  {
    if (*(_DWORD *)a3 < v6
      || *(_DWORD *)a3 <= v6
      && ((v12 = *(_DWORD *)(a3 + 4), int v13 = *((_DWORD *)a2 + 1), v12 < v13)
       || v12 <= v13 && *(_DWORD *)(a3 + 48) < *((_DWORD *)a2 + 12)))
    {
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a3);
    }
    else
    {
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, a2);
      if (*(_DWORD *)a3 < *(_DWORD *)a2
        || *(_DWORD *)a3 <= *(_DWORD *)a2
        && ((v18 = *(_DWORD *)(a3 + 4), int v19 = *((_DWORD *)a2 + 1), v18 < v19)
         || v18 <= v19 && *(_DWORD *)(a3 + 48) < *((_DWORD *)a2 + 12)))
      {
        int v10 = a2;
        int v11 = (uint64_t *)a3;
        goto LABEL_19;
      }
    }
    return 1;
  }
  if (*(_DWORD *)a3 < v6
    || *(_DWORD *)a3 <= v6
    && ((int v8 = *(_DWORD *)(a3 + 4), v9 = *((_DWORD *)a2 + 1), v8 < v9)
     || v8 <= v9 && *(_DWORD *)(a3 + 48) < *((_DWORD *)a2 + 12)))
  {
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a2, (uint64_t *)a3);
    if (*(_DWORD *)a2 < *(_DWORD *)a1
      || *(_DWORD *)a2 <= *(_DWORD *)a1
      && ((int v16 = *((_DWORD *)a2 + 1), v17 = *(_DWORD *)(a1 + 4), v16 < v17)
       || v16 <= v17 && *((_DWORD *)a2 + 12) < *(_DWORD *)(a1 + 48)))
    {
      int v10 = (uint64_t *)a1;
      int v11 = a2;
LABEL_19:
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(v10, v11);
      return 2;
    }
    return 1;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v23 = *a1;
  int v24 = *((_DWORD *)a1 + 2);
  unint64_t v4 = a1 + 2;
  std::list<int>::list(v25, (uint64_t)(a1 + 2));
  int v5 = *((_DWORD *)a1 + 12);
  int v26 = *((_DWORD *)a1 + 10);
  int v27 = v5;
  int v6 = *(_DWORD *)(a2 - 56);
  if ((int)v23 < v6
    || (int)v23 <= v6
    && ((int v22 = *(_DWORD *)(a2 - 52), SHIDWORD(v23) < v22) || SHIDWORD(v23) <= v22 && v5 < *(_DWORD *)(a2 - 8)))
  {
    unint64_t i = (unint64_t)(a1 + 7);
    int v7 = *((_DWORD *)a1 + 14);
    if ((int)v23 >= v7)
    {
      do
      {
        if ((int)v23 <= v7)
        {
          int v9 = *(_DWORD *)(i + 4);
          if (SHIDWORD(v23) < v9 || SHIDWORD(v23) <= v9 && v5 < *(_DWORD *)(i + 48)) {
            break;
          }
        }
        int v10 = *(_DWORD *)(i + 56);
        i += 56;
        int v7 = v10;
      }
      while ((int)v23 >= v10);
    }
  }
  else
  {
    for (unint64_t i = (unint64_t)(a1 + 7); i < a2; i += 56)
    {
      if ((int)v23 < *(_DWORD *)i) {
        break;
      }
      if ((int)v23 <= *(_DWORD *)i)
      {
        int v11 = *(_DWORD *)(i + 4);
        if (SHIDWORD(v23) < v11 || SHIDWORD(v23) <= v11 && v5 < *(_DWORD *)(i + 48)) {
          break;
        }
      }
    }
  }
  if (i < a2)
  {
    for (a2 -= 56; ; a2 -= 56)
    {
      if ((int)v23 >= v6)
      {
        if ((int)v23 > v6) {
          break;
        }
        int v12 = *(_DWORD *)(a2 + 4);
        if (SHIDWORD(v23) >= v12 && (SHIDWORD(v23) > v12 || v5 >= *(_DWORD *)(a2 + 48))) {
          break;
        }
      }
      int v13 = *(_DWORD *)(a2 - 56);
      int v6 = v13;
    }
  }
  while (i < a2)
  {
    std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)i, (uint64_t *)a2);
    int v15 = *(_DWORD *)(i + 56);
    i += 56;
    for (int j = v15; (int)v23 >= j; int j = v17)
    {
      if ((int)v23 <= j)
      {
        int v16 = *(_DWORD *)(i + 4);
        if (SHIDWORD(v23) < v16 || SHIDWORD(v23) <= v16 && v27 < *(_DWORD *)(i + 48)) {
          break;
        }
      }
      int v17 = *(_DWORD *)(i + 56);
      i += 56;
    }
    do
    {
      do
      {
        int v18 = *(_DWORD *)(a2 - 56);
        a2 -= 56;
        BOOL v19 = (int)v23 <= v18;
      }
      while ((int)v23 < v18);
      if (!v19) {
        break;
      }
      int v20 = *(_DWORD *)(a2 + 4);
    }
    while (SHIDWORD(v23) < v20 || SHIDWORD(v23) <= v20 && v27 < *(_DWORD *)(a2 + 48));
  }
  if ((uint64_t *)(i - 56) != a1)
  {
    *a1 = *(void *)(i - 56);
    *((_DWORD *)a1 + 2) = *(_DWORD *)(i - 48);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v4, *(void *)(i - 32), i - 40);
    *((_DWORD *)a1 + 10) = *(_DWORD *)(i - 16);
    *((_DWORD *)a1 + 12) = *(_DWORD *)(i - 8);
  }
  *(void *)(i - 56) = v23;
  *(_DWORD *)(i - 48) = v24;
  if ((uint64_t *)(i - 56) != &v23) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(i - 40), v25[1], (uint64_t)v25);
  }
  *(_DWORD *)(i - 16) = v26;
  *(_DWORD *)(i - 8) = v27;
  std::__list_imp<char *>::clear(v25);
  return i;
}

void sub_1B1FE0C18(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v24 = *a1;
  int v25 = *((_DWORD *)a1 + 2);
  unint64_t v4 = a1 + 2;
  std::list<int>::list(v26, (uint64_t)(a1 + 2));
  uint64_t v5 = 0;
  int v6 = *((_DWORD *)a1 + 12);
  int v27 = *((_DWORD *)a1 + 10);
  int v28 = v6;
  while (1)
  {
    int v7 = a1[v5 + 7];
    if (v7 >= (int)v24)
    {
      if (v7 > (int)v24) {
        break;
      }
      int v8 = HIDWORD(a1[v5 + 7]);
      if (v8 >= SHIDWORD(v24) && (v8 > SHIDWORD(v24) || SLODWORD(a1[v5 + 13]) >= v6)) {
        break;
      }
    }
    v5 += 7;
  }
  unint64_t v9 = (unint64_t)&a1[v5 + 7];
  if (v5 * 8)
  {
    while (1)
    {
      int v11 = *(_DWORD *)(a2 - 56);
      a2 -= 56;
      int v10 = v11;
      if (v11 < (int)v24) {
        break;
      }
      if (v10 <= (int)v24)
      {
        int v12 = *(_DWORD *)(a2 + 4);
        if (v12 < SHIDWORD(v24) || v12 <= SHIDWORD(v24) && *(_DWORD *)(a2 + 48) < v6) {
          break;
        }
      }
    }
  }
  else
  {
LABEL_25:
    if (v9 < a2)
    {
      do
      {
        int v14 = *(_DWORD *)(a2 - 56);
        a2 -= 56;
        int v13 = v14;
        if (v14 < (int)v24) {
          break;
        }
        if (v13 > (int)v24) {
          goto LABEL_25;
        }
        int v15 = *(_DWORD *)(a2 + 4);
        if (v15 < SHIDWORD(v24)) {
          break;
        }
        if (v15 > SHIDWORD(v24)) {
          goto LABEL_25;
        }
      }
      while (*(_DWORD *)(a2 + 48) >= v6 && v9 < a2);
    }
  }
  unint64_t v17 = v9;
  if (v9 < a2)
  {
    unint64_t v18 = a2;
    do
    {
      std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v17, (uint64_t *)v18);
      for (v17 += 56; ; v17 += 56)
      {
        if (*(_DWORD *)v17 >= (int)v24)
        {
          if (*(_DWORD *)v17 > (int)v24) {
            break;
          }
          int v19 = *(_DWORD *)(v17 + 4);
          if (v19 >= SHIDWORD(v24) && (v19 > SHIDWORD(v24) || *(_DWORD *)(v17 + 48) >= v28)) {
            break;
          }
        }
      }
      while (1)
      {
        int v21 = *(_DWORD *)(v18 - 56);
        v18 -= 56;
        int v20 = v21;
        if (v21 < (int)v24) {
          break;
        }
        if (v20 <= (int)v24)
        {
          int v22 = *(_DWORD *)(v18 + 4);
          if (v22 < SHIDWORD(v24) || v22 <= SHIDWORD(v24) && *(_DWORD *)(v18 + 48) < v28) {
            break;
          }
        }
      }
    }
    while (v17 < v18);
  }
  if ((uint64_t *)(v17 - 56) != a1)
  {
    *a1 = *(void *)(v17 - 56);
    *((_DWORD *)a1 + 2) = *(_DWORD *)(v17 - 48);
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v4, *(void *)(v17 - 32), v17 - 40);
    *((_DWORD *)a1 + 10) = *(_DWORD *)(v17 - 16);
    *((_DWORD *)a1 + 12) = *(_DWORD *)(v17 - 8);
  }
  *(void *)(v17 - 56) = v24;
  *(_DWORD *)(v17 - 48) = v25;
  if ((uint64_t *)(v17 - 56) != &v24) {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v17 - 40), v26[1], (uint64_t)v26);
  }
  *(_DWORD *)(v17 - 16) = v27;
  *(_DWORD *)(v17 - 8) = v28;
  std::__list_imp<char *>::clear(v26);
  return v17 - 56;
}

void sub_1B1FE0E98(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, _DWORD *a2)
{
  BOOL v4 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = (uint64_t *)(a2 - 14);
      int v6 = *(a2 - 14);
      if (v6 < *(_DWORD *)a1
        || v6 <= *(_DWORD *)a1
        && ((v20 = *(a2 - 13), int v21 = *(_DWORD *)(a1 + 4), v20 < v21) || v20 <= v21 && *(a2 - 2) < *(_DWORD *)(a1 + 48)))
      {
        std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, v5);
      }
      return v4;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, (uint64_t *)(a1 + 56), (uint64_t)(a2 - 14));
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a1 + 56, a1 + 112, (uint64_t)(a2 - 14));
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a1 + 56, a1 + 112, a1 + 168, (uint64_t)(a2 - 14));
      return v4;
    default:
      int v7 = (_DWORD *)(a1 + 112);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, (uint64_t *)(a1 + 56), a1 + 112);
      int v8 = (_DWORD *)(a1 + 168);
      if ((_DWORD *)(a1 + 168) == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (*v8 >= *v7)
    {
      if (*v8 > *v7) {
        goto LABEL_23;
      }
      int v11 = v8[1];
      int v12 = v7[1];
      if (v11 >= v12 && (v11 > v12 || v8[12] >= v7[12])) {
        goto LABEL_23;
      }
    }
    uint64_t v23 = *(void *)v8;
    int v24 = v8[2];
    std::list<int>::list(v25, (uint64_t)(v8 + 4));
    int v13 = v8[12];
    int v26 = v8[10];
    int v27 = v13;
    for (uint64_t i = v9; ; i -= 56)
    {
      uint64_t v15 = a1 + i;
      *(void *)(v15 + 168) = *(void *)(a1 + i + 112);
      *(_DWORD *)(v15 + 176) = *(_DWORD *)(a1 + i + 120);
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + i + 184), *(void *)(a1 + i + 136), a1 + 128 + i);
      *(_DWORD *)(v15 + 208) = *(_DWORD *)(v15 + 152);
      *(_DWORD *)(v15 + 216) = *(_DWORD *)(v15 + 160);
      if (i == -112)
      {
        uint64_t v18 = a1;
        goto LABEL_19;
      }
      int v16 = *(_DWORD *)(a1 + i + 56);
      if ((int)v23 >= v16)
      {
        if ((int)v23 > v16) {
          break;
        }
        int v17 = *(_DWORD *)(a1 + i + 60);
        if (SHIDWORD(v23) >= v17 && (SHIDWORD(v23) > v17 || v27 >= *(_DWORD *)(a1 + i + 104))) {
          break;
        }
      }
    }
    uint64_t v18 = a1 + i + 112;
LABEL_19:
    *(void *)uint64_t v18 = v23;
    *(_DWORD *)(v18 + 8) = v24;
    if ((uint64_t *)v18 != &v23) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v18 + 16), v25[1], (uint64_t)v25);
    }
    int v19 = v27;
    *(_DWORD *)(v18 + 40) = v26;
    *(_DWORD *)(v18 + 48) = v19;
    if (++v10 == 8) {
      break;
    }
    std::__list_imp<char *>::clear(v25);
LABEL_23:
    int v7 = v8;
    v9 += 56;
    v8 += 14;
    if (v8 == a2) {
      return 1;
    }
  }
  BOOL v4 = v8 + 14 == a2;
  std::__list_imp<char *>::clear(v25);
  return v4;
}

void sub_1B1FE11A8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (void *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, (uint64_t *)a2, a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3
    || *(_DWORD *)a4 <= *(_DWORD *)a3
    && ((int v9 = *(_DWORD *)(a4 + 4), v10 = *(_DWORD *)(a3 + 4), v9 < v10)
     || v9 <= v10 && *(_DWORD *)(a4 + 48) < *(_DWORD *)(a3 + 48)))
  {
    uint64_t result = std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a3, (uint64_t *)a4);
    if (*(_DWORD *)a3 < *(_DWORD *)a2
      || *(_DWORD *)a3 <= *(_DWORD *)a2
      && ((int v11 = *(_DWORD *)(a3 + 4), v12 = *(_DWORD *)(a2 + 4), v11 < v12)
       || v11 <= v12 && *(_DWORD *)(a3 + 48) < *(_DWORD *)(a2 + 48)))
    {
      uint64_t result = std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a2, (uint64_t *)a3);
      if (*(_DWORD *)a2 < *(_DWORD *)a1
        || *(_DWORD *)a2 <= *(_DWORD *)a1
        && ((v13 = *(_DWORD *)(a2 + 4), int v14 = *(_DWORD *)(a1 + 4), v13 < v14)
         || v13 <= v14 && *(_DWORD *)(a2 + 48) < *(_DWORD *)(a1 + 48)))
      {
        return std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
  return result;
}

void *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(a1, a2, a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4
    || *(_DWORD *)a5 <= *(_DWORD *)a4
    && ((int v17 = *(_DWORD *)(a5 + 4), v18 = *(_DWORD *)(a4 + 4), v17 < v18)
     || v17 <= v18 && *(_DWORD *)(a5 + 48) < *(_DWORD *)(a4 + 48)))
  {
    uint64_t result = std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a4, (uint64_t *)a5);
    if (*(_DWORD *)a4 < *(_DWORD *)a3
      || *(_DWORD *)a4 <= *(_DWORD *)a3
      && ((int v11 = *(_DWORD *)(a4 + 4), v12 = *(_DWORD *)(a3 + 4), v11 < v12)
       || v11 <= v12 && *(_DWORD *)(a4 + 48) < *(_DWORD *)(a3 + 48)))
    {
      uint64_t result = std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a3, (uint64_t *)a4);
      if (*(_DWORD *)a3 < *(_DWORD *)a2
        || *(_DWORD *)a3 <= *(_DWORD *)a2
        && ((v13 = *(_DWORD *)(a3 + 4), int v14 = *(_DWORD *)(a2 + 4), v13 < v14)
         || v13 <= v14 && *(_DWORD *)(a3 + 48) < *(_DWORD *)(a2 + 48)))
      {
        uint64_t result = std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a2, (uint64_t *)a3);
        if (*(_DWORD *)a2 < *(_DWORD *)a1
          || *(_DWORD *)a2 <= *(_DWORD *)a1
          && ((int v15 = *(_DWORD *)(a2 + 4), v16 = *(_DWORD *)(a1 + 4), v15 < v16)
           || v15 <= v16 && *(_DWORD *)(a2 + 48) < *(_DWORD *)(a1 + 48)))
        {
          return std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)a1, (uint64_t *)a2);
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 56;
    if (a2 - a1 >= 57)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (uint64_t *)(a1 + 56 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((void *)a1, a4, v9, v12);
        v12 -= 7;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (*(_DWORD *)v14 < *(_DWORD *)a1
          || *(_DWORD *)v14 <= *(_DWORD *)a1
          && ((int v15 = *(_DWORD *)(v14 + 4), v16 = *(_DWORD *)(a1 + 4), v15 < v16)
           || v15 <= v16 && *(_DWORD *)(v14 + 48) < *(_DWORD *)(a1 + 48)))
        {
          std::swap[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)v14, (uint64_t *)a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((void *)a1, a4, v9, (uint64_t *)a1);
        }
        v14 += 56;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 57)
    {
      unint64_t v17 = v8 / 0x38uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((void *)a1, v6, a4, v17);
        v6 -= 56;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

void *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(void *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (a4 - result))
    {
      int64_t v9 = (0xDB6DB6DB6DB6DB6ELL * (a4 - result)) | 1;
      unint64_t v10 = &result[7 * v9];
      if ((uint64_t)(0xDB6DB6DB6DB6DB6ELL * (a4 - result) + 2) < a3)
      {
        int v11 = *((_DWORD *)v10 + 14);
        if (*(_DWORD *)v10 < v11
          || *(_DWORD *)v10 <= v11
          && ((v12 = HIDWORD(result[7 * v9]), int v13 = *((_DWORD *)v10 + 15), v12 < v13)
           || v12 <= v13 && SLODWORD(result[7 * v9 + 6]) < *((_DWORD *)v10 + 26)))
        {
          v10 += 7;
          int64_t v9 = 0xDB6DB6DB6DB6DB6ELL * (a4 - result) + 2;
        }
      }
      if (*(_DWORD *)v10 >= *(_DWORD *)a4)
      {
        if (*(_DWORD *)v10 > *(_DWORD *)a4
          || (int v14 = *((_DWORD *)v10 + 1), v15 = *((_DWORD *)a4 + 1), v14 >= v15)
          && (v14 > v15 || *((_DWORD *)v10 + 12) >= *((_DWORD *)a4 + 12)))
        {
          uint64_t v23 = *a4;
          int v24 = *((_DWORD *)a4 + 2);
          std::list<int>::list(v25, (uint64_t)(a4 + 2));
          int v16 = *((_DWORD *)v5 + 12);
          int v26 = *((_DWORD *)v5 + 10);
          int v27 = v16;
          while (1)
          {
            unint64_t v17 = v10;
            *uint64_t v5 = *v10;
            *((_DWORD *)v5 + 2) = *((_DWORD *)v10 + 2);
            if (v5 != v10) {
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v5 + 2, v10[3], (uint64_t)(v10 + 2));
            }
            *((_DWORD *)v5 + 10) = *((_DWORD *)v10 + 10);
            *((_DWORD *)v5 + 12) = *((_DWORD *)v10 + 12);
            if (v7 < v9) {
              break;
            }
            uint64_t v18 = (2 * v9) | 1;
            unint64_t v10 = &v6[7 * v18];
            if (2 * v9 + 2 < a3)
            {
              int v19 = *((_DWORD *)v10 + 14);
              if (*(_DWORD *)v10 < v19
                || *(_DWORD *)v10 <= v19
                && ((v20 = HIDWORD(v6[7 * v18]), int v21 = *((_DWORD *)v10 + 15), v20 < v21)
                 || v20 <= v21 && SLODWORD(v6[7 * v18 + 6]) < *((_DWORD *)v10 + 26)))
              {
                v10 += 7;
                uint64_t v18 = 2 * v9 + 2;
              }
            }
            if (*(_DWORD *)v10 < (int)v23) {
              break;
            }
            uint64_t v5 = v17;
            int64_t v9 = v18;
            if (*(_DWORD *)v10 <= (int)v23)
            {
              int v22 = *((_DWORD *)v10 + 1);
              if (v22 < SHIDWORD(v23)) {
                break;
              }
              uint64_t v5 = v17;
              int64_t v9 = v18;
              if (v22 <= SHIDWORD(v23))
              {
                uint64_t v5 = v17;
                int64_t v9 = v18;
                if (*((_DWORD *)v10 + 12) < v27) {
                  break;
                }
              }
            }
          }
          *unint64_t v17 = v23;
          *((_DWORD *)v17 + 2) = v24;
          if (v17 != &v23) {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v17 + 2, v25[1], (uint64_t)v25);
          }
          *((_DWORD *)v17 + 10) = v26;
          *((_DWORD *)v17 + 12) = v27;
          return std::__list_imp<char *>::clear(v25);
        }
      }
    }
  }
  return result;
}

void sub_1B1FE188C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = (uint64_t)result;
    uint64_t v12 = *result;
    int v13 = *((_DWORD *)result + 2);
    std::list<int>::list(&v14, (uint64_t)(result + 2));
    int v8 = *(_DWORD *)(v7 + 48);
    int v16 = *(_DWORD *)(v7 + 40);
    int v17 = v8;
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(v7, a3, a4);
    uint64_t v10 = v9;
    if (v9 == a2 - 56)
    {
      *(void *)uint64_t v9 = v12;
      *(_DWORD *)(v9 + 8) = v13;
      if ((uint64_t *)v9 != &v12) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v9 + 16), v15, (uint64_t)&v14);
      }
      *(_DWORD *)(v10 + 40) = v16;
      *(_DWORD *)(v10 + 48) = v17;
    }
    else
    {
      *(void *)uint64_t v9 = *(void *)(a2 - 56);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 - 48);
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v9 + 16), *(void *)(a2 - 32), a2 - 40);
      *(_DWORD *)(v10 + 40) = *(_DWORD *)(a2 - 16);
      *(_DWORD *)(v10 + 48) = *(_DWORD *)(a2 - 8);
      *(void *)(a2 - 56) = v12;
      *(_DWORD *)(a2 - 48) = v13;
      if ((uint64_t *)(a2 - 56) != &v12) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a2 - 40), v15, (uint64_t)&v14);
      }
      int v11 = v17;
      *(_DWORD *)(a2 - 16) = v16;
      *(_DWORD *)(a2 - 8) = v11;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((void *)v7, v10 + 56, a3, 0x6DB6DB6DB6DB6DB7 * ((v10 + 56 - v7) >> 3));
    }
    return std::__list_imp<char *>::clear(&v14);
  }
  return result;
}

void sub_1B1FE1A30(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = v5 + 1;
    uint64_t v9 = a1 + 56 * (v5 + 1);
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v11 < a3)
    {
      int v12 = *(_DWORD *)(v9 + 56);
      if (*(_DWORD *)v9 < v12
        || *(_DWORD *)v9 <= v12
        && ((v13 = *(_DWORD *)(a1 + 56 * v8 + 4), int v14 = *(_DWORD *)(v9 + 60), v13 < v14)
         || v13 <= v14 && *(_DWORD *)(a1 + 56 * v8 + 48) < *(_DWORD *)(v9 + 104)))
      {
        v9 += 56;
        uint64_t v5 = v11;
      }
    }
    *(void *)a1 = *(void *)v9;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v9 + 8);
    if (a1 != v9) {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 16), *(void *)(v9 + 24), v9 + 16);
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v9 + 40);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(v9 + 48);
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

void *std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Compare &,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = &result[7 * (v4 >> 1)];
    uint64_t v10 = (uint64_t *)(a2 - 56);
    int v9 = *(_DWORD *)(a2 - 56);
    if (*(_DWORD *)v8 < v9
      || *(_DWORD *)v8 <= v9
      && ((int v11 = HIDWORD(result[7 * v7]), v12 = *(_DWORD *)(a2 - 52), v11 < v12)
       || v11 <= v12 && SLODWORD(result[7 * v7 + 6]) < *(_DWORD *)(a2 - 8)))
    {
      uint64_t v17 = *(void *)(a2 - 56);
      int v18 = *(_DWORD *)(a2 - 48);
      std::list<int>::list(v19, a2 - 40);
      int v13 = *(_DWORD *)(a2 - 8);
      int v20 = *(_DWORD *)(a2 - 16);
      int v21 = v13;
      while (1)
      {
        int v14 = v8;
        *uint64_t v10 = *v8;
        *((_DWORD *)v10 + 2) = *((_DWORD *)v8 + 2);
        if (v10 != v8) {
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v10 + 2, v8[3], (uint64_t)(v8 + 2));
        }
        *((_DWORD *)v10 + 10) = *((_DWORD *)v8 + 10);
        *((_DWORD *)v10 + 12) = *((_DWORD *)v8 + 12);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = &v6[7 * v7];
        uint64_t v10 = v14;
        if (*(_DWORD *)v8 >= (int)v17)
        {
          if (*(_DWORD *)v8 > (int)v17) {
            break;
          }
          int v15 = HIDWORD(v6[7 * v7]);
          uint64_t v10 = v14;
          if (v15 >= SHIDWORD(v17))
          {
            if (v15 > SHIDWORD(v17)) {
              break;
            }
            uint64_t v10 = v14;
            if (SLODWORD(v6[7 * v7 + 6]) >= v21) {
              break;
            }
          }
        }
      }
      *int v14 = v17;
      *((_DWORD *)v14 + 2) = v18;
      if (v14 != &v17) {
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v14 + 2, v19[1], (uint64_t)v19);
      }
      int v16 = v21;
      *((_DWORD *)v14 + 10) = v20;
      *((_DWORD *)v14 + 12) = v16;
      return std::__list_imp<char *>::clear(v19);
    }
  }
  return result;
}

void sub_1B1FE1D00(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> *>,fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Equal &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = a2;
  if (a1 != a2)
  {
    uint64_t v7 = a1 + 72;
    do
    {
      uint64_t v8 = a1 + 56;
      if (a1 + 56 == a2) {
        return a2;
      }
      BOOL v9 = fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Equal::operator()(a3, a1, a1 + 56);
      v7 += 56;
      a1 = v8;
    }
    while (!v9);
    uint64_t v10 = v8 + 56;
    uint64_t v11 = v8 - 56;
    while (v10 != a2)
    {
      if (!fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Equal::operator()(a3, v11, v10))
      {
        *(void *)(v11 + 56) = *(void *)v10;
        *(_DWORD *)(v11 + 64) = *(_DWORD *)(v10 + 8);
        if (v10 - 56 != v11) {
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v11 + 72), *(void *)(v10 + 24), v7);
        }
        *(_DWORD *)(v11 + 96) = *(_DWORD *)(v10 + 40);
        *(_DWORD *)(v11 + 104) = *(_DWORD *)(v10 + 48);
        v11 += 56;
      }
      v10 += 56;
      v7 += 56;
    }
    return v11 + 56;
  }
  return result;
}

BOOL fst::ArcUniqueMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::Equal::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 != *(_DWORD *)a3
    || *(_DWORD *)(a2 + 4) != *(_DWORD *)(a3 + 4)
    || *(_DWORD *)(a2 + 48) != *(_DWORD *)(a3 + 48))
  {
    return 0;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = v3 ? *(void *)(a2 + 32) + 1 : 0;
  int v5 = *(_DWORD *)(a3 + 8);
  uint64_t v6 = v5 ? *(void *)(a3 + 32) + 1 : 0;
  if (v4 != v6) {
    return 0;
  }
  char v7 = 0;
  uint64_t v8 = (uint64_t *)(a2 + 24);
  BOOL v9 = (uint64_t *)(a3 + 24);
  if (v3) {
    BOOL v10 = v3 == v5;
  }
  else {
    BOOL v10 = 0;
  }
  int v11 = !v10;
  int v12 = v11 ^ 1;
  while (1)
  {
    uint64_t v13 = *v8;
    uint64_t v14 = *v9;
    if ((v7 & 1) == 0 && !v12) {
      break;
    }
    if (v13 == a2 + 16) {
      return *(float *)(a2 + 40) == *(float *)(a3 + 40);
    }
    if (*(_DWORD *)(v13 + 16) != *(_DWORD *)(v14 + 16)) {
      return 0;
    }
    uint64_t v8 = (uint64_t *)(v13 + 8);
    BOOL v9 = (uint64_t *)(v14 + 8);
    char v7 = 1;
  }
  if (v3) {
    return 0;
  }
  return *(float *)(a2 + 40) == *(float *)(a3 + 40);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 56 * a2;
      uint64_t v14 = 56 * a2;
      int v15 = (void *)(v7 + 16);
      do
      {
        *int v15 = v15;
        v15[1] = v15;
        void v15[2] = 0;
        *((_DWORD *)v15 - 2) = 0;
        v15 += 7;
        v14 -= 56;
      }
      while (v14);
    }
    else
    {
      uint64_t v13 = *(void *)(result - 8);
    }
    a1[1] = v13;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v23 = result;
    if (v11) {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, v11);
    }
    else {
      int v12 = 0;
    }
    int v19 = v12;
    int v20 = &v12[56 * v8];
    int v22 = &v12[56 * v11];
    uint64_t v16 = 56 * a2;
    uint64_t v17 = &v20[56 * a2];
    int v18 = v20 + 16;
    do
    {
      *int v18 = v18;
      v18[1] = v18;
      void v18[2] = 0;
      *((_DWORD *)v18 - 2) = 0;
      v18 += 7;
      v16 -= 56;
    }
    while (v16);
    int v21 = v17;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)&v19);
  }
  return result;
}

void sub_1B1FE2064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::RmFinalEpsilon<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1)
{
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  uint64_t v2 = 0;
  v1[0] = 0;
  v1[1] = v4;
  uint64_t v1[2] = v3;
  v1[3] = &v2;
  fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, (uint64_t)v1);
}

void sub_1B1FE2AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void **a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  a42 = (void **)&a39;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&a42);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a47);
  int v49 = *(void **)(v47 - 184);
  if (v49) {
    operator delete(v49);
  }
  uint64_t v50 = *(void **)(v47 - 160);
  if (v50) {
    operator delete(v50);
  }
  _Unwind_Resume(a1);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFst()
{
}

void sub_1B1FE2D74(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFst(void *a1)
{
  fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Start(uint64_t a1)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Start(*(void *)(a1 + 8));
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Final(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Copy()
{
}

void sub_1B1FE2F54(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::InitStateIterator()
{
}

void sub_1B1FE3048(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B1FE3290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  int v21 = v19;
  uint64_t v22 = (uint64_t)(v19 - 5);
  uint64_t v23 = *v21;
  if (*v21)
  {
    v18[30] = v23;
    operator delete(v23);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(v22);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFstImpl(uint64_t a1)
{
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FF48;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38E08;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  operator new();
}

{
  *(void *)a1 = &unk_1F0A3FF48;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38E08;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_1B1FE34FC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  uint64_t v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorCacheStore(void *a1, unsigned char *a2)
{
  *(unsigned char *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1B1FE35D0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  std::__list_imp<char *>::clear(v2);
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(void *a1)
{
  *a1 = &unk_1F0A38E08;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    int v3 = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorCacheStore(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  }
  uint64_t v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl((uint64_t)a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorCacheStore(void *a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3EEC8;
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(void *)(a1 + 240) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(a1 + 192);
  unint64_t v5 = (void **)(a1 + 168);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl((void *)a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Start(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
  {
    *(unsigned char *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(unsigned char *)(a1 + 60)) {
    return *(unsigned int *)(a1 + 64);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (result != -1)
  {
    int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
    uint64_t v4 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
    int v6 = *v4;
    std::list<int>::list(v7, (uint64_t)(v4 + 2));
    int v8 = v4[8];
    v9[0] = v3;
    v9[2] = v6;
    std::list<int>::list(v10, (uint64_t)v7);
    int v11 = v8;
    int State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, v9);
    std::__list_imp<char *>::clear(v10);
    std::__list_imp<char *>::clear(v7);
    *(_DWORD *)(a1 + 64) = State;
    *(unsigned char *)(a1 + 60) = 1;
    if (*(_DWORD *)(a1 + 68) <= State) {
      *(_DWORD *)(a1 + 68) = State + 1;
    }
    return *(unsigned int *)(a1 + 64);
  }
  return result;
}

void sub_1B1FE38CC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FindState(uint64_t a1, int *a2)
{
  if ((*(unsigned char *)(a1 + 148) & 2) != 0) {
    goto LABEL_27;
  }
  uint64_t v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
  int v5 = a2[2];
  uint64_t v6 = v5 ? *((void *)a2 + 4) + 1 : 0;
  uint64_t v7 = *(_DWORD *)v4 ? *(void *)(v4 + 24) + 1 : 0;
  if (v6 != v7) {
    goto LABEL_27;
  }
  char v8 = 0;
  unint64_t v9 = (uint64_t *)(a2 + 6);
  unint64_t v10 = (uint64_t *)(v4 + 16);
  BOOL v11 = v5 && v5 == *(_DWORD *)v4;
  BOOL v12 = !v11;
  int v13 = !v12;
  while (1)
  {
    uint64_t v14 = *v9;
    uint64_t v15 = *v10;
    if ((v8 & 1) == 0 && !v13) {
      break;
    }
    if ((int *)v14 == a2 + 4) {
      goto LABEL_22;
    }
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16)) {
      goto LABEL_27;
    }
    unint64_t v9 = (uint64_t *)(v14 + 8);
    unint64_t v10 = (uint64_t *)(v15 + 8);
    char v8 = 1;
  }
  if (v5) {
    goto LABEL_27;
  }
LABEL_22:
  v40[0] = 0;
  v40[0] = a2[10];
  float v44 = 0.0;
  float v44 = *(float *)(v4 + 32);
  int v16 = *a2;
  if (*(float *)v40 != v44 || v16 == -1)
  {
LABEL_27:
    int v18 = std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>((void *)(a1 + 192), a2);
    if (v18)
    {
      return *((unsigned int *)v18 + 16);
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 176);
      int v20 = (uint64_t *)(a1 + 168);
      uint64_t v19 = -1431655765 * ((v21 - *(void *)(a1 + 168)) >> 4);
      if (v21 >= *(void *)(a1 + 184))
      {
        uint64_t v22 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element const&>(v20, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element const&>((uint64_t)v20, a2);
        uint64_t v22 = v21 + 48;
      }
      *(void *)(a1 + 176) = v22;
      int v23 = a2[2];
      v40[0] = *a2;
      v40[2] = v23;
      std::list<int>::list(v41, (uint64_t)(a2 + 4));
      int v42 = a2[10];
      int v43 = v19;
      std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>(a1 + 192, v40, v40);
      std::__list_imp<char *>::clear(v41);
    }
  }
  else
  {
    uint64_t v25 = v16;
    int v26 = *(char **)(a1 + 232);
    int v27 = *(char **)(a1 + 240);
    unint64_t v28 = (v27 - v26) >> 2;
    if (v28 <= v16)
    {
      int v29 = (void *)(a1 + 248);
      do
      {
        if ((unint64_t)v27 >= *v29)
        {
          unint64_t v31 = v28 + 1;
          if ((v28 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v32 = *v29 - (void)v26;
          if (v32 >> 1 > v31) {
            unint64_t v31 = v32 >> 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33)
          {
            int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 248, v33);
            int v26 = *(char **)(a1 + 232);
            int v27 = *(char **)(a1 + 240);
          }
          else
          {
            int v34 = 0;
          }
          uint64_t v35 = &v34[4 * v28];
          *(_DWORD *)uint64_t v35 = -1;
          int v30 = v35 + 4;
          while (v27 != v26)
          {
            int v36 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          *(void *)(a1 + 232) = v35;
          *(void *)(a1 + 240) = v30;
          *(void *)(a1 + 248) = &v34[4 * v33];
          if (v26)
          {
            operator delete(v26);
            int v26 = *(char **)(a1 + 232);
          }
          else
          {
            int v26 = v35;
          }
        }
        else
        {
          *(_DWORD *)int v27 = -1;
          int v30 = v27 + 4;
        }
        *(void *)(a1 + 240) = v30;
        unint64_t v28 = (v30 - v26) >> 2;
        int v16 = *a2;
        int v27 = v30;
      }
      while (v28 <= *a2);
      uint64_t v25 = v16;
    }
    if (*(_DWORD *)&v26[4 * v25] == -1)
    {
      unint64_t v37 = *(void *)(a1 + 176);
      *(_DWORD *)&v26[4 * v25] = -1431655765 * ((v37 - *(void *)(a1 + 168)) >> 4);
      uint64_t v38 = (uint64_t *)(a1 + 168);
      if (v37 >= *(void *)(a1 + 184))
      {
        uint64_t v39 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element const&>(v38, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element const&>((uint64_t)v38, a2);
        uint64_t v39 = v37 + 48;
      }
      *(void *)(a1 + 176) = v39;
      int v16 = *a2;
      int v26 = *(char **)(a1 + 232);
    }
    return *(unsigned int *)&v26[4 * v16];
  }
  return v19;
}

void sub_1B1FE3BF4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element const&>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v4 = *a2;
  *(_DWORD *)(v4 + 8) = a2[2];
  uint64_t result = std::list<int>::list((void *)(v4 + 16), (uint64_t)(a2 + 4));
  *(_DWORD *)(v4 + 40) = a2[10];
  *(void *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1B1FE3C64(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  BOOL v11 = (char *)&v10[12 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  int v16 = (char *)&v10[12 * v9];
  *(_DWORD *)BOOL v11 = *a2;
  *((_DWORD *)v11 + 2) = a2[2];
  std::list<int>::list((void *)v11 + 2, (uint64_t)(a2 + 4));
  v10[12 * v4 + 10] = a2[10];
  v15 += 48;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1FE3D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Element*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      *(_DWORD *)(v12 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((void *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 48;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B1FE3EA8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 += 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    uint64_t v6 = (int *)(*(void *)(a1 + 168) + 48 * a2);
    int v8 = *v6;
    uint64_t v7 = v6 + 2;
    if (v8 == -1)
    {
      int v28 = *v7;
      std::list<int>::list(v29, (uint64_t)(v7 + 2));
      float v30 = *((float *)v7 + 8);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v24);
      fst::Times<int,(fst::StringType)0>(v7, (uint64_t)&v24, (uint64_t)&v31);
      float v9 = *((float *)v7 + 8);
      float v10 = NAN;
      if (v9 != -INFINITY)
      {
        float v10 = NAN;
        if (v26 != -INFINITY)
        {
          float v10 = INFINITY;
          BOOL v11 = v26 == INFINITY || v9 == INFINITY;
          float v12 = v9 + v26;
          if (!v11) {
            float v10 = v12;
          }
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v28, &v31, v10);
      std::__list_imp<char *>::clear(v32);
      std::__list_imp<char *>::clear(v25);
    }
    LODWORD(v++*(void *)(result + 24) = v28;
    std::list<int>::list(v25, (uint64_t)v29);
    float v26 = v30;
    if (v28) {
      BOOL v13 = (unint64_t)(v29[2] + 1) >= 2;
    }
    else {
      BOOL v13 = 0;
    }
    int v14 = !v13;
    char v27 = v14;
    if ((*(unsigned char *)(a1 + 148) & 1) == 0 || v14)
    {
      int v21 = v28;
      int v16 = v22;
      std::list<int>::list(v22, (uint64_t)v29);
      float v23 = v30;
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v21);
    }
    else
    {
      uint64_t v15 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
      int v18 = *v15;
      int v16 = v19;
      std::list<int>::list(v19, (uint64_t)(v15 + 2));
      int v20 = v15[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v18);
    }
    std::__list_imp<char *>::clear(v16);
    std::__list_imp<char *>::clear(v25);
    std::__list_imp<char *>::clear(v29);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1B1FE40FC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  int v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  int v5 = a3[8];
  int v9 = v5;
  *(_DWORD *)Mutableint State = v7;
  if (MutableState != (char *)&v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)MutableState + 1, v8[1], (uint64_t)v8);
    int v5 = v9;
  }
  *((_DWORD *)MutableState + 8) = v5;
  uint64_t result = std::__list_imp<char *>::clear(v8);
  *((_DWORD *)MutableState + 20) |= 9u;
  return result;
}

void sub_1B1FE41F4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  Mutableint State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::GetMutableState(a1, a2);
  uint64_t v4 = MutableState;
  if (*(unsigned char *)(a1 + 88))
  {
    int v5 = *((_DWORD *)MutableState + 20);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 20) = v5 | 4;
      unint64_t v6 = *((void *)MutableState + 8) - *((void *)MutableState + 7) + *(void *)(a1 + 112) + 88;
      *(void *)(a1 + 112) = v6;
      *(unsigned char *)(a1 + 104) = 1;
      if (v6 > *(void *)(a1 + 96)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2) {
    return *(char **)(a1 + 80);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 76) = a2;
      Mutableint State = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 80) = MutableState;
      *((_DWORD *)MutableState + 20) |= 4u;
      std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::reserve((uint64_t *)MutableState + 7, 0x80uLL);
      return *(char **)(a1 + 80);
    }
    uint64_t v5 = *(void *)(a1 + 80);
    if (!*(_DWORD *)(v5 + 84))
    {
      *(_DWORD *)(a1 + 76) = a2;
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Reset(v5);
      uint64_t result = *(char **)(a1 + 80);
      *((_DWORD *)result + 20) |= 4u;
      return result;
    }
    *(_DWORD *)(v5 + 80) &= ~4u;
    *(unsigned char *)(a1 + 72) = 0;
  }
  int v6 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      int v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      int v9 = (void *)fst::cerr(v8);
      float v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      BOOL v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      float v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      BOOL v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      int v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    uint64_t v17 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      int v18 = *(_DWORD *)(v17 + 16);
      if (v18) {
        int v19 = v18 - 1;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 76);
      }
      Mutableint State = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::GetMutableState(a1, v19);
      unint64_t v21 = *(void *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 21))
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v22 = *((_DWORD *)MutableState + 20);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              unint64_t v23 = *((void *)MutableState + 8) - *((void *)MutableState + 7) + 88;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Delete((void *)a1);
            uint64_t v17 = *(void *)(a1 + 56);
            continue;
          }
        }
        else
        {
          int v22 = *((_DWORD *)MutableState + 20);
          if ((v22 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      *((_DWORD *)MutableState + 20) &= ~8u;
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
      *(void *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 112) <= v16)
    {
      unint64_t v24 = *(void *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          uint64_t v25 = *(void *)(a1 + 96);
          do
          {
            v25 *= 2;
            BOOL v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(void *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        char v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        int v28 = (void *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      int v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      float v30 = (void *)fst::cerr(v29);
      int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      uint64_t v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      unint64_t v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      int v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      uint64_t v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      int v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
    }
  }
}

void sub_1B1FE4744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    uint64_t v14 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v14);
  }
  else
  {
    int v8 = *(char **)(v6 + 8 * a2);
    if (v8) {
      return v8;
    }
  }
  int v8 = (char *)operator new(0x58uLL);
  int v9 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  *(_DWORD *)int v8 = *v9;
  std::list<int>::list((void *)v8 + 1, (uint64_t)(v9 + 2));
  *((_DWORD *)v8 + 8) = v9[8];
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(void *)(*(void *)(a1 + 8) + 8 * v4) = v8;
  if (*(unsigned char *)a1)
  {
    float v10 = operator new(0x18uLL);
    uint64_t v10[4] = a2;
    uint64_t v12 = *(void *)(a1 + 32);
    BOOL v11 = (void *)(a1 + 32);
    *(void *)float v10 = v12;
    *((void *)v10 + 1) = v11;
    *(void *)(v12 + 8) = v10;
    void *v11 = v10;
    ++v11[2];
  }
  return v8;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::Reset(uint64_t a1)
{
  uint64_t result = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  uint64_t v3 = result;
  *(_DWORD *)a1 = *(_DWORD *)result;
  if (result != a1) {
    uint64_t result = (uint64_t)std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 8), *(void *)(result + 16), result + 8);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v3 + 32);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = v4 - 56;
      uint64_t result = (uint64_t)std::__list_imp<char *>::clear((void *)(v4 - 40));
      uint64_t v4 = v6;
    }
    while (v6 != v5);
  }
  *(void *)(a1 + 64) = v5;
  return result;
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::NumArcs(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)v5 + 64) - *(void *)(*(void *)v5 + 56)) >> 3);
}

void *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Expand(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 168) + 48 * a2;
  int v82 = *(_DWORD *)v3;
  int v83 = *(_DWORD *)(v3 + 8);
  std::list<int>::list(v84, v3 + 16);
  float v85 = *(float *)(v3 + 40);
  if (v82 == -1) {
    goto LABEL_33;
  }
  uint64_t v4 = *(void *)(a1 + 136);
  unint64_t v81 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 136))(v4);
  uint64_t v5 = &v66;
  while (1)
  {
    if (!v78)
    {
      if (v81 >= v79[1]) {
        goto LABEL_31;
      }
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v78 + 24))(v78)) {
      break;
    }
    if (v78)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v78 + 32))(v78);
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v6 = v79[0] + 56 * v81;
LABEL_9:
    fst::Times<int,(fst::StringType)0>(&v83, v6 + 8, (uint64_t)&v59);
    float v7 = NAN;
    if (v85 != -INFINITY)
    {
      float v8 = *(float *)(v6 + 40);
      float v7 = NAN;
      if (v8 != -INFINITY)
      {
        float v7 = INFINITY;
        if (v8 != INFINITY && v85 != INFINITY) {
          float v7 = v85 + v8;
        }
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v75, (int *)&v59, v7);
    std::__list_imp<char *>::clear(&v60);
    float v71 = *(float *)&v75;
    std::list<int>::list(v72, (uint64_t)v76);
    int v73 = v77;
    int v11 = *(float *)&v75 == 0.0 || (unint64_t)(v76[2] + 1) < 2;
    char v74 = v11;
    if ((*(unsigned char *)(a1 + 148) & 2) == 0 || v11)
    {
      unint64_t v16 = v5;
      int v17 = *(_DWORD *)(v6 + 48);
      int v18 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::One();
      int v68 = *v18;
      std::list<int>::list(v69, (uint64_t)(v18 + 2));
      int v70 = v18[8];
      LODWORD(v59) = v17;
      LODWORD(v60) = v68;
      std::list<int>::list(v61, (uint64_t)v69);
      int v63 = v70;
      LODWORD(v18) = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, (int *)&v59);
      uint64_t v5 = v16;
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v69);
      uint64_t v19 = *(void *)v6;
      int v65 = v75;
      std::list<int>::list(v16, (uint64_t)v76);
      int v67 = v77;
      uint64_t v59 = v19;
      LODWORD(v60) = v65;
      std::list<int>::list(v61, (uint64_t)v16);
      int v63 = v67;
      LODWORD(v64[0]) = v18;
      Mutableint State = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(MutableState, (uint64_t)&v59);
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v16);
    }
    else
    {
      fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Value((int *)&v71, (uint64_t)&v59);
      int v12 = *(_DWORD *)(v6 + 48);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Quantize((float *)&v63, (uint64_t)&v56, *(float *)(a1 + 144));
      LODWORD(v51) = v12;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v56;
      std::list<int>::list(v53, (uint64_t)v57);
      float v54 = v58;
      int State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v57);
      uint64_t v14 = *(void *)v6;
      int v48 = v59;
      std::list<int>::list(v49, (uint64_t)&v60);
      float v50 = v62;
      uint64_t v51 = v14;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v48;
      std::list<int>::list(v53, (uint64_t)v49);
      float v54 = v50;
      int v55 = State;
      uint64_t v15 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(v15, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v49);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      char v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v76);
    if (v78) {
      (*(void (**)(uint64_t))(*(void *)v78 + 40))(v78);
    }
    else {
      ++v81;
    }
  }
  if (v78)
  {
    (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
    goto LABEL_33;
  }
LABEL_31:
  if (v80) {
    --*v80;
  }
LABEL_33:
  if (*(unsigned char *)(a1 + 148))
  {
    if (v82 == -1) {
      goto LABEL_65;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v59);
    uint64_t v21 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
    uint64_t v22 = v59 ? v61[1] + 1 : 0;
    uint64_t v23 = *(_DWORD *)v21 ? *(void *)(v21 + 24) + 1 : 0;
    if (v22 == v23)
    {
      char v24 = 0;
      uint64_t v25 = v61[0];
      BOOL v26 = (uint64_t *)(v21 + 16);
      if (v59) {
        BOOL v27 = v59 == *(_DWORD *)v21;
      }
      else {
        BOOL v27 = 0;
      }
      int v28 = !v27;
      int v29 = v28 ^ 1;
      while (1)
      {
        uint64_t v30 = *v26;
        if ((v24 & 1) == 0 && !v29) {
          break;
        }
        if ((uint64_t *)v25 == &v60) {
          goto LABEL_77;
        }
        if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v30 + 16)) {
          goto LABEL_55;
        }
        uint64_t v25 = *(void *)(v25 + 8);
        BOOL v26 = (uint64_t *)(v30 + 8);
        char v24 = 1;
      }
      if (v59) {
        goto LABEL_55;
      }
LABEL_77:
      *(float *)&uint64_t v51 = v62;
      float v71 = 0.0;
      float v71 = *(float *)(v21 + 32);
      float v39 = v62;
      float v40 = v71;
      std::__list_imp<char *>::clear(&v60);
      if (v39 == v40) {
        goto LABEL_76;
      }
    }
    else
    {
LABEL_55:
      std::__list_imp<char *>::clear(&v60);
    }
    if (v82 == -1)
    {
LABEL_65:
      LODWORD(v78) = v83;
      std::list<int>::list(v79, (uint64_t)v84);
      *(float *)&unint64_t v81 = v85;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 32))(&v59);
      fst::Times<int,(fst::StringType)0>(&v83, (uint64_t)&v59, (uint64_t)&v51);
      float v31 = NAN;
      if (v85 != -INFINITY)
      {
        float v31 = NAN;
        if (v62 != -INFINITY)
        {
          float v31 = INFINITY;
          if (v62 != INFINITY && v85 != INFINITY) {
            float v31 = v85 + v62;
          }
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v78, (int *)&v51, v31);
      std::__list_imp<char *>::clear(&v52);
      std::__list_imp<char *>::clear(&v60);
    }
    uint64_t v33 = *(void *)(a1 + 152);
    float v71 = *(float *)&v78;
    std::list<int>::list(v72, (uint64_t)v79);
    int v73 = v81;
    if (v78) {
      BOOL v34 = (unint64_t)v80 + 1 >= 2;
    }
    else {
      BOOL v34 = 0;
    }
    char v35 = !v34;
    char v74 = v35;
    if (v34)
    {
      fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Value((int *)&v71, (uint64_t)&v59);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Quantize((float *)&v63, (uint64_t)&v45, *(float *)(a1 + 144));
      LODWORD(v51) = -1;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v45;
      std::list<int>::list(v53, (uint64_t)v46);
      float v54 = v47;
      int v36 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v46);
      int v42 = v59;
      std::list<int>::list(v43, (uint64_t)&v60);
      float v44 = v62;
      uint64_t v51 = v33;
      LODWORD(v--*(_DWORD *)(a9 + 52) = v42;
      std::list<int>::list(v53, (uint64_t)v43);
      float v54 = v44;
      int v55 = v36;
      unint64_t v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(v37, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v43);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      char v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v79);
  }
LABEL_76:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetArcs(a1, a2);
  return std::__list_imp<char *>::clear(v84);
}

void sub_1B1FE51E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  std::__list_imp<char *>::clear((void *)(v47 + 8));
  std::__list_imp<char *>::clear(&a47);
  std::__list_imp<char *>::clear(v48);
  _Unwind_Resume(a1);
}

void *fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Value@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v35 = *a1;
  std::list<int>::list(v36, (uint64_t)(a1 + 2));
  if (*a1) {
    BOOL v4 = (unint64_t)(*((void *)a1 + 3) + 1) >= 2;
  }
  else {
    BOOL v4 = 0;
  }
  char v5 = !v4;
  char v37 = v5;
  fst::StringFactor<int,(fst::StringType)0>::Value((uint64_t)&v35, (uint64_t)&v22);
  int v30 = v22;
  v31[0] = v31;
  v31[1] = v31;
  uint64_t v32 = 0;
  uint64_t v6 = v25;
  if (v25)
  {
    uint64_t v8 = v23;
    float v7 = v24;
    uint64_t v9 = *v24;
    *(void *)(v9 + 8) = *(void *)(v23 + 8);
    **(void **)(v8 + 8) = v9;
    uint64_t v10 = v31[0];
    *(void *)(v31[0] + 8) = v7;
    void *v7 = v10;
    v31[0] = v8;
    *(void *)(v8 + 8) = v31;
    uint64_t v32 = v6;
    uint64_t v25 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v33, &v30, *((float *)a1 + 8));
  std::__list_imp<char *>::clear(v31);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  fst::StringFactor<int,(fst::StringType)0>::Value((uint64_t)&v35, (uint64_t)&v22);
  int v17 = v26;
  v18[0] = v18;
  v18[1] = v18;
  uint64_t v19 = 0;
  uint64_t v11 = v29;
  if (v29)
  {
    uint64_t v13 = v27;
    int v12 = v28;
    uint64_t v14 = *v28;
    *(void *)(v14 + 8) = *(void *)(v27 + 8);
    **(void **)(v13 + 8) = v14;
    uint64_t v15 = v18[0];
    *(void *)(v18[0] + 8) = v12;
    void *v12 = v15;
    v18[0] = v13;
    *(void *)(v13 + 8) = v18;
    uint64_t v19 = v11;
    uint64_t v29 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v20, &v17, 0.0);
  std::__list_imp<char *>::clear(v18);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>&,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>&,0>(a2, &v33, &v20);
  std::__list_imp<char *>::clear(v21);
  std::__list_imp<char *>::clear(v34);
  return std::__list_imp<char *>::clear(v36);
}

void sub_1B1FE55A8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear((void *)(v2 + 8));
  std::__list_imp<char *>::clear((void *)(v3 - 120));
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetArcs(uint64_t a1, int a2)
{
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = *((void *)MutableState + 7);
  uint64_t v6 = *((void *)MutableState + 8) - v5;
  if (v6)
  {
    unint64_t v7 = v6 / 56;
    int v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    uint64_t v9 = (int *)(v5 + 48);
    do
    {
      int v11 = *v9;
      v9 += 14;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 20) |= 0xAu;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 7;
  unint64_t v4 = a1[8];
  if (v4 >= a1[9])
  {
    uint64_t result = std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>(v3, a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

void *fst::StringFactor<int,(fst::StringType)0>::Value@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = *(void *)(a1 + 16);
  fst::StringWeight<int,(fst::StringType)0>::StringWeight((uint64_t)&v14, *(_DWORD *)a1);
  v12[0] = v12;
  v12[1] = v12;
  uint64_t v13 = 0;
  int v11 = 0;
  if (v4 != v3)
  {
    int v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = v12;
    do
    {
      int v8 = *(_DWORD *)(v4 + 16);
      if (v5)
      {
        uint64_t v9 = operator new(0x18uLL);
        int v9[4] = v8;
        *(void *)uint64_t v9 = v7;
        *((void *)v9 + 1) = v12;
        v7[1] = v9;
        ++v6;
        unint64_t v7 = v9;
        v12[0] = v9;
        uint64_t v13 = v6;
      }
      else
      {
        int v11 = *(_DWORD *)(v4 + 16);
        int v5 = v8;
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
  }
  std::pair<fst::StringWeight<int,(fst::StringType)0>,fst::StringWeight<int,(fst::StringType)0>>::pair[abi:ne180100]<fst::StringWeight<int,(fst::StringType)0>&,fst::StringWeight<int,(fst::StringType)0>&,0>(a2, &v14, &v11);
  std::__list_imp<char *>::clear(v12);
  return std::__list_imp<char *>::clear(v15);
}

void sub_1B1FE57FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__list_imp<char *>::clear(v6);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::StringWeight<int,(fst::StringType)0>,fst::StringWeight<int,(fst::StringType)0>>::pair[abi:ne180100]<fst::StringWeight<int,(fst::StringType)0>&,fst::StringWeight<int,(fst::StringType)0>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = *a3;
  std::list<int>::list((void *)(a1 + 40), (uint64_t)(a3 + 2));
  return a1;
}

void sub_1B1FE5878(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>&,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((void *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  *(_DWORD *)(a1 + 40) = *a3;
  std::list<int>::list((void *)(a1 + 48), (uint64_t)(a3 + 2));
  *(_DWORD *)(a1 + 72) = a3[8];
  return a1;
}

void sub_1B1FE58F8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 104))
  {
    if ((*(unsigned char *)(a2 + 80) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 64) - *(void *)(a2 + 56) + *(void *)(a1 + 112);
      *(void *)(a1 + 112) = v4;
      if (v4 > *(void *)(a1 + 96))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(a1, (char *)a2, 0, 0.666);
      }
    }
  }
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 40);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 48);
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A44458;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1FE5AF0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FE5C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *v17;
  if (*v17)
  {
    v15[30] = v19;
    operator delete(v19);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table((uint64_t)v16 + 24);
  std::string __p = v16;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void sub_1B1FE5E70(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x10A0C407A9BBF1FLL);
  if (*v2) {
    operator delete(*v2);
  }
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1) {
      Mutableint State = 0;
    }
    else {
      Mutableint State = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  uint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        int v8 = operator new(0x58uLL);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheState((uint64_t)v8, v7);
        if (*(unsigned char *)a1)
        {
          uint64_t v9 = operator new(0x18uLL);
          int v9[4] = v6;
          uint64_t v10 = a1[4];
          *(void *)uint64_t v9 = v10;
          *((void *)v9 + 1) = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        int v8 = 0;
      }
      int v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        }
        else {
          int v18 = 0;
        }
        uint64_t v19 = &v18[8 * v14];
        *(void *)uint64_t v19 = v8;
        uint64_t v13 = v19 + 8;
        uint64_t v21 = (char *)a1[1];
        int v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          int v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        void *v12 = v8;
        uint64_t v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::list<int>::list((void *)(a1 + 8), a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*>>((void *)(a1 + 56), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
  *(void *)(a1 + 80) = *(unsigned int *)(a2 + 80);
  return a1;
}

void sub_1B1FE6148(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1FE61C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2 + v7;
      uint64_t v9 = a4 + v7;
      *(void *)uint64_t v9 = *(void *)(a2 + v7);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + v7 + 8);
      std::list<int>::list((void *)(a4 + v7 + 16), a2 + v7 + 16);
      *(_DWORD *)(v9 + 40) = *(_DWORD *)(a2 + v7 + 40);
      *(_DWORD *)(v9 + 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (v8 + 56 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1FE6274(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 40;
    do
    {
      std::__list_imp<char *>::clear((void *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  int v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  int v6 = v5;
  do
  {
    fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::ArcIterator(&v19, *(void *)(a1 + 8), v6);
    unint64_t v7 = v20;
    uint64_t v8 = *((void *)v19 + 7);
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((*((void *)v19 + 8) - v8) >> 3);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v20 < v9)
    {
      int v11 = *(_DWORD *)(v10 + 68);
      int v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        int v14 = *v12;
        v12 += 14;
        int v13 = v14;
        if (v11 <= v14)
        {
          int v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      unint64_t v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    BOOL v4 = v15 >= v17;
    if (v15 < v17) {
      break;
    }
    int v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while (v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1FE6420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Expand(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1FE64A8(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
  }
}

uint64_t fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v6);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 288))(a2, 0);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result == -1)
  {
    if ((v7 & 4) != 0)
    {
      int v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192);
      return v18(a2, 4, 4);
    }
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    BOOL v9 = fst::CountStates<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(a1) != -1;
    (*(void (**)(uint64_t, BOOL))(*(void *)a2 + 248))(a2, v9);
  }
  LODWORD(v++*(_DWORD *)(result + 24) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v22);
  while (!v22)
  {
    if ((int)v24 >= (int)v23) {
      goto LABEL_14;
    }
LABEL_9:
    (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 32))(v22);
    }
    else {
      LODWORD(v++*(_DWORD *)(result + 24) = v24 + 1;
    }
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v22 + 16))(v22)) {
    goto LABEL_9;
  }
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
LABEL_14:
  unsigned int v33 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v31);
  LODWORD(v10) = -1;
  while (2)
  {
    if (!v31)
    {
      if ((int)v33 >= v32) {
        goto LABEL_47;
      }
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v31 + 16))(v31))
    {
      if (v31)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 24))(v31);
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v11 = v33;
LABEL_21:
      if (v11 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v11);
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 256))(a2, v11, v12);
      unint64_t v26 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 136))(a1, v11, &v22);
LABEL_24:
      if (v22)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 24))(v22))
        {
          if (v22)
          {
            (*(void (**)(void))(*(void *)v22 + 8))();
            goto LABEL_37;
          }
LABEL_35:
          if (v25) {
            --*v25;
          }
LABEL_37:
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v19, a1, v11);
          uint64_t v22 = 0;
          LODWORD(v23) = v19;
          std::list<int>::list(&v24, (uint64_t)v20);
          int v27 = v21;
          int v28 = -1;
          unint64_t v29 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()((int *)a3, (int *)&v22);
          uint64_t v30 = v15;
          std::__list_imp<char *>::clear(&v24);
          std::__list_imp<char *>::clear(v20);
          if (v29)
          {
            if (v10 == -1)
            {
              uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
              (*(void (**)(uint64_t, uint64_t, double))(*(void *)a2 + 184))(a2, v10, 0.0);
            }
            HIDWORD(v30) = v10;
            (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(void *)a2 + 208))(a2, v11, &v29);
            (*(void (**)(uint64_t, uint64_t, float))(*(void *)a2 + 184))(a2, v11, INFINITY);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, float))(*(void *)a2 + 184))(a2, v11, *(float *)&v30);
          }
          if (v31) {
            (*(void (**)(uint64_t))(*(void *)v31 + 32))(v31);
          }
          else {
            ++v33;
          }
          continue;
        }
        if (v22)
        {
          int v13 = (int *)(*(uint64_t (**)(void))(*(void *)v22 + 32))();
          goto LABEL_30;
        }
      }
      else if (v26 >= v24)
      {
        goto LABEL_35;
      }
      int v13 = (int *)(v23 + 56 * v26);
LABEL_30:
      unint64_t v29 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()((int *)a3, v13);
      uint64_t v30 = v14;
      (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(void *)a2 + 208))(a2, v11, &v29);
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 40))(v22);
      }
      else {
        ++v26;
      }
      goto LABEL_24;
    }
    break;
  }
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
LABEL_47:
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v17 = v7 & 0x2EBC21080007;
  if (*(unsigned char *)(a3 + 4)) {
    uint64_t v17 = v7 & 0x2EBC21080003 | 4;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, v17 | v16, 0x3FFFFFFF0007);
}

void sub_1B1FE6DF4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  uint64_t v5 = *(void *)(v3 - 104);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()(int *a1, int *a2)
{
  if (a2[12] != -1) {
    goto LABEL_24;
  }
  uint64_t v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  int v5 = a2[2];
  uint64_t v6 = v5 ? *((void *)a2 + 4) + 1 : 0;
  uint64_t v7 = *(_DWORD *)v4 ? *(void *)(v4 + 24) + 1 : 0;
  if (v6 != v7) {
    goto LABEL_24;
  }
  char v8 = 0;
  BOOL v9 = (uint64_t *)(a2 + 6);
  uint64_t v10 = (uint64_t *)(v4 + 16);
  BOOL v11 = v5 && v5 == *(_DWORD *)v4;
  BOOL v12 = !v11;
  int v13 = !v12;
  while (1)
  {
    uint64_t v14 = *v9;
    uint64_t v15 = *v10;
    if ((v8 & 1) == 0 && !v13) {
      break;
    }
    if ((int *)v14 == a2 + 4) {
      goto LABEL_22;
    }
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16)) {
      goto LABEL_24;
    }
    BOOL v9 = (uint64_t *)(v14 + 8);
    uint64_t v10 = (uint64_t *)(v15 + 8);
    char v8 = 1;
  }
  if (v5) {
    goto LABEL_24;
  }
LABEL_22:
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = a2[10];
  v29[0] = 0.0;
  v29[0] = *(float *)(v4 + 32);
  if (*(float *)__p == v29[0])
  {
    unint64_t v16 = 0;
    unsigned int v17 = *a2;
  }
  else
  {
LABEL_24:
    unsigned int v28 = -1;
    if (!fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Extract<(fst::GallicType)1>((unsigned int *)a2 + 2, &v27, &v28)|| (unsigned int v17 = *a2, *a2 != a2[1]))
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      int v18 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
      uint64_t v19 = (void *)fst::cerr(v18);
      unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"FromGallicMapper: unrepresentable weight: ", 42);
      fst::CompositeWeightWriter::CompositeWeightWriter((uint64_t)v29, v20);
      if (*FLAGS_fst_weight_parentheses)
      {
        char v30 = *FLAGS_fst_weight_parentheses;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)v29, (uint64_t)&v30, 1);
      }
      fst::CompositeWeightWriter::WriteElement<fst::StringWeight<int,(fst::StringType)1>>((uint64_t)v29, a2 + 2);
      fst::CompositeWeightWriter::WriteElement<fst::LogWeightTpl<float>>((uint64_t)v29, (float *)a2 + 10);
      if (*FLAGS_fst_weight_parentheses)
      {
        char v30 = *(unsigned char *)(FLAGS_fst_weight_parentheses + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)v29, (uint64_t)&v30, 1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for arc with ilabel = ", 23);
      int v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", olabel = ", 11);
      uint64_t v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", nextstate = ", 14);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      *((unsigned char *)a1 + 4) = 1;
      unsigned int v17 = *a2;
    }
    if (!v17 && v28 && a2[12] == -1) {
      unsigned int v17 = *a1;
    }
    unint64_t v16 = (unint64_t)v28 << 32;
  }
  return v16 | v17;
}

void sub_1B1FE7174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A44458;
  int v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void *fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::GallicToNewSymbolsMapper(void *a1, uint64_t a2)
{
  *a1 = a2;
  *(_OWORD *)(a1 + 1) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  *((_DWORD *)a1 + 10) = 1065353216;
  *((_DWORD *)a1 + 12) = 0;
  a1[7] = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  a1[8] = 0;
  *((unsigned char *)a1 + 72) = 0;
  (*(void (**)(void))(*(void *)*a1 + 224))();
  *((_DWORD *)a1 + 13) = (*(uint64_t (**)(void))(*(void *)*a1 + 200))();
  (*(void (**)(void))(*(void *)*a1 + 176))();
  (*(void (**)(void, void, double))(*(void *)*a1 + 184))(*a1, *((unsigned int *)a1 + 13), 0.0);
  uint64_t v3 = a1[7];
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
    int v5 = (char *)v4;
    if (*(char *)(v4 + 23) >= 0) {
      size_t v6 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      size_t v6 = *(void *)(v4 + 8);
    }
    uint64_t v7 = v10;
    std::string::basic_string[abi:ne180100]((uint64_t)v10, v6 + 12);
    if (v11 < 0) {
      uint64_t v7 = (void **)v10[0];
    }
    if (v6)
    {
      if (v5[23] >= 0) {
        char v8 = v5;
      }
      else {
        char v8 = *(char **)v5;
      }
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, "_from_gallic");
    operator new();
  }
  (*(void (**)(void, void))(*(void *)*a1 + 280))(*a1, 0);
  return a1;
}

void sub_1B1FE755C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__list_imp<char *>::clear(v2 + 3);
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

unint64_t fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::operator()(uint64_t *a1, int *a2)
{
  v46[2] = *MEMORY[0x1E4F143B8];
  if (a2[12] != -1)
  {
    float v4 = *((float *)a2 + 2);
    goto LABEL_25;
  }
  uint64_t v5 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>::Zero();
  float v4 = *((float *)a2 + 2);
  if (v4 == 0.0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *((void *)a2 + 4) + 1;
  }
  if (*(_DWORD *)v5) {
    uint64_t v7 = *(void *)(v5 + 24) + 1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v6 != v7) {
    goto LABEL_25;
  }
  char v8 = 0;
  BOOL v9 = (uint64_t *)(a2 + 6);
  uint64_t v10 = (uint64_t *)(v5 + 16);
  BOOL v11 = v4 != 0.0 && LODWORD(v4) == *(_DWORD *)v5;
  BOOL v12 = !v11;
  int v13 = !v12;
  while (1)
  {
    uint64_t v14 = *v9;
    uint64_t v15 = *v10;
    if ((v8 & 1) == 0 && !v13) {
      break;
    }
    if ((int *)v14 == a2 + 4) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16)) {
      goto LABEL_25;
    }
    BOOL v9 = (uint64_t *)(v14 + 8);
    uint64_t v10 = (uint64_t *)(v15 + 8);
    char v8 = 1;
  }
  if (v4 != 0.0) {
    goto LABEL_25;
  }
LABEL_23:
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  LODWORD(__p.__r_.__value_.__l.__data_) = a2[10];
  float v43 = 0.0;
  float v43 = *(float *)(v5 + 32);
  if (*(float *)&__p.__r_.__value_.__l.__data_ != v43)
  {
LABEL_25:
    float v43 = v4;
    std::list<int>::list(v44, (uint64_t)(a2 + 4));
    uint64_t v16 = 0;
    if (v43 == 0.0 || v45 == -1)
    {
LABEL_77:
      unsigned int v17 = *a2;
      if (*a2 == a2[1])
      {
LABEL_84:
        std::__list_imp<char *>::clear(v44);
        return v17 | (unint64_t)(v16 << 32);
      }
LABEL_78:
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      }
      char v37 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)&__p);
      char v38 = (void *)fst::cerr(v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"GallicToNewSymbolMapper: unrepresentable weight: ", 49);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      *((unsigned char *)a1 + 72) = 1;
      unsigned int v17 = *a2;
      goto LABEL_84;
    }
    int v18 = std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::find<fst::StringWeight<int,(fst::StringType)0>>(a1 + 1, (int *)&v43);
    if (v18)
    {
      uint64_t v16 = *((unsigned int *)v18 + 12);
      goto LABEL_76;
    }
    uint64_t v16 = *((int *)a1 + 12) + 1;
    *((_DWORD *)a1 + 12) = v16;
    *(float *)&__p.__r_.__value_.__l.__data_ = v43;
    std::list<int>::list(&__p.__r_.__value_.__l.__size_, (uint64_t)v44);
    int v42 = v16;
    std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::__emplace_unique_key_args<fst::StringWeight<int,(fst::StringType)0>,std::pair<fst::StringWeight<int,(fst::StringType)0> const,int>>((uint64_t)(a1 + 1), (int *)&__p, &__p);
    std::__list_imp<char *>::clear(&__p.__r_.__value_.__l.__size_);
    uint64_t v19 = v44[1];
    memset(&__p, 0, sizeof(__p));
    if (v43 == 0.0)
    {
LABEL_72:
      uint64_t v36 = a1[8];
      if (v36) {
        (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v36 + 24))(v36, &__p, v16);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_76:
      if (v16 > 0xFFFFFFFD) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }
    unint64_t v20 = 0;
    char v21 = 0;
    uint64_t v22 = *((unsigned int *)a1 + 13);
    while (1)
    {
      if (v20 >= v45 + 1) {
        goto LABEL_72;
      }
      uint64_t v23 = v20 == v45 ? *((unsigned int *)a1 + 13) : (*(uint64_t (**)(void))(*(void *)*a1 + 200))();
      uint64_t v24 = *a1;
      char v25 = (v21 & 1) != 0 ? (int *)(v19 + 16) : (int *)&v43;
      unsigned int v26 = *v25;
      int v27 = v20 ? 0 : v16;
      LODWORD(v40.__r_.__value_.__l.__data_) = v27;
      *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = v26;
      HIDWORD(v40.__r_.__value_.__r.__words[1]) = v23;
      (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v24 + 208))(v24, v22, &v40);
      if (a1[8])
      {
        if (v20)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v40, size + 1);
          if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v29 = &v40;
          }
          else {
            unint64_t v29 = (std::string *)v40.__r_.__value_.__r.__words[0];
          }
          if (size)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            memmove(v29, p_p, size);
          }
          *(_WORD *)((char *)&v29->__r_.__value_.__l.__data_ + size) = 95;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = v40;
        }
        (*(void (**)(std::string *__return_ptr))(*(void *)a1[7] + 88))(&v40);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v31 = &__p;
        }
        else {
          uint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v32 = __p.__r_.__value_.__l.__size_;
        }
        unsigned int v33 = std::string::insert(&v40, 0, (const std::string::value_type *)v31, v32);
        std::string::size_type v34 = v33->__r_.__value_.__r.__words[0];
        v46[0] = v33->__r_.__value_.__l.__size_;
        *(void *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v33->__r_.__value_.__r.__words[1] + 7);
        char v35 = HIBYTE(v33->__r_.__value_.__r.__words[2]);
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __p.__r_.__value_.__r.__words[0] = v34;
        __p.__r_.__value_.__l.__size_ = v46[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v46 + 7);
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v35;
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
      }
      if (v21) {
        goto LABEL_67;
      }
LABEL_68:
      ++v20;
      char v21 = 1;
      uint64_t v22 = v23;
      if (v43 == 0.0) {
        goto LABEL_72;
      }
    }
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((v21 & 1) == 0) {
      goto LABEL_68;
    }
LABEL_67:
    uint64_t v19 = *(void *)(v19 + 8);
    goto LABEL_68;
  }
  uint64_t v16 = 0;
  unsigned int v17 = *a2;
  return v17 | (unint64_t)(v16 << 32);
}

void sub_1B1FE7B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__list_imp<char *>::clear(a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::find<fst::StringWeight<int,(fst::StringType)0>>(void *a1, int *a2)
{
  unint64_t v3 = 0;
  uint64_t v4 = *((void *)a2 + 2);
  if (*a2)
  {
    unint64_t v5 = *a2;
    while (1)
    {
      v3 ^= v5;
      if ((int *)v4 == a2 + 2) {
        break;
      }
      unint64_t v5 = *(int *)(v4 + 16) ^ (2 * v3);
      uint64_t v4 = *(void *)(v4 + 8);
    }
  }
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v3;
    if (v3 >= *(void *)&v6) {
      unint64_t v9 = v3 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v6 - 1) & v3;
  }
  uint64_t v10 = *(int ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  BOOL v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v3)
      {
        if (std::equal_to<fst::StringWeight<int,(fst::StringType)0>>::operator()[abi:ne180100](v12, v11 + 4, (uint64_t)a2))
        {
          return (uint64_t *)v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v6) {
            v13 %= *(void *)&v6;
          }
        }
        else
        {
          v13 &= *(void *)&v6 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      BOOL v11 = *(int **)v11;
    }
    while (v11);
  }
  return (uint64_t *)v11;
}

BOOL std::equal_to<fst::StringWeight<int,(fst::StringType)0>>::operator()[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  if (*a2) {
    uint64_t v4 = *((void *)a2 + 3) + 1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (*(_DWORD *)a3) {
    uint64_t v5 = *(void *)(a3 + 24) + 1;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4 != v5) {
    return 0;
  }
  char v6 = 0;
  uint8x8_t v7 = a2 + 2;
  unint64_t v8 = (uint64_t *)(a2 + 4);
  unint64_t v9 = (uint64_t *)(a3 + 16);
  if (v3) {
    BOOL v10 = v3 == *(_DWORD *)a3;
  }
  else {
    BOOL v10 = 0;
  }
  int v11 = !v10;
  int v12 = v11 ^ 1;
  while (1)
  {
    unint64_t v13 = (int *)*v8;
    uint64_t v14 = *v9;
    if ((v6 & 1) == 0 && !v12) {
      break;
    }
    BOOL result = v13 == v7;
    if (v13 == v7 || v13[4] != *(_DWORD *)(v14 + 16)) {
      return result;
    }
    unint64_t v8 = (uint64_t *)(v13 + 2);
    unint64_t v9 = (uint64_t *)(v14 + 8);
    char v6 = 1;
  }
  return *a2 == 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::__emplace_unique_key_args<fst::StringWeight<int,(fst::StringType)0>,std::pair<fst::StringWeight<int,(fst::StringType)0> const,int>>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v7 = 0;
  uint64_t v8 = *((void *)a2 + 2);
  if (*a2)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      v7 ^= v9;
      if ((int *)v8 == a2 + 2) {
        break;
      }
      unint64_t v9 = *(int *)(v8 + 16) ^ (2 * v7);
      uint64_t v8 = *(void *)(v8 + 8);
    }
  }
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v10) {
        unint64_t v3 = v7 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v7;
    }
    unint64_t v13 = *(int ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(int **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v7)
        {
          if (std::equal_to<fst::StringWeight<int,(fst::StringType)0>>::operator()[abi:ne180100](a1 + 32, i + 4, (uint64_t)a2))
          {
            return (uint64_t *)i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::__construct_node_hash<std::pair<fst::StringWeight<int,(fst::StringType)0> const,int>>(a1, v7, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v7 >= v10) {
        unint64_t v3 = v7 % v10;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v7;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (int *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return (uint64_t *)i;
}

void sub_1B1FE8080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::__construct_node_hash<std::pair<fst::StringWeight<int,(fst::StringType)0> const,int>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *a3;
  BOOL result = std::list<int>::list(v8 + 3, (uint64_t)(a3 + 2));
  *((_DWORD *)v8 + 12) = a3[8];
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B1FE8110(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__list_imp<char *>::clear(v2 + 3);
    }
    operator delete(v2);
  }
}

uint64_t fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~EncodeMapper(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(v2 + 80) - 1;
  *(_DWORD *)(v2 + 80) = v3;
  if (!v3)
  {
    uint64_t v4 = fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~EncodeTable((void *)v2);
    MEMORY[0x1B3EA8670](v4, 0x10A0C40782F6942);
  }
  return a1;
}

void *fst::EncodeTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~EncodeTable(void *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        std::__list_imp<char *>::clear((void *)(v5 + 16));
        MEMORY[0x1B3EA8670](v5, 0x1020C400F9B4526);
        uint64_t v3 = a1[1];
        uint64_t v2 = a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[11];
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[12];
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 4));
  uint64_t v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A433A0;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t quasar::artifact::AppLmArtifactLifeCycleStage::AppLmArtifactLifeCycleStage(uint64_t a1, long long *a2, int a3, char a4, char a5, char a6, const void ***a7)
{
  *(void *)a1 = &unk_1F0A592E8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v13 = *a2;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v13;
  }
  *(_DWORD *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 36) = a4;
  *(unsigned char *)(a1 + 37) = a5;
  *(unsigned char *)(a1 + 38) = a6;
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 40), a7);
  return a1;
}

void sub_1B1FE83EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::artifact::AppLmArtifactLifeCycleStage::operator int(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t quasar::artifact::AppLmArtifactLifeCycleStage::isValid(quasar::artifact::AppLmArtifactLifeCycleStage *this)
{
  return *((unsigned __int8 *)this + 36);
}

uint64_t quasar::artifact::AppLmArtifactLifeCycleStage::isTextNormalized(quasar::artifact::AppLmArtifactLifeCycleStage *this)
{
  return *((unsigned __int8 *)this + 37);
}

uint64_t quasar::artifact::AppLmArtifactLifeCycleStage::isAdaptableToArbitraryDatapacks(quasar::artifact::AppLmArtifactLifeCycleStage *this)
{
  return *((unsigned __int8 *)this + 38);
}

uint64_t *quasar::artifact::AppLmArtifactLifeCycleStage::contentKeys@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return std::set<std::string>::set[abi:ne180100](a2, this + 5);
}

void *quasar::artifact::operator<<(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  uint64_t v6 = *(void *)(v3 + 8);
  if (*(char *)(v3 + 23) >= 0)
  {
    uint64_t v7 = *(unsigned __int8 *)(v3 + 23);
  }
  else
  {
    uint64_t v3 = v4;
    uint64_t v7 = v6;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v3, v7);
  return a1;
}

uint64_t quasar::artifact::AppLmArtifactLifeCycleStages::get(quasar::artifact::AppLmArtifactLifeCycleStages *this)
{
  {
    operator new();
  }
  return quasar::artifact::AppLmArtifactLifeCycleStages::get(void)::singleton;
}

void sub_1B1FE84F0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B2C40F2137253);
  _Unwind_Resume(a1);
}

quasar::artifact::AppLmArtifactLifeCycleStages *quasar::artifact::AppLmArtifactLifeCycleStages::AppLmArtifactLifeCycleStages(quasar::artifact::AppLmArtifactLifeCycleStages *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "UNKNOWN");
  *((void *)&v10 + 1) = 0;
  uint64_t v11 = 0;
  *(void *)&long long v10 = (char *)&v10 + 8;
  quasar::artifact::AppLmArtifactLifeCycleStage::AppLmArtifactLifeCycleStage((uint64_t)this, (long long *)&__p, 0, 0, 0, 0, (const void ***)&v10);
  std::__tree<std::string>::destroy((uint64_t)&v10, *((char **)&v10 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "INVALID");
  *((void *)&v10 + 1) = 0;
  uint64_t v11 = 0;
  *(void *)&long long v10 = (char *)&v10 + 8;
  quasar::artifact::AppLmArtifactLifeCycleStage::AppLmArtifactLifeCycleStage((uint64_t)this + 64, (long long *)&__p, 1, 0, 0, 0, (const void ***)&v10);
  std::__tree<std::string>::destroy((uint64_t)&v10, *((char **)&v10 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "RAW_PHRASE_COUNTS");
  std::string::basic_string[abi:ne180100]<0>(&__p, "phrase-count");
  std::string::basic_string[abi:ne180100]<0>(&v13, "oov");
  std::string::basic_string[abi:ne180100]<0>(&v14.__r_.__value_.__r.__words[2], "custom-prons");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v8, (const void **)&__p.__r_.__value_.__l.__data_, 3);
  quasar::artifact::AppLmArtifactLifeCycleStage::AppLmArtifactLifeCycleStage((uint64_t)this + 128, &v10, 1000, 1, 0, 1, &v8);
  std::__tree<std::string>::destroy((uint64_t)&v8, v9);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v16.__r_.__value_.__r.__words[i]) < 0) {
      operator delete((void *)v14.__r_.__value_.__r.__words[i + 2]);
    }
  }
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)v10);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "PROCESSED_PHRASE_COUNTS");
  std::string::basic_string[abi:ne180100]<0>(&__p, "phrase-count");
  std::string::basic_string[abi:ne180100]<0>(&v13, "oov");
  std::string::basic_string[abi:ne180100]<0>(&v14.__r_.__value_.__r.__words[2], "custom-prons");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v8, (const void **)&__p.__r_.__value_.__l.__data_, 3);
  quasar::artifact::AppLmArtifactLifeCycleStage::AppLmArtifactLifeCycleStage((uint64_t)this + 192, &v10, 2000, 1, 1, 1, &v8);
  std::__tree<std::string>::destroy((uint64_t)&v8, v9);
  for (uint64_t j = 0; j != -9; j -= 3)
  {
    if (SHIBYTE(v16.__r_.__value_.__r.__words[j]) < 0) {
      operator delete((void *)v14.__r_.__value_.__r.__words[j + 2]);
    }
  }
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)v10);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "PROCESSED_NGRAM_COUNTS");
  std::string::basic_string[abi:ne180100]<0>(&__p, "ngram-count");
  std::string::basic_string[abi:ne180100]<0>(&v13, "oov");
  std::string::basic_string[abi:ne180100]<0>(&v14.__r_.__value_.__r.__words[2], "custom-prons");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v8, (const void **)&__p.__r_.__value_.__l.__data_, 3);
  quasar::artifact::AppLmArtifactLifeCycleStage::AppLmArtifactLifeCycleStage((uint64_t)this + 256, &v10, 3000, 1, 1, 1, &v8);
  std::__tree<std::string>::destroy((uint64_t)&v8, v9);
  for (uint64_t k = 0; k != -9; k -= 3)
  {
    if (SHIBYTE(v16.__r_.__value_.__r.__words[k]) < 0) {
      operator delete((void *)v14.__r_.__value_.__r.__words[k + 2]);
    }
  }
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)v10);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "DECODING_READY");
  std::string::basic_string[abi:ne180100]<0>(&__p, "language-model-fst");
  std::string::basic_string[abi:ne180100]<0>(&v13, "language-model-arpa");
  std::string::basic_string[abi:ne180100]<0>(&v14.__r_.__value_.__r.__words[2], "oov");
  std::string::basic_string[abi:ne180100]<0>(&v16.__r_.__value_.__l.__size_, "custom-prons");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v8, (const void **)&__p.__r_.__value_.__l.__data_, 4);
  quasar::artifact::AppLmArtifactLifeCycleStage::AppLmArtifactLifeCycleStage((uint64_t)this + 320, &v10, 4000, 1, 1, 0, &v8);
  std::__tree<std::string>::destroy((uint64_t)&v8, v9);
  for (uint64_t m = 0; m != -12; m -= 3)
  {
    if (*((char *)&v17 + m * 8 + 7) < 0) {
      operator delete((void *)v16.__r_.__value_.__r.__words[m + 1]);
    }
  }
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)v10);
  }
  if (*((char *)this + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 8);
  }
  long long v13 = this;
  if (*((char *)this + 95) < 0) {
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)this + 9), *((void *)this + 10));
  }
  else {
    std::string v14 = *(std::string *)((unsigned char *)this + 3);
  }
  unint64_t v15 = (char *)this + 64;
  if (*((char *)this + 159) < 0) {
    std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)this + 17), *((void *)this + 18));
  }
  else {
    std::string v16 = *(std::string *)((char *)this + 136);
  }
  float v17 = (char *)this + 128;
  if (*((char *)this + 223) < 0) {
    std::string::__init_copy_ctor_external(&v18, *((const std::string::value_type **)this + 25), *((void *)this + 26));
  }
  else {
    std::string v18 = *(std::string *)((char *)this + 200);
  }
  unint64_t v19 = (char *)this + 192;
  if (*((char *)this + 287) < 0) {
    std::string::__init_copy_ctor_external(&v20, *((const std::string::value_type **)this + 33), *((void *)this + 34));
  }
  else {
    std::string v20 = *(std::string *)((unsigned char *)this + 11);
  }
  size_t v21 = (char *)this + 256;
  if (*((char *)this + 351) < 0) {
    std::string::__init_copy_ctor_external(&v22, *((const std::string::value_type **)this + 41), *((void *)this + 42));
  }
  else {
    std::string v22 = *(std::string *)((char *)this + 328);
  }
  unint64_t v23 = (char *)this + 320;
  std::map<std::string,quasar::artifact::AppLmArtifactLifeCycleStage const&>::map[abi:ne180100]((uint64_t)this + 384, (const void **)&__p.__r_.__value_.__l.__data_, 6);
  for (uint64_t n = 0; n != -24; n -= 4)
  {
    if (SHIBYTE(v22.__r_.__value_.__r.__words[n + 2]) < 0) {
      operator delete(*(void **)((char *)&v22.__r_.__value_.__l.__data_ + n * 8));
    }
  }
  return this;
}

void sub_1B1FE8B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(v30);
  quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(v29);
  quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(v28);
  quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(v27);
  quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(v26);
  quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(v25);
  _Unwind_Resume(a1);
}

void quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(quasar::artifact::AppLmArtifactLifeCycleStage *this)
{
  quasar::artifact::AppLmArtifactLifeCycleStage::~AppLmArtifactLifeCycleStage(this);
  JUMPOUT(0x1B3EA8670);
}

{
  *(void *)this = &unk_1F0A592E8;
  std::__tree<std::string>::destroy((uint64_t)this + 40, *((char **)this + 6));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t std::map<std::string,quasar::artifact::AppLmArtifactLifeCycleStage const&>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,BOOL *>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,BOOL *> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1B1FE8F3C(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineSeevaStepBigLmDecoder::OnlineSeevaStepBigLmDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::OnlineSeevaStepDecoder::OnlineSeevaStepDecoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A57650;
  uint64_t v4 = v3 + 1040;
  *(void *)(v3 + 1040) = &unk_1F0A51028;
  *(void *)(v3 + 1048) = 0x203F000000;
  *(void *)(v3 + 1056) = 0x200000002;
  *(unsigned char *)(v3 + 1064) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 1072), "/cpu:0");
  *(void *)(a1 + 1104) = 0;
  *(void *)(a1 + 1096) = 0;
  *(void *)(a1 + 1112) = 0;
  *(_WORD *)(a1 + 1120) = 1;
  *(void *)(a1 + 1160) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(v4 + --*(_DWORD *)(a9 + 84) = 0;
  *(void *)(v4 + 100) = 0;
  *(void *)(v4 + 92) = 0;
  *(void *)(v4 + 105) = 0;
  *(_OWORD *)(a1 + 11--*(_DWORD *)(a9 + 84) = xmmword_1B25880F0;
  *(_DWORD *)(a1 + 1200) = 200;
  *(void *)(v4 + 164) = 0;
  *(_OWORD *)(a1 + 1212) = xmmword_1B2588100;
  *(_DWORD *)(a1 + 1228) = 2;
  *(unsigned char *)(a1 + 1232) = 1;
  *(void *)(a1 + 1040) = &unk_1F0A513E0;
  *(_OWORD *)(a1 + 1236) = xmmword_1B2588110;
  *(void *)(v4 + 212) = 0x4100000041000000;
  *(void *)(v4 + 220) = 0x1F4000000010;
  *(_OWORD *)(v4 + 244) = 0u;
  *(_DWORD *)(a1 + 1316) = 0;
  *(_OWORD *)(v4 + 228) = 0u;
  *(_OWORD *)(v4 + 260) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 14++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 1520), "wordmap");
  *(void *)(a1 + 1560) = 0;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_DWORD *)(a1 + 1568) = 7;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 1576), "<unk>");
  *(void *)(a1 + 1656) = 0;
  *(void *)(a1 + 1648) = 0;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 16++*(_DWORD *)(result + 24) = 0u;
  *(void *)(a1 + 1640) = a1 + 1648;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 18++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  return a1;
}

void sub_1B1FE9168(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 1567) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 1543) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 1519) < 0) {
    operator delete(*(void **)(v1 + 1496));
  }
  if (*(char *)(v1 + 1495) < 0) {
    operator delete(*(void **)(v1 + 1472));
  }
  if (*(char *)(v1 + 1471) < 0) {
    operator delete(*(void **)(v1 + 1448));
  }
  if (*(char *)(v1 + 1447) < 0) {
    operator delete(*(void **)(v1 + 1424));
  }
  if (*(char *)(v1 + 1423) < 0) {
    operator delete(*(void **)(v1 + 1400));
  }
  if (*(char *)(v1 + 1399) < 0) {
    operator delete(*(void **)(v1 + 1376));
  }
  if (*(char *)(v1 + 1375) < 0) {
    operator delete(*(void **)(v1 + 1352));
  }
  if (*(char *)(v1 + 1351) < 0) {
    operator delete(*(void **)(v1 + 1328));
  }
  uint64_t v6 = *(void **)(v1 + 1296);
  if (v6)
  {
    *(void *)(v1 + 1304) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(v1 + 1272);
  if (v7)
  {
    *(void *)(v1 + 1280) = v7;
    operator delete(v7);
  }
  kaldi::quasar::SeevaStepInferenceConfig::~SeevaStepInferenceConfig(v2);
  quasar::OnlineSeevaStepDecoder::~OnlineSeevaStepDecoder((quasar::OnlineSeevaStepDecoder *)v1);
  _Unwind_Resume(a1);
}

void quasar::OnlineSeevaStepBigLmDecoder::~OnlineSeevaStepBigLmDecoder(quasar::OnlineSeevaStepBigLmDecoder *this)
{
  *(void *)this = &unk_1F0A57650;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 233);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 231);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 229);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 227);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 225);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 223);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  unint64_t v15 = (void **)((char *)this + 1752);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v15);
  unint64_t v15 = (void **)((char *)this + 1728);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v15);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 215);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  unint64_t v9 = (void *)*((void *)this + 211);
  if (v9)
  {
    *((void *)this + 212) = v9;
    operator delete(v9);
  }
  long long v10 = (void *)*((void *)this + 208);
  if (v10)
  {
    *((void *)this + 209) = v10;
    operator delete(v10);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 1640, *((void **)this + 206));
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 204);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  unint64_t v12 = (std::__shared_weak_count *)*((void *)this + 202);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (*((char *)this + 1599) < 0) {
    operator delete(*((void **)this + 197));
  }
  if (*((char *)this + 1567) < 0) {
    operator delete(*((void **)this + 193));
  }
  if (*((char *)this + 1543) < 0) {
    operator delete(*((void **)this + 190));
  }
  if (*((char *)this + 1519) < 0) {
    operator delete(*((void **)this + 187));
  }
  if (*((char *)this + 1495) < 0) {
    operator delete(*((void **)this + 184));
  }
  if (*((char *)this + 1471) < 0) {
    operator delete(*((void **)this + 181));
  }
  if (*((char *)this + 1447) < 0) {
    operator delete(*((void **)this + 178));
  }
  if (*((char *)this + 1423) < 0) {
    operator delete(*((void **)this + 175));
  }
  if (*((char *)this + 1399) < 0) {
    operator delete(*((void **)this + 172));
  }
  if (*((char *)this + 1375) < 0) {
    operator delete(*((void **)this + 169));
  }
  if (*((char *)this + 1351) < 0) {
    operator delete(*((void **)this + 166));
  }
  long long v13 = (void *)*((void *)this + 162);
  if (v13)
  {
    *((void *)this + 163) = v13;
    operator delete(v13);
  }
  std::string v14 = (void *)*((void *)this + 159);
  if (v14)
  {
    *((void *)this + 160) = v14;
    operator delete(v14);
  }
  *((void *)this + 130) = &unk_1F0A51028;
  if (*((char *)this + 1183) < 0) {
    operator delete(*((void **)this + 145));
  }
  if (*((char *)this + 1151) < 0) {
    operator delete(*((void **)this + 141));
  }
  if (*((char *)this + 1119) < 0) {
    operator delete(*((void **)this + 137));
  }
  if (*((char *)this + 1095) < 0) {
    operator delete(*((void **)this + 134));
  }
  quasar::OnlineSeevaStepDecoder::~OnlineSeevaStepDecoder(this);
}

{
  uint64_t vars8;

  quasar::OnlineSeevaStepBigLmDecoder::~OnlineSeevaStepBigLmDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineSeevaStepBigLmDecoder::setLmeTags(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  std::vector<unsigned int>::size_type v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v6 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3))
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"number of start/end LME class tags doesn't match: ", 50);
    unsigned int v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" vs ", 4);
    std::ostream::operator<<();
    goto LABEL_42;
  }
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 1272), 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3));
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 1296), v6);
  int v9 = 2 * *(_DWORD *)(a1 + 768);
  std::vector<unsigned int>::size_type v29 = v6;
  if (v4 != v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    if (v6 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v6;
    }
    int v13 = -1;
    while (1)
    {
      int WordId = kaldi::quasar::Vocab::GetWordId(*(void *)(a1 + 864), (unsigned __int8 *)(*a2 + v10));
      if (WordId == *(_DWORD *)(a1 + 764)) {
        break;
      }
      int v15 = WordId;
      *(_DWORD *)(*(void *)(a1 + 1272) + 4 * v11) = WordId;
      int v16 = kaldi::quasar::Vocab::GetWordId(*(void *)(a1 + 864), (unsigned __int8 *)(*a3 + v10));
      if (v16 == *(_DWORD *)(a1 + 764))
      {
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
        std::string v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"cannot find ", 12);
        uint64_t v25 = *a3 + v10;
        int v26 = *(char *)(v25 + 23);
        if (v26 >= 0) {
          uint64_t v23 = *a3 + v10;
        }
        else {
          uint64_t v23 = *(void *)v25;
        }
        if (v26 >= 0) {
          uint64_t v24 = *(unsigned __int8 *)(v25 + 23);
        }
        else {
          uint64_t v24 = *(void *)(v25 + 8);
        }
        goto LABEL_41;
      }
      if (v15 <= v13) {
        int v17 = v13;
      }
      else {
        int v17 = v15;
      }
      if (v15 >= v9) {
        int v18 = v9;
      }
      else {
        int v18 = v15;
      }
      *(_DWORD *)(*(void *)(a1 + 1296) + 4 * v11) = v16;
      if (v16 >= v18) {
        int v9 = v18;
      }
      else {
        int v9 = v16;
      }
      if (v16 <= v17) {
        int v13 = v17;
      }
      else {
        int v13 = v16;
      }
      ++v11;
      v10 += 24;
      if (v12 == v11) {
        goto LABEL_24;
      }
    }
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
    std::string v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"cannot find ", 12);
    uint64_t v21 = *a2 + v10;
    int v22 = *(char *)(v21 + 23);
    if (v22 >= 0) {
      uint64_t v23 = *a2 + v10;
    }
    else {
      uint64_t v23 = *(void *)v21;
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(v21 + 23);
    }
    else {
      uint64_t v24 = *(void *)(v21 + 8);
    }
LABEL_41:
    int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v23, v24);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, " in the vocab file");
LABEL_42:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v30);
  }
  int v13 = -1;
LABEL_24:
  if (v13 - v9 + 1 == 2 * v29)
  {
    *(_DWORD *)(a1 + 1320) = v9;
    *(_DWORD *)(a1 + 13++*(_DWORD *)(result + 24) = v13;
  }
  else if (quasar::gLogLevel >= 4)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"there are ", 10);
    unint64_t v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" LME classes, their IDs are not contiguous", 42);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v30);
  }
}

void sub_1B1FE9820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1B1FE9834(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

void quasar::OnlineSeevaStepBigLmDecoder::registerParams(quasar::OnlineSeevaStepBigLmDecoder *this, quasar::SystemConfig *a2)
{
  kaldi::quasar::SeevaStepLmInferenceConfig::Register((uint64_t)this + 1040, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "seeva-step");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 152, 0, (uint64_t)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v7, "seeva inference encoder graph file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v7, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v7, "seeva inference decoder graph file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 472, (uint64_t)v7, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num-encoder-states");
  std::string::basic_string[abi:ne180100]<0>(v7, "number of encoder states");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 772, (uint64_t)v7, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num-decoder-states");
  std::string::basic_string[abi:ne180100]<0>(v7, "number of decoder states");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 776, (uint64_t)v7, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "align-state-list");
  std::string::basic_string[abi:ne180100]<0>(v7, "alignment state indices in the decoder states");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 832, (uint64_t)v7, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "vocab-file");
  std::string::basic_string[abi:ne180100]<0>(v7, "the vocab file for the model output token");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 496, (uint64_t)v7, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "vocab-is-binary");
  std::string::basic_string[abi:ne180100]<0>(v7, "vocab file is binary");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 520, (uint64_t)v7, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model-format-version");
  std::string::basic_string[abi:ne180100]<0>(v7, "model format version");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 524, (uint64_t)v7, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(v7, "feature transform file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 528, (uint64_t)v7, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-start-tag-list");
  std::string::basic_string[abi:ne180100]<0>(v7, "a list of LME start tag");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1328, (uint64_t)v7, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-end-tag-list");
  std::string::basic_string[abi:ne180100]<0>(v7, "a list of LME end tag");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1352, (uint64_t)v7, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "speller-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v7, "the speller FST file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1376, (uint64_t)v7, 1, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = (char *)operator new(0xA8uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F0A60678;
  *((void *)v4 + 19) = 0;
  *((void *)v4 + 20) = 0;
  *((void *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 215);
  *((void *)this + 215) = v4;
  *(_OWORD *)(v4 + ++*(_DWORD *)(result + 24) = 0u;
  std::vector<unsigned int>::size_type v6 = (quasar::QsrTextSymbolTable *)(v4 + 24);
  *((void *)this + 214) = v6;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    std::vector<unsigned int>::size_type v6 = (quasar::QsrTextSymbolTable *)*((void *)this + 214);
  }
  quasar::QsrTextSymbolTable::Register(v6, a2, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "inv-g-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v7, "Inverted small grammar FST filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1400, (uint64_t)v7, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-fst-file-list");
  std::string::basic_string[abi:ne180100]<0>(v7, "list of BigGrammar FST filename, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1424, (uint64_t)v7, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-fst-weight-list");
  std::string::basic_string[abi:ne180100]<0>(v7, "the interpolation weights for the FST LMs, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1472, (uint64_t)v7, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-nnet-file-list");
  std::string::basic_string[abi:ne180100]<0>(v7, "list of BigGrammar NNLM filename, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1448, (uint64_t)v7, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "nnet-map-file-ext");
  std::string::basic_string[abi:ne180100]<0>(v7, "the file extension name of the corresponding NNLM word map file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1520, (uint64_t)v7, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-nnet-weight-list");
  std::string::basic_string[abi:ne180100]<0>(v7, "the interpolation weights for the NNLMs, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1496, (uint64_t)v7, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-nce-norm-factor-list");
  std::string::basic_string[abi:ne180100]<0>(v7, "the normalization factor for NCE trained NNLMs, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1544, (uint64_t)v7, 0, 26, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rnnlm-max-context-size");
  std::string::basic_string[abi:ne180100]<0>(v7, "maximal context for RNN style LM, no-op for other style of LMs");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1568, (uint64_t)v7, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lm-unknown-word");
  std::string::basic_string[abi:ne180100]<0>(v7, "the unknown word (OOV) in the LM");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1576, (uint64_t)v7, 0, 152, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1FEA220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SeevaStepLmInferenceConfig::Register(uint64_t a1, uint64_t a2)
{
  kaldi::quasar::SeevaStepInferenceConfig::Register(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "lme-score-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "scale the LME FST score when LME is active");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 200, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nonlme-score-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "scale the nonLME arc score when LME is active.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 204, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lm-score-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "scale external LM score when available");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 208, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lm-miss-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "penalty for missing LM arc");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 212, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lm-miss-final-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "penalty for missing LM arc in final");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 216, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lm-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "use this beam value for the external LM");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 220, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lme-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "use this beam value for the LME arcs");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 224, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "length-penalty-lm");
  std::string::basic_string[abi:ne180100]<0>(__p, "the length penalty value when using external LM");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 228, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1FEA6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineSeevaStepBigLmDecoder::finishInit(quasar::OnlineSeevaStepBigLmDecoder *this)
{
  uint64_t v2 = (_OWORD *)((char *)this + 552);
  *((unsigned char *)this + 576) = *((unsigned char *)this + 1064);
  *((_OWORD *)this + 35) = *(_OWORD *)((char *)this + 1048);
  std::string::operator=((std::string *)((char *)this + 584), (const std::string *)((char *)this + 1072));
  std::string::operator=((std::string *)((char *)this + 608), (const std::string *)((char *)this + 1096));
  *((void *)this + 79) = *((void *)this + 140);
  std::string::operator=((std::string *)((char *)this + 640), (const std::string *)this + 47);
  *((unsigned char *)this + 664) = *((unsigned char *)this + 1152);
  std::string::operator=((std::string *)this + 28, (const std::string *)((char *)this + 1160));
  long long v3 = *((_OWORD *)this + 75);
  v2[9] = *((_OWORD *)this + 74);
  v2[10] = v3;
  v2[11] = *((_OWORD *)this + 76);
  *((void *)this + 93) = *((void *)this + 154);
  quasar::OnlineSeevaStepDecoder::finishInit(this);
}

void sub_1B1FEB67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  JUMPOUT(0x1B1FEB6D4);
}

void sub_1B1FEB6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  JUMPOUT(0x1B1FEB6F0);
}

void sub_1B1FEB6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void ****a17, uint64_t a18, uint64_t a19, void ***a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,char a26)
{
  a17 = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a20 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a23 = (void **)&a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

void quasar::OnlineSeevaStepBigLmDecoder::setupDecoder(quasar::OnlineSeevaStepBigLmDecoder *this)
{
  quasar::OnlineSeevaStepDecoder::resetDecoder((kaldi::quasar::SeevaStepInference **)this);
  uint64_t v2 = (char *)operator new(0x48uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1F0A5F418;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  long long v3 = (std::__shared_weak_count *)*((void *)this + 233);
  *((void *)this + 233) = v2;
  *(_OWORD *)(v2 + ++*(_DWORD *)(result + 24) = 0u;
  *((void *)this + 232) = v2 + 24;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *((void *)this + 214);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(v4 + 96) + 112))(*(void *)(v4 + 96));
  LODWORD(v6) = v5;
  if ((v5 & 0x8000000000000000) == 0) {
    uint64_t v6 = *(void *)(v4 + 120) + v5;
  }
  char v7 = (uint64_t *)*((void *)this + 216);
  for (uint64_t i = (uint64_t *)*((void *)this + 217); v7 != i; v7 += 2)
  {
    uint64_t v9 = *((void *)this + 232);
    uint64_t v10 = *v7;
    uint64_t v11 = (std::__shared_weak_count *)v7[1];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      *((void *)&v35 + 1) = v10;
      *(void *)&long long v36 = v11;
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      *((void *)&v35 + 1) = *v7;
      *(void *)&long long v36 = 0;
    }
    LODWORD(v35) = v6;
    DWORD2(v36) = -1;
    long long v52 = 0uLL;
    *(void *)&long long v53 = 0;
    int v61 = 0;
    uint64_t v62 = 0;
    uint64_t v60 = (unsigned int *)&v61;
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(v9, (unsigned int *)&v35, (uint64_t *)&v52, 0, 0, 0x40000000, 0x20000, (uint64_t)&v60);
    std::__tree<int>::destroy((uint64_t)&v60, v61);
    uint64_t v60 = (unsigned int *)&v52;
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
    if ((void)v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v36);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  uint64_t v12 = (const void **)*((void *)this + 219);
  for (uint64_t j = (const void **)*((void *)this + 220); v12 != j; v12 += 2)
  {
    uint64_t v14 = *((void *)this + 232);
    int v15 = *v12;
    uint64_t v60 = 0;
    int v61 = 0;
    uint64_t v62 = 0;
    long long v35 = 0u;
    long long v36 = 0u;
    LODWORD(v37) = 1065353216;
    int v57 = 0;
    float v58 = 0;
    uint64_t v59 = 0;
    v56[0] = 0;
    v56[1] = 0;
    int v55 = v56;
    long long v52 = 0u;
    long long v53 = 0u;
    int v54 = 1065353216;
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(v14, v15, &v60, (uint64_t)&v35, &v57, (uint64_t)&v55, 0, 0, 0, 0x20000);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v52);
    std::__tree<int>::destroy((uint64_t)&v55, v56[0]);
    if (v57)
    {
      float v58 = v57;
      operator delete(v57);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v35);
    *(void *)&long long v35 = &v60;
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  }
  uint64_t v16 = *((void *)this + 232);
  int v17 = *(uint64_t **)v16;
  uint64_t v18 = *(void *)(v16 + 8) - *(void *)v16;
  uint64_t v19 = *((void *)this + 209);
  uint64_t v20 = *((void *)this + 208);
  if (v18 >> 4 != (v19 - v20) >> 2)
  {
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v35, "some FST/NN LMs failed to load");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v35);
  }
  long long v52 = 0uLL;
  if (v18 == 16)
  {
    uint64_t v22 = *v17;
    uint64_t v21 = v17[1];
    if (!v21) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  uint64_t v25 = operator new(0x30uLL);
  v25[1] = 0;
  void v25[2] = 0;
  *uint64_t v25 = &unk_1F0A62BA8;
  v25[4] = 0;
  v25[5] = 0;
  void v25[3] = 0;
  *((void *)this + 230) = v25 + 3;
  int v26 = (std::__shared_weak_count *)*((void *)this + 231);
  *((void *)this + 231) = v25;
  if (v26)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    uint64_t v19 = *((void *)this + 209);
    uint64_t v20 = *((void *)this + 208);
  }
  if (v19 != v20)
  {
    unint64_t v27 = 0;
    do
    {
      unsigned int v28 = (uint64_t *)*((void *)this + 230);
      long long v29 = *(_OWORD *)(*(void *)v16 + 16 * v27);
      long long v35 = v29;
      if (*((void *)&v29 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      LODWORD(v36) = *(_DWORD *)(v20 + 4 * v27);
      std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::push_back[abi:ne180100](v28, (uint64_t)&v35);
      if (*((void *)&v35 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
      }
      ++v27;
      uint64_t v20 = *((void *)this + 208);
    }
    while (v27 < (*((void *)this + 209) - v20) >> 2);
  }
  long long v30 = (uint64_t *)*((void *)this + 230);
  LODWORD(v60) = 0;
  std::allocate_shared[abi:ne180100]<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType,void>(v30, (int *)&v60, &v35);
  uint64_t v21 = *((void *)&v35 + 1);
  uint64_t v31 = v35;
  long long v35 = 0uLL;
  *((void *)this + 228) = v31;
  long long v32 = (std::__shared_weak_count *)*((void *)this + 229);
  *((void *)this + 229) = v21;
  if (v32)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    if (*((void *)&v35 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
    }
    uint64_t v21 = *((void *)this + 229);
  }
  uint64_t v22 = *((void *)this + 228);
  if (v21) {
LABEL_21:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
LABEL_22:
  *(void *)&long long v52 = v22;
  *((void *)&v52 + 1) = v21;
  if (*((void *)this + 222))
  {
    std::allocate_shared[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>((uint64_t *)this + 222, (uint64_t *)&v52, &v35);
    long long v23 = v35;
    long long v35 = 0uLL;
    uint64_t v24 = (std::__shared_weak_count *)*((void *)this + 225);
    *((_OWORD *)this + 112) = v23;
    if (v24)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      if (*((void *)&v35 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
      }
    }
    std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>((uint64_t *)this + 224, &v35);
  }
  else
  {
    std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>((uint64_t *)&v52, &v35);
  }
  long long v33 = v35;
  long long v35 = 0uLL;
  long long v34 = (std::__shared_weak_count *)*((void *)this + 227);
  *((_OWORD *)this + 113) = v33;
  if (v34)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    if (*((void *)&v35 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  if (*((void *)&v52 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v52 + 1));
  }
}

void quasar::OnlineSeevaStepBigLmDecoder::runImpl(quasar::OnlineSeevaStepBigLmDecoder *a1, uint64_t *a2)
{
  long long v3 = a1;
  quasar::OnlineSeevaStepBigLmDecoder::setupDecoder(a1);
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void))(**(void **)(v5 + 16) + 24))(*(void *)(v5 + 16));
  int v6 = 0;
  uint64_t v7 = *(unsigned int *)(v5 + 24);
  uint64_t v38 = v5;
  uint64_t v8 = 1;
  while (1)
  {
    kaldi::Matrix<float>::Matrix((uint64_t)&v51, *((unsigned int *)v3 + 188), v7, 0, 0);
    int v9 = *((_DWORD *)v3 + 188);
    if (v9 < 1)
    {
      signed int v10 = 0;
      int v12 = 0;
    }
    else
    {
      signed int v10 = 0;
      while (1)
      {
        BOOL IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame((int32x2_t *)v5, v6 + v10, 1);
        if (!IsValidFrame) {
          break;
        }
        kaldi::OnlineFeatureMatrix::GetFrame((kaldi::OnlineFeatureMatrix *)v5, v6 + v10, &v47);
        kaldi::MatrixBase<float>::CopyRowFromVec((uint64_t)&v51, (uint64_t)&v47, v10++);
        int v9 = *((_DWORD *)v3 + 188);
        if (v10 >= v9) {
          goto LABEL_11;
        }
      }
      int v9 = *((_DWORD *)v3 + 188);
LABEL_11:
      int v12 = !IsValidFrame;
    }
    if (v10 <= 1) {
      int v13 = 1;
    }
    else {
      int v13 = v10;
    }
    if (v9 >= *((_DWORD *)v3 + 175)) {
      signed int v14 = *((_DWORD *)v3 + 175);
    }
    else {
      signed int v14 = v9;
    }
    v6 += v10;
    if (v12 && v6 < v14)
    {
      int v15 = v3;
      int v16 = v6;
      int v17 = v12;
      uint64_t v18 = v8;
      uint64_t v19 = v7;
      uint64_t v20 = v51;
      int v21 = v53;
      int v22 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v51);
      int v49 = 0;
      uint64_t v50 = 0;
      uint64_t v47 = v20 + 4 * v21 * (v10 - 1);
      int v48 = v22;
      uint64_t v7 = v19;
      uint64_t v8 = v18;
      int v12 = v17;
      int v6 = v16;
      long long v3 = v15;
      uint64_t v5 = v38;
      if (v10 < v14)
      {
        do
          kaldi::MatrixBase<float>::CopyRowFromVec((uint64_t)&v51, (uint64_t)&v47, v10++);
        while (v14 != v10);
      }
      int v13 = v14;
    }
    if (v13 >= *((_DWORD *)v3 + 177))
    {
      uint64_t v44 = 0;
      if (*((void *)v3 + 107))
      {
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v39, (uint64_t)&v51, 0, v13, 0, v52);
        kaldi::CuMatrix<float>::CuMatrix<float>(&v47, &v39, 111, 0);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v39);
        *(_OWORD *)long long v40 = 0u;
        long long v41 = 0u;
        int32x2_t v39 = (int32x2_t)&unk_1F0A51768;
        char v42 = 0;
        kaldi::nnet1::Nnet::Feedforward(*((uint64_t **)v3 + 107), (uint64_t)&v47, &v39, -1, 0);
        (*(void (**)(void **__return_ptr))(**(void **)(*((void *)v3 + 109) + 8) + 32))(&v43);
        long long v23 = v43;
        long long v43 = 0;
        uint64_t v24 = v44;
        uint64_t v44 = (uint64_t)v23;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
          uint64_t v25 = v43;
          long long v43 = 0;
          if (v25) {
            (*(void (**)(void *))(*(void *)v25 + 8))(v25);
          }
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v39);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v47);
      }
      else if (v13 == *((_DWORD *)v3 + 188))
      {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(*((void *)v3 + 109) + 8) + 40))(&v47);
        uint64_t v26 = v47;
        uint64_t v47 = 0;
        uint64_t v27 = v44;
        uint64_t v44 = v26;
        if (v27)
        {
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          uint64_t v28 = v47;
          uint64_t v47 = 0;
          if (v28) {
            (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
          }
        }
      }
      else
      {
        uint64_t v29 = *(void *)(*((void *)v3 + 109) + 8);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v39, (uint64_t)&v51, 0, v13, 0, v52);
        kaldi::CuMatrix<float>::CuMatrix<float>(&v47, &v39, 111, 0);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(void *)v29 + 32))(&v43, v29, &v47);
        long long v30 = v43;
        long long v43 = 0;
        uint64_t v31 = v44;
        uint64_t v44 = (uint64_t)v30;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
          long long v32 = v43;
          long long v43 = 0;
          if (v32) {
            (*(void (**)(void *))(*(void *)v32 + 8))(v32);
          }
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v47);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v39);
      }
      kaldi::quasar::SeevaStepInference::RunEncoder(*((void *)v3 + 109), &v44, v8 & 1);
      uint64_t v33 = v44;
      uint64_t v44 = 0;
      if (v33) {
        (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
      }
      uint64_t v8 = 0;
    }
    if (v12)
    {
      long long v34 = (const kaldi::quasar::SeevaStepInference *)*((void *)v3 + 109);
      long long v35 = (const kaldi::quasar::Vocab *)*((void *)v3 + 108);
      uint64_t v36 = *((void *)v3 + 226);
      uint64_t v37 = *((void *)v3 + 201);
      memset(v46, 0, sizeof(v46));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v46, *((const void **)v3 + 159), *((void *)v3 + 160), (uint64_t)(*((void *)v3 + 160) - *((void *)v3 + 159)) >> 2);
      memset(__p, 0, sizeof(__p));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *((const void **)v3 + 162), *((void *)v3 + 163), (uint64_t)(*((void *)v3 + 163) - *((void *)v3 + 162)) >> 2);
      kaldi::quasar::SeevaBeamSearchBigLm::SeevaBeamSearchBigLm((kaldi::quasar::SeevaBeamSearchBase *)&v47, v34, (quasar::OnlineSeevaStepBigLmDecoder *)((char *)v3 + 1040), v35, v36, v37);
    }
    kaldi::Matrix<float>::~Matrix((uint64_t)&v51);
  }
}

void sub_1B1FEC66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&a21);
  if (__p)
  {
    a70 = (uint64_t)__p;
    operator delete(__p);
  }
  a21 = &a72;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a21 = &STACK[0x220];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  char v74 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v74;
    operator delete(v74);
  }
  a21 = &STACK[0x250];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  int v75 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v75;
    operator delete(v75);
  }
  kaldi::quasar::SeevaBeamSearchBase::DecodeOutputData::~DecodeOutputData((kaldi::quasar::SeevaBeamSearchBase::DecodeOutputData *)&STACK[0x280]);
  unint64_t v76 = STACK[0x2E8];
  STACK[0x2E8] = 0;
  if (v76) {
    (*(void (**)(unint64_t))(*(void *)v76 + 8))(v76);
  }
  kaldi::quasar::SeevaBeamSearchBigLm::~SeevaBeamSearchBigLm((kaldi::quasar::SeevaBeamSearchBigLm *)&STACK[0x320]);
  kaldi::Matrix<float>::~Matrix(v72 - 128);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineSeevaStepDecoder::affectsRecognitionResults(quasar::OnlineSeevaStepDecoder *this)
{
  return 1;
}

void kaldi::quasar::SeevaBeamSearchBigLm::SeevaBeamSearchBigLm(kaldi::quasar::SeevaBeamSearchBase *a1, const kaldi::quasar::SeevaStepInference *a2, const kaldi::quasar::SeevaStepInferenceConfig *a3, const kaldi::quasar::Vocab *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = kaldi::quasar::SeevaBeamSearchBase::SeevaBeamSearchBase(a1, a2, a3, a4);
  *(void *)uint64_t v8 = &unk_1F0A50FF0;
  *((void *)v8 + 49) = a5;
  *((void *)v8 + 50) = a6;
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher((uint64_t)v8 + 408, a6, 0, 1);
}

void sub_1B1FECA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  kaldi::quasar::SeevaBeamSearchBase::~SeevaBeamSearchBase(v10);
  _Unwind_Resume(a1);
}

kaldi::quasar::SeevaBeamSearchBase *kaldi::quasar::SeevaBeamSearchBase::SeevaBeamSearchBase(kaldi::quasar::SeevaBeamSearchBase *this, const kaldi::quasar::SeevaStepInference *a2, const kaldi::quasar::SeevaStepInferenceConfig *a3, const kaldi::quasar::Vocab *a4)
{
  *(void *)this = &unk_1F0A50DD0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a3;
  *((void *)this + 3) = a4;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + --*(_DWORD *)(a9 + 84) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *(_OWORD *)((char *)this + 132) = 0u;
  *(_OWORD *)((char *)this + 148) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_OWORD *)((char *)this + 180) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *(_OWORD *)((char *)this + 212) = 0u;
  *(_OWORD *)((char *)this + 228) = 0u;
  *(_OWORD *)((char *)this + 244) = 0u;
  *((_DWORD *)this + 97) = 0;
  *(_OWORD *)((char *)this + --*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)((char *)this + 260) = 0u;
  *(_OWORD *)((char *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(_OWORD *)((char *)this + 308) = 0u;
  *(_OWORD *)((char *)this + 3++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)((char *)this + 340) = 0u;
  *(_OWORD *)((char *)this + 356) = 0u;
  *(_OWORD *)((char *)this + 372) = 0u;
  kaldi::quasar::Vocab::BosWord(a4, &__p);
  *((_DWORD *)this + 8) = kaldi::quasar::Vocab::GetWordId((uint64_t)a4, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v6 = (kaldi::quasar::Vocab *)*((void *)this + 3);
  kaldi::quasar::Vocab::EosWord(v6, &__p);
  *((_DWORD *)this + 9) = kaldi::quasar::Vocab::GetWordId((uint64_t)v6, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = (kaldi::quasar::Vocab *)*((void *)this + 3);
  kaldi::quasar::Vocab::OOvWord(v7, &__p);
  *((_DWORD *)this + 10) = kaldi::quasar::Vocab::GetWordId((uint64_t)v7, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((_DWORD *)this + 11) = kaldi::quasar::Vocab::VocabSize(*((kaldi::quasar::Vocab **)this + 3));
  *((_DWORD *)this + 12) = *(_DWORD *)(*((void *)this + 2) + 184) + 1;
  return this;
}

void sub_1B1FECBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::deque<kaldi::quasar::SeevaBeamSearchBase::RollbackStats>::~deque[abi:ne180100](v15 + 43);
  std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~deque[abi:ne180100](v15 + 37);
  std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~deque[abi:ne180100](v15 + 31);
  std::string __p = v15 + 28;
  std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::deque<std::vector<int>>::~deque[abi:ne180100](v15 + 22);
  std::deque<std::vector<BOOL>>::~deque[abi:ne180100](v15 + 16);
  std::deque<std::vector<int>>::~deque[abi:ne180100](v15 + 10);
  int v17 = (void *)v15[7];
  if (v17)
  {
    v15[8] = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaBeamSearchBase::~SeevaBeamSearchBase(kaldi::quasar::SeevaBeamSearchBase *this)
{
  *(void *)this = &unk_1F0A50DD0;
  std::deque<kaldi::quasar::SeevaBeamSearchBase::RollbackStats>::~deque[abi:ne180100]((void *)this + 43);
  std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~deque[abi:ne180100]((void *)this + 37);
  std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~deque[abi:ne180100]((void *)this + 31);
  long long v3 = (void **)((char *)this + 224);
  std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::deque<std::vector<int>>::~deque[abi:ne180100]((void *)this + 22);
  std::deque<std::vector<BOOL>>::~deque[abi:ne180100]((void *)this + 16);
  std::deque<std::vector<int>>::~deque[abi:ne180100]((void *)this + 10);
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
}

uint64_t std::deque<kaldi::quasar::SeevaBeamSearchBase::RollbackStats>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    long long v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    int v6 = &v2[v5 >> 7];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v5) & 0x7F);
    if (v8 != v9)
    {
      do
      {
        signed int v10 = *(void **)v8;
        if (*(void *)v8)
        {
          *(void *)(v8 + 8) = v10;
          operator delete(v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 32;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      long long v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 64;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 128;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    int v15 = *v2++;
    operator delete(v15);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    long long v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    int v6 = &v2[v5 >> 9];
    uint64_t v7 = (uint64_t *)((char *)*v6 + 8 * (v5 & 0x1FF));
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (uint64_t *)v8)
    {
      do
      {
        uint64_t v9 = *v7;
        uint64_t *v7 = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
        if ((char *)++v7 - (unsigned char *)*v6 == 4096)
        {
          signed int v10 = (uint64_t *)v6[1];
          ++v6;
          uint64_t v7 = v10;
        }
      }
      while (v7 != (uint64_t *)v8);
      uint64_t v2 = (void **)a1[1];
      long long v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 256;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_18;
    }
    uint64_t v13 = 512;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::deque<std::vector<BOOL>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    long long v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    int v6 = &v2[v5 / 0xAA];
    uint64_t v7 = *v6;
    uint64_t v8 = (void **)((char *)*v6 + 24 * (v5 % 0xAA));
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != (void **)v9)
    {
      do
      {
        if (*v8)
        {
          operator delete(*v8);
          uint64_t v7 = *v6;
        }
        v8 += 3;
        if ((char *)v8 - v7 == 4080)
        {
          signed int v10 = (void **)v6[1];
          ++v6;
          uint64_t v7 = v10;
          uint64_t v8 = v10;
        }
      }
      while (v8 != (void **)v9);
      uint64_t v2 = (void **)a1[1];
      long long v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 85;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_18;
    }
    uint64_t v13 = 170;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::vector<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

void kaldi::quasar::SeevaBeamSearchBigLm::~SeevaBeamSearchBigLm(kaldi::quasar::SeevaBeamSearchBigLm *this)
{
  *(void *)this = &unk_1F0A50FF0;
  uint64_t v7 = (void **)((char *)this + 680);
  std::vector<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v2 = (void *)*((void *)this + 82);
  if (v2)
  {
    *((void *)this + 83) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 79);
  if (v3)
  {
    *((void *)this + 80) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 75);
  if (v4)
  {
    *((void *)this + 76) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 72);
  if (v5)
  {
    *((void *)this + 73) = v5;
    operator delete(v5);
  }
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~SortedMatcher((void *)this + 51);
  *(void *)this = &unk_1F0A50DD0;
  std::deque<kaldi::quasar::SeevaBeamSearchBase::RollbackStats>::~deque[abi:ne180100]((void *)this + 43);
  std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~deque[abi:ne180100]((void *)this + 37);
  std::deque<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~deque[abi:ne180100]((void *)this + 31);
  uint64_t v7 = (void **)((char *)this + 224);
  std::vector<kaldi::quasar::SeevaBeamSearchBase::Breadcrumb>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::deque<std::vector<int>>::~deque[abi:ne180100]((void *)this + 22);
  std::deque<std::vector<BOOL>>::~deque[abi:ne180100]((void *)this + 16);
  std::deque<std::vector<int>>::~deque[abi:ne180100]((void *)this + 10);
  int v6 = (void *)*((void *)this + 7);
  if (v6)
  {
    *((void *)this + 8) = v6;
    operator delete(v6);
  }
}

void *std::allocate_shared[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  int v6 = operator new(0x90uLL);
  BOOL result = std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1FED3E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E3B0;
  std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B1FED45C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = *a3;
  int v15 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v5 = (std::__shared_weak_count *)a4[1];
  uint64_t v12 = *a4;
  uint64_t v13 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v11 = _D0;
  fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeDeterministicOnDemandFst(a2, &v14, &v12, &v11);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1B1FED4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x60uLL);
  BOOL result = std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1FED564(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E340;
  std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_1B1FED5D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &>(uint64_t a1, void *a2, uint64_t *a3)
{
  long long v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v4 = *a3;
  char v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(a2, &v4, 0x20000uLL);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1B1FED640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x60uLL);
  BOOL result = std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1FED6A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E340;
  std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_1B1FED710(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &>(uint64_t a1, void *a2, uint64_t *a3)
{
  long long v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v4 = *a3;
  char v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(a2, &v4, 0x20000uLL);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1B1FED77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,float const&,BOOL>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, float *a6, unsigned __int8 *a7)
{
  uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x124924924924924) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v9) {
    unint64_t v9 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492) {
    unint64_t v16 = 0x124924924924924;
  }
  else {
    unint64_t v16 = v9;
  }
  uint64_t v24 = a1 + 2;
  if (v16) {
    int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v16);
  }
  else {
    int v17 = 0;
  }
  uint64_t v20 = v17;
  int v21 = (std::string *)&v17[224 * v8];
  long long v23 = &v17[224 * v16];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,float const&,BOOL>((uint64_t)(a1 + 2), v21, a2, a3, a4, a5, a6, a7);
  int v22 = &v21[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v20);
  uint64_t v18 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v20);
  return v18;
}

void sub_1B1FED8E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,float const&,BOOL>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, float *a7, unsigned __int8 *a8)
{
  long long v21 = *(_OWORD *)a3;
  uint64_t v22 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  int v9 = *a4;
  int v10 = *a5;
  int v11 = *a6;
  float v12 = *a7;
  int v13 = *a8;
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  std::string::basic_string[abi:ne180100]<0>(v17, "");
  memset(v16, 0, sizeof(v16));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::Token::Token(a2, &v21, v9, v10, v11, v13 != 0, 0, (long long *)v19, v12, (long long *)v17, v16, 0, (long long *)__p, 0, 0);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)v21);
  }
}

void sub_1B1FEDA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::string __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(a1);
}

void quasar::CustomPronData::loadFromStream()
{
}

void sub_1B1FEE12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,char *a29,uint64_t a30,char a31,char *a32)
{
  std::__tree<std::string>::destroy((uint64_t)&a28, a29);
  std::__tree<std::string>::destroy((uint64_t)&a31, a32);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(v33 - 128);
  uint64_t v35 = *(void *)(v33 - 96);
  *(void *)(v33 - 96) = 0;
  if (v35) {
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100](v33 - 96, v35);
  }
  uint64_t v36 = *v32;
  *long long v32 = 0;
  if (v36) {
    std::default_delete<quasar::CustomPronData>::operator()[abi:ne180100]((uint64_t)v32, v36);
  }
  _Unwind_Resume(a1);
}

void boost::property_tree::xml_parser::read_xml<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FEE378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::property_tree::xml_parser::read_xml_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)MEMORY[0x1F4188790](a1, a2);
  uint64_t v4 = v3;
  char v6 = v5;
  uint64_t v7 = v2;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *v2;
  *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 8) &= ~0x1000u;
  int v9 = *(void **)((char *)v2 + *(void *)(v8 - 24) + 40);
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  std::string __p = 0;
  std::vector<char>::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>((unint64_t *)&__p, v9, 0);
  if (!*(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 32))
  {
    int v10 = v25;
    if ((unint64_t)v25 >= v26)
    {
      unint64_t v12 = (unint64_t)__p;
      uint64_t v13 = v25 - (unsigned char *)__p;
      uint64_t v14 = v25 - (unsigned char *)__p + 1;
      if (v14 < 0) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = v26 - (void)__p;
      if (2 * (v26 - (unint64_t)__p) > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        int v17 = operator new(v16);
      }
      else {
        int v17 = 0;
      }
      char v18 = (char *)v17 + v16;
      *((unsigned char *)v17 + v13) = 0;
      uint64_t v11 = (uint64_t)v17 + v13 + 1;
      if (v10 == (char *)v12)
      {
        int v17 = (char *)v17 + v13;
      }
      else
      {
        uint64_t v19 = &v10[~v12];
        do
        {
          char v20 = *--v10;
          (v19--)[(void)v17] = v20;
        }
        while (v10 != (char *)v12);
        int v10 = (char *)__p;
      }
      std::string __p = v17;
      uint64_t v25 = (char *)v11;
      unint64_t v26 = (unint64_t)v18;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *uint64_t v25 = 0;
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    uint64_t v25 = (char *)v11;
    uint64_t v28 = 0;
    v27[0] = 0u;
    int v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    long long v36 = 0u;
    long long v32 = v35;
    uint64_t v33 = v35;
    long long v34 = &v36;
    if ((v6 & 2) != 0)
    {
      if ((v6 & 4) != 0) {
        boost::property_tree::detail::rapidxml::xml_document<char>::parse<3072>(v27, (char *)__p);
      }
      else {
        boost::property_tree::detail::rapidxml::xml_document<char>::parse<0>(v27, (char *)__p);
      }
    }
    else if ((v6 & 4) != 0)
    {
      boost::property_tree::detail::rapidxml::xml_document<char>::parse<3136>(v27, (char *)__p);
    }
    else
    {
      boost::property_tree::detail::rapidxml::xml_document<char>::parse<64>(v27, (char *)__p);
    }
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v21, "read error");
  boost::property_tree::file_parser_error::file_parser_error((uint64_t)v27, (uint64_t)&v21, v4, 0);
  *(void *)&v27[0] = &unk_1F0A46D08;
  v23[0] = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Develo"
           "per/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/boost/property_tre"
           "e/detail/xml_parser_read_rapidxml.hpp";
  v23[1] = "void boost::property_tree::xml_parser::read_xml_internal(std::basic_istream<typename Ptree::key_type::value_t"
           "ype> &, Ptree &, int, const std::string &) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]";
  v23[2] = 101;
  boost::throw_exception<boost::property_tree::xml_parser::xml_parser_error>((uint64_t)v27, (uint64_t)v23);
}

void sub_1B1FEE710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::runtime_error a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void sub_1B1FEE738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (a16) {
    operator delete(a16);
  }
  JUMPOUT(0x1B1FEE8DCLL);
}

void sub_1B1FEE748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, const char *a16, const char *a17, uint64_t a18, unsigned __int8 *a19, unsigned __int8 *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  MEMORY[0x1B3EA8670](v28, 0x1020C402FC1992ELL);
  if (a14 < 0) {
    operator delete(__p);
  }
  boost::property_tree::detail::rapidxml::memory_pool<char>::clear(v27);
  if (a2 == 1)
  {
    uint64_t v31 = __cxa_begin_catch(a1);
    long long v32 = a19;
    uint64_t v33 = (unsigned __int8 *)v31[2];
    if (a19 == v33)
    {
      uint64_t v34 = 1;
    }
    else
    {
      uint64_t v35 = 0;
      do
      {
        int v36 = *v32++;
        if (v36 == 10) {
          ++v35;
        }
      }
      while (v32 != v33);
      uint64_t v34 = v35 + 1;
    }
    uint64_t v37 = (char *)(*(uint64_t (**)(void *))(*v31 + 16))(v31);
    std::string::basic_string[abi:ne180100]<0>(&__p, v37);
    boost::property_tree::file_parser_error::file_parser_error((uint64_t)&a26, (uint64_t)&__p, v26, v34);
    a26 = &unk_1F0A46D08;
    a16 = "/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/boost/property_tree/"
          "detail/xml_parser_read_rapidxml.hpp";
    a17 = "void boost::property_tree::xml_parser::read_xml_internal(std::basic_istream<typename Ptree::key_type::value_ty"
          "pe> &, Ptree &, int, const std::string &) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]";
    a18 = 138;
    boost::throw_exception<boost::property_tree::xml_parser::xml_parser_error>((uint64_t)&a26, (uint64_t)&a16);
  }
  if (a19)
  {
    a20 = a19;
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void sub_1B1FEE88C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::runtime_error a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1B1FEE8BCLL);
}

void sub_1B1FEE8D4(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1B1FEE8DCLL);
  }
  __clang_call_terminate(a1);
}

void boost::throw_exception<boost::property_tree::xml_parser::xml_parser_error>(uint64_t a1, uint64_t a2)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x78uLL);
  boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::wrapexcept(exception, a1, a2);
}

void sub_1B1FEE940(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *boost::property_tree::detail::rapidxml::xml_document<char>::parse<3072>(void *result, char *a2)
{
  uint64_t v2 = (uint64_t)result;
  uint64_t v14 = a2;
  uint64_t v4 = result + 6;
  for (uint64_t i = result[6]; i; uint64_t i = *(void *)(i + 88))
    *(void *)(i + 32) = 0;
  result[6] = 0;
  for (uint64_t j = result[8]; j; uint64_t j = *(void *)(j + 48))
    *(void *)(j + 32) = 0;
  result[8] = 0;
  if (*a2 == 239 && a2[1] == 187 && a2[2] == 191)
  {
    a2 += 3;
    uint64_t v14 = a2;
  }
  while (1)
  {
    do
    {
      char v6 = a2;
      int v8 = *a2++;
      unsigned __int8 v7 = v8;
      if (v8 < 0) {
        unsigned __int8 v7 = 122;
      }
    }
    while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7]);
    uint64_t v14 = v6;
    int v9 = *v6;
    if (v9 != 60) {
      break;
    }
    uint64_t v14 = a2;
    BOOL result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<3072>(v2, &v14);
    if (result)
    {
      uint64_t v10 = *v4;
      if (*v4)
      {
        uint64_t v10 = *(void *)(v2 + 56);
        uint64_t v11 = (void *)(v10 + 88);
      }
      else
      {
        uint64_t v11 = v4;
      }
      void *v11 = result;
      result[10] = v10;
      *(void *)(v2 + 56) = result;
      result[4] = v2;
      result[11] = 0;
    }
    a2 = v14;
  }
  if (v9)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    uint64_t v13 = v14;
    *exceptiouint64_t n = &unk_1F0A46DD0;
    exception[1] = "expected <";
    exception[2] = v13;
  }
  return result;
}

void *boost::property_tree::detail::rapidxml::xml_document<char>::parse<0>(void *result, char *a2)
{
  uint64_t v2 = (uint64_t)result;
  uint64_t v14 = a2;
  uint64_t v4 = result + 6;
  for (uint64_t i = result[6]; i; uint64_t i = *(void *)(i + 88))
    *(void *)(i + 32) = 0;
  result[6] = 0;
  for (uint64_t j = result[8]; j; uint64_t j = *(void *)(j + 48))
    *(void *)(j + 32) = 0;
  result[8] = 0;
  if (*a2 == 239 && a2[1] == 187 && a2[2] == 191)
  {
    a2 += 3;
    uint64_t v14 = a2;
  }
  while (1)
  {
    do
    {
      char v6 = a2;
      int v8 = *a2++;
      unsigned __int8 v7 = v8;
      if (v8 < 0) {
        unsigned __int8 v7 = 122;
      }
    }
    while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7]);
    uint64_t v14 = v6;
    int v9 = *v6;
    if (v9 != 60) {
      break;
    }
    uint64_t v14 = a2;
    BOOL result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<0>(v2, &v14);
    if (result)
    {
      uint64_t v10 = *v4;
      if (*v4)
      {
        uint64_t v10 = *(void *)(v2 + 56);
        uint64_t v11 = (void *)(v10 + 88);
      }
      else
      {
        uint64_t v11 = v4;
      }
      void *v11 = result;
      result[10] = v10;
      *(void *)(v2 + 56) = result;
      result[4] = v2;
      result[11] = 0;
    }
    a2 = v14;
  }
  if (v9)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    uint64_t v13 = v14;
    *exceptiouint64_t n = &unk_1F0A46DD0;
    exception[1] = "expected <";
    exception[2] = v13;
  }
  return result;
}

void *boost::property_tree::detail::rapidxml::xml_document<char>::parse<3136>(void *result, char *a2)
{
  uint64_t v2 = (uint64_t)result;
  uint64_t v14 = a2;
  uint64_t v4 = result + 6;
  for (uint64_t i = result[6]; i; uint64_t i = *(void *)(i + 88))
    *(void *)(i + 32) = 0;
  result[6] = 0;
  for (uint64_t j = result[8]; j; uint64_t j = *(void *)(j + 48))
    *(void *)(j + 32) = 0;
  result[8] = 0;
  if (*a2 == 239 && a2[1] == 187 && a2[2] == 191)
  {
    a2 += 3;
    uint64_t v14 = a2;
  }
  while (1)
  {
    do
    {
      char v6 = a2;
      int v8 = *a2++;
      unsigned __int8 v7 = v8;
      if (v8 < 0) {
        unsigned __int8 v7 = 122;
      }
    }
    while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7]);
    uint64_t v14 = v6;
    int v9 = *v6;
    if (v9 != 60) {
      break;
    }
    uint64_t v14 = a2;
    BOOL result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<3136>(v2, &v14);
    if (result)
    {
      uint64_t v10 = *v4;
      if (*v4)
      {
        uint64_t v10 = *(void *)(v2 + 56);
        uint64_t v11 = (void *)(v10 + 88);
      }
      else
      {
        uint64_t v11 = v4;
      }
      void *v11 = result;
      result[10] = v10;
      *(void *)(v2 + 56) = result;
      result[4] = v2;
      result[11] = 0;
    }
    a2 = v14;
  }
  if (v9)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    uint64_t v13 = v14;
    *exceptiouint64_t n = &unk_1F0A46DD0;
    exception[1] = "expected <";
    exception[2] = v13;
  }
  return result;
}

void *boost::property_tree::detail::rapidxml::xml_document<char>::parse<64>(void *result, char *a2)
{
  uint64_t v2 = (uint64_t)result;
  uint64_t v14 = a2;
  uint64_t v4 = result + 6;
  for (uint64_t i = result[6]; i; uint64_t i = *(void *)(i + 88))
    *(void *)(i + 32) = 0;
  result[6] = 0;
  for (uint64_t j = result[8]; j; uint64_t j = *(void *)(j + 48))
    *(void *)(j + 32) = 0;
  result[8] = 0;
  if (*a2 == 239 && a2[1] == 187 && a2[2] == 191)
  {
    a2 += 3;
    uint64_t v14 = a2;
  }
  while (1)
  {
    do
    {
      char v6 = a2;
      int v8 = *a2++;
      unsigned __int8 v7 = v8;
      if (v8 < 0) {
        unsigned __int8 v7 = 122;
      }
    }
    while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7]);
    uint64_t v14 = v6;
    int v9 = *v6;
    if (v9 != 60) {
      break;
    }
    uint64_t v14 = a2;
    BOOL result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<64>(v2, &v14);
    if (result)
    {
      uint64_t v10 = *v4;
      if (*v4)
      {
        uint64_t v10 = *(void *)(v2 + 56);
        uint64_t v11 = (void *)(v10 + 88);
      }
      else
      {
        uint64_t v11 = v4;
      }
      void *v11 = result;
      result[10] = v10;
      *(void *)(v2 + 56) = result;
      result[4] = v2;
      result[11] = 0;
    }
    a2 = v14;
  }
  if (v9)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    uint64_t v13 = v14;
    *exceptiouint64_t n = &unk_1F0A46DD0;
    exception[1] = "expected <";
    exception[2] = v13;
  }
  return result;
}

void boost::property_tree::xml_parser::read_xml_node<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,char>(uint64_t a1, std::string *a2, char a3)
{
  int v5 = *(_DWORD *)(a1 + 40);
  if ((v5 - 2) < 2)
  {
    if (a3)
    {
      boost::property_tree::xml_parser::xmltext<std::string>();
      if (*(void *)(a1 + 8)) {
        uint64_t v13 = *(char **)(a1 + 8);
      }
      else {
        uint64_t v13 = (char *)&boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
      }
      std::string::basic_string[abi:ne180100]<0>(&v16, v13);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v17, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
      }
      else {
        std::string v17 = v16;
      }
      operator new();
    }
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7) {
      int v8 = *(void **)(a1 + 8);
    }
    else {
      int v8 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
    }
    if (v7) {
      size_t v9 = *(void *)(a1 + 24);
    }
    else {
      size_t v9 = 0;
    }
    std::string::basic_string[abi:ne180100](__p, v8, v9);
    if ((v19 & 0x80u) == 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (void **)__p[0];
    }
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v15 = v19;
    }
    else {
      std::string::size_type v15 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v14, v15);
    if ((char)v19 < 0) {
      operator delete(__p[0]);
    }
  }
  else if (v5 == 4)
  {
    if ((a3 & 2) == 0)
    {
      boost::property_tree::xml_parser::xmlcomment<std::string>();
      uint64_t v10 = *(void *)(a1 + 8);
      if (v10) {
        uint64_t v11 = *(void **)(a1 + 8);
      }
      else {
        uint64_t v11 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
      }
      if (v10) {
        size_t v12 = *(void *)(a1 + 24);
      }
      else {
        size_t v12 = 0;
      }
      std::string::basic_string[abi:ne180100](&v16, v11, v12);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v17, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
      }
      else {
        std::string v17 = v16;
      }
      operator new();
    }
  }
  else if (v5 == 1)
  {
    char v6 = *(void **)a1;
    if (!*(void *)a1) {
      char v6 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
    }
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    memset(&v17, 0, sizeof(v17));
    operator new();
  }
}

void sub_1B1FEF4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::vector<char>::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(unint64_t *a1, void *a2, void *a3)
{
  uint64_t v24 = a3;
  while (1)
  {
    if (a2)
    {
      if (a2[3] == a2[4])
      {
        int v6 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
        int v5 = v6 == -1;
        if (v6 == -1) {
          a2 = 0;
        }
      }
      else
      {
        int v5 = 0;
      }
    }
    else
    {
      int v5 = 1;
    }
    BOOL result = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](&v24);
    if (v5 == result) {
      break;
    }
    int v8 = (char *)a2[3];
    if (v8 == (char *)a2[4]) {
      char v9 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
    }
    else {
      char v9 = *v8;
    }
    uint64_t v11 = (unsigned char *)a1[1];
    unint64_t v10 = a1[2];
    if ((unint64_t)v11 >= v10)
    {
      unint64_t v13 = *a1;
      uint64_t v14 = &v11[-*a1];
      unint64_t v15 = (unint64_t)(v14 + 1);
      if ((uint64_t)(v14 + 1) < 0) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v16 = v10 - v13;
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v15;
      }
      if (v17) {
        char v18 = (char *)operator new(v17);
      }
      else {
        char v18 = 0;
      }
      unsigned __int8 v19 = &v14[(void)v18];
      char v20 = &v14[(void)v18];
      unsigned char *v20 = v9;
      size_t v12 = v20 + 1;
      if (v11 != (unsigned char *)v13)
      {
        long long v21 = &v11[~v13];
        do
        {
          char v22 = *--v11;
          (v21--)[(void)v18] = v22;
        }
        while (v11 != (unsigned char *)v13);
        uint64_t v11 = (unsigned char *)*a1;
        unsigned __int8 v19 = v18;
      }
      *a1 = (unint64_t)v19;
      a1[1] = (unint64_t)v12;
      a1[2] = (unint64_t)&v18[v17];
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      unsigned char *v11 = v9;
      size_t v12 = v11 + 1;
    }
    a1[1] = (unint64_t)v12;
    uint64_t v23 = a2[3];
    if (v23 == a2[4]) {
      (*(void (**)(void *))(*a2 + 80))(a2);
    }
    else {
      a2[3] = v23 + 1;
    }
  }
  return result;
}

void sub_1B1FEF810(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 80) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 88));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::wrapexcept(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  *(void *)a1 = &unk_1F0A46DF8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)a2);
  *(void *)(a1 + 8) = &unk_1F0A46DA8;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 40) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = v6;
  }
  uint64_t v7 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 64) = *(void *)(a2 + 56);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)a1 = &unk_1F0A46850;
  *(void *)(a1 + 8) = &unk_1F0A46880;
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = &unk_1F0A468A8;
  *(_DWORD *)(a1 + 112) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 96) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void sub_1B1FEF9E0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*v3);
  }
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::clone()
{
}

void sub_1B1FEFAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x78uLL);
  boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::wrapexcept(exception, a1);
}

void sub_1B1FEFB88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 80) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 88));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 72) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 72) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 - 9));
}

{
  uint64_t vars8;

  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 - 9));
  JUMPOUT(0x1B3EA8670);
}

void boost::property_tree::xml_parser::xml_parser_error::~xml_parser_error(std::runtime_error *this)
{
  boost::property_tree::file_parser_error::~file_parser_error(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t boost::wrapexcept<boost::property_tree::xml_parser::xml_parser_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A46DF8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1F0A46DA8;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = v4;
  }
  int v5 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8) = &unk_1F0A46D08;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = &unk_1F0A47040;
  *(void *)(a1 + 88) = v7;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  long long v8 = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v8;
  *(void *)a1 = &unk_1F0A46850;
  *(void *)(a1 + 8) = &unk_1F0A46880;
  *(void *)(a1 + 80) = &unk_1F0A468A8;
  return a1;
}

void sub_1B1FEFF94(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*v3);
  }
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void *boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<3072>(uint64_t a1, char **a2)
{
  uint64_t v2 = *a2;
  int v3 = **a2;
  if (v3 != 33)
  {
    if (v3 == 63)
    {
      *a2 = v2 + 1;
      if ((v2[1] | 0x20) != 0x78
        || (v2[2] | 0x20) != 0x6D
        || (v2[3] | 0x20) != 0x6C)
      {
        goto LABEL_22;
      }
      int v4 = v2[4];
      if (v4 < 0) {
        LOBYTE(v4) = 122;
      }
      if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v4])
      {
        *a2 = v2 + 5;
      }
      else
      {
LABEL_22:
      }
      return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_xml_declaration<3072>(a1, a2);
    }
    else
    {
      return boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<3072>(a1, a2);
    }
  }
  int v6 = v2[1];
  if (v6 != 91)
  {
    if (v6 != 68)
    {
      if (v6 == 45 && v2[2] == 45)
      {
        *a2 = v2 + 3;
        return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_comment<3072>(a1, a2);
      }
      goto LABEL_46;
    }
    if (v2[2] == 79 && v2[3] == 67 && v2[4] == 84 && v2[5] == 89 && v2[6] == 80 && v2[7] == 69)
    {
      int v7 = v2[8];
      if (v7 < 0) {
        LOBYTE(v7) = 122;
      }
      if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7])
      {
        *a2 = v2 + 9;
        return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_doctype<3072>(a1, a2);
      }
    }
LABEL_46:
    long long v8 = v2 + 1;
    while (1)
    {
      *a2 = v8;
      int v10 = *v8++;
      int v9 = v10;
      if (v10 == 62) {
        break;
      }
      if (!v9)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        unint64_t v13 = *a2;
        *exceptiouint64_t n = &unk_1F0A46DD0;
        exception[1] = "unexpected end of data";
        exception[2] = v13;
      }
    }
    *a2 = v8;
    return 0;
  }
  if (v2[2] != 67 || v2[3] != 68 || v2[4] != 65 || v2[5] != 84 || v2[6] != 65 || v2[7] != 91) {
    goto LABEL_46;
  }
  *a2 = v2 + 8;
  return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_cdata<3072>(a1, a2);
}

void *boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<3072>(uint64_t a1, char **a2)
{
  uint64_t aligned = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  int v5 = (void *)aligned;
  uint64_t v6 = 0;
  *(void *)(aligned + 32) = 0;
  *(void *)uint64_t aligned = 0;
  *(void *)(aligned + 8) = 0;
  *(_DWORD *)(aligned + 40) = 1;
  *(void *)(aligned + 48) = 0;
  *(void *)(aligned + 64) = 0;
  int v7 = *a2;
  do
  {
    int v8 = v7[v6];
    if (v8 < 0) {
      LOBYTE(v8) = 122;
    }
    ++v6;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v8]);
  *a2 = &v7[v6 - 1];
  uint64_t v9 = v6 - 1;
  if (!v9)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    unsigned __int8 v19 = *a2;
    char v20 = "expected element name";
    goto LABEL_21;
  }
  *(void *)uint64_t aligned = v7;
  *(void *)(aligned + 16) = v9;
  uint64_t v10 = (uint64_t)(*a2 - 1);
  do
  {
    int v12 = *(char *)++v10;
    unsigned __int8 v11 = v12;
    if (v12 < 0) {
      unsigned __int8 v11 = 122;
    }
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v11]);
  *a2 = (char *)v10;
  boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_attributes<3072>((char *)a1, a2, aligned);
  unint64_t v13 = *a2;
  int v14 = **a2;
  if (v14 != 47)
  {
    if (v14 == 62)
    {
      *a2 = v13 + 1;
      boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<3072>(a1, a2, v5);
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  *a2 = v13 + 1;
  if (v13[1] != 62)
  {
LABEL_20:
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    unsigned __int8 v19 = *a2;
    char v20 = "expected >";
LABEL_21:
    *exceptiouint64_t n = &unk_1F0A46DD0;
    exception[1] = v20;
    exception[2] = v19;
  }
  *a2 = v13 + 2;
LABEL_15:
  unint64_t v15 = (unsigned char *)*v5;
  if (*v5)
  {
    uint64_t v16 = v5[2];
  }
  else
  {
    uint64_t v16 = 0;
    unint64_t v15 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
  }
  v15[v16] = 0;
  return v5;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_xml_declaration<3072>(uint64_t a1, unsigned char **a2)
{
  for (uint64_t i = *a2; *i++ != 63; *a2 = i)
  {
    if (!*(i - 1))
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
      uint64_t v6 = *a2;
      *exceptiouint64_t n = &unk_1F0A46DD0;
      exception[1] = "unexpected end of data";
      exception[2] = v6;
    }
LABEL_6:
    ;
  }
  if (*i != 62) {
    goto LABEL_6;
  }
  *a2 = i + 1;
  return 0;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_comment<3072>(uint64_t a1, unsigned char **a2)
{
  for (uint64_t i = *a2; ; *a2 = i)
  {
    if (*i++ != 45)
    {
      if (!*(i - 1))
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        uint64_t v6 = *a2;
        *exceptiouint64_t n = &unk_1F0A46DD0;
        exception[1] = "unexpected end of data";
        exception[2] = v6;
      }
      continue;
    }
    if (*i == 45 && i[1] == 62) {
      break;
    }
  }
  *a2 = i + 2;
  return 0;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_cdata<3072>(uint64_t a1, void *a2)
{
  int v3 = (unsigned char *)*a2;
  for (uint64_t i = (unsigned char *)(*a2 + 1); ; ++i)
  {
    if (*(i - 1) != 93)
    {
      if (!*(i - 1))
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        uint64_t v8 = *a2;
        *exceptiouint64_t n = &unk_1F0A46DD0;
        exception[1] = "unexpected end of data";
        exception[2] = v8;
      }
      goto LABEL_7;
    }
    if (*i == 93 && i[1] == 62) {
      break;
    }
LABEL_7:
    *a2 = i;
  }
  uint64_t result = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  *(void *)(result + 32) = 0;
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 40) = 3;
  *(void *)(result + 48) = 0;
  *(void *)(result + 64) = 0;
  uint64_t v6 = *a2 - (void)v3;
  *(void *)(result + 8) = v3;
  *(void *)(result + ++*(_DWORD *)(result + 24) = v6;
  *(unsigned char *)*a2 = 0;
  *a2 += 3;
  return result;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_doctype<3072>(uint64_t a1, unsigned char **a2)
{
  uint64_t v2 = *a2;
  while (1)
  {
    int v3 = *v2;
    if (v3 == 62) {
      break;
    }
    if (*v2 == 91)
    {
      *a2 = ++v2;
      int v4 = 1;
      do
      {
        int v5 = (char)*v2;
        if (v5 == 91)
        {
          ++v4;
        }
        else if (v5 == 93)
        {
          --v4;
        }
        else if (!*v2)
        {
          goto LABEL_16;
        }
        *a2 = ++v2;
      }
      while (v4 > 0);
    }
    else
    {
      if (!(_BYTE)v3)
      {
LABEL_16:
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        uint64_t v9 = *a2;
        *exceptiouint64_t n = &unk_1F0A46DD0;
        exception[1] = "unexpected end of data";
        exception[2] = v9;
      }
      *a2 = ++v2;
    }
  }
  *a2 = v2 + 1;
  return 0;
}

char *boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_attributes<3072>(char *result, char **a2, uint64_t a3)
{
  int v3 = *a2;
  int v4 = **a2;
  if (v4 < 0) {
    LOBYTE(v4) = 122;
  }
  if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_attribute_name[v4])
  {
    uint64_t v5 = a3;
    int v36 = (uint64_t *)(result + 96);
    int v7 = (void *)(a3 + 64);
    uint64_t v8 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
    while (1)
    {
      uint64_t v9 = 0;
      *a2 = v3 + 1;
      do
      {
        int v10 = v3[v9 + 1];
        if (v10 < 0) {
          LOBYTE(v10) = 122;
        }
        ++v9;
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_attribute_name[v10]);
      *a2 = &v3[v9];
      if (!v9) {
        break;
      }
      uint64_t aligned = (void *)boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned(v36, 0x38uLL);
      int v12 = aligned;
      aligned[4] = 0;
      *uint64_t aligned = 0;
      aligned[1] = 0;
      int64_t v13 = *a2 - v3;
      *uint64_t aligned = v3;
      aligned[2] = v13;
      uint64_t v14 = *v7;
      if (*v7)
      {
        uint64_t v14 = *(void *)(v5 + 72);
        unint64_t v15 = (void *)(v14 + 48);
      }
      else
      {
        unint64_t v15 = v7;
      }
      *unint64_t v15 = aligned;
      aligned[5] = v14;
      *(void *)(v5 + 72) = aligned;
      aligned[4] = v5;
      aligned[6] = 0;
      uint64_t v16 = *a2;
      do
      {
        int v18 = *v16++;
        unsigned __int8 v17 = v18;
        if (v18 < 0) {
          unsigned __int8 v17 = 122;
        }
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v17]);
      *a2 = v16 - 1;
      if (*(v16 - 1) != 61)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        uint64_t v33 = *a2;
        uint64_t v34 = "expected =";
LABEL_43:
        *exceptiouint64_t n = &unk_1F0A46DD0;
        exception[1] = v34;
        exception[2] = v33;
LABEL_44:
      }
      unsigned __int8 v19 = v7;
      *a2 = v16;
      char v20 = (unsigned char *)*aligned;
      long long v21 = v8;
      if (!*aligned)
      {
        char v20 = v8;
        int64_t v13 = 0;
      }
      v20[v13] = 0;
      char v22 = *a2;
      uint64_t v23 = *a2;
      do
      {
        int v25 = *v23++;
        unsigned __int8 v24 = v25;
        if (v25 < 0) {
          unsigned __int8 v24 = 122;
        }
        ++v22;
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v24]);
      *a2 = v23 - 1;
      int v26 = *(v23 - 1);
      if (v26 != 34 && v26 != 39
        || ((*a2 = v23, v26 != 39)
          ? (uint64_t result = boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pred<(char)34>,boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pure_pred<(char)34>,1024>(a2))
          : (uint64_t result = boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pred<(char)39>,boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pure_pred<(char)39>,1024>(a2)),
            uint64_t v27 = (char *)(result - v22),
            v12[1] = v23,
            void v12[3] = result - v22,
            **a2 != v26))
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        uint64_t v33 = *a2;
        uint64_t v34 = "expected ' or \"";
        goto LABEL_43;
      }
      ++*a2;
      uint64_t v28 = (void *)v12[1];
      uint64_t v8 = v21;
      if (!v28)
      {
        uint64_t v28 = v21;
        uint64_t v27 = 0;
      }
      v27[(void)v28] = 0;
      int v3 = *a2 - 1;
      int v7 = v19;
      uint64_t v5 = a3;
      do
      {
        int v30 = *++v3;
        unsigned __int8 v29 = v30;
        if (v30 < 0) {
          unsigned __int8 v29 = 122;
        }
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v29]);
      *a2 = v3;
      int v31 = *v3;
      if (v31 < 0) {
        LOBYTE(v31) = 122;
      }
      if (!boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_attribute_name[v31]) {
        return result;
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    *exceptiouint64_t n = &unk_1F0A46DD0;
    exception[1] = "expected attribute name";
    exception[2] = v3;
    goto LABEL_44;
  }
  return result;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<3072>(uint64_t a1, char **a2, void *a3)
{
  uint64_t v6 = a3 + 6;
  do
  {
    int v7 = *a2 - 1;
    do
    {
      int v9 = *++v7;
      unsigned __int8 v8 = v9;
      if (v9 < 0) {
        unsigned __int8 v8 = 122;
      }
    }
    while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v8]);
    *a2 = v7;
    for (uint64_t result = *v7;
          result != 60;
          uint64_t result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_and_append_data<3072>(a1, a3, a2))
    {
      if (!(_BYTE)result)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        long long v21 = *a2;
        char v22 = "unexpected end of data";
        goto LABEL_29;
      }
    }
    unsigned __int8 v11 = *a2;
    int v12 = (*a2)[1];
    if (v12 == 47)
    {
      *a2 = v11 + 2;
      int64_t v13 = v11 + 1;
      do
      {
        int v15 = *++v13;
        unsigned __int8 v14 = v15;
        if (v15 < 0) {
          unsigned __int8 v14 = 122;
        }
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v14]);
      *a2 = v13;
      do
      {
        int v17 = *v13++;
        unsigned __int8 v16 = v17;
        if (v17 < 0) {
          unsigned __int8 v16 = 122;
        }
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v16]);
      *a2 = v13 - 1;
      if (*(v13 - 1) != 62)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        long long v21 = *a2;
        char v22 = "expected >";
LABEL_29:
        *exceptiouint64_t n = &unk_1F0A46DD0;
        exception[1] = v22;
        exception[2] = v21;
      }
      *a2 = v13;
    }
    else
    {
      ++*a2;
      uint64_t result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<3072>(a1, a2);
      if (result)
      {
        uint64_t v18 = *v6;
        if (*v6)
        {
          uint64_t v18 = a3[7];
          unsigned __int8 v19 = (uint64_t *)(v18 + 88);
        }
        else
        {
          unsigned __int8 v19 = v6;
        }
        *unsigned __int8 v19 = result;
        *(void *)(result + 80) = v18;
        a3[7] = result;
        *(void *)(result + 32) = a3;
        *(void *)(result + 88) = 0;
      }
    }
  }
  while (v12 != 47);
  return result;
}

uint64_t boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned(uint64_t *a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t result = a1[1] + (-*((unsigned char *)a1 + 8) & 7);
  if (result + a2 > v4)
  {
    if (a2 <= 0x10000) {
      uint64_t v6 = 65558;
    }
    else {
      uint64_t v6 = a2 + 22;
    }
    int v7 = (uint64_t (*)(uint64_t))a1[8195];
    if (!v7) {
      operator new[]();
    }
    uint64_t v8 = v7(v6);
    int v9 = (uint64_t *)(v8 + (-(int)v8 & 7));
    *int v9 = *a1;
    *a1 = v8;
    a1[2] = v8 + v6;
    uint64_t result = (uint64_t)v9 + (-(v9 + 8) & 7) + 8;
  }
  a1[1] = result + a2;
  return result;
}

char *boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pred<(char)39>,boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pure_pred<(char)39>,1024>(char **a1)
{
  uint64_t v2 = *a1 - 1;
  do
  {
    int v4 = *++v2;
    unsigned __int8 v3 = v4;
    if (v4 < 0) {
      unsigned __int8 v3 = 122;
    }
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_attribute_data_1_pure[v3]);
  *a1 = v2;
  char v20 = v2;
  while (1)
  {
    int v5 = *v2;
    int v6 = (v5 & 0x80u) == 0 ? *v2 : 122;
    if (!v6 || v6 == 39) {
      break;
    }
    if (v5 != 38) {
      goto LABEL_48;
    }
    int v7 = v2[1];
    if (v7 <= 102)
    {
      if (v7 == 35)
      {
        int v9 = v2 + 2;
        if (v2[2] == 120)
        {
          unint64_t v10 = 0;
          do
          {
            unint64_t v11 = v10;
            unsigned int v12 = *++v9;
            uint64_t v13 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v12];
            unint64_t v10 = v13 + 16 * v10;
          }
          while (v13 != 255);
        }
        else
        {
          unint64_t v14 = 0;
          int v9 = v2 + 1;
          do
          {
            unint64_t v11 = v14;
            unsigned int v15 = *++v9;
            uint64_t v16 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v15];
            unint64_t v14 = v16 + 10 * v14;
          }
          while (v16 != 255);
        }
        boost::property_tree::detail::rapidxml::xml_document<char>::insert_coded_character<1024>((uint64_t *)&v20, v11);
        if (*v9 != 59)
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
          *exceptiouint64_t n = &unk_1F0A46DD0;
          exception[1] = "expected ;";
          exception[2] = v9;
        }
        uint64_t v2 = v9 + 1;
      }
      else
      {
        if (v7 != 97) {
          goto LABEL_48;
        }
        int v8 = v2[2];
        if (v8 == 112)
        {
          if (v2[3] != 111 || v2[4] != 115 || v2[5] != 59) {
            goto LABEL_48;
          }
          char *v20 = 39;
LABEL_47:
          ++v20;
          v2 += 6;
        }
        else
        {
          if (v8 != 109 || v2[3] != 112 || v2[4] != 59) {
            goto LABEL_48;
          }
          *v20++ = 38;
          v2 += 5;
        }
      }
    }
    else if (v7 == 103)
    {
      if (v2[2] != 116 || v2[3] != 59) {
        goto LABEL_48;
      }
      char *v20 = 62;
LABEL_34:
      ++v20;
      v2 += 4;
    }
    else
    {
      if (v7 == 108)
      {
        if (v2[2] != 116 || v2[3] != 59) {
          goto LABEL_48;
        }
        char *v20 = 60;
        goto LABEL_34;
      }
      if (v7 == 113 && v2[2] == 117 && v2[3] == 111 && v2[4] == 116 && v2[5] == 59)
      {
        char *v20 = 34;
        goto LABEL_47;
      }
LABEL_48:
      ++v2;
      int v17 = v20++;
      *int v17 = v5;
    }
  }
  *a1 = v2;
  return v20;
}

char *boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pred<(char)34>,boost::property_tree::detail::rapidxml::xml_document<char>::attribute_value_pure_pred<(char)34>,1024>(char **a1)
{
  uint64_t v2 = *a1 - 1;
  do
  {
    int v4 = *++v2;
    unsigned __int8 v3 = v4;
    if (v4 < 0) {
      unsigned __int8 v3 = 122;
    }
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_attribute_data_2_pure[v3]);
  *a1 = v2;
  char v20 = v2;
  while (1)
  {
    int v5 = *v2;
    int v6 = (v5 & 0x80u) == 0 ? *v2 : 122;
    if (!v6 || v6 == 34) {
      break;
    }
    if (v5 != 38) {
      goto LABEL_48;
    }
    int v7 = v2[1];
    if (v7 <= 102)
    {
      if (v7 == 35)
      {
        int v9 = v2 + 2;
        if (v2[2] == 120)
        {
          unint64_t v10 = 0;
          do
          {
            unint64_t v11 = v10;
            int v12 = *++v9;
            uint64_t v13 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v12];
            unint64_t v10 = v13 + 16 * v10;
          }
          while (v13 != 255);
        }
        else
        {
          unint64_t v14 = 0;
          int v9 = v2 + 1;
          do
          {
            unint64_t v11 = v14;
            int v15 = *++v9;
            uint64_t v16 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v15];
            unint64_t v14 = v16 + 10 * v14;
          }
          while (v16 != 255);
        }
        boost::property_tree::detail::rapidxml::xml_document<char>::insert_coded_character<1024>((uint64_t *)&v20, v11);
        if (*v9 != 59)
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
          *exceptiouint64_t n = &unk_1F0A46DD0;
          exception[1] = "expected ;";
          exception[2] = v9;
        }
        uint64_t v2 = v9 + 1;
      }
      else
      {
        if (v7 != 97) {
          goto LABEL_48;
        }
        int v8 = v2[2];
        if (v8 == 112)
        {
          if (v2[3] != 111 || v2[4] != 115 || v2[5] != 59) {
            goto LABEL_48;
          }
          char *v20 = 39;
LABEL_47:
          ++v20;
          v2 += 6;
        }
        else
        {
          if (v8 != 109 || v2[3] != 112 || v2[4] != 59) {
            goto LABEL_48;
          }
          *v20++ = 38;
          v2 += 5;
        }
      }
    }
    else if (v7 == 103)
    {
      if (v2[2] != 116 || v2[3] != 59) {
        goto LABEL_48;
      }
      char *v20 = 62;
LABEL_34:
      ++v20;
      v2 += 4;
    }
    else
    {
      if (v7 == 108)
      {
        if (v2[2] != 116 || v2[3] != 59) {
          goto LABEL_48;
        }
        char *v20 = 60;
        goto LABEL_34;
      }
      if (v7 == 113 && v2[2] == 117 && v2[3] == 111 && v2[4] == 116 && v2[5] == 59)
      {
        char *v20 = 34;
        goto LABEL_47;
      }
LABEL_48:
      ++v2;
      int v17 = v20++;
      *int v17 = v5;
    }
  }
  *a1 = v2;
  return v20;
}

uint64_t *boost::property_tree::detail::rapidxml::xml_document<char>::insert_coded_character<1024>(uint64_t *result, unint64_t a2)
{
  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (a2 >> 16)
      {
        if (a2 >> 16 > 0x10)
        {
          unsigned __int8 v3 = result;
          exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
          uint64_t v5 = *v3;
          *exceptiouint64_t n = &unk_1F0A46DD0;
          exception[1] = "invalid numeric character entity";
          exception[2] = v5;
        }
        *(unsigned char *)(*result + 3) = a2 & 0x3F | 0x80;
        *(unsigned char *)(*result + 2) = (a2 >> 6) & 0x3F | 0x80;
        *(unsigned char *)(*result + 1) = (a2 >> 12) & 0x3F | 0x80;
        LODWORD(a2) = (a2 >> 18) | 0xFFFFFFF0;
        uint64_t v2 = 4;
      }
      else
      {
        *(unsigned char *)(*result + 2) = a2 & 0x3F | 0x80;
        *(unsigned char *)(*result + 1) = (a2 >> 6) & 0x3F | 0x80;
        LODWORD(a2) = (a2 >> 12) | 0xFFFFFFE0;
        uint64_t v2 = 3;
      }
    }
    else
    {
      *(unsigned char *)(*result + 1) = a2 & 0x3F | 0x80;
      LODWORD(a2) = (a2 >> 6) | 0xFFFFFFC0;
      uint64_t v2 = 2;
    }
  }
  else
  {
    uint64_t v2 = 1;
  }
  *(unsigned char *)*uint64_t result = a2;
  *result += v2;
  return result;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_and_append_data<3072>(uint64_t a1, void *a2, char **a3)
{
  int v6 = *a3;
  int v7 = boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::text_pred,boost::property_tree::detail::rapidxml::xml_document<char>::text_pure_with_ws_pred,3072>(a3);
  if (*(v7 - 1) == 32) {
    int v8 = v7 - 1;
  }
  else {
    int v8 = v7;
  }
  uint64_t aligned = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  *(_DWORD *)(aligned + 40) = 2;
  *(void *)(aligned + 48) = 0;
  *(void *)(aligned + 64) = 0;
  *(void *)uint64_t aligned = 0;
  *(void *)(aligned + 8) = v6;
  *(void *)(aligned + ++*(_DWORD *)(result + 24) = v8 - v6;
  unint64_t v10 = a2 + 6;
  uint64_t v11 = a2[6];
  if (v11)
  {
    uint64_t v11 = a2[7];
    unint64_t v10 = (uint64_t *)(v11 + 88);
  }
  *unint64_t v10 = aligned;
  *(void *)(aligned + 80) = v11;
  a2[7] = aligned;
  *(void *)(aligned + 32) = a2;
  *(void *)(aligned + 88) = 0;
  int v12 = (unsigned char *)a2[1];
  if (!v12) {
    int v12 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
  }
  if (!*v12)
  {
    a2[1] = v6;
    a2[3] = v8 - v6;
  }
  uint64_t result = **a3;
  *int v8 = 0;
  return result;
}

char *boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::text_pred,boost::property_tree::detail::rapidxml::xml_document<char>::text_pure_with_ws_pred,3072>(char **a1)
{
  uint64_t v2 = *a1 - 1;
  do
  {
    int v4 = *++v2;
    unsigned __int8 v3 = v4;
    if (v4 < 0) {
      unsigned __int8 v3 = 122;
    }
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_text_pure_with_ws[v3]);
  *a1 = v2;
  unsigned __int8 v24 = v2;
  while (1)
  {
    int v5 = *v2;
    uint64_t v6 = (v5 & 0x80u) == 0 ? *v2 : 122;
    if (!v6 || v6 == 60) {
      break;
    }
    if (v5 != 38) {
      goto LABEL_48;
    }
    int v7 = v2[1];
    if (v7 <= 102)
    {
      if (v7 == 35)
      {
        uint64_t v11 = v2 + 2;
        if (v2[2] == 120)
        {
          unint64_t v12 = 0;
          do
          {
            unint64_t v13 = v12;
            int v14 = *++v11;
            uint64_t v15 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v14];
            unint64_t v12 = v15 + 16 * v12;
          }
          while (v15 != 255);
        }
        else
        {
          unint64_t v16 = 0;
          uint64_t v11 = v2 + 1;
          do
          {
            unint64_t v13 = v16;
            int v17 = *++v11;
            uint64_t v18 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v17];
            unint64_t v16 = v18 + 10 * v16;
          }
          while (v18 != 255);
        }
        boost::property_tree::detail::rapidxml::xml_document<char>::insert_coded_character<1024>((uint64_t *)&v24, v13);
        if (*v11 != 59)
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
          *exceptiouint64_t n = &unk_1F0A46DD0;
          exception[1] = "expected ;";
          exception[2] = v11;
        }
        uint64_t v2 = v11 + 1;
      }
      else
      {
        if (v7 != 97) {
          goto LABEL_48;
        }
        int v10 = v2[2];
        if (v10 == 112)
        {
          if (v2[3] != 111 || v2[4] != 115 || v2[5] != 59) {
            goto LABEL_48;
          }
          int v8 = v24;
          char v9 = 39;
LABEL_47:
          *int v8 = v9;
          ++v24;
          v2 += 6;
        }
        else
        {
          if (v10 != 109 || v2[3] != 112 || v2[4] != 59) {
            goto LABEL_48;
          }
          *v24++ = 38;
          v2 += 5;
        }
      }
    }
    else
    {
      if (v7 == 103)
      {
        if (v2[2] != 116 || v2[3] != 59) {
          goto LABEL_48;
        }
        *unsigned __int8 v24 = 62;
        goto LABEL_34;
      }
      if (v7 == 108)
      {
        if (v2[2] != 116 || v2[3] != 59) {
          goto LABEL_48;
        }
        *unsigned __int8 v24 = 60;
LABEL_34:
        ++v24;
        v2 += 4;
      }
      else
      {
        if (v7 == 113 && v2[2] == 117 && v2[3] == 111 && v2[4] == 116 && v2[5] == 59)
        {
          int v8 = v24;
          char v9 = 34;
          goto LABEL_47;
        }
LABEL_48:
        if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v6])
        {
          *v24++ = 32;
          do
          {
            int v20 = *++v2;
            unsigned __int8 v19 = v20;
            if (v20 < 0) {
              unsigned __int8 v19 = 122;
            }
          }
          while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v19]);
        }
        else
        {
          ++v2;
          long long v21 = v24++;
          char *v21 = v5;
        }
      }
    }
  }
  *a1 = v2;
  return v24;
}

void boost::property_tree::detail::rapidxml::parse_error::~parse_error(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t boost::property_tree::detail::rapidxml::parse_error::what(boost::property_tree::detail::rapidxml::parse_error *this)
{
  return *((void *)this + 1);
}

void *boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<0>(uint64_t a1, char **a2)
{
  uint64_t v2 = *a2;
  int v3 = **a2;
  if (v3 != 33)
  {
    if (v3 == 63)
    {
      *a2 = v2 + 1;
      if ((v2[1] | 0x20) != 0x78
        || (v2[2] | 0x20) != 0x6D
        || (v2[3] | 0x20) != 0x6C)
      {
        goto LABEL_22;
      }
      int v4 = v2[4];
      if (v4 < 0) {
        LOBYTE(v4) = 122;
      }
      if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v4])
      {
        *a2 = v2 + 5;
      }
      else
      {
LABEL_22:
      }
      return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_xml_declaration<3072>(a1, a2);
    }
    else
    {
      return boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<0>(a1, a2);
    }
  }
  int v6 = v2[1];
  if (v6 != 91)
  {
    if (v6 != 68)
    {
      if (v6 == 45 && v2[2] == 45)
      {
        *a2 = v2 + 3;
        return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_comment<3072>(a1, a2);
      }
      goto LABEL_46;
    }
    if (v2[2] == 79 && v2[3] == 67 && v2[4] == 84 && v2[5] == 89 && v2[6] == 80 && v2[7] == 69)
    {
      int v7 = v2[8];
      if (v7 < 0) {
        LOBYTE(v7) = 122;
      }
      if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7])
      {
        *a2 = v2 + 9;
        return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_doctype<3072>(a1, a2);
      }
    }
LABEL_46:
    int v8 = v2 + 1;
    while (1)
    {
      *a2 = v8;
      int v10 = *v8++;
      int v9 = v10;
      if (v10 == 62) {
        break;
      }
      if (!v9)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        unint64_t v13 = *a2;
        *exceptiouint64_t n = &unk_1F0A46DD0;
        exception[1] = "unexpected end of data";
        exception[2] = v13;
      }
    }
    *a2 = v8;
    return 0;
  }
  if (v2[2] != 67 || v2[3] != 68 || v2[4] != 65 || v2[5] != 84 || v2[6] != 65 || v2[7] != 91) {
    goto LABEL_46;
  }
  *a2 = v2 + 8;
  return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_cdata<3072>(a1, a2);
}

void *boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<0>(uint64_t a1, char **a2)
{
  uint64_t aligned = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  int v5 = (void *)aligned;
  uint64_t v6 = 0;
  *(void *)(aligned + 32) = 0;
  *(void *)uint64_t aligned = 0;
  *(void *)(aligned + 8) = 0;
  *(_DWORD *)(aligned + 40) = 1;
  *(void *)(aligned + 48) = 0;
  *(void *)(aligned + 64) = 0;
  int v7 = *a2;
  do
  {
    int v8 = v7[v6];
    if (v8 < 0) {
      LOBYTE(v8) = 122;
    }
    ++v6;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v8]);
  *a2 = &v7[v6 - 1];
  uint64_t v9 = v6 - 1;
  if (!v9)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    unsigned __int8 v19 = *a2;
    int v20 = "expected element name";
    goto LABEL_21;
  }
  *(void *)uint64_t aligned = v7;
  *(void *)(aligned + 16) = v9;
  uint64_t v10 = (uint64_t)(*a2 - 1);
  do
  {
    int v12 = *(char *)++v10;
    unsigned __int8 v11 = v12;
    if (v12 < 0) {
      unsigned __int8 v11 = 122;
    }
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v11]);
  *a2 = (char *)v10;
  boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_attributes<3072>((char *)a1, a2, aligned);
  unint64_t v13 = *a2;
  int v14 = **a2;
  if (v14 != 47)
  {
    if (v14 == 62)
    {
      *a2 = v13 + 1;
      boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<0>(a1, a2, v5);
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  *a2 = v13 + 1;
  if (v13[1] != 62)
  {
LABEL_20:
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    unsigned __int8 v19 = *a2;
    int v20 = "expected >";
LABEL_21:
    *exceptiouint64_t n = &unk_1F0A46DD0;
    exception[1] = v20;
    exception[2] = v19;
  }
  *a2 = v13 + 2;
LABEL_15:
  uint64_t v15 = (unsigned char *)*v5;
  if (*v5)
  {
    uint64_t v16 = v5[2];
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
  }
  v15[v16] = 0;
  return v5;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<0>(uint64_t a1, char **a2, void *a3)
{
  uint64_t v6 = a3 + 6;
  do
  {
    int v7 = *a2;
    for (uint64_t result = **a2;
          result != 60;
          uint64_t result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_and_append_data<0>(a1, a3, a2, v7))
    {
      if (!(_BYTE)result)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        unsigned __int8 v19 = *a2;
        int v20 = "unexpected end of data";
        goto LABEL_25;
      }
    }
    uint64_t v9 = *a2;
    int v10 = (*a2)[1];
    if (v10 == 47)
    {
      *a2 = v9 + 2;
      unsigned __int8 v11 = v9 + 1;
      do
      {
        int v13 = *++v11;
        unsigned __int8 v12 = v13;
        if (v13 < 0) {
          unsigned __int8 v12 = 122;
        }
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v12]);
      *a2 = v11;
      do
      {
        int v15 = *v11++;
        unsigned __int8 v14 = v15;
        if (v15 < 0) {
          unsigned __int8 v14 = 122;
        }
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v14]);
      *a2 = v11 - 1;
      if (*(v11 - 1) != 62)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        unsigned __int8 v19 = *a2;
        int v20 = "expected >";
LABEL_25:
        *exceptiouint64_t n = &unk_1F0A46DD0;
        exception[1] = v20;
        exception[2] = v19;
      }
      *a2 = v11;
    }
    else
    {
      ++*a2;
      uint64_t result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<0>(a1, a2);
      if (result)
      {
        uint64_t v16 = *v6;
        if (*v6)
        {
          uint64_t v16 = a3[7];
          int v17 = (uint64_t *)(v16 + 88);
        }
        else
        {
          int v17 = v6;
        }
        *int v17 = result;
        *(void *)(result + 80) = v16;
        a3[7] = result;
        *(void *)(result + 32) = a3;
        *(void *)(result + 88) = 0;
      }
    }
  }
  while (v10 != 47);
  return result;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_and_append_data<0>(uint64_t a1, void *a2, char **a3, char *a4)
{
  *a3 = a4;
  int v8 = boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::text_pred,boost::property_tree::detail::rapidxml::xml_document<char>::text_pure_no_ws_pred,0>(a3);
  uint64_t aligned = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  *(_DWORD *)(aligned + 40) = 2;
  *(void *)(aligned + 48) = 0;
  *(void *)(aligned + 64) = 0;
  *(void *)uint64_t aligned = 0;
  *(void *)(aligned + 8) = a4;
  *(void *)(aligned + ++*(_DWORD *)(result + 24) = v8 - a4;
  int v10 = a2 + 6;
  uint64_t v11 = a2[6];
  if (v11)
  {
    uint64_t v11 = a2[7];
    int v10 = (uint64_t *)(v11 + 88);
  }
  *int v10 = aligned;
  *(void *)(aligned + 80) = v11;
  a2[7] = aligned;
  *(void *)(aligned + 32) = a2;
  *(void *)(aligned + 88) = 0;
  unsigned __int8 v12 = (unsigned char *)a2[1];
  if (!v12) {
    unsigned __int8 v12 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
  }
  if (!*v12)
  {
    a2[1] = a4;
    a2[3] = v8 - a4;
  }
  uint64_t result = **a3;
  *int v8 = 0;
  return result;
}

char *boost::property_tree::detail::rapidxml::xml_document<char>::skip_and_expand_character_refs<boost::property_tree::detail::rapidxml::xml_document<char>::text_pred,boost::property_tree::detail::rapidxml::xml_document<char>::text_pure_no_ws_pred,0>(char **a1)
{
  uint64_t v2 = *a1 - 1;
  do
  {
    int v4 = *++v2;
    unsigned __int8 v3 = v4;
    if (v4 < 0) {
      unsigned __int8 v3 = 122;
    }
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_text_pure_no_ws[v3]);
  *a1 = v2;
  int v20 = v2;
  while (1)
  {
    int v5 = *v2;
    int v6 = (v5 & 0x80u) == 0 ? *v2 : 122;
    if (!v6 || v6 == 60) {
      break;
    }
    if (v5 != 38) {
      goto LABEL_48;
    }
    int v7 = v2[1];
    if (v7 <= 102)
    {
      if (v7 == 35)
      {
        uint64_t v9 = v2 + 2;
        if (v2[2] == 120)
        {
          unint64_t v10 = 0;
          do
          {
            unint64_t v11 = v10;
            int v12 = *++v9;
            uint64_t v13 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v12];
            unint64_t v10 = v13 + 16 * v10;
          }
          while (v13 != 255);
        }
        else
        {
          unint64_t v14 = 0;
          uint64_t v9 = v2 + 1;
          do
          {
            unint64_t v11 = v14;
            int v15 = *++v9;
            uint64_t v16 = boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_digits[v15];
            unint64_t v14 = v16 + 10 * v14;
          }
          while (v16 != 255);
        }
        boost::property_tree::detail::rapidxml::xml_document<char>::insert_coded_character<1024>((uint64_t *)&v20, v11);
        if (*v9 != 59)
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
          *exceptiouint64_t n = &unk_1F0A46DD0;
          exception[1] = "expected ;";
          exception[2] = v9;
        }
        uint64_t v2 = v9 + 1;
      }
      else
      {
        if (v7 != 97) {
          goto LABEL_48;
        }
        int v8 = v2[2];
        if (v8 == 112)
        {
          if (v2[3] != 111 || v2[4] != 115 || v2[5] != 59) {
            goto LABEL_48;
          }
          char *v20 = 39;
LABEL_47:
          ++v20;
          v2 += 6;
        }
        else
        {
          if (v8 != 109 || v2[3] != 112 || v2[4] != 59) {
            goto LABEL_48;
          }
          *v20++ = 38;
          v2 += 5;
        }
      }
    }
    else if (v7 == 103)
    {
      if (v2[2] != 116 || v2[3] != 59) {
        goto LABEL_48;
      }
      char *v20 = 62;
LABEL_34:
      ++v20;
      v2 += 4;
    }
    else
    {
      if (v7 == 108)
      {
        if (v2[2] != 116 || v2[3] != 59) {
          goto LABEL_48;
        }
        char *v20 = 60;
        goto LABEL_34;
      }
      if (v7 == 113 && v2[2] == 117 && v2[3] == 111 && v2[4] == 116 && v2[5] == 59)
      {
        char *v20 = 34;
        goto LABEL_47;
      }
LABEL_48:
      ++v2;
      int v17 = v20++;
      *int v17 = v5;
    }
  }
  *a1 = v2;
  return v20;
}

void *boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<3136>(uint64_t a1, char **a2)
{
  uint64_t v2 = *a2;
  int v3 = **a2;
  if (v3 != 33)
  {
    if (v3 == 63)
    {
      *a2 = v2 + 1;
      if ((v2[1] | 0x20) != 0x78
        || (v2[2] | 0x20) != 0x6D
        || (v2[3] | 0x20) != 0x6C)
      {
        goto LABEL_22;
      }
      int v4 = v2[4];
      if (v4 < 0) {
        LOBYTE(v4) = 122;
      }
      if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v4])
      {
        *a2 = v2 + 5;
      }
      else
      {
LABEL_22:
      }
      return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_xml_declaration<3072>(a1, a2);
    }
    else
    {
      return boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<3136>(a1, a2);
    }
  }
  int v6 = v2[1];
  if (v6 != 91)
  {
    if (v6 != 68)
    {
      if (v6 == 45 && v2[2] == 45)
      {
        *a2 = v2 + 3;
        return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_comment<3136>(a1, a2);
      }
      goto LABEL_46;
    }
    if (v2[2] == 79 && v2[3] == 67 && v2[4] == 84 && v2[5] == 89 && v2[6] == 80 && v2[7] == 69)
    {
      int v7 = v2[8];
      if (v7 < 0) {
        LOBYTE(v7) = 122;
      }
      if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7])
      {
        *a2 = v2 + 9;
        return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_doctype<3072>(a1, a2);
      }
    }
LABEL_46:
    int v8 = v2 + 1;
    while (1)
    {
      *a2 = v8;
      int v10 = *v8++;
      int v9 = v10;
      if (v10 == 62) {
        break;
      }
      if (!v9)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        uint64_t v13 = *a2;
        *exceptiouint64_t n = &unk_1F0A46DD0;
        exception[1] = "unexpected end of data";
        exception[2] = v13;
      }
    }
    *a2 = v8;
    return 0;
  }
  if (v2[2] != 67 || v2[3] != 68 || v2[4] != 65 || v2[5] != 84 || v2[6] != 65 || v2[7] != 91) {
    goto LABEL_46;
  }
  *a2 = v2 + 8;
  return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_cdata<3072>(a1, a2);
}

void *boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<3136>(uint64_t a1, char **a2)
{
  uint64_t aligned = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  int v5 = (void *)aligned;
  uint64_t v6 = 0;
  *(void *)(aligned + 32) = 0;
  *(void *)uint64_t aligned = 0;
  *(void *)(aligned + 8) = 0;
  *(_DWORD *)(aligned + 40) = 1;
  *(void *)(aligned + 48) = 0;
  *(void *)(aligned + 64) = 0;
  int v7 = *a2;
  do
  {
    int v8 = v7[v6];
    if (v8 < 0) {
      LOBYTE(v8) = 122;
    }
    ++v6;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v8]);
  *a2 = &v7[v6 - 1];
  uint64_t v9 = v6 - 1;
  if (!v9)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    unsigned __int8 v19 = *a2;
    int v20 = "expected element name";
    goto LABEL_21;
  }
  *(void *)uint64_t aligned = v7;
  *(void *)(aligned + 16) = v9;
  uint64_t v10 = (uint64_t)(*a2 - 1);
  do
  {
    int v12 = *(char *)++v10;
    unsigned __int8 v11 = v12;
    if (v12 < 0) {
      unsigned __int8 v11 = 122;
    }
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v11]);
  *a2 = (char *)v10;
  boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_attributes<3072>((char *)a1, a2, aligned);
  uint64_t v13 = *a2;
  int v14 = **a2;
  if (v14 != 47)
  {
    if (v14 == 62)
    {
      *a2 = v13 + 1;
      boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<3136>(a1, a2, v5);
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  *a2 = v13 + 1;
  if (v13[1] != 62)
  {
LABEL_20:
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    unsigned __int8 v19 = *a2;
    int v20 = "expected >";
LABEL_21:
    *exceptiouint64_t n = &unk_1F0A46DD0;
    exception[1] = v20;
    exception[2] = v19;
  }
  *a2 = v13 + 2;
LABEL_15:
  int v15 = (unsigned char *)*v5;
  if (*v5)
  {
    uint64_t v16 = v5[2];
  }
  else
  {
    uint64_t v16 = 0;
    int v15 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
  }
  v15[v16] = 0;
  return v5;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_comment<3136>(uint64_t a1, void *a2)
{
  int v3 = (unsigned char *)*a2;
  for (uint64_t i = (unsigned char *)(*a2 + 1); ; ++i)
  {
    if (*(i - 1) != 45)
    {
      if (!*(i - 1))
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        uint64_t v8 = *a2;
        *exceptiouint64_t n = &unk_1F0A46DD0;
        exception[1] = "unexpected end of data";
        exception[2] = v8;
      }
      goto LABEL_7;
    }
    if (*i == 45 && i[1] == 62) {
      break;
    }
LABEL_7:
    *a2 = i;
  }
  uint64_t result = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  *(void *)(result + 32) = 0;
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 40) = 4;
  *(void *)(result + 48) = 0;
  *(void *)(result + 64) = 0;
  uint64_t v6 = *a2 - (void)v3;
  *(void *)(result + 8) = v3;
  *(void *)(result + ++*(_DWORD *)(result + 24) = v6;
  *(unsigned char *)*a2 = 0;
  *a2 += 3;
  return result;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<3136>(uint64_t a1, char **a2, void *a3)
{
  uint64_t v6 = a3 + 6;
  do
  {
    int v7 = *a2 - 1;
    do
    {
      int v9 = *++v7;
      unsigned __int8 v8 = v9;
      if (v9 < 0) {
        unsigned __int8 v8 = 122;
      }
    }
    while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v8]);
    *a2 = v7;
    for (uint64_t result = *v7;
          result != 60;
          uint64_t result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_and_append_data<3072>(a1, a3, a2))
    {
      if (!(_BYTE)result)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        long long v21 = *a2;
        char v22 = "unexpected end of data";
        goto LABEL_29;
      }
    }
    unsigned __int8 v11 = *a2;
    int v12 = (*a2)[1];
    if (v12 == 47)
    {
      *a2 = v11 + 2;
      uint64_t v13 = v11 + 1;
      do
      {
        int v15 = *++v13;
        unsigned __int8 v14 = v15;
        if (v15 < 0) {
          unsigned __int8 v14 = 122;
        }
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v14]);
      *a2 = v13;
      do
      {
        int v17 = *v13++;
        unsigned __int8 v16 = v17;
        if (v17 < 0) {
          unsigned __int8 v16 = 122;
        }
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v16]);
      *a2 = v13 - 1;
      if (*(v13 - 1) != 62)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        long long v21 = *a2;
        char v22 = "expected >";
LABEL_29:
        *exceptiouint64_t n = &unk_1F0A46DD0;
        exception[1] = v22;
        exception[2] = v21;
      }
      *a2 = v13;
    }
    else
    {
      ++*a2;
      uint64_t result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<3136>(a1, a2);
      if (result)
      {
        uint64_t v18 = *v6;
        if (*v6)
        {
          uint64_t v18 = a3[7];
          unsigned __int8 v19 = (uint64_t *)(v18 + 88);
        }
        else
        {
          unsigned __int8 v19 = v6;
        }
        *unsigned __int8 v19 = result;
        *(void *)(result + 80) = v18;
        a3[7] = result;
        *(void *)(result + 32) = a3;
        *(void *)(result + 88) = 0;
      }
    }
  }
  while (v12 != 47);
  return result;
}

void *boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<64>(uint64_t a1, char **a2)
{
  uint64_t v2 = *a2;
  int v3 = **a2;
  if (v3 != 33)
  {
    if (v3 == 63)
    {
      *a2 = v2 + 1;
      if ((v2[1] | 0x20) != 0x78
        || (v2[2] | 0x20) != 0x6D
        || (v2[3] | 0x20) != 0x6C)
      {
        goto LABEL_22;
      }
      int v4 = v2[4];
      if (v4 < 0) {
        LOBYTE(v4) = 122;
      }
      if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v4])
      {
        *a2 = v2 + 5;
      }
      else
      {
LABEL_22:
      }
      return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_xml_declaration<3072>(a1, a2);
    }
    else
    {
      return boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<64>(a1, a2);
    }
  }
  int v6 = v2[1];
  if (v6 != 91)
  {
    if (v6 != 68)
    {
      if (v6 == 45 && v2[2] == 45)
      {
        *a2 = v2 + 3;
        return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_comment<3136>(a1, a2);
      }
      goto LABEL_46;
    }
    if (v2[2] == 79 && v2[3] == 67 && v2[4] == 84 && v2[5] == 89 && v2[6] == 80 && v2[7] == 69)
    {
      int v7 = v2[8];
      if (v7 < 0) {
        LOBYTE(v7) = 122;
      }
      if (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v7])
      {
        *a2 = v2 + 9;
        return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_doctype<3072>(a1, a2);
      }
    }
LABEL_46:
    unsigned __int8 v8 = v2 + 1;
    while (1)
    {
      *a2 = v8;
      int v10 = *v8++;
      int v9 = v10;
      if (v10 == 62) {
        break;
      }
      if (!v9)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        uint64_t v13 = *a2;
        *exceptiouint64_t n = &unk_1F0A46DD0;
        exception[1] = "unexpected end of data";
        exception[2] = v13;
      }
    }
    *a2 = v8;
    return 0;
  }
  if (v2[2] != 67 || v2[3] != 68 || v2[4] != 65 || v2[5] != 84 || v2[6] != 65 || v2[7] != 91) {
    goto LABEL_46;
  }
  *a2 = v2 + 8;
  return (void *)boost::property_tree::detail::rapidxml::xml_document<char>::parse_cdata<3072>(a1, a2);
}

void *boost::property_tree::detail::rapidxml::xml_document<char>::parse_element<64>(uint64_t a1, char **a2)
{
  uint64_t aligned = boost::property_tree::detail::rapidxml::memory_pool<char>::allocate_aligned((uint64_t *)(a1 + 96), 0x60uLL);
  int v5 = (void *)aligned;
  uint64_t v6 = 0;
  *(void *)(aligned + 32) = 0;
  *(void *)uint64_t aligned = 0;
  *(void *)(aligned + 8) = 0;
  *(_DWORD *)(aligned + 40) = 1;
  *(void *)(aligned + 48) = 0;
  *(void *)(aligned + 64) = 0;
  int v7 = *a2;
  do
  {
    int v8 = v7[v6];
    if (v8 < 0) {
      LOBYTE(v8) = 122;
    }
    ++v6;
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v8]);
  *a2 = &v7[v6 - 1];
  uint64_t v9 = v6 - 1;
  if (!v9)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    unsigned __int8 v19 = *a2;
    int v20 = "expected element name";
    goto LABEL_21;
  }
  *(void *)uint64_t aligned = v7;
  *(void *)(aligned + 16) = v9;
  uint64_t v10 = (uint64_t)(*a2 - 1);
  do
  {
    int v12 = *(char *)++v10;
    unsigned __int8 v11 = v12;
    if (v12 < 0) {
      unsigned __int8 v11 = 122;
    }
  }
  while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v11]);
  *a2 = (char *)v10;
  boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_attributes<3072>((char *)a1, a2, aligned);
  uint64_t v13 = *a2;
  int v14 = **a2;
  if (v14 != 47)
  {
    if (v14 == 62)
    {
      *a2 = v13 + 1;
      boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<64>(a1, a2, v5);
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  *a2 = v13 + 1;
  if (v13[1] != 62)
  {
LABEL_20:
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    unsigned __int8 v19 = *a2;
    int v20 = "expected >";
LABEL_21:
    *exceptiouint64_t n = &unk_1F0A46DD0;
    exception[1] = v20;
    exception[2] = v19;
  }
  *a2 = v13 + 2;
LABEL_15:
  int v15 = (unsigned char *)*v5;
  if (*v5)
  {
    uint64_t v16 = v5[2];
  }
  else
  {
    uint64_t v16 = 0;
    int v15 = &boost::property_tree::detail::rapidxml::xml_base<char>::nullstr(void)::zero;
  }
  v15[v16] = 0;
  return v5;
}

uint64_t boost::property_tree::detail::rapidxml::xml_document<char>::parse_node_contents<64>(uint64_t a1, char **a2, void *a3)
{
  uint64_t v6 = a3 + 6;
  do
  {
    int v7 = *a2;
    for (uint64_t result = **a2;
          result != 60;
          uint64_t result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_and_append_data<0>(a1, a3, a2, v7))
    {
      if (!(_BYTE)result)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        unsigned __int8 v19 = *a2;
        int v20 = "unexpected end of data";
        goto LABEL_25;
      }
    }
    uint64_t v9 = *a2;
    int v10 = (*a2)[1];
    if (v10 == 47)
    {
      *a2 = v9 + 2;
      unsigned __int8 v11 = v9 + 1;
      do
      {
        int v13 = *++v11;
        unsigned __int8 v12 = v13;
        if (v13 < 0) {
          unsigned __int8 v12 = 122;
        }
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_node_name[v12]);
      *a2 = v11;
      do
      {
        int v15 = *v11++;
        unsigned __int8 v14 = v15;
        if (v15 < 0) {
          unsigned __int8 v14 = 122;
        }
      }
      while (boost::property_tree::detail::rapidxml::internal::lookup_tables<0>::lookup_whitespace[v14]);
      *a2 = v11 - 1;
      if (*(v11 - 1) != 62)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        unsigned __int8 v19 = *a2;
        int v20 = "expected >";
LABEL_25:
        *exceptiouint64_t n = &unk_1F0A46DD0;
        exception[1] = v20;
        exception[2] = v19;
      }
      *a2 = v11;
    }
    else
    {
      ++*a2;
      uint64_t result = boost::property_tree::detail::rapidxml::xml_document<char>::parse_node<64>(a1, a2);
      if (result)
      {
        uint64_t v16 = *v6;
        if (*v6)
        {
          uint64_t v16 = a3[7];
          int v17 = (uint64_t *)(v16 + 88);
        }
        else
        {
          int v17 = v6;
        }
        *int v17 = result;
        *(void *)(result + 80) = v16;
        a3[7] = result;
        *(void *)(result + 32) = a3;
        *(void *)(result + 88) = 0;
      }
    }
  }
  while (v10 != 47);
  return result;
}

std::string *boost::property_tree::xml_parser::xmlattr<std::string>()
{
  {
    boost::property_tree::detail::widen<std::string>("<xmlattr>", &boost::property_tree::xml_parser::xmlattr<std::string>(void)::s);
    __cxa_atexit(MEMORY[0x1E4FBA210], &boost::property_tree::xml_parser::xmlattr<std::string>(void)::s, &dword_1B1A86000);
  }
  return &boost::property_tree::xml_parser::xmlattr<std::string>(void)::s;
}

void sub_1B1FF30B4(_Unwind_Exception *a1)
{
}

std::string *boost::property_tree::xml_parser::xmltext<std::string>()
{
  {
    boost::property_tree::detail::widen<std::string>("<xmltext>", &boost::property_tree::xml_parser::xmltext<std::string>(void)::s);
    __cxa_atexit(MEMORY[0x1E4FBA210], &boost::property_tree::xml_parser::xmltext<std::string>(void)::s, &dword_1B1A86000);
  }
  return &boost::property_tree::xml_parser::xmltext<std::string>(void)::s;
}

void sub_1B1FF3158(_Unwind_Exception *a1)
{
}

std::string *boost::property_tree::xml_parser::xmlcomment<std::string>()
{
  {
    boost::property_tree::detail::widen<std::string>("<xmlcomment>", &boost::property_tree::xml_parser::xmlcomment<std::string>(void)::s);
    __cxa_atexit(MEMORY[0x1E4FBA210], &boost::property_tree::xml_parser::xmlcomment<std::string>(void)::s, &dword_1B1A86000);
  }
  return &boost::property_tree::xml_parser::xmlcomment<std::string>(void)::s;
}

void sub_1B1FF31FC(_Unwind_Exception *a1)
{
}

void std::pair<char *,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char *,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(uint64_t a1, void *a2, long long *a3)
{
  *(void *)a1 = *a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  operator new();
}

void sub_1B1FF32A0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x1020C402FC1992ELL);
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char *,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::string *)std::string::basic_string[abi:ne180100]<0>(a1, *(char **)a2);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3 + 1, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    v3[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v3[1].__r_.__value_.__l.__data_ = v4;
  }
  operator new();
}

void sub_1B1FF336C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void boost::property_tree::detail::widen<std::string>(std::string::value_type *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::value_type v3 = *a1;
  if (*a1)
  {
    long long v4 = (unsigned __int8 *)(a1 + 1);
    do
    {
      std::string::push_back(a2, v3);
      int v5 = *v4++;
      std::string::value_type v3 = v5;
    }
    while (v5);
  }
}

void sub_1B1FF3408(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *boost::property_tree::detail::rapidxml::memory_pool<char>::clear(void *a1)
{
  std::string::value_type v3 = a1 + 3;
  uint64_t result = (void *)*a1;
  if (result != v3)
  {
    long long v4 = (void (**)(void))(a1 + 8196);
    do
    {
      int v5 = *(void **)((char *)result + (-(int)result & 7));
      if (*v4) {
        (*v4)();
      }
      else {
        MEMORY[0x1B3EA8630]();
      }
      *a1 = v5;
      uint64_t result = v5;
    }
    while (v5 != v3);
  }
  *a1 = v3;
  a1[1] = (char *)v3 + (-(int)v3 & 7);
  a1[2] = a1 + 8195;
  return result;
}

uint64_t std::vector<quasar::AppLmData::Oov>::__push_back_slow_path<quasar::AppLmData::Oov>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  v19[4] = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  unsigned __int8 v11 = &v10[56 * v4];
  v19[0] = v10;
  v19[1] = v11;
  void v19[3] = &v10[56 * v9];
  long long v12 = *a2;
  *((void *)v11 + 2) = *((void *)a2 + 2);
  *(_OWORD *)unsigned __int8 v11 = v12;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *((void *)v11 + 3) = *((void *)a2 + 3);
  int v13 = a2 + 2;
  uint64_t v14 = *((void *)a2 + 4);
  *((void *)v11 + 4) = v14;
  int v15 = v11 + 32;
  uint64_t v16 = *((void *)a2 + 5);
  *((void *)v11 + 5) = v16;
  if (v16)
  {
    *(void *)(v14 + 16) = v15;
    *((void *)a2 + 3) = v13;
    void *v13 = 0;
    *((void *)a2 + 5) = 0;
  }
  else
  {
    *((void *)v11 + 3) = v15;
  }
  *(_DWORD *)&v10[56 * v4 + 48] = *((_DWORD *)a2 + 12);
  _OWORD v19[2] = v11 + 56;
  std::vector<quasar::AppLmData::Oov>::__swap_out_circular_buffer(a1, v19);
  uint64_t v17 = a1[1];
  std::__split_buffer<quasar::AppLmData::Oov>::~__split_buffer(v19);
  return v17;
}

void sub_1B1FF3620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::AppLmData::Oov>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLASBeamSearchDecoder::OnlineLASBeamSearchDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A57478;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(void *)(v3 + 512) = 0;
  *(_WORD *)(v3 + 520) = 257;
  *(void *)(v3 + 5++*(_DWORD *)(result + 24) = 0x8000001F4;
  *(void *)(v3 + 532) = 0;
  *(_DWORD *)(v3 + 540) = 32;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 544), "");
  *(unsigned char *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 5--*(_DWORD *)(a9 + 84) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 6++*(_DWORD *)(result + 24) = 0u;
  uint64_t v4 = (char *)operator new(0xA8uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1F0A60678;
  *((void *)v4 + 19) = 0;
  *((void *)v4 + 20) = 0;
  *((void *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(_OWORD *)(v4 + ++*(_DWORD *)(result + 24) = 0u;
  *(void *)(a1 + 640) = v4 + 24;
  *(void *)(a1 + 648) = v4;
  *(unsigned char *)(a1 + 57) = 0;
  return a1;
}

void sub_1B1FF3758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)(v2 + 632), 0);
  uint64_t v6 = *(void *)(v2 + 624);
  *(void *)(v2 + 6++*(_DWORD *)(result + 24) = 0;
  if (v6) {
    quasar::OnlineLASLmRescoringBeamSearchDecoder::OnlineLASLmRescoringBeamSearchDecoder(v6);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 591) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 567) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 519) < 0) {
    operator delete(*(void **)(v2 + 496));
  }
  if (*(char *)(v2 + 495) < 0) {
    operator delete(*(void **)(v2 + 472));
  }
  if (*(char *)(v2 + 471) < 0) {
    operator delete(*(void **)(v2 + 448));
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v2);
  _Unwind_Resume(a1);
}

void quasar::OnlineLASBeamSearchDecoder::~OnlineLASBeamSearchDecoder(quasar::OnlineLASBeamSearchDecoder *this)
{
  *(void *)this = &unk_1F0A57478;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)this + 79, 0);
  uint64_t v3 = *((void *)this + 78);
  *((void *)this + 78) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void **)((char *)this + 592);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 591) < 0) {
    operator delete(*((void **)this + 71));
  }
  if (*((char *)this + 567) < 0) {
    operator delete(*((void **)this + 68));
  }
  if (*((char *)this + 519) < 0) {
    operator delete(*((void **)this + 62));
  }
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  quasar::Decoder::~Decoder(this);
}

{
  uint64_t vars8;

  quasar::OnlineLASBeamSearchDecoder::~OnlineLASBeamSearchDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineLASBeamSearchDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "online-las-beam-search");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 159, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  kaldi::BeamSearchDecoderOptions::Register((uint64_t)(this + 65), (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[80], a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 56), (uint64_t)v4, 0, 159, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS encoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 59), (uint64_t)v4, 0, 200, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS decoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 62), (uint64_t)v4, 0, 200, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "batch size");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 540, (uint64_t)v4, 0, 159, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "substring-delimiter");
  std::string::basic_string[abi:ne180100]<0>(v4, "Substring delimiter");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 68), (uint64_t)v4, 0, 239, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "token-delimiter");
  std::string::basic_string[abi:ne180100]<0>(v4, "Token delimiter");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 71), (uint64_t)v4, 0, 159, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "token-delimiters");
  std::string::basic_string[abi:ne180100]<0>(v4, "List of token delimiters");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 74), (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "split-tokens-by-character");
  std::string::basic_string[abi:ne180100]<0>(v4, "split tokens by character");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 77), (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1FF3D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLASBeamSearchDecoder::finishInit(quasar::OnlineLASBeamSearchDecoder *this)
{
  if (*((char *)this + 471) < 0)
  {
    if (*((void *)this + 57)) {
LABEL_3:
    }
      operator new();
  }
  else if (*((unsigned char *)this + 471))
  {
    goto LABEL_3;
  }
  if (*((char *)this + 495) < 0)
  {
    if (!*((void *)this + 60)) {
      goto LABEL_13;
    }
  }
  else if (!*((unsigned char *)this + 495))
  {
LABEL_13:
    memset(v1, 0, sizeof(v1));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v1);
  }
  if (*((char *)this + 519) < 0)
  {
    if (!*((void *)this + 63)) {
      goto LABEL_13;
    }
  }
  else if (!*((unsigned char *)this + 519))
  {
    goto LABEL_13;
  }
  operator new();
}

void sub_1B1FF41B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::OnlineLASBeamSearchDecoder::runImpl(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  quasar::SymbolTableList::clear(*(quasar::SymbolTableList **)(*a3 + 472));
  uint64_t v6 = *(uint64_t **)(*a3 + 472);
  char v7 = *(std::__shared_weak_count **)(a1 + 648);
  uint64_t v33 = *(void *)(a1 + 640);
  uint64_t v34 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SymbolTableList::addSymbolTable(v6, &v33, 0, -1);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  kaldi::quasar::OnlineLASDecodable::OnlineLASDecodable((uint64_t)v32, *(void *)(a1 + 624), *a2, *(_DWORD *)(a1 + 540));
  kaldi::BeamSearchDecoder::InitDecoding(*(kaldi::BeamSearchDecoder **)(a1 + 632));
  while (1)
  {
    BOOL v8 = kaldi::BeamSearchDecoder::Finished(*(kaldi::BeamSearchDecoder **)(a1 + 632));
    unint64_t v9 = *(kaldi::BeamSearchDecoder **)(a1 + 632);
    if (v8) {
      break;
    }
    if ((int)kaldi::BeamSearchDecoder::AdvanceDecoding(v9, (uint64_t)v32, 1u) >= 1) {
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst();
    }
  }
  kaldi::BeamSearchDecoder::FinalizeDecoding(v9);
  (*(void (**)(void))(**(void **)(a1 + 624) + 72))(*(void *)(a1 + 624));
  signed int v10 = kaldi::quasar::OnlineLASDecodable::FrameOffset((kaldi::quasar::OnlineLASDecodable *)v32);
  for (i = *a3; ; signed int v10 = *(_DWORD *)(i + 576) + 1)
  {
    *(_DWORD *)(i + 576) = v10;
    BOOL IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame((int32x2_t *)*a2, v10, 1);
    uint64_t i = *a3;
    if (!IsValidFrame) {
      break;
    }
  }
  *(_WORD *)(i + 580) = 257;
  BOOL v13 = kaldi::BeamSearchDecoder::ReachedFinal(*(kaldi::BeamSearchDecoder **)(a1 + 632), -1);
  char v14 = quasar::gLogLevel < 4 || v13;
  if ((v14 & 1) == 0)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Decoder did not reach end-state, outputting partial traceback.", 62);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
}

void sub_1B1FF4A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a19);
  if (v62) {
    operator delete(v62);
  }
  kaldi::quasar::OnlineLASDecodable::~OnlineLASDecodable((kaldi::quasar::OnlineLASDecodable *)(v63 - 176));
  _Unwind_Resume(a1);
}

uint64_t quasar::formatResults@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v30);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (a4)
  {
    if (*a1 != v11)
    {
      do
      {
        uint64_t v12 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*a2, a2[1], (unsigned __int8 **)v10);
        uint64_t v13 = a2[1];
        if (quasar::isAscii((uint64_t *)v10) && v12 == v13)
        {
          int v14 = *(char *)(v10 + 23);
          if (v14 >= 0) {
            int v15 = (unsigned __int8 *)v10;
          }
          else {
            int v15 = *(unsigned __int8 **)v10;
          }
          if (v14 >= 0) {
            uint64_t v16 = *(unsigned __int8 *)(v10 + 23);
          }
          else {
            uint64_t v16 = *(void *)(v10 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v15, v16);
        }
        else
        {
          std::stringbuf::str();
          unint64_t v17 = v29;
          if ((v29 & 0x80u) != 0) {
            unint64_t v17 = (unint64_t)v28[1];
          }
          if (v17) {
            quasar::updateFormattedResults((long long *)v28, a3, (uint64_t)a5);
          }
          if (v12 == v13) {
            quasar::updateFormattedResults((long long *)v10, a3, (uint64_t)a5);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          std::string::operator=(&v33, &__p);
          std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v32);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if ((char)v29 < 0) {
            operator delete(v28[0]);
          }
        }
        v10 += 24;
      }
      while (v10 != v11);
    }
  }
  else if (*a1 != v11)
  {
    do
    {
      if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*a2, a2[1], (unsigned __int8 **)v10) == a2[1])
      {
        int v20 = *(char *)(v10 + 23);
        if (v20 >= 0) {
          long long v21 = (unsigned __int8 *)v10;
        }
        else {
          long long v21 = *(unsigned __int8 **)v10;
        }
        if (v20 >= 0) {
          uint64_t v22 = *(unsigned __int8 *)(v10 + 23);
        }
        else {
          uint64_t v22 = *(void *)(v10 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v21, v22);
      }
      else
      {
        std::stringbuf::str();
        unint64_t v18 = v29;
        unsigned __int8 v19 = v29;
        if ((v29 & 0x80u) != 0) {
          unint64_t v18 = (unint64_t)v28[1];
        }
        if (v18)
        {
          quasar::updateFormattedResults((long long *)v28, a3, (uint64_t)a5);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          std::string::operator=(&v33, &__p);
          std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v32);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          unsigned __int8 v19 = v29;
        }
        if ((v19 & 0x80) != 0) {
          operator delete(v28[0]);
        }
      }
      v10 += 24;
    }
    while (v10 != v11);
  }
  std::stringbuf::str();
  unint64_t v23 = v29;
  unsigned __int8 v24 = v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v23 = (unint64_t)v28[1];
  }
  if (v23)
  {
    quasar::updateFormattedResults((long long *)v28, a3, (uint64_t)a5);
    unsigned __int8 v24 = v29;
  }
  if ((v24 & 0x80) != 0) {
    operator delete(v28[0]);
  }
  v30[0] = *MEMORY[0x1E4FBA408];
  uint64_t v25 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v30 + *(void *)(v30[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v31 = v25;
  v32[0] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v34);
}

void sub_1B1FF4FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

BOOL quasar::isAscii(uint64_t *a1)
{
  int v1 = *((char *)a1 + 23);
  if (v1 >= 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = (uint64_t *)*a1;
  }
  if (v1 >= 0) {
    uint64_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v3 = a1[1];
  }
  if (!v3) {
    return 1;
  }
  uint64_t v4 = 0;
            *((char *)v2 + v4),
            0x5EuLL))
  {
    if (v3 == ++v4) {
      return 1;
    }
  }
  return v4 == -1;
}

void quasar::updateFormattedResults(long long *a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8)) {
      goto LABEL_3;
    }
LABEL_24:
    unint64_t v17 = *(void *)(a3 + 8);
    if (v17 >= *(void *)(a3 + 16))
    {
      uint64_t v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, a1);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, a1);
      uint64_t v18 = v17 + 24;
    }
    *(void *)(a3 + 8) = v18;
    return;
  }
  if (!*(unsigned char *)(a2 + 23)) {
    goto LABEL_24;
  }
LABEL_3:
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  kaldi::SplitStringOnString((uint64_t)a1, (char *)a2, &v19);
  uint64_t v4 = v19;
  for (uint64_t i = v20; v4 != i; v4 += 24)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      if (*(void *)(v4 + 8))
      {
LABEL_8:
        unint64_t v6 = *(void *)(a3 + 8);
        unint64_t v7 = *(void *)(a3 + 16);
        if (v6 >= v7)
        {
          unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(void *)a3) >> 3);
          unint64_t v11 = v10 + 1;
          if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(void *)a3) >> 3);
          if (2 * v12 > v11) {
            unint64_t v11 = 2 * v12;
          }
          if (v12 >= 0x555555555555555) {
            unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v13 = v11;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
          if (v13) {
            int v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v13);
          }
          else {
            int v14 = 0;
          }
          int v15 = v14 + v10;
          __v.__first_ = v14;
          __v.__begin_ = v15;
          __v.__end_cap_.__value_ = &v14[v13];
          long long v16 = *(_OWORD *)v4;
          v15->__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          *(void *)(v4 + 8) = 0;
          *(void *)(v4 + 16) = 0;
          *(void *)uint64_t v4 = 0;
          __v.__end_ = v15 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
          unint64_t v9 = *(void *)(a3 + 8);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        }
        else
        {
          long long v8 = *(_OWORD *)v4;
          *(void *)(v6 + 16) = *(void *)(v4 + 16);
          *(_OWORD *)unint64_t v6 = v8;
          *(void *)(v4 + 8) = 0;
          *(void *)(v4 + 16) = 0;
          *(void *)uint64_t v4 = 0;
          unint64_t v9 = v6 + 24;
          *(void *)(a3 + 8) = v6 + 24;
        }
        *(void *)(a3 + 8) = v9;
      }
    }
    else if (*(unsigned char *)(v4 + 23))
    {
      goto LABEL_8;
    }
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1B1FF52B8(_Unwind_Exception *a1, char a2, uint64_t a3, uint64_t a4, std::__split_buffer<std::wstring> *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void EARLanguageDetectorRequestContextFromPTree(quasar::PTree *a1)
{
  uint64_t v2 = objc_alloc_init(_EARLanguageDetectorRequestContext);
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dictation-languages");
  quasar::PTree::getChild((uint64_t)a1, (uint64_t)&__p);
}

void sub_1B1FF59C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void EARLanguageDetectorRequestContextFromJson(void *a1)
{
  id v1 = a1;
  double v2 = quasar::PTree::PTree((quasar::PTree *)v3);
  if (v1) {
    objc_msgSend(v1, "ear_toString", v2);
  }
  quasar::PTree::readJsonFromFile();
}

void sub_1B1FF5BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::PTree::~PTree((quasar::PTree *)&a16);

  _Unwind_Resume(a1);
}

void EARLanguageDetectorRequestContextFromJsonStr(void *a1)
{
  id v1 = a1;
  double v2 = quasar::PTree::PTree((quasar::PTree *)v5);
  if (v1) {
    objc_msgSend(v1, "ear_toString", v2);
  }
  else {
    memset(&__p, 0, sizeof(__p));
  }
  std::istringstream::basic_istringstream[abi:ne180100](&v4, &__p, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::PTree::readJson();
}

void sub_1B1FF5DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::PTree::~PTree((quasar::PTree *)(v17 - 112));

  _Unwind_Resume(a1);
}

void quasar::ProcessingSink::process(uint64_t a1, const void **a2, uint64_t **a3)
{
  char v5 = (uint64_t **)(a1 + 64);
  if (a1 + 72 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 64, a2))
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Multiple values received for graph-output:", 42);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, (uint64_t)a2);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
  }
  *(void *)&v8[0] = a2;
  unint64_t v6 = std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, a2, (uint64_t)&std::piecewise_construct, (long long **)v8)+ 7;
  if (v6 != (uint64_t *)a3) {
    std::vector<quasar::TranslationPhraseInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>((uint64_t)v6, *a3, a3[1], 0x8F5C28F5C28F5C29 * (a3[1] - *a3));
  }
}

uint64_t quasar::ProcessingSink::getValue(quasar::ProcessingSink *this)
{
  double v2 = (char *)this + 64;
  std::string::basic_string[abi:ne180100]<0>(__p, "in");
  id v3 = (quasar::ProcessingSink *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v2, (const void **)__p);
  if (SBYTE7(v6) < 0) {
    operator delete(__p[0]);
  }
  if ((quasar::ProcessingSink *)((char *)this + 72) == v3)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "No value received in graph-output!");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  return (uint64_t)v3 + 56;
}

void sub_1B1FF5FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ProcessingSink::getValueMap(quasar::ProcessingSink *this)
{
  if (!*((void *)this + 10))
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "No value received in graph-output!");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  return (uint64_t)this + 64;
}

BOOL quasar::ProcessingSink::hasValue(quasar::ProcessingSink *this)
{
  return *((void *)this + 10) != 0;
}

uint64_t **quasar::ProcessingSink::resetValue(uint64_t **this)
{
  return std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__assign_unique<std::pair<std::string const,quasar::ProcessingBlock::ValueType> const*>(this + 8, 0, 0);
}

uint64_t quasar::ProcessingSink::minConfigVersion(quasar::ProcessingSink *this)
{
  return 35;
}

void quasar::ProcessingSink::~ProcessingSink(quasar::ProcessingSink *this)
{
  *(void *)this = &unk_1F0A52A40;
  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  quasar::ProcessingBlock::~ProcessingBlock((char **)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A52A40;
  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  quasar::ProcessingBlock::~ProcessingBlock((char **)this);
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::ProcessingSink::blockType(quasar::ProcessingSink *this)
{
  return "ProcessingSink";
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  long long v7 = (std::string *)(v6 + 4);
  long long v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1FF62A8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__assign_unique<std::pair<std::string const,quasar::ProcessingBlock::ValueType> const*>(uint64_t **result, const void **a2, const void **a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    long long v6 = *result;
    long long v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      long long v8 = (uint64_t *)v6[1];
    }
    else {
      long long v8 = v6;
    }
    long long v10 = result;
    uint64_t v11 = v8;
    long long v12 = v8;
    if (v8)
    {
      uint64_t v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      while (a2 != a3)
      {
        std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__node_assign_unique(v5, a2, v8);
        if (v9)
        {
          long long v8 = v11;
          long long v12 = v11;
          if (!v11)
          {
            a2 += 6;
            break;
          }
          uint64_t v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v11);
        }
        else
        {
          long long v8 = v12;
        }
        a2 += 6;
        if (!v8) {
          break;
        }
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::ProcessingBlock::ValueType> const&>(v5, a2, (long long *)a2);
    a2 += 6;
  }
  return result;
}

void sub_1B1FF63B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__node_assign_unique(uint64_t **a1, const void **a2, uint64_t *a3)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  if (*v6) {
    return *v6;
  }
  long long v7 = v6;
  v10[0] = a3 + 4;
  v10[1] = a3 + 7;
  std::pair<std::string &,quasar::ProcessingBlock::ValueType &>::operator=[abi:ne180100]<std::string const,quasar::ProcessingBlock::ValueType,(void *)0>((uint64_t)v10, (uint64_t)a2);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, a3);
  return a3;
}

uint64_t std::pair<std::string &,quasar::ProcessingBlock::ValueType &>::operator=[abi:ne180100]<std::string const,quasar::ProcessingBlock::ValueType,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2 + 24) {
    std::vector<quasar::TranslationPhraseInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v4, *(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32), 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  double v2 = *(void **)(a1 + 8);
  if (v2)
  {
    id v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        double v2 = v3;
        id v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::ProcessingBlock::ValueType> const&>(uint64_t **a1, const void **a2, long long *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    long long v7 = v5;
    std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__construct_node<std::pair<std::string const,quasar::ProcessingBlock::ValueType> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    long long v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t quasar::SpeechRequestData::getRefTranscriptForErrorBlaming(quasar::SpeechRequestData *this)
{
  return *((void *)this + 3) + 176;
}

uint64_t quasar::SpeechRequestData::isNnetEndpointingEnabled(quasar::SpeechRequestData *this)
{
  return *(unsigned __int8 *)(*((void *)this + 3) + 33);
}

uint64_t quasar::SpeechRequestData::getRecogRequestTimer@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 208);
  *a2 = *(void *)(this + 200);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t quasar::SpeechRequestData::getLocation(quasar::SpeechRequestData *this)
{
  return *((void *)this + 3) + 16;
}

uint64_t quasar::SpeechRequestData::getLmeDataStreams(quasar::SpeechRequestData *this)
{
  return (uint64_t)this + 160;
}

uint64_t quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(quasar::SpeechRequestData *this)
{
  return (uint64_t)this + 128;
}

uint64_t quasar::SpeechRequestData::getMultiBuffer(quasar::SpeechRequestData *this)
{
  return (uint64_t)this + 144;
}

uint64_t quasar::SpeechRequestData::isUtteranceDetectionEnabled(quasar::SpeechRequestData *this)
{
  return *(unsigned __int8 *)(*((void *)this + 3) + 36);
}

uint64_t quasar::SpeechRequestData::isLoadLmeProfile(quasar::SpeechRequestData *this)
{
  return *((unsigned __int8 *)this + 217);
}

uint64_t quasar::SpeechRequestData::isEndPointCandidateEnabled(quasar::SpeechRequestData *this)
{
  return *(unsigned __int8 *)(*((void *)this + 3) + 38);
}

uint64_t quasar::SpeechRequestData::isUtteranceConcatenationEnabled(quasar::SpeechRequestData *this)
{
  return *(unsigned __int8 *)(*((void *)this + 3) + 37);
}

uint64_t quasar::SpeechRequestData::getEndpointStartMs(quasar::SpeechRequestData *this)
{
  return *(void *)(*((void *)this + 3) + 40);
}

uint64_t quasar::SpeechRequestData::getEndPointerExtraDelay(quasar::SpeechRequestData *this)
{
  return *(unsigned __int8 *)(*((void *)this + 3) + 50);
}

void quasar::SpeechRequestData::getLeftContext(quasar::SpeechRequestData *this@<X0>, std::string *a2@<X8>)
{
}

void quasar::SpeechRequestData::getLeftContextForDecoder(quasar::SpeechRequestData *this@<X0>, uint64_t *a2@<X8>)
{
}

BOOL quasar::SpeechRequestData::isRequestEagerResultDurationEmpty(std::mutex *this)
{
  uint64_t v2 = this + 1;
  std::mutex::lock(this + 1);
  BOOL v3 = *(void *)&this->__m_.__opaque[32] == *(void *)&this->__m_.__opaque[40];
  std::mutex::unlock(v2);
  return v3;
}

BOOL quasar::SpeechRequestData::processedRequestEagerResultDuration(std::mutex *this, int a2)
{
  uint64_t v4 = this + 1;
  std::mutex::lock(this + 1);
  long long v6 = *(char **)&this->__m_.__opaque[32];
  uint64_t v5 = *(char **)&this->__m_.__opaque[40];
  if (v6 == v5)
  {
    BOOL v7 = 0;
  }
  else
  {
    BOOL v7 = *(_DWORD *)v6 <= a2;
    if (*(_DWORD *)v6 <= a2)
    {
      long long v8 = *(char **)&this->__m_.__opaque[32];
      do
      {
        int64_t v9 = v5 - (v6 + 4);
        if (v5 != v6 + 4)
        {
          memmove(v6, v6 + 4, v5 - (v6 + 4));
          long long v8 = *(char **)&this->__m_.__opaque[32];
        }
        uint64_t v5 = &v6[v9];
        *(void *)&this->__m_.__opaque[40] = &v6[v9];
        if (v8 == &v6[v9]) {
          break;
        }
        long long v6 = v8;
      }
      while (*(_DWORD *)v8 <= a2);
    }
  }
  std::mutex::unlock(v4);
  return v7;
}

void quasar::SpeechRequestData::addRequestEagerResultDurations(std::mutex *this, int a2)
{
  uint64_t v4 = this + 1;
  std::mutex::lock(this + 1);
  unint64_t v5 = *(void *)&this->__m_.__opaque[48];
  long long v6 = *(char **)&this->__m_.__opaque[40];
  if ((unint64_t)v6 >= v5)
  {
    long long v8 = *(char **)&this->__m_.__opaque[32];
    uint64_t v9 = (v6 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v5 - (void)v8;
    unint64_t v11 = (uint64_t)(v5 - (void)v8) >> 1;
    if (v11 <= v9 + 1) {
      unint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this->__m_.__opaque[48], v12);
      long long v8 = *(char **)&this->__m_.__opaque[32];
      long long v6 = *(char **)&this->__m_.__opaque[40];
    }
    else
    {
      long long v13 = 0;
    }
    long long v14 = &v13[4 * v9];
    long long v15 = &v13[4 * v12];
    *(_DWORD *)long long v14 = a2;
    BOOL v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)&this->__m_.__opaque[32] = v14;
    *(void *)&this->__m_.__opaque[40] = v7;
    *(void *)&this->__m_.__opaque[48] = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)long long v6 = a2;
    BOOL v7 = v6 + 4;
  }
  *(void *)&this->__m_.__opaque[40] = v7;
  std::mutex::unlock(v4);
}

void sub_1B1FF6858(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRequestData::getInputOrigin(quasar::SpeechRequestData *this)
{
  return *((void *)this + 3) + 224;
}

void quasar::SpeechRequestData::getLeftContextForItn(quasar::SpeechRequestData *this@<X0>, std::string *a2@<X8>)
{
}

uint64_t quasar::SpeechRequestData::getRegionId(quasar::SpeechRequestData *this)
{
  return *((void *)this + 3) + 248;
}

uint64_t quasar::SpeechRequestData::getDeviceId(quasar::SpeechRequestData *this)
{
  return *((void *)this + 3) + 152;
}

void quasar::SpeechRequestData::updateInterUtteranceLeftContext(uint64_t a1, long long **a2, unint64_t a3)
{
}

void quasar::SpeechRequestData::getRightContextForItn(quasar::SpeechRequestData *this@<X0>, std::string *a2@<X8>)
{
}

uint64_t quasar::SpeechRequestData::SpeechRequestData(uint64_t a1, void *a2, void *a3, void *a4, void **a5, _OWORD *a6, void *a7, char a8, char a9, unint64_t a10)
{
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = *a2;
  uint64_t v14 = a2[1];
  *(void *)(a1 + 32) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 850045863;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = *a3;
  uint64_t v15 = a3[1];
  *(void *)(a1 + 136) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 144) = *a4;
  uint64_t v16 = a4[1];
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 52) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>((void *)(a1 + 160), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 84) = *a6;
  *(void *)(a1 + 200) = *a7;
  uint64_t v17 = a7[1];
  *(void *)(a1 + 208) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 216) = a8;
  *(unsigned char *)(a1 + 217) = a9;
  memset(v19, 0, sizeof(v19));
  quasar::LeftContext::updateInterUtteranceLeftContext(*(void *)(a1 + 24) + 368, v19, a10);
  long long v20 = v19;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  return a1;
}

{
  return quasar::SpeechRequestData::SpeechRequestData(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1B1FF6A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void **a12)
{
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a12);
  uint64_t v16 = (std::__shared_weak_count *)v12[26];
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v17 = (std::__shared_weak_count *)v12[19];
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  long long v18 = (std::__shared_weak_count *)v12[17];
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  std::mutex::~mutex(v13);
  long long v19 = *v14;
  if (*v14)
  {
    v12[6] = v19;
    operator delete(v19);
  }
  long long v20 = (std::__shared_weak_count *)v12[4];
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRequestData::SpeechRequestData(uint64_t a1, uint64_t *a2, void **a3, char a4)
{
  uint64_t v7 = *a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(*a2 + 16);
  uint64_t v9 = *(void *)(v7 + 24);
  uint64_t v8 = *(void *)(v7 + 32);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v9;
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 850045863;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  uint64_t v10 = *a2;
  uint64_t v11 = *(void *)(*a2 + 136);
  *(void *)(a1 + 128) = *(void *)(*a2 + 128);
  *(void *)(a1 + 136) = v11;
  if (v11)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = *a2;
  }
  uint64_t v13 = *(void *)(v10 + 144);
  uint64_t v12 = *(void *)(v10 + 152);
  *(void *)(a1 + 144) = v13;
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 52) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>((void *)(a1 + 160), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 84) = *(_OWORD *)(*a2 + 184);
  uint64_t v14 = *a2;
  uint64_t v15 = *(void *)(*a2 + 208);
  *(void *)(a1 + 200) = *(void *)(*a2 + 200);
  *(void *)(a1 + 208) = v15;
  if (v15)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    uint64_t v14 = *a2;
  }
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(v14 + 216);
  *(unsigned char *)(a1 + 217) = a4;
  return a1;
}

void sub_1B1FF6BB0(_Unwind_Exception *a1)
{
  unint64_t v5 = (std::__shared_weak_count *)v1[19];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = (std::__shared_weak_count *)v1[17];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::mutex::~mutex(v2);
  uint64_t v7 = *v3;
  if (*v3)
  {
    v1[6] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)v1[4];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  _Unwind_Resume(a1);
}

void quasar::SpeechRequestData::~SpeechRequestData(std::mutex *this)
{
  uint64_t v2 = *(std::__shared_weak_count **)&this[3].__m_.__opaque[8];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v7 = (void **)&this[2].__m_.__opaque[24];
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v7);
  BOOL v3 = *(std::__shared_weak_count **)&this[2].__m_.__opaque[16];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)this[2].__m_.__opaque;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::mutex::~mutex(this + 1);
  unint64_t v5 = *(void **)&this->__m_.__opaque[32];
  if (v5)
  {
    *(void *)&this->__m_.__opaque[40] = v5;
    operator delete(v5);
  }
  long long v6 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

double quasar::SpeechRequestData::makeSpeechRequestData@<D0>(uint64_t *a1@<X0>, void **a2@<X1>, char a3@<W2>, _OWORD *a4@<X8>)
{
  char v7 = a3;
  std::allocate_shared[abi:ne180100]<quasar::ConcreteSpeechRequestData,std::allocator<quasar::ConcreteSpeechRequestData>,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,BOOL const&,void>(a1, a2, &v7, v6);
  double result = v6[0];
  *a4 = *(_OWORD *)v6;
  return result;
}

void *std::allocate_shared[abi:ne180100]<quasar::ConcreteSpeechRequestData,std::allocator<quasar::ConcreteSpeechRequestData>,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,BOOL const&,void>@<X0>(uint64_t *a1@<X1>, void **a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xF8uLL);
  double result = std::__shared_ptr_emplace<quasar::ConcreteSpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,BOOL const&,std::allocator<quasar::ConcreteSpeechRequestData>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B1FF6D30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::ConcreteSpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<std::shared_ptr<quasar::LmeContainer>> const&,BOOL const&,std::allocator<quasar::ConcreteSpeechRequestData>,0>(void *a1, uint64_t *a2, void **a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61638;
  quasar::SpeechRequestData::SpeechRequestData((uint64_t)(a1 + 3), a2, a3, *a4);
  return a1;
}

void sub_1B1FF6D90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ConcreteSpeechRequestData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ConcreteSpeechRequestData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::ConcreteSpeechRequestData>::__on_zero_shared(uint64_t a1)
{
}

std::string *quasar::BitmapRegion::BitmapRegion(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = 0;
  return this;
}

void quasar::BitmapRegion::loadAndEraseFromJson(quasar::BitmapRegion *this, quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "bitmap-color");
  quasar::PTree::getAndEraseInt<int>((uint64_t)a2, (uint64_t)__p);
}

void sub_1B1FF709C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::BitmapRegion::shouldLoad(quasar::BitmapRegion *this, const quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "bitmap-color");
  quasar::PTree::getChildOptional((uint64_t)this, (uint64_t)__p);
}

void sub_1B1FF7118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::RomanizerOptions::options@<X0>(quasar::RomanizerOptions *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  double result = operator new(0x38uLL);
  a2[1] = result + 7;
  a2[2] = result + 7;
  *double result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 336;
  result[3] = (char *)this + 480;
  result[4] = (char *)this + 624;
  result[5] = (char *)this + 768;
  result[6] = (char *)this + 912;
  *a2 = result;
  return result;
}

void quasar::RomanizerBlock::getPronunciator(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unsigned __int8 a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  char v43 = a3;
  unsigned __int8 v42 = a4;
  {
    operator new();
  }
  if (!a5) {
    goto LABEL_13;
  }
  uint64_t v10 = (uint64_t **)quasar::RomanizerBlock::getPronunciator(std::string const&,std::string const&,BOOL,BOOL,BOOL)::pronunciatorMap;
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_bbEEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS8_S8_bbEJEJEJRKS8_SC_RbSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_((std::string *)v25, (long long *)a1, (long long *)a2, &v43, (std::string::value_type *)&v42);
  uint64_t v44 = v25;
  uint64_t v11 = std::__tree<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::__map_value_compare<std::tuple<std::string,std::string,BOOL,BOOL>,std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::less<std::tuple<std::string,std::string,BOOL,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>>>::__emplace_unique_key_args<std::tuple<std::string,std::string,BOOL,BOOL>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,std::string,BOOL,BOOL>&&>,std::tuple<>>(v10, (uint64_t)v25, (uint64_t)&std::piecewise_construct, (long long **)&v44);
  *a6 = 0;
  a6[1] = 0;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)v11 + 12);
  if (v12)
  {
    uint64_t v13 = std::__shared_weak_count::lock(v12);
    a6[1] = (uint64_t)v13;
    if (v13) {
      *a6 = *((void *)v11 + 11);
    }
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(*((void **)&v26 + 1));
  }
  if (SBYTE7(v26) < 0) {
    operator delete(v25[0]);
  }
  if (!*a6)
  {
    uint64_t v14 = (std::__shared_weak_count *)a6[1];
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
LABEL_13:
    std::allocate_shared[abi:ne180100]<kaldi::quasar::NNMTTransliterator,std::allocator<kaldi::quasar::NNMTTransliterator>,BOOL &,void>(&v43, a6);
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v15 = *(void *)(a1 + 8);
    }
    uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
    if (v15)
    {
      uint64_t v17 = *(void *)(a2 + 8);
    }
    else
    {
      uint64_t v17 = *(void *)(a2 + 8);
      if ((v16 & 0x80u) == 0) {
        uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v18 = *(void *)(a2 + 8);
      }
      if (!v18)
      {
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        *(_OWORD *)uint64_t v25 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Configuration needs either 'romanizer' or 'pron-guide-model-file'", 65);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v25);
      }
    }
    if ((v16 & 0x80u) != 0) {
      uint64_t v16 = v17;
    }
    uint64_t v19 = *a6;
    if (v16) {
      kaldi::quasar::NNMTTransliterator::Read(v19, a2, a1, v42);
    }
    kaldi::quasar::NNMTTransliterator::SetICUScripts(v19, a1);
    if (a5)
    {
      long long v20 = (uint64_t **)quasar::RomanizerBlock::getPronunciator(std::string const&,std::string const&,BOOL,BOOL,BOOL)::pronunciatorMap;
      _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_bbEEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS8_S8_bbEJEJEJRKS8_SC_RbSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_((std::string *)v25, (long long *)a1, (long long *)a2, &v43, (std::string::value_type *)&v42);
      uint64_t v44 = v25;
      long long v21 = std::__tree<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::__map_value_compare<std::tuple<std::string,std::string,BOOL,BOOL>,std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::less<std::tuple<std::string,std::string,BOOL,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>>>::__emplace_unique_key_args<std::tuple<std::string,std::string,BOOL,BOOL>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,std::string,BOOL,BOOL>&&>,std::tuple<>>(v20, (uint64_t)v25, (uint64_t)&std::piecewise_construct, (long long **)&v44);
      uint64_t v23 = *a6;
      uint64_t v22 = a6[1];
      if (v22) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v24 = (std::__shared_weak_count *)*((void *)v21 + 12);
      *((void *)v21 + 11) = v23;
      *((void *)v21 + 12) = v22;
      if (v24) {
        std::__shared_weak_count::__release_weak(v24);
      }
      if (SHIBYTE(v27) < 0) {
        operator delete(*((void **)&v26 + 1));
      }
      if (SBYTE7(v26) < 0) {
        operator delete(v25[0]);
      }
    }
  }
}

void sub_1B1FF7470(_Unwind_Exception *a1)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::NNMTTransliterator::Read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

uint64_t kaldi::quasar::NNMTTransliterator::SetICUScripts(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 4192)) {
    utrans_close();
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    UErrorCode v17 = U_ZERO_ERROR;
    kaldi::quasar::NNMTTransliterator::UnicodeVectorFromString(a2, (uint64_t)v16);
    uint64_t v5 = utrans_openU();
    *(void *)(a1 + 4192) = v5;
    if (!v5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
      char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Failed to create ICU Transliterator for scripts : ", 50);
      int v8 = *(char *)(a2 + 23);
      if (v8 >= 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = *(void *)a2;
      }
      if (v8 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v10 = *(void *)(a2 + 8);
      }
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
      uint64_t v13 = u_errorName(v17);
      size_t v14 = strlen(v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
    }
    if (v16[0])
    {
      v16[1] = v16[0];
      operator delete(v16[0]);
    }
  }
  return 1;
}

void sub_1B1FF7678(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(void *)(v1 - 128) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::RomanizerBlock::init(quasar::RomanizerBlock *this)
{
  uint64_t v2 = quasar::OptionValue<std::string>::value((void *)this + 3);
  uint64_t v3 = quasar::OptionValue<std::string>::value((void *)this + 23);
  char v4 = *(unsigned char *)quasar::OptionValue<BOOL>::value((void *)this + 43);
  unsigned __int8 v5 = *(unsigned char *)quasar::OptionValue<BOOL>::value((void *)this + 79);
  long long v6 = (unsigned __int8 *)quasar::OptionValue<BOOL>::value((void *)this + 97);
  quasar::RomanizerBlock::getPronunciator(v2, v3, v4, v5, *v6, (uint64_t *)&v9);
  long long v7 = v9;
  long long v9 = 0uLL;
  int v8 = (std::__shared_weak_count *)*((void *)this + 136);
  *(_OWORD *)((char *)this + 1080) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

void virtual thunk to'quasar::RomanizerBlock::init(quasar::RomanizerBlock *this)
{
}

void quasar::RomanizerBlock::process(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(&v5, *a3, a3[1], 0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3));
  quasar::OptionValue<std::string>::value(a1 + 115);
  if (v5 != v6) {
    quasar::MetaInfo::hasRomanization((quasar::MetaInfo::Impl **)(v5 + 192));
  }
  quasar::ProcessingBlock::send((uint64_t)a1 + *(void *)(*a1 - 24), (uint64_t)&v5, 0);
  __p[0] = &v5;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B1FF7A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  a31 = (void *)(v36 - 120);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

void *kaldi::quasar::NNMTTransliterator::Transliterate@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 4192) || *(unsigned char *)(a1 + 4200)) {
    std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]();
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

void sub_1B1FF7DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, char *a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t *a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  a27 = (uint64_t *)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  a9 = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a17 < 0) {
    operator delete(__p);
  }
  std::__tree<std::string>::destroy((uint64_t)&a18, a19);
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'quasar::RomanizerBlock::process(void *a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t quasar::RomanizerBlock::minConfigVersion(quasar::RomanizerBlock *this)
{
  return 133;
}

uint64_t virtual thunk to'quasar::RomanizerBlock::minConfigVersion(quasar::RomanizerBlock *this)
{
  return 133;
}

void quasar::ConfiguredProcessingBlock<quasar::RomanizerOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  uint64_t v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  char v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      int v8 = *a2;
      long long v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    char v4 = v10;
  }
  if (v4)
  {
    uint64_t v11 = v4;
    operator delete(v4);
  }
}

void sub_1B1FF8018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::RomanizerOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::RomanizerOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::RomanizerOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

void quasar::RomanizerBlock::~RomanizerBlock(quasar::RomanizerBlock *this)
{
  *(void *)this = off_1F0A52B48;
  uint64_t v2 = (char **)((char *)this + 1096);
  *((void *)this + 137) = off_1F0A52BF0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 136);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)this = &unk_1F0A21570;
  *((void *)this + 137) = &unk_1F0A215F8;
  quasar::RomanizerOptions::~RomanizerOptions((quasar::RomanizerBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = off_1F0A52B48;
  uint64_t v2 = (char **)((char *)this + 1096);
  *((void *)this + 137) = off_1F0A52BF0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 136);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)this = &unk_1F0A21570;
  *((void *)this + 137) = &unk_1F0A215F8;
  quasar::RomanizerOptions::~RomanizerOptions((quasar::RomanizerBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::RomanizerBlock::blockType(quasar::RomanizerBlock *this)
{
  return "RomanizerBlock";
}

void virtual thunk to'quasar::RomanizerBlock::~RomanizerBlock(quasar::RomanizerBlock *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = off_1F0A52B48;
  *((void *)v1 + 137) = off_1F0A52BF0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 136);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)uint64_t v1 = &unk_1F0A21570;
  *((void *)v1 + 137) = &unk_1F0A215F8;
  quasar::RomanizerOptions::~RomanizerOptions((quasar::RomanizerOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 137);
}

{
  char *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = off_1F0A52B48;
  *((void *)v1 + 137) = off_1F0A52BF0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 136);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)uint64_t v1 = &unk_1F0A21570;
  *((void *)v1 + 137) = &unk_1F0A215F8;
  quasar::RomanizerOptions::~RomanizerOptions((quasar::RomanizerOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 137);
  JUMPOUT(0x1B3EA8670);
}

const char *virtual thunk to'quasar::RomanizerBlock::blockType(quasar::RomanizerBlock *this)
{
  return "RomanizerBlock";
}

std::string *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_bbEEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS8_S8_bbEJEJEJRKS8_SC_RbSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_(std::string *this, long long *a2, long long *a3, std::string::value_type *a4, std::string::value_type *a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  uint64_t v10 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v11 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  this[2].__r_.__value_.__s.__data_[0] = *a4;
  this[2].__r_.__value_.__s.__data_[1] = *a5;
  return this;
}

void sub_1B1FF8478(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::BPE::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)a1, *(void **)a2, (void *)(a2 + 8));
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,float>,void *> *>>((void *)(a1 + 24), *(uint64_t **)(a2 + 40), 0);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 64), *(std::string **)(a2 + 64), *(long long **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((void *)(a1 + 88), *(uint64_t **)(a2 + 104), 0);
  }
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 84) = *(_DWORD *)(a2 + 184);
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,float>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  char v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    int v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        *((_DWORD *)v8 + 10) = *((_DWORD *)v4 + 10);
        uint64_t v10 = (void **)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        char v4 = (uint64_t *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        int v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_multi<std::pair<std::string const,float> const&>(a1, (uint64_t)(v4 + 2));
    char v4 = (uint64_t *)*v4;
  }
}

void sub_1B1FF8630(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1B1FF864C(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_multi<std::pair<std::string const,float> const&>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node<std::pair<std::string const,float> const&>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v4);
}

void sub_1B1FF869C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node<std::pair<std::string const,float> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x30uLL);
  int v8 = v7;
  *(void *)(a3 + 8) = v6;
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL v9 = v7 + 16;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *BOOL v9 = *(_OWORD *)a2;
    *((void *)v7 + 4) = *(void *)(a2 + 16);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)v9);
  *((void *)v8 + 1) = result;
  return result;
}

void sub_1B1FF8768(_Unwind_Exception *a1)
{
  *uint64_t v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

UChar *kaldi::quasar::NNMTTransliterator::UnicodeVectorFromString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)pErrorCode = 0;
  if (*(char *)(a1 + 23) >= 0) {
    char v4 = (const char *)a1;
  }
  else {
    char v4 = *(const char **)a1;
  }
  u_strFromUTF8(0, 0, (int32_t *)pErrorCode, v4, -1, &pErrorCode[1]);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::vector<unsigned short>::resize(a2, (int)pErrorCode[0] + 1);
  pErrorCode[1] = U_ZERO_ERROR;
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v5 = (const char *)a1;
  }
  else {
    uint64_t v5 = *(const char **)a1;
  }
  unint64_t result = u_strFromUTF8(*(UChar **)a2, (*(void *)(a2 + 8) - *(void *)a2) >> 1, (int32_t *)pErrorCode, v5, -1, &pErrorCode[1]);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Failed to create unicode string for \"", 37);
    int v8 = *(char *)(a1 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *(void *)a1;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    BOOL v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\": ", 3);
    uint64_t v13 = u_errorName(pErrorCode[1]);
    size_t v14 = strlen(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  return result;
}

void sub_1B1FF88B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::NNMTTransliterator::ReplaceString(int a1, std::wstring *this, uint64_t a3, uint64_t a4)
{
  std::wstring::size_type v7 = 0;
  std::wstring::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v9 = this;
  }
  else {
    uint64_t v9 = (std::wstring *)this->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::wstring::size_type size = this->__r_.__value_.__l.__size_;
  }
  char v10 = *(unsigned char *)(a3 + 23);
  if (v10 >= 0) {
    BOOL v11 = (const __int32 *)a3;
  }
  else {
    BOOL v11 = *(const __int32 **)a3;
  }
  if (v10 >= 0) {
    int64_t v12 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    int64_t v12 = *(void *)(a3 + 8);
  }
  while (!v12)
  {
LABEL_22:
    if (v7 != -1)
    {
      char v20 = *(unsigned char *)(a4 + 23);
      if (v20 >= 0) {
        std::wstring::size_type v21 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        std::wstring::size_type v21 = *(void *)(a4 + 8);
      }
      if (v20 >= 0) {
        uint64_t v22 = (const std::wstring::value_type *)a4;
      }
      else {
        uint64_t v22 = *(const std::wstring::value_type **)a4;
      }
      std::wstring::replace(this, v7, v21, v22, v21);
      uint64_t v23 = *(unsigned __int8 *)(a4 + 23);
      if ((v23 & 0x80u) != 0) {
        uint64_t v23 = *(void *)(a4 + 8);
      }
      v7 += v23;
      std::wstring::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) == 0) {
        uint64_t v9 = this;
      }
      else {
        uint64_t v9 = (std::wstring *)this->__r_.__value_.__r.__words[0];
      }
      if ((size & 0x80u) != 0) {
        std::wstring::size_type size = this->__r_.__value_.__l.__size_;
      }
      int v24 = *(char *)(a3 + 23);
      BOOL v11 = v24 >= 0 ? (const __int32 *)a3 : *(const __int32 **)a3;
      int64_t v12 = v24 >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(void *)(a3 + 8);
      if (size >= v7) {
        continue;
      }
    }
    return;
  }
  uint64_t v13 = (__int32 *)((char *)v9 + 4 * v7);
  size_t v14 = (__int32 *)((char *)v9 + 4 * size);
  uint64_t v15 = v14 - v13;
  if (v15 >= v12)
  {
    __int32 v16 = *v11;
    do
    {
      uint64_t v17 = v15 - v12;
      if (v17 == -1) {
        break;
      }
      uint64_t v18 = wmemchr(v13, v16, v17 + 1);
      if (!v18) {
        break;
      }
      uint64_t v19 = v18;
      if (!wmemcmp(v18, v11, v12))
      {
        if (v19 == v14) {
          return;
        }
        std::wstring::size_type v7 = ((char *)v19 - (char *)v9) >> 2;
        goto LABEL_22;
      }
      uint64_t v13 = v19 + 1;
      uint64_t v15 = v14 - (v19 + 1);
    }
    while (v15 >= v12);
  }
}

void kaldi::quasar::NNMTTransliterator::Transliterate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(void *)(a1 + 4192) || *(unsigned char *)(a1 + 4200))
  {
    uint64_t v5 = *(std::string **)a2;
    uint64_t v6 = *(long long **)(a2 + 8);
    if (*(long long **)a2 != v6)
    {
      if (*(unsigned char *)(a1 + 4200))
      {
        if (*(unsigned char *)(a1 + 4201))
        {
          unint64_t v7 = 0;
          int v8 = (long long *)(a1 + 4168);
          do
          {
            long long v22 = 0uLL;
            *(void *)&long long v23 = 0;
            kaldi::quasar::NNMTTransliterator::SplitUtfString(a1, &v5[v7], (uint64_t)&v22);
            uint64_t v9 = (long long *)*((void *)&v22 + 1);
            char v10 = (long long *)v22;
            if ((void)v22 != *((void *)&v22 + 1))
            {
              unint64_t v11 = a3[1];
              do
              {
                if (v11 >= a3[2])
                {
                  unint64_t v11 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v10);
                }
                else
                {
                  std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v10);
                  v11 += 24;
                }
                a3[1] = v11;
                char v10 = (long long *)((char *)v10 + 24);
              }
              while (v10 != v9);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) > ++v7)
            {
              unint64_t v12 = a3[1];
              if (v12 >= a3[2])
              {
                uint64_t v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v8);
              }
              else
              {
                std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v8);
                uint64_t v13 = v12 + 24;
              }
              a3[1] = v13;
            }
            __v.__first_ = (std::__split_buffer<std::string>::pointer)&v22;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
            uint64_t v5 = *(std::string **)a2;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) > v7);
        }
        else if (kaldi::quasar::TorchEncoderDecoder::HasBpeModel((kaldi::quasar::TorchEncoderDecoder *)a1))
        {
          kaldi::quasar::BPE::Apply(a1 + 4208, (std::string **)a2, a3);
        }
        else if (a3 != (uint64_t *)a2)
        {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)a3, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
        }
        uint64_t v25 = 0;
        long long v26 = 0;
        uint64_t v27 = 0;
        kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>((kaldi::quasar::TorchEncoderDecoder *)a1, (long long **)a3);
      }
      if (a3 != (uint64_t *)a2) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)a3, v5, v6, 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v5) >> 3));
      }
      if (*(void *)(a1 + 4192))
      {
        memset(&__v, 0, 24);
        uint64_t v14 = *a3;
        uint64_t v15 = a3[1];
        if (*a3 != v15)
        {
          do
          {
            kaldi::quasar::NNMTTransliterator::UnicodeVectorFromString(v14, (uint64_t)&v25);
            long long v22 = xmmword_1F0A64310;
            long long v23 = *(_OWORD *)&off_1F0A64320;
            long long v24 = xmmword_1F0A64330;
            u_strlen(v25);
            utrans_trans();
            kaldi::quasar::NNMTTransliterator::StringFromUnicodeVector((const UChar **)&v25, __p);
            std::__split_buffer<std::string>::pointer begin = __v.__begin_;
            if (__v.__begin_ >= __v.__end_)
            {
              uint64_t v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (long long *)__p);
            }
            else
            {
              if (SHIBYTE(v21) < 0)
              {
                std::string::__init_copy_ctor_external(__v.__begin_, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                long long v17 = *(_OWORD *)__p;
                __v.__begin_->__r_.__value_.__r.__words[2] = v21;
                *(_OWORD *)&begin->__r_.__value_.__l.__data_ = v17;
              }
              uint64_t v18 = begin + 1;
            }
            __v.__begin_ = v18;
            if (SHIBYTE(v21) < 0) {
              operator delete(__p[0]);
            }
            if (v25)
            {
              long long v26 = v25;
              operator delete(v25);
            }
            v14 += 24;
          }
          while (v14 != v15);
        }
        if (&__v != (std::__split_buffer<std::string> *)a3) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)a3, __v.__first_, (long long *)__v.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)__v.__begin_ - (char *)__v.__first_) >> 3));
        }
        *(void *)&long long v22 = &__v;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
      }
    }
  }
}

void sub_1B1FF93F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)(v20 - 128));
  if (a19 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a20);
  a20 = v20 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

uint64_t std::set<std::wstring>::set[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  char v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      std::__tree<std::wstring>::__emplace_hint_unique_key_args<std::wstring,std::wstring const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_1B1FF9578(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::wstring>::__emplace_hint_unique_key_args<std::wstring,std::wstring const&>(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::wstring>::__find_equal<std::wstring>(a1, a2, &v10, &v9, a3);
  unint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::wstring>::__construct_node<std::wstring const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::wstring>::__find_equal<std::wstring>(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 != a2
    && !std::less<std::wstring>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if (!std::less<std::wstring>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (void *)a2[1];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        uint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::wstring>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4))) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    unint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  unint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      unint64_t v12 = v11;
      unint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    __int32 v16 = a2;
    do
    {
      unint64_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      __int32 v16 = v12;
    }
    while (v17);
  }
  if (std::less<std::wstring>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return std::__tree<std::wstring>::__find_equal<std::wstring>((uint64_t)a1, a3, a5);
}

void std::__tree<std::wstring>::__construct_node<std::wstring const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v7 = (std::wstring *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::basic_string<char32_t>::__init_copy_ctor_external(v7, *(const std::wstring::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B1FF9844(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__tree<std::wstring>::__find_equal<std::wstring>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  char v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        int v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::wstring>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4))) {
          break;
        }
        char v4 = (void *)*v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::wstring>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      char v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    int v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

unint64_t kaldi::quasar::NNMTTransliterator::SplitUtfString(int a1, std::string *__str, uint64_t a3)
{
  std::string::size_type v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  BOOL v5 = (__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  std::string::size_type size = __str->__r_.__value_.__l.__size_;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __str->__r_.__value_.__l.__size_;
  }
  if (v7)
  {
    std::string::size_type v9 = 0;
    do
    {
      uint64_t v10 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if (!v5) {
        uint64_t v10 = __str;
      }
      std::string::value_type v11 = v10->__r_.__value_.__s.__data_[v9];
      if ((v11 & 0xF8) == 0xF0)
      {
        uint64_t v12 = 4;
      }
      else if ((v11 & 0xF0) == 0xE0)
      {
        uint64_t v12 = 3;
      }
      else
      {
        BOOL v13 = (v11 & 0xE0) == 192;
        uint64_t v12 = 1;
        if (v13) {
          uint64_t v12 = 2;
        }
      }
      if (v5) {
        std::string::size_type v4 = size;
      }
      if (v9 + v12 > v4) {
        std::string::size_type v14 = 1;
      }
      else {
        std::string::size_type v14 = v12;
      }
      std::string::basic_string(&__p, __str, v9, v14, (std::allocator<char> *)&__v);
      unint64_t v16 = *(void *)(a3 + 8);
      unint64_t v15 = *(void *)(a3 + 16);
      if (v16 >= v15)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)a3) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(void *)a3) >> 3);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x555555555555555) {
          unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v21 = v19;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v21) {
          long long v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v21);
        }
        else {
          long long v22 = 0;
        }
        long long v23 = v22 + v18;
        __v.__first_ = v22;
        __v.__begin_ = v23;
        __v.__end_cap_.__value_ = &v22[v21];
        long long v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v23->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v23 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        uint64_t v25 = *(void *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        int v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a3 + 8) = v25;
        if (v26 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v16 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v16 = v17;
        *(void *)(a3 + 8) = v16 + 24;
      }
      v9 += v14;
      std::string::size_type v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      BOOL v5 = (__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v27 = __str->__r_.__value_.__l.__size_;
      }
    }
    while (v9 < v27);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
}

void sub_1B1FF9B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::__split_buffer<std::wstring> *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::BPE::Apply(uint64_t a1, std::string **a2, uint64_t *a3)
{
  std::vector<std::string>::__clear[abi:ne180100](a3);
  uint64_t v6 = *a2;
  std::string::size_type v7 = a2[1];
  if (*a2 == v7) {
    return 1;
  }
  do
  {
    kaldi::quasar::BPE::ApplyWord(a1, v6, &__p);
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::string::size_type v14 = 0;
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      kaldi::SplitStringToVector(&__p, " ", 1, (uint64_t)&v14);
      uint64_t v10 = v14;
      std::string::value_type v11 = v15;
      if (v14 != v15)
      {
        unint64_t v12 = a3[1];
        do
        {
          if (v12 >= a3[2])
          {
            unint64_t v12 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v10);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v10);
            v12 += 24;
          }
          a3[1] = v12;
          uint64_t v10 = (long long *)((char *)v10 + 24);
        }
        while (v10 != v11);
      }
      unint64_t v18 = &v14;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v9 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    ++v6;
  }
  while (v6 != v7);
  return (*(_DWORD *)(a1 + 184) - 3) < 2 || *a3 != a3[1];
}

void sub_1B1FF9CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19)
{
  a19 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>(kaldi::quasar::TorchEncoderDecoder *a1, long long **a2)
{
  unint64_t v12 = 0;
  BOOL v13 = 0;
  uint64_t v14 = 0;
  kaldi::quasar::TorchEncoderDecoder::Symbolize((uint64_t)a1, a2, (uint64_t)&v12, 0, 0);
  BOOL v3 = kaldi::quasar::TorchEncoderDecoder::Reverse(a1);
  std::string::size_type v4 = v12;
  BOOL v5 = v13;
  if (v3)
  {
    uint64_t v6 = v13 - 1;
    if (v12 != v13 && v6 > v12)
    {
      unint64_t v8 = (unint64_t)(v12 + 1);
      do
      {
        int v9 = *(_DWORD *)(v8 - 4);
        *(_DWORD *)(v8 - 4) = *v6;
        *v6-- = v9;
        BOOL v10 = v8 >= (unint64_t)v6;
        v8 += 4;
      }
      while (!v10);
    }
  }
  while (v4 != v5)
    --*v4++;
  memset(v11, 0, sizeof(v11));
  kaldi::JoinVectorToString<int>(&v12, " ", (uint64_t)v11);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst();
}

void sub_1B1FFA02C(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2)
{
  std::string::size_type v4 = *(void **)(v2 - 192);
  if (v4)
  {
    *(void *)(v2 - 1--*(_DWORD *)(a9 + 84) = v4;
    operator delete(v4);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~ImplToFst((void *)(v2 - 168));
  if (*(char *)(v2 - 129) < 0) {
    operator delete(*(void **)(v2 - 152));
  }
  BOOL v5 = *(void **)(v2 - 128);
  if (v5)
  {
    *(void *)(v2 - 120) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::BPE::Remove(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v38);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      unint64_t v8 = *(unsigned __int8 *)(v6 + 23);
      unint64_t v9 = *(void *)(v6 + 8);
      if ((v8 & 0x80u) == 0) {
        unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        unint64_t v10 = *(void *)(v6 + 8);
      }
      int v11 = *(char *)(a1 + 159);
      if (v11 >= 0) {
        unint64_t v12 = *(unsigned __int8 *)(a1 + 159);
      }
      else {
        unint64_t v12 = *(void *)(a1 + 144);
      }
      unint64_t v13 = v10 - v12;
      if (v10 < v12) {
        goto LABEL_35;
      }
      if ((v8 & 0x80) != 0)
      {
        if (v12 == -1 || v9 < v13) {
LABEL_64:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
        unint64_t v18 = v9 - v13;
        size_t v15 = v18 >= v12 ? v12 : v18;
        uint64_t v16 = *(void *)v6;
      }
      else
      {
        if (v12 == -1 || v8 < v13) {
          goto LABEL_64;
        }
        size_t v15 = v8 - v13 >= v12 ? v12 : v8 - v13;
        uint64_t v16 = v6;
      }
      unint64_t v19 = v11 >= 0 ? (const void *)(a1 + 136) : *(const void **)(a1 + 136);
      int v20 = memcmp((const void *)(v16 + v13), v19, v15);
      if (v15 == v12 && v20 == 0)
      {
        kaldi::quasar::BPE::StripSeparator(a1, (const std::string *)v6, (std::string *)&__v);
        if (SHIBYTE(__v.__end_) >= 0) {
          p_v = &__v;
        }
        else {
          p_v = __v.__first_;
        }
        if (SHIBYTE(__v.__end_) >= 0) {
          uint64_t end_high = HIBYTE(__v.__end_);
        }
        else {
          uint64_t end_high = (uint64_t)__v.__begin_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)p_v, end_high);
      }
      else
      {
LABEL_35:
        if ((v8 & 0x80u) == 0) {
          uint64_t v22 = v6;
        }
        else {
          uint64_t v22 = *(void *)v6;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, v22, v10);
        std::stringbuf::str();
        unint64_t v24 = *(void *)(a3 + 8);
        unint64_t v23 = *(void *)(a3 + 16);
        if (v24 >= v23)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *(void *)a3) >> 3);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *(void *)a3) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x555555555555555) {
            unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v28 = v26;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
          if (v28) {
            long long v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v28);
          }
          else {
            long long v29 = 0;
          }
          long long v32 = v29 + v25;
          __v.__first_ = v29;
          __v.__begin_ = v32;
          __v.__end_cap_.__value_ = &v29[v28];
          v32->__r_.__value_.__r.__words[2] = v37;
          *(_OWORD *)&v32->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
          std::string::size_type v37 = 0;
          *(_OWORD *)std::string __p = 0uLL;
          __v.__end_ = v32 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
          uint64_t v33 = *(void *)(a3 + 8);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          *(void *)(a3 + 8) = v33;
        }
        else
        {
          *(void *)(v24 + 16) = v37;
          *(_OWORD *)unint64_t v24 = *(_OWORD *)__p;
          *(void *)(a3 + 8) = v24 + 24;
        }
        std::string::basic_string[abi:ne180100]<0>(&__v, "");
        std::string::operator=(&v41, (const std::string *)&__v);
        std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v40);
      }
      if (SHIBYTE(__v.__end_) < 0) {
        operator delete(__v.__first_);
      }
      v6 += 24;
    }
    while (v6 != v7);
  }
  v38[0] = *MEMORY[0x1E4FBA408];
  uint64_t v34 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v38 + *(void *)(v38[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v39 = v34;
  v40[0] = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v42);
}

void sub_1B1FFA4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::length(const UChar **a1)
{
  return u_strlen(*a1);
}

uint64_t kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::charAt(void *a1, int a2)
{
  if (a2 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 1)) {
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(unsigned __int16 *)(*a1 + 2 * a2);
}

uint64_t kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::char32At(void *a1, int a2)
{
  if (a2 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 1)) {
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(unsigned __int16 *)(*a1 + 2 * a2);
}

char *kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::replace(void *a1, int a2, int a3, UChar *__src, int32_t a5)
{
  if (a2 != a3)
  {
    unint64_t v9 = (unsigned char *)a1[1];
    uint64_t v10 = *a1 + 2 * a2;
    int v11 = (unsigned char *)(*a1 + 2 * a3);
    int64_t v12 = v9 - v11;
    if (v9 != v11) {
      memmove((void *)(*a1 + 2 * a2), v11, v9 - v11);
    }
    a1[1] = v10 + v12;
  }
  if (a5 == -1) {
    a5 = u_strlen(__src);
  }
  uint64_t v13 = *a1 + 2 * a2;
  return std::vector<unsigned short>::__insert_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>((uint64_t)a1, v13, (char *)__src, (char *)&__src[a5], a5);
}

void *kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::extract(void *a1, int a2, int a3, void *__dst)
{
  return memmove(__dst, (const void *)(*a1 + 2 * a2), 2 * (a3 - a2));
}

void kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::copy(void *a1, int a2, int a3, int a4)
{
  uint64_t v6 = (const void *)(*a1 + 2 * a2);
  uint64_t v7 = a3;
  uint64_t v8 = *a1 + 2 * a3;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>(&__p, v6, v8, v7 - a2);
  std::vector<unsigned short>::__insert_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>((uint64_t)a1, *a1 + 2 * a4, (char *)__p, v10, (v10 - (unsigned char *)__p) >> 1);
  if (__p)
  {
    uint64_t v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B1FFA6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::NNMTTransliterator::StringFromUnicodeVector(const UChar **a1@<X0>, void *a2@<X8>)
{
  UErrorCode pErrorCode = U_ZERO_ERROR;
  memset(&v12, 0, sizeof(v12));
  int32_t pDestLength = 0;
  u_strToUTF8(0, 0, &pDestLength, *a1, -1, &pErrorCode);
  if (pDestLength == -1)
  {
    int end = 0;
    std::__split_buffer<std::string>::pointer begin = 0;
  }
  else
  {
    std::vector<signed char>::__append(&v12, pDestLength + 1);
    std::__split_buffer<std::string>::pointer begin = v12.__begin_;
    int end = (int)v12.__end_;
  }
  UErrorCode pErrorCode = U_ZERO_ERROR;
  uint64_t v6 = u_strToUTF8(begin, end - (int)begin, 0, *a1, -1, &pErrorCode);
  if (!v6)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Failed to create UTF-8 string: ", 31);
    uint64_t v8 = u_errorName(pErrorCode);
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  std::string::basic_string[abi:ne180100]<0>(a2, v6);
  if (v12.__begin_)
  {
    v12.__end_ = v12.__begin_;
    operator delete(v12.__begin_);
  }
}

void sub_1B1FFA810(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)(v1 - 64);
  if (v3)
  {
    *(void *)(v1 - 56) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::BPE::ApplyWord(uint64_t a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = a1 + 88;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 88), (unsigned __int8 *)a2))
  {
    memset(&v86, 0, sizeof(v86));
    int v83 = 0;
    uint64_t v84 = 0;
    unint64_t v85 = 0;
    kaldi::quasar::BPE::SplitUtfString(a1, a2, (uint64_t)&v86);
    std::vector<std::wstring>::pointer begin = v86.__begin_;
    if (v86.__end_ != v86.__begin_)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = (long long *)(a1 + 192);
      do
      {
        if (std::__tree<std::string>::__count_unique<std::string>(a1, (const void **)&begin[v9].__r_.__value_.__l.__data_))
        {
          std::vector<char> v12 = &v86.__begin_[v9];
          uint64_t v13 = v84;
          if ((unint64_t)v84 >= v85)
          {
LABEL_32:
            long long v29 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v83, (long long *)v12);
            goto LABEL_35;
          }
          if (SHIBYTE(v12->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v84, (const std::string::value_type *)v86.__begin_[v9].__r_.__value_.__l.__data_, v86.__begin_[v9].__r_.__value_.__l.__size_);
          }
          else
          {
            long long v14 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
            std::string::size_type v15 = v12->__r_.__value_.__r.__words[2];
LABEL_10:
            v13->__r_.__value_.__r.__words[2] = v15;
            *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
          }
        }
        else
        {
          switch(*(_DWORD *)(a1 + 184))
          {
            case 0:
              uint64_t v16 = &v86.__begin_[v9];
              long long v17 = v84;
              if ((unint64_t)v84 >= v85)
              {
                long long v30 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v83, (long long *)v16);
              }
              else
              {
                if (SHIBYTE(v16->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v84, (const std::string::value_type *)v86.__begin_[v9].__r_.__value_.__l.__data_, v86.__begin_[v9].__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v18 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
                  v84->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
                }
                long long v30 = (long long *)&v17[1];
              }
              uint64_t v84 = (std::string *)v30;
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a1, (const void **)&v86.__begin_[v9].__r_.__value_.__l.__data_, (uint64_t)&v86.__begin_[v9]);
              goto LABEL_36;
            case 1:
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
                unint64_t v19 = &v86.__begin_[v9];
                int v20 = SHIBYTE(v86.__begin_[v9].__r_.__value_.__r.__words[2]);
                if (v20 >= 0) {
                  unint64_t v21 = &v86.__begin_[v9];
                }
                else {
                  unint64_t v21 = (std::wstring *)v19->__r_.__value_.__r.__words[0];
                }
                if (v20 >= 0) {
                  uint64_t size = HIBYTE(v19->__r_.__value_.__r.__words[2]);
                }
                else {
                  uint64_t size = v19->__r_.__value_.__l.__size_;
                }
                unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)v21, size);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" not contained in BPE encoder ", 30);
                unint64_t v24 = (void *)std::ostream::operator<<();
                unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" mapping to ", 12);
                int v26 = *(char *)(a1 + 215);
                if (v26 >= 0) {
                  uint64_t v27 = a1 + 192;
                }
                else {
                  uint64_t v27 = *(void *)(a1 + 192);
                }
                if (v26 >= 0) {
                  uint64_t v28 = *(unsigned __int8 *)(a1 + 215);
                }
                else {
                  uint64_t v28 = *(void *)(a1 + 200);
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
              }
              uint64_t v13 = v84;
              std::vector<char> v12 = (std::wstring *)(a1 + 192);
              if ((unint64_t)v84 >= v85) {
                goto LABEL_32;
              }
              if ((*(char *)(a1 + 215) & 0x80000000) == 0)
              {
                long long v14 = *v11;
                std::string::size_type v15 = *(void *)(a1 + 208);
                goto LABEL_10;
              }
              std::string::__init_copy_ctor_external(v84, *(const std::string::value_type **)(a1 + 192), *(void *)(a1 + 200));
              break;
            case 2:
              if (*(char *)(a1 + 215) < 0)
              {
                std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(a1 + 192), *(void *)(a1 + 200));
              }
              else
              {
                *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *v11;
                a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 208);
              }
              goto LABEL_136;
            case 4:
              goto LABEL_48;
            default:
              goto LABEL_36;
          }
        }
        long long v29 = (long long *)&v13[1];
LABEL_35:
        uint64_t v84 = (std::string *)v29;
LABEL_36:
        ++v10;
        std::vector<std::wstring>::pointer begin = v86.__begin_;
        ++v9;
      }
      while (v10 != 0xAAAAAAAAAAAAAAABLL * (((char *)v86.__end_ - (char *)v86.__begin_) >> 3));
    }
    if (v83 == v84)
    {
LABEL_48:
      std::string::basic_string[abi:ne180100]<0>(a3, "");
LABEL_136:
      v78.__begin_ = (std::vector<std::wstring>::pointer)&v83;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
      v78.__begin_ = (std::vector<std::wstring>::pointer)&v86;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
      return;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v86, v83, (long long *)v84, 0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (char *)v83) >> 3));
    long long v31 = (unsigned __int16 *)(a1 + 216);
    int v32 = *(char *)(a1 + 239);
    if (v32 < 0)
    {
      if (*(void *)(a1 + 224) != 3) {
        goto LABEL_55;
      }
      long long v31 = *(unsigned __int16 **)v31;
    }
    else if (v32 != 3)
    {
      goto LABEL_55;
    }
    int v33 = *v31;
    int v34 = *((unsigned __int8 *)v31 + 2);
    if (v33 == 11824 && v34 == 50)
    {
      int v40 = *(char *)(a1 + 183);
      if (v40 >= 0) {
        std::string v41 = (const std::string::value_type *)(a1 + 160);
      }
      else {
        std::string v41 = *(const std::string::value_type **)(a1 + 160);
      }
      if (v40 >= 0) {
        std::string::size_type v42 = *(unsigned __int8 *)(a1 + 183);
      }
      else {
        std::string::size_type v42 = *(void *)(a1 + 168);
      }
      std::string::append((std::string *)&v86.__end_[-1], v41, v42);
      memset(&v78, 0, sizeof(v78));
      while (1)
      {
        kaldi::quasar::BPE::GetPairs(a1, &v86, &v78);
        unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v78.__end_ - (char *)v78.__begin_) >> 3);
        if ((std::vector<std::wstring>::pointer)((char *)v86.__end_ - (char *)v86.__begin_) == (std::vector<std::wstring>::pointer)24
          || 0xAAAAAAAAAAAAAAABLL * (((char *)v86.__end_ - (char *)v86.__begin_) >> 3) == v43)
        {
          break;
        }
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v86, (std::string *)v78.__begin_, (long long *)v78.__end_, v43);
      }
      v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
      goto LABEL_105;
    }
LABEL_55:
    uint64_t v36 = (long long *)(a1 + 160);
    std::vector<std::wstring>::pointer end = v86.__end_;
    if (v86.__end_ >= v86.__end_cap_.__value_)
    {
      uint64_t v39 = (std::wstring *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v86, (long long *)(a1 + 160));
    }
    else
    {
      if (*(char *)(a1 + 183) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v86.__end_, *(const std::string::value_type **)(a1 + 160), *(void *)(a1 + 168));
      }
      else
      {
        long long v38 = *v36;
        v86.__end_->__r_.__value_.__r.__words[2] = *(void *)(a1 + 176);
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v38;
      }
      uint64_t v39 = end + 1;
    }
    v86.__end_ = v39;
    memset(&v78, 0, sizeof(v78));
    while (1)
    {
      kaldi::quasar::BPE::GetPairs(a1, &v86, &v78);
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)v78.__end_ - (char *)v78.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v86.__end_ - (char *)v86.__begin_) >> 3) == v45) {
        break;
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v86, (std::string *)v78.__begin_, (long long *)v78.__end_, v45);
    }
    v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    std::vector<std::wstring>::pointer v46 = v86.__end_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v86.__end_ - (char *)v86.__begin_) >> 3) <= 1) {
      goto LABEL_105;
    }
    uint64_t v47 = HIBYTE(v86.__end_[-1].__r_.__value_.__r.__words[2]);
    std::wstring::size_type v48 = (v47 & 0x80u) == 0
        ? HIBYTE(v86.__end_[-1].__r_.__value_.__r.__words[2])
        : v86.__end_[-1].__r_.__value_.__l.__size_;
    std::string::size_type v49 = *(unsigned __int8 *)(a1 + 183);
    char v50 = v49;
    std::string::size_type v51 = *(void *)(a1 + 168);
    uint64_t v52 = (v49 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 183) : *(void *)(a1 + 168);
    if (v48 != v52) {
      goto LABEL_105;
    }
    std::vector<std::wstring>::pointer v53 = v86.__end_ - 1;
    int v54 = *(const std::string::value_type **)v36;
    if ((v49 & 0x80u) == 0) {
      int v55 = (const std::string::value_type *)(a1 + 160);
    }
    else {
      int v55 = *(const std::string::value_type **)v36;
    }
    if ((v47 & 0x80) != 0)
    {
      if (memcmp(v53->__r_.__value_.__l.__data_, v55, v86.__end_[-1].__r_.__value_.__l.__size_))
      {
LABEL_105:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v78);
        unint64_t v59 = (unint64_t)v86.__begin_;
        if (v86.__end_ != v86.__begin_)
        {
          uint64_t v60 = 0;
          unint64_t v61 = 0;
          unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * (((char *)v86.__end_ - (char *)v86.__begin_) >> 3);
          do
          {
            if (v62 <= ++v61)
            {
              float v71 = (const std::string *)(v59 + v60);
              LODWORD(v59) = *(char *)(v59 + v60 + 23);
              if ((v59 & 0x80000000) != 0) {
                unint64_t v59 = v71->__r_.__value_.__l.__size_;
              }
              else {
                unint64_t v59 = v59;
              }
              std::string::basic_string(&v77, v71, 0, v59 - 4, (std::allocator<char> *)v87);
              if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v72 = &v77;
              }
              else {
                uint64_t v72 = (std::string *)v77.__r_.__value_.__r.__words[0];
              }
              if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v73 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v73 = v77.__r_.__value_.__l.__size_;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78.__end_cap_.__value_, (uint64_t)v72, v73);
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v77.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              uint64_t v63 = (std::wstring *)(v59 + v60);
              int v64 = SHIBYTE(v63->__r_.__value_.__r.__words[2]);
              if (v64 >= 0) {
                uint64_t v65 = (uint64_t)v63;
              }
              else {
                uint64_t v65 = v63->__r_.__value_.__r.__words[0];
              }
              if (v64 >= 0) {
                uint64_t v66 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
              }
              else {
                uint64_t v66 = v63->__r_.__value_.__l.__size_;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78.__end_cap_.__value_, v65, v66);
              int v67 = *(char *)(a1 + 159);
              if (v67 >= 0) {
                uint64_t v68 = a1 + 136;
              }
              else {
                uint64_t v68 = *(void *)(a1 + 136);
              }
              if (v67 >= 0) {
                uint64_t v69 = *(unsigned __int8 *)(a1 + 159);
              }
              else {
                uint64_t v69 = *(void *)(a1 + 144);
              }
              int v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78.__end_cap_.__value_, v68, v69);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)" ", 1);
            }
            unint64_t v59 = (unint64_t)v86.__begin_;
            unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * (((char *)v86.__end_ - (char *)v86.__begin_) >> 3);
            v60 += 24;
          }
          while (v62 > v61);
        }
        std::stringbuf::str();
        v77.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        char v74 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (long long **)&v77);
        std::string::operator=((std::string *)(v74 + 40), a3);
        v78.__begin_ = (std::vector<std::wstring>::pointer)*MEMORY[0x1E4FBA408];
        int v75 = *(std::wstring **)(MEMORY[0x1E4FBA408] + 72);
        *(std::vector<std::wstring>::pointer *)((char *)&v78.__begin_ + v78.__begin_[-1].__r_.__value_.__r.__words[0]) = *(std::vector<std::wstring>::pointer *)(MEMORY[0x1E4FBA408] + 64);
        v78.__end_cap_.__value_ = v75;
        uint64_t v79 = MEMORY[0x1E4FBA470] + 16;
        if (v81 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1B3EA8520](&v82);
        goto LABEL_136;
      }
      operator delete(v53->__r_.__value_.__l.__data_);
      std::string::size_type v49 = *(unsigned __int8 *)(a1 + 183);
      int v54 = *(const std::string::value_type **)(a1 + 160);
      std::string::size_type v51 = *(void *)(a1 + 168);
      char v50 = *(unsigned char *)(a1 + 183);
    }
    else if (*((unsigned char *)&v86.__end_[-1].__r_.__value_.__s + 23))
    {
      std::vector<std::wstring>::pointer v56 = v86.__end_ - 1;
      while (LOBYTE(v56->__r_.__value_.__l.__data_) == *(unsigned __int8 *)v55)
      {
        std::vector<std::wstring>::pointer v56 = (std::vector<std::wstring>::pointer)((char *)v56 + 1);
        ++v55;
        if (!--v47) {
          goto LABEL_98;
        }
      }
      goto LABEL_105;
    }
LABEL_98:
    v86.__end_ = v46 - 1;
    if (v50 >= 0) {
      int v57 = (const std::string::value_type *)(a1 + 160);
    }
    else {
      int v57 = v54;
    }
    if (v50 >= 0) {
      std::string::size_type v58 = v49;
    }
    else {
      std::string::size_type v58 = v51;
    }
    std::string::append((std::string *)&v46[-2], v57, v58);
    goto LABEL_105;
  }
  v78.__begin_ = (std::vector<std::wstring>::pointer)a2;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (long long **)&v78);
  if ((char)v6[63] < 0)
  {
    std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)v6 + 5), *((void *)v6 + 6));
  }
  else
  {
    long long v7 = *(_OWORD *)(v6 + 40);
    a3->__r_.__value_.__r.__words[2] = *((void *)v6 + 7);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1B1FFB074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)(v14 - 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  a14 = (void **)(v14 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BPE::GetPairs(uint64_t a1, std::vector<std::wstring> *a2, std::vector<std::wstring> *this)
{
  std::vector<std::wstring>::pointer begin = a2->__begin_;
  std::vector<std::wstring>::pointer end = (long long *)a2->__end_;
  uint64_t v8 = (char *)end - (char *)begin;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
  if (v9 < 2) {
    return;
  }
  if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v55, (const std::string::value_type *)begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
    std::vector<std::wstring>::pointer begin = a2->__begin_;
    std::vector<std::wstring>::pointer end = (long long *)a2->__end_;
    uint64_t v8 = (char *)end - (char *)a2->__begin_;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  }
  else
  {
    long long v11 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v11;
  }
  if (v8 == 24)
  {
    char v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    char v12 = 0;
    std::string __p = 0;
    float v15 = *(float *)(a1 + 128);
    int v16 = -1;
    uint64_t v17 = 1;
    do
    {
      long long v18 = &begin[v17];
      if (SHIBYTE(begin[v17].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v54, (const std::string::value_type *)v18->__r_.__value_.__l.__data_, v18->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v19;
      }
      float Cost = kaldi::quasar::BPE::GetCost(a1, (const void **)&v55.__r_.__value_.__l.__data_, (const void **)&v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      if (Cost < v15 && Cost != *(float *)(a1 + 128))
      {
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v55.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v56, size + 1);
        if (SHIBYTE(v56.__end_) >= 0) {
          first = (char *)&v56;
        }
        else {
          first = (char *)v56.__first_;
        }
        if (size)
        {
          if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v23 = &v55;
          }
          else {
            unint64_t v23 = (std::string *)v55.__r_.__value_.__r.__words[0];
          }
          memmove(first, v23, size);
        }
        *(_WORD *)&first[size] = 32;
        unint64_t v24 = &a2->__begin_[v17];
        int v25 = SHIBYTE(v24->__r_.__value_.__r.__words[2]);
        if (v25 >= 0) {
          int v26 = (const std::string::value_type *)&a2->__begin_[v17];
        }
        else {
          int v26 = (const std::string::value_type *)v24->__r_.__value_.__r.__words[0];
        }
        if (v25 >= 0) {
          std::string::size_type v27 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v27 = v24->__r_.__value_.__l.__size_;
        }
        uint64_t v28 = std::string::append((std::string *)&v56, v26, v27);
        long long v29 = (void *)v28->__r_.__value_.__r.__words[0];
        char v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
        v28->__r_.__value_.__r.__words[0] = 0;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        if (v12 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v56.__end_) < 0) {
          operator delete(v56.__first_);
        }
        std::string __p = v29;
        char v12 = v30;
        int v16 = v14;
        float v15 = Cost;
      }
      std::string::operator=(&v55, (const std::string *)&a2->__begin_[v17]);
      std::vector<std::wstring>::pointer begin = a2->__begin_;
      std::vector<std::wstring>::pointer end = (long long *)a2->__end_;
      uint64_t v31 = v14 + 1;
      ++v17;
      uint64_t v32 = v14 + 2;
      ++v14;
    }
    while (v32 != 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a2->__begin_) >> 3));
    if (v16 != -1)
    {
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
      std::vector<std::wstring>::pointer v33 = a2->__begin_;
      if (a2->__end_ != a2->__begin_)
      {
        uint64_t v34 = 0;
        int v35 = 0;
        do
        {
          if (v35 == v16)
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v33[v34].__r_.__value_.__l.__data_, (const void **)&v33[v16 + 1].__r_.__value_.__l.__data_, (uint64_t)v52);
            std::vector<std::wstring>::pointer v37 = this->__end_;
            value = this->__end_cap_.__value_;
            if (v37 >= value)
            {
              unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)this->__begin_) >> 3);
              unint64_t v43 = v42 + 1;
              if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
              if (2 * v44 > v43) {
                unint64_t v43 = 2 * v44;
              }
              if (v44 >= 0x555555555555555) {
                unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v45 = v43;
              }
              v56.__end_cap_.__value_ = (std::allocator<std::wstring> *)&this->__end_cap_;
              if (v45) {
                std::vector<std::wstring>::pointer v46 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&this->__end_cap_, v45);
              }
              else {
                std::vector<std::wstring>::pointer v46 = 0;
              }
              uint64_t v47 = v46 + v42;
              v56.__first_ = v46;
              v56.__begin_ = v47;
              v56.__end_cap_.__value_ = &v46[v45];
              long long v48 = *(_OWORD *)v52;
              v47->__r_.__value_.__r.__words[2] = v53;
              *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v48;
              v52[1] = 0;
              std::wstring::size_type v53 = 0;
              v52[0] = 0;
              v56.__end_ = v47 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)this, (std::__split_buffer<std::string> *)&v56);
              std::string::size_type v49 = this->__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v56);
              int v50 = SHIBYTE(v53);
              this->__end_ = v49;
              if (v50 < 0) {
                operator delete(v52[0]);
              }
            }
            else
            {
              long long v38 = *(_OWORD *)v52;
              v37->__r_.__value_.__r.__words[2] = v53;
              *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
              this->__end_ = v37 + 1;
            }
            int v35 = v16 + 1;
          }
          else
          {
            uint64_t v39 = (long long *)&v33[v34];
            int v40 = this->__end_;
            if (v40 >= this->__end_cap_.__value_)
            {
              std::string v41 = (std::wstring *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this, v39);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)this, v39);
              std::string v41 = v40 + 1;
            }
            this->__end_ = v41;
          }
          uint64_t v34 = ++v35;
          std::vector<std::wstring>::pointer v33 = a2->__begin_;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)a2->__end_ - (char *)a2->__begin_) >> 3) > v35);
      }
      uint64_t v13 = __p;
      goto LABEL_65;
    }
    unint64_t v9 = v31 + 1;
    uint64_t v13 = __p;
  }
  if (this != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, (std::string *)begin, end, v9);
  }
LABEL_65:
  if (v12 < 0) {
    operator delete(v13);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
}

void sub_1B1FFB59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,std::__split_buffer<std::wstring> *a32)
{
  if (v33 < 0) {
    operator delete(v32);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

float kaldi::quasar::BPE::GetCost(uint64_t a1, const void **a2, const void **a3)
{
  std::string::size_type v4 = (void *)(a1 + 24);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a3, (uint64_t)__p);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = (unsigned __int8 *)(a1 + 128);
  if (v5) {
    uint64_t v6 = v5 + 40;
  }
  return *(float *)v6;
}

void sub_1B1FFB69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>(kaldi::quasar::TorchEncoderDecoder *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  long long v25 = 0u;
  long long v24 = 0u;
  int32x2_t v23 = (int32x2_t)&unk_1F0A51768;
  char v26 = 0;
  kaldi::CuMatrix<float>::Resize(&v23, (unint64_t)(a2[1] - *a2) >> 2, 1, 0, 0);
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  uint64_t v16 = v15 - *a2;
  if (v15 != *a2)
  {
    uint64_t v17 = 0;
    unint64_t v18 = v16 >> 2;
    long long v19 = (float *)v24;
    if (v18 <= 1) {
      unint64_t v18 = 1;
    }
    uint64_t v20 = 4 * (int)v25;
    do
    {
      *long long v19 = (float)*(int *)(v14 + 4 * v17++);
      long long v19 = (float *)((char *)v19 + v20);
    }
    while (v18 != v17);
  }
  float v21 = kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>(a1, (uint64_t)&v23, a3, a4, a5, a6, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v23);
  return v21;
}

void sub_1B1FFB7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst()
{
}

void sub_1B1FFB854(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
  *a3 = *(void *)v3;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3 + 1, *(const void **)(v3 + 8), *(void *)(v3 + 16), (uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 2);
}

unint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56)
                  - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48)) >> 4);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 32);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    long long v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::Fst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Copy()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  unint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 48);
  uint64_t v4 = *v5;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 4);
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_1B1FFBBD0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  unint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *a3;
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal(v6, a2, (uint64_t)&v7);
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_1B1FFBCFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  return fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  unint64_t v5 = *(void **)(v4[8] + 8 * a2);
  v5[4] = 0;
  v5[5] = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v5 + 6);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v4, a2);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48);
  return std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::reserve(v6, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(v4, a2);
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::InitMutableArcIterator()
{
}

void sub_1B1FFC28C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FDF8;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A528;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1B1FFC38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = &unk_1F0A3D328;
  uint64_t v2 = (void *)a1[9];
  if (v2 != (void *)a1[8])
  {
    unint64_t v3 = 0;
    uint64_t v2 = (void *)a1[8];
    do
    {
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(v2[v3++]);
      uint64_t v2 = (void *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::~FstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FDF8;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1FFC6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1FFC79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1B1FFC8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_1B1FFC96C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FDF8;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = &unk_1F0A3A528;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v21 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v19);
  while (1)
  {
    if (!v19)
    {
      if ((int)v21 >= v20) {
        goto LABEL_33;
      }
LABEL_11:
      uint64_t v9 = v21;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 16))(v19)) {
      break;
    }
    if (!v19) {
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v19 + 24))();
LABEL_12:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState((void *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v16, a2, v9);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal(a1, v9, &v16);
    if (v17)
    {
      unint64_t v18 = v17;
      operator delete(v17);
    }
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::reserve((uint64_t *)(*(void *)(*v5 + 8 * (int)v9) + 48), v10);
    std::string::size_type v15 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v15 >= __p.__r_.__value_.__r.__words[2]) {
          goto LABEL_26;
        }
LABEL_20:
        long long v11 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 48 * v15);
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_20;
      }
      long long v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_21:
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__p.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v15;
      }
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_28;
    }
LABEL_26:
    if (v14) {
      --*v14;
    }
LABEL_28:
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 32))(v19);
    }
    else {
      ++v21;
    }
  }
  if (v19) {
    (*(void (**)(void))(*(void *)v19 + 8))();
  }
LABEL_33:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1B1FFCE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~VectorFstBaseImpl(v21);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 160);
    return v2(a1);
  }
  int v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v5);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v5)
    {
      if (v7 >= v6) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_12:
      ++v7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v5) {
      goto LABEL_12;
    }
    (*(void (**)(void))(*(void *)v5 + 32))();
  }
  if (v5) {
    (*(void (**)(void))(*(void *)v5 + 8))();
  }
  return v4;
}

{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_1B1FFD0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::CountStates<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a10);
  }
  _Unwind_Resume(exception_object);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8 * a2);
  uint64_t v4 = *a3;
  int v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  *(void *)uint64_t v3 = v4;
  if ((uint64_t *)v3 != &v4) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 + 8), (char *)__p, (uint64_t)v6, (v6 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
}

void sub_1B1FFD184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 48 * v6;
    std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B1FFD240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  char v17 = 0;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = a3;
    do
    {
      uint64_t v11 = *(void *)(v10 - 48);
      v10 -= 48;
      *(void *)(v7 - 48) = v11;
      uint64_t v12 = *(void *)(v10 + 8);
      *(void *)(v7 - 32) = 0;
      uint64_t v13 = v7 - 32;
      *(void *)(v7 - 40) = v12;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(v7 - 32), *(const void **)(v10 + 16), *(void *)(v10 + 24), (uint64_t)(*(void *)(v10 + 24) - *(void *)(v10 + 16)) >> 2);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      uint64_t v7 = *((void *)&v19 + 1) - 48;
      *((void *)&v19 + 1) -= 48;
      uint64_t v9 = v10;
    }
    while (v10 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

void sub_1B1FFD3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[4];
  }
  if (!a2[1]) {
    ++a1[5];
  }
  uint64_t v3 = a1 + 6;
  unint64_t v4 = a1[7];
  if (v4 >= a1[8])
  {
    uint64_t result = std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int> const&>((uint64_t)v3, (uint64_t)a2);
    uint64_t result = v4 + 48;
  }
  a1[7] = result;
  return result;
}

void *std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  *(void *)(v4 + 8) = *(void *)(a2 + 8);
  *(void *)(v4 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 16) = 0;
  uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(v4 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1B1FFD4C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[12 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  char v17 = (char *)&v10[12 * v9];
  void *v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  v11[2] = 0;
  v11 += 2;
  *(v11 - 1) = v12;
  v11[1] = 0;
  v11[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  v10[12 * v4 + 10] = *(_DWORD *)(a2 + 40);
  v16 += 6;
  std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B1FFD5F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      unint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      unint64_t v9 = (void *)fst::cerr(v8);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a1, a2, a3, 1);
  }
}

void sub_1B1FFD740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7 = a1;
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v9 = v8;
  if (!a4
    || (uint64_t v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    unint64_t v9 = v8 & 7;
    unint64_t v78 = v9;
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      char v74 = 0;
      int v75 = &v78;
      fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(v7, (uint64_t)&v72);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      uint64_t v12 = a2 & 0xC0000;
      uint64_t v13 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0) {
        uint64_t v13 = 0x10425A850000;
      }
      unint64_t v14 = v9 | v13;
      uint64_t v15 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0) {
        v14 |= 0x100000uLL;
      }
      unint64_t v78 = v14;
      memset(&v71, 0, sizeof(v71));
      memset(&v70, 0, sizeof(v70));
      unsigned int v69 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 128))(v7, &v67);
      int v16 = 0;
      uint64_t v61 = v7;
LABEL_12:
      if (v67)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v67 + 16))(v67))
        {
          if (v67)
          {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v67 + 24))();
LABEL_18:
            std::vector<unsigned int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v17);
            char v74 = 0;
            int v75 = 0;
            uint64_t v76 = 0;
            v71.__end_ = v71.__begin_;
            v70.__end_ = v70.__begin_;
            if (v12) {
              std::vector<int>::reserve(&v71, v18);
            }
            if (v15) {
              std::vector<int>::reserve(&v70, v18);
            }
            unint64_t v66 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v7 + 136))(v7, v17, &v62);
            char v19 = 1;
            while (1)
            {
              if (v62)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v62 + 24))(v62))
                {
                  if (v62)
                  {
                    (*(void (**)(void))(*(void *)v62 + 8))();
                  }
                  else
                  {
LABEL_94:
                    if (v65) {
                      --*v65;
                    }
                  }
                  uint64_t v7 = v61;
                  if (v12
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v71.__end_ - (char *)v71.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    unint64_t v47 = v71.__end_ - v71.__begin_;
                    if (v47 <= 2) {
                      unint64_t v47 = 2;
                    }
                    std::vector<unsigned int>::pointer v48 = v71.__begin_ + 1;
                    unsigned int v49 = *v71.__begin_;
                    unint64_t v50 = v47 - 1;
                    while (1)
                    {
                      unsigned int v52 = *v48++;
                      unsigned int v51 = v52;
                      if (v52 == v49) {
                        break;
                      }
                      unsigned int v49 = v51;
                      if (!--v50) {
                        goto LABEL_103;
                      }
                    }
                    unint64_t v78 = v78 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v15)
                    {
LABEL_114:
                      if (v16 >= 1) {
                        unint64_t v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v61 + 32))(&v62, v61, v17);
                      float v81 = *((float *)&v62 + 1);
                      float v82 = *(float *)&v62;
                      int v80 = 2139095040;
                      float v79 = INFINITY;
                      if (*(float *)&v62 == INFINITY && v81 == v79)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v61 + 40))(v61, v17) != 1) {
                          unint64_t v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                        }
                      }
                      else
                      {
                        float v81 = *((float *)&v62 + 1);
                        float v82 = *(float *)&v62;
                        int v80 = 0;
                        float v79 = 0.0;
                        v59.n128_u32[0] = v62;
                        if (*(float *)&v62 != 0.0 || (v59.n128_f32[0] = v81, v81 != v79)) {
                          unint64_t v78 = v78 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        }
                        ++v16;
                      }
                      if (__p)
                      {
                        int v64 = __p;
                        operator delete(__p);
                      }
                      if (v74)
                      {
                        int v75 = (unint64_t *)v74;
                        operator delete(v74);
                      }
                      if (v67) {
                        (*(void (**)(uint64_t, __n128))(*(void *)v67 + 32))(v67, v59);
                      }
                      else {
                        ++v69;
                      }
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_103:
                    if (!v15) {
                      goto LABEL_114;
                    }
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v70.__end_ - (char *)v70.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    unint64_t v53 = v70.__end_ - v70.__begin_;
                    if (v53 <= 2) {
                      unint64_t v53 = 2;
                    }
                    std::vector<unsigned int>::pointer v54 = v70.__begin_ + 1;
                    unsigned int v55 = *v70.__begin_;
                    unint64_t v56 = v53 - 1;
                    while (1)
                    {
                      unsigned int v58 = *v54++;
                      unsigned int v57 = v58;
                      if (v58 == v55) {
                        break;
                      }
                      unsigned int v55 = v57;
                      if (!--v56) {
                        goto LABEL_114;
                      }
                    }
                    unint64_t v78 = v78 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_114;
                }
                if (v62)
                {
                  int v20 = (char *)(*(uint64_t (**)(void))(*(void *)v62 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v66 >= (unint64_t)v64)
              {
                goto LABEL_94;
              }
              int v20 = (char *)__p + 48 * v66;
LABEL_29:
              int v21 = *(_DWORD *)v20;
              int v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *((_DWORD *)v20 + 1))
              {
                unint64_t v78 = v78 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                int v22 = *((_DWORD *)v20 + 1);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (v22) {
                    goto LABEL_35;
                  }
                  goto LABEL_39;
                }
                unint64_t v23 = v78;
              }
              else
              {
                unint64_t v23 = v78 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              unint64_t v78 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (v22)
              {
LABEL_35:
                if (v19) {
                  goto LABEL_44;
                }
                goto LABEL_40;
              }
LABEL_39:
              unint64_t v78 = v78 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
              if (v19) {
                goto LABEL_44;
              }
LABEL_40:
              if (v21 < (int)v72) {
                unint64_t v78 = v78 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              }
              if (v22 < SHIDWORD(v72)) {
                unint64_t v78 = v78 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
              }
LABEL_44:
              float v25 = *((float *)v20 + 2);
              float v24 = *((float *)v20 + 3);
              float v82 = v25;
              float v81 = v24;
              int v80 = 0;
              float v79 = 0.0;
              if (v25 != 0.0 || v81 != v79)
              {
                float v82 = v25;
                float v81 = v24;
                int v80 = 2139095040;
                float v79 = INFINITY;
                if (v25 != INFINITY || v81 != v79) {
                  unint64_t v78 = v78 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                }
              }
              int v26 = *((_DWORD *)v20 + 10);
              if (v26 <= (int)v17) {
                unint64_t v78 = v78 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              }
              if (v26 != v17 + 1) {
                unint64_t v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              uint64_t v72 = *(void *)v20;
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v73, (uint64_t)(v20 + 8));
              int v77 = *((_DWORD *)v20 + 10);
              if (v12)
              {
                std::vector<unsigned int>::pointer end = v71.__end_;
                if (v71.__end_ >= v71.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer begin = v71.__begin_;
                  int64_t v30 = v71.__end_ - v71.__begin_;
                  unint64_t v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 62) {
                    goto LABEL_143;
                  }
                  int64_t v32 = (char *)v71.__end_cap_.__value_ - (char *)v71.__begin_;
                  if (((char *)v71.__end_cap_.__value_ - (char *)v71.__begin_) >> 1 > v31) {
                    unint64_t v31 = v32 >> 1;
                  }
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v33 = v31;
                  }
                  if (v33)
                  {
                    uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v71.__end_cap_, v33);
                    std::vector<unsigned int>::pointer begin = v71.__begin_;
                    std::vector<unsigned int>::pointer end = v71.__end_;
                  }
                  else
                  {
                    uint64_t v34 = 0;
                  }
                  int v35 = (unsigned int *)&v34[4 * v30];
                  *int v35 = *(_DWORD *)v20;
                  uint64_t v28 = v35 + 1;
                  while (end != begin)
                  {
                    unsigned int v36 = *--end;
                    *--int v35 = v36;
                  }
                  v71.__begin_ = v35;
                  v71.__end_ = v28;
                  v71.__end_cap_.__value_ = (unsigned int *)&v34[4 * v33];
                  if (begin) {
                    operator delete(begin);
                  }
                }
                else
                {
                  *v71.__end_ = *(_DWORD *)v20;
                  uint64_t v28 = end + 1;
                }
                v71.__end_ = v28;
              }
              if (v15)
              {
                std::vector<unsigned int>::pointer v37 = v70.__end_;
                if (v70.__end_ >= v70.__end_cap_.__value_)
                {
                  std::vector<unsigned int>::pointer v39 = v70.__begin_;
                  int64_t v40 = v70.__end_ - v70.__begin_;
                  unint64_t v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 62) {
LABEL_143:
                  }
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  int64_t v42 = (char *)v70.__end_cap_.__value_ - (char *)v70.__begin_;
                  if (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 1 > v41) {
                    unint64_t v41 = v42 >> 1;
                  }
                  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v43 = v41;
                  }
                  if (v43)
                  {
                    unint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v70.__end_cap_, v43);
                    std::vector<unsigned int>::pointer v39 = v70.__begin_;
                    std::vector<unsigned int>::pointer v37 = v70.__end_;
                  }
                  else
                  {
                    unint64_t v44 = 0;
                  }
                  unint64_t v45 = (unsigned int *)&v44[4 * v40];
                  *unint64_t v45 = *((_DWORD *)v20 + 1);
                  long long v38 = v45 + 1;
                  while (v37 != v39)
                  {
                    unsigned int v46 = *--v37;
                    *--unint64_t v45 = v46;
                  }
                  v70.__begin_ = v45;
                  v70.__end_ = v38;
                  v70.__end_cap_.__value_ = (unsigned int *)&v44[4 * v43];
                  if (v39) {
                    operator delete(v39);
                  }
                }
                else
                {
                  *v70.__end_ = *((_DWORD *)v20 + 1);
                  long long v38 = v37 + 1;
                }
                v70.__end_ = v38;
              }
              if (v62)
              {
                (*(void (**)(uint64_t))(*(void *)v62 + 40))(v62);
                char v19 = 0;
              }
              else
              {
                char v19 = 0;
                ++v66;
              }
            }
          }
LABEL_17:
          uint64_t v17 = v69;
          goto LABEL_18;
        }
        if (v67) {
          (*(void (**)(void))(*(void *)v67 + 8))();
        }
      }
      else if ((int)v69 < v68)
      {
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7) != -1
        && (*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7))
      {
        unint64_t v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v70.__begin_)
      {
        v70.__end_ = v70.__begin_;
        operator delete(v70.__begin_);
      }
      if (v71.__begin_)
      {
        v71.__end_ = v71.__begin_;
        operator delete(v71.__begin_);
      }
      unint64_t v9 = v78;
    }
    uint64_t v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1B1FFE1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t a2)
{
}

void sub_1B1FFEB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::InitVisit(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    *(void *)(*(void *)a1 + 8) = **(void **)a1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 52) = 0;
    **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a1 + 32) = a2;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = v5;
    operator new();
  }
  operator new();
}

void fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::FinishState(uint64_t a1, int a2, int a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v22);
  float v27 = *((float *)&v22 + 1);
  int v28 = v22;
  int v26 = 2139095040;
  float v25 = INFINITY;
  BOOL v6 = *(float *)&v22 != INFINITY || v27 != v25;
  if (__p)
  {
    float v24 = __p;
    operator delete(__p);
  }
  if (v6) {
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * a2) != *(_DWORD *)(v7 + 4 * a2)) {
    goto LABEL_21;
  }
  char v8 = 0;
  uint64_t v9 = *(void **)(a1 + 80);
  uint64_t v10 = v9[1];
  uint64_t v11 = **(void **)(a1 + 16);
  uint64_t v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    unint64_t v13 = *v12--;
    v8 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while (v13 != a2);
  uint64_t v14 = *(void **)a1;
  uint64_t v15 = **(void **)(a1 + 72);
  for (uint64_t i = (int *)(v10 - 4); ; --i)
  {
    unint64_t v17 = *i;
    if (v14) {
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    }
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = 1 << v17;
    if ((v8 & 1) == 0) {
      break;
    }
    *(void *)(v11 + 8 * v18) |= v19;
    *(void *)(v15 + 8 * v18) &= ~v19;
    if (v17 == a2)
    {
      v9[1] = i;
      goto LABEL_20;
    }
LABEL_18:
    ;
  }
  *(void *)(v15 + 8 * v18) &= ~v19;
  if (v17 != a2) {
    goto LABEL_18;
  }
  v9[1] = i;
  **(void **)(a1 + ++*(_DWORD *)(result + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_20:
  ++*(_DWORD *)(a1 + 48);
LABEL_21:
  if (a3 != -1)
  {
    uint64_t v20 = **(void **)(a1 + 16);
    if ((*(void *)(v20 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2)) {
      *(void *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v21 = *(_DWORD *)(v7 + 4 * a2);
    if (v21 < *(_DWORD *)(v7 + 4 * a3)) {
      *(_DWORD *)(v7 + 4 * a3) = v21;
    }
  }
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36EA0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36EA0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36EA0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B1FFF008(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37E58;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B1FFF120(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37E58;
  uint64_t v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      std::vector<unsigned int>::pointer v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      std::vector<unsigned int>::pointer v37 = &v34[8 * v47];
      std::vector<unsigned int>::pointer v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unsigned int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unsigned int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  long long v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1FFF568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    uint64_t v10 = v26 + 48 * v27;
    *(void *)(a1 + 16) = v26;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v10;
    if (*(void *)a1)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3);
  uint64_t v12 = a5;
  if (!a4) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v11 + v12;
  if (*(void *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(void *)a1) {
      free(*(void **)a1);
    }
    uint64_t v24 = 0x4000;
    if (v13 > 0x4000) {
      uint64_t v24 = v13;
    }
    *(void *)(a1 + 8) = v24;
    uint64_t v15 = malloc_type_malloc(48 * v24, 0x108004053AFDD15uLL);
    *(void *)a1 = v15;
    *(void *)(a1 + 16) = v15;
    BOOL v14 = v15;
  }
  else
  {
    BOOL v14 = *(void **)(a1 + 16);
    uint64_t v15 = *(void **)a1;
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = &v14[6 * v13];
  uint64_t v16 = v25;
  uint64_t v17 = v26;
  unint64_t v19 = v27;
  uint64_t v18 = v28;
  if (v28) {
    ++*v28;
  }
  unint64_t v20 = 0;
LABEL_13:
  v15 += 6;
  while (v16)
  {
    int v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    uint64_t v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(v15 - 6) = *(void *)v23;
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v15 - 5), v23 + 8);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 40);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 6;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  uint64_t v23 = v17 + 48 * v20;
  if (v20 < v19) {
    goto LABEL_18;
  }
  if (v18) {
    --*v18;
  }
}

void sub_1B1FFF844(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v38 = 0u;
  long long v37 = 0u;
  *(_OWORD *)uint64_t v36 = 0u;
  *(_OWORD *)int v35 = 0u;
  uint64_t v6 = -1;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = -1;
  uint64_t v39 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v40 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v40 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  unint64_t v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v44;
    if (v44 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v9, (uint64_t)v34);
  uint64_t v31 = v9;
  uint64_t v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v10 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    int v33 = v7;
    uint64_t v12 = 0;
    uint64_t v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*a1 + 32))(__p, a1, v12);
      int data = (int)__p[0].__r_.__value_.__l.__data_;
      std::ostream::write();
      int data = HIDWORD(__p[0].__r_.__value_.__r.__words[0]);
      std::ostream::write();
      if (__p[0].__r_.__value_.__l.__size_)
      {
        __p[0].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__l.__size_;
        operator delete((void *)__p[0].__r_.__value_.__l.__size_);
      }
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      uint64_t v14 = *(void *)(*(void *)(a1[1] + 64) + 8 * v12);
      uint64_t v16 = *(void *)(v14 + 48);
      uint64_t v15 = *(void *)(v14 + 56);
      if (v15 == v16) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *(_DWORD **)(v14 + 48);
      }
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 48) <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = (v15 - v16) / 48;
        }
        unint64_t v19 = v17;
        do
        {
          int v20 = *v19;
          v19 += 12;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::LatticeWeightTpl<float>::Write((uint64_t)(v17 + 2), (uint64_t)a2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[10];
          std::ostream::write();
          uint64_t v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
    int v7 = v33;
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    int v21 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    uint64_t v22 = (void *)fst::cerr(v21);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v24 = *(char *)(a3 + 23);
    if (v24 >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_32:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&data);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_35;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      uint64_t updated = 1;
      goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    long long v29 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    long long v30 = (void *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_32;
  }
  uint64_t v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_35:
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[1]);
  }
  if (SHIBYTE(v36[0]) < 0) {
    operator delete(v35[0]);
  }
  return updated;
}

void sub_1B1FFFD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a13);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    uint64_t v13 = (const std::string *)fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result && a3[26])
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1B3EA7E70](v32);
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long __p = 0u;
    long long v35 = 0u;
    uint64_t v42 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v33);
    if (v33[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x1B3EA7E80](v32);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    BOOL v19 = (void *)fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      int v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      uint64_t v25 = (void *)fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      MEMORY[0x1B3EA7E70](v33, a2);
      unint64_t v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v42 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      MEMORY[0x1B3EA7E80](v33);
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      long long v29 = (void *)fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_1B20003C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>::Type()
{
  {
    operator new();
  }
  return fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>::Type(void)::type;
}

void sub_1B20004F4(_Unwind_Exception *a1)
{
}

uint64_t fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Type()
{
  {
    operator new();
  }
  return fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Type(void)::type;
}

void sub_1B20005AC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::WriteFile(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        uint64_t v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          unint64_t v8 = (const std::string::value_type *)a2;
        }
        else {
          unint64_t v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                  + 24);
      MEMORY[0x1B3EA7CF0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1B20008FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal(void *a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)(a1[8] + 8 * a2);
  uint64_t v20 = *v6;
  char v22 = 0;
  uint64_t v23 = 0;
  __int16 v21 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v21, (const void *)v6[1], v6[2], (v6[2] - v6[1]) >> 2);
  uint64_t v16 = *(void *)a3;
  char v18 = 0;
  uint64_t v19 = 0;
  std::string __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal((uint64_t)a1, a2, &v16);
  if (__p)
  {
    char v18 = __p;
    operator delete(__p);
  }
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v12 = v20;
  BOOL v14 = 0;
  uint64_t v15 = 0;
  char v13 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v13, v21, (uint64_t)v22, (v22 - (unsigned char *)v21) >> 2);
  uint64_t v8 = *(void *)a3;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v9, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v7, (float *)&v12, (float *)&v8);
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  if (v13)
  {
    BOOL v14 = v13;
    operator delete(v13);
  }
  if (v21)
  {
    char v22 = v21;
    operator delete(v21);
  }
}

void sub_1B2000AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  __int16 v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(void *)(v19 - 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SetFinalProperties<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(unint64_t a1, float *a2, float *a3)
{
  if ((*a2 != INFINITY || a2[1] != INFINITY) && (*a2 != 0.0 || a2[1] != 0.0)) {
    a1 &= ~0x100000000uLL;
  }
  if ((*a3 != INFINITY || a3[1] != INFINITY) && (*a3 != 0.0 || a3[1] != 0.0)) {
    a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  return a1 & 0x3FFFFFF0007;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 56);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 48)) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (_DWORD *)(v6 - 48);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);
  return fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::AddArc(v9, a3);
}

uint64_t fst::AddArcProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(unint64_t a1, int a2, float *a3, _DWORD *a4)
{
  float v4 = *a3;
  int v5 = *((_DWORD *)a3 + 1);
  unint64_t v6 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v5) {
    unint64_t v6 = a1;
  }
  unint64_t v7 = v6 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v5) {
    unint64_t v7 = v6 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  }
  if (v4 == 0.0) {
    unint64_t v6 = v7;
  }
  if (!v5) {
    unint64_t v6 = v6 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if (a4)
  {
    if (*a4 > SLODWORD(v4)) {
      unint64_t v6 = v6 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    }
    if (a4[1] > v5) {
      unint64_t v6 = v6 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    }
  }
  if ((a3[2] != INFINITY || a3[3] != INFINITY) && (a3[2] != 0.0 || a3[3] != 0.0)) {
    unint64_t v6 = v6 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (*((_DWORD *)a3 + 10) <= a2) {
    unint64_t v6 = v6 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  }
  if ((v6 & 0x4000000000) != 0) {
    return v6 & 0x5D7FFEB0007 | 0x2800000000;
  }
  else {
    return v6 & 0x5D7FFEB0007;
  }
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  float v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v33.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(*(void *)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(int64x2_t **)(v14 + 8 * v15);
      int64x2_t v17 = v16[2];
      uint64_t v18 = v16[3].i64[1] - v16[3].i64[0];
      if (v18) {
        uint64_t v19 = v16[3].i64[0];
      }
      else {
        uint64_t v19 = 0;
      }
      if (v18)
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        char v22 = (int *)(v19 + 40);
        do
        {
          int v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            uint64_t v25 = *((void *)v22 - 5);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            int64x2_t v17 = vaddq_s64(v17, vceqzq_s64(v26));
          }
          else
          {
            *char v22 = v23;
            if (v20 != v21)
            {
              int64x2_t v30 = v17;
              int v24 = (void *)(v19 + 48 * v21);
              *int v24 = *((void *)v22 - 5);
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v24 + 1), (uint64_t)(v22 - 8));
              *(_DWORD *)(v19 + 48 * v21 + 40) = *v22;
              uint64_t v14 = *v4;
              int64x2_t v17 = v30;
            }
            ++v21;
          }
          ++v20;
          uint64_t v16 = *(int64x2_t **)(v14 + 8 * v15);
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v16[3].i64[1] - v16[3].i64[0]) >> 4);
          v22 += 12;
        }
        while (v20 < v27);
        int64x2_t v31 = v17;
      }
      else
      {
        int64x2_t v31 = v16[2];
        uint64_t v21 = 0;
        unint64_t v27 = 0;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(v16, v27 - v21);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 32) = v31;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v28 = *(int *)(a1 + 88);
  if (v28 == -1)
  {
    long long v29 = v33.__begin_;
    if (!v33.__begin_) {
      return;
    }
  }
  else
  {
    long long v29 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v28];
  }
  v33.__end_ = v29;
  operator delete(v29);
}

void sub_1B20010B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ArcIteratorBase<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= 0xAAAAAAAAAAAAAAABLL
                               * ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 56)
                                          - *(void *)(*(void *)(a1 + 8) + 48)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48) + 48 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::SetValue(uint64_t a1, float *a2)
{
  float v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = v4[6];
  uint64_t v7 = (int *)(v6 + 48 * v5);
  int v8 = *v7;
  int v9 = v7[1];
  if (v8 != v9) {
    **(void **)(a1 + 16) &= ~0x20000uLL;
  }
  if (v8)
  {
    if (v9) {
      goto LABEL_9;
    }
    uint64_t v10 = *(unint64_t **)(a1 + 16);
    unint64_t v11 = *v10;
  }
  else
  {
    uint64_t v10 = *(unint64_t **)(a1 + 16);
    unint64_t v12 = *v10;
    *v10 &= ~0x1000000uLL;
    if (v9) {
      goto LABEL_9;
    }
    unint64_t v11 = v12 & 0xFFFFFFFFFEBFFFFFLL;
    *uint64_t v10 = v11;
  }
  *uint64_t v10 = v11 & 0xFFFFFFFFFBFFFFFFLL;
LABEL_9:
  uint64_t v13 = v6 + 48 * v5;
  if ((*(float *)(v13 + 8) != INFINITY || *(float *)(v13 + 12) != INFINITY)
    && (*(float *)(v13 + 8) != 0.0 || *(float *)(v13 + 12) != 0.0))
  {
    **(void **)(a1 + 16) &= ~0x100000000uLL;
  }
  uint64_t v14 = 0x30FC30007;
  BOOL v15 = *(_DWORD *)a2 == v8 && *((_DWORD *)a2 + 1) == v9;
  if (v15 && *((_DWORD *)a2 + 10) == *(_DWORD *)(v6 + 48 * v5 + 40)) {
    uint64_t v14 = 0x3FFFFFFF0007;
  }
  uint64_t result = fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArc(v4, a2, v5);
  float v17 = *a2;
  int v18 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 != v18) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v17 == 0.0)
  {
    uint64_t v19 = *(unint64_t **)(a1 + 16);
    unint64_t v21 = *v19 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *uint64_t v19 = v21;
    if (!v18)
    {
      unint64_t v20 = v21 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *uint64_t v19 = v20;
      goto LABEL_28;
    }
  }
  else if (!v18)
  {
    uint64_t v19 = *(unint64_t **)(a1 + 16);
    unint64_t v20 = *v19;
LABEL_28:
    *uint64_t v19 = v20 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if ((a2[2] != INFINITY || a2[3] != INFINITY) && (a2[2] != 0.0 || a2[3] != 0.0)) {
    **(void **)(a1 + 16) = **(void **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(void **)(a1 + 16) &= v14;
  return result;
}

float kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>(kaldi::quasar::TorchEncoderDecoder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  kaldi::quasar::TorchEncoderDecoder::ResetHistoryState(a1, 1);
  kaldi::quasar::TorchEncoderDecoder::Start(a1, (clockid_t)1u, a4);
  kaldi::quasar::TorchEncoderDecoder::StartFeedforward((uint64_t)a1, a2, 0, 0);
  long long v143 = 0u;
  long long v142 = 0u;
  int32x2_t v141 = (int32x2_t)&unk_1F0A51768;
  char v144 = 0;
  kaldi::CuMatrix<float>::CuMatrix(&v139, 1, 1, 0, 0, 0);
  int v14 = kaldi::quasar::TorchEncoderDecoder::BosTargetId(a1);
  *uint64_t v140 = (float)(v14 - 1);
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  v138 = 0;
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  unint64_t v135 = 0;
  std::string __p = 0;
  char v131 = 0;
  v132 = 0;
  int v15 = 0;
  if (a7 < 0)
  {
    float v16 = 0.0;
  }
  else
  {
    uint64_t v113 = a3 + 16;
    float v16 = 0.0;
    while (1)
    {
      kaldi::quasar::TorchEncoderDecoder::Feedforward((uint64_t)a1, &v139, &v141, 0);
      kaldi::Matrix<float>::Matrix((uint64_t)v125, HIDWORD(v142), DWORD2(v142), 0, 0);
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v141, (int *)v125, 111);
      int Type = quasar::getType(a1, v17);
      if (v15 == a7)
      {
        int SoftmaxEosId = kaldi::quasar::TorchEncoderDecoder::GetSoftmaxEosId(a1);
        float v20 = *((float *)v125[0] + SoftmaxEosId);
        int v21 = kaldi::quasar::TorchEncoderDecoder::EosTargetId(a1) - 1;
      }
      else
      {
        uint64_t v27 = 0;
        int v21 = 0;
        float v20 = Type ? 0.0 : -3.4028e38;
        while (v27 != kaldi::MatrixBase<float>::NumCols((uint64_t)v125))
        {
          int VocabWordIdx = kaldi::quasar::TorchEncoderDecoder::GetVocabWordIdx(a1, v27);
          if ((v15 >= a6 || VocabWordIdx != kaldi::quasar::TorchEncoderDecoder::EosTargetId(a1) - 1)
            && (!kaldi::quasar::TorchEncoderDecoder::HasBpeModel(a1)
             || VocabWordIdx != kaldi::quasar::TorchEncoderDecoder::UnkTargetId(a1) - 1)
            && *((float *)v125[0] + v27) > v20)
          {
            float v20 = *((float *)v125[0] + v27);
            int v21 = VocabWordIdx;
          }
          ++v27;
        }
      }
      int v23 = quasar::getType(a1, v22);
      float v24 = logf(v20);
      if (v23) {
        float v20 = v24;
      }
      *uint64_t v140 = (float)v21;
      uint64_t v25 = v131;
      if (v131 >= (float *)v132)
      {
        long long v29 = (float *)__p;
        uint64_t v30 = ((char *)v131 - (unsigned char *)__p) >> 2;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v32 = v132 - (unsigned char *)__p;
        if ((v132 - (unsigned char *)__p) >> 1 > v31) {
          unint64_t v31 = v32 >> 1;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v132, v33);
          long long v29 = (float *)__p;
          uint64_t v25 = v131;
        }
        else
        {
          uint64_t v34 = 0;
        }
        long long v35 = (float *)&v34[4 * v30];
        *long long v35 = v20;
        int64x2_t v26 = v35 + 1;
        while (v25 != v29)
        {
          int v36 = *((_DWORD *)v25-- - 1);
          *((_DWORD *)v35-- - 1) = v36;
        }
        std::string __p = v35;
        char v131 = v26;
        v132 = &v34[4 * v33];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *char v131 = v20;
        int64x2_t v26 = v25 + 1;
      }
      char v131 = v26;
      int BestAlignment = kaldi::quasar::TorchEncoderDecoder::GetBestAlignment(a1, 0);
      float v121 = 0;
      uint64_t v122 = 0;
      float v123 = 0;
      kaldi::quasar::TorchEncoderDecoder::GetAlignmentProbabilities(a1, (uint64_t)&v121, 0);
      int v38 = kaldi::quasar::TorchEncoderDecoder::EosTargetId(a1) - 1;
      if (v21 == v38)
      {
        if (*((unsigned char *)a1 + 3922) && *((unsigned char *)a1 + 3923))
        {
          long long v39 = v137;
          if (v137 >= v138)
          {
            uint64_t v49 = v136;
            uint64_t v50 = (v137 - v136) >> 2;
            unint64_t v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 62) {
LABEL_165:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v52 = v138 - v136;
            if ((v138 - v136) >> 1 > v51) {
              unint64_t v51 = v52 >> 1;
            }
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v51;
            }
            if (v53)
            {
              long long v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v138, v53);
              uint64_t v49 = v136;
              long long v39 = v137;
            }
            else
            {
              long long v54 = 0;
            }
            std::vector<unsigned int> v71 = &v54[4 * v50];
            *(_DWORD *)std::vector<unsigned int> v71 = BestAlignment;
            long long v40 = v71 + 4;
            while (v39 != v49)
            {
              int v72 = *((_DWORD *)v39 - 1);
              v39 -= 4;
              *((_DWORD *)v71 - 1) = v72;
              v71 -= 4;
            }
            uint64_t v136 = v71;
            uint64_t v137 = v40;
            v138 = &v54[4 * v53];
            if (v49) {
              operator delete(v49);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v137 = BestAlignment;
            long long v40 = v39 + 4;
          }
          uint64_t v137 = v40;
          uint64_t v73 = v134;
          if ((unint64_t)v134 >= v135)
          {
            uint64_t v74 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v133, (uint64_t)&v121);
          }
          else
          {
            *uint64_t v134 = 0;
            v73[1] = 0;
            v73[2] = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v73, v121, (uint64_t)v122, ((unsigned char *)v122 - (unsigned char *)v121) >> 2);
            uint64_t v74 = (uint64_t)(v73 + 3);
          }
          uint64_t v134 = (void *)v74;
          int v75 = v21 + 1;
          int v77 = *(int **)(a3 + 8);
          unint64_t v76 = *(void *)(a3 + 16);
          if ((unint64_t)v77 >= v76)
          {
            float v79 = *(int **)a3;
            uint64_t v80 = ((uint64_t)v77 - *(void *)a3) >> 2;
            unint64_t v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v82 = v76 - (void)v79;
            if (v82 >> 1 > v81) {
              unint64_t v81 = v82 >> 1;
            }
            if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v83 = v81;
            }
            if (v83)
            {
              uint64_t v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v113, v83);
              float v79 = *(int **)a3;
              int v77 = *(int **)(a3 + 8);
            }
            else
            {
              uint64_t v84 = 0;
            }
            unint64_t v85 = (int *)&v84[4 * v80];
            *unint64_t v85 = v75;
            unint64_t v78 = v85 + 1;
            while (v77 != v79)
            {
              int v86 = *--v77;
              *--unint64_t v85 = v86;
            }
            *(void *)a3 = v85;
            *(void *)(a3 + 8) = v78;
            *(void *)(a3 + 16) = &v84[4 * v83];
            if (v79) {
              operator delete(v79);
            }
          }
          else
          {
            *int v77 = v75;
            unint64_t v78 = v77 + 1;
          }
          *(void *)(a3 + 8) = v78;
          int v87 = v131;
          if (v131 >= (float *)v132)
          {
            unint64_t v89 = (float *)__p;
            uint64_t v90 = ((char *)v131 - (unsigned char *)__p) >> 2;
            unint64_t v91 = v90 + 1;
            if ((unint64_t)(v90 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v92 = v132 - (unsigned char *)__p;
            if ((v132 - (unsigned char *)__p) >> 1 > v91) {
              unint64_t v91 = v92 >> 1;
            }
            if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v93 = v91;
            }
            if (v93)
            {
              int v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v132, v93);
              unint64_t v89 = (float *)__p;
              int v87 = v131;
            }
            else
            {
              int v94 = 0;
            }
            uint64_t v95 = (float *)&v94[4 * v90];
            *uint64_t v95 = 0.0;
            int v88 = v95 + 1;
            while (v87 != v89)
            {
              int v96 = *((_DWORD *)v87-- - 1);
              *((_DWORD *)v95-- - 1) = v96;
            }
            std::string __p = v95;
            char v131 = v88;
            v132 = &v94[4 * v93];
            if (v89) {
              operator delete(v89);
            }
          }
          else
          {
            *char v131 = 0.0;
            int v88 = v87 + 1;
          }
          char v131 = v88;
        }
      }
      else
      {
        long long v41 = v137;
        if (v137 >= v138)
        {
          uint64_t v43 = v136;
          uint64_t v44 = (v137 - v136) >> 2;
          unint64_t v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 62) {
            goto LABEL_165;
          }
          uint64_t v46 = v138 - v136;
          if ((v138 - v136) >> 1 > v45) {
            unint64_t v45 = v46 >> 1;
          }
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v45;
          }
          if (v47)
          {
            std::vector<unsigned int>::pointer v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v138, v47);
            uint64_t v43 = v136;
            long long v41 = v137;
          }
          else
          {
            std::vector<unsigned int>::pointer v48 = 0;
          }
          long long v55 = &v48[4 * v44];
          *(_DWORD *)long long v55 = BestAlignment;
          uint64_t v42 = v55 + 4;
          while (v41 != v43)
          {
            int v56 = *((_DWORD *)v41 - 1);
            v41 -= 4;
            *((_DWORD *)v55 - 1) = v56;
            v55 -= 4;
          }
          uint64_t v136 = v55;
          uint64_t v137 = v42;
          v138 = &v48[4 * v47];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v137 = BestAlignment;
          uint64_t v42 = v41 + 4;
        }
        uint64_t v137 = v42;
        unsigned int v57 = v134;
        if ((unint64_t)v134 >= v135)
        {
          uint64_t v58 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v133, (uint64_t)&v121);
        }
        else
        {
          *uint64_t v134 = 0;
          v57[1] = 0;
          v57[2] = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v57, v121, (uint64_t)v122, ((unsigned char *)v122 - (unsigned char *)v121) >> 2);
          uint64_t v58 = (uint64_t)(v57 + 3);
        }
        uint64_t v134 = (void *)v58;
        int v59 = v21 + 1;
        uint64_t v61 = *(int **)(a3 + 8);
        unint64_t v60 = *(void *)(a3 + 16);
        if ((unint64_t)v61 >= v60)
        {
          uint64_t v63 = *(int **)a3;
          uint64_t v64 = ((uint64_t)v61 - *(void *)a3) >> 2;
          unint64_t v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v66 = v60 - (void)v63;
          if (v66 >> 1 > v65) {
            unint64_t v65 = v66 >> 1;
          }
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v65;
          }
          if (v67)
          {
            int v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v113, v67);
            uint64_t v63 = *(int **)a3;
            uint64_t v61 = *(int **)(a3 + 8);
          }
          else
          {
            int v68 = 0;
          }
          unsigned int v69 = (int *)&v68[4 * v64];
          *unsigned int v69 = v59;
          uint64_t v62 = v69 + 1;
          while (v61 != v63)
          {
            int v70 = *--v61;
            *--unsigned int v69 = v70;
          }
          *(void *)a3 = v69;
          *(void *)(a3 + 8) = v62;
          *(void *)(a3 + 16) = &v68[4 * v67];
          if (v63) {
            operator delete(v63);
          }
        }
        else
        {
          *uint64_t v61 = v59;
          uint64_t v62 = v61 + 1;
        }
        *(void *)(a3 + 8) = v62;
      }
      if (v121)
      {
        uint64_t v122 = v121;
        operator delete(v121);
      }
      float v16 = v16 + v20;
      kaldi::Matrix<float>::~Matrix((uint64_t)v125);
      if (v21 == v38) {
        break;
      }
      if (v15++ == a7) {
        goto LABEL_135;
      }
    }
  }
  if (v15 == a7 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v125);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)"Decoder hit max sentence length : ", 34);
    uint64_t v98 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)" ", 1);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v125);
  }
LABEL_135:
  if (kaldi::quasar::TorchEncoderDecoder::Reverse(a1) && v136 != v137)
  {
    uint64_t v99 = v137 - 4;
    if (v137 - 4 > v136)
    {
      uint64_t v100 = v136 + 4;
      do
      {
        int v101 = *((_DWORD *)v100 - 1);
        *((_DWORD *)v100 - 1) = *(_DWORD *)v99;
        *(_DWORD *)uint64_t v99 = v101;
        v99 -= 4;
        BOOL v102 = v100 >= v99;
        v100 += 4;
      }
      while (!v102);
    }
  }
  uint64_t v103 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 200))(a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a5 + 176))(a5, v103);
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    unint64_t v105 = 0;
  }
  else
  {
    uint64_t v104 = 0;
    unint64_t v105 = 0;
    uint64_t v106 = v103;
    do
    {
      uint64_t v107 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 200))(a5);
      if (v105 >= (v137 - v136) >> 2 || v105 >= (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2) {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v134 - v133) >> 3) <= v105) {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v103 = v107;
      unsigned int v108 = *(_DWORD *)&v136[4 * v105];
      unsigned int v109 = *(_DWORD *)(*(void *)a3 + 4 * v105);
      float v110 = *((float *)__p + v105);
      int v118 = 0;
      uint64_t v119 = 0;
      uint64_t v120 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v118, *(const void **)(v133 + v104), *(void *)(v133 + v104 + 8), (uint64_t)(*(void *)(v133 + v104 + 8) - *(void *)(v133 + v104)) >> 2);
      LODWORD(v121) = 0;
      *((float *)&v121 + 1) = -v110;
      float v123 = 0;
      uint64_t v124 = 0;
      uint64_t v122 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v122, v118, (uint64_t)v119, (v119 - (unsigned char *)v118) >> 2);
      v125[0] = (void **)__PAIR64__(v109, v108);
      v125[1] = (void **)v121;
      float v127 = 0;
      uint64_t v128 = 0;
      float v126 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v126, v122, (uint64_t)v123, (v123 - (unsigned char *)v122) >> 2);
      int v129 = v103;
      (*(void (**)(uint64_t, uint64_t, void ***))(*(void *)a5 + 208))(a5, v106, v125);
      if (v126)
      {
        float v127 = v126;
        operator delete(v126);
      }
      if (v122)
      {
        float v123 = v122;
        operator delete(v122);
      }
      if (v118)
      {
        uint64_t v119 = v118;
        operator delete(v118);
      }
      ++v105;
      v104 += 24;
      uint64_t v106 = v103;
    }
    while (v105 != (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  float v111 = -*((float *)__p + v105);
  v114[0] = 0;
  *(float *)&v114[1] = v111;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  int v115 = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a5 + 184))(a5, v103, v114);
  if (v115)
  {
    uint64_t v116 = v115;
    operator delete(v115);
  }
  if (__p)
  {
    char v131 = (float *)__p;
    operator delete(__p);
  }
  v125[0] = (void **)&v133;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v125);
  if (v136)
  {
    uint64_t v137 = v136;
    operator delete(v136);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v139);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v141);
  return -v16;
}

void sub_1B2001EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,char a60,uint64_t a61)
{
  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
  }
  a23 = &a60;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  uint64_t v63 = *(void **)(v61 - 240);
  if (v63)
  {
    *(void *)(v61 - 232) = v63;
    operator delete(v63);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v61 - 216);
  kaldi::CuMatrix<float>::~CuMatrix(v61 - 168);
  _Unwind_Resume(a1);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A42FE0;
  unint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

char *std::vector<unsigned short>::__insert_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 1)
  {
    uint64_t v13 = *(void **)a1;
    if (a5 + ((uint64_t)(v12 - *(void *)a1) >> 1) < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = (__dst - (uint64_t)v13) >> 1;
    unint64_t v15 = v10 - (void)v13;
    if (v15 <= a5 + ((uint64_t)(v12 - *(void *)a1) >> 1)) {
      unint64_t v16 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 1);
    }
    else {
      unint64_t v16 = v15;
    }
    if (v15 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v17 = v16;
    }
    uint64_t v37 = v9;
    if (v17) {
      int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v9, v17);
    }
    else {
      int v18 = 0;
    }
    uint64_t v28 = &v18[2 * v14];
    std::string __p = v18;
    uint64_t v34 = v28;
    int v36 = &v18[2 * v17];
    uint64_t v29 = 2 * a5;
    uint64_t v30 = &v28[2 * a5];
    do
    {
      __int16 v31 = *(_WORD *)v7;
      v7 += 2;
      *(_WORD *)uint64_t v28 = v31;
      v28 += 2;
      v29 -= 2;
    }
    while (v29);
    long long v35 = v30;
    uint64_t v5 = std::vector<unsigned short>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 1) & 0xFFFFFFFFFFFFFFFELL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 1;
  if (v20 >= a5)
  {
    int v21 = &__src[2 * a5];
    int v23 = *(char **)(v9 - 8);
LABEL_18:
    float v24 = &v5[2 * a5];
    uint64_t v25 = &v23[-2 * a5];
    int64x2_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      int64x2_t v26 = v23;
      do
      {
        __int16 v27 = *(_WORD *)v25;
        v25 += 2;
        *(_WORD *)int64x2_t v26 = v27;
        v26 += 2;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-2 * ((v23 - v24) >> 1)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  int v21 = &__src[2 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[2 * v20], a4 - v21);
  }
  int v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_1B2002290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    int v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      __int16 v9 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v7 - 1) = v9;
      v7 -= 2;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  uint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  unint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + ++*(void *)(result + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void quasar::RomanizerOptions::~RomanizerOptions(quasar::RomanizerOptions *this)
{
  *(void *)this = &unk_1F0A53888;
  *((void *)this + 114) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1048, *((void **)this + 132));
  if (*((char *)this + 1039) < 0) {
    operator delete(*((void **)this + 127));
  }
  *((void *)this + 114) = &unk_1F0A52FB8;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 126);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 991) < 0) {
    operator delete(*((void **)this + 121));
  }
  if (*((char *)this + 967) < 0) {
    operator delete(*((void **)this + 118));
  }
  if (*((char *)this + 943) < 0) {
    operator delete(*((void **)this + 115));
  }
  *((void *)this + 96) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 888, *((char **)this + 112));
  *((void *)this + 96) = &unk_1F0A52FB8;
  int v3 = (std::__shared_weak_count *)*((void *)this + 108);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 847) < 0) {
    operator delete(*((void **)this + 103));
  }
  if (*((char *)this + 823) < 0) {
    operator delete(*((void **)this + 100));
  }
  if (*((char *)this + 799) < 0) {
    operator delete(*((void **)this + 97));
  }
  *((void *)this + 78) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 744, *((char **)this + 94));
  *((void *)this + 78) = &unk_1F0A52FB8;
  float v4 = (std::__shared_weak_count *)*((void *)this + 90);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 703) < 0) {
    operator delete(*((void **)this + 85));
  }
  if (*((char *)this + 679) < 0) {
    operator delete(*((void **)this + 82));
  }
  if (*((char *)this + 655) < 0) {
    operator delete(*((void **)this + 79));
  }
  *((void *)this + 60) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  *((void *)this + 60) = &unk_1F0A52FB8;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 559) < 0) {
    operator delete(*((void **)this + 67));
  }
  if (*((char *)this + 535) < 0) {
    operator delete(*((void **)this + 64));
  }
  if (*((char *)this + 511) < 0) {
    operator delete(*((void **)this + 61));
  }
  *((void *)this + 42) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 456, *((char **)this + 58));
  *((void *)this + 42) = &unk_1F0A52FB8;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 415) < 0) {
    operator delete(*((void **)this + 49));
  }
  if (*((char *)this + 391) < 0) {
    operator delete(*((void **)this + 46));
  }
  if (*((char *)this + 367) < 0) {
    operator delete(*((void **)this + 43));
  }
  *((void *)this + 22) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 312, *((void **)this + 40));
  if (*((char *)this + 303) < 0) {
    operator delete(*((void **)this + 35));
  }
  *((void *)this + 22) = &unk_1F0A52FB8;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  *((void *)this + 2) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  *((void *)this + 2) = &unk_1F0A52FB8;
  int v8 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

char *std::__tree<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::__map_value_compare<std::tuple<std::string,std::string,BOOL,BOOL>,std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::less<std::tuple<std::string,std::string,BOOL,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>>>::__emplace_unique_key_args<std::tuple<std::string,std::string,BOOL,BOOL>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,std::string,BOOL,BOOL>&&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::__map_value_compare<std::tuple<std::string,std::string,BOOL,BOOL>,std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::less<std::tuple<std::string,std::string,BOOL,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>>>::__find_equal<std::tuple<std::string,std::string,BOOL,BOOL>>((uint64_t)a1, &v15, a2);
  uint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    uint64_t v7 = (char *)operator new(0x68uLL);
    v13[1] = a1 + 1;
    __int16 v9 = *a4;
    long long v10 = **a4;
    *((void *)v7 + 6) = *((void *)*a4 + 2);
    *((_OWORD *)v7 + 2) = v10;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *(void *)__int16 v9 = 0;
    uint64_t v11 = *((void *)v9 + 5);
    *(_OWORD *)(v7 + 56) = *(long long *)((char *)v9 + 24);
    *((void *)v7 + 9) = v11;
    *((void *)v9 + 4) = 0;
    *((void *)v9 + 5) = 0;
    *((void *)v9 + 3) = 0;
    v7[80] = *((unsigned char *)v9 + 48);
    v7[81] = *((unsigned char *)v9 + 49);
    *((void *)v7 + 11) = 0;
    *((void *)v7 + 12) = 0;
    char v14 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v15, v8, (uint64_t *)v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::__map_value_compare<std::tuple<std::string,std::string,BOOL,BOOL>,std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,std::less<std::tuple<std::string,std::string,BOOL,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>>>::__find_equal<std::tuple<std::string,std::string,BOOL,BOOL>>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  float v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,BOOL,BOOL>,std::tuple<std::string,std::string,BOOL,BOOL>>((uint64_t)&v10, a3, (uint64_t)(v4 + 4)))break; {
        float v4 = (void *)*v7;
        }
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,BOOL,BOOL>,std::tuple<std::string,std::string,BOOL,BOOL>>((uint64_t)&v11, v8, a3))break; {
      uint64_t v5 = v7 + 1;
      }
      float v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,BOOL,BOOL>,std::tuple<std::string,std::string,BOOL,BOOL>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(char *)(a3 + 23);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v7 = *(void *)(a2 + 8);
  }
  if (v6 >= 0) {
    uint64_t v8 = (const void *)a2;
  }
  else {
    uint64_t v8 = *(const void **)a2;
  }
  if (v5 >= 0) {
    size_t v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v9 = *(void *)(a3 + 8);
  }
  if (v5 >= 0) {
    char v10 = (const void *)a3;
  }
  else {
    char v10 = *(const void **)a3;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  int v15 = memcmp(v10, v8, v11);
  BOOL v16 = v9 < v7;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  return !v16
      && std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,BOOL,BOOL>,std::tuple<std::string,std::string,BOOL,BOOL>>((uint64_t)&v17, a2, a3);
}

BOOL std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,BOOL,BOOL>,std::tuple<std::string,std::string,BOOL,BOOL>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(char *)(a3 + 47);
  int v6 = *(char *)(a2 + 47);
  if (v6 >= 0) {
    size_t v7 = *(unsigned __int8 *)(a2 + 47);
  }
  else {
    size_t v7 = *(void *)(a2 + 32);
  }
  if (v6 >= 0) {
    uint64_t v8 = (const void *)(a2 + 24);
  }
  else {
    uint64_t v8 = *(const void **)(a2 + 24);
  }
  if (v5 >= 0) {
    size_t v9 = *(unsigned __int8 *)(a3 + 47);
  }
  else {
    size_t v9 = *(void *)(a3 + 32);
  }
  if (v5 >= 0) {
    char v10 = (const void *)(a3 + 24);
  }
  else {
    char v10 = *(const void **)(a3 + 24);
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  int v14 = memcmp(v10, v8, v11);
  BOOL v15 = v9 < v7;
  if (v14) {
    BOOL v15 = v14 < 0;
  }
  if (v15) {
    return 0;
  }
  unsigned int v16 = *(unsigned __int8 *)(a2 + 48);
  unsigned int v17 = *(unsigned __int8 *)(a3 + 48);
  if (v16 < v17) {
    return 1;
  }
  return v17 >= v16 && *(unsigned __int8 *)(a2 + 49) < *(unsigned __int8 *)(a3 + 49);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,BOOL,BOOL>,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::tuple<std::string,std::string,BOOL,BOOL> const,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::tuple<std::string,std::string,BOOL,BOOL> const,std::weak_ptr<kaldi::quasar::NNMTTransliterator>>,0>(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::NNMTTransliterator,std::allocator<kaldi::quasar::NNMTTransliterator>,BOOL &,void>@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  float v4 = operator new(0x1178uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::NNMTTransliterator>::__shared_ptr_emplace[abi:ne180100]<BOOL &,std::allocator<kaldi::quasar::NNMTTransliterator>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2002C28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::NNMTTransliterator>::__shared_ptr_emplace[abi:ne180100]<BOOL &,std::allocator<kaldi::quasar::NNMTTransliterator>,0>(void *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F2C8;
  kaldi::quasar::NNMTTransliterator::NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 3), *a2);
  return a1;
}

void sub_1B2002C88(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::NNMTTransliterator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F2C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::NNMTTransliterator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F2C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::quasar::NNMTTransliterator>::__on_zero_shared(uint64_t a1)
{
}

kaldi::quasar::NNMTTransliterator *kaldi::quasar::NNMTTransliterator::NNMTTransliterator(kaldi::quasar::NNMTTransliterator *this, char a2)
{
  uint64_t v4 = kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(this);
  std::string::basic_string[abi:ne180100]<0>((void *)(v4 + 4168), "<space>");
  *((void *)this + 5++*(void *)(result + 24) = 0;
  *((unsigned char *)this + 4200) = 0;
  *((unsigned char *)this + 4201) = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "UNK");
  kaldi::quasar::BPE::BPE((uint64_t)this + 4208, 1, (long long *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return this;
}

void sub_1B2002DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*v17 < 0) {
    operator delete(*v16);
  }
  kaldi::quasar::TorchEncoderDecoder::~TorchEncoderDecoder(v15);
  _Unwind_Resume(a1);
}

void kaldi::quasar::NNMTTransliterator::~NNMTTransliterator(kaldi::quasar::NNMTTransliterator *this)
{
  if (*((void *)this + 524)) {
    utrans_close();
  }
  kaldi::quasar::BPE::~BPE((kaldi::quasar::NNMTTransliterator *)((char *)this + 4208));
  if (*((char *)this + 4191) < 0) {
    operator delete(*((void **)this + 521));
  }
  kaldi::quasar::TorchEncoderDecoder::~TorchEncoderDecoder(this);
}

uint64_t quasar::TranslationPhrase::convertTokensToString(quasar::TranslationPhrase *this)
{
  return quasar::TranslationPhrase::convertTokensToString<quasar::TranslationToken>((uint64_t *)this + 2);
}

uint64_t quasar::TranslationPhrase::convertTokensToString<quasar::TranslationToken>(uint64_t *a1)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  uint64_t v2 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v2 + v3;
      int v6 = *(char *)(v5 + 23);
      if (v6 >= 0) {
        uint64_t v7 = v5;
      }
      else {
        uint64_t v7 = *(void *)v5;
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
      }
      else {
        uint64_t v8 = *(void *)(v5 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v7, v8);
      uint64_t v2 = *a1;
      if (*(unsigned char *)(*a1 + v3 + 24))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
        uint64_t v2 = *a1;
      }
      ++v4;
      v3 += 72;
    }
    while (v4 < 0x8E38E38E38E38E39 * ((a1[1] - v2) >> 3));
  }
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v14);
}

void sub_1B2003074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::TranslationPhrase::populateMetaInfoWithAlignmentQueries(uint64_t a1, int **a2)
{
  quasar::PTree::PTree((quasar::PTree *)v24);
  quasar::PTree::PTree((quasar::PTree *)v23);
  quasar::PTree::PTree((quasar::PTree *)v22);
  quasar::json2Ptree(a1 + 40);
  unint64_t v4 = *a2;
  uint64_t v5 = (unsigned int *)a2[1];
  if (*a2 != (int *)v5)
  {
    do
    {
      quasar::PTree::PTree((quasar::PTree *)&v11);
      quasar::PTree::PTree((quasar::PTree *)v21);
      std::string::basic_string[abi:ne180100]<0>(__p, "start");
      int v6 = *v4;
      int Type = quasar::getType((quasar *)*v4);
      std::to_string(&v14, v6);
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      char v18 = 1;
      quasar::PTree::putChild((uint64_t)&v11, (uint64_t)__p, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "end");
      unsigned int v7 = v4[1];
      int Type = quasar::getType((quasar *)v7);
      std::to_string(&v14, v7);
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      char v18 = 1;
      quasar::PTree::putChild((uint64_t)&v11, (uint64_t)__p, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      quasar::PTree::addChild((quasar::PTree *)v23, (const quasar::PTree *)&v11);
      std::string::basic_string[abi:ne180100]<0>(__p, "start");
      int v8 = *v4;
      int Type = quasar::getType((quasar *)*v4);
      std::to_string(&v14, v8);
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      char v18 = 1;
      quasar::PTree::putChild((uint64_t)v21, (uint64_t)__p, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "end");
      unsigned int v9 = v4[1];
      int Type = quasar::getType((quasar *)v9);
      std::to_string(&v14, v9);
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      char v18 = 1;
      quasar::PTree::putChild((uint64_t)v21, (uint64_t)__p, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "do-not-translate");
      int v10 = *((unsigned __int8 *)v4 + 8);
      int Type = quasar::getType((quasar *)*((unsigned __int8 *)v4 + 8));
      std::to_string(&v14, v10);
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      char v18 = 1;
      quasar::PTree::putChild((uint64_t)v21, (uint64_t)__p, (uint64_t)&Type, 1);
      quasar::PTree::~PTree((quasar::PTree *)&Type);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      quasar::PTree::addChild((quasar::PTree *)v22, (const quasar::PTree *)v21);
      quasar::PTree::~PTree((quasar::PTree *)v21);
      quasar::PTree::~PTree((quasar::PTree *)&v11);
      v4 += 3;
    }
    while (v4 != (int *)v5);
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "alignment-queries");
  quasar::PTree::putChild((uint64_t)v24, (uint64_t)&v11, (uint64_t)v23, 1);
  if (v12 < 0) {
    operator delete(v11);
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "alignment-span-info");
  quasar::PTree::putChild((uint64_t)v24, (uint64_t)&v11, (uint64_t)v22, 1);
  if (v12 < 0) {
    operator delete(v11);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  quasar::PTree::writeJson();
}

void sub_1B2003508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  std::ostringstream::~ostringstream((uint64_t)&__p);
  quasar::PTree::~PTree((quasar::PTree *)&a62);
  quasar::PTree::~PTree((quasar::PTree *)(v62 - 216));
  quasar::PTree::~PTree((quasar::PTree *)(v62 - 152));
  _Unwind_Resume(a1);
}

void quasar::TranslationPhrase::extractAlignmentProjections(quasar::TranslationPhrase *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "alignment-queries");
  uint64_t ChildWithoutSplit = quasar::PTree::getChildWithoutSplit((uint64_t)this, (unsigned __int8 **)__p);
  uint64_t v5 = (quasar::PTree *)ChildWithoutSplit;
  if (SBYTE7(v16) < 0)
  {
    operator delete(__p[0]);
    if (v5) {
      goto LABEL_3;
    }
  }
  else if (ChildWithoutSplit)
  {
LABEL_3:
    unint64_t v6 = quasar::PTree::size(v5);
    std::vector<std::vector<std::pair<int,int>>>::resize(a2, v6);
    char v12 = v5;
    uint64_t v13 = quasar::PTree::begin(v5);
    uint64_t v7 = 0;
    char v8 = 0;
    while (1)
    {
      if (v13 == quasar::PTree::end(v12))
      {
        if ((v8 & 1) == 0)
        {
          if (quasar::gLogLevel >= 5)
          {
            long long v30 = 0u;
            long long v31 = 0u;
            long long v28 = 0u;
            long long v29 = 0u;
            long long v26 = 0u;
            long long v27 = 0u;
            long long v24 = 0u;
            long long v25 = 0u;
            long long v22 = 0u;
            long long v23 = 0u;
            long long v20 = 0u;
            long long v21 = 0u;
            long long v18 = 0u;
            long long v19 = 0u;
            long long v16 = 0u;
            long long v17 = 0u;
            *(_OWORD *)std::string __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Metainfo does not contain any alignment projections", 51);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          }
          std::vector<std::vector<int>>::__clear[abi:ne180100](a2);
        }
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "projections");
      uint64_t v9 = quasar::PTree::getChildWithoutSplit(v13 + 24, (unsigned __int8 **)__p);
      int v10 = (quasar::PTree *)v9;
      if (SBYTE7(v16) < 0)
      {
        operator delete(__p[0]);
        if (!v10) {
          goto LABEL_12;
        }
      }
      else if (!v9)
      {
        goto LABEL_12;
      }
      uint64_t v11 = quasar::PTree::begin(v10);
      if (v11 != quasar::PTree::end(v10))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "start");
        quasar::PTree::getInt<int>(v11 + 24, (uint64_t)__p);
      }
      char v8 = 1;
LABEL_12:
      ++v7;
      v13 += 88;
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Metainfo does not contain any alignment spans", 45);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
}

void sub_1B200395C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long __p, int a14, __int16 a15, char a16, char a17, uint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33)
{
}

void sub_1B2003AA0()
{
}

void sub_1B2003D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::join<std::vector<quasar::TranslationToken>>(uint64_t *a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::TranslationToken>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B2003ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::join<std::vector<quasar::AlternativeSelectionSpan>>(uint64_t *a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::AlternativeSelectionSpan>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B2004058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *quasar::joinToStream<std::vector<quasar::TranslationToken>>(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    unint64_t v6 = result;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      }
      uint64_t result = quasar::operator<<(v6, v3);
      char v7 = 0;
      v3 += 72;
    }
    while (v3 != v4);
  }
  return result;
}

void *quasar::joinToStream<std::vector<quasar::AlternativeSelectionSpan>>(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    unint64_t v6 = result;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      }
      uint64_t result = quasar::operator<<(v6, v3);
      char v7 = 0;
      v3 += 40;
    }
    while (v3 != v4);
  }
  return result;
}

void quasar::WordPronCache::~WordPronCache(quasar::WordPronCache *this)
{
  *(void *)this = &unk_1F0A52688;
  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy((uint64_t)this + 48, *((void **)this + 7));
  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  fst::SymbolTable::~SymbolTable((quasar::WordPronCache *)((char *)this + 8));
}

{
  uint64_t vars8;

  quasar::WordPronCache::~WordPronCache(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::WordPronCache::addWord(quasar::WordPronCache *this, std::string *a2, int a3)
{
  unint64_t v6 = &a2[2].__r_.__value_.__s.__data_[8];
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a2[2].__r_.__value_.__r.__words[1]);
  int v10 = (void *)*v7;
  char v8 = v7 + 1;
  uint64_t v9 = v10;
  if (v10 == v8) {
    goto LABEL_21;
  }
  unint64_t v11 = 0;
  do
  {
    if (*((_DWORD *)v9 + 8) == 1) {
      ++v11;
    }
    char v12 = (void *)v9[1];
    if (v12)
    {
      do
      {
        uint64_t v13 = v12;
        char v12 = (void *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        uint64_t v13 = (void *)v9[2];
        BOOL v14 = *v13 == (void)v9;
        uint64_t v9 = v13;
      }
      while (!v14);
    }
    uint64_t v9 = v13;
  }
  while (v13 != v8);
  if (v11 <= 0xA)
  {
LABEL_21:
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v57, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else {
      std::string v57 = *a2;
    }
    long long v22 = a2 + 1;
    if (SHIBYTE(a2[1].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v58, a2[1].__r_.__value_.__l.__data_, a2[1].__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = a2[1].__r_.__value_.__r.__words[2];
    }
    int data = (int)a2[2].__r_.__value_.__l.__data_;
    long long v23 = std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](v60, (uint64_t)v6);
    if (a3 == 3) {
      goto LABEL_30;
    }
    if (a3 != 1)
    {
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Encoding should be either QsrText or NotEncoded", 47);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v61);
    }
    uint64_t v24 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v23);
    if (quasar::QsrText::encodeTokenQsrTextWithMetadata(v24, a2, &v57))
    {
LABEL_30:
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v53, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      }
      else {
        std::string v53 = *a2;
      }
      if (SHIBYTE(a2[1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v54, a2[1].__r_.__value_.__l.__data_, a2[1].__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = a2[1].__r_.__value_.__r.__words[2];
      }
      int v55 = (int)a2[2].__r_.__value_.__l.__data_;
      long long v25 = std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](v56, (uint64_t)v6);
      if (a3 == 3)
      {
        uint64_t v26 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v25);
        quasar::QsrText::decodeQsrText(v26, (uint64_t)a2, (uint64_t)&v53);
      }
      uint64_t IsLegal = quasar::LmeDataFactory::wordIsLegal((quasar::LmeDataFactory *)&v53, (const quasar::LmeDataFactoryBase::Word *)0xFFFFFFFFLL);
      if (IsLegal)
      {
        long long v27 = (uint64_t **)((char *)this + 24);
        long long v28 = (quasar::WordPronCache *)((char *)this + 8);
        long long v29 = std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_unique_impl<quasar::LmeDataFactoryBase::Word &,fst::SymbolTable &>(v27, (const quasar::LmeDataFactoryBase::Word *)&v57, v28);
        if (!v30)
        {
          long long v31 = v29;
          uint64_t v32 = v29 + 4;
          quasar::LmePackedWord::unpacked((quasar::LmePackedWord *)(v29 + 4), v28, (uint64_t)&v61);
          unint64_t v33 = (char *)v65;
          unint64_t v51 = (long long *)*((void *)&v64 + 1);
          long long v52 = v65;
          if (*((void *)&v65 + 1))
          {
            *(void *)(v65 + 16) = &v52;
            *((void *)&v64 + 1) = &v65;
            long long v65 = 0uLL;
            unint64_t v33 = 0;
          }
          else
          {
            unint64_t v51 = &v52;
          }
          std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v64 + 8, v33);
          if (SHIBYTE(v63) < 0) {
            operator delete(*((void **)&v62 + 1));
          }
          uint64_t v47 = (uint64_t)v32;
          if (SBYTE7(v62) < 0) {
            operator delete((void *)v61);
          }
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v60);
          long long v41 = v39 + 1;
          long long v40 = (void *)*v39;
          if ((void *)*v39 != v39 + 1)
          {
            char v42 = 0;
            do
            {
              char v43 = quasar::LmeDataFactoryBase::PronSet::insert((uint64_t **)&v51, *((_DWORD *)v40 + 8), (uint64_t)(v40 + 5), *((float *)v40 + 16));
              uint64_t v44 = (void *)v40[1];
              if (v44)
              {
                do
                {
                  unint64_t v45 = v44;
                  uint64_t v44 = (void *)*v44;
                }
                while (v44);
              }
              else
              {
                do
                {
                  unint64_t v45 = (void *)v40[2];
                  BOOL v14 = *v45 == (void)v40;
                  long long v40 = v45;
                }
                while (!v14);
              }
              v42 |= v43;
              long long v40 = v45;
            }
            while (v45 != v41);
            if (v42)
            {
              std::__tree<std::string>::__remove_node_pointer(v27, v31);
              std::__destroy_at[abi:ne180100]<quasar::LmePackedWord,0>(v47);
              operator delete(v31);
              if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v50, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
              }
              else {
                std::string v50 = v57;
              }
              std::string::basic_string[abi:ne180100]<0>(v48, "UNKNOWN");
              quasar::LmeDataFactoryBase::Word::Word(&v61, &v50, v48, 0, &v51);
              std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_unique_impl<quasar::LmeDataFactoryBase::Word &,fst::SymbolTable &>(v27, (const quasar::LmeDataFactoryBase::Word *)&v61, v28);
              std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v64 + 8, (char *)v65);
              if (SHIBYTE(v63) < 0) {
                operator delete(*((void **)&v62 + 1));
              }
              if (SBYTE7(v62) < 0) {
                operator delete((void *)v61);
              }
              if (v49 < 0) {
                operator delete(v48[0]);
              }
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v50.__r_.__value_.__l.__data_);
              }
            }
          }
          std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v51, (char *)v52);
        }
      }
      else if (quasar::gLogLevel >= 6)
      {
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v61 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Skipping illegal word.", 22);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v61);
      }
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v56, (char *)v56[1]);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v61 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
        uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Skipping illegal word: \"", 24);
        int v35 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
        if (v35 >= 0) {
          int v36 = (const quasar::LmeDataFactoryBase::Word *)a2;
        }
        else {
          int v36 = (const quasar::LmeDataFactoryBase::Word *)a2->__r_.__value_.__r.__words[0];
        }
        if (v35 >= 0) {
          uint64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        }
        else {
          uint64_t size = a2->__r_.__value_.__l.__size_;
        }
        int v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"\"", 1);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v61);
      }
      uint64_t IsLegal = 0;
    }
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v60, (char *)v60[1]);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Not caching word with too many prons: \"", 39);
      int v16 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
      if (v16 >= 0) {
        long long v17 = (const quasar::LmeDataFactoryBase::Word *)a2;
      }
      else {
        long long v17 = (const quasar::LmeDataFactoryBase::Word *)a2->__r_.__value_.__r.__words[0];
      }
      if (v16 >= 0) {
        uint64_t v18 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      else {
        uint64_t v18 = a2->__r_.__value_.__l.__size_;
      }
      long long v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\" has ", 6);
      long long v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" prons", 6);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v61);
    }
    return 0;
  }
  return IsLegal;
}

void sub_1B200485C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_1B2004870(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B2004924);
}

void sub_1B20048CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(a31) < 0) {
    operator delete(a29);
  }
  JUMPOUT(0x1B200492CLL);
}

void sub_1B20048F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_1B2004904()
{
}

void sub_1B200490C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

BOOL quasar::WordPronCache::lookupWord(quasar::WordPronCache *this, const quasar::LmeDataFactoryBase::Word *a2, int a3, char **a4)
{
  quasar::LmeDataFactoryBase::PronSet::clear(a4);
  if (*((char *)a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else {
    std::string __str = *(std::string *)a2;
  }
  if (*((char *)a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else {
    std::string v40 = *(std::string *)((unsigned char *)a2 + 1);
  }
  int v41 = *((_DWORD *)a2 + 12);
  char v8 = std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](v42, (uint64_t)a2 + 56);
  if (a3 == 3) {
    goto LABEL_10;
  }
  if (a3 != 1)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    *(_OWORD *)long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    memset(v23, 0, sizeof(v23));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Encoding should be either QsrText or NotEncoded", 47);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v23);
  }
  uint64_t v9 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v8);
  if (quasar::QsrText::encodeTokenQsrTextWithMetadata(v9, (std::string *)a2, &__str))
  {
LABEL_10:
    v25[1] = 0;
    long long v26 = 0uLL;
    memset(v23, 0, sizeof(v23));
    long long v24 = 0u;
    LODWORD(v25[0]) = 0;
    std::string::operator=((std::string *)v23, &__str);
    uint64_t v10 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)this + 24, (const void **)v23);
    BOOL v11 = (quasar::WordPronCache *)((char *)this + 32) != (quasar::WordPronCache *)v10;
    if ((quasar::WordPronCache *)((char *)this + 32) != (quasar::WordPronCache *)v10)
    {
      quasar::LmePackedWord::unpacked((quasar::LmePackedWord *)(v10 + 32), (quasar::WordPronCache *)((char *)this + 8), (uint64_t)&v16);
      char v12 = (char *)(a4 + 1);
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)a4, a4[1]);
      uint64_t v13 = v21;
      *a4 = v20;
      a4[1] = (char *)v13;
      BOOL v14 = v22;
      a4[2] = v22;
      if (v14)
      {
        *(void *)(v13 + 16) = v12;
        long long v20 = (char *)&v21;
        uint64_t v21 = 0;
        long long v22 = 0;
        uint64_t v13 = 0;
      }
      else
      {
        *a4 = v12;
      }
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v20, (char *)v13);
      if (v19 < 0) {
        operator delete(__p);
      }
      if (v17 < 0) {
        operator delete(v16);
      }
    }
    if (v25[1])
    {
      *(void **)&long long v26 = v25[1];
      operator delete(v25[1]);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(*(void **)&v23[24]);
    }
    if ((v23[23] & 0x80000000) != 0) {
      operator delete(*(void **)v23);
    }
  }
  else
  {
    BOOL v11 = 0;
  }
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v42, (char *)v42[1]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_1B2004BAC(_Unwind_Exception *a1)
{
  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1B2004BE4()
{
  if (*(char *)(v0 - 97) < 0) {
    operator delete(*(void **)(v0 - 120));
  }
  if (*(char *)(v0 - 121) < 0) {
    operator delete(*(void **)(v0 - 144));
  }
  JUMPOUT(0x1B2004BDCLL);
}

void quasar::LmePackedWord::~LmePackedWord(quasar::LmePackedWord *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void quasar::WordPronCache::fromStream(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void *)(a1 + 32);
  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(a1 + 24, *(void **)(a1 + 32));
  *(v1 - 1) = v1;
  *uint64_t v1 = 0;
  v1[1] = 0;
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)&__p);
}

void sub_1B20058B4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B2005934);
}

void sub_1B20058DC()
{
}

void sub_1B200593C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B2005924);
}

void quasar::WordPronCache::toStream(uint64_t *a1, void *a2, int a3)
{
  if (a3 >= 18) {
    fst::SymbolTableImpl::Write(a1[2], a2);
  }
  kaldi::WriteBasicType<int>(a2, 1);
  unint64_t v6 = (char *)a1[3];
  if (v6 != (char *)(a1 + 4))
  {
    do
    {
      if (a3 < 18)
      {
        quasar::LmePackedWord::unpacked((quasar::LmePackedWord *)(v6 + 32), (const fst::SymbolTable *)(a1 + 1), (uint64_t)&v36);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v36;
        }
        kaldi::WriteToken(a2, 1, (char *)&__p);
        if (a3 < 16)
        {
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v39);
          char v17 = (void *)*v14;
          uint64_t v15 = v14 + 1;
          int v16 = v17;
          if (v17 != v15)
          {
            int v18 = 0;
            do
            {
              if (*((_DWORD *)v16 + 8) == 1) {
                ++v18;
              }
              char v19 = (void *)v16[1];
              if (v19)
              {
                do
                {
                  long long v20 = v19;
                  char v19 = (void *)*v19;
                }
                while (v19);
              }
              else
              {
                do
                {
                  long long v20 = (void *)v16[2];
                  BOOL v13 = *v20 == (void)v16;
                  int v16 = v20;
                }
                while (!v13);
              }
              int v16 = v20;
            }
            while (v20 != v15);
          }
          kaldi::WriteBasicType<int>(a2, 1);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v39);
          long long v22 = (char *)(v21 + 1);
          long long v23 = (char *)*v21;
          if ((void *)*v21 != v21 + 1)
          {
            do
            {
              if (*((_DWORD *)v23 + 8) == 1) {
                kaldi::WriteToken(a2, 1, v23 + 40);
              }
              long long v24 = (char *)*((void *)v23 + 1);
              if (v24)
              {
                do
                {
                  long long v25 = v24;
                  long long v24 = *(char **)v24;
                }
                while (v24);
              }
              else
              {
                do
                {
                  long long v25 = (char *)*((void *)v23 + 2);
                  BOOL v13 = *(void *)v25 == (void)v23;
                  long long v23 = v25;
                }
                while (!v13);
              }
              long long v23 = v25;
            }
            while (v25 != v22);
          }
        }
        else
        {
          quasar::LmeDataFactoryBase::PronSet::size((quasar::LmeDataFactoryBase::PronSet *)v39);
          kaldi::WriteBasicType<int>(a2, 1);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v39);
          char v8 = v7 + 1;
          uint64_t v9 = (void *)*v7;
          if ((void *)*v7 != v7 + 1)
          {
            do
            {
              uint64_t v10 = quasar::PronTypeToString(*((_DWORD *)v9 + 8));
              kaldi::WriteToken(a2, 1, v10);
              kaldi::WriteString(a2, 1, (uint64_t)(v9 + 5));
              kaldi::WriteBasicType<float>((uint64_t)a2, 1);
              BOOL v11 = (void *)v9[1];
              if (v11)
              {
                do
                {
                  char v12 = v11;
                  BOOL v11 = (void *)*v11;
                }
                while (v11);
              }
              else
              {
                do
                {
                  char v12 = (void *)v9[2];
                  BOOL v13 = *v12 == (void)v9;
                  uint64_t v9 = v12;
                }
                while (!v13);
              }
              uint64_t v9 = v12;
            }
            while (v12 != v8);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v39, v39[1]);
        if (v38 < 0) {
          operator delete(v37);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        kaldi::WriteToken(a2, 1, v6 + 32);
        quasar::LmePackedProns::write((uint64_t)(v6 + 88), a2, a3);
      }
      long long v26 = (uint64_t *)*((void *)v6 + 1);
      if (v26)
      {
        do
        {
          long long v27 = v26;
          long long v26 = (uint64_t *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          long long v27 = (uint64_t *)*((void *)v6 + 2);
          BOOL v13 = *v27 == (void)v6;
          unint64_t v6 = (char *)v27;
        }
        while (!v13);
      }
      unint64_t v6 = (char *)v27;
    }
    while (v27 != a1 + 4);
  }
  if (a3 > 15)
  {
    kaldi::WriteBasicType<int>(a2, 1);
    long long v28 = (char *)a1[6];
    long long v29 = a1 + 7;
    if (v28 != (char *)v29)
    {
      do
      {
        kaldi::WriteToken(a2, 1, v28 + 32);
        kaldi::WriteBasicType<int>(a2, 1);
        long long v30 = (char *)*((void *)v28 + 7);
        if (v30 != v28 + 64)
        {
          do
          {
            kaldi::WriteToken(a2, 1, v30 + 32);
            long long v31 = (char *)*((void *)v30 + 1);
            if (v31)
            {
              do
              {
                long long v32 = v31;
                long long v31 = *(char **)v31;
              }
              while (v31);
            }
            else
            {
              do
              {
                long long v32 = (char *)*((void *)v30 + 2);
                BOOL v13 = *(void *)v32 == (void)v30;
                long long v30 = v32;
              }
              while (!v13);
            }
            long long v30 = v32;
          }
          while (v32 != v28 + 64);
        }
        long long v33 = (uint64_t *)*((void *)v28 + 1);
        if (v33)
        {
          do
          {
            long long v34 = v33;
            long long v33 = (uint64_t *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            long long v34 = (uint64_t *)*((void *)v28 + 2);
            BOOL v13 = *v34 == (void)v28;
            long long v28 = (char *)v34;
          }
          while (!v13);
        }
        long long v28 = (char *)v34;
      }
      while (v34 != v29);
    }
  }
}

void sub_1B2005D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void quasar::WordPronCache::addTemplateForWord(uint64_t **a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::size_type v9 = *(void *)(a3 + 8);
      if (!v9) {
        return;
      }
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a3, v9);
    }
    else
    {
      if (!*(unsigned char *)(a3 + 23)) {
        return;
      }
      std::string v13 = *(std::string *)a3;
    }
    if (a4 == 3) {
      goto LABEL_12;
    }
    if (a4 != 1)
    {
      memset(v12, 0, sizeof(v12));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Encoding should be either QsrText or NotEncoded", 47);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
    }
    uint64_t v10 = quasar::QsrText::SingletonInstance((quasar::QsrText *)a1);
    if (quasar::QsrText::encodeTokenQsrTextWithMetadata(v10, (std::string *)a3, &v13))
    {
LABEL_12:
      *(void *)&v12[0] = a2;
      BOOL v11 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)v12);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)v11 + 7, (const void **)&v13.__r_.__value_.__l.__data_, (uint64_t)&v13);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B2005EC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

void quasar::WordPronCache::removeWordsWithoutTemplates(quasar::WordPronCache *this)
{
  uint64_t v1 = &unk_1F0A52688;
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)&v2);
}

void sub_1B2005FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::WordPronCache::~WordPronCache((quasar::WordPronCache *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::WordPronCache::copyTemplateDeltaTo(quasar::WordPronCache *this, quasar::WordPronCache *a2, char a3)
{
  memset(v35, 0, sizeof(v35));
  int v36 = 1065353216;
  uint64_t v5 = (unsigned __int8 *)*((void *)a2 + 6);
  unint64_t v6 = (char *)a2 + 56;
  if (v5 != (unsigned __int8 *)((char *)a2 + 56))
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v35, v5 + 32, (uint64_t)(v5 + 32));
      char v7 = (unsigned __int8 *)*((void *)v5 + 1);
      if (v7)
      {
        do
        {
          char v8 = v7;
          char v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          char v8 = (unsigned __int8 *)*((void *)v5 + 2);
          BOOL v9 = *(void *)v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != (unsigned __int8 *)v6);
  }
  uint64_t v10 = (quasar::WordPronCache *)*((void *)this + 6);
  if (v10 != (quasar::WordPronCache *)((char *)this + 56))
  {
    while (1)
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v35, (unsigned __int8 *)v10 + 32))
      {
        BOOL v11 = (void *)*((void *)v10 + 7);
        if (v11 != (void *)((char *)v10 + 64)) {
          break;
        }
      }
LABEL_43:
      uint64_t v15 = (quasar::WordPronCache *)*((void *)v10 + 1);
      if (v15)
      {
        do
        {
          int v16 = v15;
          uint64_t v15 = *(quasar::WordPronCache **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          int v16 = (quasar::WordPronCache *)*((void *)v10 + 2);
          BOOL v9 = *(void *)v16 == (void)v10;
          uint64_t v10 = v16;
        }
        while (!v9);
      }
      uint64_t v10 = v16;
      if (v16 == (quasar::WordPronCache *)((char *)this + 56)) {
        return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v35);
      }
    }
    while (1)
    {
      quasar::LmeDataFactoryBase::PronSet::PronSet(v34);
      char v12 = v11 + 4;
      if (*((char *)v11 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, (const std::string::value_type *)v11[4], v11[5]);
      }
      else
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v12;
        v28.__r_.__value_.__r.__words[2] = v11[6];
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      quasar::LmeDataFactoryBase::Word::Word(v29, &v28, __p, 0);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (quasar::WordPronCache::lookupWord(this, (const quasar::LmeDataFactoryBase::Word *)v29, 3, v34))
      {
        if (*((char *)v11 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(&v21, (const std::string::value_type *)v11[4], v11[5]);
        }
        else
        {
          *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *v12;
          v21.__r_.__value_.__r.__words[2] = v11[6];
        }
        std::string::basic_string[abi:ne180100]<0>(v19, "");
        quasar::LmeDataFactoryBase::Word::Word(&v22, &v21, v19, 1, v34);
        quasar::WordPronCache::addWord(a2, &v22, 3);
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v25, v25[1]);
        if (v24 < 0) {
          operator delete(v23);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v21.__r_.__value_.__l.__data_);
        }
      }
      else if (a3)
      {
        goto LABEL_33;
      }
      quasar::WordPronCache::addTemplateForWord((uint64_t **)a2, (uint64_t)v10 + 32, (uint64_t)(v11 + 4), 3);
LABEL_33:
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v33, v33[1]);
      if (v32 < 0) {
        operator delete(v31);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v34, v34[1]);
      std::string v13 = (void *)v11[1];
      if (v13)
      {
        do
        {
          BOOL v14 = v13;
          std::string v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          BOOL v14 = (void *)v11[2];
          BOOL v9 = *v14 == (void)v11;
          BOOL v11 = v14;
        }
        while (!v9);
      }
      BOOL v11 = v14;
      if (v14 == (void *)((char *)v10 + 64)) {
        goto LABEL_43;
      }
    }
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v35);
}

void sub_1B20062E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v46 - 144);
  _Unwind_Resume(a1);
}

uint64_t quasar::tokenMapToStream(void *a1, char **a2)
{
  uint64_t result = kaldi::WriteBasicType<int>(a1, 1);
  uint64_t v5 = *a2;
  if (*a2 != (char *)(a2 + 1))
  {
    do
    {
      if (quasar::gLogLevel >= 6)
      {
        memset(v18, 0, sizeof(v18));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
        unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"tokenMapToStream dump, key=", 27);
        int v7 = v5[55];
        if (v7 >= 0) {
          uint64_t v8 = (uint64_t)(v5 + 32);
        }
        else {
          uint64_t v8 = *((void *)v5 + 4);
        }
        if (v7 >= 0) {
          uint64_t v9 = v5[55];
        }
        else {
          uint64_t v9 = *((void *)v5 + 5);
        }
        uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
        BOOL v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" value=", 7);
        int v12 = v5[79];
        if (v12 >= 0) {
          uint64_t v13 = (uint64_t)(v5 + 56);
        }
        else {
          uint64_t v13 = *((void *)v5 + 7);
        }
        if (v12 >= 0) {
          uint64_t v14 = v5[79];
        }
        else {
          uint64_t v14 = *((void *)v5 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v18);
      }
      kaldi::WriteToken(a1, 1, v5 + 32);
      uint64_t result = (uint64_t)kaldi::WriteToken(a1, 1, v5 + 56);
      uint64_t v15 = (char *)*((void *)v5 + 1);
      if (v15)
      {
        do
        {
          int v16 = (char **)v15;
          uint64_t v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          int v16 = (char **)*((void *)v5 + 2);
          BOOL v17 = *v16 == v5;
          uint64_t v5 = (char *)v16;
        }
        while (!v17);
      }
      uint64_t v5 = (char *)v16;
    }
    while (v16 != a2 + 1);
  }
  return result;
}

void sub_1B2006508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::EnumerationTypes::fromStream(uint64_t a1, uint64_t *a2)
{
  quasar::tokenMapFromStream(a2, (uint64_t)&v6);
  uint64_t v3 = a1 + 8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(void **)(a1 + 8));
  uint64_t v4 = v7;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = v8;
  *(void *)(a1 + 16) = v8;
  if (v5)
  {
    v4[2] = v3;
    unint64_t v6 = &v7;
    int v7 = 0;
    uint64_t v8 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    *(void *)a1 = v3;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v6, v4);
}

void quasar::tokenMapFromStream(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  int v34 = 0;
  kaldi::ReadBasicType<int>(a1, 1, (uint64_t)&v34);
  if (quasar::gLogLevel >= 5)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    memset(v18, 0, sizeof(v18));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)": nMapSize = ", 13);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v18);
  }
  if (v34 >= 1)
  {
    for (int i = 0; i < v34; ++i)
    {
      long long v16 = 0uLL;
      uint64_t v17 = 0;
      long long v14 = 0uLL;
      uint64_t v15 = 0;
      kaldi::ReadToken(a1, 1, (uint64_t)&v16);
      kaldi::ReadToken(a1, 1, (uint64_t)&v14);
      if (quasar::gLogLevel >= 5)
      {
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v19 = 0u;
        memset(v18, 0, sizeof(v18));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"LME STREAM DUMP ", 16);
        std::istream::tellg();
        unint64_t v6 = (void *)std::ostream::operator<<();
        int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": key = ", 8);
        if (v17 >= 0) {
          uint64_t v8 = (uint64_t)&v16;
        }
        else {
          uint64_t v8 = v16;
        }
        if (v17 >= 0) {
          uint64_t v9 = HIBYTE(v17);
        }
        else {
          uint64_t v9 = *((void *)&v16 + 1);
        }
        uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v8, v9);
        BOOL v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" value = ", 9);
        if (v15 >= 0) {
          uint64_t v12 = (uint64_t)&v14;
        }
        else {
          uint64_t v12 = v14;
        }
        if (v15 >= 0) {
          uint64_t v13 = HIBYTE(v15);
        }
        else {
          uint64_t v13 = *((void *)&v14 + 1);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v12, v13);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v18);
      }
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)v18, &v16, &v14);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>((uint64_t **)a2, (const void **)v18, (uint64_t)v18);
      if (SHIBYTE(v19) < 0) {
        operator delete(*(void **)&v18[24]);
      }
      if ((v18[23] & 0x80000000) != 0) {
        operator delete(*(void **)v18);
      }
      if (SHIBYTE(v15) < 0) {
        operator delete((void *)v14);
      }
      if (SHIBYTE(v17) < 0) {
        operator delete((void *)v16);
      }
    }
  }
}

void sub_1B2006864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a21);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v21, *(void **)(v21 + 8));
  _Unwind_Resume(a1);
}

BOOL quasar::EnumerationTypes::insert(uint64_t **a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a1, (const void **)a2);
  if (a1 + 1 == (uint64_t **)v6)
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>((std::string *)v12, (long long *)a2, a3);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(a1, (const void **)v12, (uint64_t)v12);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v12[0]);
    }
  }
  else if (quasar::gLogLevel >= 4)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v14 = 0u;
    *(_OWORD *)uint64_t v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Duplicate key is being added to enumerationTypeMap with key=", 60);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = (const void *)a2;
    }
    else {
      uint64_t v9 = *(const void **)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v12);
  }
  return a1 + 1 == (uint64_t **)v6;
}

void sub_1B2006A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::LmeData::~LmeData(quasar::LmeData *this)
{
  *(void *)this = &unk_1F0A590D0;
  std::__tree<std::string>::destroy((uint64_t)this + 368, *((char **)this + 47));
  std::__tree<std::string>::destroy((uint64_t)this + 344, *((char **)this + 44));
  if (*((char *)this + 343) < 0) {
    operator delete(*((void **)this + 40));
  }
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }
  if (*((char *)this + 295) < 0) {
    operator delete(*((void **)this + 34));
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 240, *((void **)this + 31));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 200, *((void **)this + 26));
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  quasar::WordPronCache::~WordPronCache((quasar::LmeData *)((char *)this + 88));
  quasar::WordPronCache::~WordPronCache((quasar::LmeData *)((char *)this + 16));
}

{
  uint64_t vars8;

  quasar::LmeData::~LmeData(this);
  JUMPOUT(0x1B3EA8670);
}

BOOL quasar::LmeData::lookupWordPronCache(quasar::LmeData *this, const quasar::LmeDataFactoryBase::Word *a2, int a3, char **a4)
{
  return quasar::WordPronCache::lookupWord((quasar::LmeData *)((char *)this + 16), a2, a3, a4);
}

BOOL quasar::LmeData::lookupWordEmbeddingCache(quasar::LmeData *this, const quasar::LmeDataFactoryBase::Word *a2, int a3, char **a4)
{
  return quasar::WordPronCache::lookupWord((quasar::LmeData *)((char *)this + 88), a2, a3, a4);
}

uint64_t quasar::LmeData::removeFstData(uint64_t **a1, const void **a2)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__erase_unique<std::string>(a1 + 25, a2);
  std::__tree<std::string>::__erase_unique<std::string>(a1 + 43, a2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__erase_unique<std::string>(a1 + 30, a2);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__erase_unique<std::string>(a1 + 8, a2);
  return std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__erase_unique<std::string>(a1 + 17, a2);
}

uint64_t quasar::LmeData::toStream(uint64_t a1, void *a2, int a3)
{
  int v3 = a3;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if ((a3 - 20) > 0xFFFFFFF8)
  {
    quasar::ioutils::WriteQuasarHeader(a2, 1);
    if (v3 == 14)
    {
      *((void *)&v47 + 1) = 0;
      *(void *)&v48[0] = 0;
      *(void *)&long long v47 = (char *)&v47 + 8;
      quasar::tokenMapToStream(a2, (char **)&v47);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v47, *((void **)&v47 + 1));
      int v3 = 14;
    }
  }
  else
  {
    if (quasar::gLogLevel >= 2)
    {
      long long v51 = 0u;
      memset(v52, 0, 144);
      *(_OWORD *)std::string __p = 0u;
      long long v50 = 0u;
      memset(v48, 0, sizeof(v48));
      long long v47 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Invalid write version choice: ", 30);
      uint64_t v6 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", it is now set to: ", 20);
      std::ostream::operator<<();
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v47);
    }
    quasar::ioutils::WriteQuasarHeader(a2, 1);
    int v3 = 19;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v47);
  kaldi::WriteBasicType<int>(v48, 1);
  kaldi::WriteBasicType<long long>(v48, 1);
  kaldi::WriteBasicType<long long>(v48, 1);
  kaldi::WriteBasicType<unsigned int>(v48, 1);
  kaldi::WriteToken(v48, 1, (char *)(a1 + 176));
  uint64_t v46 = a1;
  if (v3 < 0xF) {
    goto LABEL_102;
  }
  kaldi::WriteString(v48, 1, a1 + 272);
  kaldi::WriteString(v48, 1, a1 + 296);
  kaldi::WriteString(v48, 1, a1 + 320);
  kaldi::WriteBasicType<int>(v48, 1);
  int v7 = *(char **)(a1 + 344);
  if (v7 != (char *)(v46 + 352))
  {
    do
    {
      if (quasar::gLogLevel >= 6)
      {
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v54 = 0u;
        memset(v53, 0, sizeof(v53));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
        int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"basicTypeMapToStream dump, key=", 31);
        int v9 = v7[55];
        if (v9 >= 0) {
          uint64_t v10 = (uint64_t)(v7 + 32);
        }
        else {
          uint64_t v10 = *((void *)v7 + 4);
        }
        if (v9 >= 0) {
          uint64_t v11 = v7[55];
        }
        else {
          uint64_t v11 = *((void *)v7 + 5);
        }
        uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" value=", 7);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v53);
      }
      kaldi::WriteToken(v48, 1, v7 + 32);
      kaldi::WriteBasicType<long long>(v48, 1);
      uint64_t v13 = (char *)*((void *)v7 + 1);
      if (v13)
      {
        do
        {
          long long v14 = v13;
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (char *)*((void *)v7 + 2);
          BOOL v15 = *(void *)v14 == (void)v7;
          int v7 = v14;
        }
        while (!v15);
      }
      int v7 = v14;
    }
    while (v14 != (char *)(v46 + 352));
  }
  if (v3 < 16)
  {
LABEL_102:
    if (*(unsigned char *)(v46 + 392))
    {
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v54 = 0u;
      memset(v53, 0, sizeof(v53));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Bug! writeVersion is too low for useWordpiece=true", 50);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v53);
    }
  }
  else
  {
    uint64_t v16 = v46;
    kaldi::WriteBasicType<BOOL>(v48, 1, *(unsigned __int8 *)(v46 + 392));
    if (v3 < 0x11) {
      goto LABEL_44;
    }
    kaldi::WriteBasicType<int>(v48, 1);
    long long v17 = *(void **)(v46 + 368);
    if (v17 == (void *)(v46 + 376)) {
      goto LABEL_44;
    }
    do
    {
      if (quasar::gLogLevel >= 6)
      {
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v54 = 0u;
        memset(v53, 0, sizeof(v53));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
        long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"stringSetToStream dump, str=", 28);
        int v19 = *((char *)v17 + 55);
        if (v19 >= 0) {
          uint64_t v20 = (uint64_t)(v17 + 4);
        }
        else {
          uint64_t v20 = v17[4];
        }
        if (v19 >= 0) {
          uint64_t v21 = *((unsigned __int8 *)v17 + 55);
        }
        else {
          uint64_t v21 = v17[5];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v53);
      }
      kaldi::WriteString(v48, 1, (uint64_t)(v17 + 4));
      long long v22 = (void *)v17[1];
      if (v22)
      {
        do
        {
          long long v23 = v22;
          long long v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          long long v23 = (void *)v17[2];
          BOOL v15 = *v23 == (void)v17;
          long long v17 = v23;
        }
        while (!v15);
      }
      long long v17 = v23;
    }
    while (v23 != (void *)(v46 + 376));
  }
  uint64_t v16 = v46;
  if (v3 <= 13) {
    quasar::WordPronCache::toStream((uint64_t *)(v46 + 16), v48, 13);
  }
LABEL_44:
  quasar::tokenMapToStream(v48, (char **)(v16 + 240));
  if (quasar::gLogLevel >= 5)
  {
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v54 = 0u;
    memset(v53, 0, sizeof(v53));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"LME STREAM WRITE ", 17);
    long long v24 = (char *)v48 + *(void *)(*(void *)&v48[0] - 24);
    if ((v24[32] & 5) != 0)
    {
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      uint64_t v77 = -1;
    }
    else
    {
      (*(void (**)(long long *__return_ptr))(**((void **)v24 + 5) + 32))(&v69);
    }
    long long v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": About to write FSTs", 21);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v53);
  }
  long long v26 = *(char **)(v46 + 200);
  if (v26 != (char *)(v46 + 208))
  {
    do
    {
      kaldi::WriteToken(v48, 1, v26 + 32);
      if (quasar::gLogLevel >= 6)
      {
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v54 = 0u;
        memset(v53, 0, sizeof(v53));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"LME STREAM WRITE ", 17);
        long long v27 = (char *)v48 + *(void *)(*(void *)&v48[0] - 24);
        if ((v27[32] & 5) != 0)
        {
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          uint64_t v77 = -1;
        }
        else
        {
          (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&v69);
        }
        long long v28 = (void *)std::ostream::operator<<();
        long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": templateName = ", 17);
        int v30 = v26[55];
        if (v30 >= 0) {
          uint64_t v31 = (uint64_t)(v26 + 32);
        }
        else {
          uint64_t v31 = *((void *)v26 + 4);
        }
        if (v30 >= 0) {
          uint64_t v32 = v26[55];
        }
        else {
          uint64_t v32 = *((void *)v26 + 5);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v53);
      }
      uint64_t v33 = *((void *)v26 + 7);
      std::string::basic_string[abi:ne180100]<0>(&v69, "");
      char v34 = FLAGS_fst_align;
      if (SBYTE7(v70) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v53, (const std::string::value_type *)v69, *((std::string::size_type *)&v69 + 1));
      }
      else
      {
        *(_OWORD *)std::string v53 = v69;
        *(void *)&v53[16] = v70;
      }
      *(_WORD *)&v53[24] = 1;
      v53[26] = 0;
      v53[27] = v34;
      (*(void (**)(uint64_t, _OWORD *, unsigned char *))(*(void *)v33 + 96))(v33, v48, v53);
      if ((v53[23] & 0x80000000) != 0) {
        operator delete(*(void **)v53);
      }
      if (SBYTE7(v70) < 0) {
        operator delete((void *)v69);
      }
      if (quasar::gLogLevel >= 6)
      {
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v54 = 0u;
        memset(v53, 0, sizeof(v53));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"LME STREAM WRITE ", 17);
        uint64_t v35 = (char *)v48 + *(void *)(*(void *)&v48[0] - 24);
        if ((v35[32] & 5) != 0)
        {
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          uint64_t v77 = -1;
        }
        else
        {
          (*(void (**)(long long *__return_ptr))(**((void **)v35 + 5) + 32))(&v69);
        }
        int v36 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": <FST>", 7);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v53);
      }
      long long v37 = (char *)*((void *)v26 + 1);
      if (v37)
      {
        do
        {
          char v38 = v37;
          long long v37 = *(char **)v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          char v38 = (char *)*((void *)v26 + 2);
          BOOL v15 = *(void *)v38 == (void)v26;
          long long v26 = v38;
        }
        while (!v15);
      }
      long long v26 = v38;
    }
    while (v38 != (char *)(v46 + 208));
  }
  quasar::QsrTextSymbolTable::Write(*(void *)(v46 + 224), (uint64_t)v48, 3, 1);
  if (v3 < 19)
  {
    uint64_t v39 = v46;
    if (v3 < 14) {
      goto LABEL_83;
    }
  }
  else
  {
    uint64_t v39 = v46;
    quasar::WordPronCache::toStream((uint64_t *)(v46 + 88), v48, v3);
  }
  quasar::WordPronCache::toStream((uint64_t *)(v39 + 16), v48, v3);
LABEL_83:
  if (quasar::gLogLevel >= 5)
  {
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v54 = 0u;
    memset(v53, 0, sizeof(v53));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"LME STREAM WRITE ", 17);
    std::string v40 = (char *)v48 + *(void *)(*(void *)&v48[0] - 24);
    if ((v40[32] & 5) != 0)
    {
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      uint64_t v77 = -1;
    }
    else
    {
      (*(void (**)(long long *__return_ptr))(**((void **)v40 + 5) + 32))(&v69);
    }
    int v41 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": done.", 7);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v53);
  }
  std::stringbuf::str();
  if (v53[23] >= 0) {
    char v42 = v53;
  }
  else {
    char v42 = *(unsigned char **)v53;
  }
  if (v53[23] >= 0) {
    uint64_t v43 = v53[23];
  }
  else {
    uint64_t v43 = *(void *)&v53[8];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v42, v43);
  if ((v53[23] & 0x80000000) != 0) {
    operator delete(*(void **)v53);
  }
  *(void *)&long long v47 = *MEMORY[0x1E4FBA408];
  uint64_t v44 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v48[-1] + *(void *)(v47 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v48[0] = v44;
  *((void *)&v48[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v50) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](v52);
}

void sub_1B2007720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
}

uint64_t kaldi::WriteBasicType<long long>(void *a1, int a2)
{
  if (a2)
  {
    std::ostream::put();
    uint64_t result = std::ostream::write();
  }
  else
  {
    uint64_t v4 = (void *)std::ostream::operator<<();
    uint64_t result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteBasicType.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B20078E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeData::fromStream(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4)
{
  *(_DWORD *)(a1 + 268) = 1;
  int QuasarHeader = quasar::ioutils::ReadQuasarHeader(a2, 1);
  *(_DWORD *)(a1 + 8) = QuasarHeader;
  if (quasar::gLogLevel >= 5)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"formatVersion=", 14);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v10);
    int QuasarHeader = *(_DWORD *)(a1 + 8);
  }
  if ((QuasarHeader - 20) > 0xFFFFFFF8)
  {
    if (QuasarHeader == 14)
    {
      quasar::tokenMapFromStream(a2, (uint64_t)&v10);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v10, *((void **)&v10 + 1));
      int QuasarHeader = *(_DWORD *)(a1 + 8);
    }
    uint64_t result = quasar::LmeData::readBodyFromStream(a1, QuasarHeader, a2, a3, a4);
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v10 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Failed to read LmeData stream. Incorrect version: ", 50);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v10);
    }
    uint64_t result = 4;
  }
  *(_DWORD *)(a1 + 268) = result;
  return result;
}

void sub_1B2007A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25)
{
  if (a2 == 1)
  {
    long long v26 = __cxa_begin_catch(exception_object);
    if (quasar::gLogLevel >= 1)
    {
      long long v27 = v26;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"Error reading LmeData stream: ", 30);
      long long v29 = (const char *)(*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
      size_t v30 = strlen(v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
    *(_DWORD *)(v25 + 268) = 6;
    __cxa_end_catch();
    JUMPOUT(0x1B2007A58);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LmeData::readBodyFromStream(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (quasar::gLogLevel >= 6)
  {
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    memset(v66, 0, sizeof(v66));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"LME STREAM DUMP [Body]", 22);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v66);
  }
  kaldi::ReadBasicType<int>(a3, 1, a1 + 264);
  if (quasar::gLogLevel >= 5)
  {
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    memset(v66, 0, sizeof(v66));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    int v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": g2pModelVersiouint64_t n = ", 20);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v66);
  }
  kaldi::ReadBasicType<long long>(a3, 1, a1 + 160);
  if (quasar::gLogLevel >= 5)
  {
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    memset(v66, 0, sizeof(v66));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    long long v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": symTableFirstKey = ", 21);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v66);
  }
  kaldi::ReadBasicType<long long>(a3, 1, a1 + 168);
  if (quasar::gLogLevel >= 5)
  {
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    memset(v66, 0, sizeof(v66));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    long long v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": symTableLastKey = ", 20);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v66);
  }
  int v63 = 0;
  kaldi::ReadBasicType<unsigned int>(a3, 1, (uint64_t)&v63);
  if (quasar::gLogLevel >= 5)
  {
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    memset(v66, 0, sizeof(v66));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    long long v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": fstSize = ", 12);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v66);
  }
  kaldi::ReadToken(a3, 1, a1 + 176);
  if (quasar::gLogLevel >= 5)
  {
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    memset(v66, 0, sizeof(v66));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"LME STREAM DUMP ", 16);
    std::istream::tellg();
    long long v13 = (void *)std::ostream::operator<<();
    long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": phoneSetVersion = ", 20);
    int v15 = *(char *)(a1 + 199);
    if (v15 >= 0) {
      uint64_t v16 = a1 + 176;
    }
    else {
      uint64_t v16 = *(void *)(a1 + 176);
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a1 + 199);
    }
    else {
      uint64_t v17 = *(void *)(a1 + 184);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v66);
  }
  if (a2 <= 14) {
    goto LABEL_98;
  }
  kaldi::ReadString(a3, 1, a1 + 272);
  kaldi::ReadString(a3, 1, a1 + 296);
  uint64_t v18 = a5[23];
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = a5[23];
  }
  else {
    uint64_t v19 = *((void *)a5 + 1);
  }
  if (!v19)
  {
LABEL_54:
    kaldi::ReadString(a3, 1, a1 + 320);
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    long long v60 = &v61;
    int v65 = 0;
    kaldi::ReadBasicType<int>(a3, 1, (uint64_t)&v65);
    if (quasar::gLogLevel >= 5)
    {
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      memset(v66, 0, sizeof(v66));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"LME STREAM DUMP ", 16);
      std::istream::tellg();
      uint64_t v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": nMapSize = ", 13);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v66);
    }
    if (v65 >= 1)
    {
      for (int i = 0; i < v65; ++i)
      {
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v83 = 0;
        uint64_t v64 = 0;
        kaldi::ReadToken(a3, 1, (uint64_t)__p);
        kaldi::ReadBasicType<long long>(a3, 1, (uint64_t)&v64);
        if (quasar::gLogLevel >= 5)
        {
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v67 = 0u;
          memset(v66, 0, sizeof(v66));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"LME STREAM DUMP ", 16);
          std::istream::tellg();
          uint64_t v35 = (void *)std::ostream::operator<<();
          int v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": key = ", 8);
          if (v83 >= 0) {
            long long v37 = __p;
          }
          else {
            long long v37 = (void **)__p[0];
          }
          if (v83 >= 0) {
            uint64_t v38 = HIBYTE(v83);
          }
          else {
            uint64_t v38 = (uint64_t)__p[1];
          }
          uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" value = ", 9);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v66);
        }
        if (SHIBYTE(v83) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v66, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)long long v66 = *(_OWORD *)__p;
          *(void *)&v66[16] = v83;
        }
        *(void *)&v66[24] = v64;
        std::__tree<std::__value_type<std::string,quasar::PronGuessStats::Record>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PronGuessStats::Record>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::PronGuessStats::Record>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::PronGuessStats::Record>>((uint64_t **)&v60, (const void **)v66, (uint64_t)v66);
        if ((v66[23] & 0x80000000) != 0) {
          operator delete(*(void **)v66);
        }
        if (SHIBYTE(v83) < 0) {
          operator delete(__p[0]);
        }
      }
    }
    uint64_t v40 = a1 + 352;
    std::__tree<std::string>::destroy(a1 + 344, *(char **)(a1 + 352));
    uint64_t v41 = v61;
    *(void *)(a1 + 344) = v60;
    *(void *)(a1 + 3--*(_DWORD *)(a9 + 52) = v41;
    uint64_t v42 = v62;
    *(void *)(a1 + 360) = v62;
    if (v42)
    {
      *(void *)(v41 + 16) = v40;
      long long v60 = &v61;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v41 = 0;
    }
    else
    {
      *(void *)(a1 + 344) = v40;
    }
    std::__tree<std::string>::destroy((uint64_t)&v60, (char *)v41);
    if (a2 >= 16)
    {
      kaldi::ReadBasicType<BOOL>(a3, 1, (char *)(a1 + 392));
      if (a2 < 0x11) {
        goto LABEL_102;
      }
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      long long v60 = &v61;
      LODWORD(v64) = 0;
      kaldi::ReadBasicType<int>(a3, 1, (uint64_t)&v64);
      if (quasar::gLogLevel >= 5)
      {
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v67 = 0u;
        memset(v66, 0, sizeof(v66));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"LME STREAM DUMP ", 16);
        std::istream::tellg();
        uint64_t v43 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": nSetSize = ", 13);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v66);
      }
      if ((int)v64 >= 1)
      {
        int v44 = 0;
        do
        {
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v83 = 0;
          kaldi::ReadString(a3, 1, (uint64_t)__p);
          if (quasar::gLogLevel >= 5)
          {
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            long long v67 = 0u;
            memset(v66, 0, sizeof(v66));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"LME STREAM DUMP ", 16);
            std::istream::tellg();
            unint64_t v45 = (void *)std::ostream::operator<<();
            uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": str = ", 8);
            if (v83 >= 0) {
              long long v47 = __p;
            }
            else {
              long long v47 = (void **)__p[0];
            }
            if (v83 >= 0) {
              uint64_t v48 = HIBYTE(v83);
            }
            else {
              uint64_t v48 = (uint64_t)__p[1];
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v66);
          }
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v60, (const void **)__p, (uint64_t)__p);
          if (SHIBYTE(v83) < 0) {
            operator delete(__p[0]);
          }
          ++v44;
        }
        while (v44 < (int)v64);
      }
      uint64_t v49 = a1 + 376;
      std::__tree<std::string>::destroy(a1 + 368, *(char **)(a1 + 376));
      uint64_t v50 = v61;
      *(void *)(a1 + 368) = v60;
      *(void *)(a1 + 376) = v50;
      uint64_t v51 = v62;
      *(void *)(a1 + 3--*(_DWORD *)(a9 + 84) = v62;
      if (v51)
      {
        *(void *)(v50 + 16) = v49;
        long long v60 = &v61;
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        uint64_t v50 = 0;
      }
      else
      {
        *(void *)(a1 + 368) = v49;
      }
      std::__tree<std::string>::destroy((uint64_t)&v60, (char *)v50);
    }
LABEL_98:
    if (a2 < 14)
    {
      if (quasar::gLogLevel >= 6)
      {
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v67 = 0u;
        memset(v66, 0, sizeof(v66));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"LME STREAM DUMP [Pron Cache]", 28);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v66);
      }
      quasar::WordPronCache::fromStream(a1 + 16);
    }
LABEL_102:
    quasar::EnumerationTypes::fromStream(a1 + 240, a3);
    if (quasar::gLogLevel >= 6)
    {
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      memset(v66, 0, sizeof(v66));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"LME STREAM DUMP [Body]", 22);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v66);
    }
    std::istream::tellg();
    if (quasar::gLogLevel >= 5)
    {
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      memset(v66, 0, sizeof(v66));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"LME STREAM DUMP ", 16);
      std::istream::tellg();
      long long v52 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)": About to read FSTs", 20);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v66);
    }
    long long v54 = *(void **)(a1 + 208);
    std::string v53 = (uint64_t **)(a1 + 208);
    std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)(v53 - 1), v54);
    *(v53 - 1) = (uint64_t *)v53;
    void *v53 = 0;
    v53[1] = 0;
    if (v63)
    {
      long long v60 = 0;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      kaldi::ReadToken(a3, 1, (uint64_t)&v60);
      if (quasar::gLogLevel >= 6)
      {
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v67 = 0u;
        memset(v66, 0, sizeof(v66));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"LME STREAM DUMP ", 16);
        std::istream::tellg();
        long long v55 = (void *)std::ostream::operator<<();
        long long v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": templateName = ", 17);
        if (v62 >= 0) {
          long long v57 = &v60;
        }
        else {
          long long v57 = v60;
        }
        if (v62 >= 0) {
          uint64_t v58 = HIBYTE(v62);
        }
        else {
          uint64_t v58 = v61;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v66);
      }
      __p[0] = &v60;
      std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v53 - 1, (const void **)&v60, (uint64_t)&std::piecewise_construct, (long long **)__p);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      fst::FstReadOptions::FstReadOptions(v66, __p, 0, 0, 0);
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read();
    }
    std::string::basic_string[abi:ne180100]<0>(v66, "lme");
    uint64_t v59 = fst::SymbolTable::Read(a3, (const std::string *)v66);
    std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(&v60, v59);
  }
  uint64_t v20 = *(unsigned __int8 *)(a1 + 319);
  int v21 = (char)v20;
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = *(void *)(a1 + 304);
  }
  if (v19 != v20) {
    goto LABEL_37;
  }
  if (v21 >= 0) {
    long long v22 = (unsigned __int8 *)(a1 + 296);
  }
  else {
    long long v22 = *(unsigned __int8 **)(a1 + 296);
  }
  if ((v18 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a5, v22, *((void *)a5 + 1))) {
      goto LABEL_37;
    }
    goto LABEL_54;
  }
  if (!a5[23]) {
    goto LABEL_54;
  }
  long long v23 = a5;
  while (*v23 == *v22)
  {
    ++v23;
    ++v22;
    if (!--v18) {
      goto LABEL_54;
    }
  }
LABEL_37:
  if (quasar::gLogLevel >= 5)
  {
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    memset(v66, 0, sizeof(v66));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Expected asset path does not match LME Data's asset path. LME Data should be regenerated. Quitting deserialization early.", 121);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v66);
    if (quasar::gLogLevel >= 5)
    {
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      memset(v66, 0, sizeof(v66));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
      long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"expected assetPath=", 19);
      int v25 = (char)a5[23];
      uint64_t v26 = v25 >= 0 ? (uint64_t)a5 : *(void *)a5;
      uint64_t v27 = v25 >= 0 ? a5[23] : *((void *)a5 + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v66);
      if (quasar::gLogLevel >= 5)
      {
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v67 = 0u;
        memset(v66, 0, sizeof(v66));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
        long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"deserialized assetPath=", 23);
        int v29 = *(char *)(a1 + 319);
        if (v29 >= 0) {
          uint64_t v30 = a1 + 296;
        }
        else {
          uint64_t v30 = *(void *)(a1 + 296);
        }
        if (v29 >= 0) {
          uint64_t v31 = *(unsigned __int8 *)(a1 + 319);
        }
        else {
          uint64_t v31 = *(void *)(a1 + 304);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v66);
      }
    }
  }
  return 7;
}

void sub_1B20092C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34,long long a35,long long a36,long long a37,long long a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a2 == 1)
  {
    int v44 = __cxa_begin_catch(exception_object);
    if (quasar::gLogLevel >= 1)
    {
      unint64_t v45 = v44;
      a37 = 0u;
      a38 = 0u;
      a35 = 0u;
      a36 = 0u;
      a33 = 0u;
      a34 = 0u;
      a31 = 0u;
      a32 = 0u;
      a29 = 0u;
      a30 = 0u;
      a27 = 0u;
      a28 = 0u;
      a25 = 0u;
      a26 = 0u;
      a23 = 0u;
      a24 = 0u;
      a22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a22);
      uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a22, (uint64_t)"Error reading LmeData stream: ", 30);
      long long v47 = (const char *)(*(uint64_t (**)(void *))(*(void *)v45 + 16))(v45);
      size_t v48 = strlen(v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a22);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B2008D0CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::ReadBasicType<long long>(void *a1, int a2, uint64_t a3)
{
  v10[51] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v4 = std::istream::get();
    if (v4 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "ReadBasicType: encountered end of stream.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    if (v4 << 24 != 0x8000000)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ReadBasicType: did not get expected integer type, ", 50);
      int v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" vs. ", 5);
      int v8 = (void *)std::ostream::operator<<();
      int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)".  You can change this code to successfully", 43);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, " read it later, if needed.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    uint64_t result = std::istream::read();
  }
  else
  {
    uint64_t result = MEMORY[0x1B3EA7E10](a1, a3);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Read failure in ReadBasicType, file position is ", 48);
    std::istream::tellg();
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", next char is ", 15);
    std::istream::peek();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return result;
}

void sub_1B20098E0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeData::addWordToPronCache(quasar::LmeData *this, std::string *a2, int a3)
{
  return quasar::WordPronCache::addWord((quasar::LmeData *)((char *)this + 16), a2, a3);
}

uint64_t quasar::LmeData::addWordToEmbeddingCache(quasar::LmeData *this, std::string *a2, int a3)
{
  return quasar::WordPronCache::addWord((quasar::LmeData *)((char *)this + 88), a2, a3);
}

uint64_t **std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__assign_multi<std::__tree_const_iterator<quasar::LmePackedWord,std::__tree_node<quasar::LmePackedWord,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    int v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        int v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          *((_DWORD *)v8 + 20) = *((_DWORD *)v9 + 20);
          if (v8 != (uint64_t *)v9) {
            std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>((char *)v8 + 88, *((char **)v9 + 11), *((void *)v9 + 12), (uint64_t)(*((void *)v9 + 12) - *((void *)v9 + 11)) >> 1);
          }
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          uint64_t v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          long long v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              long long v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              int v9 = a2;
            }
            while (!v12);
          }
          int v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          int v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_multi<quasar::LmePackedWord const&>(v5, a2 + 2);
      long long v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          long long v14 = v13;
          long long v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1B2009A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        int v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

void std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(a1, *a2);
    std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<quasar::LmePackedWord,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<quasar::LmePackedWord,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t *std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_multi<quasar::LmePackedWord const&>(uint64_t **a1, long long *a2)
{
  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmePackedWord const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  int v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1B2009C38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmePackedWord const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>::construct[abi:ne180100]<quasar::LmePackedWord,quasar::LmePackedWord const&>(v5, (std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B2009CA8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>::construct[abi:ne180100]<quasar::LmePackedWord,quasar::LmePackedWord const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  int v7 = *((_DWORD *)a3 + 12);
  this[2].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[2].__r_.__value_.__l.__data_) = v7;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  return std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&this[2].__r_.__value_.__l.__size_, *((const void **)a3 + 7), *((void *)a3 + 8), (uint64_t)(*((void *)a3 + 8) - *((void *)a3 + 7)) >> 1);
}

void sub_1B2009D68(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = std::vector<short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B2009DFC(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<quasar::LmePackedWord,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  long long v5 = result;
  if (result[2])
  {
    long long v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      size_t v8 = (uint64_t *)v6[1];
    }
    else {
      size_t v8 = v6;
    }
    int v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        int v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::set<std::string> &>::operator=[abi:ne180100]<std::string const,std::set<std::string>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          uint64_t v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          long long v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              long long v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              int v9 = a2;
            }
            while (!v12);
          }
          size_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          int v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_multi<std::pair<std::string const,std::set<std::string>> const&>(v5, a2 + 2);
      long long v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          long long v14 = v13;
          long long v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1B2009FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::set<std::string> &>::operator=[abi:ne180100]<std::string const,std::set<std::string>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  int v4 = *(uint64_t ***)(a1 + 8);
  if (v4 != (uint64_t **)(a2 + 24)) {
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v4, *(void **)(a2 + 24), (void *)(a2 + 32));
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        int v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_multi<std::pair<std::string const,std::set<std::string>> const&>(uint64_t **a1, long long *a2)
{
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::pair<std::string const,std::set<std::string>> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  int v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1B200A110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  long long v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    void v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v6 + 9) = *(void *)(a3 + 40);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + ++*(void *)(result + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    char v10 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t *std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_unique_impl<quasar::LmeDataFactoryBase::Word &,fst::SymbolTable &>(uint64_t **a1, const quasar::LmeDataFactoryBase::Word *a2, fst::SymbolTable *a3)
{
  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmeDataFactoryBase::Word &,fst::SymbolTable &>((uint64_t)a1, a2, a3, (uint64_t)v8);
  int v4 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  long long v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v7, v4, v8[0]);
    long long v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

uint64_t std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmeDataFactoryBase::Word &,fst::SymbolTable &>@<X0>(uint64_t a1@<X0>, const quasar::LmeDataFactoryBase::Word *a2@<X1>, fst::SymbolTable *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  size_t v8 = (char *)operator new(0x70uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = quasar::LmePackedWord::LmePackedWord((quasar::LmePackedWord *)(v8 + 32), a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B200A2D8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_unique_key_args<quasar::LmePackedWord,quasar::LmePackedWord&>(uint64_t **a1, const void **a2, long long *a3)
{
  long long v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmePackedWord&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void *std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmePackedWord&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>::construct[abi:ne180100]<quasar::LmePackedWord,quasar::LmePackedWord&>(v5, (std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B200A3DC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>::construct[abi:ne180100]<quasar::LmePackedWord,quasar::LmePackedWord&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  int v7 = *((_DWORD *)a3 + 12);
  this[2].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[2].__r_.__value_.__l.__data_) = v7;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  return std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&this[2].__r_.__value_.__l.__size_, *((const void **)a3 + 7), *((void *)a3 + 8), (uint64_t)(*((void *)a3 + 8) - *((void *)a3 + 7)) >> 1);
}

void sub_1B200A49C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  int v3 = (uint64_t *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  int v4 = v3;
  std::__tree<std::string>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  int v3 = (uint64_t *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  int v4 = v3;
  std::__tree<std::string>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  int v3 = (uint64_t *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  int v4 = v3;
  std::__tree<std::string>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t quasar::SharedPhraseBook::SharedPhraseBook(uint64_t a1, uint64_t *a2, size_t a3, char a4, uint64_t a5, int a6)
{
  uint64_t v8 = quasar::GenericPhraseBook::GenericPhraseBook(a1, a4, a5);
  *(void *)uint64_t v8 = &unk_1F0A538A8;
  uint64_t v9 = *a2;
  *a2 = 0;
  *(void *)(v8 + 40) = v9;
  *(_OWORD *)(v8 + 48) = 0u;
  uint64_t v81 = v8 + 48;
  *(_OWORD *)(v8 + 64) = 0u;
  uint64_t v79 = v8;
  *(_DWORD *)(v8 + 80) = 1065353216;
  uint64_t v10 = *(char **)(v9 + 8);
  while (a3)
  {
    uint64_t v11 = memchr(v10, 10, a3);
    if (v11) {
      unint64_t v12 = v11 - v10;
    }
    else {
      unint64_t v12 = -1;
    }
    if (a3 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = a3;
    }
    uint64_t v104 = v10;
    unint64_t v105 = v13;
    int v101 = 0;
    BOOL v102 = 0;
    uint64_t v103 = 0;
    if (v13)
    {
      while (1)
      {
        unint64_t v14 = std::string_view::find[abi:ne180100]((uint64_t *)&v104, "|||", 0);
        if (v14 == -1) {
          break;
        }
        unint64_t v15 = v14;
        uint64_t v16 = (uint64_t)v104;
        if (v105 >= v15) {
          unint64_t v17 = v15;
        }
        else {
          unint64_t v17 = v105;
        }
        quasar::SharedPhraseBook::trimView((uint64_t)v104, v17);
        uint64_t v19 = v16;
        uint64_t v20 = v18;
        int v21 = v102;
        if (v102 >= (uint64_t *)v103)
        {
          uint64_t v23 = ((char *)v102 - v101) >> 4;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v103 - v101;
          if ((v103 - v101) >> 3 > v24) {
            unint64_t v24 = v25 >> 3;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26) {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v103, v26);
          }
          else {
            uint64_t v27 = 0;
          }
          long long v28 = (uint64_t *)&v27[16 * v23];
          *long long v28 = v19;
          v28[1] = v20;
          uint64_t v30 = v101;
          int v29 = (char *)v102;
          uint64_t v31 = (char *)v28;
          if (v102 != (uint64_t *)v101)
          {
            do
            {
              *((_OWORD *)v31 - 1) = *((_OWORD *)v29 - 1);
              v31 -= 16;
              v29 -= 16;
            }
            while (v29 != v30);
            int v29 = v101;
          }
          long long v22 = (char *)(v28 + 2);
          int v101 = v31;
          BOOL v102 = v28 + 2;
          uint64_t v103 = &v27[16 * v26];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          uint64_t *v102 = v16;
          v21[1] = v18;
          long long v22 = (char *)(v21 + 2);
        }
        BOOL v102 = (uint64_t *)v22;
        unint64_t v32 = v105;
        v104 += v15 + 3;
        v105 -= v15 + 3;
        if (v32 == v15 + 3) {
          goto LABEL_50;
        }
      }
      uint64_t v33 = (uint64_t)v104;
      quasar::SharedPhraseBook::trimView((uint64_t)v104, v105);
      uint64_t v35 = v33;
      uint64_t v36 = v34;
      long long v37 = v102;
      if (v102 >= (uint64_t *)v103)
      {
        uint64_t v38 = ((char *)v102 - v101) >> 4;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = v103 - v101;
        if ((v103 - v101) >> 3 > v39) {
          unint64_t v39 = v40 >> 3;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41) {
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v103, v41);
        }
        else {
          uint64_t v42 = 0;
        }
        uint64_t v43 = (uint64_t *)&v42[16 * v38];
        uint64_t *v43 = v35;
        v43[1] = v36;
        unint64_t v45 = v101;
        int v44 = (char *)v102;
        uint64_t v46 = (char *)v43;
        if (v102 != (uint64_t *)v101)
        {
          do
          {
            *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
            v46 -= 16;
            v44 -= 16;
          }
          while (v44 != v45);
          int v44 = v101;
        }
        long long v22 = (char *)(v43 + 2);
        int v101 = v46;
        BOOL v102 = v43 + 2;
        uint64_t v103 = &v42[16 * v41];
        if (v44) {
          operator delete(v44);
        }
      }
      else
      {
        uint64_t *v102 = v33;
        v37[1] = v34;
        long long v22 = (char *)(v37 + 2);
      }
      BOOL v102 = (uint64_t *)v22;
    }
    else
    {
      long long v22 = 0;
    }
LABEL_50:
    long long v99 = 0uLL;
    uint64_t v100 = 0;
    long long v47 = v22;
    if (v22 != v101)
    {
      size_t v48 = *((void *)v101 + 1);
      if (a6)
      {
        quasar::GenericPhraseBook::normalizeKey(*(void **)v101, *((void *)v101 + 1), v79, (uint64_t)&__dst);
LABEL_62:
        if (SHIBYTE(v100) < 0) {
          operator delete((void *)v99);
        }
        long long v99 = __dst;
        uint64_t v100 = v83;
        long long v22 = v101;
        long long v47 = (char *)v102;
        goto LABEL_65;
      }
      if (v48 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v49 = *(const void **)v101;
      if (v48 >= 0x17)
      {
        uint64_t v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v48 | 7) != 0x17) {
          uint64_t v51 = v48 | 7;
        }
        uint64_t v52 = v51 + 1;
        p_dst = (long long *)operator new(v51 + 1);
        *((void *)&__dst + 1) = v48;
        *(void *)&long long v83 = v52 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        BYTE7(v83) = *((void *)v101 + 1);
        p_dst = &__dst;
        if (!v48) {
          goto LABEL_61;
        }
      }
      memmove(p_dst, v49, v48);
LABEL_61:
      *((unsigned char *)p_dst + v48) = 0;
      goto LABEL_62;
    }
LABEL_65:
    uint64_t v53 = (v47 - v22) >> 4;
    if (v53 == 3)
    {
      v106[0] = &v99;
      long long v54 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v81, (unsigned __int8 *)&v99, (uint64_t)&std::piecewise_construct, v106);
      long long v64 = *((_OWORD *)v101 + 2);
      long long __dst = *((_OWORD *)v101 + 1);
      long long v83 = v64;
      long long v55 = (_OWORD *)*((void *)v54 + 6);
      unint64_t v65 = *((void *)v54 + 7);
      if ((unint64_t)v55 >= v65)
      {
        long long v57 = (void **)(v54 + 40);
        uint64_t v67 = *((void *)v54 + 5);
        uint64_t v68 = ((uint64_t)v55 - v67) >> 5;
        unint64_t v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v70 = v65 - v67;
        if (v70 >> 4 > v69) {
          unint64_t v69 = v70 >> 4;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v62 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v69;
        }
        if (v62) {
          int v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(v54 + 56), v62);
        }
        else {
          int v63 = 0;
        }
        long long v71 = &v63[32 * v68];
        *(_OWORD *)long long v71 = __dst;
        *((_OWORD *)v71 + 1) = v83;
        long long v76 = (char *)*((void *)v54 + 5);
        long long v72 = (char *)*((void *)v54 + 6);
        long long v74 = v71;
        if (v72 != v76)
        {
          do
          {
            long long v77 = *((_OWORD *)v72 - 1);
            *((_OWORD *)v74 - 2) = *((_OWORD *)v72 - 2);
            *((_OWORD *)v74 - 1) = v77;
            v74 -= 32;
            v72 -= 32;
          }
          while (v72 != v76);
LABEL_95:
          long long v72 = (char *)*v57;
        }
LABEL_96:
        long long v66 = v71 + 32;
        *((void *)v54 + 5) = v74;
        *((void *)v54 + 6) = v71 + 32;
        *((void *)v54 + 7) = &v63[32 * v62];
        if (v72) {
          operator delete(v72);
        }
        goto LABEL_98;
      }
    }
    else
    {
      if (v53 != 2)
      {
        if (quasar::gLogLevel >= 1)
        {
          long long v97 = 0u;
          long long v98 = 0u;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          long long __dst = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__dst);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"Malformed phrasebook line:", 26);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__dst);
        }
        goto LABEL_99;
      }
      v106[0] = &v99;
      long long v54 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v81, (unsigned __int8 *)&v99, (uint64_t)&std::piecewise_construct, v106);
      long long v83 = 0uLL;
      long long __dst = *((_OWORD *)v101 + 1);
      long long v55 = (_OWORD *)*((void *)v54 + 6);
      unint64_t v56 = *((void *)v54 + 7);
      if ((unint64_t)v55 >= v56)
      {
        long long v57 = (void **)(v54 + 40);
        uint64_t v58 = *((void *)v54 + 5);
        uint64_t v59 = ((uint64_t)v55 - v58) >> 5;
        unint64_t v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v61 = v56 - v58;
        if (v61 >> 4 > v60) {
          unint64_t v60 = v61 >> 4;
        }
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v62 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v60;
        }
        if (v62) {
          int v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(v54 + 56), v62);
        }
        else {
          int v63 = 0;
        }
        long long v71 = &v63[32 * v59];
        *(_OWORD *)long long v71 = __dst;
        *((_OWORD *)v71 + 1) = v83;
        long long v73 = (char *)*((void *)v54 + 5);
        long long v72 = (char *)*((void *)v54 + 6);
        long long v74 = v71;
        if (v72 != v73)
        {
          do
          {
            long long v75 = *((_OWORD *)v72 - 1);
            *((_OWORD *)v74 - 2) = *((_OWORD *)v72 - 2);
            *((_OWORD *)v74 - 1) = v75;
            v74 -= 32;
            v72 -= 32;
          }
          while (v72 != v73);
          goto LABEL_95;
        }
        goto LABEL_96;
      }
    }
    *long long v55 = __dst;
    v55[1] = v83;
    long long v66 = v55 + 2;
LABEL_98:
    *((void *)v54 + 6) = v66;
LABEL_99:
    if (SHIBYTE(v100) < 0) {
      operator delete((void *)v99);
    }
    if (v101)
    {
      BOOL v102 = (uint64_t *)v101;
      operator delete(v101);
    }
    a3 -= v12 + 1;
    v10 += v12 + 1;
    if (v12 == -1) {
      return v79;
    }
  }
  return v79;
}

void sub_1B200AC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  unint64_t v15 = *(void **)(v13 - 144);
  if (v15)
  {
    *(void *)(v13 - 136) = v15;
    operator delete(v15);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(a12);
  uint64_t v16 = *(void *)(a9 + 40);
  *(void *)(a9 + 40) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  *(void *)a9 = &unk_1F0A53AE8;
  a13 = (void **)(a9 + 16);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

unint64_t std::string_view::find[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  size_t v7 = strlen(__s);
  if (v5 < a3) {
    return -1;
  }
  int64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = (void *)(v6 + a3);
    uint64_t v10 = (char *)(v6 + v5);
    int64_t v11 = v5 - a3;
    if ((uint64_t)(v5 - a3) >= v8)
    {
      int v14 = *__s;
      do
      {
        uint64_t v15 = v11 - v8;
        if (v15 == -1) {
          break;
        }
        uint64_t v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16) {
          break;
        }
        unint64_t v12 = v16;
        if (!memcmp(v16, __s, v8)) {
          goto LABEL_6;
        }
        uint64_t v9 = v12 + 1;
        int64_t v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    unint64_t v12 = v10;
LABEL_6:
    if (v12 == v10) {
      return -1;
    }
    else {
      return (unint64_t)&v12[-v6];
    }
  }
  return a3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> quasar::SharedPhraseBook::trimView(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = a2;
  unint64_t v2 = std::string_view::find_first_not_of[abi:ne180100](&v4, " \t\n\r\f\v", 0);
  if (v5 >= v2) {
    unint64_t v3 = v2;
  }
  else {
    unint64_t v3 = v5;
  }
  v4 += v3;
  v5 -= v3;
  std::string_view::find_last_not_of[abi:ne180100](&v4, " \t\n\r\f\v", 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t std::string_view::find_first_not_of[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  size_t v7 = strlen(__s);
  BOOL v8 = v6 > a3;
  unint64_t v9 = v6 - a3;
  if (!v8) {
    return -1;
  }
  size_t v10 = v7;
  int64_t v11 = (char *)(v5 + a3);
  if (v7)
  {
    while (memchr(__s, *v11, v10))
    {
      ++v11;
      if (!--v9) {
        return -1;
      }
    }
  }
  return (uint64_t)&v11[-v5];
}

unint64_t std::string_view::find_last_not_of[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  size_t v7 = strlen(__s);
  if (v6 > a3) {
    unint64_t v8 = a3 + 1;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = v8 - 1;
  do
  {
    unint64_t v10 = v9;
    if (v9 == -1) {
      break;
    }
    if (!v7) {
      break;
    }
    int64_t v11 = memchr(__s, *(char *)(v5 + v9), v7);
    unint64_t v9 = v10 - 1;
  }
  while (v11);
  return v10;
}

void quasar::SharedPhraseBook::getPhraseBook(uint64_t a1@<X0>, std::string::value_type a2@<W1>, long long *a3@<X2>, std::string::value_type a4@<W3>, void *a5@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  std::string::value_type v44 = a2;
  std::string::value_type v43 = a4;
  {
    operator new();
  }
  unint64_t v8 = (uint64_t **)quasar::SharedPhraseBook::getPhraseBook(std::string const&,BOOL,std::string const&,BOOL)::dataFileMap;
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbS8_bEEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS8_bS8_bEJEJEJRKS8_RbSC_SD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_(&v45, (long long *)a1, &v44, a3, &v43);
  v27[0] = (long long *)&v45;
  unint64_t v9 = std::__tree<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::__map_value_compare<std::tuple<std::string,BOOL,std::string,BOOL>,std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::less<std::tuple<std::string,BOOL,std::string,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>>>::__emplace_unique_key_args<std::tuple<std::string,BOOL,std::string,BOOL>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,BOOL,std::string,BOOL>&&>,std::tuple<>>(v8, (uint64_t)&v45, (uint64_t)&std::piecewise_construct, v27);
  *a5 = 0;
  a5[1] = 0;
  unint64_t v10 = (std::__shared_weak_count *)v9[13];
  if (v10)
  {
    int64_t v11 = std::__shared_weak_count::lock(v10);
    a5[1] = v11;
    if (v11) {
      *a5 = v9[12];
    }
  }
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (!*a5)
  {
    unint64_t v12 = (std::__shared_weak_count *)a5[1];
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    uint64_t v13 = MEMORY[0x1E4FBA460] + 64;
    uint64_t v48 = MEMORY[0x1E4FBA460] + 64;
    std::string::size_type v14 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
    v45.__r_.__value_.__r.__words[0] = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
    *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words
                              + *(void *)(v45.__r_.__value_.__r.__words[0] - 24)) = v14;
    v45.__r_.__value_.__l.__size_ = 0;
    uint64_t v15 = (std::ios_base *)((char *)&v45 + *(void *)(v45.__r_.__value_.__r.__words[0] - 24));
    std::ios_base::init(v15, &v45.__r_.__value_.__r.__words[2]);
    uint64_t v16 = MEMORY[0x1E4FBA460] + 24;
    v15[1].__vftable = 0;
    v15[1].__fmtflags_ = -1;
    v45.__r_.__value_.__r.__words[0] = v16;
    uint64_t v48 = v13;
    MEMORY[0x1B3EA7CE0](&v45.__r_.__value_.__r.__words[2]);
    std::ifstream::open();
    if ((*((unsigned char *)__p + *(void *)(v45.__r_.__value_.__r.__words[0] - 24)) & 5) == 0)
    {
      fst::FstReadOptions::FstReadOptions(&v25, a1, 0, 0, 0);
      int v26 = 2;
      std::istream::tellg();
      std::istream::seekg();
      if (quasar::gLogLevel >= 4)
      {
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        *(_OWORD *)long long v28 = 0u;
        long long v29 = 0u;
        memset(v27, 0, sizeof(v27));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
        unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Loading phrasebook: ", 20);
        int v18 = *(char *)(a1 + 23);
        if (v18 >= 0) {
          uint64_t v19 = a1;
        }
        else {
          uint64_t v19 = *(void *)a1;
        }
        if (v18 >= 0) {
          uint64_t v20 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          uint64_t v20 = *(void *)(a1 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v27);
      }
      operator new();
    }
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    *(_OWORD *)long long v28 = 0u;
    long long v29 = 0u;
    memset(v27, 0, sizeof(v27));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"failed to open phrasebook file ", 31);
    int v22 = *(char *)(a1 + 23);
    if (v22 >= 0) {
      uint64_t v23 = a1;
    }
    else {
      uint64_t v23 = *(void *)a1;
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v24 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v27);
  }
}

void sub_1B200B5B8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B200B5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  long long v74 = *(std::__shared_weak_count **)(v72 + 8);
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a72);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::string,BOOL,std::string,BOOL>::~tuple(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void quasar::SharedPhraseBook::getEntries(uint64_t a1@<X0>, void *a2@<X1>, std::vector<std::pair<std::string, std::string>> *a3@<X8>)
{
  uint64_t v4 = (void *)(a1 + 48);
  size_t v5 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v6 = v5;
  }
  quasar::GenericPhraseBook::normalizeKey(a2, v6, a1, (uint64_t)__p);
  size_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  if (v7)
  {
    uint64_t v8 = *((void *)v7 + 5);
    uint64_t v9 = *((void *)v7 + 6);
    if (v8 != v9)
    {
      while (1)
      {
        size_t v10 = *(void *)(v8 + 8);
        if (v10 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        int64_t v11 = *(const void **)v8;
        if (v10 >= 0x17) {
          break;
        }
        HIBYTE(v23) = *(void *)(v8 + 8);
        p_dst = &__dst;
        if (v10) {
          goto LABEL_15;
        }
LABEL_16:
        *((unsigned char *)p_dst + v10) = 0;
        size_t v15 = *(void *)(v8 + 24);
        if (v15 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = *(const void **)(v8 + 16);
        if (v15 >= 0x17)
        {
          uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15 | 7) != 0x17) {
            uint64_t v18 = v15 | 7;
          }
          uint64_t v19 = v18 + 1;
          unint64_t v17 = (long long *)operator new(v18 + 1);
          *((void *)&v20 + 1) = v15;
          unint64_t v21 = v19 | 0x8000000000000000;
          *(void *)&long long v20 = v17;
        }
        else
        {
          HIBYTE(v21) = *(void *)(v8 + 24);
          unint64_t v17 = &v20;
          if (!v15) {
            goto LABEL_24;
          }
        }
        memmove(v17, v16, v15);
LABEL_24:
        *((unsigned char *)v17 + v15) = 0;
        *(_OWORD *)std::string __p = __dst;
        unint64_t v25 = v23;
        unint64_t v23 = 0;
        long long __dst = 0uLL;
        long long v26 = v20;
        unint64_t v27 = v21;
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a3, (long long *)__p);
        if (SHIBYTE(v27) < 0) {
          operator delete((void *)v26);
        }
        if (SHIBYTE(v25) < 0) {
          operator delete(__p[0]);
        }
        v8 += 32;
        if (v8 == v9) {
          return;
        }
      }
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      p_dst = (long long *)operator new(v13 + 1);
      *((void *)&__dst + 1) = v10;
      unint64_t v23 = v14 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
LABEL_15:
      memmove(p_dst, v11, v10);
      goto LABEL_16;
    }
  }
}

void sub_1B200B92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbS8_bEEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS8_bS8_bEJEJEJRKS8_RbSC_SD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSF_IJDpT2_EEEDpOT3_(std::string *this, long long *a2, std::string::value_type *a3, long long *a4, std::string::value_type *a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  this[1].__r_.__value_.__s.__data_[0] = *a3;
  size_t v10 = (std::string *)((char *)this + 32);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v11 = *a4;
    this[2].__r_.__value_.__r.__words[0] = *((void *)a4 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  this[2].__r_.__value_.__s.__data_[8] = *a5;
  return this;
}

void sub_1B200BA28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v++*(void *)(result + 24) = v26[0];
    }
  }
  int i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B200BCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    _DWORD v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B200BD6C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::__map_value_compare<std::tuple<std::string,BOOL,std::string,BOOL>,std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::less<std::tuple<std::string,BOOL,std::string,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>>>::__emplace_unique_key_args<std::tuple<std::string,BOOL,std::string,BOOL>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,BOOL,std::string,BOOL>&&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, long long **a4)
{
  size_t v6 = (void **)std::__tree<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::__map_value_compare<std::tuple<std::string,BOOL,std::string,BOOL>,std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::less<std::tuple<std::string,BOOL,std::string,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>>>::__find_equal<std::tuple<std::string,BOOL,std::string,BOOL>>((uint64_t)a1, &v15, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x70uLL);
    v13[1] = a1 + 1;
    unint64_t v9 = *a4;
    long long v10 = **a4;
    v7[6] = *((void *)*a4 + 2);
    *((_OWORD *)v7 + 2) = v10;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *(void *)unint64_t v9 = 0;
    *((unsigned char *)v7 + 56) = *((unsigned char *)v9 + 24);
    uint64_t v11 = *((void *)v9 + 6);
    *((_OWORD *)v7 + 4) = v9[2];
    v7[10] = v11;
    *((void *)v9 + 5) = 0;
    *((void *)v9 + 6) = 0;
    *((void *)v9 + 4) = 0;
    *((unsigned char *)v7 + 88) = *((unsigned char *)v9 + 56);
    v7[12] = 0;
    v7[13] = 0;
    char v14 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v15, v8, v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::__map_value_compare<std::tuple<std::string,BOOL,std::string,BOOL>,std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,std::less<std::tuple<std::string,BOOL,std::string,BOOL>>,true>,std::allocator<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>>>::__find_equal<std::tuple<std::string,BOOL,std::string,BOOL>>(uint64_t a1, void *a2, uint64_t a3)
{
  size_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<std::string,BOOL,std::string,BOOL>,std::tuple<std::string,BOOL,std::string,BOOL>>((uint64_t)&v10, a3, (uint64_t)(v4 + 4)))break; {
        unint64_t v4 = (void *)*v7;
        }
        size_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<std::string,BOOL,std::string,BOOL>,std::tuple<std::string,BOOL,std::string,BOOL>>((uint64_t)&v11, v8, a3))break; {
      size_t v5 = v7 + 1;
      }
      unint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<std::string,BOOL,std::string,BOOL>,std::tuple<std::string,BOOL,std::string,BOOL>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(char *)(a3 + 23);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v7 = *(void *)(a2 + 8);
  }
  if (v6 >= 0) {
    uint64_t v8 = (const void *)a2;
  }
  else {
    uint64_t v8 = *(const void **)a2;
  }
  if (v5 >= 0) {
    size_t v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v9 = *(void *)(a3 + 8);
  }
  if (v5 >= 0) {
    char v10 = (const void *)a3;
  }
  else {
    char v10 = *(const void **)a3;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  int v14 = memcmp(v10, v8, v11);
  BOOL v15 = v9 < v7;
  if (v14) {
    BOOL v15 = v14 < 0;
  }
  if (v15) {
    return 0;
  }
  unsigned int v16 = *(unsigned __int8 *)(a2 + 24);
  unsigned int v17 = *(unsigned __int8 *)(a3 + 24);
  if (v16 < v17) {
    return 1;
  }
  return v17 >= v16
      && std::__tuple_less<2ul>::operator()[abi:ne180100]<std::tuple<std::string,BOOL,std::string,BOOL>,std::tuple<std::string,BOOL,std::string,BOOL>>((uint64_t)&v19, a2, a3);
}

BOOL std::__tuple_less<2ul>::operator()[abi:ne180100]<std::tuple<std::string,BOOL,std::string,BOOL>,std::tuple<std::string,BOOL,std::string,BOOL>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(char *)(a3 + 55);
  int v6 = *(char *)(a2 + 55);
  if (v6 >= 0) {
    size_t v7 = *(unsigned __int8 *)(a2 + 55);
  }
  else {
    size_t v7 = *(void *)(a2 + 40);
  }
  if (v6 >= 0) {
    uint64_t v8 = (const void *)(a2 + 32);
  }
  else {
    uint64_t v8 = *(const void **)(a2 + 32);
  }
  if (v5 >= 0) {
    size_t v9 = *(unsigned __int8 *)(a3 + 55);
  }
  else {
    size_t v9 = *(void *)(a3 + 40);
  }
  if (v5 >= 0) {
    char v10 = (const void *)(a3 + 32);
  }
  else {
    char v10 = *(const void **)(a3 + 32);
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  int v15 = memcmp(v10, v8, v11);
  BOOL v16 = v9 < v7;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  return !v16 && *(unsigned __int8 *)(a2 + 56) < *(unsigned __int8 *)(a3 + 56);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,BOOL,std::string,BOOL>,std::weak_ptr<quasar::SharedPhraseBook>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::tuple<std::string,BOOL,std::string,BOOL> const,std::weak_ptr<quasar::SharedPhraseBook>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::tuple<std::string,BOOL,std::string,BOOL> const,std::weak_ptr<quasar::SharedPhraseBook>>,0>(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::shared_ptr<quasar::SharedPhraseBook>::shared_ptr[abi:ne180100]<quasar::SharedPhraseBook,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B200C238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<quasar::SharedPhraseBook>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::SharedPhraseBook *,std::shared_ptr<quasar::SharedPhraseBook>::__shared_ptr_default_delete<quasar::SharedPhraseBook,quasar::SharedPhraseBook>,std::allocator<quasar::SharedPhraseBook>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_pointer<quasar::SharedPhraseBook *,std::shared_ptr<quasar::SharedPhraseBook>::__shared_ptr_default_delete<quasar::SharedPhraseBook,quasar::SharedPhraseBook>,std::allocator<quasar::SharedPhraseBook>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<quasar::SharedPhraseBook *,std::shared_ptr<quasar::SharedPhraseBook>::__shared_ptr_default_delete<quasar::SharedPhraseBook,quasar::SharedPhraseBook>,std::allocator<quasar::SharedPhraseBook>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<quasar::SharedPhraseBook>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)a2 = &unk_1F0A538A8;
    std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(a2 + 48);
    uint64_t v3 = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    *(void *)a2 = &unk_1F0A53AE8;
    unint64_t v4 = (void **)(a2 + 16);
    std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x1B3EA8670](a2, 0x10A1C40AAE2D2D9);
  }
}

uint64_t kaldi::MatrixBase<float>::NumRows(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t kaldi::MatrixBase<float>::NumCols(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t kaldi::Matrix<float>::Matrix<double>(uint64_t a1, uint64_t a2, int a3)
{
  *(unsigned char *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a3 == 111)
  {
    kaldi::Matrix<float>::Resize((int32x2_t *)a1, *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 8), 0, 0);
    int v5 = 111;
  }
  else
  {
    kaldi::Matrix<float>::Resize((int32x2_t *)a1, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), 0, 0);
    int v5 = 112;
  }
  kaldi::MatrixBase<float>::CopyFromMat<double>(a1, a2, v5);
  return a1;
}

void kaldi::Matrix<float>::Resize(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v5 = a5;
  int v6 = a4;
  __int32 v7 = a3;
  unsigned int v8 = a2;
  int v10 = a1[2].i32[0];
  if (v10 < 1) {
    unsigned int v11 = 0;
  }
  else {
    unsigned int v11 = a1[2].i32[1] / v10;
  }
  if (v10 == a3) {
    char v12 = 0;
  }
  else {
    char v12 = a5;
  }
  if (a4 == 2)
  {
    int v6 = 0;
    BOOL v13 = (char *)*a1;
    if (a2 && v13)
    {
      if (v10 < (int)a3 || v11 < a2) {
        char v12 = 1;
      }
      int v16 = a1[1].i32[1];
      if (v12)
      {
        BOOL v17 = (int)a2 <= v16 && a1[1].i32[0] >= (int)a3;
        __int8 v46 = 0;
        memset(memptr, 0, sizeof(memptr));
        kaldi::Matrix<float>::Resize(memptr, a2, a3, v17, a5);
        int32x2_t v25 = a1[2];
        int32x2_t v42 = vmin_s32(a1[1], (int32x2_t)__PAIR64__(v8, v7));
        std::string::value_type v43 = memptr[2];
        uint64_t v44 = 0;
        void v40[3] = 0;
        long long v41 = memptr[0];
        v40[0] = *a1;
        v40[1] = v42;
        v40[2] = v25;
        kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&v41, (int *)v40, 111);
        long long v26 = memptr[0];
        memptr[0] = (void *)*a1;
        unint64_t v27 = memptr[0];
        *a1 = (int32x2_t)v26;
        long long v28 = *(_OWORD *)&memptr[1];
        *(_OWORD *)&memptr[1] = *(_OWORD *)a1[1].i8;
        *(_OWORD *)a1[1].i8 = v28;
        __int8 v29 = v46;
        int v30 = a1[4].u8[0];
        __int8 v46 = a1[4].i8[0];
        a1[4].i8[0] = v29;
        if (v27 && !v30) {
          free(v27);
        }
      }
      else
      {
        uint64_t v23 = a1[1].i32[0];
        a1[1].i32[0] = v10;
        a1[1].i32[1] = v11;
        if (a3 > v23)
        {
          unint64_t v24 = &v13[4 * v23];
          if (a3 - v23 == v10)
          {
            bzero(&v13[4 * v23], 4 * v10 * (uint64_t)(int)a2);
          }
          else if ((int)a2 >= 1)
          {
            size_t v31 = 4 * ((int)a3 - (int)v23);
            uint64_t v32 = 4 * v10;
            uint64_t v33 = a2;
            do
            {
              bzero(v24, v31);
              v24 += v32;
              --v33;
            }
            while (v33);
          }
        }
        uint64_t v34 = v8 - v16;
        if (v8 > v16)
        {
          uint64_t v35 = a1[2].i32[0];
          long long v36 = (char *)(*(void *)a1 + 4 * (int)v35 * v16);
          if (v35 == v7)
          {
            bzero(v36, 4 * v7 * (uint64_t)(int)v34);
          }
          else if ((int)v34 >= 1)
          {
            uint64_t v37 = 4 * v35;
            do
            {
              bzero(v36, 4 * v7);
              v36 += v37;
              --v34;
            }
            while (v34);
          }
        }
        a1[1].i32[0] = v7;
        a1[1].i32[1] = v8;
      }
      return;
    }
  }
  else
  {
    if (a4 == 3)
    {
      BOOL v13 = (char *)*a1;
      if (*a1)
      {
        if (a1[1].i32[1] == a2)
        {
          char v14 = a1[1].i32[0] == a3 ? v12 : 1;
          if ((v14 & 1) == 0) {
            return;
          }
        }
        int v6 = 0;
        goto LABEL_28;
      }
      int v6 = 0;
      goto LABEL_43;
    }
    BOOL v13 = (char *)*a1;
  }
  if (v13)
  {
LABEL_28:
    if (v10 >= (int)a3 && v11 >= a2) {
      char v19 = v12;
    }
    else {
      char v19 = 1;
    }
    if ((v19 & 1) == 0)
    {
      a1[1].i32[0] = a3;
      a1[1].i32[1] = a2;
      if (!v6)
      {
        kaldi::MatrixBase<float>::SetZero((uint64_t)a1);
      }
      return;
    }
    if (!a1[4].i8[0]) {
      free(v13);
    }
    a1[4].i8[0] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
  }
LABEL_43:
  if (v7 * v8)
  {
    memptr[0] = 0;
    int v20 = -v7 & 3;
    if (v5) {
      int v20 = 0;
    }
    __int32 v21 = v20 + v7;
    if (malloc_type_posix_memalign(memptr, 0x10uLL, 4 * v8 * (unint64_t)(v20 + v7), 0x746C3D7DuLL)) {
      BOOL v22 = 1;
    }
    else {
      BOOL v22 = memptr[0] == 0;
    }
    if (v22)
    {
      exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      long long v39 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v39, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
    }
    *a1 = (int32x2_t)memptr[0];
    a1[4].i8[0] = 0;
    a1[1].i32[0] = v7;
    a1[1].i32[1] = v8;
    a1[2].i32[0] = v21;
    a1[2].i32[1] = v21 * v8;
    if (!v6) {
      goto LABEL_53;
    }
  }
  else
  {
    a1[4].i8[0] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    if (!v6) {
LABEL_53:
    }
      kaldi::MatrixBase<float>::SetZero((uint64_t)a1);
  }
}

void sub_1B200C7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a17)
  {
    if (!a21) {
      free(a17);
    }
  }
  _Unwind_Resume(exception_object);
}

void kaldi::MatrixBase<float>::CopyFromMat<double>(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 111)
  {
    if (*(int *)(a1 + 12) >= 1)
    {
      int v5 = 0;
      do
      {
        uint64_t v6 = *(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v5;
        int v7 = *(_DWORD *)(a1 + 8);
        int v27 = 0;
        uint64_t v28 = 0;
        uint64_t v25 = v6;
        int v26 = v7;
        unsigned int v8 = (double *)(*(void *)a2 + 8 * *(_DWORD *)(a2 + 16) * v5);
        int v9 = *(_DWORD *)(a2 + 8);
        int v23 = 0;
        uint64_t v24 = 0;
        __int32 v21 = v8;
        int v22 = v9;
        kaldi::VectorBase<float>::CopyFromVec<double>((uint64_t)&v25, &v21);
        ++v5;
      }
      while (v5 < *(_DWORD *)(a1 + 12));
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a1 + 12);
    if ((int)v10 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(unsigned int *)(a1 + 8);
      BOOL v13 = *(float **)a1;
      char v14 = *(double **)a2;
      uint64_t v15 = 4 * *(int *)(a1 + 16);
      uint64_t v16 = 8 * *(int *)(a2 + 16);
      do
      {
        uint64_t v17 = v12;
        float v18 = v14;
        char v19 = v13;
        if ((int)v12 >= 1)
        {
          do
          {
            float v20 = *v18;
            *v19++ = v20;
            float v18 = (double *)((char *)v18 + v16);
            --v17;
          }
          while (v17);
        }
        ++v11;
        BOOL v13 = (float *)((char *)v13 + v15);
        ++v14;
      }
      while (v11 != v10);
    }
  }
}

uint64_t kaldi::Matrix<double>::Matrix<float>(uint64_t a1, uint64_t a2, int a3)
{
  *(unsigned char *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a3 == 111)
  {
    kaldi::Matrix<double>::Resize((int32x2_t *)a1, *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 8), 0, 0);
    int v5 = 111;
  }
  else
  {
    kaldi::Matrix<double>::Resize((int32x2_t *)a1, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), 0, 0);
    int v5 = 112;
  }
  kaldi::MatrixBase<double>::CopyFromMat<float>(a1, a2, v5);
  return a1;
}

void kaldi::Matrix<double>::Resize(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v5 = a5;
  int v6 = a4;
  __int32 v7 = a3;
  unsigned int v8 = a2;
  int v10 = a1[2].i32[0];
  if (v10 < 1) {
    unsigned int v11 = 0;
  }
  else {
    unsigned int v11 = a1[2].i32[1] / v10;
  }
  if (v10 == a3) {
    char v12 = 0;
  }
  else {
    char v12 = a5;
  }
  if (a4 == 2)
  {
    int v6 = 0;
    BOOL v13 = (char *)*a1;
    if (a2 && v13)
    {
      if (v10 < (int)a3 || v11 < a2) {
        char v12 = 1;
      }
      int v16 = a1[1].i32[1];
      if (v12)
      {
        BOOL v17 = (int)a2 <= v16 && a1[1].i32[0] >= (int)a3;
        __int8 v46 = 0;
        memset(memptr, 0, sizeof(memptr));
        kaldi::Matrix<double>::Resize(memptr, a2, a3, v17, a5);
        int32x2_t v25 = a1[2];
        int32x2_t v42 = vmin_s32(a1[1], (int32x2_t)__PAIR64__(v8, v7));
        std::string::value_type v43 = memptr[2];
        uint64_t v44 = 0;
        void v40[3] = 0;
        long long v41 = memptr[0];
        v40[0] = *a1;
        v40[1] = v42;
        v40[2] = v25;
        kaldi::MatrixBase<double>::CopyFromMat<double>((int *)&v41, (int *)v40, 111);
        int v26 = memptr[0];
        memptr[0] = (void *)*a1;
        int v27 = memptr[0];
        *a1 = (int32x2_t)v26;
        long long v28 = *(_OWORD *)&memptr[1];
        *(_OWORD *)&memptr[1] = *(_OWORD *)a1[1].i8;
        *(_OWORD *)a1[1].i8 = v28;
        __int8 v29 = v46;
        int v30 = a1[4].u8[0];
        __int8 v46 = a1[4].i8[0];
        a1[4].i8[0] = v29;
        if (v27 && !v30) {
          free(v27);
        }
      }
      else
      {
        uint64_t v23 = a1[1].i32[0];
        a1[1].i32[0] = v10;
        a1[1].i32[1] = v11;
        if (a3 > v23)
        {
          uint64_t v24 = &v13[8 * v23];
          if (a3 - v23 == v10)
          {
            bzero(&v13[8 * v23], 8 * v10 * (uint64_t)(int)a2);
          }
          else if ((int)a2 >= 1)
          {
            size_t v31 = 8 * ((int)a3 - (int)v23);
            uint64_t v32 = 8 * v10;
            uint64_t v33 = a2;
            do
            {
              bzero(v24, v31);
              v24 += v32;
              --v33;
            }
            while (v33);
          }
        }
        uint64_t v34 = v8 - v16;
        if (v8 > v16)
        {
          uint64_t v35 = a1[2].i32[0];
          long long v36 = (char *)(*(void *)a1 + 8 * (int)v35 * v16);
          if (v35 == v7)
          {
            bzero(v36, 8 * v7 * (uint64_t)(int)v34);
          }
          else if ((int)v34 >= 1)
          {
            uint64_t v37 = 8 * v35;
            do
            {
              bzero(v36, 8 * v7);
              v36 += v37;
              --v34;
            }
            while (v34);
          }
        }
        a1[1].i32[0] = v7;
        a1[1].i32[1] = v8;
      }
      return;
    }
  }
  else
  {
    if (a4 == 3)
    {
      BOOL v13 = (char *)*a1;
      if (*a1)
      {
        if (a1[1].i32[1] == a2)
        {
          char v14 = a1[1].i32[0] == a3 ? v12 : 1;
          if ((v14 & 1) == 0) {
            return;
          }
        }
        int v6 = 0;
        goto LABEL_28;
      }
      int v6 = 0;
      goto LABEL_43;
    }
    BOOL v13 = (char *)*a1;
  }
  if (v13)
  {
LABEL_28:
    if (v10 >= (int)a3 && v11 >= a2) {
      char v19 = v12;
    }
    else {
      char v19 = 1;
    }
    if ((v19 & 1) == 0)
    {
      a1[1].i32[0] = a3;
      a1[1].i32[1] = a2;
      if (!v6)
      {
        kaldi::MatrixBase<double>::SetZero((uint64_t)a1);
      }
      return;
    }
    if (!a1[4].i8[0]) {
      free(v13);
    }
    a1[4].i8[0] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
  }
LABEL_43:
  if (v7 * v8)
  {
    memptr[0] = 0;
    int v20 = v7 & 1;
    if (v5) {
      int v20 = 0;
    }
    __int32 v21 = v20 + v7;
    if (malloc_type_posix_memalign(memptr, 0x10uLL, 8 * v8 * (unint64_t)(v20 + v7), 0x746C3D7DuLL)) {
      BOOL v22 = 1;
    }
    else {
      BOOL v22 = memptr[0] == 0;
    }
    if (v22)
    {
      exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      long long v39 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v39, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
    }
    *a1 = (int32x2_t)memptr[0];
    a1[4].i8[0] = 0;
    a1[1].i32[0] = v7;
    a1[1].i32[1] = v8;
    a1[2].i32[0] = v21;
    a1[2].i32[1] = v21 * v8;
    if (!v6) {
      goto LABEL_53;
    }
  }
  else
  {
    a1[4].i8[0] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    if (!v6) {
LABEL_53:
    }
      kaldi::MatrixBase<double>::SetZero((uint64_t)a1);
  }
}

void sub_1B200CCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a17)
  {
    if (!a21) {
      free(a17);
    }
  }
  _Unwind_Resume(exception_object);
}

void kaldi::MatrixBase<double>::CopyFromMat<float>(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 111)
  {
    if (*(int *)(a1 + 12) >= 1)
    {
      int v5 = 0;
      do
      {
        uint64_t v6 = *(void *)a1 + 8 * *(_DWORD *)(a1 + 16) * v5;
        int v7 = *(_DWORD *)(a1 + 8);
        int v26 = 0;
        uint64_t v27 = 0;
        uint64_t v24 = v6;
        int v25 = v7;
        unsigned int v8 = (float *)(*(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * v5);
        int v9 = *(_DWORD *)(a2 + 8);
        int v22 = 0;
        uint64_t v23 = 0;
        int v20 = v8;
        int v21 = v9;
        kaldi::VectorBase<double>::CopyFromVec<float>((uint64_t)&v24, &v20);
        ++v5;
      }
      while (v5 < *(_DWORD *)(a1 + 12));
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a1 + 12);
    if ((int)v10 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(unsigned int *)(a1 + 8);
      BOOL v13 = *(double **)a1;
      char v14 = *(float **)a2;
      uint64_t v15 = 8 * *(int *)(a1 + 16);
      uint64_t v16 = 4 * *(int *)(a2 + 16);
      do
      {
        uint64_t v17 = v12;
        float v18 = v14;
        char v19 = v13;
        if ((int)v12 >= 1)
        {
          do
          {
            *v19++ = *v18;
            float v18 = (float *)((char *)v18 + v16);
            --v17;
          }
          while (v17);
        }
        ++v11;
        BOOL v13 = (double *)((char *)v13 + v15);
        ++v14;
      }
      while (v11 != v10);
    }
  }
}

int *kaldi::MatrixBase<float>::CopyFromMat<float>(int *result, int *a2, int a3)
{
  if (a2 != result)
  {
    uint64_t v30 = v3;
    uint64_t v31 = v4;
    uint64_t v6 = result;
    if (a3 == 111)
    {
      if (result[3] >= 1)
      {
        int v7 = 0;
        do
        {
          uint64_t v8 = *(void *)v6 + 4 * v6[4] * v7;
          int v9 = v6[2];
          int v28 = 0;
          uint64_t v29 = 0;
          uint64_t v26 = v8;
          int v27 = v9;
          uint64_t v10 = (const void *)(*(void *)a2 + 4 * a2[4] * v7);
          int v11 = a2[2];
          int v24 = 0;
          uint64_t v25 = 0;
          int v22 = v10;
          int v23 = v11;
          uint64_t result = (int *)kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v26, &v22);
          ++v7;
        }
        while (v7 < v6[3]);
      }
    }
    else
    {
      uint64_t v12 = result[3];
      if ((int)v12 >= 1)
      {
        uint64_t v13 = 0;
        uint64_t v14 = result[2];
        uint64_t v15 = *(_DWORD **)result;
        uint64_t v16 = *(_DWORD **)a2;
        uint64_t v17 = 4 * result[4];
        uint64_t v18 = 4 * a2[4];
        do
        {
          uint64_t v19 = v14;
          int v20 = v16;
          int v21 = v15;
          if ((int)v14 >= 1)
          {
            do
            {
              *v21++ = *v20;
              int v20 = (_DWORD *)((char *)v20 + v18);
              --v19;
            }
            while (v19);
          }
          ++v13;
          uint64_t v15 = (_DWORD *)((char *)v15 + v17);
          ++v16;
        }
        while (v13 != v12);
      }
    }
  }
  return result;
}

int *kaldi::MatrixBase<double>::CopyFromMat<double>(int *result, int *a2, int a3)
{
  if (a2 != result)
  {
    uint64_t v30 = v3;
    uint64_t v31 = v4;
    uint64_t v6 = result;
    if (a3 == 111)
    {
      if (result[3] >= 1)
      {
        int v7 = 0;
        do
        {
          uint64_t v8 = *(void *)v6 + 8 * v6[4] * v7;
          int v9 = v6[2];
          int v28 = 0;
          uint64_t v29 = 0;
          uint64_t v26 = v8;
          int v27 = v9;
          uint64_t v10 = (const void *)(*(void *)a2 + 8 * a2[4] * v7);
          int v11 = a2[2];
          int v24 = 0;
          uint64_t v25 = 0;
          int v22 = v10;
          int v23 = v11;
          uint64_t result = (int *)kaldi::VectorBase<double>::CopyFromVec((uint64_t)&v26, &v22);
          ++v7;
        }
        while (v7 < v6[3]);
      }
    }
    else
    {
      uint64_t v12 = result[3];
      if ((int)v12 >= 1)
      {
        uint64_t v13 = 0;
        uint64_t v14 = result[2];
        uint64_t v15 = *(void **)result;
        uint64_t v16 = *(void **)a2;
        uint64_t v17 = 8 * result[4];
        uint64_t v18 = 8 * a2[4];
        do
        {
          uint64_t v19 = v14;
          int v20 = v16;
          int v21 = v15;
          if ((int)v14 >= 1)
          {
            do
            {
              *v21++ = *v20;
              int v20 = (void *)((char *)v20 + v18);
              --v19;
            }
            while (v19);
          }
          ++v13;
          uint64_t v15 = (void *)((char *)v15 + v17);
          ++v16;
        }
        while (v13 != v12);
      }
    }
  }
  return result;
}

void kaldi::MatrixBase<float>::SetZero(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 == *(_DWORD *)(a1 + 16))
  {
    uint64_t v3 = *(void **)a1;
    size_t v4 = 4 * v2 * (uint64_t)*(int *)(a1 + 12);
    bzero(v3, v4);
  }
  else if (*(int *)(a1 + 12) >= 1)
  {
    int v5 = 0;
    do
      bzero((void *)(*(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v5++), 4 * *(int *)(a1 + 8));
    while (v5 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<double>::SetZero(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 == *(_DWORD *)(a1 + 16))
  {
    uint64_t v3 = *(void **)a1;
    size_t v4 = 8 * v2 * (uint64_t)*(int *)(a1 + 12);
    bzero(v3, v4);
  }
  else if (*(int *)(a1 + 12) >= 1)
  {
    int v5 = 0;
    do
      bzero((void *)(*(void *)a1 + 8 * *(_DWORD *)(a1 + 16) * v5++), 8 * *(int *)(a1 + 8));
    while (v5 < *(_DWORD *)(a1 + 12));
  }
}

uint64_t kaldi::MatrixBase<float>::CopyFromMat<signed char>(uint64_t a1, float *a2, int a3)
{
  kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  if (a3 == 111)
  {
    uint64_t result = kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
    int v7 = *(_DWORD *)(a1 + 8);
    if (v7 >= 1)
    {
      for (uint64_t i = 0; i < v7; ++i)
      {
        if ((int)result >= 1)
        {
          int v9 = 0;
          do
          {
            uint64_t v10 = kaldi::QuantizedMatrixBase<signed char>::Data((uint64_t)a2);
            float v11 = (float)*(char *)(v10 + (int)(kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2) * v9) + i)
                / a2[3];
            int v7 = *(_DWORD *)(a1 + 8);
            uint64_t result = *(unsigned int *)(a1 + 12);
            *(float *)(*(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v9++ + 4 * i) = v11;
          }
          while (v9 < (int)result);
        }
      }
    }
  }
  else
  {
    uint64_t result = kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
    if ((int)result >= 1)
    {
      uint64_t v12 = 0;
      LODWORD(v13) = *(_DWORD *)(a1 + 12);
      do
      {
        if ((int)v13 >= 1)
        {
          uint64_t v14 = 0;
          do
          {
            uint64_t v15 = kaldi::QuantizedMatrixBase<signed char>::Data((uint64_t)a2);
            float v16 = (float)*(char *)(v15 + (int)(v12 * kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2)) + v14)
                / a2[3];
            uint64_t result = *(unsigned int *)(a1 + 8);
            uint64_t v13 = *(int *)(a1 + 12);
            *(float *)(*(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * (int)v14++ + 4 * v12) = v16;
          }
          while (v14 < v13);
        }
        ++v12;
      }
      while (v12 < (int)result);
    }
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::CopyFromMat<short>(uint64_t a1, float *a2, int a3)
{
  kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  if (a3 == 111)
  {
    uint64_t result = kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
    int v7 = *(_DWORD *)(a1 + 8);
    if (v7 >= 1)
    {
      for (uint64_t i = 0; i < v7; ++i)
      {
        if ((int)result >= 1)
        {
          int v9 = 0;
          do
          {
            uint64_t v10 = kaldi::QuantizedMatrixBase<signed char>::Data((uint64_t)a2);
            float v11 = (float)*(__int16 *)(v10
                                    + 2 * (int)(kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2) * v9)
                                    + 2 * i)
                / a2[3];
            int v7 = *(_DWORD *)(a1 + 8);
            uint64_t result = *(unsigned int *)(a1 + 12);
            *(float *)(*(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v9++ + 4 * i) = v11;
          }
          while (v9 < (int)result);
        }
      }
    }
  }
  else
  {
    uint64_t result = kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
    if ((int)result >= 1)
    {
      uint64_t v12 = 0;
      LODWORD(v13) = *(_DWORD *)(a1 + 12);
      do
      {
        if ((int)v13 >= 1)
        {
          uint64_t v14 = 0;
          do
          {
            uint64_t v15 = kaldi::QuantizedMatrixBase<signed char>::Data((uint64_t)a2);
            float v16 = (float)*(__int16 *)(v15
                                    + 2 * (int)(v12 * kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2))
                                    + 2 * v14)
                / a2[3];
            uint64_t result = *(unsigned int *)(a1 + 8);
            uint64_t v13 = *(int *)(a1 + 12);
            *(float *)(*(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * (int)v14++ + 4 * v12) = v16;
          }
          while (v14 < v13);
        }
        ++v12;
      }
      while (v12 < (int)result);
    }
  }
  return result;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(unsigned char *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<float>::Resize((int32x2_t *)a1, a2, a3, a4, a5);
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix<signed char>(uint64_t a1, kaldi::quasar::Vocab *this)
{
  uint64_t v4 = kaldi::quasar::Vocab::VocabSize(this);
  uint64_t v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)this);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 0;
  kaldi::Matrix<float>::Resize((int32x2_t *)a1, v4, v5, 0, 0);
  kaldi::MatrixBase<float>::CopyFromMat<signed char>(a1, (float *)this, 111);
  return a1;
}

void sub_1B200D518(_Unwind_Exception *exception_object)
{
  if (*(void *)v1)
  {
    if (!*(unsigned char *)(v1 + 32)) {
      free(*(void **)v1);
    }
  }
  *(unsigned char *)(v1 + 32) = 0;
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::Matrix<float>::~Matrix(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (v2 && !*(unsigned char *)(a1 + 32)) {
    free(v2);
  }
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix<short>(uint64_t a1, kaldi::quasar::Vocab *this)
{
  uint64_t v4 = kaldi::quasar::Vocab::VocabSize(this);
  uint64_t v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)this);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 0;
  kaldi::Matrix<float>::Resize((int32x2_t *)a1, v4, v5, 0, 0);
  kaldi::MatrixBase<float>::CopyFromMat<short>(a1, (float *)this, 111);
  return a1;
}

void sub_1B200D600(_Unwind_Exception *exception_object)
{
  if (*(void *)v1)
  {
    if (!*(unsigned char *)(v1 + 32)) {
      free(*(void **)v1);
    }
  }
  *(unsigned char *)(v1 + 32) = 0;
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = 0;
  _Unwind_Resume(exception_object);
}

void kaldi::MatrixBase<float>::AddMatMat(uint64_t a1, uint64_t a2, CBLAS_TRANSPOSE __TransA, uint64_t a4, CBLAS_TRANSPOSE __TransB, float a6, float a7)
{
  if (__TransA == CblasNoTrans && __TransB == CblasNoTrans)
  {
    int v7 = *(_DWORD *)(a2 + 8);
    if (v7 == *(_DWORD *)(a4 + 12))
    {
      int v8 = *(_DWORD *)(a2 + 12);
      if (v8 == *(_DWORD *)(a1 + 12))
      {
        int v9 = *(_DWORD *)(a4 + 8);
        goto LABEL_17;
      }
    }
    goto LABEL_20;
  }
  if (__TransA != CblasTrans || __TransB != CblasNoTrans)
  {
    if (__TransA == CblasNoTrans && __TransB == CblasTrans)
    {
      int v7 = *(_DWORD *)(a2 + 8);
      if (v7 == *(_DWORD *)(a4 + 8))
      {
        int v8 = *(_DWORD *)(a2 + 12);
        if (v8 == *(_DWORD *)(a1 + 12))
        {
          int v9 = *(_DWORD *)(a4 + 12);
LABEL_17:
          if (v9 == *(_DWORD *)(a1 + 8))
          {
            int v10 = v8;
            if (!v8) {
              return;
            }
            goto LABEL_22;
          }
        }
      }
    }
LABEL_20:
    int v7 = *(_DWORD *)(a2 + 8);
    int v8 = *(_DWORD *)(a2 + 12);
    int v9 = *(_DWORD *)(a4 + 12);
    goto LABEL_21;
  }
  int v8 = *(_DWORD *)(a2 + 12);
  if (v8 != *(_DWORD *)(a4 + 12)) {
    goto LABEL_20;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  if (v7 != *(_DWORD *)(a1 + 12)) {
    goto LABEL_20;
  }
  int v9 = *(_DWORD *)(a4 + 8);
  if (v9 != *(_DWORD *)(a1 + 8)) {
    goto LABEL_20;
  }
LABEL_21:
  int v10 = v7;
  if (!v7) {
    return;
  }
LABEL_22:
  if (__TransA == CblasNoTrans) {
    int v11 = v7;
  }
  else {
    int v11 = v8;
  }
  cblas_sgemm(CblasRowMajor, __TransA, __TransB, v10, v9, v11, a6, *(const float **)a2, *(_DWORD *)(a2 + 16), *(const float **)a4, *(_DWORD *)(a4 + 16), a7, *(float **)a1, *(_DWORD *)(a1 + 16));
}

uint64_t *kaldi::MatrixBase<float>::AddVecToRows<float>(uint64_t *result, uint64_t *a2, float a3)
{
  int v3 = *((_DWORD *)result + 3);
  if (v3 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((unsigned int *)result + 2);
    uint64_t v6 = *a2;
    uint64_t v7 = *result;
    uint64_t v8 = 4 * *((int *)result + 4);
    do
    {
      if ((int)v5 >= 1)
      {
        uint64_t v9 = 0;
        do
        {
          *(float *)(v7 + v9) = *(float *)(v7 + v9) + (float)(a3 * *(float *)(v6 + v9));
          v9 += 4;
        }
        while (4 * v5 != v9);
      }
      ++v4;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t *kaldi::MatrixBase<float>::AddVecToCols<float>(uint64_t *result, uint64_t *a2, float a3)
{
  uint64_t v3 = *((unsigned int *)result + 3);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((unsigned int *)result + 2);
    uint64_t v6 = *a2;
    uint64_t v7 = *result;
    uint64_t v8 = 4 * *((int *)result + 4);
    do
    {
      if ((int)v5 >= 1)
      {
        uint64_t v9 = 0;
        float v10 = *(float *)(v6 + 4 * v4) * a3;
        do
        {
          *(float *)(v7 + v9) = v10 + *(float *)(v7 + v9);
          v9 += 4;
        }
        while (4 * v5 != v9);
      }
      ++v4;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return result;
}

BOOL kaldi::SameDim<float>(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

double kaldi::Matrix<float>::Matrix(uint64_t a1)
{
  *(unsigned char *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  *(void *)double result = a2;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a5 * a3;
  return result;
}

uint64_t *kaldi::Matrix<float>::Swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *double result = *a2;
  *a2 = v2;
  LODWORD(v2) = *((_DWORD *)result + 2);
  *((_DWORD *)result + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v2;
  LODWORD(v2) = *((_DWORD *)result + 3);
  *((_DWORD *)result + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v2;
  LODWORD(v2) = *((_DWORD *)result + 4);
  *((_DWORD *)result + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v2;
  LODWORD(v2) = *((_DWORD *)result + 5);
  *((_DWORD *)result + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v2;
  LOBYTE(v2) = *((unsigned char *)result + 32);
  *((unsigned char *)result + 32) = *((unsigned char *)a2 + 32);
  *((unsigned char *)a2 + 32) = v2;
  return result;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, uint64_t a2, int a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a3 == 111)
  {
    kaldi::Matrix<float>::Resize((int32x2_t *)a1, *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 8), 0, 0);
    int v5 = 111;
  }
  else
  {
    kaldi::Matrix<float>::Resize((int32x2_t *)a1, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), 0, 0);
    int v5 = 112;
  }
  kaldi::MatrixBase<float>::CopyFromMat<float>((int *)a1, (int *)a2, v5);
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, int *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<float>::Resize((int32x2_t *)a1, a2[3], a2[2], 1, a2[2] == a2[4]);
  kaldi::MatrixBase<float>::CopyFromMat<float>((int *)a1, a2, 111);
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = *(unsigned int *)(v4 + 8);
    uint64_t v6 = *(unsigned int *)(v4 + 12);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  kaldi::Matrix<float>::Resize((int32x2_t *)a1, v5, v6, 1, 0);
  kaldi::CompressedMatrix::CopyToMat<float>(a2, a1);
  return a1;
}

void kaldi::Matrix<float>::Read(int32x2_t *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  int v6 = a3;
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    char v70 = 0;
    *(_OWORD *)uint64_t v68 = 0u;
    long long v69 = 0u;
    kaldi::Matrix<float>::Read(v68, a2, a3, 0, a5, 0.0);
    if (a1[1].i32[1])
    {
      if ((void *)a1[1] != v68[1])
      {
        if (HIDWORD(v68[1]))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Matrix::Read, size mismatch ", 28);
          uint64_t v9 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
          float v10 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" vs. ", 5);
          int v11 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v75);
        }
        goto LABEL_15;
      }
    }
    else
    {
      kaldi::Matrix<float>::Resize(a1, HIDWORD(v68[1]), LODWORD(v68[1]), 0, 0);
    }
    kaldi::MatrixBase<float>::AddMat((uint64_t)a1, (uint64_t)v68, 111, 1.0, 1.0);
LABEL_15:
    if (v68[0])
    {
      if (!v70) {
        free(v68[0]);
      }
    }
    return;
  }
  std::istream::tellg();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v68);
  if (!v6)
  {
    memset(&v74, 0, sizeof(v74));
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v74);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)": Expected \"[\", got EOF", 23);
LABEL_65:
      int v33 = 2;
      goto LABEL_66;
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v74.__r_.__value_.__l.__size_ != 1)
      {
        if (v74.__r_.__value_.__l.__size_ == 2 && *(_WORD *)v74.__r_.__value_.__l.__data_ == 23899) {
          goto LABEL_122;
        }
        goto LABEL_58;
      }
      int v28 = (std::string *)v74.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(v74.__r_.__value_.__r.__words[2]) != 1)
      {
        if (HIBYTE(v74.__r_.__value_.__r.__words[2]) == 2 && LOWORD(v74.__r_.__value_.__l.__data_) == 23899)
        {
LABEL_122:
          kaldi::Matrix<float>::Resize(a1, 0, 0, 0, 0);
          int v33 = 1;
LABEL_66:
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v74.__r_.__value_.__l.__data_);
          }
          if ((v33 | 2) != 2) {
            goto LABEL_69;
          }
          goto LABEL_106;
        }
LABEL_58:
        uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)": Expected \"[\", got \"", 21);
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v30 = &v74;
        }
        else {
          uint64_t v30 = (std::string *)v74.__r_.__value_.__r.__words[0];
        }
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v74.__r_.__value_.__l.__size_;
        }
        uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, size);
        LOBYTE(v75) = 34;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)&v75, 1);
        goto LABEL_65;
      }
      int v28 = &v74;
    }
    if (v28->__r_.__value_.__s.__data_[0] == 91)
    {
      __s1 = 0;
      __uint64_t n = 0;
      uint64_t v67 = 0;
      operator new();
    }
    goto LABEL_58;
  }
  int v12 = kaldi::Peek(a2, 1);
  if (v12 == 68)
  {
    if (a5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Can not map into the wrong matrix data type", 43);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v75);
    }
    uint64_t v16 = a1[1].u32[0];
    uint64_t v15 = a1[1].u32[1];
    long long v75 = 0u;
    long long v76 = 0u;
    char v77 = 0;
    kaldi::Matrix<double>::Resize((int32x2_t *)&v75, v15, v16, 0, 0);
    kaldi::Matrix<double>::Read((int32x2_t *)&v75, a2, 1, 0, 0);
    kaldi::Matrix<float>::Resize(a1, HIDWORD(v75), DWORD2(v75), 0, 0);
    kaldi::MatrixBase<float>::CopyFromMat<double>((uint64_t)a1, (uint64_t)&v75, 111);
    if ((void)v75 && !v77) {
      free((void *)v75);
    }
    goto LABEL_69;
  }
  if (v12 != 67)
  {
    memset(&v74, 0, sizeof(v74));
    std::string::append(&v74, "F");
    BOOL v17 = a5 != 0;
    if (a5) {
      uint64_t v18 = "N";
    }
    else {
      uint64_t v18 = "M";
    }
    std::string::append(&v74, v18);
    __s1 = 0;
    __uint64_t n = 0;
    uint64_t v67 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&__s1);
    int v19 = SHIBYTE(v67);
    size_t v20 = __n;
    if (v67 >= 0) {
      size_t v21 = HIBYTE(v67);
    }
    else {
      size_t v21 = __n;
    }
    std::string::size_type v22 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
    int v23 = SHIBYTE(v74.__r_.__value_.__r.__words[2]);
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v22 = v74.__r_.__value_.__l.__size_;
    }
    if (v21 == v22)
    {
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v24 = &v74;
      }
      else {
        int v24 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      if (v67 < 0)
      {
        if (!memcmp(__s1, v24, __n)) {
          goto LABEL_85;
        }
        goto LABEL_74;
      }
      if (!HIBYTE(v67)) {
        goto LABEL_85;
      }
      p_s1 = &__s1;
      uint64_t v26 = HIBYTE(v67);
      while (*(unsigned __int8 *)p_s1 == v24->__r_.__value_.__s.__data_[0])
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        int v24 = (std::string *)((char *)v24 + 1);
        if (!--v26) {
          goto LABEL_85;
        }
      }
    }
    if ((v67 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v67) != 2) {
        goto LABEL_87;
      }
      int v27 = (unsigned __int8 *)&__s1;
LABEL_76:
      int v34 = *v27;
      uint64_t v35 = (std::string *)v74.__r_.__value_.__r.__words[0];
      if (v23 >= 0) {
        uint64_t v35 = &v74;
      }
      if (v34 == v35->__r_.__value_.__s.__data_[0])
      {
        long long v36 = __s1;
        if (v19 >= 0) {
          long long v36 = &__s1;
        }
        if (v36[1] == 78)
        {
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Reading aligned matrix as a stream", 34);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v75);
          }
          BOOL v17 = 1;
LABEL_85:
          LODWORD(v63) = 0;
          uint64_t v64 = 0;
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v63);
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v64 + 4);
          if (v17)
          {
            kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v64);
            fst::AlignInput();
          }
          else
          {
            LODWORD(v64) = HIDWORD(v64);
          }
          int v51 = (int)v63;
          if (a5)
          {
            a1[1].i32[0] = HIDWORD(v64);
            a1[1].i32[1] = v51;
            a1[2].i32[0] = v64;
            if (*(void *)a1 && !a1[4].i8[0]) {
              free(*(void **)a1);
            }
            std::istream::tellg();
            *a1 = (int32x2_t)(a5 + v78);
            a1[4].i8[0] = 1;
            std::istream::seekg();
            uint64_t v52 = *a2;
            if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)": Seeking failed", 16);
LABEL_100:
              int v45 = 2;
              goto LABEL_101;
            }
          }
          else
          {
            int v53 = HIDWORD(v64);
            if (__PAIR64__(v63, HIDWORD(v64)) == *(void *)&a1[1])
            {
              __int32 v54 = HIDWORD(v64);
            }
            else
            {
              kaldi::Matrix<float>::Resize(a1, v63, HIDWORD(v64), 1, 0);
              __int32 v54 = a1[1].i32[0];
              int v53 = HIDWORD(v64);
              int v51 = (int)v63;
            }
            __int32 v55 = a1[2].i32[0];
            int v56 = v64;
            if (v55 == v54 && v55 == v64 && v53 * v51)
            {
              std::istream::read();
              uint64_t v52 = *a2;
              if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)": Reading whole matrix failed", 29);
                goto LABEL_100;
              }
            }
            else
            {
              if (v51 > 0)
              {
                int v57 = 0;
                uint64_t v58 = a2 + 4;
                while (1)
                {
                  std::istream::read();
                  uint64_t v52 = *a2;
                  if ((*((unsigned char *)v58 + *(void *)(*a2 - 24)) & 5) != 0)
                  {
                    unint64_t v60 = v68;
                    uint64_t v61 = 29;
                    unint64_t v62 = ": Reading a matrix row failed";
                    goto LABEL_145;
                  }
                  if (v56 != v53)
                  {
                    std::istream::seekg();
                    uint64_t v52 = *a2;
                    if ((*((unsigned char *)v58 + *(void *)(*a2 - 24)) & 5) != 0) {
                      break;
                    }
                  }
                  if (++v57 >= (int)v63) {
                    goto LABEL_139;
                  }
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)": Seek for padding ", 19);
                unint64_t v60 = (void *)std::ostream::operator<<();
                unint64_t v62 = " failed";
                uint64_t v61 = 7;
LABEL_145:
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v62, v61);
                goto LABEL_100;
              }
              uint64_t v52 = *a2;
            }
          }
LABEL_139:
          int v59 = *(_DWORD *)((char *)a2 + *(void *)(v52 - 24) + 32);
          int v45 = 1;
          if ((v59 & 2) == 0)
          {
            if ((v59 & 5) != 0) {
              int v45 = 2;
            }
            else {
              int v45 = 1;
            }
          }
LABEL_101:
          if (SHIBYTE(v67) < 0) {
            operator delete(__s1);
          }
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v74.__r_.__value_.__l.__data_);
          }
          if (v45 != 2) {
            goto LABEL_69;
          }
LABEL_106:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
          __int8 v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Failed to read matrix from stream.  ", 36);
          std::stringbuf::str();
          if (v67 >= 0) {
            char v47 = &__s1;
          }
          else {
            char v47 = __s1;
          }
          if (v67 >= 0) {
            size_t v48 = HIBYTE(v67);
          }
          else {
            size_t v48 = __n;
          }
          uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" File position at start is ", 27);
          uint64_t v50 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", currently ", 12);
          std::istream::tellg();
          std::ostream::operator<<();
          if (SHIBYTE(v67) < 0) {
            operator delete(__s1);
          }
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v75);
        }
      }
LABEL_87:
      uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)": Expected token ", 17);
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v38 = &v74;
      }
      else {
        long long v38 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v39 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v39 = v74.__r_.__value_.__l.__size_;
      }
      long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
      long long v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", got ", 6);
      if (v67 >= 0) {
        int32x2_t v42 = &__s1;
      }
      else {
        int32x2_t v42 = __s1;
      }
      if (v67 >= 0) {
        size_t v43 = HIBYTE(v67);
      }
      else {
        size_t v43 = __n;
      }
      uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)". This could mean that you're trying to memory map an unaligned file.", 69);
      goto LABEL_100;
    }
LABEL_74:
    if (v20 != 2) {
      goto LABEL_87;
    }
    int v27 = (unsigned __int8 *)__s1;
    goto LABEL_76;
  }
  *(void *)&long long v75 = 0;
  BYTE8(v75) = 0;
  kaldi::CompressedMatrix::Read((uint64_t)&v75, a2, 1, a5);
  if ((void)v75)
  {
    uint64_t v13 = *(unsigned int *)(v75 + 8);
    uint64_t v14 = *(unsigned int *)(v75 + 12);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  kaldi::Matrix<float>::Resize(a1, v13, v14, 0, 0);
  kaldi::CompressedMatrix::CopyToMat<float>((uint64_t *)&v75, (uint64_t)a1);
  kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&v75);
LABEL_69:
  v68[0] = *(void **)MEMORY[0x1E4FBA418];
  *(void **)((char *)v68 + *((void *)v68[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  v68[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
  if (v72 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](&v73);
}

void sub_1B200EFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a67)
  {
    if (!a71) {
      free(a67);
    }
  }
  JUMPOUT(0x1B200F048);
}

void sub_1B200EFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&a67);
  JUMPOUT(0x1B200F048);
}

void sub_1B200F004()
{
}

void sub_1B200F00C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void kaldi::MatrixBase<float>::AddMat(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  if (a2 == a1)
  {
    if (a3 == 111)
    {
      float v16 = a4 + a5;
      kaldi::MatrixBase<float>::Scale(a2, v16);
    }
    else
    {
      uint64_t v19 = *(unsigned int *)(a2 + 12);
      size_t v20 = *(const float **)a2;
      if (a4 == 1.0 && a5 == 1.0)
      {
        if ((int)v19 >= 1)
        {
          uint64_t v31 = 0;
          uint64_t v32 = *(int *)(a2 + 16);
          uint64_t v33 = 4 * v32;
          int v34 = *(const float **)a2;
          uint64_t v35 = *(float **)a2;
          do
          {
            if (v31)
            {
              uint64_t v36 = 0;
              uint64_t v37 = v31 * v32;
              long long v38 = v35;
              do
              {
                float v39 = v34[v36] + *v38;
                *long long v38 = v39;
                v34[v36++] = v39;
                long long v38 = (float *)((char *)v38 + v33);
              }
              while (v31 != v36);
            }
            else
            {
              uint64_t v37 = 0;
            }
            v20[v37 + v31] = v20[v37 + v31] + v20[v37 + v31];
            ++v31;
            ++v35;
            int v34 = (const float *)((char *)v34 + v33);
          }
          while (v31 != v19);
        }
      }
      else if ((int)v19 >= 1)
      {
        uint64_t v22 = 0;
        uint64_t v23 = *(int *)(a2 + 16);
        uint64_t v24 = 4 * v23;
        uint64_t v25 = *(const float **)a2;
        uint64_t v26 = *(float **)a2;
        do
        {
          if (v22)
          {
            uint64_t v27 = 0;
            uint64_t v28 = v22 * v23;
            uint64_t v29 = v26;
            do
            {
              float v30 = v25[v27];
              v25[v27] = (float)(v30 * a5) + (float)(a4 * *v29);
              *uint64_t v29 = (float)(*v29 * a5) + (float)(a4 * v30);
              ++v27;
              uint64_t v29 = (float *)((char *)v29 + v24);
            }
            while (v22 != v27);
          }
          else
          {
            uint64_t v28 = 0;
          }
          v20[v28 + v22] = (float)(a4 + a5) * v20[v28 + v22];
          ++v22;
          ++v26;
          uint64_t v25 = (const float *)((char *)v25 + v24);
        }
        while (v22 != v19);
      }
    }
  }
  else
  {
    if (a5 != 1.0) {
      kaldi::MatrixBase<float>::Scale(a1, a5);
    }
    uint64_t v9 = *(int *)(a2 + 16);
    uint64_t v10 = *(int *)(a1 + 16);
    int v11 = *(const float **)a2;
    int v12 = *(float **)a1;
    if (a3 == 111)
    {
      if (*(int *)(a2 + 12) >= 1)
      {
        int v13 = 0;
        uint64_t v14 = 4 * v10;
        uint64_t v15 = 4 * v9;
        do
        {
          cblas_saxpy(*(_DWORD *)(a1 + 8), a4, v11, 1, v12, 1);
          ++v13;
          int v12 = (float *)((char *)v12 + v14);
          int v11 = (const float *)((char *)v11 + v15);
        }
        while (v13 < *(_DWORD *)(a1 + 12));
      }
    }
    else if (*(int *)(a2 + 8) >= 1)
    {
      int v17 = 0;
      uint64_t v18 = 4 * v10;
      do
      {
        cblas_saxpy(*(_DWORD *)(a1 + 8), a4, v11, v9, v12, 1);
        ++v17;
        ++v11;
        int v12 = (float *)((char *)v12 + v18);
      }
      while (v17 < *(_DWORD *)(a1 + 12));
    }
  }
}

void kaldi::Matrix<double>::Read(int32x2_t *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  int v6 = a3;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    char v71 = 0;
    *(_OWORD *)long long v69 = 0u;
    long long v70 = 0u;
    kaldi::Matrix<double>::Read(v69, a2, a3, 0, a5);
    if (a1[1].i32[1])
    {
      if ((void *)a1[1] != v69[1])
      {
        if (HIDWORD(v69[1]))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v76);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v76, (uint64_t)"Matrix::Read, size mismatch ", 28);
          uint64_t v9 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
          uint64_t v10 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" vs. ", 5);
          int v11 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v76);
        }
        goto LABEL_15;
      }
    }
    else
    {
      kaldi::Matrix<double>::Resize(a1, HIDWORD(v69[1]), LODWORD(v69[1]), 0, 0);
    }
    kaldi::MatrixBase<double>::AddMat((uint64_t)a1, (uint64_t)v69, 111, 1.0, 1.0);
LABEL_15:
    if (v69[0])
    {
      if (!v71) {
        free(v69[0]);
      }
    }
    return;
  }
  std::istream::tellg();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v69);
  if (!v6)
  {
    memset(&v75, 0, sizeof(v75));
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v75);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)": Expected \"[\", got EOF", 23);
LABEL_65:
      int v34 = 2;
      goto LABEL_66;
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v75.__r_.__value_.__l.__size_ != 1)
      {
        if (v75.__r_.__value_.__l.__size_ == 2 && *(_WORD *)v75.__r_.__value_.__l.__data_ == 23899) {
          goto LABEL_122;
        }
        goto LABEL_58;
      }
      uint64_t v29 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(v75.__r_.__value_.__r.__words[2]) != 1)
      {
        if (HIBYTE(v75.__r_.__value_.__r.__words[2]) == 2 && LOWORD(v75.__r_.__value_.__l.__data_) == 23899)
        {
LABEL_122:
          kaldi::Matrix<double>::Resize(a1, 0, 0, 0, 0);
          int v34 = 1;
LABEL_66:
          if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v75.__r_.__value_.__l.__data_);
          }
          if ((v34 | 2) != 2) {
            goto LABEL_69;
          }
          goto LABEL_106;
        }
LABEL_58:
        float v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)": Expected \"[\", got \"", 21);
        if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v31 = &v75;
        }
        else {
          uint64_t v31 = (std::string *)v75.__r_.__value_.__r.__words[0];
        }
        if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v75.__r_.__value_.__l.__size_;
        }
        uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, size);
        LOBYTE(v76) = 34;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v76, 1);
        goto LABEL_65;
      }
      uint64_t v29 = &v75;
    }
    if (v29->__r_.__value_.__s.__data_[0] == 91)
    {
      __s1 = 0;
      __uint64_t n = 0;
      uint64_t v68 = 0;
      operator new();
    }
    goto LABEL_58;
  }
  int v12 = kaldi::Peek(a2, 1);
  if (v12 == 70)
  {
    if (a5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v76);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v76, (uint64_t)"Can not map into the wrong matrix data type", 43);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v76);
    }
    uint64_t v16 = a1[1].u32[0];
    uint64_t v15 = a1[1].u32[1];
    long long v76 = 0u;
    long long v77 = 0u;
    char v78 = 0;
    kaldi::Matrix<float>::Resize((int32x2_t *)&v76, v15, v16, 0, 0);
    kaldi::Matrix<float>::Read(&v76, a2, 1, 0, 0, v17);
    kaldi::Matrix<double>::Resize(a1, HIDWORD(v76), DWORD2(v76), 0, 0);
    kaldi::MatrixBase<double>::CopyFromMat<float>((uint64_t)a1, (uint64_t)&v76, 111);
    if ((void)v76 && !v78) {
      free((void *)v76);
    }
    goto LABEL_69;
  }
  if (v12 != 67)
  {
    memset(&v75, 0, sizeof(v75));
    std::string::append(&v75, "D");
    BOOL v18 = a5 != 0;
    if (a5) {
      uint64_t v19 = "N";
    }
    else {
      uint64_t v19 = "M";
    }
    std::string::append(&v75, v19);
    __s1 = 0;
    __uint64_t n = 0;
    uint64_t v68 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&__s1);
    int v20 = SHIBYTE(v68);
    size_t v21 = __n;
    if (v68 >= 0) {
      size_t v22 = HIBYTE(v68);
    }
    else {
      size_t v22 = __n;
    }
    std::string::size_type v23 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    int v24 = SHIBYTE(v75.__r_.__value_.__r.__words[2]);
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v23 = v75.__r_.__value_.__l.__size_;
    }
    if (v22 == v23)
    {
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v75;
      }
      else {
        uint64_t v25 = (std::string *)v75.__r_.__value_.__r.__words[0];
      }
      if (v68 < 0)
      {
        if (!memcmp(__s1, v25, __n)) {
          goto LABEL_85;
        }
        goto LABEL_74;
      }
      if (!HIBYTE(v68)) {
        goto LABEL_85;
      }
      p_s1 = &__s1;
      uint64_t v27 = HIBYTE(v68);
      while (*(unsigned __int8 *)p_s1 == v25->__r_.__value_.__s.__data_[0])
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        uint64_t v25 = (std::string *)((char *)v25 + 1);
        if (!--v27) {
          goto LABEL_85;
        }
      }
    }
    if ((v68 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v68) != 2) {
        goto LABEL_87;
      }
      uint64_t v28 = (unsigned __int8 *)&__s1;
LABEL_76:
      int v35 = *v28;
      uint64_t v36 = (std::string *)v75.__r_.__value_.__r.__words[0];
      if (v24 >= 0) {
        uint64_t v36 = &v75;
      }
      if (v35 == v36->__r_.__value_.__s.__data_[0])
      {
        uint64_t v37 = __s1;
        if (v20 >= 0) {
          uint64_t v37 = &__s1;
        }
        if (v37[1] == 78)
        {
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v76);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v76, (uint64_t)"Reading aligned matrix as a stream", 34);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v76);
          }
          BOOL v18 = 1;
LABEL_85:
          LODWORD(v64) = 0;
          uint64_t v65 = 0;
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v64);
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v65 + 4);
          if (v18)
          {
            kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v65);
            fst::AlignInput();
          }
          else
          {
            LODWORD(v65) = HIDWORD(v65);
          }
          int v52 = (int)v64;
          if (a5)
          {
            a1[1].i32[0] = HIDWORD(v65);
            a1[1].i32[1] = v52;
            a1[2].i32[0] = v65;
            if (*(void *)a1 && !a1[4].i8[0]) {
              free(*(void **)a1);
            }
            std::istream::tellg();
            *a1 = (int32x2_t)(a5 + v79);
            a1[4].i8[0] = 1;
            std::istream::seekg();
            uint64_t v53 = *a2;
            if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)": Seeking failed", 16);
LABEL_100:
              int v46 = 2;
              goto LABEL_101;
            }
          }
          else
          {
            int v54 = HIDWORD(v65);
            if (__PAIR64__(v64, HIDWORD(v65)) == *(void *)&a1[1])
            {
              __int32 v55 = HIDWORD(v65);
            }
            else
            {
              kaldi::Matrix<double>::Resize(a1, v64, HIDWORD(v65), 1, 0);
              __int32 v55 = a1[1].i32[0];
              int v54 = HIDWORD(v65);
              int v52 = (int)v64;
            }
            __int32 v56 = a1[2].i32[0];
            int v57 = v65;
            if (v56 == v55 && v56 == v65 && v54 * v52)
            {
              std::istream::read();
              uint64_t v53 = *a2;
              if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)": Reading whole matrix failed", 29);
                goto LABEL_100;
              }
            }
            else
            {
              if (v52 > 0)
              {
                int v58 = 0;
                int v59 = a2 + 4;
                while (1)
                {
                  std::istream::read();
                  uint64_t v53 = *a2;
                  if ((*((unsigned char *)v59 + *(void *)(*a2 - 24)) & 5) != 0)
                  {
                    uint64_t v61 = v69;
                    uint64_t v62 = 29;
                    int v63 = ": Reading a matrix row failed";
                    goto LABEL_145;
                  }
                  if (v57 != v54)
                  {
                    std::istream::seekg();
                    uint64_t v53 = *a2;
                    if ((*((unsigned char *)v59 + *(void *)(*a2 - 24)) & 5) != 0) {
                      break;
                    }
                  }
                  if (++v58 >= (int)v64) {
                    goto LABEL_139;
                  }
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)": Seek for padding ", 19);
                uint64_t v61 = (void *)std::ostream::operator<<();
                int v63 = " failed";
                uint64_t v62 = 7;
LABEL_145:
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v63, v62);
                goto LABEL_100;
              }
              uint64_t v53 = *a2;
            }
          }
LABEL_139:
          int v60 = *(_DWORD *)((char *)a2 + *(void *)(v53 - 24) + 32);
          int v46 = 1;
          if ((v60 & 2) == 0)
          {
            if ((v60 & 5) != 0) {
              int v46 = 2;
            }
            else {
              int v46 = 1;
            }
          }
LABEL_101:
          if (SHIBYTE(v68) < 0) {
            operator delete(__s1);
          }
          if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v75.__r_.__value_.__l.__data_);
          }
          if (v46 != 2) {
            goto LABEL_69;
          }
LABEL_106:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v76);
          char v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v76, (uint64_t)"Failed to read matrix from stream.  ", 36);
          std::stringbuf::str();
          if (v68 >= 0) {
            size_t v48 = &__s1;
          }
          else {
            size_t v48 = __s1;
          }
          if (v68 >= 0) {
            size_t v49 = HIBYTE(v68);
          }
          else {
            size_t v49 = __n;
          }
          uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" File position at start is ", 27);
          int v51 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", currently ", 12);
          std::istream::tellg();
          std::ostream::operator<<();
          if (SHIBYTE(v68) < 0) {
            operator delete(__s1);
          }
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v76);
        }
      }
LABEL_87:
      long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)": Expected token ", 17);
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float v39 = &v75;
      }
      else {
        float v39 = (std::string *)v75.__r_.__value_.__r.__words[0];
      }
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v40 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v40 = v75.__r_.__value_.__l.__size_;
      }
      long long v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
      int32x2_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", got ", 6);
      if (v68 >= 0) {
        size_t v43 = &__s1;
      }
      else {
        size_t v43 = __s1;
      }
      if (v68 >= 0) {
        size_t v44 = HIBYTE(v68);
      }
      else {
        size_t v44 = __n;
      }
      int v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)". This could mean that you're trying to memory map an unaligned file.", 69);
      goto LABEL_100;
    }
LABEL_74:
    if (v21 != 2) {
      goto LABEL_87;
    }
    uint64_t v28 = (unsigned __int8 *)__s1;
    goto LABEL_76;
  }
  *(void *)&long long v76 = 0;
  BYTE8(v76) = 0;
  kaldi::CompressedMatrix::Read((uint64_t)&v76, a2, 1, a5);
  if ((void)v76)
  {
    uint64_t v13 = *(unsigned int *)(v76 + 8);
    uint64_t v14 = *(unsigned int *)(v76 + 12);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  kaldi::Matrix<double>::Resize(a1, v13, v14, 0, 0);
  kaldi::CompressedMatrix::CopyToMat<double>((uint64_t *)&v76, (uint64_t)a1);
  kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&v76);
LABEL_69:
  v69[0] = *(void **)MEMORY[0x1E4FBA418];
  *(void **)((char *)v69 + *((void *)v69[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  v69[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
  if (v73 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](&v74);
}

void sub_1B2010888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a67)
  {
    if (!a71) {
      free(a67);
    }
  }
  JUMPOUT(0x1B2010914);
}

void sub_1B20108A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&a67);
  JUMPOUT(0x1B2010914);
}

void sub_1B20108D0()
{
}

void sub_1B20108D8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::Matrix<float>::Init(uint64_t result, unsigned int a2, int a3, int a4)
{
  uint64_t v4 = result;
  if (a3 * a2)
  {
    memptr = 0;
    int v7 = -a3 & 3;
    if (a4) {
      int v7 = 0;
    }
    int v8 = v7 + a3;
    double result = malloc_type_posix_memalign(&memptr, 0x10uLL, 4 * a2 * (unint64_t)(v7 + a3), 0x746C3D7DuLL);
    if (result) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = memptr == 0;
    }
    if (v9)
    {
      exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      int v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
    }
    *(void *)uint64_t v4 = memptr;
    *(unsigned char *)(v4 + 32) = 0;
    *(_DWORD *)(v4 + 8) = a3;
    *(_DWORD *)(v4 + 12) = a2;
    *(_DWORD *)(v4 + 16) = v8;
    *(_DWORD *)(v4 + 20) = v8 * a2;
  }
  else
  {
    *(unsigned char *)(result + 32) = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)double result = 0;
  }
  return result;
}

int32x2_t *kaldi::Matrix<float>::operator=(int32x2_t *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if (a1[1].i32[1] == v4)
  {
    uint64_t v5 = *(unsigned int *)(a2 + 8);
    if (a1[1].i32[0] == v5) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)(a2 + 8);
  }
  kaldi::Matrix<float>::Resize(a1, v4, v5, 1, 0);
LABEL_6:
  kaldi::MatrixBase<float>::CopyFromMat<float>((int *)a1, (int *)a2, 111);
  return a1;
}

uint64_t kaldi::Matrix<double>::Matrix(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(unsigned char *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<double>::Resize((int32x2_t *)a1, a2, a3, a4, a5);
  return a1;
}

uint64_t kaldi::Matrix<double>::Matrix(uint64_t a1, int *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<double>::Resize((int32x2_t *)a1, a2[3], a2[2], 1, a2[2] == a2[4]);
  kaldi::MatrixBase<double>::CopyFromMat<double>((int *)a1, a2, 111);
  return a1;
}

void kaldi::MatrixBase<double>::AddMat(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  if (a2 == a1)
  {
    if (a3 == 111)
    {
      double v16 = a4 + a5;
      kaldi::MatrixBase<double>::Scale(a2, v16);
    }
    else
    {
      uint64_t v19 = *(unsigned int *)(a2 + 12);
      int v20 = *(const double **)a2;
      if (a4 == 1.0 && a5 == 1.0)
      {
        if ((int)v19 >= 1)
        {
          uint64_t v31 = 0;
          uint64_t v32 = *(int *)(a2 + 16);
          uint64_t v33 = 8 * v32;
          int v34 = *(const double **)a2;
          int v35 = *(double **)a2;
          do
          {
            if (v31)
            {
              uint64_t v36 = 0;
              uint64_t v37 = v31 * v32;
              long long v38 = v35;
              do
              {
                double v39 = v34[v36] + *v38;
                *long long v38 = v39;
                v34[v36++] = v39;
                long long v38 = (double *)((char *)v38 + v33);
              }
              while (v31 != v36);
            }
            else
            {
              uint64_t v37 = 0;
            }
            v20[v37 + v31] = v20[v37 + v31] + v20[v37 + v31];
            ++v31;
            ++v35;
            int v34 = (const double *)((char *)v34 + v33);
          }
          while (v31 != v19);
        }
      }
      else if ((int)v19 >= 1)
      {
        uint64_t v22 = 0;
        uint64_t v23 = *(int *)(a2 + 16);
        uint64_t v24 = 8 * v23;
        uint64_t v25 = *(const double **)a2;
        uint64_t v26 = *(double **)a2;
        do
        {
          if (v22)
          {
            uint64_t v27 = 0;
            uint64_t v28 = v22 * v23;
            uint64_t v29 = v26;
            do
            {
              double v30 = v25[v27];
              v25[v27] = v30 * a5 + a4 * *v29;
              *uint64_t v29 = *v29 * a5 + a4 * v30;
              ++v27;
              uint64_t v29 = (double *)((char *)v29 + v24);
            }
            while (v22 != v27);
          }
          else
          {
            uint64_t v28 = 0;
          }
          v20[v28 + v22] = (a4 + a5) * v20[v28 + v22];
          ++v22;
          ++v26;
          uint64_t v25 = (const double *)((char *)v25 + v24);
        }
        while (v22 != v19);
      }
    }
  }
  else
  {
    if (a5 != 1.0) {
      kaldi::MatrixBase<double>::Scale(a1, a5);
    }
    uint64_t v9 = *(int *)(a2 + 16);
    uint64_t v10 = *(int *)(a1 + 16);
    int v11 = *(const double **)a2;
    int v12 = *(double **)a1;
    if (a3 == 111)
    {
      if (*(int *)(a2 + 12) >= 1)
      {
        int v13 = 0;
        uint64_t v14 = 8 * v10;
        uint64_t v15 = 8 * v9;
        do
        {
          cblas_daxpy(*(_DWORD *)(a1 + 8), a4, v11, 1, v12, 1);
          ++v13;
          int v12 = (double *)((char *)v12 + v14);
          int v11 = (const double *)((char *)v11 + v15);
        }
        while (v13 < *(_DWORD *)(a1 + 12));
      }
    }
    else if (*(int *)(a2 + 8) >= 1)
    {
      int v17 = 0;
      uint64_t v18 = 8 * v10;
      do
      {
        cblas_daxpy(*(_DWORD *)(a1 + 8), a4, v11, v9, v12, 1);
        ++v17;
        ++v11;
        int v12 = (double *)((char *)v12 + v18);
      }
      while (v17 < *(_DWORD *)(a1 + 12));
    }
  }
}

uint64_t kaldi::MatrixBase<float>::Set(uint64_t result, float a2)
{
  int v2 = *(_DWORD *)(result + 12);
  if (v2 >= 1)
  {
    int v3 = 0;
    uint64_t v4 = *(unsigned int *)(result + 8);
    do
    {
      if ((int)v4 >= 1)
      {
        uint64_t v5 = (float *)(*(void *)result + 4 * *(_DWORD *)(result + 16) * v3);
        uint64_t v6 = v4;
        do
        {
          *v5++ = a2;
          --v6;
        }
        while (v6);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

void kaldi::MatrixBase<float>::SetRandn(uint64_t a1)
{
  unsigned int v11 = kaldi::Rand(0);
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *(_DWORD *)(a1 + 8);
    do
    {
      if (v4 >= 1)
      {
        uint64_t v5 = 0;
        uint64_t v6 = *(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v3;
        do
        {
          float v7 = ((double)(int)kaldi::Rand(&v11) + 1.0) / 2147483650.0;
          float v8 = sqrtf(logf(v7) * -2.0);
          float v9 = ((double)(int)kaldi::Rand(&v11) + 1.0) / 2147483650.0;
          float v10 = v9 * 6.28318531;
          *(float *)(v6 + 4 * v5) = v8 * cosf(v10);
          int v4 = *(_DWORD *)(a1 + 8);
          ++v5;
        }
        while ((int)v5 < v4);
        int v2 = *(_DWORD *)(a1 + 12);
      }
      ++v3;
    }
    while (v3 < v2);
  }
}

int *kaldi::MatrixBase<float>::CopyRowsFromVec(int *result, char **a2)
{
  int v2 = result;
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = result[2];
  int v5 = result[3];
  if (v3 == v4 * v5)
  {
    uint64_t v6 = result[4];
    if (v6 == v4)
    {
      float v7 = *a2;
      float v8 = *(void **)result;
      return (int *)memcpy(v8, v7, 4 * v5 * (uint64_t)(int)v4);
    }
    else
    {
      uint64_t v11 = result[3];
      if ((int)v11 >= 1)
      {
        uint64_t v12 = 0;
        int v13 = *a2;
        uint64_t v14 = *(void *)result;
        uint64_t v15 = 4 * v6;
        do
        {
          if ((int)v4 >= 1)
          {
            uint64_t v16 = 0;
            do
            {
              *(_DWORD *)(v14 + v16) = *(_DWORD *)&v13[v16];
              v16 += 4;
            }
            while (4 * v4 != v16);
          }
          ++v12;
          v14 += v15;
          v13 += 4 * v4;
        }
        while (v12 != v11);
      }
    }
  }
  else
  {
    if (v3 != v4)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Wrong sized arguments");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
    }
    if (v5 >= 1)
    {
      int v9 = 0;
      float v10 = *a2;
      do
        double result = (int *)memcpy((void *)(*(void *)v2 + 4 * v2[4] * v9++), v10, 4 * v2[2]);
      while (v9 < v2[3]);
    }
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::CopyColsFromVec(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(int *)(result + 12);
  uint64_t v5 = *(unsigned int *)(result + 12);
  if (v2 == v3 * v4)
  {
    if ((int)v3 >= 1)
    {
      int v6 = 0;
      float v7 = *(_DWORD **)result;
      float v8 = *(int **)a2;
      uint64_t v9 = 4 * v5;
      do
      {
        if ((int)v4 >= 1)
        {
          unint64_t v10 = 0;
          uint64_t v11 = 4 * *(int *)(result + 16);
          uint64_t v12 = v7;
          do
          {
            _DWORD *v12 = v8[v10 / 4];
            uint64_t v12 = (_DWORD *)((char *)v12 + v11);
            v10 += 4;
          }
          while (v9 != v10);
        }
        ++v7;
        ++v6;
        v8 += v4;
      }
      while (v6 != v3);
    }
  }
  else
  {
    if (v2 != v5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "Wrong size of arguments.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
    }
    if (v2 >= 1)
    {
      int v13 = 0;
      uint64_t v14 = *(_DWORD **)result;
      uint64_t v15 = *(int **)a2;
      uint64_t v16 = 4 * *(int *)(result + 16);
      do
      {
        int v17 = *v15++;
        int v18 = v17;
        if ((int)v3 >= 1)
        {
          for (uint64_t i = 0; i != v3; ++i)
            v14[i] = v18;
        }
        ++v13;
        uint64_t v14 = (_DWORD *)((char *)v14 + v16);
      }
      while (v13 != v2);
    }
  }
  return result;
}

float kaldi::MatrixBase<float>::CopyColFromVec(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = *(float **)a2;
    uint64_t v5 = (float *)(*(void *)a1 + 4 * a3);
    uint64_t v6 = 4 * *(int *)(a1 + 16);
    do
    {
      float v7 = *v4++;
      float result = v7;
      *uint64_t v5 = v7;
      uint64_t v5 = (float *)((char *)v5 + v6);
      --v3;
    }
    while (v3);
  }
  return result;
}

void *kaldi::MatrixBase<float>::CopyRowFromVec(uint64_t a1, uint64_t a2, int a3)
{
  return memcpy((void *)(*(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * a3), *(const void **)a2, 4 * *(int *)(a2 + 8));
}

uint64_t kaldi::MatrixBase<float>::ConcatenateVec(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v5 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(unsigned int *)(result + 12);
  uint64_t v6 = *(unsigned int *)(a3 + 8);
  int v7 = *((_DWORD *)a2 + 2);
  float v8 = *(float **)a3;
  uint64_t v9 = *(float **)a3;
  float v10 = **(float **)a3;
  uint64_t v11 = *(int *)(a3 + 16);
  uint64_t v12 = 4 * v11;
  int v13 = *(float **)a3;
  float v14 = v10;
  do
  {
    uint64_t v15 = v13;
    uint64_t v16 = v6;
    do
    {
      float v17 = *v15++;
      float v18 = v17;
      if (v17 < v14) {
        float v14 = v18;
      }
      --v16;
    }
    while (v16);
    ++v3;
    int v13 = (float *)((char *)v13 + v12);
  }
  while (v3 != v4);
  uint64_t v19 = 0;
  do
  {
    int v20 = v9;
    uint64_t v21 = v6;
    do
    {
      float v22 = *v20++;
      float v23 = v22;
      if (v22 > v10) {
        float v10 = v23;
      }
      --v21;
    }
    while (v21);
    ++v19;
    uint64_t v9 = (float *)((char *)v9 + v12);
  }
  while (v19 != v4);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = *a2;
  int v27 = *((_DWORD *)a2 + 4);
  do
  {
    if ((int)v5 >= 1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = *(void *)result + v24 * *(int *)(result + 16);
      do
      {
        *(_DWORD *)(v29 + 4 * v28) = *(_DWORD *)(v26
                                               - 4 * (int)v28 / v7 * v7
                                               + 4 * v27 * (int)v8[v25 * v11 + (int)v28 / v7]
                                               + 4 * v28);
        ++v28;
      }
      while (v5 != v28);
    }
    ++v25;
    v24 += 4;
  }
  while (v25 != v4);
  return result;
}

uint64_t kaldi::MatrixBase<float>::Min(uint64_t result)
{
  uint64_t v1 = 0;
  int v2 = *(float **)result;
  float v3 = **(float **)result;
  do
  {
    uint64_t v4 = *(unsigned int *)(result + 8);
    uint64_t v5 = v2;
    do
    {
      float v6 = *v5++;
      float v7 = v6;
      if (v6 < v3) {
        float v3 = v7;
      }
      --v4;
    }
    while (v4);
    ++v1;
    v2 += *(int *)(result + 16);
  }
  while (v1 != *(_DWORD *)(result + 12));
  return result;
}

uint64_t kaldi::MatrixBase<float>::Max(uint64_t result)
{
  uint64_t v1 = 0;
  int v2 = *(float **)result;
  float v3 = **(float **)result;
  do
  {
    uint64_t v4 = *(unsigned int *)(result + 8);
    uint64_t v5 = v2;
    do
    {
      float v6 = *v5++;
      float v7 = v6;
      if (v6 > v3) {
        float v3 = v7;
      }
      --v4;
    }
    while (v4);
    ++v1;
    v2 += *(int *)(result + 16);
  }
  while (v1 != *(_DWORD *)(result + 12));
  return result;
}

void kaldi::MatrixBase<float>::ConcatenateVec(uint64_t *a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v11 = 0;
  uint64_t v12 = *((unsigned int *)a1 + 3);
  LODWORD(v13) = *(_DWORD *)(a3 + 8);
  uint64_t v14 = *a2;
  uint64_t v15 = *(float **)a3;
  float v16 = **(float **)a3;
  uint64_t v17 = 4 * *(int *)(a3 + 16);
  float v18 = *(float **)a3;
  float v19 = v16;
  do
  {
    int v20 = v18;
    uint64_t v21 = *(unsigned int *)(a3 + 8);
    do
    {
      float v22 = *v20++;
      *(float *)&a6 = v22;
      if (v22 < v19) {
        float v19 = *(float *)&a6;
      }
      --v21;
    }
    while (v21);
    ++v11;
    float v18 = (float *)((char *)v18 + v17);
  }
  while (v11 != v12);
  uint64_t v23 = 0;
  do
  {
    uint64_t v24 = v15;
    uint64_t v25 = *(unsigned int *)(a3 + 8);
    do
    {
      float v26 = *v24++;
      *(float *)&a5 = v26;
      if (v26 > v16) {
        float v16 = *(float *)&a5;
      }
      --v25;
    }
    while (v25);
    ++v23;
    uint64_t v15 = (float *)((char *)v15 + v17);
  }
  while (v23 != v12);
  if (v14) {
    int v27 = *(_DWORD *)(v14 + 12);
  }
  else {
    int v27 = 0;
  }
  int v28 = 0;
  uint64_t v34 = a3;
  do
  {
    if ((int)v13 >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      do
      {
        uint64_t v32 = *a1;
        int v33 = *((_DWORD *)a1 + 4);
        int v37 = 0;
        uint64_t v38 = 0;
        uint64_t v35 = v32 + 4 * v28 * v33 + v30;
        int v36 = v27;
        LODWORD(a4) = *(_DWORD *)(*(void *)a3 + 4 * v28 * *(_DWORD *)(a3 + 16) + 4 * v31);
        kaldi::CompressedMatrix::CopyRowToVec<float>(a2, (int)*(float *)&a4, &v35, a4, a5, a6, a7, a8, a9);
        a3 = v34;
        ++v31;
        uint64_t v13 = *(int *)(v34 + 8);
        v30 += 4 * v27;
        v29 += v27;
      }
      while (v31 < v13);
      LODWORD(v12) = *(_DWORD *)(v34 + 12);
    }
    ++v28;
  }
  while (v28 < (int)v12);
}

uint64_t kaldi::MatrixBase<float>::SummarizeVec(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned int *)(result + 12);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(unsigned int *)(result + 8);
    int v7 = *((_DWORD *)a2 + 3);
    uint64_t v8 = *((unsigned int *)a3 + 2);
    uint64_t v9 = *a3;
    uint64_t v10 = *((int *)a3 + 4);
    do
    {
      if ((int)v8 >= 1)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *a2;
        int v13 = *((_DWORD *)a2 + 4);
        do
        {
          int v14 = (int)*(float *)(v9 + 4 * v5 * v10 + 4 * v11);
          if ((v14 & 0x80000000) == 0)
          {
            if (v7 <= v14)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"index item is bigger than the voc size ", 39);
              std::ostream::operator<<();
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
            }
            if ((int)v6 >= 1)
            {
              uint64_t v15 = 0;
              uint64_t v16 = v12 + 4 * v13 * v14;
              uint64_t v17 = *(void *)result + v4 * *(int *)(result + 16);
              do
              {
                *(float *)(v17 + 4 * v15) = *(float *)(v16 + 4 * v15) + *(float *)(v17 + 4 * v15);
                ++v15;
              }
              while (v6 != v15);
            }
          }
          ++v11;
        }
        while (v11 != v8);
      }
      ++v5;
      v4 += 4;
    }
    while (v5 != v3);
  }
  return result;
}

void kaldi::MatrixBase<float>::SummarizeVec(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a1 + 12);
  if (*a2) {
    signed int v7 = *(_DWORD *)(*a2 + 8);
  }
  else {
    signed int v7 = 0;
  }
  if (v6 >= 1)
  {
    int v8 = 0;
    int v9 = *(_DWORD *)(a3 + 8);
    do
    {
      if (v9 >= 1)
      {
        for (uint64_t i = 0; i < v9; ++i)
        {
          signed int v11 = (int)*(float *)(*(void *)a3 + 4 * *(_DWORD *)(a3 + 16) * v8 + 4 * i);
          if ((v11 & 0x80000000) == 0)
          {
            if (v7 <= v11)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"index item is bigger than the voc size ", 39);
              std::ostream::operator<<();
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
            }
            uint64_t v12 = *(unsigned int *)(a1 + 8);
            memset(v23, 0, 24);
            kaldi::Vector<float>::Resize(v23, v12, 0);
            kaldi::CompressedMatrix::CopyRowToVec<float>(a2, v11, (uint64_t *)v23, v13, v14, v15, v16, v17, v18);
            uint64_t v19 = *(unsigned int *)(a1 + 8);
            if ((int)v19 >= 1)
            {
              uint64_t v20 = 0;
              uint64_t v21 = (float *)v23[0];
              uint64_t v22 = *(void *)a1 + 4 * v8 * *(_DWORD *)(a1 + 16);
              do
              {
                *(float *)(v22 + 4 * v20) = v21[v20] + *(float *)(v22 + 4 * v20);
                ++v20;
              }
              while (v19 != v20);
            }
            kaldi::Vector<float>::Destroy((uint64_t)v23);
            int v9 = *(_DWORD *)(a3 + 8);
          }
        }
        int v6 = *(_DWORD *)(a1 + 12);
      }
      ++v8;
    }
    while (v8 < v6);
  }
}

void sub_1B201175C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double kaldi::SubMatrix<float>::SubMatrix(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 12) = a4;
  int v7 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 16) * a3;
  *(void *)a1 = *(void *)a2 + 4 * a5 + 4 * v8;
  *(_DWORD *)(a1 + 20) = v7 - a5 - v8;
  return result;
}

uint64_t kaldi::MatrixBase<float>::CountZeros(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 12);
  if (v1 < 1) {
    return 0;
  }
  int v2 = 0;
  uint64_t v3 = 0;
  do
  {
    if (*(int *)(a1 + 8) >= 1)
    {
      uint64_t v4 = (float *)(*(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v2);
      uint64_t v5 = *(unsigned int *)(a1 + 8);
      do
      {
        float v6 = *v4++;
        if (v6 == 0.0) {
          uint64_t v3 = (v3 + 1);
        }
        else {
          uint64_t v3 = v3;
        }
        --v5;
      }
      while (v5);
    }
    ++v2;
  }
  while (v2 != v1);
  return v3;
}

float kaldi::MatrixBase<float>::AbsMax(uint64_t a1)
{
  int v2 = 0;
  uint64_t v3 = *(float **)a1;
  float v4 = **(float **)a1;
  int v5 = *(_DWORD *)(a1 + 16);
  do
  {
    int v6 = cblas_isamax(*(_DWORD *)(a1 + 8), &v3[v5 * v2], 1);
    uint64_t v3 = *(float **)a1;
    int v5 = *(_DWORD *)(a1 + 16);
    float v7 = fabsf(*(float *)(*(void *)a1 + 4 * (v6 + v5 * v2)));
    if (v7 > v4) {
      float v4 = v7;
    }
    ++v2;
  }
  while (v2 < *(_DWORD *)(a1 + 12));
  return v4;
}

float kaldi::MatrixBase<float>::AggByCol(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  void v11[4] = *MEMORY[0x1E4F143B8];
  void v11[3] = 0;
  if (a4)
  {
    std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    std::function<float ()(float,float)>::operator=<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},void>(v11, (uint64_t)v10);
    std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v10);
  }
  else
  {
    std::function<float ()(float,float)>::operator=(v11, a3);
  }
  float v6 = *(float *)(*(void *)a1 + 4 * a2);
  if (*(int *)(a1 + 12) >= 1)
  {
    int v7 = 0;
    do
    {
      std::function<float ()(float,float)>::operator()((uint64_t)v11, v6, *(float *)(*(void *)a1 + 4 * (int)(a2 + *(_DWORD *)(a1 + 16) * v7)));
      float v6 = v8;
      ++v7;
    }
    while (v7 < *(_DWORD *)(a1 + 12));
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v11);
  return v6;
}

void sub_1B2011980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::function<float ()(float,float)>::operator=<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},void>(void *a1, uint64_t a2)
{
  void v6[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  uint64_t v3 = operator new(0x28uLL);
  *uint64_t v3 = &unk_1F0A5C908;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(v3 + 1), (uint64_t)v5);
  double v6[3] = v3;
  std::__function::__value_func<float ()(float,float)>::swap[abi:ne180100](v6, a1);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v5);
  return a1;
}

void sub_1B2011A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::function<float ()(float,float)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<float ()(float,float)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::function<float ()(float,float)>::operator()(uint64_t a1, float a2, float a3)
{
  float v6 = a2;
  float v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, float *, float *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

float kaldi::MatrixBase<float>::MaxByCol(uint64_t a1, unsigned int a2, int a3)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1F0A5C960;
  void v5[3] = v5;
  float v3 = kaldi::MatrixBase<float>::AggByCol(a1, a2, (uint64_t)v5, a3);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v5);
  return v3;
}

void sub_1B2011BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

float kaldi::MatrixBase<float>::MinByCol(uint64_t a1, unsigned int a2, int a3)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1F0A5C9B8;
  void v5[3] = v5;
  float v3 = kaldi::MatrixBase<float>::AggByCol(a1, a2, (uint64_t)v5, a3);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v5);
  return v3;
}

void sub_1B2011C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

float32_t kaldi::MatrixBase<float>::MulElements(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(unsigned int *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  uint64_t v4 = *(int *)(a1 + 16);
  int v5 = *(_DWORD *)(a2 + 16);
  if (v3 == v4 && v3 == v5)
  {
    unint64_t v18 = (v3 * v2);
    uint64_t v19 = *(float32x4_t **)a2;
    uint64_t v20 = *(float32x4_t **)a1;
    if ((int)v18 >= 4)
    {
      unint64_t v22 = 4;
      uint64_t v23 = *(float32x4_t **)a2;
      uint64_t v24 = *(float32x4_t **)a1;
      do
      {
        float32x4_t v25 = *v23++;
        float32x4_t v16 = vmulq_f32(v25, *v24);
        *v24++ = v16;
        v22 += 4;
      }
      while (v22 <= v18);
      int v21 = v18 & 0x7FFFFFFC;
    }
    else
    {
      int v21 = 0;
    }
    if (v21 < (int)v18)
    {
      float v26 = &v20->f32[v21];
      int v27 = &v19->f32[v21];
      do
      {
        float v28 = *v27++;
        v16.f32[0] = v28 * *v26;
        *v26++ = v16.f32[0];
        ++v21;
      }
      while ((int)v18 > v21);
    }
  }
  else if (v2 >= 1)
  {
    int v7 = 0;
    uint64_t v8 = v5;
    int v9 = *(float32x4_t **)a2;
    uint64_t v10 = *(float32x4_t **)a1;
    uint64_t v11 = 4 * v4;
    uint64_t v12 = 4 * v8;
    do
    {
      if ((int)v3 >= 4)
      {
        uint64_t v14 = 0;
        for (unint64_t i = 4; i <= v3; i += 4)
        {
          float32x4_t v16 = vmulq_f32(v9[v14], v10[v14]);
          v10[v14++] = v16;
        }
        int v13 = v3 & 0x7FFFFFFC;
      }
      else
      {
        int v13 = 0;
      }
      if (v13 < (int)v3)
      {
        uint64_t v17 = v13;
        do
        {
          v16.f32[0] = v9->f32[v17] * v10->f32[v17];
          v10->i32[v17] = v16.i32[0];
          ++v13;
          ++v17;
        }
        while ((int)v3 > v13);
      }
      ++v7;
      uint64_t v10 = (float32x4_t *)((char *)v10 + v11);
      int v9 = (float32x4_t *)((char *)v9 + v12);
    }
    while (v7 != v2);
  }
  return v16.f32[0];
}

uint64_t kaldi::MatrixBase<float>::DivElements(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 3);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = *((unsigned int *)a2 + 2);
    uint64_t v6 = *a2;
    uint64_t v7 = 4 * *((int *)a2 + 4);
    do
    {
      if ((int)v5 >= 1)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)result + v3 * *(int *)(result + 16);
        do
        {
          *(float *)(v9 + 4 * v8) = *(float *)(v9 + 4 * v8) / *(float *)(v6 + 4 * v8);
          ++v8;
        }
        while (v5 != v8);
      }
      ++v4;
      v3 += 4;
      v6 += v7;
    }
    while (v4 != v2);
  }
  return result;
}

void kaldi::MatrixBase<float>::Scale(uint64_t a1, float a2)
{
  if (a2 != 1.0)
  {
    int v4 = *(_DWORD *)(a1 + 12);
    if (v4)
    {
      int v5 = *(_DWORD *)(a1 + 8);
      if (v5 == *(_DWORD *)(a1 + 16))
      {
        uint64_t v6 = *(float **)a1;
        cblas_sscal(v5 * v4, a2, v6, 1);
      }
      else if (v4 >= 1)
      {
        int v7 = 0;
        uint64_t v8 = *(float **)a1;
        do
        {
          cblas_sscal(*(_DWORD *)(a1 + 8), a2, v8, 1);
          ++v7;
          v8 += *(int *)(a1 + 16);
        }
        while (v7 < *(_DWORD *)(a1 + 12));
      }
    }
  }
}

uint64_t kaldi::MatrixBase<float>::Max(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    int v5 = *(float **)result;
    uint64_t v6 = *(float **)a2;
    uint64_t v7 = 4 * *(int *)(a2 + 16);
    uint64_t v8 = 4 * *(int *)(result + 16);
    do
    {
      uint64_t v9 = v4;
      uint64_t v10 = v5;
      uint64_t v11 = v6;
      if ((int)v4 >= 1)
      {
        do
        {
          float v12 = *v11++;
          float v13 = v12;
          if (*v10 >= v12) {
            float v13 = *v10;
          }
          *v10++ = v13;
          --v9;
        }
        while (v9);
      }
      ++v3;
      uint64_t v6 = (float *)((char *)v6 + v7);
      int v5 = (float *)((char *)v5 + v8);
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::MulColsVec(uint64_t result, uint64_t *a2)
{
  int v2 = *(_DWORD *)(result + 12);
  if (v2 >= 1)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)a2 + 2);
    uint64_t v5 = *a2;
    do
    {
      if ((int)v4 >= 1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = *(void *)result + 4 * *(_DWORD *)(result + 16) * v3;
        do
        {
          *(float *)(v7 + 4 * v6) = *(float *)(v5 + 4 * v6) * *(float *)(v7 + 4 * v6);
          ++v6;
        }
        while (v4 != v6);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::MulRowsVec(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 2);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(unsigned int *)(result + 8);
    uint64_t v5 = *a2;
    do
    {
      if ((int)v4 >= 1)
      {
        float v6 = *(float *)(v5 + 4 * v3);
        uint64_t v7 = (float *)(*(void *)result + 4 * *(_DWORD *)(result + 16) * (int)v3);
        uint64_t v8 = v4;
        do
        {
          float *v7 = v6 * *v7;
          ++v7;
          --v8;
        }
        while (v8);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

void kaldi::MatrixBase<float>::MulRowsGroupMat(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  if (v2 >= 1)
  {
    int v5 = 0;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = v6 / *(_DWORD *)(a2 + 8);
    uint64_t v8 = (v6 / v7);
    do
    {
      if ((int)v8 >= 1)
      {
        uint64_t v9 = 0;
        uint64_t v10 = (float *)(*(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v5);
        do
        {
          cblas_sscal(v7, *(const float *)(*(void *)a2 + 4 * v5 * *(_DWORD *)(a2 + 16) + 4 * v9++), v10, 1);
          v10 += v7;
        }
        while (v8 != v9);
      }
      ++v5;
    }
    while (v5 != v2);
  }
}

uint64_t kaldi::MatrixBase<float>::InvertElements(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 12);
  if (v1 >= 1)
  {
    int v2 = 0;
    uint64_t v3 = *(unsigned int *)(result + 8);
    do
    {
      if ((int)v3 >= 1)
      {
        uint64_t v4 = (float *)(*(void *)result + 4 * *(_DWORD *)(result + 16) * v2);
        uint64_t v5 = v3;
        do
        {
          *uint64_t v4 = 1.0 / *v4;
          ++v4;
          --v5;
        }
        while (v5);
      }
      ++v2;
    }
    while (v2 != v1);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::CopyCols(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *(_DWORD *)(result + 12);
  if (v3 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *(unsigned int *)(result + 8);
    uint64_t v6 = *a3;
    uint64_t v7 = *a2;
    uint64_t v8 = *(void *)result;
    uint64_t v9 = *((int *)a2 + 4);
    uint64_t v10 = 4 * *(int *)(result + 16);
    do
    {
      if ((int)v5 >= 1)
      {
        uint64_t v11 = 0;
        do
        {
          double result = *(unsigned int *)(v6 + v11);
          if ((result & 0x80000000) != 0) {
            int v12 = 0;
          }
          else {
            int v12 = *(_DWORD *)(v7 + 4 * result);
          }
          *(_DWORD *)(v8 + v11) = v12;
          v11 += 4;
        }
        while (4 * v5 != v11);
      }
      ++v4;
      v7 += 4 * v9;
      v8 += v10;
    }
    while (v4 != v3);
  }
  return result;
}

void kaldi::MatrixBase<float>::CopyRows(char **a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *((unsigned int *)a1 + 3);
  if ((int)v3 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = *((_DWORD *)a1 + 2);
    uint64_t v9 = *a1;
    uint64_t v10 = 4 * v3;
    uint64_t v11 = 4 * *((int *)a1 + 4);
    do
    {
      int v12 = *(_DWORD *)(*a3 + v7);
      if (v12 < 0) {
        bzero(v9, 4 * *((int *)a1 + 2));
      }
      else {
        cblas_scopy(v8, (const float *)(*(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * v12), 1, (float *)v9, 1);
      }
      v7 += 4;
      v9 += v11;
    }
    while (v10 != v7);
  }
}

unint64_t kaldi::MatrixBase<float>::CopyIndexedItems(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v6 = *(unsigned int *)(result + 12);
  if ((int)v6 >= 1)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = *a2;
    int v10 = *((_DWORD *)a2 + 4);
    uint64_t v11 = *(unsigned int *)(result + 8);
    int v12 = *(_DWORD **)result;
    uint64_t v13 = *(_DWORD *)(result + 16) - (int)v11;
    int v14 = *(_DWORD *)(result + 8);
    do
    {
      uint64_t v15 = v11;
      double result = v7;
      if (v14 >= 1)
      {
        do
        {
          int v16 = *(_DWORD *)(a4 + 4 * (int)(result % a5)) + *(_DWORD *)(a3 + 4 * (int)(result % a5)) * v10;
          if (v16 < 0) {
            int v17 = 0;
          }
          else {
            int v17 = *(_DWORD *)(v9 + 4 * (int)(v16 + result / a5 * a6));
          }
          *v12++ = v17;
          ++result;
          --v15;
        }
        while (v15);
      }
      ++v8;
      v12 += v13;
      v7 += (int)v11;
    }
    while (v8 != v6);
  }
  return result;
}

void kaldi::MatrixBase<float>::CopySelectedRows(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(unsigned int *)(a3 + 8);
  if ((int)v4 >= 1)
  {
    uint64_t v8 = 0;
    int v9 = *(_DWORD *)(a1 + 8);
    int v10 = *(float **)a1;
    uint64_t v11 = 4 * *(int *)(a1 + 16);
    do
    {
      if (((int)*(float *)(*(void *)a3 + 4 * v8) == 1) != a4) {
        cblas_scopy(v9, (const float *)(*(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v8), 1, v10, 1);
      }
      ++v8;
      int v10 = (float *)((char *)v10 + v11);
    }
    while (v4 != v8);
  }
}

uint64_t kaldi::MatrixBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 12);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t result = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  unint64_t v7 = *(float **)a1;
  uint64_t v8 = 4 * *(int *)(a1 + 16);
  do
  {
    uint64_t v9 = v6;
    int v10 = v7;
    if ((int)v6 >= 1)
    {
      do
      {
        if (*v10 < a2)
        {
          *int v10 = a2;
          uint64_t result = (result + 1);
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    ++v4;
    unint64_t v7 = (float *)((char *)v7 + v8);
  }
  while (v4 != v2);
  return result;
}

uint64_t kaldi::MatrixBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 12);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t result = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  unint64_t v7 = *(float **)a1;
  uint64_t v8 = 4 * *(int *)(a1 + 16);
  do
  {
    uint64_t v9 = v6;
    int v10 = v7;
    if ((int)v6 >= 1)
    {
      do
      {
        if (*v10 > a2)
        {
          *int v10 = a2;
          uint64_t result = (result + 1);
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    ++v4;
    unint64_t v7 = (float *)((char *)v7 + v8);
  }
  while (v4 != v2);
  return result;
}

void kaldi::MatrixBase<float>::ApplyLog(uint64_t a1)
{
  if (*(int *)(a1 + 12) >= 1)
  {
    int v2 = 0;
    do
    {
      uint64_t v3 = *(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v2;
      int v4 = *(_DWORD *)(a1 + 8);
      int v7 = 0;
      uint64_t v8 = 0;
      uint64_t v5 = v3;
      int v6 = v4;
      kaldi::VectorBase<float>::ApplyLog((uint64_t)&v5);
      ++v2;
    }
    while (v2 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<float>::ApplyExp(uint64_t a1)
{
  if (*(int *)(a1 + 12) >= 1)
  {
    int v2 = 0;
    do
    {
      uint64_t v3 = *(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v2;
      int v4 = *(_DWORD *)(a1 + 8);
      int v7 = 0;
      uint64_t v8 = 0;
      uint64_t v5 = v3;
      int v6 = v4;
      kaldi::VectorBase<float>::ApplyExp((uint64_t)&v5);
      ++v2;
    }
    while (v2 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<float>::ApplyPow(uint64_t a1, float a2)
{
  if (*(int *)(a1 + 12) >= 1)
  {
    int v4 = 0;
    do
    {
      uint64_t v5 = *(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v4;
      int v6 = *(_DWORD *)(a1 + 8);
      int v9 = 0;
      uint64_t v10 = 0;
      uint64_t v7 = v5;
      int v8 = v6;
      kaldi::VectorBase<float>::ApplyPow((uint64_t)&v7, a2);
      ++v4;
    }
    while (v4 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<float>::ApplyPowAbs(uint64_t a1, int a2, float a3)
{
  if (*(int *)(a1 + 12) >= 1)
  {
    int v6 = 0;
    do
    {
      uint64_t v7 = *(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v6;
      int v8 = *(_DWORD *)(a1 + 8);
      int v11 = 0;
      uint64_t v12 = 0;
      uint64_t v9 = v7;
      int v10 = v8;
      kaldi::VectorBase<float>::ApplyPowAbs((uint64_t)&v9, a2, a3);
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 12));
  }
}

uint64_t kaldi::MatrixBase<float>::ApplyHeaviside(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 12);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(unsigned int *)(result + 8);
    int v4 = *(float **)result;
    uint64_t v5 = 4 * *(int *)(result + 16);
    do
    {
      uint64_t v6 = v3;
      uint64_t v7 = v4;
      if ((int)v3 >= 1)
      {
        do
        {
          if (*v7 <= 0.0) {
            float v8 = 0.0;
          }
          else {
            float v8 = 1.0;
          }
          *v7++ = v8;
          --v6;
        }
        while (v6);
      }
      ++v2;
      int v4 = (float *)((char *)v4 + v5);
    }
    while (v2 != v1);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::Add(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 12);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    int v4 = *(float **)result;
    uint64_t v5 = *(unsigned int *)(result + 8);
    uint64_t v6 = 4 * *(int *)(result + 16);
    do
    {
      uint64_t v7 = v5;
      float v8 = v4;
      if ((int)v5 >= 1)
      {
        do
        {
          *float v8 = *v8 + a2;
          ++v8;
          --v7;
        }
        while (v7);
      }
      ++v3;
      int v4 = (float *)((char *)v4 + v6);
    }
    while (v3 != v2);
  }
  return result;
}

void kaldi::MatrixBase<float>::Sigmoid(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 12);
  if (v5 == *(_DWORD *)(a1 + 16) && v5 == *(_DWORD *)(a2 + 16))
  {
    uint64_t v8 = *(void *)a2;
    uint64_t v14 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v8;
    uint64_t v13 = (v5 * v4);
    uint64_t v9 = *(void *)a1;
    uint64_t v10 = v13;
    kaldi::VectorBase<float>::Sigmoid((uint64_t)&v9, (const void **)&v12);
  }
  else if (v4 >= 1)
  {
    int v7 = 0;
    do
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v12 = *(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * v7;
      LODWORD(v13) = *(_DWORD *)(a2 + 8);
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v9 = *(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v7;
      LODWORD(v10) = *(_DWORD *)(a1 + 8);
      kaldi::VectorBase<float>::Sigmoid((uint64_t)&v9, (const void **)&v12);
      ++v7;
    }
    while (v7 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<float>::GroupPnorm(uint64_t a1, uint64_t *a2, float a3)
{
  int v15 = *((_DWORD *)a2 + 3);
  if (v15 >= 1)
  {
    int v6 = 0;
    int v7 = *(_DWORD *)(a1 + 8);
    int v8 = *((_DWORD *)a2 + 2) / v7;
    uint64_t v16 = v7;
    do
    {
      if (v7 >= 1)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        for (uint64_t i = 0; i != v16; ++i)
        {
          uint64_t v12 = *a2;
          int v13 = *((_DWORD *)a2 + 4);
          int v19 = 0;
          uint64_t v20 = 0;
          uint64_t v17 = v12 + 4 * v6 * v13 + v10;
          int v18 = v8;
          float v14 = kaldi::VectorBase<float>::Norm((uint64_t)&v17, a3);
          int v7 = v16;
          *(float *)(*(void *)a1 + 4 * v6 * *(_DWORD *)(a1 + 16) + 4 * i) = v14;
          v10 += 4 * v8;
          v9 += v8;
        }
      }
      ++v6;
    }
    while (v6 != v15);
  }
}

void kaldi::MatrixBase<float>::GroupPnormDeriv(uint64_t a1, uint64_t *a2, uint64_t *a3, float a4)
{
  uint64_t v5 = *((unsigned int *)a2 + 2);
  uint64_t v6 = *((unsigned int *)a2 + 3);
  if (a4 == 1.0)
  {
    if ((int)v6 >= 1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = *a2;
      uint64_t v10 = 4 * *((int *)a2 + 4);
      do
      {
        if ((int)v5 >= 1)
        {
          uint64_t v11 = 0;
          uint64_t v12 = *(void *)a1 + v7 * *(int *)(a1 + 16);
          do
          {
            float v13 = *(float *)(v9 + 4 * v11);
            BOOL v14 = v13 == 0.0;
            if (v13 <= 0.0) {
              float v15 = -1.0;
            }
            else {
              float v15 = 1.0;
            }
            if (v14) {
              float v15 = 0.0;
            }
            *(float *)(v12 + 4 * v11++) = v15;
          }
          while (v5 != v11);
        }
        ++v8;
        v7 += 4;
        v9 += v10;
      }
      while (v8 != v6);
    }
  }
  else if ((int)v6 >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v29 = *((int *)a3 + 4);
    uint64_t v30 = *a3;
    float v18 = a4 + -1.0;
    float v19 = 1.0 - a4;
    int v20 = (int)v5 / *((_DWORD *)a3 + 2);
    do
    {
      if ((int)v5 >= 1)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1 + v16 * *(int *)(a1 + 16);
        uint64_t v23 = *a2 + v16 * *((int *)a2 + 4);
        do
        {
          float v24 = *(float *)(v30 + 4 * v17 * v29 + 4 * ((int)v21 / v20));
          float v25 = 0.0;
          if (v24 != 0.0)
          {
            float v26 = *(float *)(v23 + 4 * v21);
            float v27 = powf(fabsf(v26), v18);
            float v28 = powf(v24, v19) * v27;
            float v25 = -v28;
            if (v26 >= 0.0) {
              float v25 = v28;
            }
          }
          *(float *)(v22 + 4 * v21++) = v25;
        }
        while (v5 != v21);
      }
      ++v17;
      v16 += 4;
    }
    while (v17 != v6);
  }
}

void kaldi::MatrixBase<float>::Tanh(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 12);
  if (v5 == *(_DWORD *)(a1 + 16) && v5 == *(_DWORD *)(a2 + 16))
  {
    uint64_t v8 = *(const float **)a2;
    uint64_t v14 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v8;
    uint64_t v13 = (v5 * v4);
    uint64_t v9 = *(void *)a1;
    uint64_t v10 = v13;
    kaldi::VectorBase<float>::Tanh((uint64_t)&v9, &v12);
  }
  else if (v4 >= 1)
  {
    int v7 = 0;
    do
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v12 = (const float *)(*(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * v7);
      LODWORD(v13) = *(_DWORD *)(a2 + 8);
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v9 = *(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v7;
      LODWORD(v10) = *(_DWORD *)(a1 + 8);
      kaldi::VectorBase<float>::Tanh((uint64_t)&v9, &v12);
      ++v7;
    }
    while (v7 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<float>::ApplyTanh(uint64_t a1)
{
  if (*(int *)(a1 + 12) >= 1)
  {
    int v2 = 0;
    do
    {
      uint64_t v3 = *(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v2;
      int v4 = *(_DWORD *)(a1 + 8);
      int v7 = 0;
      uint64_t v8 = 0;
      uint64_t v5 = v3;
      int v6 = v4;
      kaldi::VectorBase<float>::ApplyTanh((uint64_t)&v5);
      ++v2;
    }
    while (v2 < *(_DWORD *)(a1 + 12));
  }
}

uint64_t *kaldi::MatrixBase<float>::DiffSigmoid(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *((_DWORD *)result + 3);
  if (v3 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((unsigned int *)result + 2);
    uint64_t v6 = *a3;
    uint64_t v7 = *a2;
    uint64_t v8 = *result;
    uint64_t v9 = 4 * *((int *)result + 4);
    uint64_t v10 = 4 * *((int *)a2 + 4);
    uint64_t v11 = 4 * *((int *)a3 + 4);
    do
    {
      if ((int)v5 >= 1)
      {
        uint64_t result = 0;
        do
        {
          float v12 = (1.0 - *(float *)((char *)result + v7))
              * (float)(*(float *)((char *)result + v6) * *(float *)((char *)result + v7));
          *(float *)((char *)result + v8) = v12;
          uint64_t result = (uint64_t *)((char *)result + 4);
        }
        while ((uint64_t *)(4 * v5) != result);
      }
      ++v4;
      v8 += v9;
      v7 += v10;
      v6 += v11;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t *kaldi::MatrixBase<float>::DiffTanh(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *((_DWORD *)result + 3);
  if (v3 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((unsigned int *)result + 2);
    uint64_t v6 = *a3;
    uint64_t v7 = *a2;
    uint64_t v8 = *result;
    uint64_t v9 = 4 * *((int *)result + 4);
    uint64_t v10 = 4 * *((int *)a2 + 4);
    uint64_t v11 = 4 * *((int *)a3 + 4);
    do
    {
      if ((int)v5 >= 1)
      {
        uint64_t result = 0;
        do
        {
          float v12 = (1.0 - (float)(*(float *)((char *)result + v7) * *(float *)((char *)result + v7)))
              * *(float *)((char *)result + v6);
          *(float *)((char *)result + v8) = v12;
          uint64_t result = (uint64_t *)((char *)result + 4);
        }
        while ((uint64_t *)(4 * v5) != result);
      }
      ++v4;
      v8 += v9;
      v7 += v10;
      v6 += v11;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t *kaldi::MatrixBase<float>::MaxoutForward(uint64_t *result, uint64_t *a2)
{
  int v2 = *((_DWORD *)a2 + 3);
  if (v2 >= 1)
  {
    int v4 = result;
    int v5 = 0;
    LODWORD(v6) = *((_DWORD *)result + 2);
    int v7 = *((_DWORD *)a2 + 2) / (int)v6;
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        do
        {
          uint64_t v11 = *a2;
          int v12 = *((_DWORD *)a2 + 4);
          int v16 = 0;
          uint64_t v17 = 0;
          uint64_t v14 = v11 + 4 * v5 * v12 + v9;
          int v15 = v7;
          uint64_t result = kaldi::VectorBase<float>::Max(&v14);
          int v2 = *((_DWORD *)v4 + 3);
          uint64_t v6 = *((int *)v4 + 2);
          *(_DWORD *)(*v4 + 4 * v5 * *((_DWORD *)v4 + 4) + 4 * v10++) = v13;
          v9 += 4 * v7;
          v8 += v7;
        }
        while (v10 < v6);
      }
      ++v5;
    }
    while (v5 < v2);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::MaxoutDerivative(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *((unsigned int *)a2 + 3);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(unsigned int *)(result + 8);
    uint64_t v7 = *a2;
    uint64_t v8 = *a3;
    uint64_t v9 = *((int *)a3 + 4);
    uint64_t v10 = 4 * *((int *)a2 + 4);
    int v11 = (int)v6 / *((_DWORD *)a3 + 2);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *(void *)result + v4 * *(int *)(result + 16);
        do
        {
          if (*(float *)(v7 + 4 * v12) == *(float *)(v8 + 4 * v5 * v9 + 4 * ((int)v12 / v11))) {
            float v14 = 1.0;
          }
          else {
            float v14 = 0.0;
          }
          *(float *)(v13 + 4 * v12++) = v14;
        }
        while (v6 != v12);
      }
      ++v5;
      v4 += 4;
      v7 += v10;
    }
    while (v5 != v3);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::AddToDiag(uint64_t result, float a2)
{
  LODWORD(v2) = *(_DWORD *)(result + 8);
  int v3 = *(_DWORD *)(result + 12);
  if ((int)v2 >= v3) {
    uint64_t v2 = v3;
  }
  else {
    uint64_t v2 = v2;
  }
  if ((int)v2 >= 1)
  {
    uint64_t v4 = *(float **)result;
    uint64_t v5 = 4 * *(int *)(result + 16) + 4;
    do
    {
      *uint64_t v4 = *v4 + a2;
      uint64_t v4 = (float *)((char *)v4 + v5);
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::AddToDiag(uint64_t result, uint64_t *a2, float a3, float a4)
{
  LODWORD(v4) = *(_DWORD *)(result + 8);
  int v5 = *(_DWORD *)(result + 12);
  if ((int)v4 >= v5) {
    uint64_t v4 = v5;
  }
  else {
    uint64_t v4 = v4;
  }
  if ((int)v4 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a2;
    uint64_t v8 = *(float **)result;
    uint64_t v9 = 4 * *(int *)(result + 16) + 4;
    do
    {
      *uint64_t v8 = (float)(*v8 * a4) + (float)(a3 * *(float *)(v7 + 4 * v6++));
      uint64_t v8 = (float *)((char *)v8 + v9);
    }
    while (v4 != v6);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::AddIndexedRows(uint64_t result, uint64_t *a2, uint64_t a3, float a4)
{
  uint64_t v4 = *((unsigned int *)a2 + 3);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = *((unsigned int *)a2 + 2);
    uint64_t v8 = *(int *)(result + 8);
    uint64_t v9 = *(unsigned int *)(result + 8);
    uint64_t v10 = *a2;
    uint64_t v11 = *((int *)a2 + 4);
    do
    {
      if ((int)v7 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = *(void *)a3 + v5 * *(int *)(a3 + 16);
        do
        {
          int v15 = (int)*(float *)(v10 + 4 * v6 * v11 + 4 * v13);
          if ((v15 & 0x80000000) == 0)
          {
            if (*(_DWORD *)(result + 12) <= v15)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"index ", 6);
              float v19 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" is too big for matrix that has rows = ", 39);
              std::ostream::operator<<();
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
            }
            if ((int)v8 >= 1)
            {
              int v16 = (float *)(*(void *)result + 4 * *(_DWORD *)(result + 16) * v15);
              uint64_t v17 = v9;
              uint64_t v18 = v12;
              do
              {
                *int v16 = *v16 + (float)(a4 * *(float *)(v14 + 4 * v18));
                ++v16;
                ++v18;
                --v17;
              }
              while (v17);
            }
          }
          ++v13;
          v12 += v8;
        }
        while (v13 != v7);
      }
      ++v6;
      v5 += 4;
    }
    while (v6 != v4);
  }
  return result;
}

void kaldi::MatrixBase<float>::AddDiagVecMat(uint64_t a1, float **a2, uint64_t a3, int a4, float a5, float a6)
{
  if (a6 != 1.0) {
    kaldi::MatrixBase<float>::Scale(a1, a6);
  }
  if (a4 == 111)
  {
    int v11 = *(_DWORD *)(a1 + 8);
    int v12 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    int v12 = *(_DWORD *)(a3 + 8);
    int v11 = *(_DWORD *)(a3 + 12);
  }
  int v13 = *(_DWORD *)(a3 + 16);
  if (a4 == 112) {
    int v14 = *(_DWORD *)(a3 + 16);
  }
  else {
    int v14 = 1;
  }
  if (v12 >= 1)
  {
    int v15 = *a2;
    int v16 = *(const float **)a3;
    uint64_t v17 = *(float **)a1;
    if (a4 == 112) {
      int v13 = 1;
    }
    uint64_t v18 = 4 * v13;
    uint64_t v19 = 4 * *(int *)(a1 + 16);
    do
    {
      float v20 = *v15++;
      cblas_saxpy(v11, v20 * a5, v16, v14, v17, 1);
      int v16 = (const float *)((char *)v16 + v18);
      uint64_t v17 = (float *)((char *)v17 + v19);
      --v12;
    }
    while (v12);
  }
}

void kaldi::MatrixBase<float>::AddMatDiagVec(uint64_t a1, uint64_t a2, int a3, float **a4, float a5, float a6)
{
  if (a6 != 1.0) {
    kaldi::MatrixBase<float>::Scale(a1, a6);
  }
  if (a3 == 111)
  {
    int v12 = *(_DWORD *)(a1 + 8);
    int v11 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    int v11 = *(_DWORD *)(a2 + 8);
    int v12 = *(_DWORD *)(a2 + 12);
  }
  int v13 = *(_DWORD *)(a2 + 16);
  if (a3 == 112) {
    int v14 = 1;
  }
  else {
    int v14 = *(_DWORD *)(a2 + 16);
  }
  if (v11) {
    BOOL v15 = v12 < 1;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15)
  {
    int v16 = *(_DWORD *)(a1 + 16);
    uint64_t v17 = *a4;
    uint64_t v18 = *(const float **)a2;
    uint64_t v19 = *(float **)a1;
    if (a3 != 112) {
      int v13 = 1;
    }
    uint64_t v20 = 4 * v13;
    do
    {
      float v21 = *v17++;
      cblas_saxpy(v11, v21 * a5, v18, v14, v19++, v16);
      uint64_t v18 = (const float *)((char *)v18 + v20);
      --v12;
    }
    while (v12);
  }
}

uint64_t kaldi::MatrixBase<float>::AddMatEwpMat(uint64_t result, uint64_t a2, int a3, uint64_t a4, int a5, float a6, float a7)
{
  int v8 = *(_DWORD *)(result + 8);
  uint64_t v7 = *(unsigned int *)(result + 12);
  if ((int)v7 >= 1)
  {
    uint64_t v9 = 0;
    if (a5 == 112) {
      int v10 = 1;
    }
    else {
      int v10 = *(_DWORD *)(a4 + 16);
    }
    if (a5 == 112) {
      int v11 = *(_DWORD *)(a4 + 16);
    }
    else {
      int v11 = 1;
    }
    if (a3 == 112) {
      int v12 = 1;
    }
    else {
      int v12 = *(_DWORD *)(a2 + 16);
    }
    if (a3 == 112) {
      int v13 = *(_DWORD *)(a2 + 16);
    }
    else {
      int v13 = 1;
    }
    uint64_t v14 = *(void *)result;
    uint64_t v15 = *(int *)(result + 16);
    int v16 = *(float **)a2;
    uint64_t v17 = 4 * v10;
    uint64_t v18 = 4 * v11;
    uint64_t v19 = *(float **)a4;
    uint64_t v20 = 4 * v12;
    uint64_t result = 4 * v13;
    do
    {
      if (v8 >= 1)
      {
        float v21 = (float *)(v14 + 4 * v9 * v15);
        uint64_t v22 = v16;
        uint64_t v23 = v19;
        int v24 = v8;
        do
        {
          float *v21 = (float)((float)(*v22 * a6) * *v23) + (float)(a7 * *v21);
          ++v21;
          uint64_t v23 = (float *)((char *)v23 + v18);
          uint64_t v22 = (float *)((char *)v22 + result);
          --v24;
        }
        while (v24);
      }
      ++v9;
      uint64_t v19 = (float *)((char *)v19 + v17);
      int v16 = (float *)((char *)v16 + v20);
    }
    while (v9 != v7);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::FirstNonZeroColumn(uint64_t *a1, float a2)
{
  uint64_t v2 = 0;
  uint64_t v4 = *((unsigned int *)a1 + 2);
  uint64_t v3 = *((unsigned int *)a1 + 3);
  uint64_t v5 = *a1;
  uint64_t v6 = 4 * *((int *)a1 + 4);
  uint64_t result = 0x7FFFFFFFLL;
  do
  {
    uint64_t v8 = 0;
    while (fabsf(*(float *)(v5 + 4 * v8)) <= a2)
    {
      if (v4 == ++v8) {
        goto LABEL_9;
      }
    }
    if ((int)v8 >= (int)result) {
      uint64_t result = result;
    }
    else {
      uint64_t result = v8;
    }
LABEL_9:
    ++v2;
    v5 += v6;
  }
  while (v2 != v3);
  return result;
}

void kaldi::MatrixBase<float>::Write(_DWORD *a1, void *a2, int a3, int a4)
{
  if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "Failed to write matrix to stream: stream not good");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (a3)
  {
    memset(&v15, 0, sizeof(v15));
    std::string::append(&v15, "F");
    if (a4) {
      uint64_t v7 = "N";
    }
    else {
      uint64_t v7 = "M";
    }
    std::string::append(&v15, v7);
    kaldi::WriteToken(a2, 1, (char *)&v15);
    kaldi::WriteBasicType<int>(a2, 1);
    kaldi::WriteBasicType<int>(a2, 1);
    if (a4)
    {
      kaldi::WriteBasicType<int>(a2, 1);
      if (!fst::AlignOutput(a2))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Could not align output", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
      }
    }
    else if (a1[4] != a1[2])
    {
      if ((int)a1[3] >= 1)
      {
        int v14 = 0;
        do
        {
          std::ostream::write();
          ++v14;
        }
        while (v14 < a1[3]);
      }
      goto LABEL_26;
    }
    std::ostream::write();
LABEL_26:
    if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Failed to write matrix to stream", 32);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (a1[2])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [", 2);
    if ((int)a1[3] >= 1)
    {
      int v8 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n  ", 3);
        if ((int)a1[2] >= 1)
        {
          uint64_t v9 = 0;
          do
          {
            int v10 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
            ++v9;
          }
          while (v9 < (int)a1[2]);
        }
        ++v8;
      }
      while (v8 < a1[3]);
    }
    int v11 = "]\n";
    int v12 = a2;
    uint64_t v13 = 2;
  }
  else
  {
    int v11 = " [ ]\n";
    int v12 = a2;
    uint64_t v13 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v11, v13);
}

void sub_1B2013764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double kaldi::SubMatrix<double>::SubMatrix(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 12) = a4;
  int v7 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 16) * a3;
  *(void *)a1 = *(void *)a2 + 8 * a5 + 8 * v8;
  *(_DWORD *)(a1 + 20) = v7 - a5 - v8;
  return result;
}

void kaldi::MatrixBase<double>::Scale(uint64_t a1, double a2)
{
  if (a2 != 1.0)
  {
    int v4 = *(_DWORD *)(a1 + 12);
    if (v4)
    {
      int v5 = *(_DWORD *)(a1 + 8);
      if (v5 == *(_DWORD *)(a1 + 16))
      {
        uint64_t v6 = *(double **)a1;
        cblas_dscal(v5 * v4, a2, v6, 1);
      }
      else if (v4 >= 1)
      {
        int v7 = 0;
        int v8 = *(double **)a1;
        do
        {
          cblas_dscal(*(_DWORD *)(a1 + 8), a2, v8, 1);
          ++v7;
          v8 += *(int *)(a1 + 16);
        }
        while (v7 < *(_DWORD *)(a1 + 12));
      }
    }
  }
}

void kaldi::MatrixBase<double>::Write(_DWORD *a1, void *a2, int a3, int a4)
{
  if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "Failed to write matrix to stream: stream not good");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (a3)
  {
    memset(&v15, 0, sizeof(v15));
    std::string::append(&v15, "D");
    if (a4) {
      int v7 = "N";
    }
    else {
      int v7 = "M";
    }
    std::string::append(&v15, v7);
    kaldi::WriteToken(a2, 1, (char *)&v15);
    kaldi::WriteBasicType<int>(a2, 1);
    kaldi::WriteBasicType<int>(a2, 1);
    if (a4)
    {
      kaldi::WriteBasicType<int>(a2, 1);
      if (!fst::AlignOutput(a2))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Could not align output", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
      }
    }
    else if (a1[4] != a1[2])
    {
      if ((int)a1[3] >= 1)
      {
        int v14 = 0;
        do
        {
          std::ostream::write();
          ++v14;
        }
        while (v14 < a1[3]);
      }
      goto LABEL_26;
    }
    std::ostream::write();
LABEL_26:
    if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Failed to write matrix to stream", 32);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (a1[2])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [", 2);
    if ((int)a1[3] >= 1)
    {
      int v8 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n  ", 3);
        if ((int)a1[2] >= 1)
        {
          uint64_t v9 = 0;
          do
          {
            int v10 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
            ++v9;
          }
          while (v9 < (int)a1[2]);
        }
        ++v8;
      }
      while (v8 < a1[3]);
    }
    int v11 = "]\n";
    int v12 = a2;
    uint64_t v13 = 2;
  }
  else
  {
    int v11 = " [ ]\n";
    int v12 = a2;
    uint64_t v13 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v11, v13);
}

void sub_1B2013BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::SubMatrix<float>::SubMatrix(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  *(_DWORD *)(result + 8) = a4;
  *(void *)double result = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a5 * a3;
  *(void *)(result + ++*(void *)(result + 24) = 0;
  if (!a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
  }
  return result;
}

uint64_t kaldi::Quant3Levels<float>(uint64_t result, uint64_t a2, float a3)
{
  int v3 = *(_DWORD *)(result + 12);
  if (v3 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *(unsigned int *)(result + 8);
    while ((int)v5 < 1)
    {
LABEL_11:
      if (++v4 == v3) {
        return result;
      }
    }
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * v4;
    uint64_t v8 = *(void *)result + 4 * *(_DWORD *)(result + 16) * v4;
    while (1)
    {
      float v9 = *(float *)(v8 + 4 * v6);
      if (v9 >= a3) {
        break;
      }
      float v10 = 0.0;
      if (v9 <= (float)-a3)
      {
        float v11 = v9 + a3;
        float v10 = -a3;
LABEL_9:
        *(float *)(v8 + 4 * v6) = v11;
      }
      *(float *)(v7 + 4 * v6++) = v10;
      if (v5 == v6) {
        goto LABEL_11;
      }
    }
    float v11 = v9 - a3;
    float v10 = a3;
    goto LABEL_9;
  }
  return result;
}

uint64_t kaldi::ZeroSmallValues<float>(uint64_t result, uint64_t a2, float a3)
{
  int v3 = *(_DWORD *)(result + 12);
  if (v3 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *(unsigned int *)(result + 8);
    while ((int)v5 < 1)
    {
LABEL_11:
      if (++v4 == v3) {
        return result;
      }
    }
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)result + 4 * *(_DWORD *)(result + 16) * v4;
    while (1)
    {
      float v8 = *(float *)(v7 + 4 * v6);
      if (v8 >= a3)
      {
        float v9 = (float *)(*(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * v4 + 4 * v6);
      }
      else
      {
        float v9 = (float *)(*(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * v4 + 4 * v6);
        if (v8 > (float)-a3) {
          goto LABEL_10;
        }
      }
      *float v9 = v8;
      float v9 = (float *)(v7 + 4 * v6);
LABEL_10:
      *float v9 = 0.0;
      if (++v6 == v5) {
        goto LABEL_11;
      }
    }
  }
  return result;
}

void **kaldi::MatrixBase<float>::AddMatMat<signed char>(void **result, uint64_t a2, double a3, float a4, uint64_t a5, kaldi::quasar::Vocab *a6, int a7)
{
  float v10 = result;
  if (a7 == 111)
  {
    uint64_t v11 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a6);
    uint64_t v12 = kaldi::quasar::Vocab::VocabSize(a6);
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v13, v11, v12);
    kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v13, a6, 112);
    if (*(_DWORD *)(a2 + 12)) {
      kaldi::QuantizedMatrixBase<signed char>::AddMatMat((uint64_t)v13, a2, v10, a4);
    }
    return (void **)kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)v13);
  }
  else if (*(_DWORD *)(a2 + 12))
  {
    return (void **)kaldi::QuantizedMatrixBase<signed char>::AddMatMat((uint64_t)a6, a2, result, a4);
  }
  return result;
}

void sub_1B2013E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void **kaldi::MatrixBase<float>::AddMatMat<short>(void **result, uint64_t a2, double a3, float a4, uint64_t a5, kaldi::quasar::Vocab *a6, int a7)
{
  float v10 = result;
  if (a7 == 111)
  {
    uint64_t v11 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a6);
    uint64_t v12 = kaldi::quasar::Vocab::VocabSize(a6);
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v13, v11, v12);
    kaldi::QuantizedMatrixBase<short>::CopyFromMat(v13, a6, 112);
    if (*(_DWORD *)(a2 + 12)) {
      kaldi::QuantizedMatrixBase<short>::AddMatMat((uint64_t)v13, a2, v10, a4);
    }
    return (void **)kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)v13);
  }
  else if (*(_DWORD *)(a2 + 12))
  {
    return (void **)kaldi::QuantizedMatrixBase<short>::AddMatMat((uint64_t)a6, a2, result, a4);
  }
  return result;
}

void sub_1B2013F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int *kaldi::MatrixBase<float>::AddMatMat<signed char>(int *result, uint64_t a2, double a3, float a4, uint64_t a5, uint64_t a6, int a7)
{
  if (a7 == 111)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "Unimplemented");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  if (*(_DWORD *)(a2 + 12))
  {
    return (int *)kaldi::VectorwiseQuantizedMatrix<signed char>::AddMatMat(a6, a2, result, a4);
  }
  return result;
}

int *kaldi::MatrixBase<float>::AddMatMat<short>(int *result, uint64_t a2, double a3, float a4, uint64_t a5, uint64_t a6, int a7)
{
  if (a7 == 111)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "Unimplemented");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  if (*(_DWORD *)(a2 + 12))
  {
    return (int *)kaldi::VectorwiseQuantizedMatrix<short>::AddMatMat(a6, a2, result, a4);
  }
  return result;
}

void kaldi::MatrixBase<float>::AddVecVec<float>(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *,false>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (uint64_t)(a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v24 = *(float *)(a2 - 8);
          float v25 = *(float *)v11;
          if (v24 >= *(float *)v11)
          {
            if (v25 < v24) {
              return result;
            }
            int v27 = *(_DWORD *)(a2 - 4);
            int v26 = *(_DWORD *)(v11 + 4);
            if (v27 >= v26) {
              return result;
            }
          }
          else
          {
            int v26 = *(_DWORD *)(v11 + 4);
            int v27 = *(_DWORD *)(a2 - 4);
          }
          *(float *)unint64_t v11 = v24;
          *(float *)(a2 - 8) = v25;
          *(_DWORD *)(v11 + 4) = v27;
          *(_DWORD *)(a2 - 4) = v26;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v11, v11 + 8, a2 - 8);
        case 4uLL:
          return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v11, v11 + 8, v11 + 16, a2 - 8);
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v11, v11 + 8, v11 + 16, v11 + 24, a2 - 8);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *,std::pair<float,int> *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = (_DWORD *)(v11 + 8 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v11, v11 + 8 * (v15 >> 1), a2 - 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v11 + 8, (uint64_t)(v17 - 2), a2 - 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v11 + 16, v11 + 8 + 8 * v16, a2 - 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>((uint64_t)(v17 - 2), (uint64_t)v17, v11 + 8 + 8 * v16);
      float v18 = *(float *)v11;
      *(_DWORD *)unint64_t v11 = *v17;
      *(float *)uint64_t v17 = v18;
      int v19 = *(_DWORD *)(v11 + 4);
      *(_DWORD *)(v11 + 4) = v17[1];
      v17[1] = v19;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v11 + 8 * (v15 >> 1), v11, a2 - 8);
      if (a5) {
        goto LABEL_16;
      }
    }
    float v20 = *(float *)(v11 - 8);
    if (v20 >= *(float *)v11 && (*(float *)v11 < v20 || *(_DWORD *)(v11 - 4) >= *(_DWORD *)(v11 + 4)))
    {
      double result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,int> *,std::__less<void,void> &>(v11, a2);
      unint64_t v11 = result;
      goto LABEL_21;
    }
LABEL_16:
    unint64_t v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,int> *,std::__less<void,void> &>(v11, a2);
    if ((v22 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v11, v21);
    unint64_t v11 = v21 + 8;
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v21 + 8, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v21;
      if (v23) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_19:
      double result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *,false>(v10, v21, a3, -v13, a5 & 1);
      unint64_t v11 = v21 + 8;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v11, a2);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(v11, a2);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 8;
  if (result + 8 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  uint64_t v4 = result;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = v2;
    float v6 = *(float *)(v5 + 8);
    float v7 = *(float *)v5;
    if (v6 >= *(float *)v5)
    {
      if (v7 < v6) {
        goto LABEL_19;
      }
      int v8 = *(_DWORD *)(v5 + 12);
      int v9 = *(_DWORD *)(v5 + 4);
      if (v8 >= v9) {
        goto LABEL_19;
      }
    }
    else
    {
      int v8 = *(_DWORD *)(v5 + 12);
      int v9 = *(_DWORD *)(v5 + 4);
    }
    *(float *)(v5 + 8) = v7;
    *(_DWORD *)(v4 + 4) = v9;
    uint64_t v10 = result;
    if (v5 == result) {
      goto LABEL_18;
    }
    uint64_t v11 = v3;
    while (1)
    {
      float v12 = *(float *)(result + v11 - 8);
      if (v6 >= v12) {
        break;
      }
      int v13 = *(_DWORD *)(result + v11 - 4);
LABEL_12:
      v5 -= 8;
      uint64_t v14 = result + v11;
      *(float *)uint64_t v14 = v12;
      *(_DWORD *)(v14 + 4) = v13;
      v11 -= 8;
      if (!v11)
      {
        uint64_t v10 = result;
        goto LABEL_18;
      }
    }
    if (v12 >= v6)
    {
      uint64_t v10 = result + v11;
      int v13 = *(_DWORD *)(result + v11 - 4);
      if (v8 >= v13) {
        goto LABEL_18;
      }
      goto LABEL_12;
    }
    uint64_t v10 = v5;
LABEL_18:
    *(float *)uint64_t v10 = v6;
    *(_DWORD *)(v10 + 4) = v8;
LABEL_19:
    uint64_t v2 = v4 + 8;
    v3 += 8;
  }
  while (v4 + 8 != a2);
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 8;
    if (result + 8 != a2)
    {
      for (uint64_t i = result + 4; ; i += 8)
      {
        uint64_t v4 = result;
        double result = v2;
        float v5 = *(float *)(v4 + 8);
        float v6 = *(float *)v4;
        if (v5 < *(float *)v4) {
          break;
        }
        if (v6 >= v5)
        {
          int v7 = *(_DWORD *)(v4 + 12);
          if (v7 < *(_DWORD *)(v4 + 4)) {
            goto LABEL_6;
          }
        }
LABEL_14:
        uint64_t v2 = result + 8;
        if (result + 8 == a2) {
          return result;
        }
      }
      int v7 = *(_DWORD *)(v4 + 12);
LABEL_6:
      for (uint64_t j = i; ; j -= 8)
      {
        *(float *)(j + 4) = v6;
        *(_DWORD *)(j + 8) = *(_DWORD *)j;
        float v6 = *(float *)(j - 12);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(_DWORD *)(j - 8))) {
          break;
        }
      }
      *(float *)(j - 4) = v5;
      *(_DWORD *)uint64_t j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3 = *(float *)a2;
  float v4 = *(float *)a1;
  if (*(float *)a2 >= *(float *)a1 && (v4 < v3 || *(_DWORD *)(a2 + 4) >= *(_DWORD *)(a1 + 4)))
  {
    float v9 = *(float *)a3;
    if (*(float *)a3 >= v3)
    {
      if (v3 < v9) {
        return 0;
      }
      int v11 = *(_DWORD *)(a3 + 4);
      int v10 = *(_DWORD *)(a2 + 4);
      if (v11 >= v10) {
        return 0;
      }
    }
    else
    {
      int v10 = *(_DWORD *)(a2 + 4);
      int v11 = *(_DWORD *)(a3 + 4);
    }
    *(float *)a2 = v9;
    *(float *)a3 = v3;
    *(_DWORD *)(a2 + 4) = v11;
    *(_DWORD *)(a3 + 4) = v10;
    float v12 = *(float *)a2;
    float v13 = *(float *)a1;
    if (*(float *)a2 >= *(float *)a1)
    {
      if (v13 < v12) {
        return 1;
      }
      int v15 = *(_DWORD *)(a2 + 4);
      int v14 = *(_DWORD *)(a1 + 4);
      if (v15 >= v14) {
        return 1;
      }
    }
    else
    {
      int v14 = *(_DWORD *)(a1 + 4);
      int v15 = *(_DWORD *)(a2 + 4);
    }
    *(float *)a1 = v12;
    *(float *)a2 = v13;
    *(_DWORD *)(a1 + 4) = v15;
    uint64_t result = 2;
    *(_DWORD *)(a2 + 4) = v14;
  }
  else
  {
    float v5 = *(float *)a3;
    if (*(float *)a3 < v3)
    {
      int v6 = *(_DWORD *)(a3 + 4);
LABEL_6:
      *(float *)a1 = v5;
      *(float *)a3 = v4;
      int v7 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = v6;
      *(_DWORD *)(a3 + 4) = v7;
      return 1;
    }
    if (v3 >= v5)
    {
      int v6 = *(_DWORD *)(a3 + 4);
      int v16 = *(_DWORD *)(a2 + 4);
      if (v6 < v16) {
        goto LABEL_6;
      }
    }
    else
    {
      int v16 = *(_DWORD *)(a2 + 4);
    }
    *(float *)a1 = v3;
    *(float *)a2 = v4;
    int v17 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = v16;
    *(_DWORD *)(a2 + 4) = v17;
    float v18 = *(float *)a3;
    if (*(float *)a3 >= v4)
    {
      if (v4 < v18) {
        return 1;
      }
      int v19 = *(_DWORD *)(a3 + 4);
      if (v19 >= v17) {
        return 1;
      }
    }
    else
    {
      int v19 = *(_DWORD *)(a3 + 4);
    }
    *(float *)a2 = v18;
    *(float *)a3 = v4;
    *(_DWORD *)(a2 + 4) = v19;
    uint64_t result = 2;
    *(_DWORD *)(a3 + 4) = v17;
  }
  return result;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,int> *,std::__less<void,void> &>(unint64_t a1, unint64_t a2)
{
  float v2 = *(float *)a1;
  int v3 = *(_DWORD *)(a1 + 4);
  float v4 = *(float *)(a2 - 8);
  if (*(float *)a1 >= v4 && (v4 < v2 || v3 >= *(_DWORD *)(a2 - 4)))
  {
    for (unint64_t i = a1 + 8; i < a2 && v2 >= *(float *)i && (*(float *)i < v2 || v3 >= *(_DWORD *)(i + 4)); i += 8)
      ;
  }
  else
  {
    unint64_t i = a1;
    do
    {
      float v6 = *(float *)(i + 8);
      i += 8;
      float v7 = v6;
    }
    while (v2 >= v6 && (v7 < v2 || v3 >= *(_DWORD *)(i + 4)));
  }
  if (i < a2)
  {
    for (a2 -= 8; v2 < v4 || v4 >= v2 && v3 < *(_DWORD *)(a2 + 4); a2 -= 8)
    {
      float v8 = *(float *)(a2 - 8);
      float v4 = v8;
    }
  }
  if (i < a2)
  {
    float v9 = *(float *)i;
    float v10 = *(float *)a2;
    do
    {
      *(float *)unint64_t i = v10;
      *(float *)a2 = v9;
      float v11 = *(float *)(i + 8);
      i += 8;
      float v9 = v11;
      int v12 = *(_DWORD *)(i - 4);
      *(_DWORD *)(i - 4) = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *(_DWORD *)(i + 4)))
      {
        float v13 = *(float *)(i + 8);
        i += 8;
        float v9 = v13;
      }
      do
      {
        do
        {
          float v14 = *(float *)(a2 - 8);
          a2 -= 8;
          float v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *(_DWORD *)(a2 + 4));
    }
    while (i < a2);
  }
  if (i - 8 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(i - 8);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(i - 4);
  }
  *(float *)(i - 8) = v2;
  *(_DWORD *)(i - 4) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,int> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  float v3 = *(float *)a1;
  int v4 = *(_DWORD *)(a1 + 4);
  while (1)
  {
    float v5 = *(float *)(a1 + v2 + 8);
    if (v5 >= v3 && (v3 < v5 || *(_DWORD *)(a1 + v2 + 12) >= v4)) {
      break;
    }
    v2 += 8;
  }
  unint64_t v6 = a1 + v2 + 8;
  if (v2)
  {
    do
    {
      float v7 = *(float *)(a2 - 8);
      a2 -= 8;
      float v8 = v7;
    }
    while (v7 >= v3 && (v3 < v8 || *(_DWORD *)(a2 + 4) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        float v9 = *(float *)(a2 - 8);
        a2 -= 8;
        float v10 = v9;
        if (v9 < v3) {
          break;
        }
        if (v3 < v10) {
          goto LABEL_19;
        }
      }
      while (*(_DWORD *)(a2 + 4) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v13 = a1 + v2 + 8;
  }
  else
  {
    float v12 = *(float *)a2;
    unint64_t v13 = a1 + v2 + 8;
    unint64_t v14 = a2;
    do
    {
      *(float *)unint64_t v13 = v12;
      *(float *)unint64_t v14 = v5;
      int v15 = *(_DWORD *)(v13 + 4);
      *(_DWORD *)(v13 + 4) = *(_DWORD *)(v14 + 4);
      *(_DWORD *)(v14 + 4) = v15;
      do
      {
        do
        {
          float v16 = *(float *)(v13 + 8);
          v13 += 8;
          float v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_DWORD *)(v13 + 4) < v4);
      do
      {
        float v17 = *(float *)(v14 - 8);
        v14 -= 8;
        float v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_DWORD *)(v14 + 4) >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 8 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v13 - 8);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(v13 - 4);
  }
  *(float *)(v13 - 8) = v3;
  *(_DWORD *)(v13 - 4) = v4;
  return v13 - 8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(float *)(a2 - 8);
      float v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        int v8 = *(_DWORD *)(a1 + 4);
        int v9 = *(_DWORD *)(a2 - 4);
LABEL_30:
        *(float *)a1 = v6;
        *(float *)(a2 - 8) = v7;
        *(_DWORD *)(a1 + 4) = v9;
        *(_DWORD *)(a2 - 4) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        int v9 = *(_DWORD *)(a2 - 4);
        int v8 = *(_DWORD *)(a1 + 4);
        if (v9 < v8) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a1 + 8, a2 - 8);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a1 + 8, a1 + 16, a1 + 24, a2 - 8);
      return 1;
    default:
      uint64_t v10 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a1 + 8, a1 + 16);
      uint64_t v11 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
LABEL_6:
  float v14 = *(float *)v11;
  float v15 = *(float *)v10;
  if (*(float *)v11 >= *(float *)v10)
  {
    if (v15 < v14) {
      goto LABEL_21;
    }
    int v16 = *(_DWORD *)(v11 + 4);
    int v17 = *(_DWORD *)(v10 + 4);
    if (v16 >= v17) {
      goto LABEL_21;
    }
  }
  else
  {
    int v16 = *(_DWORD *)(v11 + 4);
    int v17 = *(_DWORD *)(v10 + 4);
  }
  *(float *)uint64_t v11 = v15;
  *(_DWORD *)(v11 + 4) = v17;
  uint64_t v18 = a1;
  if (v10 == a1) {
    goto LABEL_20;
  }
  uint64_t v19 = v12;
  while (1)
  {
    uint64_t v20 = a1 + v19;
    float v21 = *(float *)(a1 + v19 + 8);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        uint64_t v18 = v10;
        goto LABEL_20;
      }
      int v22 = *(_DWORD *)(a1 + v19 + 12);
      if (v16 >= v22)
      {
        uint64_t v18 = a1 + v19 + 16;
LABEL_20:
        *(float *)uint64_t v18 = v14;
        *(_DWORD *)(v18 + 4) = v16;
        if (++v13 == 8) {
          return v11 + 8 == a2;
        }
LABEL_21:
        uint64_t v10 = v11;
        v12 += 8;
        v11 += 8;
        if (v11 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      int v22 = *(_DWORD *)(v20 + 12);
    }
    v10 -= 8;
    *(float *)(v20 + 16) = v21;
    *(_DWORD *)(a1 + v19 + 20) = v22;
    v19 -= 8;
    if (v19 == -16)
    {
      uint64_t v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a2, a3);
  float v9 = *(float *)a4;
  float v10 = *(float *)a3;
  if (*(float *)a4 >= *(float *)a3)
  {
    if (v10 < v9) {
      return result;
    }
    int v12 = *(_DWORD *)(a4 + 4);
    int v11 = *(_DWORD *)(a3 + 4);
    if (v12 >= v11) {
      return result;
    }
  }
  else
  {
    int v11 = *(_DWORD *)(a3 + 4);
    int v12 = *(_DWORD *)(a4 + 4);
  }
  *(float *)a3 = v9;
  *(float *)a4 = v10;
  *(_DWORD *)(a3 + 4) = v12;
  *(_DWORD *)(a4 + 4) = v11;
  float v13 = *(float *)a3;
  float v14 = *(float *)a2;
  if (*(float *)a3 >= *(float *)a2)
  {
    if (v14 < v13) {
      return result;
    }
    int v16 = *(_DWORD *)(a3 + 4);
    int v15 = *(_DWORD *)(a2 + 4);
    if (v16 >= v15) {
      return result;
    }
  }
  else
  {
    int v15 = *(_DWORD *)(a2 + 4);
    int v16 = *(_DWORD *)(a3 + 4);
  }
  *(float *)a2 = v13;
  *(float *)a3 = v14;
  *(_DWORD *)(a2 + 4) = v16;
  *(_DWORD *)(a3 + 4) = v15;
  float v17 = *(float *)a2;
  float v18 = *(float *)a1;
  if (*(float *)a2 < *(float *)a1)
  {
    int v19 = *(_DWORD *)(a1 + 4);
    int v20 = *(_DWORD *)(a2 + 4);
LABEL_15:
    *(float *)a1 = v17;
    *(float *)a2 = v18;
    *(_DWORD *)(a1 + 4) = v20;
    *(_DWORD *)(a2 + 4) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    int v20 = *(_DWORD *)(a2 + 4);
    int v19 = *(_DWORD *)(a1 + 4);
    if (v20 < v19) {
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a2, a3, a4);
  float v11 = *(float *)a5;
  float v12 = *(float *)a4;
  if (*(float *)a5 >= *(float *)a4)
  {
    if (v12 < v11) {
      return result;
    }
    int v14 = *(_DWORD *)(a5 + 4);
    int v13 = *(_DWORD *)(a4 + 4);
    if (v14 >= v13) {
      return result;
    }
  }
  else
  {
    int v13 = *(_DWORD *)(a4 + 4);
    int v14 = *(_DWORD *)(a5 + 4);
  }
  *(float *)a4 = v11;
  *(float *)a5 = v12;
  *(_DWORD *)(a4 + 4) = v14;
  *(_DWORD *)(a5 + 4) = v13;
  float v15 = *(float *)a4;
  float v16 = *(float *)a3;
  if (*(float *)a4 >= *(float *)a3)
  {
    if (v16 < v15) {
      return result;
    }
    int v18 = *(_DWORD *)(a4 + 4);
    int v17 = *(_DWORD *)(a3 + 4);
    if (v18 >= v17) {
      return result;
    }
  }
  else
  {
    int v17 = *(_DWORD *)(a3 + 4);
    int v18 = *(_DWORD *)(a4 + 4);
  }
  *(float *)a3 = v15;
  *(float *)a4 = v16;
  *(_DWORD *)(a3 + 4) = v18;
  *(_DWORD *)(a4 + 4) = v17;
  float v19 = *(float *)a3;
  float v20 = *(float *)a2;
  if (*(float *)a3 >= *(float *)a2)
  {
    if (v20 < v19) {
      return result;
    }
    int v22 = *(_DWORD *)(a3 + 4);
    int v21 = *(_DWORD *)(a2 + 4);
    if (v22 >= v21) {
      return result;
    }
  }
  else
  {
    int v21 = *(_DWORD *)(a2 + 4);
    int v22 = *(_DWORD *)(a3 + 4);
  }
  *(float *)a2 = v19;
  *(float *)a3 = v20;
  *(_DWORD *)(a2 + 4) = v22;
  *(_DWORD *)(a3 + 4) = v21;
  float v23 = *(float *)a2;
  float v24 = *(float *)a1;
  if (*(float *)a2 < *(float *)a1)
  {
    int v25 = *(_DWORD *)(a1 + 4);
    int v26 = *(_DWORD *)(a2 + 4);
LABEL_9:
    *(float *)a1 = v23;
    *(float *)a2 = v24;
    *(_DWORD *)(a1 + 4) = v26;
    *(_DWORD *)(a2 + 4) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    int v26 = *(_DWORD *)(a2 + 4);
    int v25 = *(_DWORD *)(a1 + 4);
    if (v26 < v25) {
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *,std::pair<float,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 8 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      while (1)
      {
        float v15 = *(float *)v14;
        float v16 = *(float *)a1;
        if (*(float *)v14 >= *(float *)a1)
        {
          if (v16 < v15) {
            goto LABEL_12;
          }
          int v17 = *(_DWORD *)(v14 + 4);
          int v18 = *(_DWORD *)(a1 + 4);
          if (v17 >= v18) {
            goto LABEL_12;
          }
        }
        else
        {
          int v17 = *(_DWORD *)(v14 + 4);
          int v18 = *(_DWORD *)(a1 + 4);
        }
        *(float *)uint64_t v14 = v16;
        *(float *)a1 = v15;
        *(_DWORD *)(v14 + 4) = v18;
        *(_DWORD *)(a1 + 4) = v17;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a4, v9, a1);
LABEL_12:
        v14 += 8;
        if (v14 == a3)
        {
          uint64_t v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 9)
    {
      uint64_t v19 = (unint64_t)v8 >> 3;
      float v20 = (float *)(a2 - 8);
      do
      {
        float v21 = *(float *)a1;
        int v22 = *(_DWORD *)(a1 + 4);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a4, v19);
        if (v20 == v23)
        {
          *float v23 = v21;
          *((_DWORD *)v23 + 1) = v22;
        }
        else
        {
          *float v23 = *v20;
          v23[1] = v20[1];
          float *v20 = v21;
          *((_DWORD *)v20 + 1) = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, (uint64_t)(v23 + 2), a4, ((uint64_t)v23 - a1 + 8) >> 3);
        }
        v20 -= 2;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = result + 8 * v7;
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        float v10 = *(float *)(v8 + 8);
        if (*(float *)v8 < v10 || v10 >= *(float *)v8 && *(_DWORD *)(result + 8 * v7 + 4) < *(_DWORD *)(v8 + 12))
        {
          v8 += 8;
          uint64_t v7 = v9;
        }
      }
      float v11 = *(float *)v8;
      float v12 = *(float *)a4;
      if (*(float *)v8 >= *(float *)a4)
      {
        if (v12 >= v11)
        {
          int v14 = *(_DWORD *)(v8 + 4);
          int v13 = *(_DWORD *)(a4 + 4);
          if (v14 < v13) {
            return result;
          }
        }
        else
        {
          int v13 = *(_DWORD *)(a4 + 4);
          int v14 = *(_DWORD *)(v8 + 4);
        }
        *(float *)a4 = v11;
        *(_DWORD *)(a4 + 4) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v15 = result + 8 * v7;
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              float v18 = *(float *)(v15 + 8);
              if (*(float *)v15 < v18
                || v18 >= *(float *)v15 && *(_DWORD *)(result + 8 * v7 + 4) < *(_DWORD *)(v15 + 12))
              {
                v15 += 8;
                uint64_t v7 = v17;
              }
            }
            float v19 = *(float *)v15;
            if (*(float *)v15 < v12) {
              break;
            }
            int v20 = *(_DWORD *)(v15 + 4);
            if (v12 >= v19 && v20 < v13) {
              break;
            }
            *(float *)uint64_t v8 = v19;
            *(_DWORD *)(v8 + 4) = v20;
            uint64_t v8 = v15;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v15 = v8;
LABEL_14:
        *(float *)uint64_t v15 = v12;
        *(_DWORD *)(v15 + 4) = v13;
      }
    }
  }
  return result;
}

float std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = (_DWORD *)a1;
    uint64_t v7 = v3 + 1;
    a1 += 8 * (v3 + 1);
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      float v10 = *(float *)(a1 + 8);
      if (*(float *)a1 < v10 || v10 >= *(float *)a1 && v6[2 * v7 + 1] < *(_DWORD *)(a1 + 12))
      {
        a1 += 8;
        uint64_t v3 = v9;
      }
    }
    float result = *(float *)a1;
    *uint64_t v6 = *(_DWORD *)a1;
    v6[1] = *(_DWORD *)(a1 + 4);
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = result + 8 * (v4 >> 1);
    float v7 = *(float *)v6;
    float v8 = *(float *)(a2 - 8);
    if (*(float *)v6 >= v8)
    {
      if (v8 < v7) {
        return result;
      }
      int v10 = *(_DWORD *)(result + 8 * v5 + 4);
      int v9 = *(_DWORD *)(a2 - 4);
      if (v10 >= v9) {
        return result;
      }
    }
    else
    {
      int v9 = *(_DWORD *)(a2 - 4);
      int v10 = *(_DWORD *)(v6 + 4);
    }
    *(float *)(a2 - 8) = v7;
    *(_DWORD *)(a2 - 4) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v12 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v11 = result + 8 * v5;
        float v13 = *(float *)v11;
        if (*(float *)v11 >= v8)
        {
          if (v8 < v13) {
            break;
          }
          int v14 = *(_DWORD *)(result + 8 * v5 + 4);
          if (v14 >= v9) {
            break;
          }
        }
        else
        {
          int v14 = *(_DWORD *)(v11 + 4);
        }
        *(float *)uint64_t v6 = v13;
        *(_DWORD *)(v6 + 4) = v14;
        uint64_t v6 = result + 8 * v5;
        if (v12 <= 1) {
          goto LABEL_13;
        }
      }
    }
    uint64_t v11 = v6;
LABEL_13:
    *(float *)uint64_t v11 = v8;
    *(_DWORD *)(v11 + 4) = v9;
  }
  return result;
}

void *std::vector<std::pair<double,int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 16 * a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B201533C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (uint64_t)(a2 - v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v24 = *(double *)(a2 - 16);
          double v25 = *(double *)v11;
          if (v24 >= *(double *)v11)
          {
            if (v25 < v24) {
              return result;
            }
            int v27 = *(_DWORD *)(a2 - 8);
            int v26 = *(_DWORD *)(v11 + 8);
            if (v27 >= v26) {
              return result;
            }
          }
          else
          {
            int v26 = *(_DWORD *)(v11 + 8);
            int v27 = *(_DWORD *)(a2 - 8);
          }
          *(double *)unint64_t v11 = v24;
          *(double *)(a2 - 16) = v25;
          *(_DWORD *)(v11 + 8) = v27;
          *(_DWORD *)(a2 - 8) = v26;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v11, v11 + 16, a2 - 16);
        case 4uLL:
          return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v11, v11 + 16, v11 + 32, a2 - 16);
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v11, v11 + 16, v11 + 32, v11 + 48, a2 - 16);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,std::pair<double,int> *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = v11 + 16 * (v15 >> 1);
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v11, v11 + 16 * (v15 >> 1), a2 - 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v11 + 16, v17 - 16, a2 - 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v11 + 32, v11 + 16 + 16 * v16, a2 - 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v17 - 16, v17, v11 + 16 + 16 * v16);
      double v18 = *(double *)v11;
      *(void *)unint64_t v11 = *(void *)v17;
      *(double *)uint64_t v17 = v18;
      int v19 = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v17 + 8);
      *(_DWORD *)(v17 + 8) = v19;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v11 + 16 * (v15 >> 1), v11, a2 - 16);
      if (a5) {
        goto LABEL_16;
      }
    }
    double v20 = *(double *)(v11 - 16);
    if (v20 >= *(double *)v11 && (*(double *)v11 < v20 || *(_DWORD *)(v11 - 8) >= *(_DWORD *)(v11 + 8)))
    {
      float result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::__less<void,void> &>(v11, a2);
      unint64_t v11 = result;
      goto LABEL_21;
    }
LABEL_16:
    unint64_t v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::__less<void,void> &>(v11, a2);
    if ((v22 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v11, v21);
    unint64_t v11 = v21 + 16;
    float result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v21 + 16, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v21;
      if (v23) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_19:
      float result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>(v10, v21, a3, -v13, a5 & 1);
      unint64_t v11 = v21 + 16;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v11, a2);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(v11, a2);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 16;
  if (result + 16 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  uint64_t v4 = result;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = v2;
    double v6 = *(double *)(v5 + 16);
    double v7 = *(double *)v5;
    if (v6 >= *(double *)v5)
    {
      if (v7 < v6) {
        goto LABEL_19;
      }
      int v8 = *(_DWORD *)(v5 + 24);
      int v9 = *(_DWORD *)(v5 + 8);
      if (v8 >= v9) {
        goto LABEL_19;
      }
    }
    else
    {
      int v8 = *(_DWORD *)(v5 + 24);
      int v9 = *(_DWORD *)(v5 + 8);
    }
    *(double *)(v5 + 16) = v7;
    *(_DWORD *)(v4 + 8) = v9;
    uint64_t v10 = result;
    if (v5 == result) {
      goto LABEL_18;
    }
    uint64_t v11 = v3;
    while (1)
    {
      double v12 = *(double *)(result + v11 - 16);
      if (v6 >= v12) {
        break;
      }
      int v13 = *(_DWORD *)(result + v11 - 8);
LABEL_12:
      v5 -= 16;
      uint64_t v14 = result + v11;
      *(double *)uint64_t v14 = v12;
      *(_DWORD *)(v14 + 8) = v13;
      v11 -= 16;
      if (!v11)
      {
        uint64_t v10 = result;
        goto LABEL_18;
      }
    }
    if (v12 >= v6)
    {
      uint64_t v10 = result + v11;
      int v13 = *(_DWORD *)(result + v11 - 8);
      if (v8 >= v13) {
        goto LABEL_18;
      }
      goto LABEL_12;
    }
    uint64_t v10 = v5;
LABEL_18:
    *(double *)uint64_t v10 = v6;
    *(_DWORD *)(v10 + 8) = v8;
LABEL_19:
    uint64_t v2 = v4 + 16;
    v3 += 16;
  }
  while (v4 + 16 != a2);
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 16;
    if (result + 16 != a2)
    {
      for (uint64_t i = result + 8; ; i += 16)
      {
        uint64_t v4 = result;
        float result = v2;
        double v5 = *(double *)(v4 + 16);
        double v6 = *(double *)v4;
        if (v5 < *(double *)v4) {
          break;
        }
        if (v6 >= v5)
        {
          int v7 = *(_DWORD *)(v4 + 24);
          if (v7 < *(_DWORD *)(v4 + 8)) {
            goto LABEL_6;
          }
        }
LABEL_14:
        uint64_t v2 = result + 16;
        if (result + 16 == a2) {
          return result;
        }
      }
      int v7 = *(_DWORD *)(v4 + 24);
LABEL_6:
      for (uint64_t j = i; ; j -= 16)
      {
        *(double *)(j + 8) = v6;
        *(_DWORD *)(j + 16) = *(_DWORD *)j;
        double v6 = *(double *)(j - 24);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(_DWORD *)(j - 16))) {
          break;
        }
      }
      *(double *)(j - 8) = v5;
      *(_DWORD *)uint64_t j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3 = *(double *)a2;
  double v4 = *(double *)a1;
  if (*(double *)a2 >= *(double *)a1 && (v4 < v3 || *(_DWORD *)(a2 + 8) >= *(_DWORD *)(a1 + 8)))
  {
    double v9 = *(double *)a3;
    if (*(double *)a3 >= v3)
    {
      if (v3 < v9) {
        return 0;
      }
      int v11 = *(_DWORD *)(a3 + 8);
      int v10 = *(_DWORD *)(a2 + 8);
      if (v11 >= v10) {
        return 0;
      }
    }
    else
    {
      int v10 = *(_DWORD *)(a2 + 8);
      int v11 = *(_DWORD *)(a3 + 8);
    }
    *(double *)a2 = v9;
    *(double *)a3 = v3;
    *(_DWORD *)(a2 + 8) = v11;
    *(_DWORD *)(a3 + 8) = v10;
    double v12 = *(double *)a2;
    double v13 = *(double *)a1;
    if (*(double *)a2 >= *(double *)a1)
    {
      if (v13 < v12) {
        return 1;
      }
      int v15 = *(_DWORD *)(a2 + 8);
      int v14 = *(_DWORD *)(a1 + 8);
      if (v15 >= v14) {
        return 1;
      }
    }
    else
    {
      int v14 = *(_DWORD *)(a1 + 8);
      int v15 = *(_DWORD *)(a2 + 8);
    }
    *(double *)a1 = v12;
    *(double *)a2 = v13;
    *(_DWORD *)(a1 + 8) = v15;
    uint64_t result = 2;
    *(_DWORD *)(a2 + 8) = v14;
  }
  else
  {
    double v5 = *(double *)a3;
    if (*(double *)a3 < v3)
    {
      int v6 = *(_DWORD *)(a3 + 8);
LABEL_6:
      *(double *)a1 = v5;
      *(double *)a3 = v4;
      int v7 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = v6;
      *(_DWORD *)(a3 + 8) = v7;
      return 1;
    }
    if (v3 >= v5)
    {
      int v6 = *(_DWORD *)(a3 + 8);
      int v16 = *(_DWORD *)(a2 + 8);
      if (v6 < v16) {
        goto LABEL_6;
      }
    }
    else
    {
      int v16 = *(_DWORD *)(a2 + 8);
    }
    *(double *)a1 = v3;
    *(double *)a2 = v4;
    int v17 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v16;
    *(_DWORD *)(a2 + 8) = v17;
    double v18 = *(double *)a3;
    if (*(double *)a3 >= v4)
    {
      if (v4 < v18) {
        return 1;
      }
      int v19 = *(_DWORD *)(a3 + 8);
      if (v19 >= v17) {
        return 1;
      }
    }
    else
    {
      int v19 = *(_DWORD *)(a3 + 8);
    }
    *(double *)a2 = v18;
    *(double *)a3 = v4;
    *(_DWORD *)(a2 + 8) = v19;
    uint64_t result = 2;
    *(_DWORD *)(a3 + 8) = v17;
  }
  return result;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::__less<void,void> &>(unint64_t a1, unint64_t a2)
{
  double v2 = *(double *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  double v4 = *(double *)(a2 - 16);
  if (*(double *)a1 >= v4 && (v4 < v2 || v3 >= *(_DWORD *)(a2 - 8)))
  {
    for (unint64_t i = a1 + 16; i < a2 && v2 >= *(double *)i && (*(double *)i < v2 || v3 >= *(_DWORD *)(i + 8)); i += 16)
      ;
  }
  else
  {
    unint64_t i = a1;
    do
    {
      double v6 = *(double *)(i + 16);
      i += 16;
      double v7 = v6;
    }
    while (v2 >= v6 && (v7 < v2 || v3 >= *(_DWORD *)(i + 8)));
  }
  if (i < a2)
  {
    for (a2 -= 16; v2 < v4 || v4 >= v2 && v3 < *(_DWORD *)(a2 + 8); a2 -= 16)
    {
      double v8 = *(double *)(a2 - 16);
      double v4 = v8;
    }
  }
  if (i < a2)
  {
    double v9 = *(double *)i;
    double v10 = *(double *)a2;
    do
    {
      *(double *)unint64_t i = v10;
      *(double *)a2 = v9;
      double v11 = *(double *)(i + 16);
      i += 16;
      double v9 = v11;
      int v12 = *(_DWORD *)(i - 8);
      *(_DWORD *)(i - 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *(_DWORD *)(i + 8)))
      {
        double v13 = *(double *)(i + 16);
        i += 16;
        double v9 = v13;
      }
      do
      {
        do
        {
          double v14 = *(double *)(a2 - 16);
          a2 -= 16;
          double v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *(_DWORD *)(a2 + 8));
    }
    while (i < a2);
  }
  if (i - 16 != a1)
  {
    *(void *)a1 = *(void *)(i - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(i - 8);
  }
  *(double *)(i - 16) = v2;
  *(_DWORD *)(i - 8) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<double,int> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  double v3 = *(double *)a1;
  int v4 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    double v5 = *(double *)(a1 + v2 + 16);
    if (v5 >= v3 && (v3 < v5 || *(_DWORD *)(a1 + v2 + 24) >= v4)) {
      break;
    }
    v2 += 16;
  }
  unint64_t v6 = a1 + v2 + 16;
  if (v2)
  {
    do
    {
      double v7 = *(double *)(a2 - 16);
      a2 -= 16;
      double v8 = v7;
    }
    while (v7 >= v3 && (v3 < v8 || *(_DWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        double v9 = *(double *)(a2 - 16);
        a2 -= 16;
        double v10 = v9;
        if (v9 < v3) {
          break;
        }
        if (v3 < v10) {
          goto LABEL_19;
        }
      }
      while (*(_DWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v13 = a1 + v2 + 16;
  }
  else
  {
    double v12 = *(double *)a2;
    unint64_t v13 = a1 + v2 + 16;
    unint64_t v14 = a2;
    do
    {
      *(double *)unint64_t v13 = v12;
      *(double *)unint64_t v14 = v5;
      int v15 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v15;
      do
      {
        do
        {
          double v16 = *(double *)(v13 + 16);
          v13 += 16;
          double v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_DWORD *)(v13 + 8) < v4);
      do
      {
        double v17 = *(double *)(v14 - 16);
        v14 -= 16;
        double v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_DWORD *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 16 != a1)
  {
    *(void *)a1 = *(void *)(v13 - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v13 - 8);
  }
  *(double *)(v13 - 16) = v3;
  *(_DWORD *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(double *)(a2 - 16);
      double v7 = *(double *)a1;
      if (v6 < *(double *)a1)
      {
        int v8 = *(_DWORD *)(a1 + 8);
        int v9 = *(_DWORD *)(a2 - 8);
LABEL_30:
        *(double *)a1 = v6;
        *(double *)(a2 - 16) = v7;
        *(_DWORD *)(a1 + 8) = v9;
        *(_DWORD *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        int v9 = *(_DWORD *)(a2 - 8);
        int v8 = *(_DWORD *)(a1 + 8);
        if (v9 < v8) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a1 + 16, a1 + 32);
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
LABEL_6:
  double v14 = *(double *)v11;
  double v15 = *(double *)v10;
  if (*(double *)v11 >= *(double *)v10)
  {
    if (v15 < v14) {
      goto LABEL_21;
    }
    int v16 = *(_DWORD *)(v11 + 8);
    int v17 = *(_DWORD *)(v10 + 8);
    if (v16 >= v17) {
      goto LABEL_21;
    }
  }
  else
  {
    int v16 = *(_DWORD *)(v11 + 8);
    int v17 = *(_DWORD *)(v10 + 8);
  }
  *(double *)uint64_t v11 = v15;
  *(_DWORD *)(v11 + 8) = v17;
  uint64_t v18 = a1;
  if (v10 == a1) {
    goto LABEL_20;
  }
  uint64_t v19 = v12;
  while (1)
  {
    uint64_t v20 = a1 + v19;
    double v21 = *(double *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        uint64_t v18 = v10;
        goto LABEL_20;
      }
      int v22 = *(_DWORD *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        uint64_t v18 = a1 + v19 + 32;
LABEL_20:
        *(double *)uint64_t v18 = v14;
        *(_DWORD *)(v18 + 8) = v16;
        if (++v13 == 8) {
          return v11 + 16 == a2;
        }
LABEL_21:
        uint64_t v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      int v22 = *(_DWORD *)(v20 + 24);
    }
    v10 -= 16;
    *(double *)(v20 + 32) = v21;
    *(_DWORD *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      uint64_t v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a2, a3);
  double v9 = *(double *)a4;
  double v10 = *(double *)a3;
  if (*(double *)a4 >= *(double *)a3)
  {
    if (v10 < v9) {
      return result;
    }
    int v12 = *(_DWORD *)(a4 + 8);
    int v11 = *(_DWORD *)(a3 + 8);
    if (v12 >= v11) {
      return result;
    }
  }
  else
  {
    int v11 = *(_DWORD *)(a3 + 8);
    int v12 = *(_DWORD *)(a4 + 8);
  }
  *(double *)a3 = v9;
  *(double *)a4 = v10;
  *(_DWORD *)(a3 + 8) = v12;
  *(_DWORD *)(a4 + 8) = v11;
  double v13 = *(double *)a3;
  double v14 = *(double *)a2;
  if (*(double *)a3 >= *(double *)a2)
  {
    if (v14 < v13) {
      return result;
    }
    int v16 = *(_DWORD *)(a3 + 8);
    int v15 = *(_DWORD *)(a2 + 8);
    if (v16 >= v15) {
      return result;
    }
  }
  else
  {
    int v15 = *(_DWORD *)(a2 + 8);
    int v16 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v13;
  *(double *)a3 = v14;
  *(_DWORD *)(a2 + 8) = v16;
  *(_DWORD *)(a3 + 8) = v15;
  double v17 = *(double *)a2;
  double v18 = *(double *)a1;
  if (*(double *)a2 < *(double *)a1)
  {
    int v19 = *(_DWORD *)(a1 + 8);
    int v20 = *(_DWORD *)(a2 + 8);
LABEL_15:
    *(double *)a1 = v17;
    *(double *)a2 = v18;
    *(_DWORD *)(a1 + 8) = v20;
    *(_DWORD *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    int v20 = *(_DWORD *)(a2 + 8);
    int v19 = *(_DWORD *)(a1 + 8);
    if (v20 < v19) {
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a2, a3, a4);
  double v11 = *(double *)a5;
  double v12 = *(double *)a4;
  if (*(double *)a5 >= *(double *)a4)
  {
    if (v12 < v11) {
      return result;
    }
    int v14 = *(_DWORD *)(a5 + 8);
    int v13 = *(_DWORD *)(a4 + 8);
    if (v14 >= v13) {
      return result;
    }
  }
  else
  {
    int v13 = *(_DWORD *)(a4 + 8);
    int v14 = *(_DWORD *)(a5 + 8);
  }
  *(double *)a4 = v11;
  *(double *)a5 = v12;
  *(_DWORD *)(a4 + 8) = v14;
  *(_DWORD *)(a5 + 8) = v13;
  double v15 = *(double *)a4;
  double v16 = *(double *)a3;
  if (*(double *)a4 >= *(double *)a3)
  {
    if (v16 < v15) {
      return result;
    }
    int v18 = *(_DWORD *)(a4 + 8);
    int v17 = *(_DWORD *)(a3 + 8);
    if (v18 >= v17) {
      return result;
    }
  }
  else
  {
    int v17 = *(_DWORD *)(a3 + 8);
    int v18 = *(_DWORD *)(a4 + 8);
  }
  *(double *)a3 = v15;
  *(double *)a4 = v16;
  *(_DWORD *)(a3 + 8) = v18;
  *(_DWORD *)(a4 + 8) = v17;
  double v19 = *(double *)a3;
  double v20 = *(double *)a2;
  if (*(double *)a3 >= *(double *)a2)
  {
    if (v20 < v19) {
      return result;
    }
    int v22 = *(_DWORD *)(a3 + 8);
    int v21 = *(_DWORD *)(a2 + 8);
    if (v22 >= v21) {
      return result;
    }
  }
  else
  {
    int v21 = *(_DWORD *)(a2 + 8);
    int v22 = *(_DWORD *)(a3 + 8);
  }
  *(double *)a2 = v19;
  *(double *)a3 = v20;
  *(_DWORD *)(a2 + 8) = v22;
  *(_DWORD *)(a3 + 8) = v21;
  double v23 = *(double *)a2;
  double v24 = *(double *)a1;
  if (*(double *)a2 < *(double *)a1)
  {
    int v25 = *(_DWORD *)(a1 + 8);
    int v26 = *(_DWORD *)(a2 + 8);
LABEL_9:
    *(double *)a1 = v23;
    *(double *)a2 = v24;
    *(_DWORD *)(a1 + 8) = v26;
    *(_DWORD *)(a2 + 8) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    int v26 = *(_DWORD *)(a2 + 8);
    int v25 = *(_DWORD *)(a1 + 8);
    if (v26 < v25) {
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,std::pair<double,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 16 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      while (1)
      {
        double v15 = *(double *)v14;
        double v16 = *(double *)a1;
        if (*(double *)v14 >= *(double *)a1)
        {
          if (v16 < v15) {
            goto LABEL_12;
          }
          int v17 = *(_DWORD *)(v14 + 8);
          int v18 = *(_DWORD *)(a1 + 8);
          if (v17 >= v18) {
            goto LABEL_12;
          }
        }
        else
        {
          int v17 = *(_DWORD *)(v14 + 8);
          int v18 = *(_DWORD *)(a1 + 8);
        }
        *(double *)uint64_t v14 = v16;
        *(double *)a1 = v15;
        *(_DWORD *)(v14 + 8) = v18;
        *(_DWORD *)(a1 + 8) = v17;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a4, v9, a1);
LABEL_12:
        v14 += 16;
        if (v14 == a3)
        {
          uint64_t v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 17)
    {
      uint64_t v19 = (unint64_t)v8 >> 4;
      uint64_t v20 = a2 - 16;
      do
      {
        double v21 = *(double *)a1;
        int v22 = *(_DWORD *)(a1 + 8);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, a4, v19);
        if (v20 == v23)
        {
          *(double *)uint64_t v23 = v21;
          *(_DWORD *)(v23 + 8) = v22;
        }
        else
        {
          *(void *)uint64_t v23 = *(void *)v20;
          *(_DWORD *)(v23 + 8) = *(_DWORD *)(v20 + 8);
          *(double *)uint64_t v20 = v21;
          *(_DWORD *)(v20 + 8) = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(a1, v23 + 16, a4, (v23 + 16 - a1) >> 4);
        }
        v20 -= 16;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = result + 16 * v7;
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        double v10 = *(double *)(v8 + 16);
        if (*(double *)v8 < v10 || v10 >= *(double *)v8 && *(_DWORD *)(result + 16 * v7 + 8) < *(_DWORD *)(v8 + 24))
        {
          v8 += 16;
          uint64_t v7 = v9;
        }
      }
      double v11 = *(double *)v8;
      double v12 = *(double *)a4;
      if (*(double *)v8 >= *(double *)a4)
      {
        if (v12 >= v11)
        {
          int v14 = *(_DWORD *)(v8 + 8);
          int v13 = *(_DWORD *)(a4 + 8);
          if (v14 < v13) {
            return result;
          }
        }
        else
        {
          int v13 = *(_DWORD *)(a4 + 8);
          int v14 = *(_DWORD *)(v8 + 8);
        }
        *(double *)a4 = v11;
        *(_DWORD *)(a4 + 8) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v15 = result + 16 * v7;
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              double v18 = *(double *)(v15 + 16);
              if (*(double *)v15 < v18
                || v18 >= *(double *)v15 && *(_DWORD *)(result + 16 * v7 + 8) < *(_DWORD *)(v15 + 24))
              {
                v15 += 16;
                uint64_t v7 = v17;
              }
            }
            double v19 = *(double *)v15;
            if (*(double *)v15 < v12) {
              break;
            }
            int v20 = *(_DWORD *)(v15 + 8);
            if (v12 >= v19 && v20 < v13) {
              break;
            }
            *(double *)uint64_t v8 = v19;
            *(_DWORD *)(v8 + 8) = v20;
            uint64_t v8 = v15;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v15 = v8;
LABEL_14:
        *(double *)uint64_t v15 = v12;
        *(_DWORD *)(v15 + 8) = v13;
      }
    }
  }
  return result;
}

double std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    uint64_t v7 = v3 + 1;
    a1 += 16 * (v3 + 1);
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      double v10 = *(double *)(a1 + 16);
      if (*(double *)a1 < v10 || v10 >= *(double *)a1 && *(_DWORD *)(v6 + 16 * v7 + 8) < *(_DWORD *)(a1 + 24))
      {
        a1 += 16;
        uint64_t v3 = v9;
      }
    }
    double result = *(double *)a1;
    *(void *)uint64_t v6 = *(void *)a1;
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(a1 + 8);
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = result + 16 * (v4 >> 1);
    double v7 = *(double *)v6;
    double v8 = *(double *)(a2 - 16);
    if (*(double *)v6 >= v8)
    {
      if (v8 < v7) {
        return result;
      }
      int v10 = *(_DWORD *)(result + 16 * v5 + 8);
      int v9 = *(_DWORD *)(a2 - 8);
      if (v10 >= v9) {
        return result;
      }
    }
    else
    {
      int v9 = *(_DWORD *)(a2 - 8);
      int v10 = *(_DWORD *)(v6 + 8);
    }
    *(double *)(a2 - 16) = v7;
    *(_DWORD *)(a2 - 8) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v12 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v11 = result + 16 * v5;
        double v13 = *(double *)v11;
        if (*(double *)v11 >= v8)
        {
          if (v8 < v13) {
            break;
          }
          int v14 = *(_DWORD *)(result + 16 * v5 + 8);
          if (v14 >= v9) {
            break;
          }
        }
        else
        {
          int v14 = *(_DWORD *)(v11 + 8);
        }
        *(double *)uint64_t v6 = v13;
        *(_DWORD *)(v6 + 8) = v14;
        uint64_t v6 = result + 16 * v5;
        if (v12 <= 1) {
          goto LABEL_13;
        }
      }
    }
    uint64_t v11 = v6;
LABEL_13:
    *(double *)uint64_t v11 = v8;
    *(_DWORD *)(v11 + 8) = v9;
  }
  return result;
}

void *std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::~__func(void *a1)
{
  *a1 = &unk_1F0A5C908;
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::~__func(void *a1)
{
  *a1 = &unk_1F0A5C908;
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x1B3EA8670);
}

void *std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F0A5C908;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B201670C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5C908;
  return std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

uint64_t std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::operator()(uint64_t a1, float *a2, float *a3)
{
  return std::function<float ()(float,float)>::operator()(a1 + 8, *a2, *a3);
}

uint64_t std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::AggByCol(int,std::function<float ()(float,float)>,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::target_type()
{
}

void *std::__function::__value_func<float ()(float,float)>::swap[abi:ne180100](void *result, void *a2)
{
  double v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B2016A68(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::~__func()
{
}

void *std::__function::__func<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F0A5C960;
  return result;
}

void std::__function::__func<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5C960;
}

float std::__function::__func<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::operator()(uint64_t a1, float *a2, uint64_t a3)
{
  float result = *a2;
  if (*a2 <= *(float *)a3) {
    return *(float *)a3;
  }
  return result;
}

uint64_t std::__function::__func<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MaxByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::target_type()
{
}

void std::__function::__func<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::~__func()
{
}

void *std::__function::__func<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1F0A5C9B8;
  return result;
}

void std::__function::__func<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5C9B8;
}

float std::__function::__func<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::operator()(uint64_t a1, float *a2, uint64_t a3)
{
  float result = *a2;
  if (*a2 >= *(float *)a3) {
    return *(float *)a3;
  }
  return result;
}

uint64_t std::__function::__func<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1},std::allocator<kaldi::MatrixBase<float>::MinByCol(int,BOOL)::{lambda(float,float)#1}>,float ()(float,float)>::target_type()
{
}

uint64_t quasar::SpeechRecognizer::getSysConfig(quasar::SpeechRecognizer *this)
{
  return *((void *)this + 6);
}

void quasar::SpeechRecognizer::GetSpeechModelInfo(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v8);
  memset(v7, 0, sizeof(v7));
  memset(v5, 0, sizeof(v5));
  int v6 = 1065353216;
  quasar::SystemConfig::readJsonFile((uint64_t)v8, a1, v7, (uint64_t)v5, 0, 1);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v5);
  *(void *)&v5[0] = v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
  SpeechModelInfo = (const quasar::SpeechModelInfo *)quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)v8);
  quasar::SpeechModelInfo::SpeechModelInfo(a2, SpeechModelInfo);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v8);
}

void sub_1B2016CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void quasar::SpeechRecognizer::make_shared()
{
}

void sub_1B2016DA0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C404C59BE1BLL);
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRecognizer::SpeechRecognizer(uint64_t a1, long long *a2, int a3, int a4, long long **a5, char a6, _WORD *a7)
{
  int v14 = quasar::SpeechRecognizerBase::SpeechRecognizerBase((void *)a1);
  v14[1] = 0;
  void v14[2] = 0;
  *(_OWORD *)(v14 + 3) = 0u;
  *int v14 = &unk_1F0A538F0;
  *(_OWORD *)(v14 + 5) = 0u;
  *(_OWORD *)(v14 + 7) = 0u;
  v14[9] = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v14 + 10), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v15 = *a2;
    v14[12] = *((void *)a2 + 2);
    *((_OWORD *)v14 + 5) = v15;
  }
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 104), *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  *(void *)(a1 + 136) = 850045863;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 1018212795;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 2++*(void *)(result + 24) = 0u;
  *(void *)(a1 + 240) = 0;
  uint64_t v16 = operator new(0x58uLL);
  v16[1] = 0;
  v16[2] = 0;
  *uint64_t v16 = &unk_1F0A62940;
  void v16[3] = 850045863;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  v16[10] = 0;
  *(void *)(a1 + 248) = v16 + 3;
  *(void *)(a1 + 256) = v16;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = a3;
  *(_DWORD *)(a1 + 300) = a4;
  *(void *)(a1 + 328) = 0;
  uint64_t v17 = operator new(0x20uLL);
  *uint64_t v17 = &unk_1F0A5A4F0;
  v17[1] = quasar::SpeechRecognizer::isRecogCancelled;
  v17[2] = 0;
  void v17[3] = a1;
  *(void *)(a1 + 328) = v17;
  *(unsigned char *)(a1 + 336) = a6;
  *(_WORD *)(a1 + 337) = *a7;
  *(void *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 4++*(void *)(result + 24) = 0;
  *(void *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 432) = 1;
  *(void *)(a1 + 440) = 850045863;
  *(_WORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 5--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 5--*(_DWORD *)(a9 + 84) = 0;
  *(_DWORD *)(a1 + 592) = 1065353216;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar21ConfusionNetworkCacheENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((void *)(a1 + 632));
  double v18 = (char *)operator new(0x198uLL);
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)double v18 = &unk_1F0A61408;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_OWORD *)(v18 + 120) = 0u;
  *(_OWORD *)(v18 + 136) = 0u;
  *(_OWORD *)(v18 + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)(v18 + 168) = 0u;
  *(_OWORD *)(v18 + 1--*(_DWORD *)(a9 + 84) = 0u;
  *(_OWORD *)(v18 + 200) = 0u;
  *(_OWORD *)(v18 + 216) = 0u;
  *(_OWORD *)(v18 + 232) = 0u;
  *(_OWORD *)(v18 + 248) = 0u;
  *(_OWORD *)(v18 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(v18 + 264) = 0u;
  *(_OWORD *)(v18 + 280) = 0u;
  *(_OWORD *)(v18 + 296) = 0u;
  *(_OWORD *)(v18 + 312) = 0u;
  *(_OWORD *)(v18 + 328) = 0u;
  *(_OWORD *)(v18 + 344) = 0u;
  *(_OWORD *)(v18 + 360) = 0u;
  *(_OWORD *)(v18 + 376) = 0u;
  *(_OWORD *)(v18 + 392) = 0u;
  quasar::SpeechRequestResultData::SpeechRequestResultData((quasar::SpeechRequestResultData *)(v18 + 24));
  *(void *)(a1 + 648) = v19;
  *(void *)(a1 + 656) = v18;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  return a1;
}

void sub_1B20170B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14)
{
  long long v15 = (std::__shared_weak_count *)*((void *)v14 + 9);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)v14 + 7);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  uint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 2);
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  quasar::Bitmap::~Bitmap(v14);
  _Unwind_Resume(a1);
}

void sub_1B2017214()
{
}

BOOL quasar::SpeechRecognizer::isRecogCancelled(quasar::SpeechRecognizer *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 136);
  std::mutex::lock((std::mutex *)((char *)this + 136));
  BOOL v3 = *((_DWORD *)this + 32) == 3;
  std::mutex::unlock(v2);
  return v3;
}

void std::condition_variable_any::~condition_variable_any(std::condition_variable_any *this)
{
  cntrl = this->__mut_.__cntrl_;
  if (cntrl) {
    std::__shared_weak_count::__release_shared[abi:ne180100](cntrl);
  }
  std::condition_variable::~condition_variable(&this->__cv_);
}

void quasar::SpeechRecognizer::~SpeechRecognizer(quasar::SpeechRecognizer *this)
{
  *(void *)this = &unk_1F0A538F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 90);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 88);
  *((void *)this + 88) = 0;
  if (v3) {
    std::default_delete<quasar::QsrTextSymbolTable>::operator()[abi:ne180100]((uint64_t)this + 704, v3);
  }
  unint64_t v4 = (void *)*((void *)this + 85);
  if (v4)
  {
    *((void *)this + 86) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 84);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 82);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  double v7 = (std::__shared_weak_count *)*((void *)this + 80);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  double v8 = (std::__shared_weak_count *)*((void *)this + 78);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  int v9 = (std::__shared_weak_count *)*((void *)this + 76);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::~__hash_table((uint64_t)this + 560);
  double v18 = (void **)((char *)this + 536);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v18);
  int v10 = (std::__shared_weak_count *)*((void *)this + 65);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = *((void *)this + 63);
  *((void *)this + 63) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 440));
  double v18 = (void **)((char *)this + 408);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v18);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 368);
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)this + 38);
  unint64_t v12 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  double v13 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  int v14 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 200));
  std::mutex::~mutex((std::mutex *)((char *)this + 136));
  double v18 = (void **)((char *)this + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  long long v15 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  double v18 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  quasar::SpeechRecognizer::~SpeechRecognizer(this);
  JUMPOUT(0x1B3EA8670);
}

std::string *quasar::SpeechRecognizer::AddConfigOverride(uint64_t a1, unsigned __int8 *a2, const std::string *a3)
{
  if (*(_DWORD *)(a1 + 128)) {
    BOOL v6 = quasar::gLogLevel < 4;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"AddConfigOverride() can only be called before init()", 52);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v9);
  }
  *(void *)&v9[0] = a2;
  double v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 368, a2, (uint64_t)&std::piecewise_construct, (long long **)v9);
  return std::string::operator=((std::string *)(v7 + 40), a3);
}

void sub_1B2017568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::SpeechRecognizer::init(quasar::SpeechRecognizer *this)
{
  quasar::SpeechRecognizerActiveConfiguration::all(v2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  quasar::SpeechRecognizer::init();
}

void sub_1B2017600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char *a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  quasar::SpeechRecognizerActiveConfiguration::~SpeechRecognizerActiveConfiguration(&a18);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::init()
{
}

void sub_1B2017FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,long long __p,long long a22,long long a23,long long a24)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v25 - 160, *(void **)(v25 - 152));
  uint64_t v28 = *(void *)(v25 - 136);
  *(void *)(v25 - 136) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  if (a2 == 3)
  {
    uint64_t v29 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      uint64_t v30 = v29;
      v24[15] = 0u;
      v24[16] = 0u;
      v24[13] = 0u;
      v24[14] = 0u;
      v24[11] = 0u;
      v24[12] = 0u;
      v24[9] = 0u;
      v24[10] = 0u;
      v24[7] = 0u;
      v24[8] = 0u;
      v24[5] = 0u;
      v24[6] = 0u;
      void v24[4] = 0u;
      a23 = 0u;
      a24 = 0u;
      std::string __p = 0u;
      a22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error reading JSON config file: ", 32);
      uint64_t v32 = (const char *)(*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
      size_t v33 = strlen(v32);
      uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v34);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
  }
  else
  {
    if (a2 != 2)
    {
      if (a2 != 1) {
        _Unwind_Resume(a1);
      }
      __cxa_begin_catch(a1);
      __cxa_end_catch();
LABEL_14:
      JUMPOUT(0x1B2017E1CLL);
    }
    uint64_t v35 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      int v36 = v35;
      v24[15] = 0u;
      v24[16] = 0u;
      v24[13] = 0u;
      v24[14] = 0u;
      v24[11] = 0u;
      v24[12] = 0u;
      v24[9] = 0u;
      v24[10] = 0u;
      v24[7] = 0u;
      v24[8] = 0u;
      v24[5] = 0u;
      v24[6] = 0u;
      void v24[4] = 0u;
      a23 = 0u;
      a24 = 0u;
      std::string __p = 0u;
      a22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      int v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error reading JSON config file: ", 32);
      uint64_t v38 = (const char *)(*(uint64_t (**)(void *))(*(void *)v36 + 16))(v36);
      size_t v39 = strlen(v38);
      std::string::size_type v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v40);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
  }
  __cxa_end_catch();
  goto LABEL_14;
}

double quasar::SpeakerCodeTrainingConfig::registerParams(quasar::SpeakerCodeTrainingConfig *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "training-nnet-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Training neural network path");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this, (uint64_t)__p, 1, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "max-feature-cache-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max feature cache size for training");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 64, (uint64_t)__p, 1, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "learning-rate");
  std::string::basic_string[abi:ne180100]<0>(__p, "Learning rate of the training");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 52, (uint64_t)__p, 1, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "training-nnet-version");
  std::string::basic_string[abi:ne180100]<0>(__p, "Training neural network version");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 48, (uint64_t)__p, 1, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "generic-speaker-code");
  std::string::basic_string[abi:ne180100]<0>(__p, "Generic speaker code");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 24, (uint64_t)__p, 1, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "initialize-option");
  std::string::basic_string[abi:ne180100]<0>(__p, "Options to initialize training speaker code, 1 is generic speaker code, 2 is all-zeros");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 68, (uint64_t)__p, 1, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "recognition-interval");
  std::string::basic_string[abi:ne180100]<0>(__p, "The threshold to apply trained speaker code in recognition");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 72, (uint64_t)__p, 1, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "supported-tasks");
  std::string::basic_string[abi:ne180100]<0>(__p, "Supported tasks for training. Only the configured tasks will run training at the end of recognition");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 96, (uint64_t)__p, 0, 216, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "update-interval");
  std::string::basic_string[abi:ne180100]<0>(__p, "The interval which will be used for updating the speaker code for training, default is 64");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 56, (uint64_t)__p, 0, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Training mini batch size, default is 1");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 60, (uint64_t)__p, 0, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "enable-continuous-training");
  std::string::basic_string[abi:ne180100]<0>(__p, "The flag to enable continuous training, default is false");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 80, (uint64_t)__p, 0, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "initial-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Speaker code dimension. As speaker code is one-dimentional vector, it's also the number of rows");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 76, (uint64_t)__p, 0, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "confidence-threshold");
  std::string::basic_string[abi:ne180100]<0>(__p, "If average confidence of all tokens is below the threshold, the utterance will be dropped, default is 0");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 84, (uint64_t)__p, 0, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "silence-frame-ratio");
  std::string::basic_string[abi:ne180100]<0>(__p, "The ratio of silence frames, num(silence_frame) = min(ratio * num(valid_speech_frame), num(silence_frame)), default is 0");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 88, (uint64_t)__p, 0, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "update-inference");
  std::string::basic_string[abi:ne180100]<0>(__p, "If it is true, the inference speaker code used in recognition will be updated in training, otherwise inference speaker code is always the generic one, default is false");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 81, (uint64_t)__p, 0, 204, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  *(void *)&double result = 0x100000040;
  *((void *)this + 7) = 0x100000040;
  return result;
}

void sub_1B2018A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SpeakerCodeTrainingConfig::init(quasar::SpeakerCodeTrainingConfig *this)
{
  std::allocate_shared[abi:ne180100]<quasar::SpeakerCodeTraining,std::allocator<quasar::SpeakerCodeTraining>,std::string &,std::string &,unsigned int &,float &,unsigned int &,unsigned int &,unsigned int &,BOOL &,BOOL &,unsigned int &,unsigned int &,std::string &,void>((long long *)this, (long long *)((char *)this + 24), (int *)this + 12, (float *)this + 13, (unsigned int *)this + 15, (unsigned int *)this + 14, (int *)this + 18, &v4, (std::string::value_type *)this + 81, (char *)this + 80, (int *)this + 17, (int *)this + 19, (long long *)this + 6);
  long long v2 = v4;
  long long v4 = 0uLL;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  *(_OWORD *)((char *)this + 120) = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (*((void *)&v4 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
    }
  }
}

void quasar::MuxHelper::registerParams(quasar::MuxHelper *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "shared-tags");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "sanitizer-special-chars-pattern");
  std::string::basic_string[abi:ne180100]<0>(__p, "Override pattern for TextSanitizer mSpecialChars.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 40, (uint64_t)__p, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B2018C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::MuxHelper::init(quasar::MuxHelper *this)
{
  if (quasar::gLogLevel >= 6)
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    long long v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sharedTags: ", 12);
    v5[0] = (uint64_t)" ";
    v5[1] = 1;
    quasar::join<std::unordered_set<std::string>>((uint64_t)this, v5);
    if ((v7 & 0x80u) == 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    if ((v7 & 0x80u) == 0) {
      uint64_t v4 = v7;
    }
    else {
      uint64_t v4 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
    if ((char)v7 < 0) {
      operator delete(__p[0]);
    }
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v8);
  }
  operator new();
}

void sub_1B2018DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a18);
  _Unwind_Resume(a1);
}

void sub_1B2018E24(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20)
{
  MEMORY[0x1B3EA8670](v20, 0x10A1C40FE5546BCLL);
  if (a2 == 1)
  {
    uint64_t v25 = __cxa_begin_catch(a1);
    if (*v22 >= 2)
    {
      int v26 = v25;
      v21[15] = 0u;
      unsigned char v21[16] = 0u;
      v21[13] = 0u;
      v21[14] = 0u;
      v21[11] = 0u;
      v21[12] = 0u;
      v21[9] = 0u;
      v21[10] = 0u;
      v21[7] = 0u;
      v21[8] = 0u;
      v21[6] = 0u;
      a19 = 0u;
      a20 = 0u;
      a17 = 0u;
      a18 = 0u;
      a15 = 0u;
      a16 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a15);
      int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a15, (uint64_t)"Text sanitizer initialization failed ", 37);
      uint64_t v28 = (const char *)(*(uint64_t (**)(void *))(*(void *)v26 + 16))(v26);
      size_t v29 = strlen(v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a15);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B2018DDCLL);
  }
  JUMPOUT(0x1B2018E1CLL);
}

void sub_1B2018F08()
{
}

uint64_t quasar::SpeechRecognizer::getActiveConfiguration(quasar::SpeechRecognizer *this)
{
  uint64_t v1 = *((void *)this + 8);
  if (!v1)
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "getActiveConfiguration called before init.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  return v1 + 24;
}

void quasar::SpeechRecognizer::setActiveConfiguration(quasar::SpeechRecognizer *this, const quasar::SpeechRecognizerActiveConfiguration *a2)
{
  if (*((void *)this + 8))
  {
    uint64_t v4 = (std::mutex *)((char *)this + 136);
    std::mutex::lock((std::mutex *)((char *)this + 136));
    if (*((_DWORD *)this + 32) == 1)
    {
      std::mutex::unlock(v4);
      quasar::SpeechRecognizerModelLoader::setActiveConfiguration(*((void *)this + 8), (uint64_t)a2);
    }
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Cannot call setActiveConfiguration while recognition is running.", 64);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v5);
  }
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v5);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(&v5, "setActiveConfiguration called before init.");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v5);
}

void sub_1B20190DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::runAsync(uint64_t a1, std::string **a2, uint64_t a3)
{
  *(void *)&long long v51 = quasar::Location::fromSharedFuture((std::__assoc_sub_state **)&(*a2)->__r_.__value_.__r.__words[2]);
  *((void *)&v51 + 1) = v6;
  std::mutex::lock((std::mutex *)(a1 + 136));
  if (*(_DWORD *)(a1 + 128) != 1)
  {
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"SpeechRecognizer must be in initialized state before you call runAsync(). ", 74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Hint: Make sure you call waitForAsyncRecogToFinish() before calling runAsync() again.", 85);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  long long v7 = *a2;
  if ((*a2)[1].__r_.__value_.__s.__data_[12])
  {
    if (v7[2].__r_.__value_.__s.__data_[0] && !v7[1].__r_.__value_.__s.__data_[13])
    {
      if (v7[26].__r_.__value_.__s.__data_[0]) {
        char v8 = 0;
      }
      else {
        char v8 = v7[26].__r_.__value_.__s.__data_[1] == 0;
      }
      quasar::RunAsyncParams::setSkipEagerWrite((uint64_t)v7, v8);
      long long v7 = *a2;
    }
  }
  else if (v7[1].__r_.__value_.__s.__data_[13])
  {
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Utterance concatenation should only be used with utterance detection", 68);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  *(unsigned char *)(a1 + 529) = 0;
  if (v7[26].__r_.__value_.__s.__data_[0])
  {
    uint64_t v9 = *(void *)(a1 + 512);
    if (v9)
    {
      std::string::basic_string[abi:ne180100]<0>(v32, "\\NT-edit");
      quasar::SystemConfig::aceCatToQuasarTemplate(v9 + 192, (uint64_t)v32, (std::string *)&__p);
      BOOL isSupportedCategory = quasar::LmeDataFactory::isSupportedCategory(v9, (uint64_t)&__p, 1);
      if (SBYTE7(v35) < 0) {
        operator delete((void *)__p);
      }
      if ((v33 & 0x80000000) == 0)
      {
        if (!isSupportedCategory) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      operator delete(v32[0]);
      if (isSupportedCategory) {
LABEL_17:
      }
        *(unsigned char *)(a1 + 529) = 1;
    }
  }
LABEL_18:
  LOBYTE(v32[0]) = 1;
  LOBYTE(v27) = 1;
  std::allocate_shared[abi:ne180100]<kaldi::Timer,std::allocator<kaldi::Timer>,BOOL,BOOL,void>(v32, (unsigned __int8 *)&v27, &v31);
  if ((*a2)[1].__r_.__value_.__s.__data_[12]) {
    int v11 = -1;
  }
  else {
    int v11 = *(_DWORD *)(a1 + 300);
  }
  int v29 = *(_DWORD *)(a1 + 300);
  int v30 = v11;
  int v28 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 1544) + 48);
  quasar::ConfusionNetworkCache::clear(*(quasar::ConfusionNetworkCache **)(a1 + 632));
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar26MultiChainMultiAudioBufferENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
  long long v12 = (const void ***)(a1 + 264);
  long long v13 = __p;
  long long __p = 0uLL;
  long long v14 = *(std::__shared_weak_count **)(a1 + 272);
  *(_OWORD *)(a1 + 264) = v13;
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    if (*((void *)&__p + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
    }
  }
  quasar::SpeechRecognizerModelLoader::lookupRecognizers(*(void *)(a1 + 64), LODWORD((*a2)[1].__r_.__value_.__l.__data_), (unsigned __int8 **)&(*a2)[3].__r_.__value_.__l.__size_, (std::string *)((char *)*a2 + 152), (*a2)[1].__r_.__value_.__s.__data_[10], (*a2)[30].__r_.__value_.__s.__data_[19], *a2 + 27, *a2 + 28, (uint64_t *)v32, *a2 + 29);
  if (v32[0] != v32[1])
  {
    LOBYTE(v52[0]) = *((unsigned char *)v32[0] + 17);
    std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,unsigned int &,int &,int &,BOOL &,std::string &,std::shared_ptr<kaldi::Timer> &,int &,BOOL &,unsigned int const&,void>((uint64_t)&v24, (int *)&(*a2)[1], &v30, (int *)(*a2)[1].__r_.__value_.__r.__words + 1, (unsigned __int8 *)&(*a2)[1].__r_.__value_.__s.__data_[8], (long long *)&(*a2)[5].__r_.__value_.__r.__words[1], &v31, &v29, (char *)v52, &v28);
  }
  quasar::MultiChainMultiAudioBuffer::getPrimaryBuffer(*v12, &__p);
  uint64_t v15 = __p;
  if (*((void *)&__p + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
  }
  if (v15)
  {
    char v26 = 0;
    long long v16 = *a2;
    long long v17 = (const void *)(*a2)->__r_.__value_.__r.__words[0];
    if (v17
    {
      std::string::size_type size = (std::__shared_weak_count *)v16->__r_.__value_.__l.__size_;
      if (size)
      {
        atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](size);
      }
      char v26 = 1;
    }
    quasar::MultiChainMultiAudioBuffer::getPrimaryBuffer(*v12, &v24);
    LmeDataStreams = (int **)quasar::RunAsyncParams::getLmeDataStreams((quasar::RunAsyncParams *)*a2);
    quasar::LmeDataStreams::getLmeStreams(LmeDataStreams, (uint64_t *)&__p);
    LOBYTE(v52[0]) = 1;
    std::allocate_shared[abi:ne180100]<quasar::SpeechRequestData,std::allocator<quasar::SpeechRequestData>,std::shared_ptr<quasar::RunAsyncParams> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> &,std::shared_ptr<quasar::MultiAudioBuffer>,std::vector<std::shared_ptr<quasar::LmeContainer>> const,quasar::Location &,std::shared_ptr<kaldi::Timer> &,BOOL &,BOOL,void>(a2, (void *)(a1 + 264), &v24, (void **)&__p, &v51, &v31, &v26, &v27, (char *)v52);
    long long v20 = v27;
    long long v27 = 0uLL;
    long long v21 = *(std::__shared_weak_count **)(a1 + 288);
    *(_OWORD *)(a1 + 280) = v20;
    if (v21)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      if (*((void *)&v27 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
      }
    }
    v52[0] = (void **)&__p;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v52);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    *(_DWORD *)(a1 + 128) = 2;
    *(void *)(a1 + 688) = *(void *)(a1 + 680);
    std::shared_ptr<quasar::SpeechRecognizer>::shared_ptr[abi:ne180100]<quasar::SpeechRecognizer,void>(&v27, (void *)(a1 + 8));
    if (a3) {
      operator new();
    }
    if (*((void *)&v27 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    operator new();
  }
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"No primary buffer was set! ", 27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Hint: If multiple decoder chains are active, one of them should do system combination.", 86);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
}

void sub_1B20198A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  JUMPOUT(0x1B20199B8);
}

void sub_1B20198D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a33);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  long long v36 = (void **)&v35;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v36);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  JUMPOUT(0x1B20199B8);
}

void sub_1B20198F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t *a33)
{
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SpeechRecognizer::runAsync(std::shared_ptr<quasar::RunAsyncParams> const&,void (*)(void *,void (*)(void *),void *),void *)::$_1>>::~unique_ptr[abi:ne180100](&a33);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  long long v36 = (void **)&v35;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v36);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  JUMPOUT(0x1B20199B8);
}

void sub_1B2019908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  *(void *)(v18 - 104) = v17;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 104));
  if (!a17) {
    JUMPOUT(0x1B201999CLL);
  }
  JUMPOUT(0x1B2019998);
}

void sub_1B2019924()
{
}

void sub_1B2019934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::mutex *a15)
{
}

void sub_1B2019950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (!a34) {
    JUMPOUT(0x1B201999CLL);
  }
  JUMPOUT(0x1B2019998);
}

void sub_1B2019984()
{
}

void quasar::SpeechRecognizer::dispatchRunSyncAndMarkEndOfRun(quasar::SpeechRecognizer **this, void *a2)
{
  long long v2 = *this;
  *this = 0;
  this[1] = 0;
  MEMORY[0x1B3EA8670]();
  quasar::SpeechRecognizer::runSyncAndMarkEndOfRun(v2);
}

void sub_1B2019A2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizer::updateLmeProfile(quasar::SpeechRecognizer *this, int **a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 440);
  std::mutex::lock((std::mutex *)((char *)this + 440));
  quasar::LmeDataStreams::getLmeStreams(a2, (uint64_t *)&v5);
  if ((uint64_t **)((char *)this + 408) != &v5) {
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>((uint64_t)this + 408, v5, v6, ((char *)v6 - (char *)v5) >> 4);
  }
  long long v7 = (void **)&v5;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v7);
  *((unsigned char *)this + 432) = 1;
  std::mutex::unlock(v4);
}

void sub_1B2019AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::waitForAsyncRecogToFinish(quasar::SpeechRecognizer *this)
{
  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 136);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 136));
  while ((*((_DWORD *)this + 32) - 2) <= 2)
    std::condition_variable_any::wait<std::unique_lock<std::mutex>>((uint64_t)this + 200, &v2);
  if (v2.__owns_) {
    std::mutex::unlock(v2.__m_);
  }
}

void sub_1B2019B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void std::condition_variable_any::wait<std::unique_lock<std::mutex>>(uint64_t a1, std::unique_lock<std::mutex> *a2)
{
  long long v5 = *(std::mutex **)(a1 + 48);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v6.__m_ = v5;
  v6.__owns_ = 1;
  std::mutex::lock(v5);
  std::unique_lock<std::mutex>::unlock(a2);
  std::condition_variable::wait((std::condition_variable *)a1, &v6);
  std::unique_lock<std::mutex>::unlock(&v6);
  std::unique_lock<std::mutex>::lock(a2);
  if (v6.__owns_) {
    std::mutex::unlock(v6.__m_);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1B2019C2C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::cancelAsyncRecognition(quasar::SpeechRecognizer *this)
{
  std::unique_lock<std::mutex> v2 = (std::mutex *)((char *)this + 136);
  std::mutex::lock((std::mutex *)((char *)this + 136));
  if (*((_DWORD *)this + 32) >= 2u)
  {
    if (quasar::gLogLevel >= 4)
    {
      memset(v3, 0, sizeof(v3));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Cancelling recognition", 22);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v3);
    }
    (*(void (**)(void))(**((void **)this + 33) + 32))(*((void *)this + 33));
    *((_DWORD *)this + 32) = 3;
    std::mutex::unlock(v2);
    (*(void (**)(quasar::SpeechRecognizer *))(*(void *)this + 32))(this);
  }
  else
  {
    std::mutex::unlock(v2);
  }
}

void sub_1B2019D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::markEndOfRunAsyncThread(quasar::SpeechRecognizer *this)
{
  std::unique_lock<std::mutex> v2 = (std::mutex *)((char *)this + 136);
  std::mutex::lock((std::mutex *)((char *)this + 136));
  if ((*((_DWORD *)this + 32) - 2) >= 3)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"This function can only be called in Recognizing or Cancelling state", 67);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 34);
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *((_DWORD *)this + 32) = 1;
  long long v5 = (std::mutex *)*((void *)this + 31);
  std::mutex::lock(v5);
  std::mutex::unlock(v5);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 200));
  std::mutex::unlock(v2);
}

void sub_1B2019EB8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::runSyncAndMarkEndOfRun(quasar::SpeechRecognizer *this)
{
  std::unique_lock<std::mutex> v2 = operator new(0x30uLL);
  _OWORD v2[2] = 0;
  v2[1] = 0;
  void v2[3] = 0;
  *std::unique_lock<std::mutex> v2 = &unk_1F0A60090;
  v2[4] = 0;
  v2[5] = 0;
  v6[0] = (uint64_t)(v2 + 3);
  v6[1] = (uint64_t)v2;
  atomic_fetch_add_explicit(v2 + 1, 1uLL, memory_order_relaxed);
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  quasar::SpeechRecognizer::runSync((uint64_t)this, (uint64_t *)this + 35, v6);
}

void sub_1B2019F90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::runSync(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  long long v7 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v6;
  *(void *)(a1 + 288) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  v10[0] = v8;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  quasar::SpeechRecognizer::runSync(a1, (uint64_t)v10);
}

void sub_1B201A2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1B201A2EC(_Unwind_Exception *a1)
{
}

void sub_1B201A308(_Unwind_Exception *a1)
{
}

void sub_1B201A328(uint64_t a1, std::__shared_weak_count *a2, ...)
{
  va_start(va, a2);
  if (a2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a2);
  }
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)va);
  JUMPOUT(0x1B201A340);
}

void quasar::SpeechRecognizer::getRecogStats(uint64_t a1, uint64_t **a2, uint64_t **a3, void *a4, void *a5)
{
  std::atomic_load[abi:ne180100]<quasar::SpeechRequestResultData>((void *)(a1 + 648), &v9);
  quasar::SpeechRequestResultData::getAALogData(v9, a2, a3, a4, a5);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1B201A3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::atomic_load[abi:ne180100]<quasar::SpeechRequestResultData>(void *a1@<X0>, void *a2@<X8>)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = a1[1];
  *a2 = *a1;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::__sp_mut::unlock(sp_mut);
}

void quasar::SpeechRecognizer::requestEagerResult(quasar::SpeechRecognizer *this, int a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 136);
  std::mutex::lock((std::mutex *)((char *)this + 136));
  if (*((_DWORD *)this + 32) == 2)
  {
    uint64_t v5 = *((void *)this + 35);
    uint64_t v6 = *(unsigned char **)(v5 + 24);
    if (v6[36] && !v6[37])
    {
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v8 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Improper use of API: requestEagerResult does not work with Dictation use case", 77);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
    }
    if (v6[48]) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = quasar::gLogLevel < 5;
    }
    if (!v7)
    {
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v8 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Eager disabled: not supported by model or client did not opt-in eager generation", 80);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v8);
      uint64_t v5 = *((void *)this + 35);
    }
    quasar::SpeechRequestData::addRequestEagerResultDurations((std::mutex *)v5, a2);
  }
  std::mutex::unlock(v4);
}

void sub_1B201A570(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::getUttInfos(quasar::SpeechRecognizer *this@<X0>, void *a2@<X8>)
{
  std::atomic_load[abi:ne180100]<quasar::SpeechRequestResultData>((void *)this + 81, &v3);
  quasar::SpeechRequestResultData::getUttInfos((std::mutex *)v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1B201A5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizer::dumpResultLog(quasar::SpeechRecognizer *this, int a2)
{
  v47[0] = 0;
  v47[1] = 0;
  long long v46 = v47;
  std::string::basic_string[abi:ne180100]<0>(__p, "PM-input");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v46, (const void **)__p, (uint64_t)__p);
  if (SBYTE7(v26) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "PM-output");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v46, (const void **)__p, (uint64_t)__p);
  if (SBYTE7(v26) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "finalResultTokens");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v46, (const void **)__p, (uint64_t)__p);
  if (SBYTE7(v26) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "finalResultTokensV2");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v46, (const void **)__p, (uint64_t)__p);
  if (SBYTE7(v26) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sessionId");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v46, (const void **)__p, (uint64_t)__p);
  if (SBYTE7(v26) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "userId");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v46, (const void **)__p, (uint64_t)__p);
  if (SBYTE7(v26) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rescoringDeliberationResultOriginalTranscript");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v46, (const void **)__p, (uint64_t)__p);
  if (SBYTE7(v26) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rescoringDeliberationResultModifiedTranscript");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v46, (const void **)__p, (uint64_t)__p);
  if (SBYTE7(v26) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = *((void *)this + 81);
  std::string::basic_string[abi:ne180100]<0>(__p, "isFinal");
  std::to_string(&v42, a2);
  quasar::SpeechRequestResultData::addDump(v4, (long long *)__p, &v42);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v26) < 0) {
    operator delete(__p[0]);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v42);
  quasar::SpeechRequestResultData::getDumpData(*((std::mutex **)this + 81), (std::vector<std::pair<std::string, std::string>> *)__p);
  uint64_t v5 = (uint64_t *)__p[0];
  for (unint64_t i = (uint64_t *)__p[1]; v5 != i; v5 += 6)
  {
    if (!quasar::gHideSensitiveData
      || v47 == (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v46, (const void **)v5))
    {
      int v13 = *((char *)v5 + 23);
      if (v13 >= 0) {
        uint64_t v14 = (uint64_t)v5;
      }
      else {
        uint64_t v14 = *v5;
      }
      if (v13 >= 0) {
        uint64_t v15 = *((unsigned __int8 *)v5 + 23);
      }
      else {
        uint64_t v15 = v5[1];
      }
      long long v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, v14, v15);
      long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"=", 1);
      int v18 = *((char *)v5 + 47);
      if (v18 >= 0) {
        uint64_t v19 = (uint64_t)(v5 + 3);
      }
      else {
        uint64_t v19 = v5[3];
      }
      if (v18 >= 0) {
        uint64_t v20 = *((unsigned __int8 *)v5 + 47);
      }
      else {
        uint64_t v20 = v5[4];
      }
      long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    }
    else
    {
      int v7 = *((char *)v5 + 23);
      if (v7 >= 0) {
        uint64_t v8 = (uint64_t)v5;
      }
      else {
        uint64_t v8 = *v5;
      }
      if (v7 >= 0) {
        uint64_t v9 = *((unsigned __int8 *)v5 + 23);
      }
      else {
        uint64_t v9 = v5[1];
      }
      long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, v8, v9);
      long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"=", 1);
      long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"xxx", 3);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
  }
  v23[0] = __p;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  if (quasar::gLogLevel > 2)
  {
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    *(_OWORD *)long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::stringbuf::str();
    if ((v24 & 0x80u) == 0) {
      long long v21 = v23;
    }
    else {
      long long v21 = (void **)v23[0];
    }
    if ((v24 & 0x80u) == 0) {
      uint64_t v22 = v24;
    }
    else {
      uint64_t v22 = (uint64_t)v23[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v21, v22);
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
    quasar::QuasarProdInfoMessage::~QuasarProdInfoMessage((quasar::QuasarProdInfoMessage *)__p);
  }
  v42.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA418];
  *(std::string::size_type *)((char *)v42.__r_.__value_.__r.__words + *(void *)(v42.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v42.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
  if (v44 < 0) {
    operator delete(v43);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](&v45);
  std::__tree<std::string>::destroy((uint64_t)&v46, v47[0]);
}

void sub_1B201AAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  quasar::QuasarProdInfoMessage::~QuasarProdInfoMessage((quasar::QuasarProdInfoMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a53);
  std::__tree<std::string>::destroy(v58 - 88, *(char **)(v58 - 80));
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRecognizer::dumpModelVirtualMemoryInfo(quasar::SystemConfig **this)
{
  uint64_t v1 = *(quasar::ModelLoader **)quasar::SystemConfig::getModelLoaderPtr(this[6]);
  return quasar::ModelLoader::dumpInCoreStats(v1);
}

void quasar::SpeechRecognizer::createFeatChain(quasar::SpeechRequestData **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 88);
  if (v8 == v9)
  {
    char v11 = 0;
LABEL_13:
    char v17 = 0;
    goto LABEL_14;
  }
  uint64_t v10 = v8 + 16;
  do
  {
    char v11 = (*(uint64_t (**)(void))(**(void **)(v10 - 16) + 56))(*(void *)(v10 - 16));
    if (v11) {
      break;
    }
    BOOL v12 = v10 == v9;
    v10 += 16;
  }
  while (!v12);
  uint64_t v13 = *(void *)(a2 + 8);
  uint64_t v14 = *(void *)(v13 + 80);
  uint64_t v15 = *(void *)(v13 + 88);
  if (v14 == v15) {
    goto LABEL_13;
  }
  uint64_t v16 = v14 + 16;
  do
  {
    char v17 = (*(uint64_t (**)(void))(**(void **)(v16 - 16) + 64))(*(void *)(v16 - 16));
    if (v17) {
      break;
    }
    BOOL v12 = v16 == v15;
    v16 += 16;
  }
  while (!v12);
LABEL_14:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  int v18 = *a1;
  uint64_t v19 = *((void *)*a1 + 3);
  int v20 = *(_DWORD *)(v19 + 24);
  LOBYTE(v19) = *(unsigned char *)(v19 + 51);
  LODWORD(v118) = v20;
  uint64_t v119 = 0;
  char v120 = v19;
  int v125 = 0;
  char v126 = 0;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v123 = 0u;
  memset(v124, 0, sizeof(v124));
  long long v127 = 0u;
  memset(&v128, 0, sizeof(v128));
  char v129 = 1;
  Locatiouint64_t n = quasar::SpeechRequestData::getLocation(v18);
  if (*(void *)Location) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)Location + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v119 = *(void *)Location;
  uint64_t v23 = *(void *)(a2 + 144);
  uint64_t v22 = *(void *)(a2 + 152);
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v24 = (std::__shared_weak_count *)*((void *)&v122 + 1);
  *(void *)&long long v122 = v23;
  *((void *)&v122 + 1) = v22;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  int v125 = *(_DWORD *)(a2 + 208);
  uint64_t v26 = *(void *)(a2 + 160);
  uint64_t v25 = *(void *)(a2 + 168);
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  long long v27 = (std::__shared_weak_count *)*((void *)&v123 + 1);
  *(void *)&long long v123 = v26;
  *((void *)&v123 + 1) = v25;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v28 = *((void *)*a1 + 3);
  uint64_t v30 = *(void *)(v28 + 320);
  uint64_t v29 = *(void *)(v28 + 328);
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  long long v31 = (std::__shared_weak_count *)*((void *)&v121 + 1);
  *(void *)&long long v121 = v30;
  *((void *)&v121 + 1) = v29;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  LmeDataStreams = (uint64_t **)quasar::SpeechRequestData::getLmeDataStreams(*a1);
  if (v124 != (unsigned char *)LmeDataStreams) {
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>((uint64_t)v124, *LmeDataStreams, LmeDataStreams[1], ((char *)LmeDataStreams[1] - (char *)*LmeDataStreams) >> 4);
  }
  uint64_t v33 = *((void *)*a1 + 3);
  uint64_t v34 = *(void *)(v33 + 720);
  uint64_t v35 = *(void *)(v33 + 728);
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  long long v36 = *(std::__shared_weak_count **)&v124[32];
  *(void *)&v124[24] = v34;
  *(void *)&v124[32] = v35;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  long long v37 = (uint64_t *)*((void *)*a1 + 3);
  char v126 = *((unsigned char *)v37 + 736);
  if (*((unsigned char *)v37 + 53)) {
    char v38 = 0;
  }
  else {
    char v38 = v11;
  }
  char v129 = v38;
  uint64_t v39 = *v37;
  uint64_t v41 = *(void *)(v39 + 8);
  uint64_t v40 = *(void *)(v39 + 16);
  if (v40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v42 = (std::__shared_weak_count *)*((void *)&v127 + 1);
  *(void *)&long long v127 = v41;
  *((void *)&v127 + 1) = v40;
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  std::string::operator=(&v128, (const std::string *)(*((void *)*a1 + 3) + 80));
  long long v43 = *(void **)(a2 + 8);
  char v44 = (void *)v43[5];
  if (v44 == (void *)v43[6])
  {
    long long v46 = 0;
    uint64_t v45 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    long long v46 = 0;
    do
    {
      long long v47 = (const void *)*v44;
      if (*v44) {
        char v48 = v17;
      }
      else {
        char v48 = 1;
      }
      if ((v48 & 1) != 0
      {
        quasar::MultiAudioBuffer::getBuffer(*((void *)*a1 + 18), 0, &v107);
        if ((void)v107) {
          uint64_t v50 = v107 + 16;
        }
        else {
          uint64_t v50 = 0;
        }
        unint64_t v105 = v46;
        uint64_t v106 = v45;
        if (v45) {
          atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        quasar::FeatureExtractor::createOnlineFeInput((uint64_t)v47, v50, (uint64_t *)&v105);
        long long v51 = (_OWORD *)a4[1];
        unint64_t v52 = a4[2];
        if ((unint64_t)v51 >= v52)
        {
          uint64_t v53 = ((uint64_t)v51 - *a4) >> 4;
          unint64_t v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v55 = v52 - *a4;
          if (v55 >> 3 > v54) {
            unint64_t v54 = v55 >> 3;
          }
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v54;
          }
          *(void *)&v108[2] = a4 + 2;
          int v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a4 + 2), v56);
          uint64_t v58 = &v57[16 * v53];
          *(void *)&v108[0] = v57;
          *((void *)&v108[0] + 1) = v58;
          *((void *)&v108[1] + 1) = &v57[16 * v59];
          *(_OWORD *)uint64_t v58 = v130;
          long long v130 = 0uLL;
          *(void *)&v108[1] = v58 + 16;
          std::vector<std::shared_ptr<kaldi::OnlineFeatInputItf>>::__swap_out_circular_buffer(a4, v108);
          uint64_t v60 = a4[1];
          std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)v108);
          uint64_t v61 = (std::__shared_weak_count *)*((void *)&v130 + 1);
          a4[1] = v60;
          if (v61) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          }
        }
        else
        {
          *long long v51 = v130;
          long long v130 = 0uLL;
          a4[1] = (uint64_t)(v51 + 1);
        }
        if (v106) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v106);
        }
        if (*((void *)&v107 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v107 + 1));
        }
        uint64_t v62 = a4[1];
        long long v46 = *(const void **)(v62 - 16);
        int v63 = *(std::__shared_weak_count **)(v62 - 8);
        if (v63) {
          atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
        if (v46
        {
          if (v63)
          {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v63);
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v64 = *(std::__shared_weak_count **)(a2 + 56);
          *(void *)(a2 + 48) = v46;
          *(void *)(a2 + 56) = v63;
          if (v64) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v64);
          }
        }
        if ((*(unsigned int (**)(void))(*(void *)*v44 + 16))())
        {
          *(void *)&long long v107 = v46;
          std::allocate_shared[abi:ne180100]<kaldi::OnlineBufferingInput,std::allocator<kaldi::OnlineBufferingInput>,kaldi::OnlineFeatInputItf *,void>((kaldi::OnlineFeatInputItf **)&v107, &v130);
          long long v65 = v130;
          long long v130 = 0uLL;
          uint64_t v67 = (_OWORD *)a4[1];
          unint64_t v66 = a4[2];
          if ((unint64_t)v67 >= v66)
          {
            long long v100 = v65;
            uint64_t v69 = ((uint64_t)v67 - *a4) >> 4;
            if ((unint64_t)(v69 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v70 = v66 - *a4;
            uint64_t v71 = v70 >> 3;
            if (v70 >> 3 <= (unint64_t)(v69 + 1)) {
              uint64_t v71 = v69 + 1;
            }
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v72 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v72 = v71;
            }
            *(void *)&v108[2] = a4 + 2;
            char v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a4 + 2), v72);
            uint64_t v74 = &v73[16 * v69];
            *(void *)&v108[0] = v73;
            *((void *)&v108[0] + 1) = v74;
            *((void *)&v108[1] + 1) = &v73[16 * v75];
            *(_OWORD *)uint64_t v74 = v100;
            *(void *)&v108[1] = v74 + 16;
            std::vector<std::shared_ptr<kaldi::OnlineFeatInputItf>>::__swap_out_circular_buffer(a4, v108);
            uint64_t v68 = (_OWORD *)a4[1];
            std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)v108);
            long long v76 = (std::__shared_weak_count *)*((void *)&v130 + 1);
            a4[1] = (uint64_t)v68;
            if (v76)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v76);
              uint64_t v68 = (_OWORD *)a4[1];
            }
          }
          else
          {
            *uint64_t v67 = v65;
            uint64_t v68 = v67 + 1;
            a4[1] = (uint64_t)v68;
          }
          long long v46 = (const void *)*((void *)v68 - 2);
          uint64_t v45 = (std::__shared_weak_count *)*((void *)v68 - 1);
          if (v45) {
            atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v63) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v63);
          }
        }
        else
        {
          uint64_t v45 = v63;
        }
      }
      else
      {
        long long v49 = (std::__shared_weak_count *)v44[1];
        if (v49)
        {
          atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        }
        if (quasar::gLogLevel >= 5)
        {
          long long v116 = 0u;
          long long v117 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          long long v112 = 0u;
          long long v113 = 0u;
          long long v110 = 0u;
          long long v111 = 0u;
          long long v109 = 0u;
          memset(v108, 0, sizeof(v108));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v108);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"Skipping CacheInput since it's not required", 43);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v108);
        }
      }
      v44 += 2;
      long long v43 = *(void **)(a2 + 8);
    }
    while (v44 != (void *)v43[6]);
  }
  uint64_t v77 = v43[10];
  uint64_t v78 = v43[11];
  if (v77 != v78)
  {
    while (((*(uint64_t (**)(void))(**(void **)v77 + 48))() & 1) == 0)
    {
      v77 += 16;
      if (v77 == v78) {
        goto LABEL_126;
      }
    }
    std::allocate_shared[abi:ne180100]<quasar::OnlineCacheInputFe,std::allocator<quasar::OnlineCacheInputFe>,char const(&)[6],void>("cache", v108);
    long long v79 = v108[0];
    v108[0] = 0uLL;
    uint64_t v80 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v79;
    if (v80)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v80);
      if (*((void *)&v108[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v108[0] + 1));
      }
    }
    quasar::FeatureExtractor::init(*a3);
    uint64_t v81 = *a3;
    quasar::MultiAudioBuffer::getBuffer(*((void *)*a1 + 18), 0, &v103);
    uint64_t v82 = v103;
    int v101 = v46;
    BOOL v102 = v45;
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v108[0]) = *(_DWORD *)(*((void *)*a1 + 3) + 24);
    *((void *)&v108[0] + 1) = 0;
    LOBYTE(v108[1]) = 0;
    DWORD1(v108[7]) = 0;
    BYTE8(v108[7]) = 0;
    memset((char *)&v108[1] + 8, 0, 80);
    *(_OWORD *)((char *)&v108[6] + 1) = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    *(void *)&long long v111 = 0;
    BYTE8(v111) = 1;
    if (v82) {
      uint64_t v83 = v82 + 16;
    }
    else {
      uint64_t v83 = 0;
    }
    quasar::FeatureExtractor::createOnlineFeInput(v81, v83, (uint64_t *)&v101);
    unint64_t v84 = a4[2];
    long long v85 = (_OWORD *)a4[1];
    if ((unint64_t)v85 >= v84)
    {
      uint64_t v86 = ((uint64_t)v85 - *a4) >> 4;
      unint64_t v87 = v86 + 1;
      if ((unint64_t)(v86 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v88 = v84 - *a4;
      if (v88 >> 3 > v87) {
        unint64_t v87 = v88 >> 3;
      }
      if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v89 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v89 = v87;
      }
      uint64_t v133 = a4 + 2;
      long long v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a4 + 2), v89);
      long long v91 = &v90[16 * v86];
      *(void *)&long long v130 = v90;
      *((void *)&v130 + 1) = v91;
      v132 = &v90[16 * v92];
      *(_OWORD *)long long v91 = v107;
      long long v107 = 0uLL;
      char v131 = v91 + 16;
      std::vector<std::shared_ptr<kaldi::OnlineFeatInputItf>>::__swap_out_circular_buffer(a4, &v130);
      uint64_t v93 = a4[1];
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v130);
      long long v94 = (std::__shared_weak_count *)*((void *)&v107 + 1);
      a4[1] = v93;
      if (v94) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v94);
      }
    }
    else
    {
      *long long v85 = v107;
      long long v107 = 0uLL;
      a4[1] = (uint64_t)(v85 + 1);
    }
    quasar::FeatureExtractorArgs::~FeatureExtractorArgs((void **)v108);
    if (v102) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v102);
    }
    if (v104) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v104);
    }
  }
LABEL_126:
  uint64_t v95 = a4[1];
  uint64_t v97 = *(void *)(v95 - 16);
  uint64_t v96 = *(void *)(v95 - 8);
  if (v96) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v96 + 8), 1uLL, memory_order_relaxed);
  }
  long long v98 = *(std::__shared_weak_count **)(a2 + 72);
  *(void *)(a2 + 64) = v97;
  *(void *)(a2 + 72) = v96;
  if (v98) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v98);
  }
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs(&v118);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
}

void sub_1B201B4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)(v56 - 144));
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs(&a21);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs(&a55);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::runSync(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(*(void *)(a1 + 280) + 24);
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = (char *)operator new(0x198uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = &unk_1F0A61408;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 1--*(_DWORD *)(a9 + 84) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  quasar::SpeechRequestResultData::SpeechRequestResultData((quasar::SpeechRequestResultData *)(v5 + 24));
  uint64_t v39 = v6;
  uint64_t v40 = (std::__shared_weak_count *)v5;
  std::atomic_store[abi:ne180100]<quasar::SpeechRequestResultData>((uint64_t *)(a1 + 648), &v39);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  uint64_t v7 = **(void **)(*(void *)(a1 + 280) + 24);
  uint64_t v8 = *(void *)(a1 + 648);
  uint64_t v9 = *(void *)(a1 + 656);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a1 + 280;
  char v11 = *(std::__shared_weak_count **)(v7 + 16);
  *(void *)(v7 + 8) = v8;
  *(void *)(v7 + 16) = v9;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v12 = *(void *)(**(void **)(*(void *)v10 + 24) + 8);
  std::string::basic_string[abi:ne180100]<0>(&v22, "geoLocationStatusUponRunAsync");
  quasar::Location::statusAsString((quasar::Location *)(*(void *)v10 + 184), &__p);
  quasar::SpeechRequestResultData::addDumpAA(v12, &v22, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v23) < 0) {
    operator delete((void *)v22);
  }
  std::mutex::lock((std::mutex *)(a1 + 440));
  uint64_t v13 = *(void *)(a1 + 280);
  if (a1 + 408 != v13 + 160) {
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>(a1 + 408, *(uint64_t **)(v13 + 160), *(uint64_t **)(v13 + 168), (uint64_t)(*(void *)(v13 + 168) - *(void *)(v13 + 160)) >> 4);
  }
  *(unsigned char *)(a1 + 432) = 0;
  if (*(void *)(a1 + 536) == *(void *)(a1 + 544)) {
    *(unsigned char *)(a1 + 528) = 0;
  }
  std::mutex::unlock((std::mutex *)(a1 + 440));
  uint64_t v14 = *(void *)(a1 + 280);
  *(_DWORD *)(v14 + 16) = *(_DWORD *)(a1 + 296);
  uint64_t v15 = *(void *)(v14 + 24);
  uint64_t v16 = (uint64_t *)(v15 + 80);
  int v17 = *(char *)(v15 + 103);
  if (v17 < 0)
  {
    if (*(void *)(v15 + 88) != 10) {
      goto LABEL_26;
    }
    uint64_t v16 = (uint64_t *)*v16;
  }
  else if (v17 != 10)
  {
    goto LABEL_26;
  }
  int v18 = (uint64_t *)*v16;
  int v19 = *((unsigned __int16 *)v16 + 4);
  if (v18 == (uint64_t *)0x696E6F6974706143 && v19 == 26478) {
    *(_DWORD *)(v14 + 16) = 1;
  }
LABEL_26:
  if (**(void **)a2 == *(void *)(*(void *)a2 + 8))
  {
    kaldi::Srand((kaldi *)0x2A);
    quasar::SpeechRecognizer::RecogData::RecogData((quasar::SpeechRecognizer::RecogData *)&__p);
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(&v22, "Symbol table list passed to runSync() must start empty");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v22);
}

void sub_1B201C6CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13)
{
}

void sub_1B201C6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a67 = (void **)&a31;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&a67);
  quasar::SpeechRecognizer::RecogData::~RecogData((quasar::SpeechRecognizer::RecogData *)&a34);
  _Unwind_Resume(a1);
}

void sub_1B201C700()
{
}

void sub_1B201C718()
{
}

void sub_1B201C720()
{
  if (v0) {
    JUMPOUT(0x1B201C878);
  }
  JUMPOUT(0x1B201C87CLL);
}

void sub_1B201C730()
{
}

void sub_1B201C738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a73 < 0) {
    operator delete(a70);
  }
  JUMPOUT(0x1B201C8A0);
}

void sub_1B201C768()
{
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 128);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1B201C8A0);
}

void sub_1B201C7A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::mutex::unlock(a13);
  JUMPOUT(0x1B201C804);
}

void sub_1B201C7C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a14 = (void **)&a67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  JUMPOUT(0x1B201C804);
}

void sub_1B201C7EC()
{
}

void sub_1B201C800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  a70 = (void **)&a34;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&a70);
  quasar::SpeechRecognizer::RecogData::~RecogData((quasar::SpeechRecognizer::RecogData *)&a37);
  _Unwind_Resume(a1);
}

void sub_1B201C810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a70);
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  JUMPOUT(0x1B201C888);
}

void sub_1B201C820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a70);
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  JUMPOUT(0x1B201C888);
}

void sub_1B201C838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (v33) {
    JUMPOUT(0x1B201C844);
  }
  if (a23) {
    ((void (*)(void))std::__shared_weak_count::__release_shared[abi:ne180100])();
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  JUMPOUT(0x1B201C888);
}

void std::atomic_store[abi:ne180100]<quasar::SpeechRequestResultData>(uint64_t *a1, uint64_t *a2)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;
  std::__sp_mut::unlock(sp_mut);
}

void quasar::SpeechRecognizer::runSyncUtterance(uint64_t a1, void *a2, std::vector<std::wstring> *a3, unsigned __int8 *a4)
{
  uint64_t v311 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1 + 128))
  {
    long long v282 = 0u;
    long long v283 = 0u;
    long long v280 = 0u;
    long long v281 = 0u;
    long long v278 = 0u;
    long long v279 = 0u;
    long long v276 = 0u;
    long long v277 = 0u;
    long long v274 = 0u;
    long long v275 = 0u;
    long long v272 = 0u;
    long long v273 = 0u;
    long long v270 = 0u;
    long long v271 = 0u;
    long long v268 = 0u;
    long long v269 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "SpeechRecognizer must be initialized before calling runSync()");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  if (*(void *)*a2 != *(void *)(*a2 + 8))
  {
    long long v282 = 0u;
    long long v283 = 0u;
    long long v280 = 0u;
    long long v281 = 0u;
    long long v278 = 0u;
    long long v279 = 0u;
    long long v276 = 0u;
    long long v277 = 0u;
    long long v274 = 0u;
    long long v275 = 0u;
    long long v272 = 0u;
    long long v273 = 0u;
    long long v270 = 0u;
    long long v271 = 0u;
    long long v268 = 0u;
    long long v269 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "Symbol table list passed to runSyncUtterance() must start empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  uint64_t v7 = *(double **)(*(void *)(a1 + 280) + 200);
  *(double *)(a1 + 344) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)a2) - *v7;
  *(double *)(a1 + 3--*(_DWORD *)(a9 + 52) = kaldi::Timer::ElapsedCPU(*(kaldi::Timer **)(*(void *)(a1 + 280) + 200), v8);
  uint64_t v9 = *(void *)(*(void *)(a1 + 280) + 200);
  *(double *)(a1 + 360) = kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v10) - *(double *)(v9 + 16);
  char v11 = (const void *)*((void *)a4 + 30);
  if (v11
  {
    uint64_t v13 = (std::__shared_weak_count *)*((void *)a4 + 31);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    quasar::ResultStreamStabilizer::prepareForNextUtterance(v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  v212 = v13;
  int v14 = (*(uint64_t (**)(void))(**(void **)(*((void *)a4 + 10) + 16) + 24))(*(void *)(*((void *)a4 + 10) + 16));
  uint64_t v15 = *(_DWORD **)(a1 + 280);
  v15[1] = *((_DWORD *)a4 + 50);
  int v16 = *((_DWORD *)a4 + 51);
  void v15[2] = v16;
  void v15[3] = v16 * v14;
  *uint64_t v15 = 1000 * *(_DWORD *)(a1 + 300);
  uint64_t v17 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "uttNum");
  std::to_string((std::string *)v294, *((_DWORD *)a4 + 50));
  quasar::SpeechRequestResultData::addDump(v17, &__p, (const std::string *)v294);
  if ((v294[23] & 0x80000000) != 0) {
    operator delete(*(void **)v294);
  }
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v18 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "jsonConfigFilePath");
  quasar::SpeechRequestResultData::addDump(v18, &__p, (const std::string *)(a1 + 80));
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v19 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "modelVersion");
  quasar::SystemConfig::getMainModelVersion(*(quasar::SystemConfig **)(a1 + 48), (std::string *)v294);
  quasar::SpeechRequestResultData::addDump(v19, &__p, (const std::string *)v294);
  if ((v294[23] & 0x80000000) != 0) {
    operator delete(*(void **)v294);
  }
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v20 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "userId");
  long long v21 = (quasar::SpeechRequestData **)(a1 + 280);
  quasar::SpeechRequestResultData::addDump(v20, &__p, (const std::string *)(*(void *)(*(void *)(a1 + 280) + 24) + 104));
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v22 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sessionId");
  quasar::SpeechRequestResultData::addDump(v22, &__p, (const std::string *)(*((void *)*v21 + 3) + 128));
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v23 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "taskType");
  quasar::SpeechRequestResultData::addDump(v23, &__p, (const std::string *)(*((void *)*v21 + 3) + 80));
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v24 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "deviceId");
  quasar::SpeechRequestResultData::addDump(v24, &__p, (const std::string *)(*((void *)*v21 + 3) + 152));
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v25 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "recognizerComponents");
  quasar::SpeechRequestResultData::addDump(v25, &__p, (const std::string *)(*((void *)a4 + 1) + 104));
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v26 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "farField");
  std::to_string((std::string *)v294, *(unsigned __int8 *)(*((void *)*v21 + 3) + 34));
  quasar::SpeechRequestResultData::addDump(v26, &__p, (const std::string *)v294);
  if ((v294[23] & 0x80000000) != 0) {
    operator delete(*(void **)v294);
  }
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v27 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "bluetoothDeviceId");
  quasar::SpeechRequestResultData::addDumpAA(v27, &__p, (const std::string *)(*((void *)*v21 + 3) + 200));
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v28 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "atypicalSpeech");
  std::to_string((std::string *)v294, *(unsigned __int8 *)(*((void *)*v21 + 3) + 739));
  quasar::SpeechRequestResultData::addDumpAA(v28, &__p, (const std::string *)v294);
  if ((v294[23] & 0x80000000) != 0) {
    operator delete(*(void **)v294);
  }
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v29 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "enableWhisperDetection");
  std::to_string((std::string *)v294, *(unsigned __int8 *)(*((void *)*v21 + 3) + 35));
  quasar::SpeechRequestResultData::addDump(v29, &__p, (const std::string *)v294);
  if ((v294[23] & 0x80000000) != 0) {
    operator delete(*(void **)v294);
  }
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v30 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "numLmeDataStreams");
  quasar::SpeechRequestResultData::addDumpAA(v30, &__p, 1, (double)(unint64_t)((uint64_t)(*((void *)*v21 + 21) - *((void *)*v21 + 20)) >> 4));
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v31 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "utteranceDetection");
  double v32 = 0.0;
  if (*(unsigned char *)(*((void *)*v21 + 3) + 36)) {
    double v32 = 1.0;
  }
  quasar::SpeechRequestResultData::addDumpAA(v31, &__p, 1, v32);
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v33 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "utteranceConcatenation");
  std::to_string((std::string *)v294, *(unsigned __int8 *)(*((void *)*v21 + 3) + 37));
  quasar::SpeechRequestResultData::addDump(v33, &__p, (const std::string *)v294);
  if ((v294[23] & 0x80000000) != 0) {
    operator delete(*(void **)v294);
  }
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v34 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "epExtraDelay");
  int EndPointerExtraDelay = quasar::SpeechRequestData::getEndPointerExtraDelay(*v21);
  std::to_string((std::string *)v294, EndPointerExtraDelay);
  quasar::SpeechRequestResultData::addDump(v34, &__p, (const std::string *)v294);
  if ((v294[23] & 0x80000000) != 0) {
    operator delete(*(void **)v294);
  }
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v36 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "InputOrigin");
  InputOrigiuint64_t n = (const std::string *)quasar::SpeechRequestData::getInputOrigin(*v21);
  quasar::SpeechRequestResultData::addDumpAA(v36, &__p, InputOrigin);
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v38 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "highPriority");
  std::to_string((std::string *)v294, *(unsigned __int8 *)(*((void *)*v21 + 3) + 51));
  quasar::SpeechRequestResultData::addDump(v38, &__p, (const std::string *)v294);
  if ((v294[23] & 0x80000000) != 0) {
    operator delete(*(void **)v294);
  }
  v213 = (quasar::SystemConfig **)(a1 + 48);
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v282 = 0u;
    long long v283 = 0u;
    long long v280 = 0u;
    long long v281 = 0u;
    long long v278 = 0u;
    long long v279 = 0u;
    long long v276 = 0u;
    long long v277 = 0u;
    long long v274 = 0u;
    long long v275 = 0u;
    long long v272 = 0u;
    long long v273 = 0u;
    long long v270 = 0u;
    long long v271 = 0u;
    long long v268 = 0u;
    long long v269 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"modelVersion=", 13);
    quasar::SystemConfig::getMainModelVersion(*v213, (std::string *)v294);
    if (v294[23] >= 0) {
      uint64_t v40 = v294;
    }
    else {
      uint64_t v40 = *(unsigned char **)v294;
    }
    if (v294[23] >= 0) {
      uint64_t v41 = v294[23];
    }
    else {
      uint64_t v41 = *(void *)&v294[8];
    }
    std::string v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" LME DataStreams=", 17);
    long long v43 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" samplingRate=", 14);
    char v44 = (void *)std::ostream::operator<<();
    uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" taskType=", 10);
    uint64_t v46 = *((void *)*v21 + 3);
    uint64_t v49 = *(void *)(v46 + 80);
    uint64_t v47 = v46 + 80;
    uint64_t v48 = v49;
    int v50 = *(char *)(v47 + 23);
    if (v50 >= 0) {
      uint64_t v51 = v47;
    }
    else {
      uint64_t v51 = v48;
    }
    if (v50 >= 0) {
      uint64_t v52 = *(unsigned __int8 *)(v47 + 23);
    }
    else {
      uint64_t v52 = *(void *)(v47 + 8);
    }
    uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v51, v52);
    unint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" deviceId=", 10);
    uint64_t v55 = *((void *)*v21 + 3);
    uint64_t v58 = *(void *)(v55 + 152);
    uint64_t v56 = v55 + 152;
    uint64_t v57 = v58;
    int v59 = *(char *)(v56 + 23);
    if (v59 >= 0) {
      uint64_t v60 = v56;
    }
    else {
      uint64_t v60 = v57;
    }
    if (v59 >= 0) {
      uint64_t v61 = *(unsigned __int8 *)(v56 + 23);
    }
    else {
      uint64_t v61 = *(void *)(v56 + 8);
    }
    uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v60, v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" farField=", 10);
    int v63 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" enableWhisperDetection=", 24);
    uint64_t v64 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" endpointerExtraDelay=", 22);
    quasar::SpeechRequestData::getEndPointerExtraDelay(*v21);
    long long v65 = (void *)std::ostream::operator<<();
    unint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" inputOrigin=", 13);
    uint64_t v67 = quasar::SpeechRequestData::getInputOrigin(*v21);
    int v68 = *(char *)(v67 + 23);
    if (v68 >= 0) {
      uint64_t v69 = v67;
    }
    else {
      uint64_t v69 = *(void *)v67;
    }
    if (v68 >= 0) {
      uint64_t v70 = *(unsigned __int8 *)(v67 + 23);
    }
    else {
      uint64_t v70 = *(void *)(v67 + 8);
    }
    uint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, v69, v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" highPriority=", 14);
    unint64_t v72 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" utteranceStartMillis=", 22);
    char v73 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v73 + *(void *)(*v73 - 24)));
    uint64_t v74 = std::locale::use_facet(&v288, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 10);
    std::locale::~locale(&v288);
    std::ostream::put();
    std::ostream::flush();
    if ((v294[23] & 0x80000000) != 0) {
      operator delete(*(void **)v294);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  }
  uint64_t v75 = *((void *)*v21 + 3);
  if ((*(char *)(v75 + 199) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v75 + 199)) {
      goto LABEL_97;
    }
LABEL_95:
    if (quasar::gLogLevel >= 4)
    {
      long long v282 = 0u;
      long long v283 = 0u;
      long long v280 = 0u;
      long long v281 = 0u;
      long long v278 = 0u;
      long long v279 = 0u;
      long long v276 = 0u;
      long long v277 = 0u;
      long long v274 = 0u;
      long long v275 = 0u;
      long long v272 = 0u;
      long long v273 = 0u;
      long long v270 = 0u;
      long long v271 = 0u;
      long long v268 = 0u;
      long long v269 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      long long v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"You have provided a reference transcript, which will trigger error-blaming (if specified in ", 92);
      uint64_t v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"the config file). This is an EXPERIMENTAL feature that uses lots of memory and incurs lots of ", 94);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"latency!", 8);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    goto LABEL_97;
  }
  if (*(void *)(v75 + 184)) {
    goto LABEL_95;
  }
LABEL_97:
  uint64_t v78 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "runSync:initTime");
  long long v79 = (double *)*((void *)*v21 + 25);
  double Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v80);
  std::to_string((std::string *)v294, Seconds - *v79 - *(double *)(a1 + 344));
  quasar::SpeechRequestResultData::addDump(v78, &__p, (const std::string *)v294);
  if ((v294[23] & 0x80000000) != 0) {
    operator delete(*(void **)v294);
  }
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v82 = *(uint64_t **)(*((void *)a4 + 1) + 88);
  uint64_t v83 = -(uint64_t)v82;
  while (1)
  {
    unint64_t v84 = v82;
    uint64_t v85 = v83;
    if (v82 == *(uint64_t **)(*((void *)a4 + 1) + 80)) {
      break;
    }
    v82 -= 2;
    int v86 = (*(uint64_t (**)(void))(*(void *)*(v84 - 2) + 72))(*(v84 - 2));
    uint64_t v83 = v85 + 16;
    if (v86)
    {
      unint64_t v87 = *(uint64_t **)(*((void *)a4 + 1) + 80);
      goto LABEL_106;
    }
  }
  unint64_t v87 = v82;
LABEL_106:
  if (v84 == v87)
  {
    long long v282 = 0u;
    long long v283 = 0u;
    long long v280 = 0u;
    long long v281 = 0u;
    long long v278 = 0u;
    long long v279 = 0u;
    long long v276 = 0u;
    long long v277 = 0u;
    long long v274 = 0u;
    long long v275 = 0u;
    long long v272 = 0u;
    long long v273 = 0u;
    long long v270 = 0u;
    long long v271 = 0u;
    long long v268 = 0u;
    long long v269 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"There is no decoder which affects recognition, this must be a configuration error.", 82);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  unint64_t v89 = (kaldi::quasar::Vocab *)*v87;
  uint64_t v88 = (std::__shared_weak_count *)v87[1];
  if (v88)
  {
    atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v87 = *(uint64_t **)(*((void *)a4 + 1) + 80);
  }
  v211 = v88;
  v289 = 0;
  v288.__locale_ = 0;
  uint64_t v290 = 0;
  std::vector<std::shared_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<quasar::Decoder> const*>,std::__wrap_iter<std::shared_ptr<quasar::Decoder> const*>>(&v288, v87 + 2, (void *)-v85, (-16 - ((uint64_t)v87 + v85)) >> 4);
  uint64_t v90 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "eagerRequested");
  std::to_string((std::string *)v294, *(unsigned __int8 *)(*((void *)*v21 + 3) + 48));
  quasar::SpeechRequestResultData::addDump(v90, &__p, (const std::string *)v294);
  if ((v294[23] & 0x80000000) != 0) {
    operator delete(*(void **)v294);
  }
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v214 = a1;
  if (*(unsigned char *)(*((void *)*v21 + 3) + 48))
  {
    if ((*(uint64_t (**)(kaldi::quasar::Vocab *))(*(void *)v89 + 80))(v89))
    {
      if (!*(unsigned char *)(*((void *)*v21 + 3) + 48)
        || !(*(unsigned int (**)(kaldi::quasar::Vocab *))(*(void *)v89 + 88))(v89)
        || ((*(uint64_t (**)(void))(**((void **)a4 + 12) + 56))(*((void *)a4 + 12)) & 1) != 0)
      {
        goto LABEL_136;
      }
      if (quasar::gLogLevel < 4) {
        goto LABEL_135;
      }
      long long v282 = 0u;
      long long v283 = 0u;
      long long v280 = 0u;
      long long v281 = 0u;
      long long v278 = 0u;
      long long v279 = 0u;
      long long v276 = 0u;
      long long v277 = 0u;
      long long v274 = 0u;
      long long v275 = 0u;
      long long v272 = 0u;
      long long v273 = 0u;
      long long v270 = 0u;
      long long v271 = 0u;
      long long v268 = 0u;
      long long v269 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      long long v91 = v89;
      uint64_t v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Eager disabled: silence posterior required but not available: ", 62);
      kaldi::quasar::Vocab::OOvWord(v89, (std::string *)v294);
      if (v294[23] >= 0) {
        uint64_t v93 = v294;
      }
      else {
        uint64_t v93 = *(unsigned char **)v294;
      }
      if (v294[23] >= 0) {
        uint64_t v94 = v294[23];
      }
      else {
        uint64_t v94 = *(void *)&v294[8];
      }
    }
    else
    {
      if (quasar::gLogLevel < 4)
      {
LABEL_135:
        *(unsigned char *)(*((void *)*v21 + 3) + 48) = 0;
        goto LABEL_136;
      }
      long long v282 = 0u;
      long long v283 = 0u;
      long long v280 = 0u;
      long long v281 = 0u;
      long long v278 = 0u;
      long long v279 = 0u;
      long long v276 = 0u;
      long long v277 = 0u;
      long long v274 = 0u;
      long long v275 = 0u;
      long long v272 = 0u;
      long long v273 = 0u;
      long long v270 = 0u;
      long long v271 = 0u;
      long long v268 = 0u;
      long long v269 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      long long v91 = v89;
      uint64_t v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Eager disabled: not supported by first-pass decoder: ", 53);
      kaldi::quasar::Vocab::OOvWord(v89, (std::string *)v294);
      if (v294[23] >= 0) {
        uint64_t v93 = v294;
      }
      else {
        uint64_t v93 = *(unsigned char **)v294;
      }
      if (v294[23] >= 0) {
        uint64_t v94 = v294[23];
      }
      else {
        uint64_t v94 = *(void *)&v294[8];
      }
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v93, v94);
    unint64_t v89 = v91;
    if ((v294[23] & 0x80000000) != 0) {
      operator delete(*(void **)v294);
    }
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    goto LABEL_135;
  }
LABEL_136:
  locale = (kaldi::quasar::Vocab **)v288.__locale_;
  uint64_t v96 = (kaldi::quasar::Vocab **)v289;
  while (locale != v96)
  {
    if (*(unsigned char *)(*((void *)*v21 + 3) + 48) && ((*(uint64_t (**)(void))(*(void *)*locale + 80))() & 1) == 0)
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v282 = 0u;
        long long v283 = 0u;
        long long v280 = 0u;
        long long v281 = 0u;
        long long v278 = 0u;
        long long v279 = 0u;
        long long v276 = 0u;
        long long v277 = 0u;
        long long v274 = 0u;
        long long v275 = 0u;
        long long v272 = 0u;
        long long v273 = 0u;
        long long v270 = 0u;
        long long v271 = 0u;
        long long v268 = 0u;
        long long v269 = 0u;
        long long __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        uint64_t v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Eager disabled: not supported by second-pass decoder: ", 54);
        kaldi::quasar::Vocab::OOvWord(*locale, (std::string *)v294);
        if (v294[23] >= 0) {
          long long v98 = v294;
        }
        else {
          long long v98 = *(unsigned char **)v294;
        }
        if (v294[23] >= 0) {
          uint64_t v99 = v294[23];
        }
        else {
          uint64_t v99 = *(void *)&v294[8];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v98, v99);
        if ((v294[23] & 0x80000000) != 0) {
          operator delete(*(void **)v294);
        }
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
      }
      *(unsigned char *)(*((void *)*v21 + 3) + 48) = 0;
      break;
    }
    locale += 2;
  }
  uint64_t v210 = (uint64_t)v89;
  uint64_t v100 = *(void *)(v214 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "eagerUsed");
  std::to_string((std::string *)v294, *(unsigned __int8 *)(*((void *)*v21 + 3) + 48));
  quasar::SpeechRequestResultData::addDump(v100, &__p, (const std::string *)v294);
  if ((v294[23] & 0x80000000) != 0) {
    operator delete(*(void **)v294);
  }
  if (SBYTE7(v268) < 0) {
    operator delete((void *)__p);
  }
  *(unsigned char *)(*(void *)(v214 + 648) + 116) = *(unsigned char *)(*(void *)(*(void *)(v214 + 280) + 24) + 48);
  v286 = 0;
  v285 = 0;
  unint64_t v287 = 0;
  int v101 = v288.__locale_;
  BOOL v102 = v289;
  if (v288.__locale_ != v289)
  {
    uint64_t v103 = 0;
    do
    {
      long long v215 = *(_OWORD *)v101;
      uint64_t v104 = *((void *)v101 + 1);
      if (v104) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)v101 + 1) + 16), 1uLL, memory_order_relaxed);
      }
      if ((unint64_t)v103 >= v287)
      {
        uint64_t v105 = (v103 - v285) >> 4;
        if ((unint64_t)(v105 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v106 = (uint64_t)(v287 - (void)v285) >> 3;
        if (v106 <= v105 + 1) {
          unint64_t v106 = v105 + 1;
        }
        if (v287 - (unint64_t)v285 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v107 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v107 = v106;
        }
        *(void *)&long long v269 = &v287;
        unsigned int v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v287, v107);
        long long v109 = &v108[16 * v105];
        *(void *)&long long __p = v108;
        *((void *)&__p + 1) = v109;
        *((void *)&v268 + 1) = &v108[16 * v110];
        *(_OWORD *)long long v109 = v215;
        *(void *)&long long v268 = v109 + 16;
        std::vector<std::weak_ptr<quasar::Decoder>>::__swap_out_circular_buffer((uint64_t *)&v285, &__p);
        uint64_t v103 = v286;
        std::__split_buffer<std::weak_ptr<quasar::Decoder>>::~__split_buffer((void **)&__p);
      }
      else
      {
        *(void *)uint64_t v103 = v215;
        *((void *)v103 + 1) = v104;
        v103 += 16;
      }
      v286 = v103;
      int v101 = (std::locale::__imp *)((char *)v101 + 16);
    }
    while (v101 != v102);
  }
  long long v111 = *(quasar::MultiChainMultiAudioBuffer **)(v214 + 264);
  if (v111 && *((_DWORD *)a4 + 50)) {
    quasar::MultiChainMultiAudioBuffer::synchronizeSecondaryBuffersToPrimary(v111);
  }
  uint64_t v112 = quasar::SpeechRequestData::getInputOrigin(*v21);
  int v113 = *(char *)(v112 + 23);
  if (v113 < 0)
  {
    if (*(void *)(v112 + 8) != 12) {
      goto LABEL_182;
    }
    uint64_t v112 = *(void *)v112;
  }
  else if (v113 != 12)
  {
    goto LABEL_182;
  }
  BOOL v114 = *(void *)v112 == 0x6972546563696F56 && *(_DWORD *)(v112 + 8) == 1919248231;
  if (v114)
  {
    char v118 = 1;
    goto LABEL_195;
  }
LABEL_182:
  uint64_t v115 = quasar::SpeechRequestData::getInputOrigin(*v21);
  int v116 = *(char *)(v115 + 23);
  if (v116 < 0)
  {
    if (*(void *)(v115 + 8) != 12)
    {
LABEL_193:
      char v118 = 0;
      goto LABEL_195;
    }
    uint64_t v115 = *(void *)v115;
  }
  else if (v116 != 12)
  {
    goto LABEL_193;
  }
  char v118 = *(void *)v115 == 0x536F546573696152 && *(_DWORD *)(v115 + 8) == 1801545072;
LABEL_195:
  uint64_t v119 = (std::__shared_weak_count *)*((void *)a4 + 7);
  uint64_t v265 = *((void *)a4 + 6);
  v266 = v119;
  if (v119) {
    atomic_fetch_add_explicit(&v119->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v120 = (std::__shared_weak_count *)*((void *)a4 + 9);
  uint64_t v263 = *((void *)a4 + 8);
  v264 = v120;
  if (v120) {
    atomic_fetch_add_explicit(&v120->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v121 = (std::__shared_weak_count *)*((void *)a4 + 11);
  uint64_t v261 = *((void *)a4 + 10);
  v262 = v121;
  if (v121) {
    atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v122 = (std::__shared_weak_count *)*((void *)a4 + 13);
  uint64_t v259 = *((void *)a4 + 12);
  v260 = v122;
  if (v122) {
    atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v123 = *((void *)a4 + 1);
  uint64_t v125 = *(void *)(v123 + 64);
  uint64_t v124 = *(std::__shared_weak_count **)(v123 + 72);
  uint64_t v257 = v125;
  v258 = v124;
  if (v124) {
    atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v126 = (std::__shared_weak_count *)*((void *)a4 + 15);
  uint64_t v255 = *((void *)a4 + 14);
  v256 = v126;
  if (v126) {
    atomic_fetch_add_explicit(&v126->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v127 = *(std::__shared_weak_count **)(v214 + 640);
  uint64_t v253 = *(void *)(v214 + 632);
  v254 = v127;
  if (v127) {
    atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v128 = *((void *)*v21 + 3);
  char v129 = (std::__shared_weak_count *)*((void *)a4 + 17);
  uint64_t v251 = *((void *)a4 + 16);
  v252 = v129;
  if (v129) {
    atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v130 = *(std::__shared_weak_count **)(v214 + 624);
  uint64_t v249 = *(void *)(v214 + 616);
  v250 = v130;
  if (v130) {
    atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v131 = a4[258];
  quasar::SpeechRequestData::getLeftContext(*v21, &v248);
  quasar::SpeechRequestData::getLeftContextForItn(*v21, &v247);
  quasar::SpeechRequestData::getRightContextForItn(*v21, &v246);
  quasar::DecoderPassData::DecoderPassData((uint64_t)&__p, &v265, &v263, &v261, &v259, &v257, &v255, 1, 1, (void **)&v285, &v253, v128 + 56, &v251, &v249, 4, v131 != 0, (long long **)&v248, (long long **)&v247, (long long **)&v246,
    a4[259],
    v118,
    (uint64_t **)(*((void *)*v213 + 193) + 24));
  *(void *)v294 = &v246;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v294);
  *(void *)v294 = &v247;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v294);
  *(void *)v294 = &v248;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v294);
  if (v250) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v250);
  }
  if (v252) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v252);
  }
  if (v254) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v254);
  }
  if (v256) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v256);
  }
  if (v258) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v258);
  }
  if (v260) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v260);
  }
  if (v262) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v262);
  }
  if (v264) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v264);
  }
  if (v266) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v266);
  }
  v132 = (std::__shared_weak_count *)a2[1];
  uint64_t v242 = *a2;
  v243 = v132;
  if (v132) {
    atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SpeechRecognizer::initializeDecoderChainOutput(v214, &v242, a4, a3, (std::vector<std::wstring> **)&v244);
  if (v243) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v243);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v309 = 0u;
    long long v308 = 0u;
    long long v307 = 0u;
    long long v306 = 0u;
    long long v305 = 0u;
    long long v304 = 0u;
    long long v303 = 0u;
    long long v302 = 0u;
    long long v301 = 0u;
    long long v300 = 0u;
    long long v299 = 0u;
    long long v298 = 0u;
    long long v296 = 0u;
    long long v297 = 0u;
    long long v295 = 0u;
    memset(v294, 0, sizeof(v294));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v294);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v294, (uint64_t)"Waiting for first valid feature frame of first utterance...", 59);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v294);
  }
  if (!*((_DWORD *)a4 + 50))
  {
    uint64_t v133 = *((void *)a4 + 30);
    *(_DWORD *)v294 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v133 + 56))(v133, v294);
  }
  if (*((_DWORD *)*v21 + 1) || kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)a4 + 10), 0, 1))
  {
    uint64_t v134 = (quasar::MultiChainMultiAudioBuffer **)(v214 + 264);
    unint64_t v135 = v288.__locale_;
    uint64_t v136 = v289;
    if (v288.__locale_ == v289)
    {
LABEL_244:
      uint64_t v137 = v214 + 304;
      (*(void (**)(uint64_t, long long *, quasar::DecoderChainOutput **, quasar::SpeechRequestData **, uint64_t, quasar::MultiChainMultiAudioBuffer **, quasar::SystemConfig **, uint64_t))(*(void *)v210 + 16))(v210, &__p, &v244, v21, v214 + 304, v134, v213, v214 + 64);
      uint64_t v138 = quasar::Decoder::run(v210, (uint64_t)&__p, (uint64_t)&v244, (uint64_t *)v21, v214 + 304, 1, v288.__locale_ == v289);
      if (*((unsigned char *)v244 + 1073)) {
        BOOL v139 = 1;
      }
      else {
        BOOL v139 = *((unsigned char *)v244 + 1072) != 0;
      }
      unsigned int v147 = *(unsigned __int8 *)(*((void *)*v21 + 3) + 48) | v138;
      BOOL v114 = v147 == 0;
      BOOL v148 = v147 != 0;
      if (v114) {
        int v149 = 0;
      }
      else {
        int v149 = v138;
      }
      if (!v139 && !v148)
      {
        std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v293, v137);
        int v149 = quasar::Decoder::runChain((uint64_t **)&v288, (uint64_t)v293, (uint64_t)&__p, (uint64_t)&v244, (uint64_t *)v21);
        uint64_t v138 = (uint64_t)std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v293);
      }
      v150 = *v134;
      if (*v134)
      {
        int v151 = *((_DWORD *)v244 + 144);
        int v152 = (*(uint64_t (**)(void))(**(void **)(*((void *)a4 + 10) + 16) + 24))(*(void *)(*((void *)a4 + 10) + 16));
        quasar::MultiChainMultiAudioBuffer::endAudioForSecondaryBuffers(v150, v152 * v151);
      }
      uint64_t v153 = v288.__locale_;
      float v154 = v289;
      while (v153 != v154)
      {
        uint64_t v138 = (*(uint64_t (**)(void))(**(void **)v153 + 24))();
        uint64_t v153 = (std::locale::__imp *)((char *)v153 + 16);
      }
      int v155 = v244;
      a4[257] = *((unsigned char *)v244 + 1073);
      int v156 = *((unsigned __int8 *)v155 + 1072);
      a4[256] = v156;
      if (v156 && !*((unsigned char *)v155 + 580))
      {
        if (quasar::gLogLevel >= 4)
        {
          long long v309 = 0u;
          long long v308 = 0u;
          long long v307 = 0u;
          long long v306 = 0u;
          long long v305 = 0u;
          long long v304 = 0u;
          long long v303 = 0u;
          long long v302 = 0u;
          long long v301 = 0u;
          long long v300 = 0u;
          long long v299 = 0u;
          long long v298 = 0u;
          long long v296 = 0u;
          long long v297 = 0u;
          long long v295 = 0u;
          memset(v294, 0, sizeof(v294));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v294);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v294, (uint64_t)"Pause/Resume: Ignoring any further processing of the utterance with uttStartFrame=", 82);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v294);
          int v155 = v244;
        }
        v178 = v245;
        v234[0] = (uint64_t)v155;
        v234[1] = (uint64_t)v245;
        if (v245) {
          atomic_fetch_add_explicit(&v245->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        quasar::SpeechRecognizer::updateFrameDataAtUtteranceEnd(v138, v234, (uint64_t)a4);
        if (v178) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v178);
        }
      }
      else
      {
        if (*((void *)v155 + 132)) {
          operator new();
        }
        if ((quasar::DecoderChainOutput *)(v214 + 24) != v155)
        {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(v214 + 24), *(std::string **)v155, *((long long **)v155 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v155 + 1) - *(void *)v155) >> 3));
          int v155 = v244;
        }
        if (v149 == 1)
        {
          v157 = v245;
          v233[0] = (uint64_t)v155;
          v233[1] = (uint64_t)v245;
          if (v245) {
            atomic_fetch_add_explicit(&v245->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          quasar::SpeechRecognizer::updateFinalRecogStats(v214, v233, (uint64_t)a4);
          if (v157) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v157);
          }
          *a4 = 1;
          uint64_t v158 = **((void **)*v21 + 3);
          quasar::RecogResult::RecogResult((quasar::RecogResult *)v294);
          v159 = (std::__shared_weak_count *)*((void *)*v21 + 4);
          uint64_t v231 = *((void *)*v21 + 3);
          v232 = v159;
          if (v159) {
            atomic_fetch_add_explicit(&v159->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v160 = (void *)quasar::RecogResult::setParams((uint64_t)v294, &v231);
          v161 = quasar::RecogResult::setLmeStatus(v160, (uint64_t *)v244 + 73);
          (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v158 + 40))(v158, v161, 2);
          if (v232) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v232);
          }
          quasar::RecogResult::~RecogResult((quasar::RecogResult *)v294);
          int v162 = 0;
        }
        else if (*((unsigned char *)v155 + 1073))
        {
          if (!*((void *)v155 + 44))
          {
            v163 = operator new(0x30uLL);
            v163[1] = 0;
            v163[2] = 0;
            void *v163 = &unk_1F0A62A20;
            v163[4] = 0;
            v163[5] = 0;
            v163[3] = 0;
            v164 = (std::__shared_weak_count *)*((void *)v155 + 45);
            *((void *)v155 + 44) = v163 + 3;
            *((void *)v155 + 45) = v163;
            if (v164) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v164);
            }
            v165 = operator new(0x30uLL);
            v165[1] = 0;
            v165[2] = 0;
            void *v165 = &unk_1F0A62C18;
            v165[4] = 0;
            v165[5] = 0;
            v165[3] = 0;
            v166 = v244;
            v167 = (std::__shared_weak_count *)*((void *)v244 + 50);
            *((void *)v244 + 49) = v165 + 3;
            *((void *)v166 + 50) = v165;
            if (v167) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v167);
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&v310, "");
          std::set<std::string>::set[abi:ne180100]((uint64_t)v294, (const void **)&v310.__r_.__value_.__l.__data_, 1);
          memset(&v241, 0, sizeof(v241));
          v291 = &v241;
          char v292 = 0;
          v241.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v241.__r_.__value_.__l.__size_ = v241.__r_.__value_.__r.__words[0];
          v241.__r_.__value_.__r.__words[2] = v241.__r_.__value_.__r.__words[0] + 24;
          v241.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<std::string>>,std::set<std::string> const*,std::set<std::string> const*,std::set<std::string>*>((uint64_t)&v241.__r_.__value_.__r.__words[2], (const void ***)v294, (const void ***)&v294[24], (uint64_t *)v241.__r_.__value_.__l.__data_);
          std::__tree<std::string>::destroy((uint64_t)v294, *(char **)&v294[8]);
          if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v310.__r_.__value_.__l.__data_);
          }
          *a4 = *((unsigned char *)v244 + 580);
          uint64_t v168 = **((void **)*v21 + 3);
          quasar::RecogResult::RecogResult((quasar::RecogResult *)v294);
          v169 = (std::__shared_weak_count *)*((void *)*v21 + 4);
          uint64_t v229 = *((void *)*v21 + 3);
          v230 = v169;
          if (v169) {
            atomic_fetch_add_explicit(&v169->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v170 = quasar::RecogResult::setParams((uint64_t)v294, &v229);
          v171 = quasar::Token::resetSpacing(*((uint64_t ***)v244 + 44));
          uint64_t v172 = quasar::RecogResult::setResultChoices(v170, (uint64_t)v171);
          uint64_t v173 = quasar::RecogResult::setResultCosts(v172, *((void *)v244 + 49));
          v174 = (void *)quasar::RecogResult::setResultMuxIds(v173, (uint64_t)&v241);
          v175 = quasar::RecogResult::setLmeStatus(v174, (uint64_t *)v244 + 73);
          uint64_t IsFinal = quasar::RecogResult::setIsFinal((uint64_t)v175, *a4);
          uint64_t v177 = quasar::RecogResult::setRecognitionPaused(IsFinal, 1);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v168 + 40))(v168, v177, 1);
          if (v230) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v230);
          }
          quasar::RecogResult::~RecogResult((quasar::RecogResult *)v294);
          *(void *)v294 = &v241;
          std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v294);
          int v162 = 1;
        }
        else
        {
          int v162 = quasar::SpeechRecognizer::writeFinalResults(v214, (char *)&__p, (uint64_t *)&v244, (uint64_t)a4);
        }
        v179 = (uint64_t **)*((void *)v244 + 44);
        if (!v179 || (v180 = *v179, *(uint64_t **)(*((void *)v244 + 44) + 8) == v180) || v180[1] == *v180)
        {
          *(unsigned char *)(v214 + 528) = 0;
        }
        else
        {
          memset(v294, 0, 24);
          std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v294, *v180, v180[1], 0x6DB6DB6DB6DB6DB7 * ((v180[1] - *v180) >> 5));
          v181 = *(const quasar::Token **)&v294[8];
          for (unint64_t i = *(const quasar::Token **)v294; i != v181; unint64_t i = (const quasar::Token *)((char *)i + 224))
          {
            quasar::Token::Token(&v218, i);
            quasar::SpeechRecognizer::updateCachedTokensWithToken(v214, (std::string::size_type)&v218);
            if (v228 < 0) {
              operator delete(v227);
            }
            if (v226 < 0) {
              operator delete(v225);
            }
            v241.__r_.__value_.__r.__words[0] = (std::string::size_type)&v224;
            std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v241);
            if (v223 < 0) {
              operator delete(v222);
            }
            v241.__r_.__value_.__r.__words[0] = (std::string::size_type)&v221;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v241);
            if (v220 < 0) {
              operator delete(v219);
            }
            if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v218.__r_.__value_.__l.__data_);
            }
          }
          v241.__r_.__value_.__r.__words[0] = (std::string::size_type)v294;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v241);
        }
        uint64_t v183 = *(void *)(v214 + 600);
        if (v183)
        {
          uint64_t v185 = *(void *)(v183 + 120);
          v184 = *(std::__shared_weak_count **)(v183 + 128);
          if (v184) {
            atomic_fetch_add_explicit(&v184->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v185 && *(unsigned char *)(*((void *)*v21 + 3) + 52))
          {
            int v186 = *a4;
            if (v184) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v184);
            }
            if (v186)
            {
              if (v162)
              {
                if (quasar::gLogLevel >= 4)
                {
                  long long v309 = 0u;
                  long long v308 = 0u;
                  long long v307 = 0u;
                  long long v306 = 0u;
                  long long v305 = 0u;
                  long long v304 = 0u;
                  long long v303 = 0u;
                  long long v302 = 0u;
                  long long v301 = 0u;
                  long long v300 = 0u;
                  long long v299 = 0u;
                  long long v298 = 0u;
                  long long v296 = 0u;
                  long long v297 = 0u;
                  long long v295 = 0u;
                  memset(v294, 0, sizeof(v294));
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v294);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v294, (uint64_t)"Recognition is final and successful, trigger training", 53);
                  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v294);
                }
                quasar::SpeechRecognizer::writeTrainingData((quasar::SpeechRecognizer *)v214, (const quasar::SpeechRecognizer::RecogData *)a4);
              }
              else if (quasar::gLogLevel >= 4)
              {
                long long v309 = 0u;
                long long v308 = 0u;
                long long v307 = 0u;
                long long v306 = 0u;
                long long v305 = 0u;
                long long v304 = 0u;
                long long v303 = 0u;
                long long v302 = 0u;
                long long v301 = 0u;
                long long v300 = 0u;
                long long v299 = 0u;
                long long v298 = 0u;
                long long v296 = 0u;
                long long v297 = 0u;
                long long v295 = 0u;
                memset(v294, 0, sizeof(v294));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v294);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v294, (uint64_t)"Recognition is final but not successful, skip training", 54);
                quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v294);
              }
            }
          }
          else if (v184)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v184);
          }
        }
        uint64_t v187 = (*(uint64_t (**)(void, void))(***((void ***)*v21 + 3) + 112))(**((void **)*v21 + 3), *((void *)a4 + 10));
        v188 = v245;
        v217[0] = (uint64_t)v244;
        v217[1] = (uint64_t)v245;
        if (v245) {
          atomic_fetch_add_explicit(&v245->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        quasar::SpeechRecognizer::updateFrameDataAtUtteranceEnd(v187, v217, (uint64_t)a4);
        if (v188) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v188);
        }
        *(_OWORD *)&v310.__r_.__value_.__l.__data_ = quasar::Location::UNDEFINED_COORDINATES;
        if (*a4 && v162)
        {
          while (1)
          {
            v189 = *(uint64_t **)(*((void *)a4 + 1) + 88);
            if (v84 == v189) {
              break;
            }
            uint64_t v190 = *v84;
            v84 += 2;
            quasar::Decoder::run(v190, (uint64_t)&__p, (uint64_t)&v244, (uint64_t *)v21, v137, 0, v84 == v189);
          }
        }
        if (quasar::Location::isUndefined((quasar::Location *)&v310))
        {
          Locatiouint64_t n = (std::__assoc_sub_state **)quasar::SpeechRequestData::getLocation(*v21);
          v310.__r_.__value_.__r.__words[0] = quasar::Location::fromSharedFuture(Location);
          v310.__r_.__value_.__l.__size_ = v192;
        }
        uint64_t v193 = *((void *)v244 + 53);
        std::string::basic_string[abi:ne180100]<0>(v294, "geoLocationStatusUponRequestComplete");
        quasar::Location::statusAsString((quasar::Location *)&v310, &v241);
        quasar::SpeechRequestResultData::addDumpAA(v193, (long long *)v294, &v241);
        if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v241.__r_.__value_.__l.__data_);
        }
        if ((v294[23] & 0x80000000) != 0) {
          operator delete(*(void **)v294);
        }
        v194 = v244;
        if (!*((unsigned char *)v244 + 1073))
        {
          if (*(unsigned char *)(*((void *)*v21 + 3) + 54)
            && (BOOL v196 = quasar::DecoderChainOutput::nonEmptyTopChoice(v244), v194 = v244, v196))
          {
            v197 = (long long **)((char *)v244 + 96);
            if (*((void *)v244 + 13) == *((void *)v244 + 12))
            {
              uint64_t v198 = *((void *)v244 + 44);
              v197 = *(long long ***)v198;
              if (*(void *)(v198 + 8) == *(void *)v198) {
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              }
            }
            quasar::SpeechRequestData::updateInterUtteranceLeftContext((uint64_t)*v21, v197, v284);
            uint64_t v199 = *((void *)*v21 + 3);
            memset(v294, 0, 24);
            quasar::RunAsyncParams::setLeftContextForItn(v199, (uint64_t)v294);
            v241.__r_.__value_.__r.__words[0] = (std::string::size_type)v294;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v241);
            quasar::RunAsyncParams::setLeftContextForDecoder(*((void *)*v21 + 3), (uint64_t)v244 + 120);
          }
          else if (quasar::DecoderChainOutput::nonEmptyTopChoice(v194))
          {
            uint64_t v200 = *((void *)*v21 + 3);
            memset(v294, 0, 24);
            quasar::RunAsyncParams::setLeftContext(v200, (uint64_t)v294);
            v241.__r_.__value_.__r.__words[0] = (std::string::size_type)v294;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v241);
            uint64_t v201 = *((void *)*v21 + 3);
            memset(v294, 0, 24);
            quasar::RunAsyncParams::setLeftContextForItn(v201, (uint64_t)v294);
            v241.__r_.__value_.__r.__words[0] = (std::string::size_type)v294;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v241);
          }
        }
        uint64_t v195 = *(void *)(v214 + 648);
        std::string::basic_string[abi:ne180100]<0>(v294, "recognitionStatus");
        std::to_string(&v241, v162);
        quasar::SpeechRequestResultData::addDump(v195, (long long *)v294, &v241);
        if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v241.__r_.__value_.__l.__data_);
        }
        if ((v294[23] & 0x80000000) != 0) {
          operator delete(*(void **)v294);
        }
        quasar::SpeechRecognizer::dumpResultLog((quasar::SpeechRecognizer *)v214, *a4);
      }
    }
    else
    {
      while ((*(unsigned int (**)(void, long long *, quasar::DecoderChainOutput **, quasar::SpeechRequestData **, uint64_t, quasar::MultiChainMultiAudioBuffer **, quasar::SystemConfig **, uint64_t))(**(void **)v135 + 16))(*(void *)v135, &__p, &v244, v21, v214 + 304, v134, v213, v214 + 64) != 1)
      {
        unint64_t v135 = (std::locale::__imp *)((char *)v135 + 16);
        if (v135 == v136) {
          goto LABEL_244;
        }
      }
      if (*v134) {
        quasar::MultiChainMultiAudioBuffer::endAudioForSecondaryBuffers(*v134, 0);
      }
      uint64_t v140 = v288.__locale_;
      for (uint64_t j = v289; v140 != j; v140 = (std::locale::__imp *)((char *)v140 + 16))
        (*(void (**)(void))(**(void **)v140 + 24))();
      long long v142 = v245;
      v237[0] = (uint64_t)v244;
      v237[1] = (uint64_t)v245;
      if (v245) {
        atomic_fetch_add_explicit(&v245->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::SpeechRecognizer::updateFinalRecogStats(v214, v237, (uint64_t)a4);
      if (v142) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v142);
      }
      *a4 = 1;
      quasar::SpeechRecognizer::dumpResultLog((quasar::SpeechRecognizer *)v214, 1);
      uint64_t v143 = **((void **)*v21 + 3);
      quasar::RecogResult::RecogResult((quasar::RecogResult *)v294);
      char v144 = (std::__shared_weak_count *)*((void *)*v21 + 4);
      uint64_t v235 = *((void *)*v21 + 3);
      v236 = v144;
      if (v144) {
        atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v145 = (void *)quasar::RecogResult::setParams((uint64_t)v294, &v235);
      float v146 = quasar::RecogResult::setLmeStatus(v145, (uint64_t *)v244 + 73);
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v143 + 40))(v143, v146, 2);
      if (v236) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v236);
      }
      quasar::RecogResult::~RecogResult((quasar::RecogResult *)v294);
    }
  }
  else
  {
    memset(&v241, 0, sizeof(v241));
    std::string::basic_string[abi:ne180100]<0>(&v310, "");
    *(void *)v294 = 4;
    *(_DWORD *)&v294[8] = 0;
    if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v294[16], v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v294[16] = *(_OWORD *)&v310.__r_.__value_.__l.__data_;
      *(void *)&long long v295 = *((void *)&v310.__r_.__value_.__l + 2);
    }
    std::vector<quasar::LmeInfo>::push_back[abi:ne180100]((uint64_t *)&v241, (uint64_t *)v294);
    if (SBYTE7(v295) < 0) {
      operator delete(*(void **)&v294[16]);
    }
    if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v310.__r_.__value_.__l.__data_);
    }
    std::mutex::lock((std::mutex *)(v214 + 136));
    int v202 = *(_DWORD *)(v214 + 128);
    std::mutex::unlock((std::mutex *)(v214 + 136));
    if (v202 == 3)
    {
      uint64_t v203 = 2;
    }
    else
    {
      if (*((_DWORD *)*v21 + 1))
      {
        uint64_t v204 = *(void *)(v214 + 648);
        std::string::basic_string[abi:ne180100]<0>(v294, "uttDetectAbort");
        std::string::basic_string[abi:ne180100]<0>(&v310, "Rejected");
        quasar::SpeechRequestResultData::addDump(v204, (long long *)v294, &v310);
        if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v310.__r_.__value_.__l.__data_);
        }
        if ((v294[23] & 0x80000000) != 0) {
          operator delete(*(void **)v294);
        }
      }
      uint64_t v203 = 3;
    }
    v205 = v245;
    v240[0] = (uint64_t)v244;
    v240[1] = (uint64_t)v245;
    if (v245) {
      atomic_fetch_add_explicit(&v245->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    quasar::SpeechRecognizer::updateFinalRecogStats(v214, v240, (uint64_t)a4);
    if (v205) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v205);
    }
    *a4 = 1;
    quasar::SpeechRecognizer::dumpResultLog((quasar::SpeechRecognizer *)v214, 1);
    uint64_t v206 = **((void **)*v21 + 3);
    quasar::RecogResult::RecogResult((quasar::RecogResult *)v294);
    v207 = (std::__shared_weak_count *)*((void *)*v21 + 4);
    uint64_t v238 = *((void *)*v21 + 3);
    v239 = v207;
    if (v207) {
      atomic_fetch_add_explicit(&v207->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v208 = (void *)quasar::RecogResult::setParams((uint64_t)v294, &v238);
    v209 = quasar::RecogResult::setLmeStatus(v208, (uint64_t *)&v241);
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v206 + 40))(v206, v209, v203);
    if (v239) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v239);
    }
    quasar::RecogResult::~RecogResult((quasar::RecogResult *)v294);
    *(void *)v294 = &v241;
    std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v294);
  }
  if (v245) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v245);
  }
  quasar::DecoderPassData::~DecoderPassData((quasar::DecoderPassData *)&__p);
  *(void *)&long long __p = &v285;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(void *)&long long __p = &v288;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v211) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v211);
  }
  if (v212) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v212);
  }
}

void sub_1B201F3C0()
{
}

void sub_1B201F3D0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B201F528);
}

void sub_1B201F3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::__shared_weak_count *a63)
{
  if (a63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a63);
  }
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&STACK[0x710]);
  JUMPOUT(0x1B201F3FCLL);
}

void sub_1B201F418()
{
}

void sub_1B201F430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  _Unwind_Resume(a1);
}

void sub_1B201F448()
{
  STACK[0x240] = (unint64_t)&STACK[0x710];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  JUMPOUT(0x1B201F4B0);
}

void sub_1B201F484()
{
}

void sub_1B201F494()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  JUMPOUT(0x1B201F4C4);
}

void sub_1B201F4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,std::__shared_weak_count *a26)
{
  if (STACK[0x270]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x270]);
  }
  quasar::DecoderPassData::~DecoderPassData((quasar::DecoderPassData *)&STACK[0x350]);
  STACK[0x710] = (unint64_t)&STACK[0x6B0];
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x710]);
  STACK[0x710] = (unint64_t)&STACK[0x6C8];
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x710]);
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::processLeftContextForEditLme(uint64_t a1, long long **a2)
{
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v45, *(void *)(a1 + 536), *(void *)(a1 + 544), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 5));
  std::unordered_map<std::string,quasar::LmeDataFactoryBase::PronSet>::unordered_map((uint64_t)v44, a1 + 560);
  std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token const*,quasar::Token const*>(a1 + 536, 0, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::clear(a1 + 560);
  uint64_t v4 = *a2;
  uint64_t v5 = (unsigned __int8 **)a2[1];
  if (*a2 != (long long *)v5)
  {
    long long v21 = a2;
    do
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v44, (unsigned __int8 *)v4))
      {
        uint64_t v6 = (uint64_t)v45;
        uint64_t v7 = v46;
        if (v45 != v46)
        {
          int v8 = *((char *)v4 + 23);
          if (v8 >= 0) {
            uint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
          }
          else {
            uint64_t v9 = (unsigned __int8 *)*((void *)v4 + 1);
          }
          do
          {
            uint64_t v10 = *(unsigned __int8 *)(v6 + 23);
            if ((v10 & 0x80u) == 0) {
              char v11 = (unsigned __int8 *)*(unsigned __int8 *)(v6 + 23);
            }
            else {
              char v11 = *(unsigned __int8 **)(v6 + 8);
            }
            if (v11 == v9)
            {
              if (v8 >= 0) {
                uint64_t v12 = (unsigned __int8 *)v4;
              }
              else {
                uint64_t v12 = *(unsigned __int8 **)v4;
              }
              if ((v10 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v6, v12, *(void *)(v6 + 8)))
                {
LABEL_44:
                  unint64_t v14 = *(void *)(a1 + 544);
                  if (v14 >= *(void *)(a1 + 552))
                  {
                    uint64_t v15 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)(a1 + 536), (const quasar::Token *)v6);
                  }
                  else
                  {
                    quasar::Token::Token(*(std::string **)(a1 + 544), (const quasar::Token *)v6);
                    uint64_t v15 = v14 + 224;
                    *(void *)(a1 + 544) = v14 + 224;
                  }
                  *(void *)(a1 + 544) = v15;
                  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>((long long *)(v6 + 224), v46, v6);
                  uint64_t v17 = v16;
                  for (unint64_t i = v46; i != v17; quasar::Token::~Token((void **)i - 28))
                    ;
                  uint64_t v46 = v17;
                  break;
                }
              }
              else
              {
                if (!*(unsigned char *)(v6 + 23)) {
                  goto LABEL_44;
                }
                uint64_t v13 = 0;
                while (*(unsigned __int8 *)(v6 + v13) == v12[v13])
                {
                  if (v10 == ++v13) {
                    goto LABEL_44;
                  }
                }
              }
            }
            v6 += 224;
          }
          while ((long long *)v6 != v7);
        }
        v48[0] = v4;
        uint64_t v19 = std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v44, (unsigned __int8 *)v4, (uint64_t)&std::piecewise_construct, v48);
        v48[0] = v4;
        uint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 560, (unsigned __int8 *)v4, (uint64_t)&std::piecewise_construct, v48);
        if (v20 != v19) {
          std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *> *,long>>((uint64_t **)v20 + 5, *((void **)v19 + 5), (void *)v19 + 6);
        }
      }
      else
      {
        quasar::Token::Token((quasar::Token *)&v33);
        std::string::operator=(&v33, (const std::string *)v4);
        quasar::Token::Token(&v22, (const quasar::Token *)&v33);
        quasar::SpeechRecognizer::updateCachedTokensWithToken(a1, (std::string::size_type)&v22);
        if (v32 < 0) {
          operator delete(__p);
        }
        if (v30 < 0) {
          operator delete(v29);
        }
        v48[0] = (long long *)&v28;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
        if (v27 < 0) {
          operator delete(v26);
        }
        v48[0] = (long long *)&v25;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
        if (v24 < 0) {
          operator delete(v23);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        if (v43 < 0) {
          operator delete(v42);
        }
        if (v41 < 0) {
          operator delete(v40);
        }
        v48[0] = (long long *)&v39;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
        if (v38 < 0) {
          operator delete(v37);
        }
        v48[0] = (long long *)&v36;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
        if (v35 < 0) {
          operator delete(v34);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v4 = (long long *)((char *)v4 + 24);
    }
    while (v4 != (long long *)v5);
    if (v21[1] != *v21) {
      *(unsigned char *)(a1 + 528) = 1;
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::~__hash_table((uint64_t)v44);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
}

void sub_1B201F8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::~__hash_table(v42 - 168);
  a42 = (void **)(v42 - 128);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a42);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::buildEditLmeContainerFromCachedTokens(quasar::SpeechRecognizer *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 67);
  uint64_t v3 = *((void *)this + 68);
  if (v2 == v3)
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  uint64_t v4 = this;
  v70[0] = 0;
  v70[1] = 0;
  uint64_t v5 = (char *)this + 560;
  uint64_t v69 = (uint64_t *)v70;
  do
  {
    quasar::LmeDataFactoryBase::PronSet::PronSet(v47);
    long long v67 = 0uLL;
    unint64_t v68 = 0;
    uint64_t v64 = 0;
    long long v65 = 0;
    unint64_t v66 = 0;
    long long __p = (void *)v2;
    uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v5, (unsigned __int8 *)v2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    if (!quasar::LmeDataFactoryBase::PronSet::empty((quasar::LmeDataFactoryBase::PronSet *)(v6 + 40)))
    {
      *(_DWORD *)uint64_t v58 = 1;
      long long __p = (void *)v2;
      uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v5, (unsigned __int8 *)v2, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 40;
      int v8 = v65;
      if ((unint64_t)v65 >= v66)
      {
        uint64_t v9 = (char *)std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,char const*&,int,quasar::LmeDataFactoryBase::PronSet &>((uint64_t *)&v64, v2, &quasar::LME_TAG_EDIT, (unsigned int *)v58, (uint64_t)v7);
      }
      else
      {
        std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,char const*&,int,quasar::LmeDataFactoryBase::PronSet &>((uint64_t)&v66, (uint64_t)v65, v2, &quasar::LME_TAG_EDIT, (unsigned int *)v58, (uint64_t)v7);
        uint64_t v9 = v8 + 80;
      }
      long long v65 = v9;
      goto LABEL_58;
    }
    if (*(char *)(v2 + 71) < 0)
    {
      if (!*(void *)(v2 + 56)) {
        goto LABEL_15;
      }
    }
    else if (!*(unsigned char *)(v2 + 71))
    {
      goto LABEL_15;
    }
    if (*(void *)(v2 + 72) != *(void *)(v2 + 80))
    {
      if ((*(unsigned char *)(v2 + 71) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v58, *(const std::string::value_type **)(v2 + 48), *(void *)(v2 + 56));
      }
      else
      {
        *(_OWORD *)uint64_t v58 = *(_OWORD *)(v2 + 48);
        *(void *)&v58[16] = *(void *)(v2 + 64);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, " ");
      std::string::basic_string[abi:ne180100]<0>(v43, ".");
      quasar::replaceAll((uint64_t)v58, (uint64_t)&__p, v43);
      if ((v43[23] & 0x80000000) != 0) {
        operator delete(*(void **)v43);
      }
      if (SHIBYTE(v51) < 0) {
        operator delete(__p);
      }
      *(_DWORD *)char v43 = 1;
      long long __p = 0;
      uint64_t v13 = *((void *)&v67 + 1);
      if (*((void *)&v67 + 1) >= v68)
      {
        unint64_t v14 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string &,double>((uint64_t *)&v67, (int *)v43, (uint64_t)v58, (double *)&__p);
      }
      else
      {
        std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string &,double>((uint64_t)&v68, *((uint64_t *)&v67 + 1), (int *)v43, (uint64_t)v58, (double *)&__p);
        unint64_t v14 = v13 + 40;
      }
      *((void *)&v67 + 1) = v14;
      uint64_t v15 = *(void *)(v2 + 72);
      uint64_t v16 = *(void *)(v2 + 80);
      while (v15 != v16)
      {
        *(_DWORD *)char v43 = 3;
        long long __p = 0;
        if (v14 >= v68)
        {
          unint64_t v14 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,double>((uint64_t *)&v67, (int *)v43, v15, (double *)&__p);
        }
        else
        {
          std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,double>((uint64_t)&v68, v14, (int *)v43, v15, (double *)&__p);
          v14 += 40;
        }
        *((void *)&v67 + 1) = v14;
        v15 += 24;
      }
      if ((v58[23] & 0x80000000) != 0) {
        operator delete(*(void **)v58);
      }
      uint64_t v4 = this;
      goto LABEL_44;
    }
LABEL_15:
    memset(&v63, 0, sizeof(v63));
    long long __p = 0;
    int v50 = 0;
    unint64_t v51 = 0;
    memset(v43, 0, 24);
    std::string::operator=((std::string *)v43, (const std::string *)v2);
    *(_DWORD *)&v43[24] = 0;
    uint64_t v10 = v50;
    if ((unint64_t)v50 >= v51)
    {
      uint64_t v12 = (long long *)std::vector<quasar::TextTokenizer::Token>::__push_back_slow_path<quasar::TextTokenizer::Token const&>((uint64_t *)&__p, (long long *)v43);
    }
    else
    {
      if ((v43[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v50, *(const std::string::value_type **)v43, *(std::string::size_type *)&v43[8]);
      }
      else
      {
        long long v11 = *(_OWORD *)v43;
        v50->__r_.__value_.__r.__words[2] = *(void *)&v43[16];
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      }
      LODWORD(v10[1].__r_.__value_.__l.__data_) = *(_DWORD *)&v43[24];
      uint64_t v12 = (long long *)&v10[1].__r_.__value_.__r.__words[1];
    }
    int v50 = (std::string *)v12;
    std::string::size_type size = v63.__r_.__value_.__l.__size_;
    if (v63.__r_.__value_.__l.__size_ >= v63.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v18 = std::vector<quasar::TextTokenizer::TokenString>::__push_back_slow_path<quasar::TextTokenizer::TokenString const&>((uint64_t *)&v63, (uint64_t)&__p);
    }
    else
    {
      *(void *)v63.__r_.__value_.__l.__size_ = 0;
      *(void *)(size + 8) = 0;
      *(void *)(size + 16) = 0;
      std::vector<quasar::TextTokenizer::Token>::__init_with_size[abi:ne180100]<quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>((std::string *)size, (long long *)__p, (long long *)v50, ((char *)v50 - (unsigned char *)__p) >> 5);
      *(_DWORD *)(size + ++*(void *)(result + 24) = v52;
      std::string::size_type v18 = size + 32;
    }
    v63.__r_.__value_.__l.__size_ = v18;
    quasar::PronGuessStats::PronGuessStats((quasar::PronGuessStats *)v58);
    quasar::G2P::getProns(*((void **)v4 + 63), (long long ***)&v63, v58, 3, (uint64_t *)&v61);
    std::vector<quasar::PronChoice>::__vdeallocate((uint64_t *)&v67);
    long long v67 = v61;
    unint64_t v68 = v62;
    unint64_t v62 = 0;
    long long v61 = 0uLL;
    char v38 = (void **)&v61;
    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v38);
    std::__tree<std::string>::destroy((uint64_t)v60, *((char **)&v60[0] + 1));
    if ((v43[23] & 0x80000000) != 0) {
      operator delete(*(void **)v43);
    }
    *(void *)uint64_t v58 = &__p;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
    *(void *)uint64_t v58 = &v63;
    std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
LABEL_44:
    quasar::LmeDataFactoryBase::PronSet::insert((uint64_t)v47, (uint64_t *)&v67);
    if (quasar::LmeDataFactoryBase::PronSet::size((quasar::LmeDataFactoryBase::PronSet *)v47))
    {
      *(_DWORD *)uint64_t v58 = 1;
      uint64_t v19 = v65;
      if ((unint64_t)v65 >= v66)
      {
        uint64_t v20 = (char *)std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,char const*&,int,quasar::LmeDataFactoryBase::PronSet &>((uint64_t *)&v64, v2, &quasar::LME_TAG_EDIT, (unsigned int *)v58, (uint64_t)v47);
      }
      else
      {
        std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,char const*&,int,quasar::LmeDataFactoryBase::PronSet &>((uint64_t)&v66, (uint64_t)v65, v2, &quasar::LME_TAG_EDIT, (unsigned int *)v58, (uint64_t)v47);
        uint64_t v20 = v19 + 80;
      }
      long long v65 = v20;
      long long __p = (void *)v2;
      uint64_t v25 = (uint64_t **)(std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v5, (unsigned __int8 *)v2, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 40);
      if (v25 != (uint64_t **)v47) {
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *> *,long>>(v25, *(void **)&v47[0], (void *)v47 + 1);
      }
    }
    else if (quasar::gLogLevel >= 5)
    {
      memset(v60, 0, sizeof(v60));
      long long v59 = 0u;
      memset(v58, 0, sizeof(v58));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
      long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Edit LME: unable to get pron for word: ", 39);
      int v22 = *(char *)(v2 + 23);
      if (v22 >= 0) {
        uint64_t v23 = v2;
      }
      else {
        uint64_t v23 = *(void *)v2;
      }
      if (v22 >= 0) {
        uint64_t v24 = *(unsigned __int8 *)(v2 + 23);
      }
      else {
        uint64_t v24 = *(void *)(v2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v58);
    }
LABEL_58:
    std::string::basic_string[abi:ne180100]<0>(v58, "\\NT-edit");
    long long __p = v58;
    uint64_t v26 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v69, (const void **)v58, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
    char v27 = (uint64_t *)v26 + 7;
    unint64_t v28 = *((void *)v26 + 8);
    if (v28 >= *((void *)v26 + 9))
    {
      uint64_t v29 = std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__push_back_slow_path<std::vector<quasar::LmeDataFactoryBase::Word> const&>(v27, (long long **)&v64);
    }
    else
    {
      std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::LmeDataFactoryBase::Word> const&>((uint64_t)v27, (long long **)&v64);
      uint64_t v29 = v28 + 24;
    }
    *((void *)v26 + 8) = v29;
    if ((v58[23] & 0x80000000) != 0) {
      operator delete(*(void **)v58);
    }
    *(void *)uint64_t v58 = &v64;
    std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
    *(void *)uint64_t v58 = &v67;
    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v47, *((char **)&v47[0] + 1));
    v2 += 224;
  }
  while (v2 != v3);
  uint64_t v30 = *((void *)v4 + 64);
  uint64_t v57 = 0;
  uint64_t v56 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v30 + 48))(v30, &v56);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  *((void *)&v67 + 1) = 0;
  unint64_t v68 = 0;
  unint64_t v66 = 0;
  *(void *)&long long v67 = (char *)&v67 + 8;
  uint64_t v64 = &v65;
  long long v65 = 0;
  memset(v47, 0, sizeof(v47));
  int v48 = 1065353216;
  memset(v43, 0, sizeof(v43));
  int v44 = 1065353216;
  memset(v45, 0, sizeof(v45));
  int v46 = 1065353216;
  uint64_t v31 = *((void *)v4 + 64);
  *(_DWORD *)uint64_t v58 = 3;
  char v41 = 0;
  uint64_t v42 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  int v32 = (*(uint64_t (**)(uint64_t, uint64_t **, void, unsigned char *, unsigned char *, void **, long long *, char ***, _OWORD *, uint64_t *, uint64_t *, void, uint64_t *))(*(void *)v31 + 56))(v31, &v69, 0, v58, v43, &__p, &v67, &v64, v47, &v42, &v40, 0, &v39);
  uint64_t v33 = v39;
  uint64_t v39 = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  uint64_t v34 = v42;
  uint64_t v42 = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  if (!v32)
  {
    std::stringbuf::str();
    std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string &,void>(&v63, &v61);
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar7LmeDataENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  *a2 = 0;
  a2[1] = 0;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v45);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v43);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v47);
  std::__tree<std::string>::destroy((uint64_t)&v64, v65);
  std::__tree<std::string>::destroy((uint64_t)&v67, *((char **)&v67 + 1));
  uint64_t v35 = *MEMORY[0x1E4FBA418];
  long long __p = (void *)*MEMORY[0x1E4FBA418];
  *(void **)((char *)&__p + *(void *)(v35 - 24)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  int v50 = (std::string *)(MEMORY[0x1E4FBA470] + 16);
  if (v54 < 0) {
    operator delete(v53);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](&v55);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy((uint64_t)&v69, v70[0]);
}

void sub_1B2020308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  char v43 = *(std::__shared_weak_count **)(v41 - 216);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (*(char *)(v41 - 169) < 0) {
    operator delete(*(void **)(v41 - 192));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v40);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a25);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a35);
  std::__tree<std::string>::destroy(v41 - 168, *(char **)(v41 - 160));
  std::__tree<std::string>::destroy(v41 - 144, *(char **)(v41 - 136));
  std::ostringstream::~ostringstream((uint64_t)&a40);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(v41 - 120, *(void **)(v41 - 112));
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<quasar::LmeContainer>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    void v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18[2] = v15 + 16;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    double result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B2020654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::initializeDecoderChainOutput(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, std::vector<std::wstring> *a4@<X3>, std::vector<std::wstring> **a5@<X8>)
{
  uint64_t v9 = (uint64_t *)(a1 + 648);
  std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData> &,void>(a2, (uint64_t *)(a1 + 648), a5);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)*a5);
  std::vector<unsigned int>::pointer end = (long long *)a4->__end_;
  unint64_t v11 = *a5;
  if ((long long *)a4->__begin_ == end)
  {
    a4 = *a5;
  }
  else if (v11 != a4)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v11, (std::string *)a4->__begin_, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a4->__begin_) >> 3));
    a4 = *a5;
  }
  unint64_t v13 = (std::wstring *)a3[28];
  uint64_t v12 = (std::wstring *)a3[29];
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v12->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
  }
  a4[25].__end_ = v13;
  value = (std::__shared_weak_count *)a4[25].__end_cap_.__value_;
  a4[25].__end_cap_.__value_ = v12;
  if (value) {
    std::__shared_weak_count::__release_shared[abi:ne180100](value);
  }
  uint64_t v15 = *v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "far_field");
  std::to_string(&v31, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 280) + 24) + 34));
  quasar::SpeechRequestResultData::addAA(v15, (long long *)__p, &v31);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = *(void *)(*(void *)(a1 + 280) + 24);
  if (*(char *)(v16 + 199) < 0)
  {
    if (!*(void *)(v16 + 184)) {
      goto LABEL_22;
    }
  }
  else if (!*(unsigned char *)(v16 + 199))
  {
    goto LABEL_22;
  }
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar5PTreeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  long long v17 = *a5;
  long long v18 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  std::vector<int>::pointer begin = (std::__shared_weak_count *)v17[23].__begin_;
  *(_OWORD *)&v17[22].__end_cap_.__value_ = v18;
  if (begin)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](begin);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
  uint64_t v20 = (uint64_t)(*a5)[22].__end_cap_.__value_;
  std::string::basic_string[abi:ne180100]<0>(&v31, "version");
  LODWORD(__p[0]) = quasar::getType((quasar *)1);
  std::to_string((std::string *)&__p[1], 1);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  char v30 = 1;
  quasar::PTree::putChild(v20, (uint64_t)&v31, (uint64_t)__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)__p);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
LABEL_22:
  long long v21 = *a5;
  uint64_t v23 = (std::wstring *)a3[30];
  int v22 = (std::wstring *)a3[31];
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v22->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
  }
  v21[23].__end_ = v23;
  uint64_t v24 = (std::__shared_weak_count *)v21[23].__end_cap_.__value_;
  v21[23].__end_cap_.__value_ = v22;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_1B2020874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v28 = *(std::__shared_weak_count **)(v26 + 8);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeInfo>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x333333333333333) {
      unint64_t v14 = 0x666666666666666;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = result;
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[40 * v11];
    v19[0] = v15;
    v19[1] = v16;
    void v19[3] = &v15[40 * v14];
    uint64_t v17 = *a2;
    *((_DWORD *)v16 + 2) = *((_DWORD *)a2 + 2);
    *(void *)uint64_t v16 = v17;
    long long v18 = *((_OWORD *)a2 + 1);
    *((void *)v16 + 4) = a2[4];
    *((_OWORD *)v16 + 1) = v18;
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 0;
    _OWORD v19[2] = v16 + 40;
    std::vector<quasar::LmeInfo>::__swap_out_circular_buffer(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = std::__split_buffer<quasar::LmeInfo>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    uint64_t v8 = *a2;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v7 = v8;
    long long v9 = *((_OWORD *)a2 + 1);
    *(void *)(v7 + 32) = a2[4];
    *(_OWORD *)(v7 + 16) = v9;
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 0;
    uint64_t v10 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v10;
  return result;
}

void sub_1B2020A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::updateFinalRecogStats(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  quasar::SpeechRequestData::getRecogRequestTimer(*(void *)(a1 + 280), &v46);
  double v7 = kaldi::Timer::ElapsedCPU((kaldi::Timer *)v46, v6);
  uint64_t v8 = *(double **)(a1 + 648);
  *uint64_t v8 = *v8 + (v7 - *(double *)(a1 + 352)) * 1000.0;
  if (*((void *)&v46 + 1))
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v46 + 1));
    uint64_t v8 = *(double **)(a1 + 648);
  }
  std::string::basic_string[abi:ne180100]<0>(&v46, "RecogCpuTimeMs");
  quasar::SpeechRequestResultData::addAA((uint64_t)v8, &v46, *(double **)(a1 + 648), 1);
  if (v47 < 0) {
    operator delete((void *)v46);
  }
  quasar::SpeechRequestData::getRecogRequestTimer(*(void *)(a1 + 280), &v46);
  uint64_t v9 = v46;
  double v11 = kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v10) - *(double *)(v9 + 16) - *(double *)(a1 + 360);
  uint64_t v12 = *(void *)(a1 + 648);
  *(double *)(v12 + 8) = *(double *)(v12 + 8) + v11 * 1000.0;
  if (*((void *)&v46 + 1))
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v46 + 1));
    uint64_t v12 = *(void *)(a1 + 648);
  }
  std::string::basic_string[abi:ne180100]<0>(&v46, "RecogThreadCpuTimeMs");
  quasar::SpeechRequestResultData::addAA(v12, &v46, (double *)(*(void *)(a1 + 648) + 8), 1);
  if (v47 < 0) {
    operator delete((void *)v46);
  }
  uint64_t v13 = *a2;
  double v14 = *(double *)(*a2 + 456);
  if (v14 > 0.0)
  {
    double Seconds = *(double *)(v13 + 464);
    if (Seconds < 0.0)
    {
      quasar::SpeechRequestData::getRecogRequestTimer(*(void *)(a1 + 280), &v46);
      double Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v16);
      uint64_t v17 = *a2;
      *(double *)(*a2 + 464) = Seconds;
      if (*((void *)&v46 + 1))
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v46 + 1));
        uint64_t v17 = *a2;
        double Seconds = *(double *)(*a2 + 464);
      }
      double v14 = *(double *)(v17 + 456);
    }
    uint64_t v18 = *(void *)(a1 + 648);
    *(_DWORD *)(v18 + 120) = (int)((double)*(int *)(v18 + 120) + (Seconds - v14) * 1000.0);
    std::string::basic_string[abi:ne180100]<0>(&v46, "EosToPreItnMs");
    *(double *)&long long v44 = (double)*(int *)(*(void *)(a1 + 648) + 120);
    quasar::SpeechRequestResultData::addAA(v18, &v46, (double *)&v44, 1);
    if (v47 < 0) {
      operator delete((void *)v46);
    }
    uint64_t v13 = *a2;
  }
  if (*(char *)(v13 + 1055) < 0)
  {
    if (!*(void *)(v13 + 1040)) {
      return;
    }
  }
  else if (!*(unsigned char *)(v13 + 1055))
  {
    return;
  }
  uint64_t v19 = *(void *)(a3 + 80);
  if (v19)
  {
    int v20 = (*(uint64_t (**)(void))(**(void **)(v19 + 16) + 24))(*(void *)(v19 + 16));
    int v21 = *(_DWORD *)(*(void *)(a1 + 280) + 8);
    int v22 = *(_DWORD *)(*a2 + 576);
    uint64_t v23 = *(void *)(a1 + 648);
    std::string::basic_string[abi:ne180100]<0>(&v46, "lm_interp_weights");
    if (*(char *)(v13 + 1055) >= 0) {
      size_t v24 = *(unsigned __int8 *)(v13 + 1055);
    }
    else {
      size_t v24 = *(void *)(v13 + 1040);
    }
    uint64_t v25 = &v41;
    std::string::basic_string[abi:ne180100]((uint64_t)&v41, v24 + 1);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v25 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if (v24)
    {
      if (*(char *)(v13 + 1055) >= 0) {
        uint64_t v26 = (const void *)(v13 + 1032);
      }
      else {
        uint64_t v26 = *(const void **)(v13 + 1032);
      }
      memmove(v25, v26, v24);
    }
    *(_WORD *)((char *)&v25->__r_.__value_.__l.__data_ + v++*(void *)(result + 24) = 58;
    std::to_string(&v40, v21 * v20);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = &v40;
    }
    else {
      uint64_t v27 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v40.__r_.__value_.__l.__size_;
    }
    uint64_t v29 = std::string::append(&v41, (const std::string::value_type *)v27, size);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::string v31 = std::string::append(&v42, ":");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, (v22 + v21) * v20);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v33 = &v39;
    }
    else {
      uint64_t v33 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v34 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v34 = v39.__r_.__value_.__l.__size_;
    }
    uint64_t v35 = std::string::append(&v43, (const std::string::value_type *)v33, v34);
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    std::string::size_type v45 = v35->__r_.__value_.__r.__words[2];
    long long v44 = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, ";");
    quasar::SpeechRequestResultData::appendAA(v23, &v46, (uint64_t)&v44, (uint64_t)__p);
    if (v38 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v45) < 0) {
      operator delete((void *)v44);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (v47 < 0) {
      operator delete((void *)v46);
    }
  }
}

void sub_1B2020E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  char v47 = *(std::__shared_weak_count **)(v45 - 96);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizer::updateFrameDataAtUtteranceEnd(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  kaldi::OnlineFeatureMatrix::ResetAedFeat(*(kaldi::OnlineFeatureMatrix **)(a3 + 80), *(_DWORD *)(*a2 + 576));
  kaldi::OnlineFeatureMatrix::ResetFusionFeat(*(kaldi::OnlineFeatureMatrix **)(a3 + 80), *(_DWORD *)(*a2 + 576));
  uint64_t v5 = *a2;
  *(_DWORD *)(a3 + 204) += *(_DWORD *)(*a2 + 576);
  *(unsigned char *)(a3 + 212) = *(unsigned char *)(v5 + 580);
}

uint64_t quasar::SpeechRecognizer::writeFinalResults(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4)
{
  int v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a4 + 80) + 16) + 24))(*(void *)(*(void *)(a4 + 80) + 16));
  uint64_t v8 = *(void *)(a1 + 280);
  uint64_t v9 = *a3;
  if (*(unsigned char *)(*(void *)(v8 + 24) + 36)) {
    char v10 = *(unsigned char *)(v9 + 580);
  }
  else {
    char v10 = 1;
  }
  int v11 = *(_DWORD *)(v8 + 8);
  int v12 = *(_DWORD *)(v9 + 576);
  *(unsigned char *)a4 = v10;
  double v256 = 0.0;
  v257[0] = 0.0;
  quasar::MultiAudioBuffer::getBuffer(*(void *)(v8 + 144), 0, &__p);
  quasar::RecogAudioBuffer::stats((quasar::RecogAudioBuffer *)__p, v257, &v256);
  if (*((void *)&__p + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
  }
  double v13 = *(double *)(*(void *)(a4 + 80) + 160);
  double v14 = v256;
  uint64_t v15 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "audioReadTime");
  std::to_string((std::string *)&v216, v256);
  quasar::SpeechRequestResultData::addDump(v15, &__p, (const std::string *)&v216);
  if (SBYTE7(v217) < 0) {
    operator delete((void *)v216);
  }
  double v16 = v13 - v14;
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v17 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "featureComputeTime");
  std::to_string((std::string *)&v216, v16);
  quasar::SpeechRequestResultData::addDump(v17, &__p, (const std::string *)&v216);
  if (SBYTE7(v217) < 0) {
    operator delete((void *)v216);
  }
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 280) + 24) + 35))
  {
    uint64_t v18 = *(void *)(a1 + 648);
    std::string::basic_string[abi:ne180100]<0>(&__p, "whisperScore");
    std::to_string((std::string *)&v216, *(float *)(*a3 + 512));
    quasar::SpeechRequestResultData::addDump(v18, &__p, (const std::string *)&v216);
    if (SBYTE7(v217) < 0) {
      operator delete((void *)v216);
    }
    if (SBYTE7(v236) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v19 = *(void *)(a1 + 648);
    std::string::basic_string[abi:ne180100]<0>(&__p, "whisperDetected");
    std::to_string((std::string *)&v216, *(unsigned __int8 *)(*a3 + 516));
    quasar::SpeechRequestResultData::addDump(v19, &__p, (const std::string *)&v216);
    if (SBYTE7(v217) < 0) {
      operator delete((void *)v216);
    }
    if (SBYTE7(v236) < 0) {
      operator delete((void *)__p);
    }
  }
  int v20 = v12 * v7;
  uint64_t v21 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "utteranceLength");
  std::to_string((std::string *)&v216, (double)(v12 * v7) / 1000.0);
  quasar::SpeechRequestResultData::addDump(v21, &__p, (const std::string *)&v216);
  if (SBYTE7(v217) < 0) {
    operator delete((void *)v216);
  }
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v22 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "audioEndTime");
  std::to_string((std::string *)&v216, v257[0]);
  quasar::SpeechRequestResultData::addDump(v22, &__p, (const std::string *)&v216);
  if (SBYTE7(v217) < 0) {
    operator delete((void *)v216);
  }
  int v23 = v11 * v7;
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v24 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "utteranceEndTime");
  std::to_string((std::string *)&v216, (double)(v20 + v23) / 1000.0);
  quasar::SpeechRequestResultData::addDump(v24, &__p, (const std::string *)&v216);
  if (SBYTE7(v217) < 0) {
    operator delete((void *)v216);
  }
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v25 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "timeElapsedSinceRunAsyncCall");
  uint64_t v26 = *(double **)(*(void *)(a1 + 280) + 200);
  double Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v27);
  std::to_string((std::string *)&v216, Seconds - *v26);
  quasar::SpeechRequestResultData::addDump(v25, &__p, (const std::string *)&v216);
  if (SBYTE7(v217) < 0) {
    operator delete((void *)v216);
  }
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  long long v30 = *(double **)(*(void *)(a1 + 280) + 200);
  double v31 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v29) - *v30 - *(double *)(a1 + 344);
  uint64_t v32 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "timeElapsedSinceRunSyncCall");
  std::to_string((std::string *)&v216, v31);
  quasar::SpeechRequestResultData::addDump(v32, &__p, (const std::string *)&v216);
  if (SBYTE7(v217) < 0) {
    operator delete((void *)v216);
  }
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v33 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EagerUsed");
  double v34 = 0.0;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 280) + 24) + 48)) {
    double v34 = 1.0;
  }
  *(double *)&long long v216 = v34;
  quasar::SpeechRequestResultData::addAA(v33, &__p, (double *)&v216, 0);
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v35 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "recognizer-components");
  quasar::SpeechRequestResultData::addAA(v35, &__p, (const std::string *)(*(void *)(a4 + 8) + 104));
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v36 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DidConfNetCombination");
  double v37 = 0.0;
  if (*(unsigned char *)(*a3 + 517)) {
    double v37 = 1.0;
  }
  quasar::SpeechRequestResultData::addDumpAA(v36, &__p, 0, v37);
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v38 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ConfNetWaitTimeMs");
  quasar::SpeechRequestResultData::addDumpAA(v38, &__p, 0, *(double *)(*a3 + 520));
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v39 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ConfNetworkCombinedNbestSourceID");
  quasar::SpeechRequestResultData::addDumpAA(v39, &__p, 0, (double)*(int *)(*a3 + 528));
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v40 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ConfNetworkCombinerStartTimeMs");
  quasar::SpeechRequestResultData::addDumpAA(v40, &__p, 0, *(double *)(*a3 + 536));
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v41 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "LastWordClipped");
  double v42 = 0.0;
  if (*(unsigned char *)(*a3 + 144)) {
    double v42 = 1.0;
  }
  quasar::SpeechRequestResultData::addDumpAA(v41, &__p, 1, v42);
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v43 = *(void *)(a1 + 648);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WordAligned");
  double v44 = 0.0;
  if (*(unsigned char *)(*a3 + 145)) {
    double v44 = 1.0;
  }
  quasar::SpeechRequestResultData::addDumpAA(v43, &__p, 1, v44);
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  if (*(void *)(a1 + 712))
  {
    uint64_t v45 = *(void *)(a1 + 648);
    std::string::basic_string[abi:ne180100]<0>(&__p, "ANEUsed");
    unsigned __int8 v46 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 712) + 8));
    std::to_string((std::string *)&v216, v46 & 1);
    quasar::SpeechRequestResultData::addAA(v45, &__p, (const std::string *)&v216);
    if (SBYTE7(v217) < 0) {
      operator delete((void *)v216);
    }
    if (SBYTE7(v236) < 0) {
      operator delete((void *)__p);
    }
  }
  v254[0] = 0;
  v254[1] = 0;
  uint64_t v255 = 0;
  if (*(void *)(*a3 + 544))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    quasar::PTree::writeJson();
  }
  char v47 = *(const void **)(a4 + 240);
  if (!v47) {
    goto LABEL_85;
  }
  int v48 = *(std::__shared_weak_count **)(a4 + 248);
  if (!v48)
  {
    if (*(void *)(*a3 + 152))
    {
LABEL_81:
      {
        int v50 = *(std::__shared_weak_count **)(a4 + 248);
        if (v50)
        {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
        }
        quasar::Decoder::calculateNBest((uint64_t)a2, a3, *(_DWORD *)(*(void *)(a1 + 280) + 16));
      }
      goto LABEL_85;
    }
LABEL_249:
    if (quasar::gLogLevel >= 4)
    {
      long long v250 = 0u;
      long long v251 = 0u;
      long long v248 = 0u;
      long long v249 = 0u;
      long long v246 = 0u;
      long long v247 = 0u;
      long long v244 = 0u;
      long long v245 = 0u;
      long long v242 = 0u;
      long long v243 = 0u;
      long long v240 = 0u;
      long long v241 = 0u;
      long long v238 = 0u;
      long long v239 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Write results got a NULL lattice", 32);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    if (*(_DWORD *)(*(void *)(a1 + 280) + 4))
    {
      uint64_t v169 = *(void *)(a1 + 648);
      std::string::basic_string[abi:ne180100]<0>(&__p, "uttDetectAbort");
      std::string::basic_string[abi:ne180100]<0>(&v216, "NullLattice");
      quasar::SpeechRequestResultData::addDump(v169, &__p, (const std::string *)&v216);
      if (SBYTE7(v217) < 0) {
        operator delete((void *)v216);
      }
      if (SBYTE7(v236) < 0) {
        operator delete((void *)__p);
      }
    }
    uint64_t v170 = (std::__shared_weak_count *)a3[1];
    v253[0] = *a3;
    v253[1] = (uint64_t)v170;
    if (v170) {
      atomic_fetch_add_explicit(&v170->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    quasar::SpeechRecognizer::updateFinalRecogStats(a1, v253, a4);
    if (v170) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v170);
    }
    v171 = (std::__shared_weak_count *)a3[1];
    v252[0] = *a3;
    v252[1] = (uint64_t)v171;
    if (v171) {
      atomic_fetch_add_explicit(&v171->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    quasar::SpeechRecognizer::writeToOfflineRecogResultStream(a1, v252);
    if (v171) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v171);
    }
    quasar::RecogResult::RecogResult((quasar::RecogResult *)&__p);
    uint64_t v172 = *(void *)(a1 + 280);
    uint64_t v174 = *(void *)(v172 + 24);
    uint64_t v173 = *(std::__shared_weak_count **)(v172 + 32);
    uint64_t v233 = v174;
    v234 = v173;
    if (v173) {
      atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v175 = quasar::RecogResult::setParams((uint64_t)&__p, &v233);
    WordClipped = (void *)quasar::RecogResult::setLastWordClipped(v175, *(unsigned char *)(*a3 + 144));
    uint64_t v177 = quasar::RecogResult::setLmeStatus(WordClipped, (uint64_t *)(*a3 + 584));
    uint64_t v178 = quasar::RecogResult::setJsonInfo((uint64_t)v177, (uint64_t)v254);
    uint64_t v179 = quasar::RecogResult::setWhisperScore(v178, *(float *)(*a3 + 512));
    uint64_t v180 = quasar::RecogResult::setWhisperDetected(v179, *(unsigned char *)(*a3 + 516));
    uint64_t started = quasar::RecogResult::setUtteranceStartMillis(v180, v23);
    uint64_t v182 = quasar::RecogResult::setUtteranceDurationMillis(started, v20);
    quasar::RecogResult::setIsFinal(v182, *(unsigned char *)a4);
    if (v234) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v234);
    }
    (*(void (**)(void, long long *, void))(**(void **)(*a3 + 560) + 40))(*(void *)(*a3 + 560), &__p, 0);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 280) + 24) + 52))
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v231 = 0u;
        long long v232 = 0u;
        long long v229 = 0u;
        long long v230 = 0u;
        long long v227 = 0u;
        long long v228 = 0u;
        long long v225 = 0u;
        long long v226 = 0u;
        long long v223 = 0u;
        long long v224 = 0u;
        long long v221 = 0u;
        long long v222 = 0u;
        long long v219 = 0u;
        long long v220 = 0u;
        long long v217 = 0u;
        long long v218 = 0u;
        long long v216 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v216);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v216, (uint64_t)"Recognition is going to fail because of NULL lattice. Padding labels to align with features", 91);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v216);
      }
      long long v216 = 0uLL;
      *(void *)&long long v217 = 0;
      quasar::SpeechRecognizer::concatenateLabels(a1, (void *)a4, (uint64_t **)&v216, *(_DWORD *)(*a3 + 576));
    }
    goto LABEL_272;
  }
  atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v49 = *(void *)(*a3 + 152);
  std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  if (!v49) {
    goto LABEL_249;
  }
  char v47 = *(const void **)(a4 + 240);
  if (v47) {
    goto LABEL_81;
  }
LABEL_85:
  uint64_t v51 = *a3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 280) + 24) + 52))
  {
    quasar::SpeechRecognizer::concatenateLabels(a1, (void *)a4, (uint64_t **)(v51 + 984), *(_DWORD *)(v51 + 576));
    uint64_t v51 = *a3;
  }
  uint64_t v52 = *(void *)(v51 + 352);
  if (v52
    && (uint64_t v53 = *(std::mutex **)(a4 + 112)) != 0
    && (double Snr = quasar::SpeechRecognizer::getSnr(v52, v53, *(_DWORD *)(a4 + 204)), Snr != -1000.0))
  {
    uint64_t v55 = *(void *)(a1 + 648);
  }
  else
  {
    uint64_t v55 = *(void *)(a1 + 648);
    double Snr = *(double *)(v55 + 24);
  }
  double v215 = Snr;
  std::string::basic_string[abi:ne180100]<0>(&__p, "SNR");
  quasar::SpeechRequestResultData::addAA(v55, &__p, &v215, 1);
  if (SBYTE7(v236) < 0) {
    operator delete((void *)__p);
  }
  *(double *)(*(void *)(a1 + 648) + ++*(void *)(result + 24) = v215;
  uint64_t v56 = *(void **)(*a3 + 352);
  if (v56 && *(void *)(*(void *)(*a3 + 352) + 8) != *v56)
  {
    uint64_t v57 = *(const void **)(a4 + 240);
    if (v57
    {
      long long v59 = v58;
      uint64_t v60 = *(std::__shared_weak_count **)(a4 + 248);
      if (v60) {
        atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!*(_DWORD *)(*(void *)(a1 + 280) + 4))
      {
        quasar::getTopChoice(*(void *)(*a3 + 352), 1, &__p);
        quasar::getTokensEndTime(*(uint64_t ***)(*a3 + 352), &v216);
        LODWORD(v209.__r_.__value_.__l.__data_) = 0;
        LODWORD(v201.__r_.__value_.__l.__data_) = 0;
        quasar::ResultStreamStabilizer::getPartialResultsInfo(v59, 1, &v214);
        quasar::Decoder::calculateStabilityMetrics(&v214, (uint64_t)&__p, (uint64_t)&v216, &v209, &v201);
        uint64_t v61 = *(void *)(a1 + 648);
        std::string::basic_string[abi:ne180100]<0>(&v213, "PartialResultsAvgLagMs");
        *(double *)&v210.__r_.__value_.__l.__data_ = *(float *)&v201.__r_.__value_.__l.__data_;
        quasar::SpeechRequestResultData::addAA(v61, (long long *)&v213, (double *)&v210, 0);
        if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v213.__r_.__value_.__l.__data_);
        }
        uint64_t v62 = *(void *)(a1 + 648);
        *(double *)(v62 + 88) = *(float *)&v201.__r_.__value_.__l.__data_;
        std::string::basic_string[abi:ne180100]<0>(&v213, "PartialResultsToggleCount");
        *(double *)&v210.__r_.__value_.__l.__data_ = (double)SLODWORD(v209.__r_.__value_.__l.__data_);
        quasar::SpeechRequestResultData::addAA(v62, (long long *)&v213, (double *)&v210, 0);
        if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v213.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)(*(void *)(a1 + 648) + 96) = v209.__r_.__value_.__l.__data_;
        LODWORD(v209.__r_.__value_.__l.__data_) = 0;
        LODWORD(v201.__r_.__value_.__l.__data_) = 0;
        std::string::size_type size = v214.__r_.__value_.__l.__size_;
        std::string::size_type v63 = v214.__r_.__value_.__r.__words[0];
        while (size != v63)
        {
          if (*(char *)(size - 9) < 0) {
            operator delete(*(void **)(size - 32));
          }
          size -= 32;
        }
        v214.__r_.__value_.__l.__size_ = v63;
        quasar::ResultStreamStabilizer::getPartialResultsInfo(v59, 0, &v213);
        std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)&v214);
        std::string v214 = v213;
        memset(&v213, 0, sizeof(v213));
        v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&v213;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
        quasar::Decoder::calculateStabilityMetrics(&v214, (uint64_t)&__p, (uint64_t)&v216, &v209, &v201);
        uint64_t v188 = *(void *)(a1 + 648);
        std::string::basic_string[abi:ne180100]<0>(&v213, "FasterPartialResultsAvgLagMs");
        *(double *)&v210.__r_.__value_.__l.__data_ = *(float *)&v201.__r_.__value_.__l.__data_;
        quasar::SpeechRequestResultData::addAA(v188, (long long *)&v213, (double *)&v210, 0);
        if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v213.__r_.__value_.__l.__data_);
        }
        uint64_t v189 = *(void *)(a1 + 648);
        *(double *)(v189 + 104) = *(float *)&v201.__r_.__value_.__l.__data_;
        std::string::basic_string[abi:ne180100]<0>(&v213, "FasterPartialResultsToggleCount");
        *(double *)&v210.__r_.__value_.__l.__data_ = (double)SLODWORD(v209.__r_.__value_.__l.__data_);
        quasar::SpeechRequestResultData::addAA(v189, (long long *)&v213, (double *)&v210, 0);
        if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v213.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)(*(void *)(a1 + 648) + 112) = v209.__r_.__value_.__l.__data_;
        v213.__r_.__value_.__r.__words[0] = (std::string::size_type)&v214;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v213);
        if (SBYTE7(v217) < 0) {
          operator delete((void *)v216);
        }
        if (SBYTE7(v236) < 0) {
          operator delete((void *)__p);
        }
      }
    }
    else
    {
      uint64_t v60 = 0;
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v250 = 0u;
      long long v251 = 0u;
      long long v248 = 0u;
      long long v249 = 0u;
      long long v246 = 0u;
      long long v247 = 0u;
      long long v244 = 0u;
      long long v245 = 0u;
      long long v242 = 0u;
      long long v243 = 0u;
      long long v240 = 0u;
      long long v241 = 0u;
      long long v238 = 0u;
      long long v239 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Shortest path cost: ", 20);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    if (v60) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v60);
    }
  }
  uint64_t v65 = *a3;
  if (*(void *)(*a3 + 352))
  {
    unint64_t v66 = (std::__shared_weak_count *)a3[1];
    v212[0] = *a3;
    v212[1] = (uint64_t)v66;
    if (v66) {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    quasar::SpeechRecognizer::updateFinalRecogStats(a1, v212, a4);
    if (v66) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v66);
    }
    long long v67 = (std::__shared_weak_count *)a3[1];
    v211[0] = *a3;
    v211[1] = (uint64_t)v67;
    if (v67) {
      atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    quasar::SpeechRecognizer::writeToOfflineRecogResultStream(a1, v211);
    if (v67) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v67);
    }
    unsigned int v190 = v23;
    unsigned int v192 = v20;
    v191 = (char *)a4;
    uint64_t v68 = *(void *)(*a3 + 584);
    if (*(void *)(*a3 + 592) == v68)
    {
      uint64_t v194 = 0;
      char v72 = 0;
      BOOL v71 = 0;
    }
    else
    {
      uint64_t v69 = 0;
      unint64_t v70 = 0;
      BOOL v71 = 0;
      uint64_t v194 = 0;
      char v72 = 0;
      char v73 = a3;
      do
      {
        uint64_t v74 = (_DWORD *)(v68 + v69);
        unsigned int v75 = v74[2];
        unsigned int v76 = v75 - 1;
        if (*v74 != 1 || v76 > 1)
        {
          v72 |= *v74 == 0 && v76 < 2;
          if (*v74 == 0 && v76 < 2) {
            BOOL v71 = v75 == 2;
          }
        }
        else
        {
          LOBYTE(v194) = v75 == 2;
          BYTE4(v194) = 1;
        }
        unsigned int v78 = v74[1];
        uint64_t v79 = *(void *)(a1 + 648);
        std::to_string((std::string *)&v216, v70);
        clockid_t v80 = std::string::insert((std::string *)&v216, 0, "lmeStatus");
        long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
        *(void *)&long long v236 = *((void *)&v80->__r_.__value_.__l + 2);
        long long __p = v81;
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        quasar::lmeDataStatusString(v78, &v210);
        uint64_t v82 = std::string::append(&v210, "-");
        long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
        v213.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v83;
        v82->__r_.__value_.__l.__size_ = 0;
        v82->__r_.__value_.__r.__words[2] = 0;
        v82->__r_.__value_.__r.__words[0] = 0;
        quasar::lmeUsageStatusString(v75, &v209);
        if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v84 = &v209;
        }
        else {
          unint64_t v84 = (std::string *)v209.__r_.__value_.__r.__words[0];
        }
        if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v85 = HIBYTE(v209.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v85 = v209.__r_.__value_.__l.__size_;
        }
        int v86 = std::string::append(&v213, (const std::string::value_type *)v84, v85);
        long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v214.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        quasar::SpeechRequestResultData::addDump(v79, &__p, &v214);
        a3 = v73;
        if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v214.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v209.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v213.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v210.__r_.__value_.__l.__data_);
        }
        if (SBYTE7(v236) < 0) {
          operator delete((void *)__p);
        }
        if (SBYTE7(v217) < 0) {
          operator delete((void *)v216);
        }
        ++v70;
        uint64_t v68 = *(void *)(*v73 + 584);
        v69 += 40;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*v73 + 592) - v68) >> 3) > v70);
    }
    uint64_t v105 = *(void *)(a1 + 648);
    std::string::basic_string[abi:ne180100]<0>(&__p, "jitLmeUsed");
    *(double *)&long long v216 = (double)(BYTE4(v194) & 1);
    quasar::SpeechRequestResultData::addAA(v105, &__p, (double *)&v216, 1);
    unint64_t v106 = v191;
    if (SBYTE7(v236) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v107 = *(void *)(a1 + 648);
    std::string::basic_string[abi:ne180100]<0>(&__p, "aotLmeUsed");
    *(double *)&long long v216 = (double)(v72 & 1);
    quasar::SpeechRequestResultData::addAA(v107, &__p, (double *)&v216, 1);
    if (SBYTE7(v236) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v108 = *(void *)(a1 + 648);
    std::string::basic_string[abi:ne180100]<0>(&__p, "jitLmeRecognized");
    *(double *)&long long v216 = (double)(v194 & 1);
    quasar::SpeechRequestResultData::addAA(v108, &__p, (double *)&v216, 1);
    if (SBYTE7(v236) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v109 = *(void *)(a1 + 648);
    std::string::basic_string[abi:ne180100]<0>(&__p, "aotLmeRecognized");
    *(double *)&long long v216 = (double)v71;
    quasar::SpeechRequestResultData::addAA(v109, &__p, (double *)&v216, 1);
    if (SBYTE7(v236) < 0) {
      operator delete((void *)__p);
    }
    quasar::extendEndTime(*(void *)(*a3 + 352), v192);
    std::string::basic_string[abi:ne180100]<0>(&v214, "");
    uint64_t v110 = *(void *)(*a3 + 352);
    long long v111 = *(const quasar::Token ***)v110;
    if (*(void *)v110 != *(void *)(v110 + 8))
    {
      LOBYTE(__p) = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)&__p + 1, "▁");
      quasar::formatResultTokens(v111, &__p);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v214.__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v216;
      v214.__r_.__value_.__r.__words[2] = v217;
      BYTE7(v217) = 0;
      LOBYTE(v216) = 0;
      if (SHIBYTE(v236) < 0) {
        operator delete(*((void **)&__p + 1));
      }
    }
    uint64_t v112 = *(void *)(a1 + 648);
    std::string::basic_string[abi:ne180100]<0>(&__p, "finalResultTokens");
    std::operator+<char>();
    int v113 = std::string::append(&v213, "\"");
    long long v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
    *(void *)&long long v217 = *((void *)&v113->__r_.__value_.__l + 2);
    long long v216 = v114;
    v113->__r_.__value_.__l.__size_ = 0;
    v113->__r_.__value_.__r.__words[2] = 0;
    v113->__r_.__value_.__r.__words[0] = 0;
    quasar::SpeechRequestResultData::addDump(v112, &__p, (const std::string *)&v216);
    if (SBYTE7(v217) < 0) {
      operator delete((void *)v216);
    }
    if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v213.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v236) < 0) {
      operator delete((void *)__p);
    }
    quasar::RecogResult::RecogResult((quasar::RecogResult *)&__p);
    uint64_t v115 = *(void *)(*(void *)(a1 + 48) + 1544);
    long long v117 = *(uint64_t **)(v115 + 24);
    int v116 = *(uint64_t **)(v115 + 32);
    if (v116 == v117
      || (char v118 = **(void ***)(*a3 + 352), *(void **)(*(void *)(*a3 + 352) + 8) == v118)
      || *(void *)(**(void **)(*a3 + 352) + 8) == *v118)
    {
      int v119 = 0;
    }
    else
    {
      while (1)
      {
        LODWORD(v210.__r_.__value_.__l.__data_) = -1;
        if (quasar::isTokenSpanPrefixOf(**(uint64_t ***)(*a3 + 352), v117, 1, (int *)&v210)) {
          break;
        }
        v117 += 3;
        if (v117 == v116)
        {
          int v119 = 3;
          unint64_t v106 = v191;
          goto LABEL_204;
        }
      }
      if (SLODWORD(v210.__r_.__value_.__l.__data_) >= 1) {
        int v119 = 1;
      }
      else {
        int v119 = 2;
      }
      unint64_t v106 = v191;
      if (quasar::gLogLevel > 4)
      {
        long long v231 = 0u;
        long long v232 = 0u;
        long long v229 = 0u;
        long long v230 = 0u;
        long long v227 = 0u;
        long long v228 = 0u;
        long long v225 = 0u;
        long long v226 = 0u;
        long long v223 = 0u;
        long long v224 = 0u;
        long long v221 = 0u;
        long long v222 = 0u;
        long long v219 = 0u;
        long long v220 = 0u;
        long long v217 = 0u;
        long long v218 = 0u;
        long long v216 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v216);
        v184 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v216, (uint64_t)"Matched trigger phrase: ", 24);
        quasar::tokens2Str(v117, &v213);
        if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v185 = &v213;
        }
        else {
          uint64_t v185 = (std::string *)v213.__r_.__value_.__r.__words[0];
        }
        if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v186 = HIBYTE(v213.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v186 = v213.__r_.__value_.__l.__size_;
        }
        uint64_t v187 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)v185, v186);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)", with index: ", 14);
        std::ostream::operator<<();
        if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v213.__r_.__value_.__l.__data_);
        }
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v216);
      }
    }
LABEL_204:
    char v120 = *(uint64_t **)(a1 + 616);
    long long v121 = (uint64_t **)(*(void *)(*(void *)(a1 + 280) + 24) + 344);
    long long v122 = (uint64_t *)*a3;
    uint64_t v123 = *(std::__shared_weak_count **)(*a3 + 360);
    v207 = *(uint64_t **)(*a3 + 352);
    v208 = v123;
    if (v123)
    {
      atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v122 = (uint64_t *)*a3;
    }
    uint64_t v124 = (std::__shared_weak_count *)v122[50];
    v205 = (void **)v122[49];
    uint64_t v206 = v124;
    if (v124)
    {
      atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v122 = (uint64_t *)*a3;
    }
    quasar::MuxHelper::finalizeResult(v120, v121, &v207, &v205, v122 + 46);
    if (v206) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v206);
    }
    if (v208) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v208);
    }
    if (*(unsigned char *)(*a3 + 1088))
    {
      uint64_t v125 = *(atomic_ullong **)(a1 + 288);
      v204[0] = *(quasar::SpeechRequestData **)(a1 + 280);
      v204[1] = (quasar::SpeechRequestData *)v125;
      if (v125) {
        atomic_fetch_add_explicit(v125 + 1, 1uLL, memory_order_relaxed);
      }
      quasar::SpeechRecognizer::splitComposedLmeTokens((uint64_t)a2, (uint64_t)a3, v204);
      if (v125) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v125);
      }
    }
    uint64_t v126 = *(void *)(a1 + 280);
    uint64_t v128 = *(void *)(v126 + 24);
    long long v127 = *(std::__shared_weak_count **)(v126 + 32);
    uint64_t v202 = v128;
    uint64_t v203 = v127;
    if (v127) {
      atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v129 = quasar::RecogResult::setParams((uint64_t)&__p, &v202);
    long long v130 = quasar::Token::resetSpacing(*(uint64_t ***)(*a3 + 352));
    uint64_t v131 = quasar::RecogResult::setResultChoices(v129, (uint64_t)v130);
    uint64_t v132 = quasar::RecogResult::setResultMuxIds(v131, *a3 + 368);
    uint64_t v133 = (void *)quasar::RecogResult::setResultCosts(v132, *(void *)(*a3 + 392));
    uint64_t v134 = quasar::RecogResult::setLmeStatus(v133, (uint64_t *)(*a3 + 584));
    uint64_t v135 = quasar::RecogResult::setLastWordClipped((uint64_t)v134, *(unsigned char *)(*a3 + 144));
    uint64_t v136 = quasar::RunAsyncParams::setEndpointStartMs(v135, *a3 + 656);
    uint64_t v137 = quasar::RecogResult::setAudioAnalytics(v136, (const quasar::AudioAnalytics *)(*a3 + 696));
    uint64_t v138 = quasar::RecogResult::setJsonInfo(v137, (uint64_t)v254);
    uint64_t v139 = quasar::RecogResult::setWhisperScore(v138, *(float *)(*a3 + 512));
    uint64_t v140 = quasar::RecogResult::setWhisperDetected(v139, *(unsigned char *)(*a3 + 516));
    uint64_t v141 = quasar::RecogResult::setUtteranceStartMillis(v140, v190);
    uint64_t v142 = quasar::RecogResult::setUtteranceDurationMillis(v141, v192);
    uint64_t IsFinal = quasar::RecogResult::setIsFinal(v142, *v106);
    uint64_t v144 = quasar::RecogResult::setSNR(IsFinal, v215);
    uint64_t v145 = quasar::RecogResult::setFingerprintDetected(v144, *(_DWORD *)(*a3 + 680));
    uint64_t v146 = quasar::RecogResult::setWatermarkDetected(v145, *(_DWORD *)(*a3 + 684));
    uint64_t v147 = quasar::RecogResult::setWatermarkPeakAvg(v146, *(double *)(*a3 + 688));
    BOOL v148 = (std::string *)quasar::RecogResult::setLatnnMitigatorResult(v147, *a3 + 872);
    int v149 = quasar::RecogResult::setSecondaryLatnnMitigatorResult(v148, *a3 + 928);
    uint64_t v150 = quasar::RecogResult::setVoiceTriggerPayloadResult((uint64_t)v149, v119);
    uint64_t v151 = quasar::RecogResult::setLeftContextForItn(v150, (uint64_t)(a2 + 768));
    uint64_t v152 = quasar::RecogResult::setRightContextForItn(v151, (uint64_t)(a2 + 792));
    uint64_t UtteranceAfterResume = quasar::RecogResult::setFirstUtteranceAfterResume(v152, a2[816]);
    uint64_t v154 = quasar::RecogResult::setEosLikelihood(UtteranceAfterResume, *(double *)(*a3 + 1080));
    uint64_t v155 = quasar::RecogResult::setFormattingInfo(v154, *a3 + 1136);
    quasar::RecogResult::setNumTokensExcludingTriggerPhrase(v155, *(_DWORD *)(*a3 + 1092));
    if (v203) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v203);
    }
    if (*(unsigned char *)(*(void *)(a1 + 280) + 216))
    {
      if (!a2[852])
      {
        quasar::DecoderChainOutput::getWordHypLattice((quasar::DecoderChainOutput *)*a3, (const quasar::DecoderPassData *)a2, &v216);
        quasar::RecogResult::setWordHypLattice((uint64_t)&__p, (uint64_t *)&v216);
        if (*((void *)&v216 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v216 + 1));
        }
      }
    }
    uint64_t v156 = *a3;
    v157 = *(uint64_t ***)(*a3 + 408);
    if (v157)
    {
      uint64_t v158 = quasar::Token::resetSpacing(v157);
      quasar::RecogResult::setResultChoicesV2((uint64_t)&__p, (uint64_t)v158);
      uint64_t v156 = *a3;
      if (**(void **)(*a3 + 408) != *(void *)(*(void *)(*a3 + 408) + 8))
      {
        uint64_t v159 = *(void *)(a1 + 648);
        std::string::basic_string[abi:ne180100]<0>(&v213, "finalResultTokensV2");
        v160 = **(const quasar::Token ****)(*a3 + 408);
        LOBYTE(v216) = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)&v216 + 1, "▁");
        quasar::formatResultTokens(v160, &v216);
        v161 = std::string::insert(&v201, 0, "\"");
        long long v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
        v209.__r_.__value_.__r.__words[2] = v161->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v209.__r_.__value_.__l.__data_ = v162;
        v161->__r_.__value_.__l.__size_ = 0;
        v161->__r_.__value_.__r.__words[2] = 0;
        v161->__r_.__value_.__r.__words[0] = 0;
        v163 = std::string::append(&v209, "\"");
        long long v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
        v210.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v164;
        v163->__r_.__value_.__l.__size_ = 0;
        v163->__r_.__value_.__r.__words[2] = 0;
        v163->__r_.__value_.__r.__words[0] = 0;
        quasar::SpeechRequestResultData::addDump(v159, (long long *)&v213, &v210);
        if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v210.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v209.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v201.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v217) < 0) {
          operator delete(*((void **)&v216 + 1));
        }
        if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v213.__r_.__value_.__l.__data_);
        }
        uint64_t v156 = *a3;
      }
    }
    float v165 = (*(float (**)(void, long long *, uint64_t))(**(void **)(v156 + 560) + 40))(*(void *)(v156 + 560), &__p, 1);
    quasar::DecoderChainOutput::updatePersistentData((quasar::DecoderChainOutput *)*a3, v165);
    quasar::RecogResult::~RecogResult((quasar::RecogResult *)&__p);
    if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v214.__r_.__value_.__l.__data_);
    }
    goto LABEL_248;
  }
  uint64_t v88 = *(const void **)(a4 + 240);
  if (!v88
  {
    v166 = (std::__shared_weak_count *)a3[1];
    v196[0] = v65;
    v196[1] = (uint64_t)v166;
    if (v166) {
      atomic_fetch_add_explicit(&v166->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    quasar::SpeechRecognizer::writeToOfflineRecogResultStream(a1, v196);
    if (v166) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v166);
    }
    v167 = (std::__shared_weak_count *)a3[1];
    v195[0] = *a3;
    v195[1] = (uint64_t)v167;
    if (v167) {
      atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    quasar::SpeechRecognizer::updateFinalRecogStats(a1, v195, a4);
    if (v167) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v167);
    }
LABEL_248:
    uint64_t v168 = 1;
    goto LABEL_273;
  }
  unint64_t v89 = *(std::__shared_weak_count **)(a4 + 248);
  if (v89)
  {
    atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v250 = 0u;
    long long v251 = 0u;
    long long v248 = 0u;
    long long v249 = 0u;
    long long v246 = 0u;
    long long v247 = 0u;
    long long v244 = 0u;
    long long v245 = 0u;
    long long v242 = 0u;
    long long v243 = 0u;
    long long v240 = 0u;
    long long v241 = 0u;
    long long v238 = 0u;
    long long v239 = 0u;
    long long v236 = 0u;
    long long v237 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Lattice was not NULL, but failed to generate any choices", 56);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  }
  if (*(_DWORD *)(*(void *)(a1 + 280) + 4))
  {
    uint64_t v90 = *(void *)(a1 + 648);
    std::string::basic_string[abi:ne180100]<0>(&__p, "uttDetectAbort");
    std::string::basic_string[abi:ne180100]<0>(&v216, "NoChoices");
    quasar::SpeechRequestResultData::addDump(v90, &__p, (const std::string *)&v216);
    if (SBYTE7(v217) < 0) {
      operator delete((void *)v216);
    }
    if (SBYTE7(v236) < 0) {
      operator delete((void *)__p);
    }
  }
  long long v91 = (std::__shared_weak_count *)a3[1];
  v200[0] = *a3;
  v200[1] = (uint64_t)v91;
  if (v91) {
    atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SpeechRecognizer::writeToOfflineRecogResultStream(a1, v200);
  if (v91) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v91);
  }
  uint64_t v92 = (std::__shared_weak_count *)a3[1];
  v199[0] = *a3;
  v199[1] = (uint64_t)v92;
  if (v92) {
    atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SpeechRecognizer::updateFinalRecogStats(a1, v199, a4);
  if (v92) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v92);
  }
  quasar::RecogResult::RecogResult((quasar::RecogResult *)&__p);
  uint64_t v93 = *(void *)(a1 + 280);
  uint64_t v95 = *(void *)(v93 + 24);
  uint64_t v94 = *(std::__shared_weak_count **)(v93 + 32);
  uint64_t v197 = v95;
  uint64_t v198 = v94;
  if (v94) {
    atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v96 = quasar::RecogResult::setParams((uint64_t)&__p, &v197);
  uint64_t v97 = (void *)quasar::RecogResult::setLastWordClipped(v96, *(unsigned char *)(*a3 + 144));
  long long v98 = quasar::RecogResult::setLmeStatus(v97, (uint64_t *)(*a3 + 584));
  uint64_t v99 = quasar::RecogResult::setJsonInfo((uint64_t)v98, (uint64_t)v254);
  uint64_t v100 = quasar::RecogResult::setWhisperScore(v99, *(float *)(*a3 + 512));
  uint64_t v101 = quasar::RecogResult::setWhisperDetected(v100, *(unsigned char *)(*a3 + 516));
  uint64_t v102 = quasar::RecogResult::setUtteranceStartMillis(v101, v23);
  uint64_t v103 = quasar::RecogResult::setUtteranceDurationMillis(v102, v20);
  uint64_t v104 = quasar::RecogResult::setIsFinal(v103, *(unsigned char *)a4);
  quasar::RecogResult::setSNR(v104, v215);
  if (v198) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v198);
  }
  (*(void (**)(void, long long *, void))(**(void **)(*a3 + 560) + 40))(*(void *)(*a3 + 560), &__p, 0);
LABEL_272:
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&__p);
  uint64_t v168 = 0;
LABEL_273:
  if (SHIBYTE(v255) < 0) {
    operator delete(v254[0]);
  }
  return v168;
}

void sub_1B2022C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a58);
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&STACK[0x290]);
  if (a56 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v58 - 137) < 0) {
    operator delete(*(void **)(v58 - 160));
  }
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::updateCachedTokensWithToken(uint64_t a1, std::string::size_type a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::size_type v5 = *(void *)a2;
    int64_t v4 = *(void *)(a2 + 8);
  }
  else
  {
    int64_t v4 = *(unsigned __int8 *)(a2 + 23);
    std::string::size_type v5 = a2;
  }
  clockid_t v6 = (unsigned char *)(v5 + v4);
  if (v4 >= 1)
  {
    int v7 = (void *)v5;
    do
    {
      uint64_t v8 = memchr(v7, 92, v4);
      if (!v8) {
        break;
      }
      if (*v8 == 92) {
        goto LABEL_10;
      }
      int v7 = v8 + 1;
      int64_t v4 = v6 - (unsigned char *)v7;
    }
    while (v6 - (unsigned char *)v7 > 0);
  }
  uint64_t v8 = v6;
LABEL_10:
  if (v8 == v6) {
    std::string::size_type v9 = -1;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)&v8[-v5];
  }
  std::string::basic_string(&v17, (const std::string *)a2, 0, v9, (std::allocator<char> *)&v18);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v17;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 560), (unsigned __int8 *)a2))
  {
    v17.__r_.__value_.__r.__words[0] = a2;
    char v10 = std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 560, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (long long **)&v17);
    if (quasar::LmeDataFactoryBase::PronSet::empty((quasar::LmeDataFactoryBase::PronSet *)(v10 + 40)))
    {
      unint64_t v11 = *(void *)(a1 + 544);
      if (v11 >= *(void *)(a1 + 552))
      {
        uint64_t v12 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)(a1 + 536), (const quasar::Token *)a2);
      }
      else
      {
        quasar::Token::Token(*(std::string **)(a1 + 544), (const quasar::Token *)a2);
        uint64_t v12 = v11 + 224;
        *(void *)(a1 + 544) = v11 + 224;
      }
      *(void *)(a1 + 544) = v12;
      double v13 = *(unsigned __int8 **)(a1 + 536);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v12 - (uint64_t)v13) >> 5)) >= 0x32)
      {
        std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__erase_unique<std::string>((void *)(a1 + 560), v13);
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>((long long *)(*(void *)(a1 + 536) + 224), *(long long **)(a1 + 544), *(void *)(a1 + 536));
        uint64_t v15 = v14;
        uint64_t v16 = *(void *)(a1 + 544);
        if (v16 != v14)
        {
          do
            quasar::Token::~Token((void **)(v16 - 224));
          while (v16 != v15);
        }
        *(void *)(a1 + 544) = v15;
      }
      *(unsigned char *)(a1 + 528) = 1;
    }
  }
}

void sub_1B20232A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 544) = v2;
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRecognizer::getTraining@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 600);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 120);
    uint64_t v3 = *(void *)(v2 + 128);
    *a2 = v4;
    a2[1] = v3;
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void quasar::SpeechRecognizer::writeTrainingData(quasar::SpeechRecognizer *this, const quasar::SpeechRecognizer::RecogData *a2)
{
  uint64_t v2 = *((void *)this + 75);
  if (!v2) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)(v2 + 120);
  std::string::size_type v5 = *(std::__shared_weak_count **)(v2 + 128);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      goto LABEL_14;
    }
    int v7 = *(unsigned __int8 *)(*(void *)(*((void *)this + 35) + 24) + 52);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (!v7)
    {
LABEL_14:
      if (quasar::gLogLevel >= 5)
      {
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v43 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Training is not enabled, skip training", 38);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
      }
      return;
    }
  }
  else if (!v6 || !*(unsigned char *)(*(void *)(*((void *)this + 35) + 24) + 52))
  {
    goto LABEL_14;
  }
  if (!**(void **)(*((void *)this + 35) + 24))
  {
    if (quasar::gLogLevel < 4) {
      return;
    }
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Result stream does not exist, skip training.", 44);
    goto LABEL_18;
  }
  uint64_t v8 = (quasar::DecoderChainPersistentData *)*((void *)a2 + 28);
  if (!v8
    || (double AverageConfidence = quasar::DecoderChainPersistentData::getAverageConfidence(v8),
        *(float *)&AverageConfidence < *(float *)(*((void *)this + 75) + 84)))
  {
    if (quasar::gLogLevel < 4) {
      return;
    }
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Average confidence: ", 20);
    quasar::DecoderChainPersistentData::getAverageConfidence(*((quasar::DecoderChainPersistentData **)a2 + 28));
    char v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" is below threshold: ", 21);
    unint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", skip training", 15);
LABEL_18:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v43);
    return;
  }
  uint64_t v12 = (void *)*((void *)a2 + 18);
  if (v12 && v12[5] && *((void *)a2 + 22) != *((void *)a2 + 23))
  {
    int v13 = **((_DWORD **)a2 + 20);
    long long v41 = 0u;
    long long v42 = 0u;
    long long v40 = 0u;
    if (quasar::gLogLevel >= 4)
    {
      long long v58 = 0uLL;
      long long v59 = 0uLL;
      long long v56 = 0uLL;
      long long v57 = 0uLL;
      long long v54 = 0uLL;
      long long v55 = 0uLL;
      long long v52 = 0uLL;
      long long v53 = 0uLL;
      long long v50 = 0uLL;
      long long v51 = 0uLL;
      long long v48 = 0uLL;
      long long v49 = 0uLL;
      long long v46 = 0uLL;
      long long v47 = 0uLL;
      long long v44 = 0uLL;
      long long v45 = 0uLL;
      long long v43 = 0uLL;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Populating training data, original feature size: ", 49);
      uint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", alignment size: ", 18);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v43);
      uint64_t v12 = (void *)*((void *)a2 + 18);
    }
    uint64_t v36 = (char *)this + 280;
    double v37 = this;
    if (!v12[5])
    {
      unint64_t v18 = 0;
      unint64_t v17 = 0;
      goto LABEL_50;
    }
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unint64_t v18 = 0;
    uint64_t v19 = (v13 + 1);
    while (1)
    {
      uint64_t v38 = v15;
      if (v13 == -1) {
        goto LABEL_45;
      }
      uint64_t v20 = 0;
      unint64_t v21 = *(void *)(v12[1] + 8 * (v12[4] / 0x55uLL)) + 48 * (v12[4] % 0x55uLL);
      while (1)
      {
        uint64_t v22 = *((void *)a2 + 22);
        if (v16 + v20 >= (unint64_t)((*((void *)a2 + 23) - v22) >> 3)) {
          break;
        }
        int v23 = *(_DWORD *)(v22 + v15);
        if (v20)
        {
          int v24 = *(_DWORD *)(v22 + 8 * v16);
          if (v23 != -1 && v23 != v24)
          {
LABEL_38:
            kaldi::CuMatrix<float>::CuMatrix(v39, 1, 1, 0, 0, 0);
            *(float *)v39[1].i32[0] = (float)v23;
            uint64_t v26 = *(unsigned __int8 *)(*((void *)a2 + 22) + v15 + 4);
            kaldi::CuMatrix<float>::CuMatrix(&v43, v21, 111);
            kaldi::CuMatrix<float>::CuMatrix(&v46, v39, 111);
            LOBYTE(v49) = v26;
            std::deque<quasar::SpeakerCodeTraining::AlignedData>::push_back(&v40, (uint64_t)&v43);
            v18 += v26;
            if (!v26) {
              ++v17;
            }
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v46);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v43);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v39);
          }
        }
        else if (v23 != -1)
        {
          goto LABEL_38;
        }
        ++v20;
        v15 += 8;
        if (v19 == v20) {
          goto LABEL_45;
        }
      }
      if (quasar::gLogLevel >= 5)
      {
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v43 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Reaches the end of labels", 25);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
      }
LABEL_45:
      std::deque<kaldi::CuMatrix<float>>::pop_front(*((int64x2_t **)a2 + 18));
      v16 += v19;
      uint64_t v12 = (void *)*((void *)a2 + 18);
      uint64_t v15 = v38 + 8 * (v13 + 1);
      if (!v12[5])
      {
LABEL_50:
        float v27 = *(float *)(*((void *)v37 + 75) + 88) * (float)v17;
        if (v18 >= (unint64_t)v27) {
          unint64_t v28 = (unint64_t)v27;
        }
        else {
          unint64_t v28 = v18;
        }
        if ((void)v41 == *((void *)&v40 + 1))
        {
          clockid_t v29 = 0;
          uint64_t v33 = 0;
          uint64_t v34 = ((unint64_t)(*((void *)&v42 + 1) + v42) * (unsigned __int128)0xA41A41A41A41A41BLL) >> 64;
          uint64_t v32 = (char *)(*((void *)&v40 + 1)
                       + 8 * ((v34 + ((unint64_t)(*((void *)&v42 + 1) + v42 - v34) >> 1)) >> 5));
        }
        else
        {
          clockid_t v29 = (int32x2_t *)(*(void *)(*((void *)&v40 + 1) + 8 * ((unint64_t)v42 / 0x27))
                            + 104 * ((unint64_t)v42 % 0x27));
          uint64_t v30 = ((unint64_t)(*((void *)&v42 + 1) + v42) * (unsigned __int128)0xA41A41A41A41A41BLL) >> 64;
          unint64_t v31 = (v30 + ((unint64_t)(*((void *)&v42 + 1) + v42 - v30) >> 1)) >> 5;
          uint64_t v32 = (char *)(*((void *)&v40 + 1) + 8 * v31);
          uint64_t v33 = (int32x2_t *)(*(void *)v32 + 104 * (*((void *)&v42 + 1) + v42 - 39 * v31));
        }
        kaldi::Shuffle<std::__deque_iterator<quasar::SpeakerCodeTraining::AlignedData,quasar::SpeakerCodeTraining::AlignedData*,quasar::SpeakerCodeTraining::AlignedData&,quasar::SpeakerCodeTraining::AlignedData**,long,39l>>((char *)(*((void *)&v40 + 1) + 8 * ((unint64_t)v42 / 0x27)), v29, v32, v33, 4);
        if (quasar::gLogLevel >= 4)
        {
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v43 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Training data is populated and shuffled, aligned data size: ", 60);
          uint64_t v35 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", silence frame count: ", 23);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v43);
        }
        if (*((void *)&v42 + 1)) {
          (*(void (**)(void, long long *, unint64_t))(***(void ***)(*(void *)v36 + 24) + 128))(**(void **)(*(void *)v36 + 24), &v40, v28);
        }
        std::deque<quasar::SpeakerCodeTraining::AlignedData>::~deque[abi:ne180100](&v40);
        return;
      }
    }
  }
  if (quasar::gLogLevel >= 2)
  {
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Feature buffer is null or reversed pdf is empty, skip training.", 63);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v43);
  }
}

void sub_1B2023978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::deque<quasar::SpeakerCodeTraining::AlignedData>::~deque[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::createDecoder(uint64_t a1@<X2>, void *a2@<X8>)
{
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v11, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a1 + 23);
  if (v6 >= 0) {
    int v7 = (const std::string::value_type *)a1;
  }
  else {
    int v7 = *(const std::string::value_type **)a1;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a1 + 8);
  }
  std::string::size_type v9 = std::string::append(&v12, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  quasar::Decoder::createDecoder(&v13, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B2023B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizer::createDecodable(uint64_t a1@<X2>, void *a2@<X8>)
{
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v11, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a1 + 23);
  if (v6 >= 0) {
    int v7 = (const std::string::value_type *)a1;
  }
  else {
    int v7 = *(const std::string::value_type **)a1;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a1 + 8);
  }
  std::string::size_type v9 = std::string::append(&v12, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  quasar::Decodable::createDecodable(&v13, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1B2023C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<quasar::SpeakerCodeTraining::AlignedData>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 5;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = 39 * ((v6 - v5) >> 3) - 1;
  if (v6 == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == a1[5] + a1[4])
  {
    std::deque<quasar::SpeakerCodeTraining::AlignedData>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
  }
  if (v6 == v5)
  {
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = a1[5] + a1[4];
    uint64_t v9 = *(void *)(v5 + 8 * (v8 / 0x27)) + 104 * (v8 % 0x27);
  }
  uint64_t result = std::allocator<quasar::SpeakerCodeTraining::AlignedData>::construct[abi:ne180100]<quasar::SpeakerCodeTraining::AlignedData,quasar::SpeakerCodeTraining::AlignedData const&>((uint64_t)v4, v9, a2);
  ++*v4;
  return result;
}

void kaldi::Shuffle<std::__deque_iterator<quasar::SpeakerCodeTraining::AlignedData,quasar::SpeakerCodeTraining::AlignedData*,quasar::SpeakerCodeTraining::AlignedData&,quasar::SpeakerCodeTraining::AlignedData**,long,39l>>(char *a1, int32x2_t *a2, char *a3, int32x2_t *a4, int a5)
{
  if (a4 != a2)
  {
    uint64_t v7 = 39 * ((unint64_t)(a3 - a1) >> 3)
       - 991146299 * (((unint64_t)a4 - *(void *)a3) >> 3)
       + 991146299 * (((unint64_t)a2 - *(void *)a1) >> 3)
       - 1;
    if ((int)v7 >= 1)
    {
      kaldi::UniformRandomNumber::UniformRandomNumber(v12, 2147483646, (unsigned int *)1, (unsigned int *)0x3E8);
      if (a5 < 0) {
        a5 = time(0);
      }
      kaldi::UniformRandomNumber::SetRandomSeeds((kaldi::UniformRandomNumber *)v12, a5);
      uint64_t v9 = v7 + 1;
      do
      {
        int v10 = kaldi::UniformRandomNumber::Rand((kaldi::UniformRandomNumber *)v12, 0);
        std::string v13 = a1;
        uint64_t v14 = a2;
        std::__deque_iterator<quasar::SpeakerCodeTraining::AlignedData,quasar::SpeakerCodeTraining::AlignedData*,quasar::SpeakerCodeTraining::AlignedData&,quasar::SpeakerCodeTraining::AlignedData**,long,39l>::operator+=[abi:ne180100](&v13, v9 - 1);
        std::string v11 = v14;
        std::string v13 = a1;
        uint64_t v14 = a2;
        std::__deque_iterator<quasar::SpeakerCodeTraining::AlignedData,quasar::SpeakerCodeTraining::AlignedData*,quasar::SpeakerCodeTraining::AlignedData&,quasar::SpeakerCodeTraining::AlignedData**,long,39l>::operator+=[abi:ne180100](&v13, v10 % (int)v9);
        std::swap[abi:ne180100]<quasar::SpeakerCodeTraining::AlignedData>(v11, v14);
        --v9;
      }
      while (v9 > 1);
      kaldi::UniformRandomNumber::~UniformRandomNumber((kaldi::UniformRandomNumber *)v12);
    }
  }
}

void sub_1B2023E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::SpeechRecognizer::concatenateLabels(uint64_t a1, void *a2, uint64_t **a3, unsigned int a4)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 280) + 24) + 52))
  {
    uint64_t v7 = a2[22];
    uint64_t v6 = (uint64_t *)a2[23];
    unint64_t v8 = a2 + 22;
    if ((*(_DWORD *)(*(void *)(a1 + 600) + 64)
                      + *(_DWORD *)(*(void *)(a1 + 600) + 64) * *(_DWORD *)*(v8 - 2)) > (unint64_t)(((uint64_t)v6 - v7) >> 3))
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v29 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Recognition is not final, concatenating alignments, feature buffer size: ", 73);
        std::string v11 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", label buffer size: ", 21);
        std::string v12 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", pdfs size: ", 13);
        std::string v13 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", num frames: ", 14);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v29);
        uint64_t v6 = (uint64_t *)a2[23];
      }
      std::vector<std::pair<int,BOOL>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,BOOL> const*>,std::__wrap_iter<std::pair<int,BOOL> const*>>((uint64_t)v8, v6, *a3, a3[1], a3[1] - *a3);
      uint64_t v14 = a4;
      if (a4 != a3[1] - *a3)
      {
        unint64_t v15 = 0;
        uint64_t v16 = a2 + 24;
        unint64_t v17 = (char *)a2[23];
        do
        {
          if ((unint64_t)v17 >= *v16)
          {
            uint64_t v18 = (uint64_t)&v17[-*v8] >> 3;
            if ((unint64_t)(v18 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v19 = *v16 - *v8;
            uint64_t v20 = v19 >> 2;
            if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
              uint64_t v20 = v18 + 1;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v20;
            }
            int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 24), v21);
            int v24 = &v23[8 * v18];
            *(_DWORD *)int v24 = -1;
            void v24[4] = 0;
            uint64_t v26 = (char *)a2[22];
            uint64_t v25 = (char *)a2[23];
            float v27 = v24;
            if (v25 != v26)
            {
              do
              {
                uint64_t v28 = *((void *)v25 - 1);
                v25 -= 8;
                *((void *)v27 - 1) = v28;
                v27 -= 8;
              }
              while (v25 != v26);
              uint64_t v25 = (char *)*v8;
            }
            unint64_t v17 = v24 + 8;
            a2[22] = v27;
            a2[23] = v24 + 8;
            a2[24] = &v23[8 * v22];
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v17 = -1;
            void v17[4] = 0;
            v17 += 8;
          }
          a2[23] = v17;
          ++v15;
        }
        while (v14 - (a3[1] - *a3) > v15);
      }
      if (quasar::gLogLevel > 3)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v29 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Label concatenation is completed, label buffer size: ", 53);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v29);
      }
    }
  }
  else if (quasar::gLogLevel >= 5)
  {
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v29 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Training is not enabled, not concatenating labels.", 50);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v29);
  }
}

void sub_1B20241B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::SpeechRecognizer::splitComposedLmeTokens(uint64_t a1, uint64_t a2, quasar::SpeechRequestData **a3)
{
  *(void *)&long long v180 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  uint64_t v6 = *((void *)*a3 + 3);
  if (*(char *)(v6 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(v6 + 80), *(void *)(v6 + 88));
    uint64_t v5 = *a3;
  }
  else
  {
    std::string v152 = *(std::string *)(v6 + 80);
  }
  LmeDataStreams = (void **)quasar::SpeechRequestData::getLmeDataStreams(v5);
  int v149 = 0;
  uint64_t v150 = 0;
  uint64_t v151 = 0;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>(&v149, *LmeDataStreams, LmeDataStreams[1], ((char *)LmeDataStreams[1] - (char *)*LmeDataStreams) >> 4);
  uint64_t v9 = *(uint64_t ***)(*(void *)a2 + 352);
  int v10 = *v9;
  uint64_t v125 = v9[1];
  if (*v9 != v125)
  {
    while (1)
    {
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      long long v127 = v10;
      if (*v10 == v11) {
        goto LABEL_230;
      }
      int v13 = 0;
      do
      {
        v13 |= quasar::SpeechRecognizer::splitComposedLmeTokens(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData>,int)::$_0::operator()(v12);
        v12 += 224;
      }
      while (v12 != v11);
      if ((v13 & 1) == 0) {
        goto LABEL_230;
      }
      uint64_t v146 = 0;
      uint64_t v147 = 0;
      unint64_t v148 = 0;
      uint64_t v14 = v127;
      unint64_t v15 = (const quasar::Token *)*v127;
      uint64_t v16 = (const quasar::Token *)v127[1];
      uint64_t v126 = v16;
LABEL_10:
      if (v15 != v16) {
        break;
      }
      if (v14 != &v146) {
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)v14, v146, (uint64_t)v147, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v147 - v146) >> 5));
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v146;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_230:
      int v10 = v127 + 3;
      if (v127 + 3 == v125) {
        goto LABEL_231;
      }
    }
    uint64_t v128 = v15;
    quasar::Token::Token(&v133, v15);
    if (!quasar::SpeechRecognizer::splitComposedLmeTokens(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData>,int)::$_0::operator()((uint64_t)&v133))
    {
      uint64_t v22 = v147;
      if ((unint64_t)v147 < v148) {
        goto LABEL_23;
      }
      goto LABEL_40;
    }
    std::string::size_type size = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v137.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      uint64_t v22 = v147;
      if ((unint64_t)v147 < v148)
      {
LABEL_23:
        quasar::Token::Token(v147, (const quasar::Token *)&v133);
        int v23 = (std::string *)((char *)v22 + 224);
LABEL_41:
        uint64_t v147 = v23;
        goto LABEL_216;
      }
LABEL_40:
      int v23 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v146, (const quasar::Token *)&v133);
      goto LABEL_41;
    }
    int v18 = HIDWORD(v135);
    int v19 = v134;
    std::string::basic_string[abi:ne180100]<0>(&v178, " ");
    quasar::splitAndTrimNoEmpty(&v137, (char *)&v178, &__str);
    long long v123 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    v177.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v177);
    if (SHIBYTE(v178.__end_cap_.__value_) < 0) {
      operator delete(v178.__begin_);
    }
    memset(&v178, 0, sizeof(v178));
    int v124 = v19;
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v152.__r_.__value_.__l.__size_ != 17) {
        goto LABEL_33;
      }
      unint64_t v21 = (std::string *)v152.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) != 17) {
        goto LABEL_33;
      }
      unint64_t v21 = &v152;
    }
    std::string::size_type v24 = v21->__r_.__value_.__r.__words[0];
    std::string::size_type v25 = v21->__r_.__value_.__l.__size_;
    int v26 = v21->__r_.__value_.__s.__data_[16];
    if (v24 == 0x724F686372616553 && v25 == 0x6E6967617373654DLL && v26 == 103)
    {
      memset(&__str, 0, sizeof(__str));
      uint64_t v33 = quasar::QsrText::SingletonInstance(v20);
      quasar::QsrText::decodeQsrText(v33, (uint64_t)&v133, (uint64_t)&__str);
      std::string::basic_string[abi:ne180100]<0>(&p_str, " ");
      quasar::splitAndTrimNoEmpty(&__str, (char *)&p_str, &v177);
      std::vector<std::string>::__vdeallocate(&v178);
      std::vector<std::wstring> v178 = (std::vector<std::wstring>)v177;
      memset(&v177, 0, sizeof(v177));
      v171 = &v177;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v171);
      if (SHIBYTE(v176) < 0) {
        operator delete(p_str);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      goto LABEL_46;
    }
LABEL_33:
    std::string::basic_string[abi:ne180100]<0>(&v177, "~w00");
    quasar::splitAndTrimNoEmpty(&v133, (char *)&v177, &__str);
    std::vector<std::string>::__vdeallocate(&v178);
    std::vector<std::wstring> v178 = (std::vector<std::wstring>)__str;
    memset(&__str, 0, sizeof(__str));
    p_str = &__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v177.__r_.__value_.__l.__data_);
    }
    std::vector<int>::pointer begin = (std::string *)v178.__begin_;
    std::vector<std::wstring>::pointer end = v178.__end_;
    while (begin != (std::string *)end)
    {
      memset(&__str, 0, sizeof(__str));
      uint64_t v32 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v29);
      quasar::QsrText::decodeQsrText(v32, (uint64_t)begin, (uint64_t)&__str);
      long long v29 = std::string::operator=(begin, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      ++begin;
    }
LABEL_46:
    memset(&v177, 0, sizeof(v177));
    p_str = 0;
    uint64_t v175 = 0;
    unint64_t v176 = 0;
    uint64_t v34 = -1 - 1431655765 * ((unint64_t)((char *)v178.__end_ - (char *)v178.__begin_) >> 3);
    if ((v34 & 0x80000000) != 0) {
      goto LABEL_108;
    }
    long long v35 = 0;
    while (1)
    {
      long long v36 = &v178.__begin_[v34];
      std::wstring::size_type v37 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v36->__r_.__value_.__r.__words[2]) < 0)
      {
        long long v38 = (std::wstring *)v36->__r_.__value_.__r.__words[0];
        std::wstring::size_type v39 = v36->__r_.__value_.__l.__size_;
        if (v39)
        {
LABEL_52:
          long long v40 = (unsigned __int8 *)v38 + v39;
          long long v41 = v38;
          long long v42 = v40;
          do
          {
            long long v43 = (unsigned __int8 *)v41;
            long long v44 = (unsigned __int8 *)v41;
            while (1)
            {
              int v45 = *v44++;
              if (v45 == 92) {
                break;
              }
              long long v43 = v44;
              if (v44 == v40)
              {
                long long v43 = v42;
                goto LABEL_58;
              }
            }
            long long v41 = (std::wstring *)(v43 + 1);
            long long v42 = v43;
          }
          while (v44 != v40);
LABEL_58:
          if (v43 != v40 && v43 - (unsigned __int8 *)v38 != -1)
          {
            if ((v37 & 0x80) != 0)
            {
              long long v46 = (std::wstring *)v36->__r_.__value_.__r.__words[0];
              std::wstring::size_type v37 = v36->__r_.__value_.__l.__size_;
            }
            else
            {
              long long v46 = &v178.__begin_[v34];
            }
            long long v47 = (unsigned __int8 *)v46 + v37;
            if (v37)
            {
              long long v48 = v46;
              long long v49 = (std::wstring *)((char *)v46 + v37);
              do
              {
                long long v50 = v48;
                long long v51 = (unsigned __int8 *)v48;
                while (1)
                {
                  int v52 = *v51++;
                  if (v52 == 92) {
                    break;
                  }
                  long long v50 = (std::wstring *)v51;
                  if (v51 == v47)
                  {
                    long long v50 = v49;
                    goto LABEL_72;
                  }
                }
                long long v48 = (std::wstring *)((char *)&v50->__r_.__value_.__l.__data_ + 1);
                long long v49 = v50;
              }
              while (v51 != v47);
            }
            else
            {
              long long v50 = v46;
            }
LABEL_72:
            std::string::size_type v53 = (char *)v50 - (char *)v46;
            if (v50 == (std::wstring *)v47) {
              std::string::size_type v54 = -1;
            }
            else {
              std::string::size_type v54 = v53;
            }
            std::string::basic_string(&__str, (const std::string *)v36, v54, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v171);
            if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v177.__r_.__value_.__l.__data_);
            }
            std::string v177 = __str;
            long long v55 = &v178.__begin_[v34];
            if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0)
            {
              long long v57 = (std::wstring *)v55->__r_.__value_.__r.__words[0];
              std::wstring::size_type v56 = v55->__r_.__value_.__l.__size_;
            }
            else
            {
              std::wstring::size_type v56 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
              long long v57 = &v178.__begin_[v34];
            }
            long long v58 = (unsigned __int8 *)v57 + v56;
            if (v56)
            {
              long long v59 = v57;
              uint64_t v60 = (std::wstring *)((char *)v57 + v56);
              do
              {
                uint64_t v61 = v59;
                uint64_t v62 = (unsigned __int8 *)v59;
                while (1)
                {
                  int v63 = *v62++;
                  if (v63 == 92) {
                    break;
                  }
                  uint64_t v61 = (std::wstring *)v62;
                  if (v62 == v58)
                  {
                    uint64_t v61 = v60;
                    goto LABEL_89;
                  }
                }
                long long v59 = (std::wstring *)((char *)&v61->__r_.__value_.__l.__data_ + 1);
                uint64_t v60 = v61;
              }
              while (v62 != v58);
            }
            else
            {
              uint64_t v61 = v57;
            }
LABEL_89:
            std::string::size_type v64 = (char *)v61 - (char *)v57;
            if (v61 == (std::wstring *)v58) {
              std::string::size_type v65 = -1;
            }
            else {
              std::string::size_type v65 = v64;
            }
            std::string::basic_string(&__str, (const std::string *)v55, 0, v65, (std::allocator<char> *)&v171);
            unint64_t v66 = &v178.__begin_[v34];
            if (SHIBYTE(v66->__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v66->__r_.__value_.__l.__data_);
            }
            long long v67 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v66->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v67;
            long long v35 = v175;
          }
        }
      }
      else
      {
        long long v38 = &v178.__begin_[v34];
        std::wstring::size_type v39 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
        if (*((unsigned char *)&v36->__r_.__value_.__s + 23)) {
          goto LABEL_52;
        }
      }
      if ((unint64_t)v35 >= v176)
      {
        long long v35 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&p_str, (long long *)&v177);
      }
      else
      {
        if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v35, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v68 = *(_OWORD *)&v177.__r_.__value_.__l.__data_;
          v35->__r_.__value_.__r.__words[2] = v177.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v68;
        }
        ++v35;
      }
      uint64_t v175 = v35;
      if (v34-- <= 0)
      {
        if (p_str != v35)
        {
          unint64_t v70 = v35 - 1;
          if (&v35[-1] > p_str)
          {
            p_int data = (void **)&p_str[1].__r_.__value_.__l.__data_;
            do
            {
              std::string __str = *(std::string *)((unsigned char *)p_data - 1);
              long long v72 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
              std::string::size_type v73 = __str.__r_.__value_.__r.__words[2];
              uint64_t v74 = (void *)v70->__r_.__value_.__r.__words[2];
              *(_OWORD *)(p_data - 3) = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
              *(p_data - 1) = v74;
              v70->__r_.__value_.__r.__words[2] = v73;
              *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v72;
              BOOL v75 = p_data >= (void **)--v70;
              p_data += 3;
            }
            while (!v75);
          }
        }
LABEL_108:
        v171 = 0;
        uint64_t v172 = 0;
        uint64_t v173 = 0;
        int v122 = v18;
        if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v179, v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
        }
        else {
          std::string v179 = v137;
        }
        memset(&__str, 0, sizeof(__str));
        uint64_t v168 = &__str;
        LOBYTE(v169) = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[0] + 24;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str.__r_.__value_.__r.__words[2], (long long *)&v179, &v180, (std::string *)__str.__r_.__value_.__l.__data_);
        std::vector<std::vector<std::string>>::push_back[abi:ne180100]((uint64_t *)&v171, (uint64_t)&__str);
        uint64_t v168 = &__str;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
        if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v179.__r_.__value_.__l.__data_);
        }
        std::vector<std::wstring>::pointer v76 = v178.__begin_;
        if (v178.__end_ != v178.__begin_)
        {
          uint64_t v77 = 0;
          while (1)
          {
            memset(&v179, 0, sizeof(v179));
            unsigned int v78 = v149;
            uint64_t v131 = v150;
            uint64_t v129 = v77;
            if (v149 != v150) {
              break;
            }
            uint64_t v110 = 0;
            uint64_t v109 = 0;
LABEL_193:
            std::vector<std::vector<std::string>>::__assign_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>((uint64_t)&v171, v109, v110, 0xAAAAAAAAAAAAAAABLL * (v110 - v109));
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
            std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            uint64_t v77 = v129 + 1;
            std::vector<std::wstring>::pointer v76 = v178.__begin_;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v178.__end_ - (char *)v178.__begin_) >> 3) == v129 + 1) {
              goto LABEL_196;
            }
          }
          uint64_t v79 = &v76[v77];
          long long v130 = v79;
          while (1)
          {
            clockid_t v80 = **v78;
            quasar::LmeDataFactoryBase::PronSet::PronSet(&v168);
            if (SHIBYTE(v79->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v167, (const std::string::value_type *)v79->__r_.__value_.__l.__data_, v79->__r_.__value_.__l.__size_);
            }
            else
            {
              long long v81 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
              v167.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v81;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            quasar::LmeDataFactoryBase::Word::Word(&__str, &v167, __p, 0);
            if (v166 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v167.__r_.__value_.__l.__data_);
            }
            quasar::LmeData::lookupWordPronCache(v80, (const quasar::LmeDataFactoryBase::Word *)&__str, 1, (char **)&v168);
            quasar::LmeDataFactoryBase::PronSet::toPronChoices((uint64_t)&v168, 0, (uint64_t *)v164);
            uint64_t v82 = v164[0];
            long long v83 = v164[1];
LABEL_125:
            if (v82 != v83) {
              break;
            }
            v163.__r_.__value_.__r.__words[0] = (std::string::size_type)v164;
            std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
            std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v159[0].__r_.__value_.__l.__size_, (char *)v159[0].__r_.__value_.__r.__words[2]);
            if (v158 < 0) {
              operator delete(v154);
            }
            uint64_t v79 = v130;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v168, v169);
            v78 += 2;
            if (v78 == v131)
            {
              uint64_t v110 = (long long **)v179.__r_.__value_.__l.__size_;
              uint64_t v109 = (long long **)v179.__r_.__value_.__r.__words[0];
              goto LABEL_193;
            }
          }
          if (*((char *)v82 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v163, (const std::string::value_type *)v82[1], (std::string::size_type)v82[2]);
          }
          else
          {
            long long v84 = *(_OWORD *)(v82 + 1);
            v163.__r_.__value_.__r.__words[2] = (std::string::size_type)v82[3];
            *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v84;
          }
          std::string::basic_string[abi:ne180100]<0>(&v162, ".");
          std::string::basic_string[abi:ne180100]<0>(v160, " ");
          quasar::replaceAll((uint64_t)&v163, (uint64_t)&v162, (char *)v160);
          if (v161 < 0) {
            operator delete(v160[0]);
          }
          if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v162.__r_.__value_.__l.__data_);
          }
          std::string::size_type v85 = (long long **)v171;
          int v86 = v172;
          while (2)
          {
            if (v85 == (long long **)v86)
            {
              if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v163.__r_.__value_.__l.__data_);
              }
              v82 += 5;
              goto LABEL_125;
            }
            if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v87 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v87 = v163.__r_.__value_.__l.__size_;
            }
            std::string::basic_string(&v162, (const std::string *)v85[1] - 1, 0, v87, (std::allocator<char> *)v160);
            if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v88 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v88 = v163.__r_.__value_.__l.__size_;
            }
            std::string::size_type v89 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
            int v90 = SHIBYTE(v162.__r_.__value_.__r.__words[2]);
            if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v89 = v162.__r_.__value_.__l.__size_;
            }
            if (v88 == v89)
            {
              if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v91 = &v162;
              }
              else {
                long long v91 = (std::string *)v162.__r_.__value_.__r.__words[0];
              }
              if ((*((unsigned char *)&v163.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                BOOL v99 = memcmp(v163.__r_.__value_.__l.__data_, v91, v163.__r_.__value_.__l.__size_) == 0;
                if ((v90 & 0x80000000) == 0) {
                  goto LABEL_156;
                }
              }
              else if (*((unsigned char *)&v163.__r_.__value_.__s + 23))
              {
                uint64_t v92 = HIBYTE(v163.__r_.__value_.__r.__words[2]) - 1;
                uint64_t v93 = &v163;
                do
                {
                  int v95 = v93->__r_.__value_.__s.__data_[0];
                  uint64_t v93 = (std::string *)((char *)v93 + 1);
                  int v94 = v95;
                  int v97 = v91->__r_.__value_.__s.__data_[0];
                  long long v91 = (std::string *)((char *)v91 + 1);
                  int v96 = v97;
                  BOOL v75 = v92-- != 0;
                  char v98 = v75;
                  BOOL v99 = v94 == v96;
                }
                while (v94 == v96 && (v98 & 1) != 0);
                if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_156:
                  if (!v99) {
                    goto LABEL_182;
                  }
                  break;
                }
              }
              else
              {
                BOOL v99 = 1;
                if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_156;
                }
              }
            }
            else
            {
              BOOL v99 = 0;
              if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_156;
              }
            }
            operator delete(v162.__r_.__value_.__l.__data_);
            if (!v99)
            {
LABEL_182:
              v85 += 3;
              continue;
            }
            break;
          }
          uint64_t v100 = (std::string *)v179.__r_.__value_.__l.__size_;
          if (v179.__r_.__value_.__l.__size_ >= v179.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v101 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)&v179, v85);
          }
          else
          {
            *(_OWORD *)v179.__r_.__value_.__l.__size_ = 0uLL;
            v100->__r_.__value_.__r.__words[2] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v100, *v85, v85[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v85[1] - (char *)*v85) >> 3));
            std::string::size_type v101 = (std::string::size_type)&v100[1];
          }
          v179.__r_.__value_.__l.__size_ = v101;
          if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v102 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v102 = v163.__r_.__value_.__l.__size_;
          }
          std::string::basic_string(&v162, (const std::string *)v85[1] - 1, v102, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v160);
          std::string::operator=((std::string *)(*(void *)(v179.__r_.__value_.__l.__size_ - 16) - 24), &v163);
          quasar::trim(&v162);
          std::string::size_type v103 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
          char v104 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
          if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v103 = v162.__r_.__value_.__l.__size_;
          }
          if (v103)
          {
            std::string::size_type v105 = v179.__r_.__value_.__l.__size_;
            unint64_t v106 = *(void *)(v179.__r_.__value_.__l.__size_ - 16);
            if (v106 >= *(void *)(v179.__r_.__value_.__l.__size_ - 8))
            {
              uint64_t v108 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(v179.__r_.__value_.__l.__size_ - 24), (long long *)&v162);
            }
            else
            {
              if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(v179.__r_.__value_.__l.__size_ - 16), v162.__r_.__value_.__l.__data_, v162.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v107 = *(_OWORD *)&v162.__r_.__value_.__l.__data_;
                *(void *)(v106 + 16) = *((void *)&v162.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v106 = v107;
              }
              uint64_t v108 = v106 + 24;
              *(void *)(v105 - 16) = v106 + 24;
            }
            *(void *)(v105 - 16) = v108;
            char v104 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
          }
          if (v104 < 0) {
            operator delete(v162.__r_.__value_.__l.__data_);
          }
          goto LABEL_182;
        }
        uint64_t v77 = 0;
LABEL_196:
        if (v172 == (void **)v171
          || 0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v171->__r_.__value_.__l.__size_ - v171->__r_.__value_.__r.__words[0]) >> 3) != v77)
        {
          char v120 = v147;
          if ((unint64_t)v147 >= v148)
          {
            long long v121 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v146, (const quasar::Token *)&v133);
            uint64_t v14 = v127;
          }
          else
          {
            quasar::Token::Token(v147, (const quasar::Token *)&v133);
            uint64_t v14 = v127;
            long long v121 = (std::string *)((char *)v120 + 224);
          }
          uint64_t v147 = v121;
        }
        else
        {
          int v132 = v134;
          memset(&v179, 0, sizeof(v179));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v179, (long long *)v171->__r_.__value_.__l.__data_, (long long *)v171->__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v171->__r_.__value_.__l.__size_ - v171->__r_.__value_.__r.__words[0]) >> 3));
          std::vector<std::wstring>::pointer v111 = v178.__begin_;
          if (v178.__end_ != v178.__begin_)
          {
            uint64_t v112 = (const std::string *)v179.__r_.__value_.__r.__words[0];
            std::string::basic_string[abi:ne180100]<0>(&v168, " ");
            quasar::splitAndTrimNoEmpty(v112, (char *)&v168, &__str);
            long long v113 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v164[0] = (void **)&__str;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v164);
            if (v170 < 0) {
              operator delete(v168);
            }
            long long v114 = quasar::Token::Token(&__str, (const quasar::Token *)&v133);
            uint64_t v115 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v114);
            quasar::QsrText::encodeTokenQsrText(v115, (uint64_t)v111, (uint64_t)&__str);
            int v116 = SHIBYTE(p_str->__r_.__value_.__r.__words[2]);
            if (v116 >= 0) {
              long long v117 = p_str;
            }
            else {
              long long v117 = (std::string *)p_str->__r_.__value_.__r.__words[0];
            }
            if (v116 >= 0) {
              std::string::size_type v118 = HIBYTE(p_str->__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v118 = p_str->__r_.__value_.__l.__size_;
            }
            std::string::append(&__str, (const std::string::value_type *)v117, v118);
            HIDWORD(v154) = v132;
            int v155 = v132
                 + -1431655765
                 * ((*((void *)&v113 + 1) - (void)v113) >> 3)
                 * 10
                 * ((v122 - v124)
                  / (0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(*((void *)&v123 + 1) - v123) >> 3))
                  / 0xA);
            int v156 = v155;
            std::string::operator=(v159, v112);
            char v157 = 1;
            quasar::PhonesetMapping::getIpaPhoneSequence(a1 + 608, (uint64_t)v159);
          }
          int v119 = v147;
          v147[-8].__r_.__value_.__r.__words[0] = v135;
          v119[-8].__r_.__value_.__s.__data_[12] = v136;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          uint64_t v14 = v127;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_str;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v177.__r_.__value_.__l.__data_);
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v178;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_216:
        if (v145 < 0) {
          operator delete(v144);
        }
        if (v143 < 0) {
          operator delete(v142);
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (v140 < 0) {
          operator delete(v139);
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v137.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v133.__r_.__value_.__l.__data_);
        }
        unint64_t v15 = (const quasar::Token *)((char *)v128 + 224);
        uint64_t v16 = v126;
        goto LABEL_10;
      }
    }
  }
LABEL_231:
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
}

void sub_1B20251F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  a33 = (uint64_t)&a61;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = (uint64_t)&a64;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (a72 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRecognizer::splitComposedLmeTokens(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData>,int)::$_0::operator()(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  uint64_t v3 = *(const std::string::value_type **)a1;
  std::string::size_type v2 = *(void *)(a1 + 8);
  if (v1 >= 0) {
    int64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    int64_t v4 = *(void *)(a1 + 8);
  }
  if (v1 >= 0) {
    uint64_t v5 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v5 = *(const std::string::value_type **)a1;
  }
  if (v4 >= 9)
  {
    uint64_t v7 = (void *)v5;
    unint64_t v8 = &v5[v4];
    int64_t v9 = v4;
    int v10 = (void *)v5;
    do
    {
      uint64_t v11 = (const std::string::value_type *)memchr(v10, 92, v9 - 8);
      if (!v11) {
        break;
      }
      if (*(void *)v11 == 0x746361746E6F635CLL && v11[8] == 45)
      {
        uint64_t v13 = 0;
        if (v11 == v8 || v11 - v5 == -1) {
          return v13;
        }
        int64_t v15 = v4;
        uint64_t v16 = (void *)v5;
        do
        {
          if (v15 == 3) {
            break;
          }
          unint64_t v17 = (char *)memchr(v16, 126, v15 - 3);
          if (!v17) {
            break;
          }
          if (*(_DWORD *)v17 == 808482686)
          {
            if (v17 == v8 || v17 - v5 == -1) {
              break;
            }
LABEL_33:
            if (v1 < 0) {
              std::string::__init_copy_ctor_external(&__p, v3, v2);
            }
            else {
              std::string __p = *(std::string *)a1;
            }
            uint64_t v13 = quasar::Decoder::isLikelyWithPhoeticName(&__p) ^ 1;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            return v13;
          }
          uint64_t v16 = v17 + 1;
          int64_t v15 = v8 - (unsigned char *)v16;
        }
        while (v8 - (unsigned char *)v16 >= 4);
        while (1)
        {
          int v18 = (const std::string::value_type *)memchr(v7, 95, v4);
          if (!v18) {
            return 0;
          }
          if (*v18 == 95)
          {
            uint64_t v13 = 0;
            if (v18 == v8 || v18 - v5 == -1) {
              return v13;
            }
            goto LABEL_33;
          }
          uint64_t v13 = 0;
          uint64_t v7 = (void *)(v18 + 1);
          int64_t v4 = v8 - (v18 + 1);
          if (v4 < 1) {
            return v13;
          }
        }
      }
      int v10 = (void *)(v11 + 1);
      int64_t v9 = v8 - (unsigned char *)v10;
    }
    while (v8 - (unsigned char *)v10 >= 9);
  }
  return 0;
}

void sub_1B20256CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizer::writeToOfflineRecogResultStream(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 280);
  if (*(unsigned char *)(v2 + 216))
  {
    int64_t v4 = **(void ***)(v2 + 24);
    if (v4) {
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    }
    uint64_t v6 = *a2;
    uint64_t v7 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *))(*(void *)v4 + 144))(v4, &v6);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1B20257B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

double quasar::SpeechRecognizer::getSnr(uint64_t a1, std::mutex *a2, int a3)
{
  uint64_t v3 = *(uint64_t **)a1;
  double result = -1000.0;
  if (*(void *)a1 == *(void *)(a1 + 8) || *v3 == v3[1]) {
    return result;
  }
  __int16 v18 = 0;
  quasar::Align::MakeMonotonic(v3, (unsigned char *)&v18 + 1, &v18);
  uint64_t v7 = *v3;
  uint64_t v8 = v3[1];
  if (*v3 == v8) {
    goto LABEL_22;
  }
  char v9 = 1;
  do
  {
    if (v9) {
      kaldi::SnrTracker::label_noise_or_speech_ms(a2, 0, *(unsigned int *)(v7 + 28), a3, 1);
    }
    int v10 = *(char *)(v7 + 23);
    if (v10 < 0)
    {
      if (*(void *)(v7 + 8) != 3)
      {
LABEL_18:
        BOOL v15 = 0;
        goto LABEL_19;
      }
      uint64_t v11 = *(unsigned __int16 **)v7;
    }
    else
    {
      uint64_t v11 = (unsigned __int16 *)v7;
      if (v10 != 3) {
        goto LABEL_18;
      }
    }
    int v12 = *v11;
    int v13 = *((unsigned __int8 *)v11 + 2);
    BOOL v15 = v12 == 16188 && v13 == 62;
LABEL_19:
    kaldi::SnrTracker::label_noise_or_speech_ms(a2, *(unsigned int *)(v7 + 28), *(unsigned int *)(v7 + 36), a3, v15);
    kaldi::SnrTracker::label_noise_or_speech_ms(a2, *(unsigned int *)(v7 + 36), *(unsigned int *)(v7 + 32), a3, 1);
    char v9 = 0;
    v7 += 224;
  }
  while (v7 != v8);
  uint64_t v16 = v3[1];
  if (v16 != *v3)
  {
    int v17 = *(_DWORD *)(v16 - 192);
    return kaldi::SnrTracker::get_snr(a2, a3, v17);
  }
LABEL_22:
  int v17 = -1;
  return kaldi::SnrTracker::get_snr(a2, a3, v17);
}

uint64_t quasar::SpeechRecognizer::writeRecordedStateAccesses(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 64);
  uint64_t v3 = *(void **)(v2 + 328);
  int64_t v4 = (void *)(v2 + 336);
  if (v3 != (void *)(v2 + 336))
  {
    do
    {
      uint64_t v6 = (uint64_t *)v3[7];
      uint64_t v7 = (uint64_t *)v3[8];
      while (v6 != v7)
      {
        uint64_t v8 = *v6;
        v6 += 2;
        double result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 40))(v8, a2);
      }
      char v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          int v10 = v9;
          char v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (void *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          uint64_t v3 = v10;
        }
        while (!v11);
      }
      uint64_t v3 = v10;
    }
    while (v10 != v4);
  }
  return result;
}

void quasar::SpeechRecognizer::cacheInboundConfusionNetwork(uint64_t a1, uint64_t ***a2, int a3)
{
}

void quasar::SpeechRecognizer::pauseRecognition(quasar::SpeechRecognizer *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 136);
  std::mutex::lock((std::mutex *)((char *)this + 136));
  if (*((_DWORD *)this + 32) == 2)
  {
    uint64_t v3 = *(void *)(*((void *)this + 35) + 24);
    if (*(unsigned char *)(v3 + 36) && !*(unsigned char *)(v3 + 37))
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v13 = 0u;
        long long v14 = 0u;
        long long v11 = 0u;
        long long v12 = 0u;
        long long v10 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Pause: pausing the recognizer.", 30);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v10);
      }
      quasar::MultiChainMultiAudioBuffer::startCountingAudioDuration(*((uint64_t ***)this + 33));
      uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 84);
      if (v5)
      {
        uint64_t v6 = std::__shared_weak_count::lock(v5);
        if (v6)
        {
          uint64_t v7 = v6;
          uint64_t v8 = *((void *)this + 83);
          if (v8)
          {
            (*(void (**)(uint64_t))(*(void *)v8 + 128))(v8);
            uint64_t v9 = **(void **)(*((void *)this + 35) + 24);
            (*(void (**)(uint64_t))(*(void *)v9 + 88))(v9);
            *((_DWORD *)this + 32) = 4;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
      }
    }
    else if (quasar::gLogLevel >= 4)
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v10 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Pause: utterance detection is disabled or utterance concatenation is enabled, do nothing.. ", 91);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v10);
    }
  }
  else if (quasar::gLogLevel >= 5)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Pause called but recognizer in state:", 37);
    int64_t v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", do nothing..", 14);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v10);
  }
  std::mutex::unlock(v2);
}

void sub_1B2025C08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizer::resumeRecognition(uint64_t a1, long long **a2, long long **a3, uint64_t a4, char a5)
{
  long long v10 = (std::mutex *)(a1 + 136);
  std::mutex::lock((std::mutex *)(a1 + 136));
  if (*(_DWORD *)(a1 + 128) == 4)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 280) + 24);
    if (*(unsigned char *)(v11 + 36) && !*(unsigned char *)(v11 + 37))
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        memset(v40, 0, sizeof(v40));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Resume: resuming the recognizer.", 32);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v40);
      }
      float v12 = quasar::MultiChainMultiAudioBuffer::stopCountingAudioDuration(*(uint64_t ***)(a1 + 264));
      float v13 = v12;
      long long v14 = *(float **)(a1 + 688);
      unint64_t v15 = *(void *)(a1 + 696);
      if ((unint64_t)v14 >= v15)
      {
        long long v17 = *(float **)(a1 + 680);
        uint64_t v18 = v14 - v17;
        if ((unint64_t)(v18 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v19 = v15 - (void)v17;
        unint64_t v20 = (uint64_t)(v15 - (void)v17) >> 1;
        if (v20 <= v18 + 1) {
          unint64_t v20 = v18 + 1;
        }
        if (v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21)
        {
          long long v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 696, v21);
          long long v14 = *(float **)(a1 + 688);
          long long v17 = *(float **)(a1 + 680);
        }
        else
        {
          long long v22 = 0;
        }
        long long v23 = (float *)&v22[4 * v18];
        long long v24 = &v22[4 * v21];
        *long long v23 = v13;
        long long v16 = v23 + 1;
        while (v14 != v17)
        {
          int v25 = *((_DWORD *)v14-- - 1);
          *((_DWORD *)v23-- - 1) = v25;
        }
        *(void *)(a1 + 680) = v23;
        *(void *)(a1 + 688) = v16;
        *(void *)(a1 + 696) = v24;
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *long long v14 = v12;
        long long v16 = v14 + 1;
      }
      *(void *)(a1 + 688) = v16;
      if ((a5 & 1) == 0) {
        quasar::MultiChainMultiAudioBuffer::emptyAudioBuffer(*(quasar::MultiChainMultiAudioBuffer **)(a1 + 264));
      }
      uint64_t v26 = *(void *)(*(void *)(a1 + 280) + 24);
      memset(v40, 0, 24);
      quasar::RunAsyncParams::setLeftContext(v26, (uint64_t)v40);
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
      uint64_t v27 = *(void *)(*(void *)(a1 + 280) + 24);
      memset(v40, 0, 24);
      quasar::RunAsyncParams::setLeftContextForItn(v27, (uint64_t)v40);
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
      uint64_t v28 = *a3;
      long long v29 = a3[1];
      if (v29 != *a3)
      {
        uint64_t v30 = ((char *)v29 - (char *)*a3) >> 3;
        memset(v40, 0, 24);
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v40, v28, v29, 0xAAAAAAAAAAAAAAABLL * v30);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v40[8] - *(void *)v40) >> 3) >= 5)
        {
          memset(&v39, 0, sizeof(v39));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v39, (long long *)(*(void *)&v40[8] - 96), *(long long **)&v40[8], 4uLL);
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)v40, (std::string *)v39.__r_.__value_.__l.__data_, (long long *)v39.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39.__r_.__value_.__l.__size_ - v39.__r_.__value_.__r.__words[0]) >> 3));
          std::wstring::size_type v56 = &v39;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
        }
        quasar::RunAsyncParams::setLeftContextForItn(*(void *)(*(void *)(a1 + 280) + 24), (uint64_t)v40);
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
      }
      long long v31 = *a2;
      uint64_t v32 = a2[1];
      if (v32 != *a2)
      {
        uint64_t v33 = ((char *)v32 - (char *)*a2) >> 3;
        memset(v40, 0, 24);
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v40, v31, v32, 0xAAAAAAAAAAAAAAABLL * v33);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v40[8] - *(void *)v40) >> 3) >= 5)
        {
          memset(&v39, 0, sizeof(v39));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v39, (long long *)(*(void *)&v40[8] - 96), *(long long **)&v40[8], 4uLL);
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)v40, (std::string *)v39.__r_.__value_.__l.__data_, (long long *)v39.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39.__r_.__value_.__l.__size_ - v39.__r_.__value_.__r.__words[0]) >> 3));
          std::wstring::size_type v56 = &v39;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
        }
        quasar::RunAsyncParams::setLeftContext(*(void *)(*(void *)(a1 + 280) + 24), (uint64_t)v40);
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
      }
      quasar::RunAsyncParams::setRightContextForItn(*(void *)(*(void *)(a1 + 280) + 24), a4);
      uint64_t v34 = **(void **)(*(void *)(a1 + 280) + 24);
      (*(void (**)(uint64_t))(*(void *)v34 + 96))(v34);
      *(_DWORD *)(a1 + 128) = 2;
      long long v35 = *(std::__shared_weak_count **)(a1 + 672);
      if (v35)
      {
        long long v36 = std::__shared_weak_count::lock(v35);
        if (v36)
        {
          std::wstring::size_type v37 = v36;
          uint64_t v38 = *(void *)(a1 + 664);
          if (v38) {
            (*(void (**)(uint64_t))(*(void *)v38 + 136))(v38);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
      }
    }
    else if (quasar::gLogLevel >= 4)
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v41 = 0u;
      memset(v40, 0, sizeof(v40));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Resume: utterance detection is disabled or utterance concatenation is enabled, do nothing.. ", 92);
LABEL_8:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v40);
    }
  }
  else if (quasar::gLogLevel >= 4)
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    memset(v40, 0, sizeof(v40));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Resume: The recognizer was not paused, so nothing to resume, ignoring the call.", 79);
    goto LABEL_8;
  }
  std::mutex::unlock(v10);
}

void sub_1B2026120(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *quasar::SpeechRecognizer::getPauseDurations@<X0>(quasar::SpeechRecognizer *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2, *((const void **)this + 85), *((void *)this + 86), (uint64_t)(*((void *)this + 86) - *((void *)this + 85)) >> 2);
}

uint64_t quasar::SpeechRecognizer::initializeBaseSymbolTable(uint64_t this, const quasar::SystemConfig *a2)
{
  if (!*(void *)(this + 704))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "lme-create");
    quasar::SystemConfig::getPtreeOptional((uint64_t)a2, (uint64_t)__p);
  }
  return this;
}

void sub_1B2026464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t quasar::SpeechRecognizer::getCachedTokensSize(quasar::SpeechRecognizer *this)
{
  return -1227133513 * ((*((void *)this + 68) - *((void *)this + 67)) >> 5);
}

void quasar::SpeechRecognizer::buildEditLmeWithLeftContext(quasar::SpeechRecognizer *a1, void **a2, long long **a3)
{
  quasar::SpeechRecognizer::processLeftContextForEditLme((uint64_t)a1, a3);
  if (*((void *)a1 + 64) && *((void *)a1 + 67) != *((void *)a1 + 68))
  {
    quasar::SpeechRecognizer::buildEditLmeContainerFromCachedTokens(a1, &v6);
    if ((void)v6)
    {
      long long v5 = v6;
      if (*((void *)&v6 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      quasar::LmeDataStreams::addLmeContainer(a2, 3, &v5);
      if (*((void *)&v5 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
      }
    }
    if (*((void *)&v6 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
    }
  }
}

void sub_1B2026590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizer::findWord(quasar::SpeechRecognizer *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (!*((void *)this + 88))
  {
    quasar::SpeechRecognizer::initializeBaseSymbolTable((uint64_t)this, *((const quasar::SystemConfig **)this + 6));
    if (quasar::gLogLevel >= 5)
    {
      memset(v6, 0, sizeof(v6));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Initialized symbol table", 24);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v6);
    }
  }
  if (quasar::QsrTextSymbolTable::Find(*((void *)this + 88), a2) == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
}

void sub_1B20266B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__shared_ptr_emplace<std::mutex>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::mutex>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::mutex>::__on_zero_shared(uint64_t a1)
{
}

void quasar::SpeechRecognizer::ModelLoaderFactoryAdapter::~ModelLoaderFactoryAdapter(quasar::SpeechRecognizer::ModelLoaderFactoryAdapter *this)
{
}

uint64_t quasar::SpeechRecognizer::ModelLoaderFactoryAdapter::createDecoder(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))();
}

uint64_t quasar::SpeechRecognizer::ModelLoaderFactoryAdapter::createDecodable(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))();
}

std::string *std::allocate_shared[abi:ne180100]<quasar::SpeakerCodeTraining,std::allocator<quasar::SpeakerCodeTraining>,std::string &,std::string &,unsigned int &,float &,unsigned int &,unsigned int &,unsigned int &,BOOL &,BOOL &,unsigned int &,unsigned int &,std::string &,void>@<X0>(long long *a1@<X1>, long long *a2@<X2>, int *a3@<X3>, float *a4@<X4>, unsigned int *a5@<X5>, unsigned int *a6@<X6>, int *a7@<X7>, void *a8@<X8>, std::string::value_type *a9, char *a10, int *a11, int *a12, long long *a13)
{
  unint64_t v21 = (std::string *)operator new(0x138uLL);
  double result = std::__shared_ptr_emplace<quasar::SpeakerCodeTraining>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,unsigned int &,float &,unsigned int &,unsigned int &,unsigned int &,BOOL &,BOOL &,unsigned int &,unsigned int &,std::string &,std::allocator<quasar::SpeakerCodeTraining>,0>(v21, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13);
  *a8 = v21 + 1;
  a8[1] = v21;
  return result;
}

void sub_1B2026868(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::SpeakerCodeTraining>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,unsigned int &,float &,unsigned int &,unsigned int &,unsigned int &,BOOL &,BOOL &,unsigned int &,unsigned int &,std::string &,std::allocator<quasar::SpeakerCodeTraining>,0>(std::string *a1, long long *a2, long long *a3, int *a4, float *a5, unsigned int *a6, unsigned int *a7, int *a8, std::string::value_type *a9, char *a10, int *a11, int *a12, long long *a13)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A609F8;
  quasar::SpeakerCodeTraining::SpeakerCodeTraining(a1 + 1, a2, a3, *a4, *a6, *a7, *a8, *a9, *a5, *a10, *a11, *a12, a13);
  return a1;
}

void sub_1B2026908(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SpeakerCodeTraining>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A609F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SpeakerCodeTraining>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A609F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::SpeakerCodeTraining>::__on_zero_shared(uint64_t a1)
{
}

void quasar::SpeakerCodeTraining::~SpeakerCodeTraining(quasar::SpeakerCodeTraining *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 216));
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int64_t v4 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

quasar::SpeechRecognizerActiveConfiguration *quasar::SpeechRecognizerActiveConfiguration::SpeechRecognizerActiveConfiguration(quasar::SpeechRecognizerActiveConfiguration *this, const quasar::SpeechRecognizerActiveConfiguration *a2)
{
  uint64_t v4 = std::__optional_copy_base<std::set<unsigned int>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this, (uint64_t)a2);
  std::__optional_copy_base<std::set<std::string>,false>::__optional_copy_base[abi:ne180100](v4 + 32, (uint64_t)a2 + 32);
  std::__optional_copy_base<std::set<std::string>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 64, (uint64_t)a2 + 64);
  std::__optional_copy_base<std::set<BOOL>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 96, (uint64_t)a2 + 96);
  std::__optional_copy_base<std::set<BOOL>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 128, (uint64_t)a2 + 128);
  std::__optional_copy_base<std::set<std::string>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 160, (uint64_t)a2 + 160);
  std::__optional_copy_base<std::set<std::string>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 192, (uint64_t)a2 + 192);
  std::__optional_copy_base<std::set<std::string>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 224, (uint64_t)a2 + 224);
  return this;
}

void sub_1B2026AE4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 216)) {
    std::__tree<std::string>::destroy(v7, *(char **)(v1 + 200));
  }
  if (*(unsigned char *)(v1 + 184)) {
    std::__tree<std::string>::destroy(v6, *(char **)(v1 + 168));
  }
  if (*(unsigned char *)(v1 + 152)) {
    std::__tree<int>::destroy(v5, *(void **)(v1 + 136));
  }
  if (*(unsigned char *)(v1 + 120)) {
    std::__tree<int>::destroy(v4, *(void **)(v1 + 104));
  }
  if (*(unsigned char *)(v1 + 88)) {
    std::__tree<std::string>::destroy(v3, *(char **)(v1 + 72));
  }
  if (*(unsigned char *)(v1 + 56)) {
    std::__tree<std::string>::destroy(v2, *(char **)(v1 + 40));
  }
  if (*(unsigned char *)(v1 + 24)) {
    std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<std::set<unsigned int>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + ++*(void *)(result + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    std::set<unsigned int>::set[abi:ne180100]((uint64_t *)a1, a2);
    *(unsigned char *)(a1 + ++*(void *)(result + 24) = 1;
  }
  return a1;
}

void sub_1B2026BF0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<unsigned int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1B2026C50(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      double result = std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(v5, v6, v4 + 7, v4 + 7);
      uint64_t v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::__optional_copy_base<std::set<std::string>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + ++*(void *)(result + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    std::set<std::string>::set[abi:ne180100]((uint64_t *)a1, (const void ***)a2);
    *(unsigned char *)(a1 + ++*(void *)(result + 24) = 1;
  }
  return a1;
}

void sub_1B2026D38(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<std::set<BOOL>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + ++*(void *)(result + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    std::set<BOOL>::set[abi:ne180100]((uint64_t *)a1, a2);
    *(unsigned char *)(a1 + ++*(void *)(result + 24) = 1;
  }
  return a1;
}

void sub_1B2026D9C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<BOOL>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<BOOL>::insert[abi:ne180100]<std::__tree_const_iterator<BOOL,std::__tree_node<BOOL,void *> *,long>>(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_1B2026DFC(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<BOOL>::insert[abi:ne180100]<std::__tree_const_iterator<BOOL,std::__tree_node<BOOL,void *> *,long>>(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      double result = std::__tree<BOOL>::__emplace_hint_unique_key_args<BOOL,BOOL const&>(v5, v6, v4 + 25, v4 + 25);
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<BOOL>::__emplace_hint_unique_key_args<BOOL,BOOL const&>(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, unsigned char *a4)
{
  uint64_t v6 = std::__tree<BOOL>::__find_equal<BOOL>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((unsigned char *)v7 + 25) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<BOOL>::__find_equal<BOOL>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((unsigned __int8 *)a2 + 25), v6 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      float v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        float v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int8 *)v10 + 25) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int8 *)(v16 + 25);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    float v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      float v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    unint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      unint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 25))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int8 *)(v20 + 25);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      unint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,unsigned int &,int &,int &,BOOL &,std::string &,std::shared_ptr<kaldi::Timer> &,int &,BOOL &,unsigned int const&,void>(uint64_t a1, int *a2, int *a3, int *a4, unsigned __int8 *a5, long long *a6, void *a7, int *a8, char *a9, int *a10)
{
  uint64_t v16 = operator new(0x160uLL);
  std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,int &,int &,BOOL &,std::string &,std::shared_ptr<kaldi::Timer> &,int &,BOOL &,unsigned int const&,std::allocator<quasar::RecogAudioBuffer>,0>(v16, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1B2027170(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,int &,int &,BOOL &,std::string &,std::shared_ptr<kaldi::Timer> &,int &,BOOL &,unsigned int const&,std::allocator<quasar::RecogAudioBuffer>,0>(void *a1, int *a2, int *a3, int *a4, unsigned __int8 *a5, long long *a6, void *a7, int *a8, char *a9, int *a10)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60250;
  std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned int &,int &,int &,BOOL &,std::string &,std::shared_ptr<kaldi::Timer> &,int &,BOOL &,unsigned int const&>((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1B2027204(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned int &,int &,int &,BOOL &,std::string &,std::shared_ptr<kaldi::Timer> &,int &,BOOL &,unsigned int const&>(uint64_t a1, uint64_t a2, int *a3, int *a4, int *a5, unsigned __int8 *a6, long long *a7, void *a8, int *a9, char *a10, int *a11)
{
  int v12 = *a3;
  int v13 = *a4;
  int v14 = *a5;
  int v15 = *a6;
  uint64_t v16 = a8[1];
  v17[0] = *a8;
  v17[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  quasar::RecogAudioBuffer::RecogAudioBuffer(a2, v12, v13, v14, v15 != 0, a7, v17, *a9, *a10, *a11);
}

void sub_1B20272A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizer::RecogData::RecogData(quasar::SpeechRecognizer::RecogData *this)
{
  *(unsigned char *)this = 0;
  *(_OWORD *)((char *)this + ++*(void *)(result + 24) = 0u;
  *((void *)this + 27) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 1--*(_DWORD *)(a9 + 84) = 0u;
  *(_OWORD *)((char *)this + 197) = 0u;
  operator new();
}

void sub_1B202736C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = v3;
  MEMORY[0x1B3EA8670](v4, 0x1000C40F7F8B94BLL);
  unsigned int v6 = (void *)v2[22];
  if (v6)
  {
    v2[23] = v6;
    operator delete(v6);
  }
  unsigned int v7 = (std::__shared_weak_count *)v2[21];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)v2[19];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  BOOL v9 = (std::__shared_weak_count *)v2[17];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  char v10 = (std::__shared_weak_count *)v2[15];
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)v2[13];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  int v12 = (std::__shared_weak_count *)v2[11];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  int v13 = (std::__shared_weak_count *)v2[9];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  int v14 = (std::__shared_weak_count *)v2[7];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  int v15 = (std::__shared_weak_count *)v2[2];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

void std::shared_ptr<quasar::DecoderChainPersistentData>::shared_ptr[abi:ne180100]<quasar::DecoderChainPersistentData,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B202748C(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x1B3EA8670](v1, 0x1000C40F7F8B94BLL);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::DecoderChainPersistentData *,std::shared_ptr<quasar::DecoderChainPersistentData>::__shared_ptr_default_delete<quasar::DecoderChainPersistentData,quasar::DecoderChainPersistentData>,std::allocator<quasar::DecoderChainPersistentData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::DecoderChainPersistentData *,std::shared_ptr<quasar::DecoderChainPersistentData>::__shared_ptr_default_delete<quasar::DecoderChainPersistentData,quasar::DecoderChainPersistentData>,std::allocator<quasar::DecoderChainPersistentData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::DecoderChainPersistentData *,std::shared_ptr<quasar::DecoderChainPersistentData>::__shared_ptr_default_delete<quasar::DecoderChainPersistentData,quasar::DecoderChainPersistentData>,std::allocator<quasar::DecoderChainPersistentData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void quasar::SpeechRecognizer::RecogData::~RecogData(quasar::SpeechRecognizer::RecogData *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (void *)*((void *)this + 22);
  if (v4)
  {
    *((void *)this + 23) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unsigned int v6 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  unsigned int v7 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  BOOL v9 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  char v10 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  int v12 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  int v14 = (void **)((char *)this + 24);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v14);
  int v13 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void std::vector<std::vector<std::string>>::__assign_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(uint64_t a1, long long **a2, long long **a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  BOOL v9 = *(std::vector<std::wstring> **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<std::string>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    int v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(v8, a2, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    int v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>((int)&v17, (uint64_t)a2, (uint64_t)v13, v9);
    int v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(v8, v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>((int)&v18, (uint64_t)a2, (uint64_t)a3, v9);
  int v15 = v14;
  uint64_t v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      unint64_t v19 = v16;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B2027798(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B20277A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::string>>::__vdeallocate(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        uint64_t v5 = v3;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(uint64_t a1, long long **a2, long long **a3, std::string *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    unsigned int v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
      uint64_t v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B20278C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>(int a1, uint64_t a2, uint64_t a3, std::vector<std::wstring> *this)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((std::vector<std::wstring> *)v5 != this) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, *(std::string **)v5, *(long long **)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3));
      }
      v5 += 24;
      ++this;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t **std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    unsigned int v6 = *result;
    unsigned int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    int v15 = result;
    uint64_t v16 = v8;
    char v17 = v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        char v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          std::string::operator=((std::string *)(v8 + 5), (const std::string *)(v9 + 5));
          *((_DWORD *)v8 + 16) = *((_DWORD *)v9 + 16);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_leaf_high((uint64_t)v5, &v18, (uint64_t)(v17 + 4));
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, v17);
          char v17 = v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          unint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              unint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              char v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          char v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__emplace_multi<std::pair<std::pair<quasar::PronType,std::string> const,float> const&>(v5, (uint64_t)(a2 + 4));
      int v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          int v14 = v13;
          int v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          int v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1B2027B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_leaf_high(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = v4;
        if (!std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))break; {
        uint64_t v4 = (void *)*v5;
        }
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = (void *)v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__emplace_multi<std::pair<std::pair<quasar::PronType,std::string> const,float> const&>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__construct_node<std::pair<std::pair<quasar::PronType,std::string> const,float> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_leaf_high((uint64_t)a1, &v5, (uint64_t)(v6 + 4));
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v5, leaf_high, v6);
  return v6;
}

void sub_1B2027C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<quasar::SpeechRecognizer>::shared_ptr[abi:ne180100]<quasar::SpeechRecognizer,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B2027D40(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<quasar::SpeechRecognizer>::shared_ptr[abi:ne180100]<quasar::SpeechRecognizer,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::SpeechRecognizer *,std::shared_ptr<quasar::SpeechRecognizer>::__shared_ptr_default_delete<quasar::SpeechRecognizer,quasar::SpeechRecognizer>,std::allocator<quasar::SpeechRecognizer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::SpeechRecognizer *,std::shared_ptr<quasar::SpeechRecognizer>::__shared_ptr_default_delete<quasar::SpeechRecognizer,quasar::SpeechRecognizer>,std::allocator<quasar::SpeechRecognizer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::SpeechRecognizer *,std::shared_ptr<quasar::SpeechRecognizer>::__shared_ptr_default_delete<quasar::SpeechRecognizer,quasar::SpeechRecognizer>,std::allocator<quasar::SpeechRecognizer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>,std::allocator<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>>,BOOL ()(void)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>,std::allocator<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F0A5A4F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>,std::allocator<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>>,BOOL ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5A4F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + ++*(void *)(result + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>,std::allocator<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>>,BOOL ()(void)>::operator()(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t std::__function::__func<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>,std::allocator<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>,std::allocator<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>>,BOOL ()(void)>::target_type()
{
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar21ConfusionNetworkCacheENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x98uLL);
  __n128 result = _ZNSt3__120__shared_ptr_emplaceIN6quasar21ConfusionNetworkCacheENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B2027F78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar21ConfusionNetworkCacheENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60D78;
  quasar::ConfusionNetworkCache::ConfusionNetworkCache((quasar::ConfusionNetworkCache *)(a1 + 3));
  return a1;
}

void sub_1B2027FD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ConfusionNetworkCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60D78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ConfusionNetworkCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60D78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::ConfusionNetworkCache>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::ConfusionNetworkCache>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::ConfusionNetworkCache>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::condition_variable::~condition_variable((std::condition_variable *)(a2 + 80));
  std::mutex::~mutex((std::mutex *)(a2 + 16));
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::default_delete<quasar::QsrTextSymbolTable>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 136);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 104);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    if (*(char *)(a2 + 95) < 0) {
      operator delete(*(void **)(a2 + 72));
    }
    if (*(char *)(a2 + 71) < 0) {
      operator delete(*(void **)(a2 + 48));
    }
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x1B3EA8670);
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::SpeechRecognizerConfig,std::allocator<quasar::SpeechRecognizerConfig>,std::string &,std::vector<std::string> &,std::unordered_map<std::string,std::string> &,BOOL &,quasar::DecoderOptions const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unsigned __int8 *a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0x670uLL);
  __n128 result = std::__shared_ptr_emplace<quasar::SpeechRecognizerConfig>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::vector<std::string> &,std::unordered_map<std::string,std::string> &,BOOL &,quasar::DecoderOptions const&,std::allocator<quasar::SpeechRecognizerConfig>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1B20282CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SpeechRecognizerConfig>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::vector<std::string> &,std::unordered_map<std::string,std::string> &,BOOL &,quasar::DecoderOptions const&,std::allocator<quasar::SpeechRecognizerConfig>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A610F8;
  quasar::SpeechRecognizerConfig::SpeechRecognizerConfig(a1 + 3, a2, a3, a4, *a5);
  return a1;
}

void sub_1B202832C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::SpeechRecognizerModelLoader,std::allocator<quasar::SpeechRecognizerModelLoader>,std::shared_ptr<quasar::SpeechRecognizerConfig> &,std::unique_ptr<quasar::SpeechRecognizerModelLoader::Factory>,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  unsigned int v6 = operator new(0x1C0uLL);
  __n128 result = std::__shared_ptr_emplace<quasar::SpeechRecognizerModelLoader>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SpeechRecognizerConfig> &,std::unique_ptr<quasar::SpeechRecognizerModelLoader::Factory>,std::allocator<quasar::SpeechRecognizerModelLoader>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B2028390(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SpeechRecognizerModelLoader>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SpeechRecognizerConfig> &,std::unique_ptr<quasar::SpeechRecognizerModelLoader::Factory>,std::allocator<quasar::SpeechRecognizerModelLoader>,0>(void *a1, uint64_t a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61A28;
  std::allocator<quasar::SpeechRecognizerModelLoader>::construct[abi:ne180100]<quasar::SpeechRecognizerModelLoader,std::shared_ptr<quasar::SpeechRecognizerConfig> &,std::unique_ptr<quasar::SpeechRecognizerModelLoader::Factory>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B2028404(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SpeechRecognizerModelLoader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SpeechRecognizerModelLoader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61A28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::SpeechRecognizerModelLoader>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::allocator<quasar::SpeechRecognizerModelLoader>::construct[abi:ne180100]<quasar::SpeechRecognizerModelLoader,std::shared_ptr<quasar::SpeechRecognizerConfig> &,std::unique_ptr<quasar::SpeechRecognizerModelLoader::Factory>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  uint64_t v6 = v4;
  quasar::SpeechRecognizerModelLoader::SpeechRecognizerModelLoader(a2, a3, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B202850C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    std::allocator<quasar::SpeechRecognizerModelLoader>::construct[abi:ne180100]<quasar::SpeechRecognizerModelLoader,std::shared_ptr<quasar::SpeechRecognizerConfig> &,std::unique_ptr<quasar::SpeechRecognizerModelLoader::Factory>>(a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<quasar::LmeDataFactory,std::allocator<quasar::LmeDataFactory>,std::string &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xAF0uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::LmeDataFactory>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::LmeDataFactory>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2028570(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::LmeDataFactory>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::LmeDataFactory>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FCD8;
  std::allocator<quasar::LmeDataFactory>::construct[abi:ne180100]<quasar::LmeDataFactory,std::string &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B20285E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactory>::construct[abi:ne180100]<quasar::LmeDataFactory,std::string &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(v3, 0, sizeof(v3));
  quasar::LmeDataFactory::LmeDataFactory(a2, a3, 1, 1, v3);
  char v4 = (void **)v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void sub_1B2028648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar25SpeakerCodeTrainingConfigENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xA0uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN6quasar25SpeakerCodeTrainingConfigENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B202869C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar25SpeakerCodeTrainingConfigENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A617F8;
  quasar::SpeakerCodeTrainingConfig::SpeakerCodeTrainingConfig((quasar::SpeakerCodeTrainingConfig *)(a1 + 3));
  return a1;
}

void sub_1B20286F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SpeakerCodeTrainingConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A617F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SpeakerCodeTrainingConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A617F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::SpeakerCodeTrainingConfig>::__on_zero_shared(uint64_t a1)
{
}

quasar::SpeakerCodeTrainingConfig *quasar::SpeakerCodeTrainingConfig::SpeakerCodeTrainingConfig(quasar::SpeakerCodeTrainingConfig *this)
{
  *((_DWORD *)this + 21) = 0;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_WORD *)this + 40) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 12, "Dictation");
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  return this;
}

void sub_1B20287DC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void quasar::SpeakerCodeTrainingConfig::~SpeakerCodeTrainingConfig(quasar::SpeakerCodeTrainingConfig *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar9MuxHelperENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN6quasar9MuxHelperENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B2028898(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar9MuxHelperENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A626D8;
  quasar::MuxHelper::MuxHelper((quasar::MuxHelper *)(a1 + 3));
  return a1;
}

void sub_1B20288F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::MuxHelper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A626D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::MuxHelper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A626D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::MuxHelper>::__on_zero_shared(uint64_t a1)
{
  return std::allocator<quasar::MuxHelper>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

quasar::MuxHelper *quasar::MuxHelper::MuxHelper(quasar::MuxHelper *this)
{
  void v31[3] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v4, "\\room-first");
  std::string::basic_string[abi:ne180100]<0>(v5, "\\room-middle");
  std::string::basic_string[abi:ne180100]<0>(v6, "\\room-last");
  std::string::basic_string[abi:ne180100]<0>(v7, "\\house-first");
  std::string::basic_string[abi:ne180100]<0>(v8, "\\house-middle");
  std::string::basic_string[abi:ne180100]<0>(v9, "\\house-last");
  std::string::basic_string[abi:ne180100]<0>(v10, "\\zone-first");
  std::string::basic_string[abi:ne180100]<0>(v11, "\\zone-middle");
  std::string::basic_string[abi:ne180100]<0>(v12, "\\zone-last");
  std::string::basic_string[abi:ne180100]<0>(v13, "\\group-first");
  std::string::basic_string[abi:ne180100]<0>(v14, "\\group-middle");
  std::string::basic_string[abi:ne180100]<0>(v15, "\\group-last");
  std::string::basic_string[abi:ne180100]<0>(v16, "\\device-first");
  std::string::basic_string[abi:ne180100]<0>(v17, "\\device-middle");
  std::string::basic_string[abi:ne180100]<0>(v18, "\\device-last");
  std::string::basic_string[abi:ne180100]<0>(v19, "\\scene-first");
  std::string::basic_string[abi:ne180100]<0>(v20, "\\scene-middle");
  std::string::basic_string[abi:ne180100]<0>(v21, "\\scene-last");
  std::string::basic_string[abi:ne180100]<0>(v22, "\\deviceNames-first");
  std::string::basic_string[abi:ne180100]<0>(v23, "\\accessory-first");
  std::string::basic_string[abi:ne180100]<0>(v24, "\\artist-first");
  std::string::basic_string[abi:ne180100]<0>(v25, "\\appMusicArtistName-first");
  std::string::basic_string[abi:ne180100]<0>(v26, "\\custom_words-first");
  std::string::basic_string[abi:ne180100]<0>(v27, "\\playlist-first");
  std::string::basic_string[abi:ne180100]<0>(v28, "\\podcastTitle-first");
  std::string::basic_string[abi:ne180100]<0>(v29, "\\appPlaylistTitle-first");
  std::string::basic_string[abi:ne180100]<0>(v30, "\\appAudiobookTitle-first");
  std::string::basic_string[abi:ne180100]<0>(v31, "\\appShowTitle-first");
  std::unordered_set<std::string>::unordered_set((uint64_t)this, v4, 28);
  uint64_t v2 = 672;
  do
  {
    if ((char)v4[v2 - 1] < 0) {
      operator delete(*(void **)&v4[v2 - 24]);
    }
    v2 -= 24;
  }
  while (v2);
  std::string::basic_string[abi:ne180100]<0>((void *)this + 5, "•|\\(|\\)|\"|\\[|\\]|\\{|\\}|®|,|;|\\?|\\!|\\\\"");
  *((void *)this + 8) = 0;
  return this;
}

void sub_1B2028CB4(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<quasar::MuxHelper>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2);
}

void *std::allocate_shared[abi:ne180100]<kaldi::Timer,std::allocator<kaldi::Timer>,BOOL,BOOL,void>@<X0>(unsigned char *a1@<X1>, unsigned __int8 *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::Timer>::__shared_ptr_emplace[abi:ne180100]<BOOL,BOOL,std::allocator<kaldi::Timer>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B2028DE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::Timer>::__shared_ptr_emplace[abi:ne180100]<BOOL,BOOL,std::allocator<kaldi::Timer>,0>(void *a1, unsigned char *a2, unsigned __int8 *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EF48;
  std::allocator<kaldi::Timer>::construct[abi:ne180100]<kaldi::Timer,BOOL,BOOL>((int)&v5, (kaldi::Timer *)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B2028E58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<kaldi::Timer>::construct[abi:ne180100]<kaldi::Timer,BOOL,BOOL>(int a1, kaldi::Timer *this, unsigned char *a3, unsigned __int8 *a4)
{
  int v5 = *a4;
  *((unsigned char *)this + ++*(void *)(result + 24) = *a3;
  kaldi::Timer::Reset(this, (clockid_t)this);
  *((void *)this + 4) = 0;
  if (v5) {
    *((void *)this + 4) = mach_absolute_time();
  }
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar26MultiChainMultiAudioBufferENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xA0uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN6quasar26MultiChainMultiAudioBufferENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B2028EE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar26MultiChainMultiAudioBufferENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A618D8;
  quasar::MultiChainMultiAudioBuffer::MultiChainMultiAudioBuffer((quasar::MultiChainMultiAudioBuffer *)(a1 + 3));
  return a1;
}

void sub_1B2028F44(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::MultiChainMultiAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A618D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::MultiChainMultiAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A618D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::MultiChainMultiAudioBuffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<quasar::SpeechRequestData,std::allocator<quasar::SpeechRequestData>,std::shared_ptr<quasar::RunAsyncParams> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> &,std::shared_ptr<quasar::MultiAudioBuffer>,std::vector<std::shared_ptr<quasar::LmeContainer>> const,quasar::Location &,std::shared_ptr<kaldi::Timer> &,BOOL &,BOOL,void>@<X0>(void *a1@<X1>, void *a2@<X2>, void *a3@<X3>, void **a4@<X4>, _OWORD *a5@<X5>, uint64_t *a6@<X6>, char *a7@<X7>, void *a8@<X8>, char *a9)
{
  char v17 = operator new(0xF8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::SpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RunAsyncParams> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> &,std::shared_ptr<quasar::MultiAudioBuffer>,std::vector<std::shared_ptr<quasar::LmeContainer>> const,quasar::Location &,std::shared_ptr<kaldi::Timer> &,BOOL &,BOOL,std::allocator<quasar::SpeechRequestData>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1B2029094(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RunAsyncParams> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> &,std::shared_ptr<quasar::MultiAudioBuffer>,std::vector<std::shared_ptr<quasar::LmeContainer>> const,quasar::Location &,std::shared_ptr<kaldi::Timer> &,BOOL &,BOOL,std::allocator<quasar::SpeechRequestData>,0>(void *a1, void *a2, void *a3, void *a4, void **a5, _OWORD *a6, uint64_t *a7, char *a8, char *a9)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A604F0;
  std::allocator<quasar::SpeechRequestData>::construct[abi:ne180100]<quasar::SpeechRequestData,std::shared_ptr<quasar::RunAsyncParams> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> &,std::shared_ptr<quasar::MultiAudioBuffer>,std::vector<std::shared_ptr<quasar::LmeContainer>> const,quasar::Location &,std::shared_ptr<kaldi::Timer> &,BOOL &,BOOL>((uint64_t)&v11, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

void sub_1B2029124(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::SpeechRequestData>::construct[abi:ne180100]<quasar::SpeechRequestData,std::shared_ptr<quasar::RunAsyncParams> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> &,std::shared_ptr<quasar::MultiAudioBuffer>,std::vector<std::shared_ptr<quasar::LmeContainer>> const,quasar::Location &,std::shared_ptr<kaldi::Timer> &,BOOL &,BOOL>(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void **a6, _OWORD *a7, uint64_t *a8, char *a9, char *a10)
{
  unint64_t v10 = (std::__shared_weak_count *)a8[1];
  uint64_t v11 = *a8;
  BOOL v12 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SpeechRequestData::SpeechRequestData(a2, a3, a4, a5, a6, a7, &v11, *a9, *a10, 4uLL);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1B20291BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<quasar::SpeechRecognizer>::shared_ptr[abi:ne180100]<quasar::SpeechRecognizer,void>(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  *exceptiouint64_t n = MEMORY[0x1E4FBA438] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA2E0], MEMORY[0x1E4FBA208]);
}

void std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SpeechRecognizer::runAsync(std::shared_ptr<quasar::RunAsyncParams> const&,void (*)(void *,void (*)(void *),void *),void *)::$_1>>(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = std::__thread_local_data();
  uint64_t v2 = *(const void **)v3;
  *(void *)uint64_t v3 = 0;
  pthread_setspecific(v1->__key_, v2);
  quasar::SpeechRecognizer::runSyncAndMarkEndOfRun(*(quasar::SpeechRecognizer **)(v3 + 8));
}

void sub_1B20292BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SpeechRecognizer::runAsync(std::shared_ptr<quasar::RunAsyncParams> const&,void (*)(void *,void (*)(void *),void *),void *)::$_1>>::~unique_ptr[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SpeechRecognizer::runAsync(std::shared_ptr<quasar::RunAsyncParams> const&,void (*)(void *,void (*)(void *),void *),void *)::$_1>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    MEMORY[0x1B3EA8670](v2, 0x20C40960023A9);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x1B3EA8060]();
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void std::vector<std::shared_ptr<quasar::LmeContainer>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100]((void *)a1, v12);
    int v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::LmeContainer>>,std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    int v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>((uint64_t)&v20, a2, v15, v9);
    int v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::LmeContainer>>,std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *,std::shared_ptr<quasar::Decoder> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      unint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1B20294C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B20294CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    std::unique_lock<std::mutex>::lock(v2);
  }
}

void std::unique_lock<std::mutex>::lock(std::unique_lock<std::mutex> *this)
{
  uint64_t m = this->__m_;
  if (m)
  {
    if (!this->__owns_)
    {
      std::mutex::lock(m);
      this->__owns_ = 1;
      return;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
  std::allocate_shared[abi:ne180100]<kaldi::OnlineBufferingInput,std::allocator<kaldi::OnlineBufferingInput>,kaldi::OnlineFeatInputItf *,void>(v3, v4);
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineBufferingInput,std::allocator<kaldi::OnlineBufferingInput>,kaldi::OnlineFeatInputItf *,void>@<X0>(kaldi::OnlineFeatInputItf **a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineBufferingInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,std::allocator<kaldi::OnlineBufferingInput>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20295BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineBufferingInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,std::allocator<kaldi::OnlineBufferingInput>,0>(void *a1, kaldi::OnlineFeatInputItf **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EC38;
  kaldi::OnlineBufferingInput::OnlineBufferingInput((kaldi::OnlineBufferingInput *)(a1 + 3), *a2, 0);
  return a1;
}

void sub_1B2029620(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineBufferingInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EC38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineBufferingInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EC38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineBufferingInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))();
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineCacheInputFe,std::allocator<quasar::OnlineCacheInputFe>,char const(&)[6],void>@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::OnlineCacheInputFe>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],std::allocator<quasar::OnlineCacheInputFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2029718(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineCacheInputFe>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],std::allocator<quasar::OnlineCacheInputFe>,0>(void *a1, char *__s)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A605D0;
  std::allocator<quasar::OnlineCacheInputFe>::construct[abi:ne180100]<quasar::OnlineCacheInputFe,char const(&)[6]>((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_1B2029788(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineCacheInputFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A605D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineCacheInputFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A605D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineCacheInputFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void std::allocator<quasar::OnlineCacheInputFe>::construct[abi:ne180100]<quasar::OnlineCacheInputFe,char const(&)[6]>(int a1, uint64_t a2, char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  quasar::OnlineCacheInputFe::OnlineCacheInputFe(a2, (long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B2029888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::queue<kaldi::CuMatrix<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::queue<kaldi::CuMatrix<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<std::queue<kaldi::CuMatrix<float>>>::__on_zero_shared(uint64_t a1)
{
  return std::deque<kaldi::CuMatrix<float>>::~deque[abi:ne180100]((void *)(a1 + 24));
}

void std::__shared_ptr_emplace<unsigned int>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62D30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<unsigned int>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62D30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineFeatureMatrix,std::allocator<kaldi::OnlineFeatureMatrix>,kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,void>@<X0>(void *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x210uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,std::allocator<kaldi::OnlineFeatureMatrix>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B20299F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,std::allocator<kaldi::OnlineFeatureMatrix>,0>(void *a1, void *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EBC8;
  kaldi::OnlineFeatureMatrix::OnlineFeatureMatrix((uint64_t)(a1 + 3), a2, *a3, 1);
  return a1;
}

void sub_1B2029A54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EBC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EBC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t kaldi::OnlineFeatureMatrix::OnlineFeatureMatrix(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  *(void *)a1 = &unk_1F0A47D40;
  *(void *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + ++*(void *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8))(a3);
  kaldi::Matrix<float>::Matrix(a1 + 32);
  kaldi::Matrix<float>::Matrix(a1 + 72);
  double v7 = kaldi::Matrix<float>::Matrix(a1 + 112);
  *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0;
  *(_WORD *)(a1 + 156) = 0;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = (*(uint64_t (**)(uint64_t, double))(*(void *)a3 + 40))(a3, v7);
  *(unsigned char *)(a1 + 169) = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3);
  *(unsigned char *)(a1 + 200) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 176), v8);
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = a1 + 248;
  *(void *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 216) = a4;
  *(void *)(a1 + 2++*(void *)(result + 24) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(void *)(a1 + 256) = 0;
  kaldi::Matrix<float>::Matrix(a1 + 264);
  kaldi::Matrix<float>::Matrix(a1 + 304);
  *(_OWORD *)(a1 + 4--*(_DWORD *)(a9 + 84) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 4++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  return a1;
}

void sub_1B2029C88(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(v4);
  std::__tree<int>::destroy(v5, *v6);
  kaldi::Matrix<float>::~Matrix(v3);
  kaldi::Matrix<float>::~Matrix(v2);
  kaldi::Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::SilencePosteriorGenerator,std::allocator<quasar::SilencePosteriorGenerator>,std::shared_ptr<quasar::SilencePosteriorGeneratorConfig>,std::shared_ptr<quasar::RecogAudioBuffer> &,unsigned int &,void>@<X0>(long long *a1@<X1>, uint64_t *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  clockid_t v8 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::SilencePosteriorGenerator>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SilencePosteriorGeneratorConfig>,std::shared_ptr<quasar::RecogAudioBuffer> &,unsigned int &,std::allocator<quasar::SilencePosteriorGenerator>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B2029D40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SilencePosteriorGenerator>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SilencePosteriorGeneratorConfig>,std::shared_ptr<quasar::RecogAudioBuffer> &,unsigned int &,std::allocator<quasar::SilencePosteriorGenerator>,0>(void *a1, long long *a2, uint64_t *a3, unsigned int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A617C0;
  std::allocator<quasar::SilencePosteriorGenerator>::construct[abi:ne180100]<quasar::SilencePosteriorGenerator,std::shared_ptr<quasar::SilencePosteriorGeneratorConfig>,std::shared_ptr<quasar::RecogAudioBuffer> &,unsigned int &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1B2029DB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SilencePosteriorGenerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A617C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SilencePosteriorGenerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A617C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::SilencePosteriorGenerator>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::SilencePosteriorGenerator>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::SilencePosteriorGenerator>::construct[abi:ne180100]<quasar::SilencePosteriorGenerator,std::shared_ptr<quasar::SilencePosteriorGeneratorConfig>,std::shared_ptr<quasar::RecogAudioBuffer> &,unsigned int &>(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4, unsigned int *a5)
{
  long long v8 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v5 = (std::__shared_weak_count *)a4[1];
  uint64_t v6 = *a4;
  double v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SilencePosteriorGenerator::SilencePosteriorGenerator(a2, &v8, &v6, *a5, 0);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
}

void sub_1B2029EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<quasar::SilencePosteriorGenerator>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 72);
  uint64_t v4 = *(void **)(a2 + 72);
  *uint64_t v3 = 0;
  if (v4) {
    std::default_delete<quasar::NFHatTransformer>::operator()[abi:ne180100]((uint64_t)v3, v4);
  }
  long long v8 = (void **)(a2 + 48);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 40);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 24);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  double v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void *std::allocate_shared[abi:ne180100]<quasar::ResultStreamStabilizer,std::allocator<quasar::ResultStreamStabilizer>,std::shared_ptr<quasar::RecogResultStreamBase> &,int &,int &,unsigned int &,BOOL &,BOOL &,std::shared_ptr<quasar::MuxHelper> &,void>@<X0>(uint64_t a1@<X1>, unsigned int *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, unsigned __int8 *a5@<X5>, unsigned __int8 *a6@<X6>, uint64_t *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x218uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::ResultStreamStabilizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RecogResultStreamBase> &,int &,int &,unsigned int &,BOOL &,BOOL &,std::shared_ptr<quasar::MuxHelper> &,std::allocator<quasar::ResultStreamStabilizer>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B202A008(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::ResultStreamStabilizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RecogResultStreamBase> &,int &,int &,unsigned int &,BOOL &,BOOL &,std::shared_ptr<quasar::MuxHelper> &,std::allocator<quasar::ResultStreamStabilizer>,0>(void *a1, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned __int8 *a6, unsigned __int8 *a7, uint64_t *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A610C0;
  std::allocator<quasar::ResultStreamStabilizer>::construct[abi:ne180100]<quasar::ResultStreamStabilizer,std::shared_ptr<quasar::RecogResultStreamBase> &,int &,int &,unsigned int &,BOOL &,BOOL &,std::shared_ptr<quasar::MuxHelper> &>((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1B202A094(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ResultStreamStabilizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A610C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ResultStreamStabilizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A610C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::ResultStreamStabilizer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<quasar::ResultStreamStabilizer>::construct[abi:ne180100]<quasar::ResultStreamStabilizer,std::shared_ptr<quasar::RecogResultStreamBase> &,int &,int &,unsigned int &,BOOL &,BOOL &,std::shared_ptr<quasar::MuxHelper> &>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned __int8 *a7, unsigned __int8 *a8, uint64_t *a9)
{
  uint64_t v10 = *a4;
  uint64_t v11 = *a5;
  uint64_t v12 = *a6;
  int v13 = *a7;
  int v14 = *a8;
  int v15 = (std::__shared_weak_count *)a9[1];
  uint64_t v16 = *a9;
  uint64_t v17 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, BOOL, uint64_t *))quasar::ResultStreamStabilizer::ResultStreamStabilizer)(a2, a3, v10, v11, v12, v13 != 0, v14 != 0, &v16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_1B202A1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<quasar::LmeContainer> *,std::shared_ptr<quasar::LmeContainer> *,std::shared_ptr<quasar::LmeContainer> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      long long v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<std::shared_ptr<quasar::LmeContainer>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::LmeContainer>>,std::reverse_iterator<std::shared_ptr<quasar::LmeContainer>*>,std::reverse_iterator<std::shared_ptr<quasar::LmeContainer>*>,std::reverse_iterator<std::shared_ptr<quasar::LmeContainer>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<quasar::LmeContainer>>,std::reverse_iterator<std::shared_ptr<quasar::LmeContainer>*>,std::reverse_iterator<std::shared_ptr<quasar::LmeContainer>*>,std::reverse_iterator<std::shared_ptr<quasar::LmeContainer>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  std::vector<unsigned int> v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::LmeContainer>>,std::reverse_iterator<std::shared_ptr<quasar::LmeContainer>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::LmeContainer>>,std::reverse_iterator<std::shared_ptr<quasar::LmeContainer>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x4A8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData> &,std::allocator<quasar::DecoderChainOutput>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B202A3E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData> &,std::allocator<quasar::DecoderChainOutput>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60598;
  std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData> &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B202A454(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v8 = *a3;
  long long v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v5 = (std::__shared_weak_count *)a4[1];
  uint64_t v6 = *a4;
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::DecoderChainOutput::DecoderChainOutput(a2, &v8, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1B202A4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar5PTreeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x58uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN6quasar5PTreeENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B202A540(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar5PTreeENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62278;
  quasar::PTree::PTree((quasar::PTree *)(a1 + 3));
  return a1;
}

void sub_1B202A59C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PTree>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PTree>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::PTree>::__on_zero_shared(uint64_t a1)
{
}

void *std::vector<std::shared_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<quasar::Decoder> const*>,std::__wrap_iter<std::shared_ptr<quasar::Decoder> const*>>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<quasar::Decoder>>,std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B202A698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::weak_ptr<quasar::Decoder>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<quasar::Decoder>>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<quasar::Decoder>>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  std::vector<unsigned int> v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::weak_ptr<quasar::Decoder>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::weak_ptr<quasar::Decoder>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

uint64_t std::vector<quasar::LmeInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmeInfo>,std::reverse_iterator<quasar::LmeInfo*>,std::reverse_iterator<quasar::LmeInfo*>,std::reverse_iterator<quasar::LmeInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmeInfo>,std::reverse_iterator<quasar::LmeInfo*>,std::reverse_iterator<quasar::LmeInfo*>,std::reverse_iterator<quasar::LmeInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  std::vector<unsigned int> v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 40);
      a3 -= 40;
      *(_DWORD *)(v7 - 32) = *(_DWORD *)(a3 + 8);
      *(void *)(v7 - 40) = v8;
      long long v9 = *(_OWORD *)(a3 + 16);
      *(void *)(v7 - 8) = *(void *)(a3 + 32);
      *(_OWORD *)(v7 - ++*(void *)(result + 24) = v9;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + ++*(void *)(result + 24) = 0;
      *(void *)(a3 + 32) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 40;
      *((void *)&v15 + 1) -= 40;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,std::reverse_iterator<quasar::LmeInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,std::reverse_iterator<quasar::LmeInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,std::reverse_iterator<quasar::LmeInfo*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,std::reverse_iterator<quasar::LmeInfo*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    v1 += 40;
  }
}

uint64_t std::__split_buffer<quasar::LmeInfo>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<quasar::LmeInfo>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 40;
      *(void *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(void *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(void *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(void *)(result + 24) = 0;
  }
  return a1;
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<std::string>>,std::set<std::string> const*,std::set<std::string> const*,std::set<std::string>*>(uint64_t a1, const void ***a2, const void ***a3, uint64_t *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::set<std::string>::set[abi:ne180100](v4, v6);
      v6 += 3;
      uint64_t v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::set<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B202AC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::deque<quasar::SpeakerCodeTraining::AlignedData>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x27];
    uint64_t v7 = (uint64_t)*v6 + 104 * (v5 % 0x27);
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x27] + 104 * ((a1[5] + v5) % 0x27);
    if (v7 != v8)
    {
      do
      {
        kaldi::CuMatrix<float>::~CuMatrix(v7 + 48);
        kaldi::CuMatrix<float>::~CuMatrix(v7);
        v7 += 104;
        if (v7 - (void)*v6 == 4056)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 19;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 39;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    char v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::deque<quasar::SpeakerCodeTraining::AlignedData>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x27;
  unint64_t v4 = v2 - 39;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      std::wstring::size_type v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFD8uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFD8uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      std::wstring::size_type v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::wstring::size_type v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFD8uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  long long v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B202B070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::allocator<quasar::SpeakerCodeTraining::AlignedData>::construct[abi:ne180100]<quasar::SpeakerCodeTraining::AlignedData,quasar::SpeakerCodeTraining::AlignedData const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrix<float>::CuMatrix(a2, a3, 111);
  uint64_t result = kaldi::CuMatrix<float>::CuMatrix(a2 + 48, a3 + 48, 111);
  *(unsigned char *)(a2 + 96) = *(unsigned char *)(a3 + 96);
  return result;
}

void sub_1B202B108(_Unwind_Exception *a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<kaldi::CuMatrix<float>>::pop_front(int64x2_t *a1)
{
  unint64_t v2 = *(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x55uLL)) + 48 * (a1[2].i64[0] % 0x55uLL);
  (*(void (**)(unint64_t))(*(void *)v2 + 16))(v2);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1B255E5F0);
  return std::deque<kaldi::CuMatrix<float>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<kaldi::CuMatrix<float>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x55) {
    a2 = 1;
  }
  if (v2 < 0xAA) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 85;
  }
  return v4 ^ 1u;
}

uint64_t std::swap[abi:ne180100]<quasar::SpeakerCodeTraining::AlignedData>(int32x2_t *a1, int32x2_t *a2)
{
  kaldi::CuMatrix<float>::CuMatrix(v5, a1, 111);
  kaldi::CuMatrix<float>::CuMatrix(v6, &a1[6], 111);
  __int8 v7 = a1[12].i8[0];
  kaldi::CuMatrix<float>::operator=(a1, a2);
  kaldi::CuMatrix<float>::operator=(a1 + 6, a2 + 6);
  a1[12].i8[0] = a2[12].i8[0];
  kaldi::CuMatrix<float>::operator=(a2, v5);
  kaldi::CuMatrix<float>::operator=(a2 + 6, v6);
  a2[12].i8[0] = v7;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v6);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v5);
}

void sub_1B202B2DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__deque_iterator<quasar::SpeakerCodeTraining::AlignedData,quasar::SpeakerCodeTraining::AlignedData*,quasar::SpeakerCodeTraining::AlignedData&,quasar::SpeakerCodeTraining::AlignedData**,long,39l>::operator+=[abi:ne180100](void *result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = (void *)*result;
    unint64_t v3 = a2 + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 38 - v3;
      uint64_t v6 = &v2[-(v5 / 0x27)];
      *uint64_t result = v6;
      unint64_t v4 = *v6 + 104 * (39 * (v5 / 0x27) - v5) + 3952;
    }
    else
    {
      *uint64_t result = &v2[v3 / 0x27];
      unint64_t v4 = v2[v3 / 0x27] + 104 * (v3 % 0x27);
    }
    result[1] = v4;
  }
  return result;
}

uint64_t *std::vector<std::pair<int,BOOL>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,BOOL> const*>,std::__wrap_iter<std::pair<int,BOOL> const*>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  __int8 v7 = a3;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    uint64_t v13 = *(uint64_t **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = a2 - v13;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v41 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    long long v32 = &v18[8 * v15];
    std::string __p = v18;
    uint64_t v38 = v32;
    uint64_t v40 = &v18[8 * v17];
    uint64_t v33 = 8 * a5;
    uint64_t v34 = &v32[8 * a5];
    do
    {
      uint64_t v35 = *v7++;
      *(void *)long long v32 = v35;
      v32 += 8;
      v33 -= 8;
    }
    while (v33);
    uint64_t v39 = v34;
    unint64_t v5 = std::vector<std::pair<int,int>>::__swap_out_circular_buffer((uint64_t **)a1, &__p, v5);
    if (v39 != v38) {
      v39 += (v38 - v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = (uint64_t)(v12 - (void)a2) >> 3;
  if (v19 >= a5)
  {
    int64_t v20 = &a3[a5];
    uint64_t v21 = *(void **)(v9 - 8);
LABEL_18:
    unint64_t v25 = &a2[a5];
    uint64_t v26 = &v21[-a5];
    uint64_t v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      uint64_t v27 = v21;
      do
      {
        uint64_t v28 = *v26++;
        *v27++ = v28;
      }
      while ((unint64_t)v26 < v12);
    }
    *(void *)(a1 + 8) = v27;
    if (v21 != v25)
    {
      long long v29 = (char *)v21 - 4;
      uint64_t v30 = v21 - v25;
      do
      {
        *((_DWORD *)v29 - 1) = a2[v30 - 1];
        *long long v29 = BYTE4(a2[v30 - 1]);
        v29 -= 8;
        --v30;
      }
      while (v30 * 8);
    }
    if (v20 != a3)
    {
      long long v31 = a2;
      do
      {
        *(_DWORD *)long long v31 = *(_DWORD *)v7;
        *((unsigned char *)v31++ + 4) = *((unsigned char *)v7++ + 4);
      }
      while (v7 != v20);
    }
    return v5;
  }
  int64_t v20 = &a3[v19];
  uint64_t v21 = *(void **)(v9 - 8);
  if (v20 != a4)
  {
    unint64_t v22 = v20;
    uint64_t v23 = *(void **)(v9 - 8);
    do
    {
      uint64_t v24 = *v22++;
      *v23++ = v24;
      ++v21;
    }
    while (v22 != a4);
  }
  *(void *)(a1 + 8) = v21;
  if ((uint64_t)(v12 - (void)a2) >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_1B202B5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v++*(void *)(result + 24) = v26[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B202B88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B202B8FC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  quasar::LmeDataFactoryBase::PronSet::PronSet(this[1].__r_.__value_.__r.__words);
  return this;
}

void sub_1B202B96C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string &,double>(uint64_t *a1, int *a2, uint64_t a3, double *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v6;
  }
  float v18 = a1 + 2;
  if (v10) {
    unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v10);
  }
  else {
    unint64_t v11 = 0;
  }
  unint64_t v14 = v11;
  uint64_t v15 = &v11[40 * v5];
  float v17 = &v11[40 * v10];
  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string &,double>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  unint64_t v16 = v15 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1B202BAF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string &,double>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, double *a5)
{
  int v7 = *a3;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  float v8 = *a5;
  *(_DWORD *)a2 = v7;
  unint64_t v9 = (std::string *)(a2 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(float *)(a2 + 32) = v8;
    if (v10 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a2 + ++*(void *)(result + 24) = *((void *)&__p.__r_.__value_.__l + 2);
    *(float *)(a2 + 32) = v8;
  }
}

void sub_1B202BBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,char const*&,int,quasar::LmeDataFactoryBase::PronSet &>(uint64_t *a1, uint64_t a2, char **a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v12 = 0x333333333333333;
  }
  else {
    unint64_t v12 = v7;
  }
  unint64_t v20 = a1 + 2;
  if (v12) {
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v12);
  }
  else {
    unint64_t v13 = 0;
  }
  unint64_t v16 = v13;
  float v17 = &v13[80 * v6];
  BOOL v19 = &v13[80 * v12];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,char const*&,int,quasar::LmeDataFactoryBase::PronSet &>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  float v18 = v17 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v16);
  return v14;
}

void sub_1B202BCFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,char const*&,int,quasar::LmeDataFactoryBase::PronSet &>(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, unsigned int *a5, uint64_t a6)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v12 = *(std::string *)a3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, *a4);
  quasar::LmeDataFactoryBase::Word::Word(a2, &v12, __p, *a5, a6);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_1B202BDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    float v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    unint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    *unint64_t v9 = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 7) = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void *std::allocate_shared[abi:ne180100]<quasar::LmeContainer,std::allocator<quasar::LmeContainer>,std::shared_ptr<quasar::LmeData> &,char const(&)[1],quasar::LmeDataFactoryBase::LmeType,void>@<X0>(uint64_t *a1@<X1>, char *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  float v8 = operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::LmeContainer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LmeData> &,char const(&)[1],quasar::LmeDataFactoryBase::LmeType,std::allocator<quasar::LmeContainer>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B202BF14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::LmeContainer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LmeData> &,char const(&)[1],quasar::LmeDataFactoryBase::LmeType,std::allocator<quasar::LmeContainer>,0>(void *a1, uint64_t *a2, char *__s, unsigned int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FA00;
  std::allocator<quasar::LmeContainer>::construct[abi:ne180100]<quasar::LmeContainer,std::shared_ptr<quasar::LmeData> &,char const(&)[1],quasar::LmeDataFactoryBase::LmeType>((int)&v6, (uint64_t)(a1 + 3), a2, __s, a4);
  return a1;
}

void sub_1B202BF8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeContainer>::construct[abi:ne180100]<quasar::LmeContainer,std::shared_ptr<quasar::LmeData> &,char const(&)[1],quasar::LmeDataFactoryBase::LmeType>(int a1, uint64_t a2, uint64_t *a3, char *__s, unsigned int *a5)
{
  unint64_t v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v10 = *a3;
  char v11 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  quasar::LmeContainer::LmeContainer(a2, &v10, __p, *a5);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1B202C020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove(a1, result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(long long *a1, long long *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      quasar::Token::operator=(a3, v4);
      v4 += 14;
      a3 += 224;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::unordered_map<std::string,quasar::LmeDataFactoryBase::PronSet>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (unint64_t i = *(unsigned __int8 **)(a2 + 16); i; unint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_1B202C160(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unint64_t i = *v13; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__construct_node_hash<std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1B202C3E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__construct_node_hash<std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B202C45C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1B202C4D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token const*,quasar::Token const*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) < a4)
  {
    std::vector<quasar::Token>::__vdeallocate((void **)a1);
    if (a4 > 0x124924924924924) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)) >= 0x92492492492492) {
      unint64_t v11 = 0x124924924924924;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::Token>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5) < a4)
  {
    uint64_t v13 = a2 + 32 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
      quasar::Token::~Token((void **)(v16 - 224));
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B202C668(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B202C670(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + ++*(void *)(result + 24) = 0;
  }
}

uint64_t quasar::SessionData::SessionData(uint64_t a1, uint64_t a2, unsigned __int8 **a3, std::string *a4, uint64_t a5, uint64_t a6, std::string *a7, std::string *a8, std::string *__str, uint64_t a10, uint64_t a11, uint64_t *a12, void *a13)
{
  *(_OWORD *)(a1 + 32) = 0u;
  size_t v21 = (uint64_t *)(a1 + 32);
  unsigned int v79 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  size_t v22 = operator new(0x30uLL);
  unint64_t v23 = a12;
  v22[1] = 0;
  v22[2] = 0;
  *size_t v22 = &unk_1F0A600C8;
  v22[4] = 0;
  v22[5] = 0;
  void v22[3] = 0;
  *(void *)(a1 + 88) = v22 + 3;
  *(void *)(a1 + 96) = v22;
  quasar::RecognizerComponents<quasar::SyncDecoder>::lookupRecognizerComponents(__str, a2, a3, a4, a5, a6, a7, a8, v69, v23);
  long long v24 = v69[0];
  v69[0] = 0uLL;
  unint64_t v25 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v24;
  if (!v25)
  {
    if ((void)v24) {
      goto LABEL_5;
    }
LABEL_45:
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    memset(v69, 0, sizeof(v69));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v69);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"Invalid recognition request parameters", 38);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v69);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  if (*((void *)&v69[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69[0] + 1));
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_45;
  }
LABEL_5:
  LOBYTE(v68) = 0;
  std::allocate_shared[abi:ne180100]<quasar::SyncRecogAudioBuffer,std::allocator<quasar::SyncRecogAudioBuffer>,unsigned int const&,int const&,int const&,BOOL,void>(&v79, (int *)&a11, (int *)&a11, (BOOL *)&v68, v69);
  long long v26 = v69[0];
  v69[0] = 0uLL;
  uint64_t v27 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v26;
  if (v27)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    if (*((void *)&v69[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69[0] + 1));
    }
  }
  LODWORD(v69[0]) = v79;
  *((void *)&v69[0] + 1) = 0;
  LOBYTE(v69[1]) = 0;
  DWORD1(v69[7]) = 0;
  BYTE8(v69[7]) = 0;
  memset((char *)&v69[1] + 8, 0, 89);
  long long v70 = 0u;
  long long v71 = 0u;
  *(void *)&long long v72 = 0;
  BYTE8(v72) = 1;
  uint64_t v28 = *(void *)(a1 + 16);
  long long v29 = *(uint64_t **)(v28 + 40);
  for (uint64_t i = *(uint64_t **)(v28 + 48); v29 != i; v29 += 2)
  {
    uint64_t v31 = *v29;
    uint64_t v32 = *(void *)a1;
    uint64_t v33 = *(void *)(a1 + 40);
    if (v33 == *(void *)(a1 + 32))
    {
      uint64_t v66 = 0;
      long long v67 = 0;
    }
    else
    {
      uint64_t v66 = *(void *)(v33 - 16);
      uint64_t v34 = *(std::__shared_weak_count **)(v33 - 8);
      long long v67 = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    quasar::FeatureExtractor::createOnlineFeInput(v31, v32, &v66);
    uint64_t v35 = *(_OWORD **)(a1 + 40);
    unint64_t v36 = *(void *)(a1 + 48);
    if ((unint64_t)v35 >= v36)
    {
      uint64_t v37 = ((uint64_t)v35 - *v21) >> 4;
      unint64_t v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v39 = v36 - *v21;
      if (v39 >> 3 > v38) {
        unint64_t v38 = v39 >> 3;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v38;
      }
      uint64_t v83 = a1 + 48;
      uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 48, v40);
      uint64_t v42 = &v41[16 * v37];
      *(void *)&long long v80 = v41;
      *((void *)&v80 + 1) = v42;
      uint64_t v82 = &v41[16 * v43];
      *(_OWORD *)uint64_t v42 = v68;
      long long v68 = 0uLL;
      long long v81 = v42 + 16;
      std::vector<std::shared_ptr<kaldi::OnlineFeatInputItf>>::__swap_out_circular_buffer(v21, &v80);
      uint64_t v44 = *(void *)(a1 + 40);
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v80);
      uint64_t v45 = (std::__shared_weak_count *)*((void *)&v68 + 1);
      *(void *)(a1 + 40) = v44;
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
    }
    else
    {
      *uint64_t v35 = v68;
      long long v68 = 0uLL;
      *(void *)(a1 + 40) = v35 + 1;
    }
    if (v67) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v67);
    }
    if ((*(unsigned int (**)(void))(*(void *)*v29 + 16))())
    {
      std::string::size_type v65 = *(kaldi::OnlineFeatInputItf **)(*(void *)(a1 + 40) - 16);
      std::allocate_shared[abi:ne180100]<kaldi::OnlineBufferingInput,std::allocator<kaldi::OnlineBufferingInput>,kaldi::OnlineFeatInputItf *,void>(&v65, &v68);
      long long v46 = v68;
      long long v68 = 0uLL;
      long long v48 = *(_OWORD **)(a1 + 40);
      unint64_t v47 = *(void *)(a1 + 48);
      if ((unint64_t)v48 >= v47)
      {
        long long v63 = v46;
        uint64_t v49 = ((uint64_t)v48 - *v21) >> 4;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v51 = v47 - *v21;
        if (v51 >> 3 > v50) {
          unint64_t v50 = v51 >> 3;
        }
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v50;
        }
        uint64_t v83 = a1 + 48;
        long long v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 48, v52);
        long long v54 = &v53[16 * v49];
        *(void *)&long long v80 = v53;
        *((void *)&v80 + 1) = v54;
        uint64_t v82 = &v53[16 * v55];
        *(_OWORD *)long long v54 = v63;
        long long v81 = v54 + 16;
        std::vector<std::shared_ptr<kaldi::OnlineFeatInputItf>>::__swap_out_circular_buffer(v21, &v80);
        uint64_t v56 = *(void *)(a1 + 40);
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((void **)&v80);
        long long v57 = (std::__shared_weak_count *)*((void *)&v68 + 1);
        *(void *)(a1 + 40) = v56;
        if (v57) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
        }
      }
      else
      {
        _OWORD *v48 = v46;
        *(void *)(a1 + 40) = v48 + 1;
      }
    }
  }
  *(void *)&long long v68 = *(void *)(*(void *)(a1 + 40) - 16);
  char v64 = 0;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineFeatureMatrix,std::allocator<kaldi::OnlineFeatureMatrix>,kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,BOOL,void>(a13, (uint64_t *)&v68, &v64, &v80);
  long long v58 = v80;
  long long v80 = 0uLL;
  long long v59 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v58;
  if (v59)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    if (*((void *)&v80 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80 + 1));
    }
  }
  quasar::Decodable::createDecodable((uint64_t *)&v80, *(quasar::Decodable **)(*(void *)(a1 + 16) + 64), *(kaldi::OnlineFeatureMatrix **)(a1 + 56));
  long long v60 = v80;
  long long v80 = 0uLL;
  uint64_t v61 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v60;
  if (v61)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
    if (*((void *)&v80 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80 + 1));
    }
  }
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs((void **)v69);
  return a1;
}

{
  return quasar::SessionData::SessionData(a1, a2, a3, a4, a5, a6, a7, a8, __str, a10, a11, a12, a13);
}

void sub_1B202CB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  uint64_t v13 = (std::__shared_weak_count *)v11[12];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)v11[10];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)v11[8];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v16 = (std::__shared_weak_count *)v11[3];
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  float v17 = (std::__shared_weak_count *)v11[1];
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SyncRecogResult>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A600C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SyncRecogResult>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A600C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::SyncRecogResult>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void *std::allocate_shared[abi:ne180100]<quasar::SyncRecogAudioBuffer,std::allocator<quasar::SyncRecogAudioBuffer>,unsigned int const&,int const&,int const&,BOOL,void>@<X0>(unsigned int *a1@<X1>, int *a2@<X2>, int *a3@<X3>, BOOL *a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::SyncRecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int const&,int const&,int const&,BOOL,std::allocator<quasar::SyncRecogAudioBuffer>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1B202CDA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SyncRecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int const&,int const&,int const&,BOOL,std::allocator<quasar::SyncRecogAudioBuffer>,0>(void *a1, unsigned int *a2, int *a3, int *a4, BOOL *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60C28;
  quasar::SyncRecogAudioBuffer::SyncRecogAudioBuffer((quasar::SyncRecogAudioBuffer *)(a1 + 3), *a2, *a3, *a4, *a5);
  return a1;
}

void sub_1B202CE14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SyncRecogAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SyncRecogAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60C28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::SyncRecogAudioBuffer>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineFeatureMatrix,std::allocator<kaldi::OnlineFeatureMatrix>,kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,BOOL,void>@<X0>(void *a1@<X1>, uint64_t *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x210uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,BOOL,std::allocator<kaldi::OnlineFeatureMatrix>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B202CF24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,BOOL,std::allocator<kaldi::OnlineFeatureMatrix>,0>(void *a1, void *a2, uint64_t *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EBC8;
  kaldi::OnlineFeatureMatrix::OnlineFeatureMatrix((uint64_t)(a1 + 3), a2, *a3, *a4);
  return a1;
}

void sub_1B202CF88(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ConfusionNetworkArc<std::string>::AddElement(unsigned __int8 *a1, uint64_t a2)
{
  long long v4 = (uint64_t *)(a1 + 8);
  unint64_t v5 = *((void *)a1 + 2);
  if (v5 >= *((void *)a1 + 3))
  {
    uint64_t v6 = std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__push_back_slow_path<kaldi::quasar::ConfusionNetworkArcElement<std::string> const&>(v4, (long long *)a2);
  }
  else
  {
    std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__construct_one_at_end[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string> const&>((uint64_t)v4, (long long *)a2);
    uint64_t v6 = v5 + 40;
  }
  unint64_t v7 = *((void *)a1 + 6);
  *((void *)a1 + 2) = v6;
  uint64_t v8 = (char *)*((void *)a1 + 5);
  if ((unint64_t)v8 >= v7)
  {
    unint64_t v10 = (char *)*((void *)a1 + 4);
    uint64_t v11 = (v8 - v10) >> 2;
    if ((unint64_t)(v11 + 1) >> 62) {
      goto LABEL_39;
    }
    unint64_t v12 = v7 - (void)v10;
    unint64_t v13 = (uint64_t)(v7 - (void)v10) >> 1;
    if (v13 <= v11 + 1) {
      unint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 48), v14);
      unint64_t v10 = (char *)*((void *)a1 + 4);
      uint64_t v8 = (char *)*((void *)a1 + 5);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[4 * v11];
    float v17 = &v15[4 * v14];
    *(_DWORD *)uint64_t v16 = *(_DWORD *)(a2 + 24);
    unint64_t v9 = v16 + 4;
    while (v8 != v10)
    {
      int v18 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *((void *)a1 + 4) = v16;
    *((void *)a1 + 5) = v9;
    *((void *)a1 + 6) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v8 = *(_DWORD *)(a2 + 24);
    unint64_t v9 = v8 + 4;
  }
  unint64_t v19 = *((void *)a1 + 9);
  *((void *)a1 + 5) = v9;
  unint64_t v20 = (char *)*((void *)a1 + 8);
  if ((unint64_t)v20 < v19)
  {
    *(_DWORD *)unint64_t v20 = *(_DWORD *)(a2 + 28);
    size_t v21 = v20 + 4;
    goto LABEL_36;
  }
  size_t v22 = (char *)*((void *)a1 + 7);
  uint64_t v23 = (v20 - v22) >> 2;
  if ((unint64_t)(v23 + 1) >> 62) {
LABEL_39:
  }
    std::vector<int>::__throw_length_error[abi:ne180100]();
  unint64_t v24 = v19 - (void)v22;
  unint64_t v25 = (uint64_t)(v19 - (void)v22) >> 1;
  if (v25 <= v23 + 1) {
    unint64_t v25 = v23 + 1;
  }
  if (v24 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 72), v26);
    size_t v22 = (char *)*((void *)a1 + 7);
    unint64_t v20 = (char *)*((void *)a1 + 8);
  }
  else
  {
    uint64_t v27 = 0;
  }
  uint64_t v28 = &v27[4 * v23];
  long long v29 = &v27[4 * v26];
  *(_DWORD *)uint64_t v28 = *(_DWORD *)(a2 + 28);
  size_t v21 = v28 + 4;
  while (v20 != v22)
  {
    int v30 = *((_DWORD *)v20 - 1);
    v20 -= 4;
    *((_DWORD *)v28 - 1) = v30;
    v28 -= 4;
  }
  *((void *)a1 + 7) = v28;
  *((void *)a1 + 8) = v21;
  *((void *)a1 + 9) = v29;
  if (v22) {
    operator delete(v22);
  }
LABEL_36:
  *((void *)a1 + 8) = v21;
  if (!(*a1 | *(unsigned __int8 *)(a2 + 37)))
  {
    std::function<float ()(float,float)>::operator()((uint64_t)(a1 + 80), *((float *)a1 + 1), *(float *)(a2 + 32));
    *((_DWORD *)a1 + 1) = v31;
  }
}

uint64_t kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot(uint64_t a1)
{
  *(_WORD *)a1 = 256;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(unsigned char *)(a1 + 136) = 0;
  MEMORY[0x1B3EA7B20](a1 + 88, "<eps>");
  return a1;
}

void sub_1B202D214(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100]((void *)(v2 + 144));
  uint64_t v6 = *(void **)(v2 + 112);
  if (v6)
  {
    *(void *)(v2 + 120) = v6;
    operator delete(v6);
  }
  if (*(char *)(v2 + 111) < 0) {
    operator delete(*v4);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_WORD *)a1 = 256;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  uint64_t v5 = a1 + 88;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(unsigned char *)(a1 + 136) = 0;
  std::__function::__value_func<std::string ()(std::string)>::__value_func[abi:ne180100](a1 + 144, a3);
  MEMORY[0x1B3EA7B20](v5, "<eps>");
  *(unsigned char *)(a1 + 1) = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v8 = *a2;
    while (!*(unsigned char *)(v8 + 37))
    {
      v8 += 40;
      if (v8 == v7) {
        goto LABEL_7;
      }
    }
    *(unsigned char *)(a1 + 1) = 1;
LABEL_7:
    if (v6 != v7)
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement(a1, v6 + v9);
        ++v10;
        uint64_t v6 = *a2;
        v9 += 40;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > v10);
    }
  }
  return a1;
}

void sub_1B202D37C(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v5);
  uint64_t v7 = *(void **)(v3 + 112);
  if (v7)
  {
    *(void *)(v3 + 120) = v7;
    operator delete(v7);
  }
  if (*(char *)(v3 + 111) < 0) {
    operator delete(*v4);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement(uint64_t a1, uint64_t a2)
{
  kaldi::quasar::ConfusionNetworkSlot<std::string>::GetKey(a1, a2, &__p);
  p_p = &__p;
  long long v4 = std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  kaldi::quasar::ConfusionNetworkArc<std::string>::AddElement(v4 + 40, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B202D448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ConfusionNetworkSlot<std::string>::GetKey(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  void v24[4] = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 1) = (*(unsigned __int8 *)(a1 + 1) | *(unsigned __int8 *)(a2 + 37)) != 0;
  int v6 = *(unsigned __int8 *)(a2 + 36);
  *(unsigned char *)a1 |= v6;
  if (v6)
  {
    if (*(char *)(a1 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(a1 + 88), *(void *)(a1 + 96));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 88);
      a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 104);
    }
  }
  else
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    uint64_t v7 = *(void *)(a1 + 168);
    if (!v7) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 48))(v7, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (*(unsigned char *)(a2 + 36)) {
    goto LABEL_29;
  }
  uint64_t v8 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0) {
    std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a3->__r_.__value_.__l.__size_;
  }
  uint64_t v10 = *(unsigned __int8 *)(a1 + 111);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a1 + 96);
  }
  if (size != v10) {
    goto LABEL_29;
  }
  if (v11 >= 0) {
    unint64_t v12 = (unsigned __int8 *)(a1 + 88);
  }
  else {
    unint64_t v12 = *(unsigned __int8 **)(a1 + 88);
  }
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(a3->__r_.__value_.__l.__data_, v12, a3->__r_.__value_.__l.__size_)) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (!*((unsigned char *)&a3->__r_.__value_.__s + 23))
  {
LABEL_28:
    kaldi::quasar::ConfusionNetworkSlot<std::string>::ModifyEpsArcKey(a1);
    goto LABEL_29;
  }
  unint64_t v13 = a3;
  while (v13->__r_.__value_.__s.__data_[0] == *v12)
  {
    unint64_t v13 = (std::string *)((char *)v13 + 1);
    ++v12;
    if (!--v8) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 8), (unsigned __int8 *)a3))
  {
    goto LABEL_30;
  }
  v23[0] = 0;
  memset(&v23[4], 0, 76);
  v24[0] = &unk_1F0A5A440;
  void v24[3] = v24;
  size_t v22 = a3;
  float v17 = std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, (long long **)&v22);
  *((void *)v17 + 5) = *(void *)v23;
  std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__vdeallocate((uint64_t *)v17 + 6);
  *((_OWORD *)v17 + 3) = *(_OWORD *)&v23[8];
  *((void *)v17 + 8) = *(void *)&v23[24];
  memset(&v23[8], 0, 24);
  int v18 = (void *)*((void *)v17 + 9);
  if (v18)
  {
    *((void *)v17 + 10) = v18;
    operator delete(v18);
    *((void *)v17 + 9) = 0;
    *((void *)v17 + 10) = 0;
    *((void *)v17 + 11) = 0;
  }
  unint64_t v19 = (void *)*((void *)v17 + 12);
  *(_OWORD *)(v17 + 72) = *(_OWORD *)&v23[32];
  *((void *)v17 + 11) = *(void *)&v23[48];
  memset(&v23[32], 0, 24);
  if (v19)
  {
    *((void *)v17 + 13) = v19;
    operator delete(v19);
    *((void *)v17 + 12) = 0;
    *((void *)v17 + 13) = 0;
    *((void *)v17 + 14) = 0;
  }
  *((_OWORD *)v17 + 6) = *(_OWORD *)&v23[56];
  *((void *)v17 + 14) = *(void *)&v23[72];
  memset(&v23[56], 0, 24);
  std::__function::__value_func<float ()(float,float)>::operator=[abi:ne180100]((void *)v17 + 15, (uint64_t)v24);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v24);
  if (*(void *)&v23[56])
  {
    *(void *)&unsigned char v23[64] = *(void *)&v23[56];
    operator delete(*(void **)&v23[56]);
  }
  if (*(void *)&v23[32])
  {
    *(void *)&v23[40] = *(void *)&v23[32];
    operator delete(*(void **)&v23[32]);
  }
  size_t v22 = (std::string *)&v23[8];
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  if (!*(unsigned char *)(a2 + 36))
  {
    *(void *)uint64_t v23 = a3;
    unint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 48, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, (long long **)v23);
    std::string::operator=((std::string *)(v20 + 40), (const std::string *)a2);
LABEL_30:
    if (!*(unsigned char *)(a2 + 36))
    {
      kaldi::quasar::ConfusionNetworkSlot<std::string>::GetLabel((void *)a1, a2, (std::string *)v23);
      if (v23[23] >= 0) {
        unint64_t v14 = v23[23];
      }
      else {
        unint64_t v14 = *(void *)&v23[8];
      }
      if (*(char *)(a2 + 23) >= 0) {
        unint64_t v15 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        unint64_t v15 = *(void *)(a2 + 8);
      }
      if ((v23[23] & 0x80000000) != 0) {
        operator delete(*(void **)v23);
      }
      if (v14 < v15)
      {
        *(void *)uint64_t v23 = a3;
        uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 48, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, (long long **)v23);
        std::string::operator=((std::string *)(v16 + 40), (const std::string *)a2);
      }
    }
  }
}

void sub_1B202D84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
}

BOOL kaldi::quasar::ConfusionNetworkSlot<std::string>::HasToken(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  uint64_t v3 = *(void *)(a1 + 168);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v3 + 48))(__p);
  long long v4 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 8), (unsigned __int8 *)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v4 != 0;
}

void sub_1B202D974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ConfusionNetworkSlot<std::string>::GetLabel(void *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v5 = a1[21];
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v5 + 48))(v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 1, (unsigned __int8 *)v9))
  {
    std::string v6 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 6, (unsigned __int8 *)v9);
    if (!v6) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    if ((char)v6[63] < 0)
    {
      std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)v6 + 5), *((void *)v6 + 6));
    }
    else
    {
      long long v7 = *(_OWORD *)(v6 + 40);
      a3->__r_.__value_.__r.__words[2] = *((void *)v6 + 7);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
    }
  }
  else
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_1B202DAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ConfusionNetworkSlot<std::string>::GetTopWeights(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>, float a4@<S0>)
{
  float v50 = a4;
  std::vector<float>::vector(a3, a2, &v50);
  if (*(unsigned char *)(a1 + 136))
  {
    long long v7 = *(uint64_t **)(a1 + 112);
    if ((uint64_t)(*(void *)(a1 + 120) - (void)v7) >> 3 >= a2) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t)(*(void *)(a1 + 120) - (void)v7) >> 3;
    }
    if (v8)
    {
      uint64_t v9 = (_DWORD *)*a3;
      uint64_t v10 = 8 * v8;
      do
      {
        uint64_t v11 = *v7++;
        *v9++ = *(_DWORD *)(v11 + 28);
        v10 -= 8;
      }
      while (v10);
    }
    return;
  }
  std::string __p = 0;
  long long v48 = 0;
  uint64_t v49 = 0;
  unint64_t v12 = *(uint64_t **)(a1 + 24);
  if (v12)
  {
    unint64_t v13 = 0;
    do
    {
      int v14 = *((_DWORD *)v12 + 11);
      if (v13 >= v49)
      {
        unint64_t v15 = __p;
        uint64_t v16 = (v13 - __p) >> 2;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v49 - __p;
        if ((v49 - __p) >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v49, v19);
          unint64_t v15 = __p;
          unint64_t v13 = v48;
        }
        else
        {
          unint64_t v20 = 0;
        }
        size_t v21 = &v20[4 * v16];
        *(_DWORD *)size_t v21 = v14;
        size_t v22 = v21 + 4;
        while (v13 != v15)
        {
          int v23 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v21 - 1) = v23;
          v21 -= 4;
        }
        std::string __p = v21;
        uint64_t v49 = &v20[4 * v19];
        if (v15) {
          operator delete(v15);
        }
        unint64_t v13 = v22;
      }
      else
      {
        *(_DWORD *)unint64_t v13 = v14;
        v13 += 4;
      }
      long long v48 = v13;
      unint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
    unint64_t v24 = (float *)__p;
  }
  else
  {
    unint64_t v13 = 0;
    unint64_t v24 = 0;
  }
  unint64_t v25 = (v13 - (char *)v24) >> 2;
  if (v13 - (char *)v24 >= 5)
  {
    unint64_t v26 = (v25 - 2) >> 1;
    unint64_t v27 = v26 + 1;
    uint64_t v28 = &v24[v26];
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>((uint64_t)v24, (uint64_t)&v51, v25, v28--);
      --v27;
    }
    while (v27);
    unint64_t v24 = (float *)__p;
    unint64_t v13 = v48;
    unint64_t v25 = (v48 - __p) >> 2;
  }
  if (v25 >= a2) {
    unint64_t v29 = a2;
  }
  else {
    unint64_t v29 = v25;
  }
  if (v29)
  {
    uint64_t v30 = 0;
    int v31 = (_DWORD *)*a3;
    do
    {
      uint64_t v32 = v13 - (char *)v24;
      if (v13 - (char *)v24 >= 5)
      {
        uint64_t v33 = 0;
        uint64_t v34 = v32 >> 2;
        float v35 = *v24;
        int64_t v36 = (unint64_t)((v32 >> 2) - 2) >> 1;
        uint64_t v37 = v24;
        do
        {
          unint64_t v38 = v37;
          v37 += v33 + 1;
          uint64_t v39 = 2 * v33;
          uint64_t v33 = (2 * v33) | 1;
          uint64_t v40 = v39 + 2;
          if (v40 < v34 && *v37 < v37[1])
          {
            ++v37;
            uint64_t v33 = v40;
          }
          *unint64_t v38 = *v37;
        }
        while (v33 <= v36);
        uint64_t v41 = (float *)(v13 - 4);
        if (v37 != (float *)(v13 - 4))
        {
          *uint64_t v37 = *v41;
          *uint64_t v41 = v35;
          uint64_t v42 = (char *)v37 - (char *)v24 + 4;
          if (v42 < 5) {
            goto LABEL_52;
          }
          unint64_t v43 = (((unint64_t)v42 >> 2) - 2) >> 1;
          uint64_t v44 = &v24[v43];
          float v45 = *v44;
          float v35 = *v37;
          if (*v44 >= *v37) {
            goto LABEL_52;
          }
          do
          {
            *uint64_t v37 = v45;
            uint64_t v37 = v44;
            if (!v43) {
              break;
            }
            unint64_t v43 = (v43 - 1) >> 1;
            uint64_t v44 = &v24[v43];
            float v45 = *v44;
          }
          while (*v44 < v35);
        }
        *uint64_t v37 = v35;
      }
LABEL_52:
      int v46 = *((_DWORD *)v13 - 1);
      v13 -= 4;
      v31[v30++] = v46;
    }
    while (v30 != v29);
  }
  if (v24) {
    operator delete(v24);
  }
}

void sub_1B202DDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ConfusionNetworkSlot<std::string>::SortArcs(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 112);
  uint64_t v3 = *(char **)(a1 + 112);
  *(void *)(a1 + 120) = v3;
  long long v4 = *(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = (void *)(a1 + 128);
    do
    {
      std::string v6 = v4 + 2;
      if ((unint64_t)v3 >= *v5)
      {
        uint64_t v7 = (uint64_t)&v3[-*v2] >> 3;
        if ((unint64_t)(v7 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v8 = *v5 - *v2;
        uint64_t v9 = v8 >> 2;
        if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
          uint64_t v9 = v7 + 1;
        }
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 128, v10);
        }
        else {
          uint64_t v11 = 0;
        }
        unint64_t v12 = &v11[8 * v7];
        *(void *)unint64_t v12 = v6;
        uint64_t v3 = v12 + 8;
        int v14 = *(char **)(a1 + 112);
        unint64_t v13 = *(char **)(a1 + 120);
        if (v13 != v14)
        {
          do
          {
            uint64_t v15 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          unint64_t v13 = (char *)*v2;
        }
        *(void *)(a1 + 112) = v12;
        *(void *)(a1 + 120) = v3;
        *(void *)(a1 + 128) = &v11[8 * v10];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)uint64_t v3 = v6;
        v3 += 8;
      }
      *(void *)(a1 + 120) = v3;
      long long v4 = (void *)*v4;
    }
    while (v4);
    uint64_t v16 = *v2;
  }
  else
  {
    uint64_t v16 = (uint64_t)v3;
  }
  unint64_t v17 = 126 - 2 * __clz((uint64_t)&v3[-v16] >> 3);
  if (v3 == (char *)v16) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v17;
  }
  uint64_t result = _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEELb0EEEvT1_SP_SE_NS_15iterator_traitsISP_E15difference_typeEb(v16, v3, (uint64_t)&v20, v18, 1);
  *(unsigned char *)(a1 + 136) = 1;
  return result;
}

double kaldi::quasar::ConfusionNetworkSlot<std::string>::GetTokenWeight(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  uint64_t v3 = *(void *)(a1 + 168);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v3 + 48))(__p);
  long long v4 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 8), (unsigned __int8 *)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    if (v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
LABEL_9:
    LODWORD(result) = *((_DWORD *)v4 + 11);
    return result;
  }
  return 0.0;
}

void sub_1B202E04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ConfusionNetworkSlot<std::string>::HasTokenFromSequence(uint64_t a1, int a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 24);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    long long v4 = v2[6];
    if (v2[7] != v4 && !*((unsigned char *)v4 + 36)) {
      break;
    }
LABEL_12:
    uint64_t v2 = (uint64_t **)*v2;
    if (!v2) {
      return 0;
    }
  }
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v8, v2[9], (uint64_t)v2[10], ((char *)v2[10] - (char *)v2[9]) >> 2);
  if (v9 == v8)
  {
    if (v8)
    {
LABEL_11:
      uint64_t v9 = v8;
      operator delete(v8);
    }
    goto LABEL_12;
  }
  uint64_t v5 = 0;
  unint64_t v6 = (v9 - v8) >> 2;
  if (v6 <= 1) {
    unint64_t v6 = 1;
  }
  while (*(_DWORD *)&v8[4 * v5] != a2)
  {
    if (v6 == ++v5) {
      goto LABEL_11;
    }
  }
  uint64_t v9 = v8;
  operator delete(v8);
  return 1;
}

void kaldi::quasar::ConfusionNetworkSlot<std::string>::ModifyEpsArcKey(uint64_t a1)
{
  uint64_t v2 = (std::string *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 88), *(void *)(a1 + 96));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = *(void *)(a1 + 104);
  }
  std::string::append(v2, "_");
  uint64_t v3 = (void *)(a1 + 8);
  while (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 8), (unsigned __int8 *)v2))std::string::append(v2, "_");
  if (*(unsigned char *)a1)
  {
    long long v4 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 8), (unsigned __int8 *)&__p);
    v8[0] = (long long *)&__p;
    uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, v8);
    v8[0] = (long long *)v2;
    unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)v2, (uint64_t)&std::piecewise_construct, v8);
    *((void *)v6 + 5) = *((void *)v5 + 5);
    std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__vdeallocate((uint64_t *)v6 + 6);
    *((_OWORD *)v6 + 3) = *((_OWORD *)v5 + 3);
    *((void *)v6 + 8) = *((void *)v5 + 8);
    *((void *)v5 + 6) = 0;
    *((void *)v5 + 7) = 0;
    *((void *)v5 + 8) = 0;
    std::vector<int>::__move_assign((uint64_t)(v6 + 72), (__n128 *)(v5 + 72));
    std::vector<int>::__move_assign((uint64_t)(v6 + 96), (__n128 *)v5 + 6);
    std::__function::__value_func<float ()(float,float)>::operator=[abi:ne180100]((void *)v6 + 15, (uint64_t)(v5 + 120));
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove(v3, v4, (uint64_t)v8);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B202E2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ConfusionNetworkArc<std::string>::~ConfusionNetworkArc(uint64_t a1)
{
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100]((void *)(a1 + 80));
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
  uint64_t v5 = (void **)(a1 + 8);
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

uint64_t kaldi::quasar::ConfusionNetwork<std::string>::ConfusionNetwork(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(unsigned char *)a1 = 1;
  uint64_t v9 = a1 + 40;
  std::__function::__value_func<std::vector<std::string> ()(std::vector<std::string>)>::__value_func[abi:ne180100](a1 + 8, a4);
  std::__function::__value_func<std::string ()(std::string)>::__value_func[abi:ne180100](v9, a5);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 72), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  uint64_t v10 = *a2;
  if (a2[1] == *a2)
  {
    unint64_t v14 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      memset(&v16, 0, sizeof(v16));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *(long long **)(v10 + v11), *(long long **)(v10 + v11 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v10 + v11 + 8) - *(void *)(v10 + v11)) >> 3));
      uint64_t v13 = *(void *)(a1 + 32);
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(void *__return_ptr))(*(void *)v13 + 48))(v17);
      std::vector<std::vector<std::string>>::push_back[abi:ne180100]((uint64_t *)(a1 + 96), (uint64_t)v17);
      uint64_t v18 = (std::string *)v17;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      uint64_t v18 = &v16;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      ++v12;
      uint64_t v10 = *a2;
      v11 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v12);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3);
  }
  if (v14 == (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2) {
    *(unsigned char *)a1 = 0;
  }
  kaldi::quasar::ConfusionNetwork<std::string>::Construct(a1);
  return a1;
}

void sub_1B202E4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = v16 + 3;
  std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100](&a13);
  a13 = v16;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a13);
  uint64_t v18 = *v15;
  if (*v15)
  {
    *(void *)(v14 + 80) = v18;
    operator delete(v18);
  }
  std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<std::vector<std::string> ()(std::vector<std::string>)>::~__value_func[abi:ne180100](a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ConfusionNetwork<std::string>::Construct(uint64_t a1)
{
  v109[4] = *MEMORY[0x1E4F143B8];
  memset(&v93, 0, sizeof(v93));
  int v92 = -1082130432;
  int v91 = -1;
  std::string::size_type v88 = 0;
  std::string::size_type v89 = 0;
  unint64_t v90 = 0;
  std::string __p = 0;
  int v86 = 0;
  std::string::size_type v87 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  long long v84 = 0;
  uint64_t v1 = *(void *)(a1 + 96);
  if (*(void *)(a1 + 104) == v1) {
    goto LABEL_114;
  }
  unint64_t v3 = 0;
  do
  {
    memset(&v95, 0, sizeof(v95));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v95, *(long long **)(v1 + 24 * v3), *(long long **)(v1 + 24 * v3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 24 * v3 + 8) - *(void *)(v1 + 24 * v3)) >> 3));
    if (*(unsigned char *)a1) {
      int v4 = 2143289344;
    }
    else {
      int v4 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * v3);
    }
    if (v95.__r_.__value_.__l.__size_ != v95.__r_.__value_.__r.__words[0] && v93.__end_ == v93.__begin_)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v93, (std::string *)v95.__r_.__value_.__l.__data_, (long long *)v95.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95.__r_.__value_.__l.__size_ - v95.__r_.__value_.__r.__words[0]) >> 3));
      int v92 = v4;
      int v91 = v3;
    }
    else
    {
      uint64_t v5 = v89;
      if ((unint64_t)v89 >= v90)
      {
        uint64_t v6 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)&v88, (long long **)&v95);
      }
      else
      {
        v89->__r_.__value_.__r.__words[0] = 0;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v5, (long long *)v95.__r_.__value_.__l.__data_, (long long *)v95.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95.__r_.__value_.__l.__size_ - v95.__r_.__value_.__r.__words[0]) >> 3));
        uint64_t v6 = (uint64_t)&v5[1];
      }
      std::string::size_type v89 = (std::string *)v6;
      uint64_t v7 = v86;
      if (v86 >= v87)
      {
        uint64_t v9 = (char *)__p;
        uint64_t v10 = (v86 - (unsigned char *)__p) >> 2;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v87 - (unsigned char *)__p;
        if ((v87 - (unsigned char *)__p) >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v87, v13);
          uint64_t v9 = (char *)__p;
          uint64_t v7 = v86;
        }
        else
        {
          uint64_t v14 = 0;
        }
        uint64_t v15 = (int *)&v14[4 * v10];
        *uint64_t v15 = v4;
        char v8 = (char *)(v15 + 1);
        while (v7 != v9)
        {
          int v16 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--uint64_t v15 = v16;
        }
        std::string __p = v15;
        int v86 = v8;
        std::string::size_type v87 = &v14[4 * v13];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *(_DWORD *)int v86 = v4;
        char v8 = v7 + 4;
      }
      int v86 = v8;
      unint64_t v17 = v83;
      if (v83 >= v84)
      {
        unint64_t v19 = (char *)v82;
        uint64_t v20 = (v83 - (unsigned char *)v82) >> 2;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v84 - (unsigned char *)v82;
        if ((v84 - (unsigned char *)v82) >> 1 > v21) {
          unint64_t v21 = v22 >> 1;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v84, v23);
          unint64_t v19 = (char *)v82;
          unint64_t v17 = v83;
        }
        else
        {
          unint64_t v24 = 0;
        }
        unint64_t v25 = &v24[4 * v20];
        *(_DWORD *)unint64_t v25 = v3;
        uint64_t v18 = v25 + 4;
        while (v17 != v19)
        {
          int v26 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        uint64_t v82 = v25;
        uint64_t v83 = v18;
        long long v84 = &v24[4 * v23];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v83 = v3;
        uint64_t v18 = v17 + 4;
      }
      uint64_t v83 = v18;
    }
    v107[0] = (void **)&v95;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v107);
    ++v3;
    uint64_t v1 = *(void *)(a1 + 96);
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 104) - v1) >> 3) > v3);
  std::vector<std::wstring>::pointer begin = v93.__begin_;
  if (v93.__end_ == v93.__begin_) {
    goto LABEL_114;
  }
  LODWORD(v76) = 0;
  unint64_t v28 = 0;
  do
  {
    memset(&v95, 0, sizeof(v95));
    unint64_t v29 = (long long *)&begin[v28];
    if (*(unsigned char *)a1) {
      std::string::size_type v30 = std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string&,int &,int &>((uint64_t *)&v95, v29, &v91, (int *)&v76);
    }
    else {
      std::string::size_type v30 = std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string&,int &,int &,float &>((uint64_t *)&v95, v29, &v91, (int *)&v76, &v92);
    }
    v95.__r_.__value_.__l.__size_ = v30;
    unint64_t v31 = *(void *)(a1 + 128);
    if (v31 >= *(void *)(a1 + 136))
    {
      uint64_t v32 = std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__emplace_back_slow_path<std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>> &,std::function<std::string ()(std::string)> &>((uint64_t *)(a1 + 120), (uint64_t *)&v95, a1 + 40);
    }
    else
    {
      std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>> &,std::function<std::string ()(std::string)> &>(a1 + 136, *(void *)(a1 + 128), (uint64_t *)&v95, a1 + 40);
      uint64_t v32 = v31 + 176;
      *(void *)(a1 + 128) = v31 + 176;
    }
    *(void *)(a1 + 128) = v32;
    v107[0] = (void **)&v95;
    std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](v107);
    unint64_t v28 = (int)v76 + 1;
    LODWORD(v76) = v76 + 1;
    std::vector<std::wstring>::pointer begin = v93.__begin_;
  }
  while (0xAAAAAAAAAAAAAAABLL * (((char *)v93.__end_ - (char *)v93.__begin_) >> 3) > v28);
  v106[0] = &unk_1F0A5ABD0;
  void v106[3] = v106;
  kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner((uint64_t)v107, (uint64_t)v106);
  std::__function::__value_func<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::~__value_func[abi:ne180100](v106);
  unsigned int v79 = 0;
  long long v80 = 0;
  uint64_t v81 = 0;
  uint64_t v33 = (uint64_t)v88;
  if (v89 == v88) {
    goto LABEL_113;
  }
  unint64_t v34 = 0;
  std::string::size_type v65 = (uint64_t *)(a1 + 120);
  do
  {
    kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Align(v107, v65, (uint64_t *)(v33 + 24 * v34), &v79);
    float v35 = (char *)v79;
    if (v80 != v79)
    {
      unint64_t v36 = 0;
      int v37 = 0;
      while (1)
      {
        unint64_t v38 = &v35[40 * v36];
        uint64_t v39 = *((void *)v38 + 4);
        long long v41 = *(_OWORD *)v38;
        long long v40 = *((_OWORD *)v38 + 1);
        uint64_t v78 = v39;
        long long v76 = v41;
        long long v77 = v40;
        int v42 = v41 + v37;
        if (v39 <= 1) {
          break;
        }
        if (v39 == 3)
        {
          uint64_t v73 = 0;
          uint64_t v74 = 0;
          uint64_t v75 = 0;
          if (*(unsigned char *)a1) {
            uint64_t v53 = std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string const&,int &,int &>(&v73, *((long long **)&v77 + 1), (int *)v82 + v34, (int *)&v77);
          }
          else {
            uint64_t v53 = std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string const&,int &,int &,float &>(&v73, *((long long **)&v77 + 1), (int *)v82 + v34, (int *)&v77, (int *)__p + v34);
          }
          uint64_t v74 = v53;
          std::__function::__value_func<std::string ()(std::string)>::__value_func[abi:ne180100]((uint64_t)v94, a1 + 40);
          kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)&v95, &v73, (uint64_t)v94);
          std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v94);
          if (*(unsigned char *)a1)
          {
            *(_DWORD *)((char *)&v68 + 3) = 0;
            LODWORD(v68) = 0;
            uint64_t v66 = 0;
            uint64_t v67 = 0;
            HIBYTE(v68) = 0;
            int v69 = v91;
            int v70 = -1;
            HIBYTE(v72) = 1;
            kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement((uint64_t)&v95, (uint64_t)&v66);
            if ((SHIBYTE(v68) & 0x80000000) == 0)
            {
              if (!v34) {
                goto LABEL_98;
              }
LABEL_88:
              for (uint64_t i = 0; i != v34; ++i)
              {
                int v56 = *((_DWORD *)v82 + i);
                uint64_t v67 = 0;
                uint64_t v68 = 0;
                uint64_t v66 = 0;
                int v69 = v56;
                int v70 = -1;
                HIBYTE(v72) = 1;
                kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement((uint64_t)&v95, (uint64_t)&v66);
                if (SHIBYTE(v68) < 0) {
                  operator delete(v66);
                }
              }
              goto LABEL_98;
            }
            operator delete(v66);
            if (v34) {
              goto LABEL_88;
            }
LABEL_98:
            int v60 = v42 & ~(v42 >> 31);
            uint64_t v61 = *(void *)(a1 + 120);
            if (v60 >= (int)(-1171354717 * ((unint64_t)(*(void *)(a1 + 128) - v61) >> 4))) {
              int v60 = -1171354717 * ((unint64_t)(*(void *)(a1 + 128) - v61) >> 4);
            }
            std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::insert(v65, v61 + 176 * v60, (unint64_t)&v95);
            std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v105);
            if (v103)
            {
              char v104 = v103;
              operator delete(v103);
            }
            if (v102 < 0) {
              operator delete(v101);
            }
            ++v37;
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v100);
            std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v95.__r_.__value_.__l.__size_);
            v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
            goto LABEL_105;
          }
          *(_DWORD *)((char *)&v68 + 3) = 0;
          LODWORD(v68) = 0;
          uint64_t v66 = 0;
          uint64_t v67 = 0;
          HIBYTE(v68) = 0;
          int v69 = v91;
          int v70 = -1;
          int v71 = v92;
          __int16 v72 = 1;
          kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement((uint64_t)&v95, (uint64_t)&v66);
          if (SHIBYTE(v68) < 0)
          {
            operator delete(v66);
            if (!v34) {
              goto LABEL_98;
            }
          }
          else if (!v34)
          {
            goto LABEL_98;
          }
          for (uint64_t j = 0; j != v34; ++j)
          {
            int v58 = *((_DWORD *)v82 + j);
            int v59 = *((_DWORD *)__p + j);
            uint64_t v67 = 0;
            uint64_t v68 = 0;
            uint64_t v66 = 0;
            int v69 = v58;
            int v70 = -1;
            int v71 = v59;
            __int16 v72 = 1;
            kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement((uint64_t)&v95, (uint64_t)&v66);
            if (SHIBYTE(v68) < 0) {
              operator delete(v66);
            }
          }
          goto LABEL_98;
        }
        if (v39 == 2)
        {
          uint64_t v47 = *(void *)(a1 + 120) + 176 * v42;
          int v48 = *((_DWORD *)v82 + v34);
          if (*(unsigned char *)a1)
          {
            memset(&v95, 0, sizeof(v95));
            int v96 = v48;
            int v97 = -1;
            HIBYTE(v99) = 1;
          }
          else
          {
            int v54 = *((_DWORD *)__p + v34);
            memset(&v95, 0, sizeof(v95));
            int v96 = v48;
            int v97 = -1;
            int v98 = v54;
            __int16 v99 = 1;
          }
          kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement(v47, (uint64_t)&v95);
LABEL_77:
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v95.__r_.__value_.__l.__data_);
          }
        }
LABEL_105:
        ++v36;
        float v35 = (char *)v79;
        if (0xCCCCCCCCCCCCCCCDLL * ((v80 - (unsigned char *)v79) >> 3) <= v36) {
          goto LABEL_106;
        }
      }
      uint64_t v43 = *(void *)(a1 + 120) + 176 * v42;
      if (*(unsigned char *)a1)
      {
        int v44 = *((_DWORD *)v82 + v34);
        int v45 = v77;
        if (*(char *)(*((void *)&v77 + 1) + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v95, **((const std::string::value_type ***)&v77 + 1), *(void *)(*((void *)&v77 + 1) + 8));
        }
        else
        {
          long long v46 = **((_OWORD **)&v77 + 1);
          v95.__r_.__value_.__r.__words[2] = *(void *)(*((void *)&v77 + 1) + 16);
          *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v46;
        }
        int v96 = v44;
        int v97 = v45;
        HIBYTE(v99) = 1;
        kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement(v43, (uint64_t)&v95);
      }
      else
      {
        int v49 = *((_DWORD *)v82 + v34);
        int v50 = v77;
        int v51 = *((_DWORD *)__p + v34);
        if (*(char *)(*((void *)&v77 + 1) + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v95, **((const std::string::value_type ***)&v77 + 1), *(void *)(*((void *)&v77 + 1) + 8));
        }
        else
        {
          long long v52 = **((_OWORD **)&v77 + 1);
          v95.__r_.__value_.__r.__words[2] = *(void *)(*((void *)&v77 + 1) + 16);
          *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v52;
        }
        int v96 = v49;
        int v97 = v50;
        int v98 = v51;
        __int16 v99 = 0;
        kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement(v43, (uint64_t)&v95);
      }
      goto LABEL_77;
    }
LABEL_106:
    if (!*(unsigned char *)a1)
    {
      uint64_t v62 = *(void *)(a1 + 120);
      if (*(void *)(a1 + 128) != v62)
      {
        uint64_t v63 = 0;
        unint64_t v64 = 0;
        do
        {
          kaldi::quasar::ConfusionNetworkSlot<std::string>::SortArcs(v62 + v63);
          ++v64;
          uint64_t v62 = *(void *)(a1 + 120);
          v63 += 176;
        }
        while (0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 128) - v62) >> 4) > v64);
      }
    }
    ++v34;
    uint64_t v33 = (uint64_t)v88;
  }
  while (0xAAAAAAAAAAAAAAABLL * (((char *)v89 - (char *)v88) >> 3) > v34);
  if (v79)
  {
    long long v80 = v79;
    operator delete(v79);
  }
LABEL_113:
  std::__function::__value_func<float ()(std::string)>::~__value_func[abi:ne180100](v109);
  std::__function::__value_func<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::~__value_func[abi:ne180100](v108);
  std::__function::__value_func<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::~__value_func[abi:ne180100](v107);
LABEL_114:
  if (v82)
  {
    uint64_t v83 = (char *)v82;
    operator delete(v82);
  }
  if (__p)
  {
    int v86 = (char *)__p;
    operator delete(__p);
  }
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
}

void sub_1B202EEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__function::__value_func<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::~__value_func[abi:ne180100]((void *)(v59 - 240));
  if (__p) {
    operator delete(__p);
  }
  if (a40) {
    operator delete(a40);
  }
  a54 = &a43;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  a54 = &a47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  _Unwind_Resume(a1);
}

_WORD *std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  int v4 = (_WORD *)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a2 - *a1) >> 4);
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if (v6 >= v11)
  {
    unint64_t v13 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v13 > 0x1745D1745D1745DLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v10 - v7) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0xBA2E8BA2E8BA2ELL) {
      unint64_t v15 = 0x1745D1745D1745DLL;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v23 = v9;
    if (v15) {
      int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>>(v9, v15);
    }
    else {
      int v16 = 0;
    }
    unint64_t v19 = v16;
    uint64_t v20 = &v16[176 * v8];
    unint64_t v21 = v20;
    uint64_t v22 = &v16[176 * v15];
    std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::push_back[abi:ne180100](&v19, a3);
    int v4 = (_WORD *)std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__swap_out_circular_buffer(a1, &v19, (uint64_t)v4);
    std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::~__split_buffer(&v19);
  }
  else if (a2 == v6)
  {
    kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot(a2, a3);
    a1[1] = (uint64_t)(v4 + 88);
  }
  else
  {
    std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__move_range((uint64_t)a1, a2, v6, a2 + 176);
    if ((unint64_t)v4 <= a3) {
      a3 += 176 * (a1[1] > a3);
    }
    *int v4 = *(_WORD *)a3;
    if (v4 == (_WORD *)a3)
    {
      std::string::operator=((std::string *)(v7 + 176 * v8 + 88), (const std::string *)(v7 + 176 * v8 + 88));
    }
    else
    {
      uint64_t v12 = v7 + 176 * v8;
      *(_DWORD *)(v12 + 40) = *(_DWORD *)(a3 + 40);
      std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *> *>>((void *)(v12 + 8), *(uint64_t **)(a3 + 24), 0);
      *(_DWORD *)(v12 + 80) = *(_DWORD *)(a3 + 80);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((void *)(v12 + 48), *(uint64_t **)(a3 + 64), 0);
      std::string::operator=((std::string *)(v12 + 88), (const std::string *)(a3 + 88));
      std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(v12 + 112), *(char **)(a3 + 112), *(void *)(a3 + 120), (uint64_t)(*(void *)(a3 + 120) - *(void *)(a3 + 112)) >> 3);
    }
    uint64_t v17 = v7 + 176 * v8;
    *(unsigned char *)(v17 + 136) = *(unsigned char *)(a3 + 136);
    std::function<std::string ()(std::string)>::operator=((void *)(v17 + 144), a3 + 144);
  }
  return v4;
}

void sub_1B202F270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

void *kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::~Aligner(void *a1)
{
  std::__function::__value_func<float ()(std::string)>::~__value_func[abi:ne180100](a1 + 8);
  std::__function::__value_func<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::~__value_func[abi:ne180100](a1 + 4);
  return std::__function::__value_func<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::~__value_func[abi:ne180100](a1);
}

void std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<quasar::PhoneticMatchDecoderStat>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__function::__value_func<float ()(float,float)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<float ()(float,float)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + ++*(void *)(result + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<float ()(float,float)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v++*(void *)(result + 24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B202F6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x98uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  double result = std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B202F710(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__s.__data_[0] = 1;
  *(_OWORD *)((char *)this[1].__r_.__value_.__r.__words + 4) = 0u;
  *(_OWORD *)((char *)&this[1].__r_.__value_.__r.__words[2] + 4) = 0u;
  *(_OWORD *)((char *)&this[2].__r_.__value_.__r.__words[1] + 4) = 0u;
  *(_OWORD *)((char *)this[3].__r_.__value_.__r.__words + 4) = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = 0u;
  this[4].__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F0A5A440;
  this[5].__r_.__value_.__l.__size_ = (std::string::size_type)&this[4].__r_.__value_.__l.__size_;
  return this;
}

void std::__function::__func<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1},std::allocator<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1}>,float ()(float,float)>::~__func()
{
}

void *std::__function::__func<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1},std::allocator<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1}>,float ()(float,float)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F0A5A440;
  return result;
}

void std::__function::__func<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1},std::allocator<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1}>,float ()(float,float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5A440;
}

float std::__function::__func<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1},std::allocator<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1}>,float ()(float,float)>::operator()(uint64_t a1, float *a2, float *a3)
{
  return *a2 + *a3;
}

uint64_t std::__function::__func<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1},std::allocator<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1}>,float ()(float,float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1},std::allocator<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1}>,float ()(float,float)>::target_type()
{
}

void std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__construct_one_at_end[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string> const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *((void *)a2 + 3);
  *(void *)(v4 + 30) = *(void *)((char *)a2 + 30);
  *(void *)(v4 + ++*(void *)(result + 24) = v6;
  *(void *)(a1 + 8) = v4 + 40;
}

void sub_1B202F900(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__push_back_slow_path<kaldi::quasar::ConfusionNetworkArcElement<std::string> const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v20 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = (std::string *)&v10[40 * v4];
  v17[0] = v10;
  v17[1] = v11;
  float v18 = v11;
  BOOL v19 = &v10[40 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    unint64_t v11 = v18;
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  unint64_t v13 = &v10[40 * v4];
  uint64_t v14 = *((void *)a2 + 3);
  *(void *)(v13 + 30) = *(void *)((char *)a2 + 30);
  *((void *)v13 + 3) = v14;
  float v18 = (std::string *)((char *)v11 + 40);
  std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1B202FA30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - ++*(void *)(result + 24) = *(void *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - ++*(void *)(result + 24) = 0;
      *(void *)(a3 - 40) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(void *)(v7 - 10) = *(void *)(a3 - 10);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 40;
      *((void *)&v15 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) | 1;
      long long v8 = (float *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[1])
      {
        ++v8;
        uint64_t v7 = v9;
      }
      float v10 = *v8;
      float v11 = *a4;
      if (*v8 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v12 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          long long v8 = (float *)(result + 4 * v7);
          uint64_t v13 = v12 + 2;
          if (v13 < a3 && *v8 < v8[1])
          {
            ++v8;
            uint64_t v7 = v13;
          }
          float v10 = *v8;
        }
        while (*v8 >= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEELb0EEEvT1_SP_SE_NS_15iterator_traitsISP_E15difference_typeEb(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  float v10 = (uint64_t *)result;
LABEL_2:
  float v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    float v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - (char *)v11;
    unint64_t v15 = (a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v22 = *((void *)a2 - 1);
          uint64_t v23 = *v11;
          if (*(float *)(v22 + 28) >= *(float *)(*v11 + 28))
          {
            uint64_t *v11 = v22;
            *((void *)a2 - 1) = v23;
          }
          break;
        case 3uLL:
          uint64_t result = _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(v11, v11 + 1, (uint64_t *)a2 - 1);
          break;
        case 4uLL:
          uint64_t result = _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SP_SP_SE_(v11, v11 + 1, v11 + 2, (uint64_t *)a2 - 1);
          break;
        case 5uLL:
          uint64_t result = _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SP_SP_SP_SE_(v11, v11 + 1, v11 + 2, v11 + 3, (uint64_t *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        return (uint64_t)_ZNSt3__119__partial_sort_implB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEESO_EET1_SP_SP_T2_OSE_((char *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    float v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(v11, &v11[v15 >> 1], (uint64_t *)a2 - 1);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(v11 + 1, v17 - 1, (uint64_t *)a2 - 2);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(v11 + 2, &v11[v16 + 1], (uint64_t *)a2 - 3);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(v17 - 1, v17, &v11[v16 + 1]);
      uint64_t v18 = *v11;
      uint64_t *v11 = *v17;
      *float v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(&v11[v15 >> 1], v11, (uint64_t *)a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(float *)(*(v11 - 1) + 28) < *(float *)(*v11 + 28))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **,kaldi::quasar::ConfusionNetworkSlot<std::string>::SortArcs(void)::{lambda(std::_ClassicAlgPolicy &,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> ** &)#1} &>(v11, (uint64_t *)a2);
      float v11 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    BOOL v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **,kaldi::quasar::ConfusionNetworkSlot<std::string>::SortArcs(void)::{lambda(std::_ClassicAlgPolicy &,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> ** &)#1} &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEbT1_SP_SE_(v11, v19);
    float v11 = v19 + 1;
    uint64_t result = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEbT1_SP_SE_(v19 + 1, (uint64_t *)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEELb0EEEvT1_SP_SE_NS_15iterator_traitsISP_E15difference_typeEb(v10, v19, a3, -v13, a5 & 1);
      float v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)_ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SE_(v11, (uint64_t *)a2);
  }
  else if (v11 != (uint64_t *)a2)
  {
    while (v10 + 1 != (uint64_t *)a2)
    {
      uint64_t v26 = *v10;
      uint64_t v25 = v10[1];
      unint64_t v24 = ++v10;
      float v27 = *(float *)(v25 + 28);
      if (v27 >= *(float *)(v26 + 28))
      {
        do
        {
          *unint64_t v24 = v26;
          uint64_t v26 = *(v24 - 2);
          --v24;
        }
        while (v27 >= *(float *)(v26 + 28));
        *unint64_t v24 = v25;
      }
    }
  }
  return result;
}

uint64_t *_ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SE_(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v6 = *v4;
        uint64_t v5 = v4[1];
        uint64_t v4 = v2;
        float v7 = *(float *)(v5 + 28);
        if (v7 >= *(float *)(v6 + 28))
        {
          uint64_t v8 = v3;
          while (1)
          {
            *(uint64_t *)((char *)result + v8 + 8) = v6;
            if (!v8) {
              break;
            }
            uint64_t v6 = *(uint64_t *)((char *)result + v8 - 8);
            v8 -= 8;
            if (v7 < *(float *)(v6 + 28))
            {
              uint64_t v9 = (uint64_t *)((char *)result + v8 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v9 = result;
LABEL_10:
          *uint64_t v9 = v5;
        }
        uint64_t v2 = v4 + 1;
        v3 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  float v4 = *(float *)(*a2 + 28);
  uint64_t v5 = *a1;
  float v6 = *(float *)(*a1 + 28);
  uint64_t v7 = *a3;
  float v8 = *(float *)(*a3 + 28);
  if (v4 >= v6)
  {
    if (v8 >= v4)
    {
      *a1 = v7;
      *a3 = v5;
    }
    else
    {
      *a1 = v3;
      *a2 = v5;
      if (*(float *)(*a3 + 28) >= v6)
      {
        *a2 = *a3;
        *a3 = v5;
        return 2;
      }
    }
  }
  else
  {
    if (v8 < v4) {
      return 0;
    }
    *a2 = v7;
    *a3 = v3;
    uint64_t v10 = *a1;
    if (*(float *)(*a2 + 28) >= *(float *)(*a1 + 28))
    {
      *a1 = *a2;
      *a2 = v10;
      return 2;
    }
  }
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **,kaldi::quasar::ConfusionNetworkSlot<std::string>::SortArcs(void)::{lambda(std::_ClassicAlgPolicy &,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> ** &)#1} &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  float v3 = *(float *)(*a1 + 28);
  if (v3 >= *(float *)(*(a2 - 1) + 28))
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = v5[1];
      ++v5;
    }
    while (v3 < *(float *)(v6 + 28));
  }
  else
  {
    float v4 = a1 + 1;
    do
    {
      uint64_t v5 = v4;
      if (v4 >= a2) {
        break;
      }
      ++v4;
    }
    while (v3 < *(float *)(*v5 + 28));
  }
  if (v5 < a2)
  {
    do
      uint64_t v7 = *--a2;
    while (v3 >= *(float *)(v7 + 28));
  }
  if (v5 < a2)
  {
    uint64_t v8 = *v5;
    uint64_t v9 = *a2;
    do
    {
      *uint64_t v5 = v9;
      *a2 = v8;
      do
      {
        uint64_t v10 = v5[1];
        ++v5;
        uint64_t v8 = v10;
      }
      while (v3 < *(float *)(v10 + 28));
      do
      {
        uint64_t v11 = *--a2;
        uint64_t v9 = v11;
      }
      while (v3 >= *(float *)(v11 + 28));
    }
    while (v5 < a2);
  }
  if (v5 - 1 != a1) {
    *a1 = *(v5 - 1);
  }
  *(v5 - 1) = v2;
  return v5;
}

void *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **,kaldi::quasar::ConfusionNetworkSlot<std::string>::SortArcs(void)::{lambda(std::_ClassicAlgPolicy &,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> ** &)#1} &>(void *a1, void *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  float v4 = *(float *)(*a1 + 28);
  do
    uint64_t v5 = a1[++v2];
  while (*(float *)(v5 + 28) >= v4);
  unint64_t v6 = (unint64_t)&a1[v2];
  uint64_t v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= (unint64_t)a2) {
        break;
      }
      uint64_t v9 = *--a2;
    }
    while (*(float *)(v9 + 28) < v4);
  }
  else
  {
    do
      uint64_t v8 = *--a2;
    while (*(float *)(v8 + 28) < v4);
  }
  if (v6 < (unint64_t)a2)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = &a1[v2];
    uint64_t v12 = a2;
    do
    {
      void *v11 = v10;
      void *v12 = v5;
      do
      {
        uint64_t v13 = v11[1];
        ++v11;
        uint64_t v5 = v13;
      }
      while (*(float *)(v13 + 28) >= v4);
      do
      {
        uint64_t v14 = *--v12;
        uint64_t v10 = v14;
      }
      while (*(float *)(v14 + 28) < v4);
    }
    while (v11 < v12);
    uint64_t v7 = v11 - 1;
  }
  if (v7 != a1) {
    *a1 = *v7;
  }
  void *v7 = v3;
  return v7;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEbT1_SP_SE_(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(float *)(v6 + 28) >= *(float *)(*a1 + 28))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SP_SP_SE_(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SP_SP_SP_SE_(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    float v13 = *(float *)(*v9 + 28);
    uint64_t v14 = *v8;
    if (v13 >= *(float *)(*v8 + 28))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v14;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v14 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v13 < *(float *)(v14 + 28))
        {
          float v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      float v17 = a1;
LABEL_12:
      *float v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SP_SP_SE_(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(float *)(*a4 + 28) >= *(float *)(*a3 + 28))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(float *)(*a3 + 28) >= *(float *)(*a2 + 28))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(float *)(*a2 + 28) >= *(float *)(*a1 + 28))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SP_SP_SP_SE_(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SP_SP_SE_(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  if (*(float *)(*a5 + 28) >= *(float *)(*a4 + 28))
  {
    *a4 = *a5;
    *a5 = v11;
    uint64_t v12 = *a3;
    if (*(float *)(*a4 + 28) >= *(float *)(*a3 + 28))
    {
      *a3 = *a4;
      *a4 = v12;
      uint64_t v13 = *a2;
      if (*(float *)(*a3 + 28) >= *(float *)(*a2 + 28))
      {
        *a2 = *a3;
        *a3 = v13;
        uint64_t v14 = *a1;
        if (*(float *)(*a2 + 28) >= *(float *)(*a1 + 28))
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

char *_ZNSt3__119__partial_sort_implB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEESO_EET1_SP_SP_T2_OSE_(char *a1, char *a2, char *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[8 * v10];
      do
      {
        _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_OSE_NS_15iterator_traitsISP_E15difference_typeESP_((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        uint64_t v15 = *(void *)v14;
        if (*(float *)(*(void *)v14 + 28) >= *(float *)(*(void *)a1 + 28))
        {
          *(void *)uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_OSE_NS_15iterator_traitsISP_E15difference_typeESP_((uint64_t)a1, a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)a1;
        BOOL v19 = a1;
        do
        {
          char v20 = v19;
          v19 += 8 * v17 + 8;
          uint64_t v21 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v22 = v21 + 2;
          if (v22 < v16 && *(float *)(*(void *)v19 + 28) >= *(float *)(*((void *)v19 + 1) + 28))
          {
            v19 += 8;
            uint64_t v17 = v22;
          }
          *(void *)char v20 = *(void *)v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 8;
        if (v19 == v6)
        {
          *(void *)BOOL v19 = v18;
        }
        else
        {
          *(void *)BOOL v19 = *(void *)v6;
          *(void *)uint64_t v6 = v18;
          _ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_OSE_NS_15iterator_traitsISP_E15difference_typeE((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_OSE_NS_15iterator_traitsISP_E15difference_typeESP_(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (void *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *(float *)(*v8 + 28) >= *(float *)(v8[1] + 28))
      {
        ++v8;
        uint64_t v7 = v9;
      }
      uint64_t v10 = *v8;
      uint64_t v11 = *a4;
      float v12 = *(float *)(*a4 + 28);
      if (*(float *)(*v8 + 28) < v12)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (void *)(result + 8 * v7);
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && *(float *)(*v8 + 28) >= *(float *)(v8[1] + 28))
          {
            ++v8;
            uint64_t v7 = v14;
          }
          uint64_t v10 = *v8;
        }
        while (*(float *)(*v8 + 28) < v12);
        *a4 = v11;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_OSE_NS_15iterator_traitsISP_E15difference_typeE(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    int64_t v5 = (void *)(result + 8 * v4);
    uint64_t v8 = *(void *)(a2 - 8);
    uint64_t v6 = (void *)(a2 - 8);
    uint64_t v7 = v8;
    uint64_t v9 = *v5;
    float v10 = *(float *)(v8 + 28);
    if (*(float *)(*v5 + 28) >= v10)
    {
      do
      {
        *uint64_t v6 = v9;
        uint64_t v6 = v5;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        int64_t v5 = (void *)(result + 8 * v4);
        uint64_t v9 = *v5;
      }
      while (*(float *)(*v5 + 28) >= v10);
      *uint64_t v6 = v7;
    }
  }
  return result;
}

uint64_t std::__function::__value_func<std::vector<std::string> ()(std::vector<std::string>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(void *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(void *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(void *)(result + 24) = 0;
  }
  return a1;
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 176;
      std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,kaldi::quasar::ConfusionNetworkSlot<std::string>>(a1, v7 - 176, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 176;
      *((void *)&v16 + 1) -= 176;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,kaldi::quasar::ConfusionNetworkSlot<std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a2 = *(_WORD *)a3;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(a2 + 8, (uint64_t *)(a3 + 8));
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(a2 + 48, (uint64_t *)(a3 + 48));
  long long v5 = *(_OWORD *)(a3 + 88);
  *(void *)(a2 + 104) = *(void *)(a3 + 104);
  *(_OWORD *)(a2 + 88) = v5;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(void *)(a2 + 128) = *(void *)(a3 + 128);
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  *(unsigned char *)(a2 + 136) = *(unsigned char *)(a3 + 136);
  return std::__function::__value_func<std::string ()(std::string)>::__value_func[abi:ne180100](a2 + 144, a3 + 144);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 176;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 176;
      uint64_t result = std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::destroy[abi:ne180100](v4, v1 - 176);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string&,int &,int &>(uint64_t *a1, long long *a2, int *a3, int *a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x333333333333333) {
    unint64_t v13 = 0x666666666666666;
  }
  else {
    unint64_t v13 = v7;
  }
  uint64_t v25 = a1 + 2;
  if (v13) {
    char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v11, v13);
  }
  else {
    char v14 = 0;
  }
  long long v15 = (std::string *)&v14[40 * v6];
  v22[0] = v14;
  v22[1] = v15;
  uint64_t v23 = v15;
  unint64_t v24 = &v14[40 * v13];
  int v16 = *a3;
  int v17 = *a4;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    long long v15 = v23;
  }
  else
  {
    long long v18 = *a2;
    v15->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v18;
  }
  BOOL v19 = &v14[40 * v6];
  *((_DWORD *)v19 + 6) = v16;
  *((_DWORD *)v19 + 7) = v17;
  v19[37] = 1;
  uint64_t v23 = (std::string *)((char *)v15 + 40);
  std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__swap_out_circular_buffer(a1, v22);
  uint64_t v20 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)v22);
  return v20;
}

void sub_1B2030D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string&,int &,int &,float &>(uint64_t *a1, long long *a2, int *a3, int *a4, int *a5)
{
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v7) {
    unint64_t v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v12 = 0x666666666666666;
  }
  else {
    unint64_t v12 = v7;
  }
  uint64_t v20 = a1 + 2;
  if (v12) {
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v12);
  }
  else {
    unint64_t v13 = 0;
  }
  int v16 = v13;
  int v17 = (std::string *)&v13[40 * v6];
  BOOL v19 = &v13[40 * v12];
  std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string>,std::string&,int &,int &,float &>(a1 + 16, v17, a2, a3, a4, a5);
  long long v18 = &v17[1].__r_.__value_.__s.__data_[16];
  std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__swap_out_circular_buffer(a1, &v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)&v16);
  return v14;
}

void sub_1B2030EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string>,std::string&,int &,int &,float &>(int a1, std::string *this, long long *a3, int *a4, int *a5, int *a6)
{
  int v7 = *a4;
  int v8 = *a5;
  int v9 = *a6;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v10;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = v7;
  HIDWORD(this[1].__r_.__value_.__r.__words[0]) = v8;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = v9;
  WORD2(this[1].__r_.__value_.__r.__words[1]) = 0;
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__emplace_back_slow_path<std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>> &,std::function<std::string ()(std::string)> &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x1745D1745D1745DLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v5) {
    unint64_t v5 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v8 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v8 = v5;
  }
  int v16 = a1 + 2;
  if (v8) {
    int v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>>((uint64_t)(a1 + 2), v8);
  }
  else {
    int v9 = 0;
  }
  unint64_t v12 = v9;
  unint64_t v13 = &v9[176 * v4];
  long long v15 = &v9[176 * v8];
  std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>> &,std::function<std::string ()(std::string)> &>((uint64_t)(a1 + 2), (uint64_t)v13, a2, a3);
  uint64_t v14 = v13 + 176;
  std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__swap_out_circular_buffer(a1, &v12);
  uint64_t v10 = a1[1];
  std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::~__split_buffer(&v12);
  return v10;
}

void sub_1B2031068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>> &,std::function<std::string ()(std::string)> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<std::string ()(std::string)>::__value_func[abi:ne180100]((uint64_t)v7, a4);
  kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot(a2, a3, (uint64_t)v7);
  return std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v7);
}

void sub_1B20310F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1},std::allocator<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::~__func()
{
}

void *std::__function::__func<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1},std::allocator<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F0A5ABD0;
  return result;
}

void std::__function::__func<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1},std::allocator<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5ABD0;
}

float std::__function::__func<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1},std::allocator<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::operator()(uint64_t a1, __int16 *a2, uint64_t a3)
{
  return std::__invoke[abi:ne180100]<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1} &,kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>(a1 + 8, a2, a3);
}

uint64_t std::__function::__func<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1},std::allocator<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1},std::allocator<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::target_type()
{
}

float std::__invoke[abi:ne180100]<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1} &,kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>(uint64_t a1, __int16 *a2, uint64_t a3)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  __int16 v10 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table((uint64_t)v11, (uint64_t *)a2 + 1);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table((uint64_t)v12, (uint64_t *)a2 + 6);
  *(_OWORD *)unint64_t v13 = *(_OWORD *)(a2 + 44);
  uint64_t v14 = *((void *)a2 + 13);
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *(_OWORD *)long long v15 = *((_OWORD *)a2 + 7);
  uint64_t v16 = *((void *)a2 + 16);
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  char v17 = *((unsigned char *)a2 + 136);
  std::__function::__value_func<std::string ()(std::string)>::__value_func[abi:ne180100]((uint64_t)v18, (uint64_t)(a2 + 72));
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  HasTokeuint64_t n = kaldi::quasar::ConfusionNetworkSlot<std::string>::HasToken((uint64_t)&v10, (uint64_t)__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v18);
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  if (HasToken) {
    float v6 = 0.0;
  }
  else {
    float v6 = 1.0;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v12);
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)v11);
  return v6;
}

void sub_1B2031340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  kaldi::quasar::ConfusionNetworkSlot<std::string>::~ConfusionNetworkSlot((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string const&,int &,int &>(uint64_t *a1, long long *a2, int *a3, int *a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x333333333333333) {
    unint64_t v13 = 0x666666666666666;
  }
  else {
    unint64_t v13 = v7;
  }
  uint64_t v25 = a1 + 2;
  if (v13) {
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v11, v13);
  }
  else {
    uint64_t v14 = 0;
  }
  long long v15 = (std::string *)&v14[40 * v6];
  v22[0] = v14;
  v22[1] = v15;
  uint64_t v23 = v15;
  unint64_t v24 = &v14[40 * v13];
  int v16 = *a3;
  int v17 = *a4;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    long long v15 = v23;
  }
  else
  {
    long long v18 = *a2;
    v15->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v18;
  }
  BOOL v19 = &v14[40 * v6];
  *((_DWORD *)v19 + 6) = v16;
  *((_DWORD *)v19 + 7) = v17;
  v19[37] = 1;
  uint64_t v23 = (std::string *)((char *)v15 + 40);
  std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__swap_out_circular_buffer(a1, v22);
  uint64_t v20 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)v22);
  return v20;
}

void sub_1B20314A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string const&,int &,int &,float &>(uint64_t *a1, long long *a2, int *a3, int *a4, int *a5)
{
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v7) {
    unint64_t v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v12 = 0x666666666666666;
  }
  else {
    unint64_t v12 = v7;
  }
  uint64_t v20 = a1 + 2;
  if (v12) {
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v12);
  }
  else {
    unint64_t v13 = 0;
  }
  int v16 = v13;
  int v17 = (std::string *)&v13[40 * v6];
  BOOL v19 = &v13[40 * v12];
  std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string>,std::string&,int &,int &,float &>(a1 + 16, v17, a2, a3, a4, a5);
  long long v18 = &v17[1].__r_.__value_.__s.__data_[16];
  std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__swap_out_circular_buffer(a1, &v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)&v16);
  return v14;
}

void sub_1B20315D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,kaldi::quasar::ConfusionNetworkSlot<std::string>>(a1 + 16, v8, v10);
      v10 += 176;
      v8 += 176;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *>((uint64_t)&v12, a2, v7, v6);
}

uint64_t std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::push_back[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    unint64_t v5 = a1[1];
    if (v5 <= *a1)
    {
      if (v4 == *a1) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = 0x5D1745D1745D1746 * ((v4 - *a1) >> 4);
      }
      unint64_t v12 = v11 >> 2;
      uint64_t v13 = a1[4];
      uint64_t v30 = v13;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>>(v13, v11);
      long long v15 = &v14[176 * v12];
      int v17 = &v14[176 * v16];
      unint64_t v18 = a1[1];
      int64_t v19 = a1[2] - v18;
      if (v19)
      {
        uint64_t v20 = v19 / 176;
        uint64_t v21 = &v15[176 * v20];
        uint64_t v22 = 176 * v20;
        uint64_t v23 = (uint64_t)v15;
        do
        {
          std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,kaldi::quasar::ConfusionNetworkSlot<std::string>>(v13, v23, v18);
          v23 += 176;
          v18 += 176;
          v22 -= 176;
        }
        while (v22);
        int64x2_t v24 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v24 = vdupq_n_s64(v18);
        uint64_t v21 = v15;
      }
      float v27 = (void *)*a1;
      *a1 = v14;
      a1[1] = v15;
      int64x2_t v28 = v24;
      uint64_t v25 = a1[3];
      a1[2] = v21;
      a1[3] = v17;
      uint64_t v29 = v25;
      std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::~__split_buffer(&v27);
      uint64_t v4 = a1[2];
    }
    else
    {
      uint64_t v6 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 4);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = v7 >> 1;
      uint64_t v9 = -176 * v8;
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *>((uint64_t)&v27, v5, v4, v5 - 176 * v8);
      uint64_t v4 = v10;
      a1[1] += v9;
      a1[2] = v10;
    }
  }
  uint64_t result = kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot(v4, a2);
  a1[2] += 176;
  return result;
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = 0; ; i -= 176)
  {
    uint64_t v8 = a3 + i;
    if (a3 + i == a2) {
      break;
    }
    uint64_t v9 = a4 + i;
    *(_WORD *)(a4 + i - 176) = *(_WORD *)(v8 - 176);
    std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__move_assign(a4 + i - 168, (uint64_t *)(v8 - 168));
    uint64_t v10 = v8 - 128;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(a4 + i - 128, (uint64_t *)v10);
    uint64_t v11 = (void **)(a4 + i - 88);
    if (*(char *)(a4 + i - 65) < 0) {
      operator delete(*v11);
    }
    long long v12 = *(_OWORD *)(v10 + 40);
    *(void *)(v9 - 72) = *(void *)(v10 + 56);
    *(_OWORD *)uint64_t v11 = v12;
    *(unsigned char *)(v10 + 63) = 0;
    *(unsigned char *)(v10 + 40) = 0;
    std::vector<int>::__move_assign(v9 - 64, (__n128 *)(v10 + 64));
    *(unsigned char *)(v9 - 40) = *(unsigned char *)(v10 + 88);
    std::__function::__value_func<std::string ()(std::string)>::operator=[abi:ne180100]((void *)(v9 - 32), v10 + 96);
  }
  return a3;
}

void std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + ++*(void *)(result + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    void *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + ++*(void *)(result + 24) = 0;
  }
}

void *std::__function::__value_func<std::string ()(std::string)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<std::string ()(std::string)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + ++*(void *)(result + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<std::string ()(std::string)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<std::string ()(std::string)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<std::string ()(std::string)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<std::string ()(std::string)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<std::string ()(std::string)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (long long *)a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 2;
        v12[1] = v8 + 5;
        std::pair<std::string &,kaldi::quasar::ConfusionNetworkArc<std::string> &>::operator=[abi:ne180100]<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>,(void *)0>((uint64_t)v12, (uint64_t)(v4 + 1));
        uint64_t v10 = (void *)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        uint64_t v4 = *(long long **)v4;
        if (v10) {
          BOOL v11 = v4 == (long long *)a3;
        }
        else {
          BOOL v11 = 1;
        }
        uint64_t v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != (long long *)a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_multi<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>(a1, v4 + 1);
    uint64_t v4 = *(long long **)v4;
  }
}

void sub_1B2031D18(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1B2031D34(_Unwind_Exception *a1)
{
}

uint64_t std::pair<std::string &,kaldi::quasar::ConfusionNetworkArc<std::string> &>::operator=[abi:ne180100]<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)(a2 + 24);
  if (v4 != a2 + 24)
  {
    std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__assign_with_size[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>(v4 + 8, *(std::string **)(a2 + 32), *(long long **)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v4 + 32), *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v4 + 56), *(char **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
  }
  std::function<float ()(float,float)>::operator=((void *)(v4 + 80), a2 + 104);
  return a1;
}

void std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__assign_with_size[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  BOOL v9 = *(std::string **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100]((void *)a1, v11);
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>(v8, (long long *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,0>(__str, v13, v9);
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>(v8, (long long *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,0>(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 17) < 0) {
        operator delete(*(void **)(v16 - 40));
      }
      v16 -= 40;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B2031F54(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B2031F5C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,0>(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str == a2) {
    return __str;
  }
  unint64_t v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    std::string::size_type v6 = *(std::string::size_type *)((char *)v4[1].__r_.__value_.__r.__words + 6);
    this[1].__r_.__value_.__r.__words[0] = v4[1].__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)this[1].__r_.__value_.__r.__words + 6) = v6;
    this = (std::string *)((char *)this + 40);
    uint64_t v4 = (std::string *)((char *)v4 + 40);
  }
  while (v4 != v5);
  return v5;
}

void *std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_multi<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>(void *a1, long long *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__construct_node<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1B203202C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__construct_node<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x98uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((void *)v7 + 1) = result;
  return result;
}

void sub_1B20320C0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::string ()(std::string)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        unint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B2032338(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = a4 + v7;
    *(_WORD *)(a4 + v7) = *(_WORD *)(a2 + v7);
    std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__move_assign(a4 + v7 + 8, (uint64_t *)(a2 + v7 + 8));
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(a4 + v7 + 48, (uint64_t *)(a2 + v7 + 48));
    BOOL v9 = (void **)(a4 + v7 + 88);
    if (*(char *)(a4 + v7 + 111) < 0) {
      operator delete(*v9);
    }
    long long v10 = *(_OWORD *)(a2 + v7 + 88);
    *(void *)(v8 + 104) = *(void *)(a2 + v7 + 104);
    *(_OWORD *)BOOL v9 = v10;
    *(unsigned char *)(a2 + v7 + 111) = 0;
    *(unsigned char *)(a2 + v7 + 88) = 0;
    std::vector<int>::__move_assign(v8 + 112, (__n128 *)(a2 + v7 + 112));
    *(unsigned char *)(v8 + 136) = *(unsigned char *)(a2 + v7 + 136);
    uint64_t v11 = a2 + v7 + 144;
    std::__function::__value_func<std::string ()(std::string)>::operator=[abi:ne180100]((void *)(v8 + 144), v11);
    v7 += 176;
  }
  while (v11 + 32 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,kaldi::quasar::ConfusionNetworkSlot<std::string>>(a1, v4, v6);
      v6 += 176;
      uint64_t v4 = v12 + 176;
      v12 += 176;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t quasar::lm::nullstream(quasar::lm *this)
{
  uint64_t v2 = &quasar::lm::nullstream(void)::os;
  if (atomic_load_explicit((atomic_ullong *volatile)&quasar::lm::nullstream_flag, memory_order_acquire) != -1)
  {
    v5[0] = &v3;
    v5[1] = &v2;
    uint64_t v4 = v5;
    std::__call_once(&quasar::lm::nullstream_flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<quasar::lm::nullstream(void)::$_0 &&,std::ofstream **&&>>);
  }
  return quasar::lm::nullstream(void)::os;
}

fst *quasar::lm::LogMessage::LogMessage(fst *a1, int a2, const char *a3, const char *a4)
{
  *(unsigned char *)a1 = a2 == 5;
  if (quasar::lm::gMinimumLevel <= a2) {
    uint64_t v8 = (void *)fst::cerr(a1);
  }
  else {
    uint64_t v8 = (void *)quasar::lm::nullstream(a1);
  }
  *((void *)a1 + 1) = v8;
  BOOL v9 = quasar::lm::operator<<(v8, a2);
  char v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (", 2);
  size_t v11 = strlen(a4);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a4, v11);
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
  size_t v14 = strlen(a3);
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)a3, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"():", 3);
  uint64_t v16 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") ", 2);
  return a1;
}

void *quasar::lm::operator<<(void *a1, int a2)
{
  switch(a2)
  {
    case 1:
      char v3 = "TRACE";
      goto LABEL_8;
    case 2:
      char v3 = "INFO";
      uint64_t v4 = 4;
      goto LABEL_9;
    case 3:
      char v3 = "WARNING";
      goto LABEL_6;
    case 5:
      char v3 = "FATAL";
LABEL_8:
      uint64_t v4 = 5;
      goto LABEL_9;
    default:
      char v3 = "UNKNOWN";
LABEL_6:
      uint64_t v4 = 7;
LABEL_9:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
      return a1;
  }
}

void quasar::lm::LogMessage::~LogMessage(quasar::lm::LogMessage *this)
{
  std::ios_base::getloc((const std::ios_base *)(*((void *)this + 1) + *(void *)(**((void **)this + 1) - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*(unsigned char *)this)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "LibLM encountered a fatal error.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
}

void sub_1B20327E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<quasar::lm::nullstream(void)::$_0 &&,std::ofstream **&&>>()
{
}

void sub_1B20329A4(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](v2);
  MEMORY[0x1B3EA8670](v1, 0x10F1C4067547207);
  _Unwind_Resume(a1);
}

double quasar::OnlineEmbeddingRetranslationDecoder::OnlineEmbeddingRetranslationDecoder(uint64_t a1, long long *a2)
{
  uint64_t v2 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v2 = &unk_1F0A58900;
  double result = 0.0;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_OWORD *)(v2 + 480) = 0u;
  *(_OWORD *)(v2 + 496) = 0u;
  *(void *)(v2 + 512) = 0;
  return result;
}

void quasar::OnlineEmbeddingRetranslationDecoder::~OnlineEmbeddingRetranslationDecoder(quasar::OnlineEmbeddingRetranslationDecoder *this)
{
  *(void *)this = &unk_1F0A58900;
  uint64_t v2 = (void *)*((void *)this + 62);
  if (v2)
  {
    *((void *)this + 63) = v2;
    operator delete(v2);
  }
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 61, 0);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 60, 0);
  uint64_t v3 = *((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::locale v4 = (std::__shared_weak_count *)*((void *)this + 58);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::unique_ptr<quasar::Config>::reset[abi:ne180100]((void ***)this + 56, 0);
  quasar::Decoder::~Decoder(this);
}

{
  uint64_t vars8;

  quasar::OnlineEmbeddingRetranslationDecoder::~OnlineEmbeddingRetranslationDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineEmbeddingRetranslationDecoder::finishInit(quasar::OnlineEmbeddingRetranslationDecoder *this)
{
  uint64_t v2 = *((void *)this + 56);
  if (*(char *)(v2 + 39) < 0)
  {
    if (!*(void *)(v2 + 24)) {
      goto LABEL_9;
    }
  }
  else if (!*(unsigned char *)(v2 + 39))
  {
    goto LABEL_9;
  }
  quasar::ModelLoader::readSymbolTable(*((void *)this + 46), v2 + 16, 4, 0, &v6);
  long long v3 = v6;
  long long v6 = 0uLL;
  std::locale v4 = (std::__shared_weak_count *)*((void *)this + 58);
  *(_OWORD *)((char *)this + 456) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (*((void *)&v6 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
    }
  }
  uint64_t v2 = *((void *)this + 56);
LABEL_9:
  quasar::QsrTextSymbolTable::init(*(const std::string **)v2, (quasar::OnlineEmbeddingRetranslationDecoder *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
  quasar::OnlineEmbeddingRetranslationDecoder::initPDecOptions(*((quasar::OnlineEmbeddingRetranslationDecoder **)this + 56), v5);
}

void sub_1B2032E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  a11 = (void **)(v11 - 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void quasar::OnlineEmbeddingRetranslationDecoder::initPDecOptions(quasar::OnlineEmbeddingRetranslationDecoder *this, const quasar::Config *a2)
{
}

void sub_1B2032F80(_Unwind_Exception *a1)
{
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void quasar::OnlineEmbeddingRetranslationDecoder::initPDecPartialOptions()
{
}

void sub_1B2033014(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1032C40806CDC9ALL);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read(uint64_t a1, const std::string *a2, int a3, char a4, char a5, uint64_t *a6)
{
  uint64_t v12 = (unsigned char *)(a1 + 4928);
  std::string::operator=((std::string *)(a1 + 4904), a2);
  unsigned char *v12 = a4;
  v12[1] = a5;
  uint64_t v14 = *a6;
  uint64_t v13 = a6[1];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 4936) = v14;
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 4944);
  *(void *)(a1 + 4944) = v13;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (a3)
  {
    fst::FstReadOptions::FstReadOptions(__p, a2, 0, 0, 0);
    int v19 = 2;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ReadMapped(a1, (uint64_t)__p);
  }
  unsigned __int8 v21 = 0;
  uint64_t v16 = (kaldi::Input *)kaldi::Input::Input(v20, a2, &v21);
  uint64_t v17 = kaldi::Input::Stream(v16);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read(a1, v17, v21, 0);
}

void sub_1B20331B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  kaldi::Input::~Input((kaldi::Input *)(v14 - 80));
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineEmbeddingRetranslationDecoder::getKeyForWord(uint64_t a1, uint64_t a2)
{
  uint64_t result = quasar::QsrTextSymbolTable::Find(**(void **)(a1 + 448), a2);
  if (result == -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::locale v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Could not find \"", 16);
    int v5 = *(char *)(a2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *(void *)a2;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "\" in base symbol table");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return result;
}

void quasar::OnlineEmbeddingRetranslationDecoder::runImpl()
{
}

void sub_1B2033344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::OnlineEmbeddingRetranslationDecoder::processData()
{
}

void sub_1B2033614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  a22 = &a26;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  int64x2_t v28 = *(void **)(v26 - 144);
  if (v28)
  {
    *(void *)(v26 - 136) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *(void **)(v26 - 120);
  if (v29)
  {
    *(void *)(v26 - 112) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineEmbeddingRetranslationDecoder::reportFinalResult(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[57];
  uint64_t v5 = a1[58];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 176);
  *(void *)(a2 + 168) = v6;
  *(void *)(a2 + 176) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  quasar::SymbolTableList::clear(*(quasar::SymbolTableList **)(*(void *)a3 + 472));
  uint64_t v8 = *(uint64_t **)(*(void *)a3 + 472);
  BOOL v9 = (uint64_t *)a1[56];
  uint64_t v11 = *v9;
  char v10 = (std::__shared_weak_count *)v9[1];
  uint64_t v12 = v11;
  uint64_t v13 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SymbolTableList::addSymbolTable(v8, &v12, 0, -1);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
}

void sub_1B2033B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<int,std::vector<int>,std::vector<int>,std::vector<kaldi::quasar::TranslationUtil::NbestElement>,float>::~tuple(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 56);
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t quasar::OnlineEmbeddingRetranslationDecoder::calculateCtCIdForFrameAndUpdateShortListIds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(*(void *)(a1 + 448) + 40) > v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v48, "Configured ctcShortListBeam is higher than provided frame dim");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v48);
  }
  int v49 = 0;
  unint64_t v50 = 0;
  std::locale v4 = &v49;
  int v48 = (uint64_t *)&v49;
  int v47 = 0;
  if (v3 > 0)
  {
    int v8 = 0;
    do
    {
      int v46 = *(_DWORD *)(*(void *)a2 + 4 * v8);
      std::__tree<std::pair<float,int>>::__emplace_multi<float,int &>(&v48, &v46, &v47);
      if (v50 > *(int *)(*(void *)(a1 + 448) + 40))
      {
        BOOL v9 = v48;
        std::__tree<std::string>::__remove_node_pointer(&v48, v48);
        operator delete(v9);
      }
      int v8 = v47 + 1;
      int v47 = v8;
    }
    while (v8 < *(_DWORD *)(a2 + 8));
    char v10 = v48;
    if (v48 != (uint64_t *)&v49)
    {
      float v11 = 0.0;
      uint64_t v12 = v48;
      do
      {
        float v13 = expf(*((float *)v12 + 7));
        uint64_t v14 = (uint64_t *)v12[1];
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            uint64_t v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v15 = (uint64_t *)v12[2];
            BOOL v16 = *v15 == (void)v12;
            uint64_t v12 = v15;
          }
          while (!v16);
        }
        float v11 = v11 + v13;
        uint64_t v12 = v15;
      }
      while (v15 != (uint64_t *)&v49);
      if (v10 != (uint64_t *)&v49)
      {
        float v17 = 0.0;
        unint64_t v18 = (uint64_t *)&v49;
        do
        {
          if ((float)(v17 / v11) > *(float *)(*(void *)(a1 + 448) + 44)) {
            break;
          }
          int v19 = (uint64_t *)*v18;
          uint64_t v20 = *v18;
          unsigned __int8 v21 = v18;
          if (*v18)
          {
            do
            {
              uint64_t v22 = v20;
              uint64_t v20 = *(void *)(v20 + 8);
            }
            while (v20);
          }
          else
          {
            do
            {
              uint64_t v22 = v21[2];
              BOOL v16 = *(void *)v22 == (void)v21;
              unsigned __int8 v21 = (uint64_t *)v22;
            }
            while (v16);
          }
          if (*(int *)(v22 + 32) >= 1)
          {
            uint64_t v23 = v18;
            if (v19)
            {
              do
              {
                int64x2_t v24 = v19;
                int v19 = (uint64_t *)v19[1];
              }
              while (v19);
            }
            else
            {
              do
              {
                int64x2_t v24 = (uint64_t *)v23[2];
                BOOL v16 = *v24 == (void)v23;
                uint64_t v23 = v24;
              }
              while (v16);
            }
            int v25 = *((_DWORD *)v24 + 8) - 1;
            float v27 = *(int **)(a3 + 8);
            unint64_t v26 = *(void *)(a3 + 16);
            if ((unint64_t)v27 >= v26)
            {
              uint64_t v29 = *(int **)a3;
              uint64_t v30 = ((uint64_t)v27 - *(void *)a3) >> 2;
              unint64_t v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v32 = v26 - (void)v29;
              if (v32 >> 1 > v31) {
                unint64_t v31 = v32 >> 1;
              }
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v31;
              }
              if (v33)
              {
                unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a3 + 16, v33);
                uint64_t v29 = *(int **)a3;
                float v27 = *(int **)(a3 + 8);
              }
              else
              {
                unint64_t v34 = 0;
              }
              float v35 = (int *)&v34[4 * v30];
              *float v35 = v25;
              int64x2_t v28 = v35 + 1;
              while (v27 != v29)
              {
                int v36 = *--v27;
                *--float v35 = v36;
              }
              *(void *)a3 = v35;
              *(void *)(a3 + 8) = v28;
              *(void *)(a3 + 16) = &v34[4 * v33];
              if (v29) {
                operator delete(v29);
              }
            }
            else
            {
              *float v27 = v25;
              int64x2_t v28 = v27 + 1;
            }
            *(void *)(a3 + 8) = v28;
            int v19 = (uint64_t *)*v18;
          }
          int v37 = v19;
          unint64_t v38 = v18;
          if (v19)
          {
            do
            {
              uint64_t v39 = (uint64_t)v37;
              int v37 = (uint64_t *)v37[1];
            }
            while (v37);
          }
          else
          {
            do
            {
              uint64_t v39 = v38[2];
              BOOL v16 = *(void *)v39 == (void)v38;
              unint64_t v38 = (uint64_t *)v39;
            }
            while (v16);
          }
          float v40 = expf(*(float *)(v39 + 28));
          if (v19)
          {
            do
            {
              long long v41 = v19;
              int v19 = (uint64_t *)v19[1];
            }
            while (v19);
          }
          else
          {
            do
            {
              long long v41 = (uint64_t *)v18[2];
              BOOL v16 = *v41 == (void)v18;
              unint64_t v18 = v41;
            }
            while (v16);
          }
          float v17 = v17 + v40;
          unint64_t v18 = v41;
        }
        while (v41 != v48);
      }
    }
  }
  if (v49)
  {
    int v42 = v49;
    do
    {
      uint64_t v43 = v42;
      int v42 = (void *)v42[1];
    }
    while (v42);
  }
  else
  {
    do
    {
      uint64_t v43 = v4[2];
      BOOL v16 = *v43 == (void)v4;
      std::locale v4 = (void **)v43;
    }
    while (v16);
  }
  uint64_t v44 = *((unsigned int *)v43 + 8);
  std::__tree<int>::destroy((uint64_t)&v48, v49);
  return v44;
}

void sub_1B2033F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

void quasar::OnlineEmbeddingRetranslationDecoder::populateShrinkedAedVecs(int a1, uint64_t a2, int *a3, uint64_t a4, char **a5, BOOL *a6)
{
  int v12 = *a3;
  if (*a3)
  {
    if (*(_DWORD *)(*(void *)(a4 + 8) - 4) == a1)
    {
      kaldi::VectorBase<float>::AddVec<float>((uint64_t)(a5[1] - 24), (const float **)a2, 1.0);
      goto LABEL_23;
    }
    if (v12 >= 1)
    {
      float v13 = 1.0 / (double)v12;
      kaldi::VectorBase<float>::Scale((uint64_t)(a5[1] - 24), v13);
    }
  }
  *a3 = 0;
  unint64_t v14 = (unint64_t)a5[2];
  uint64_t v15 = a5[1];
  if ((unint64_t)v15 >= v14)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v15 - *a5) >> 3);
    unint64_t v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)*a5) >> 3);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0x555555555555555) {
      unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20) {
      unsigned __int8 v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a5 + 2), v20);
    }
    else {
      unsigned __int8 v21 = 0;
    }
    uint64_t v22 = &v21[24 * v17];
    uint64_t v23 = &v21[24 * v20];
    *(void *)uint64_t v22 = 0;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 2) = 0;
    *(void *)uint64_t v22 = *(void *)a2;
    *((_DWORD *)v22 + 2) = *(_DWORD *)(a2 + 8);
    BOOL v16 = v22 + 24;
    int v25 = *a5;
    int64x2_t v24 = a5[1];
    if (v24 != *a5)
    {
      do
      {
        *((void *)v22 - 3) = 0;
        *((void *)v22 - 2) = 0;
        v22 -= 24;
        *((void *)v22 + 2) = 0;
        uint64_t v26 = *((void *)v24 - 3);
        v24 -= 24;
        *(void *)uint64_t v22 = v26;
        *((_DWORD *)v22 + 2) = *((_DWORD *)v24 + 2);
      }
      while (v24 != v25);
      int64x2_t v24 = *a5;
    }
    *a5 = v22;
    a5[1] = v16;
    a5[2] = v23;
    if (v24) {
      operator delete(v24);
    }
  }
  else
  {
    *(void *)uint64_t v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = 0;
    *(void *)uint64_t v15 = *(void *)a2;
    *((_DWORD *)v15 + 2) = *(_DWORD *)(a2 + 8);
    BOOL v16 = v15 + 24;
  }
  a5[1] = v16;
LABEL_23:
  ++*a3;
  unint64_t v27 = *(void *)(a4 + 16);
  int64x2_t v28 = *(_DWORD **)(a4 + 8);
  if ((unint64_t)v28 >= v27)
  {
    uint64_t v30 = *(_DWORD **)a4;
    uint64_t v31 = ((uint64_t)v28 - *(void *)a4) >> 2;
    unint64_t v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v33 = v27 - (void)v30;
    if (v33 >> 1 > v32) {
      unint64_t v32 = v33 >> 1;
    }
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v32;
    }
    if (v34)
    {
      float v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v34);
      uint64_t v30 = *(_DWORD **)a4;
      int64x2_t v28 = *(_DWORD **)(a4 + 8);
    }
    else
    {
      float v35 = 0;
    }
    int v36 = &v35[4 * v31];
    int v37 = &v35[4 * v34];
    *(_DWORD *)int v36 = a1;
    uint64_t v29 = v36 + 4;
    while (v28 != v30)
    {
      int v38 = *--v28;
      *((_DWORD *)v36 - 1) = v38;
      v36 -= 4;
    }
    *(void *)a4 = v36;
    *(void *)(a4 + 8) = v29;
    *(void *)(a4 + 16) = v37;
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    *int64x2_t v28 = a1;
    uint64_t v29 = v28 + 1;
  }
  *(void *)(a4 + 8) = v29;
  *a6 = (*a6 | a1) != 0;
}

void quasar::OnlineEmbeddingRetranslationDecoder::runPDec(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int **a7)
{
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a5 + 8))(a5, a4)) {
    uint64_t v12 = 480;
  }
  else {
    uint64_t v12 = 488;
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*(void *)(a1 + 472), *(void *)(a1 + v12), a6);
  std::__sort<std::__less<int,int> &,int *>();
  float v13 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>(*a7, a7[1]);
  if (a7[1] != v13) {
    a7[1] = v13;
  }
  quasar::OnlineEmbeddingRetranslationDecoder::prepareShrinkedEmbeddings(a1, a2, a3, (uint64_t)v14);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ReadEmbeddings<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*(void *)(a1 + 472), *(void *)(a1 + v12), (uint64_t)v14, a7);
}

void sub_1B203436C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::LatticeToNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>()
{
}

void sub_1B2035034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a29);
  std::__tree<int>::destroy((uint64_t)&STACK[0x310], (void *)STACK[0x318]);
  a29 = (uint64_t)&STACK[0x328];
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~ImplToFst((void *)(v29 - 240));
  uint64_t v31 = *(void **)(v29 - 216);
  if (v31)
  {
    *(void *)(v29 - 208) = v31;
    operator delete(v31);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~ImplToFst((void *)(v29 - 160));
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::GetCurrentBestWordIds(void *a1, uint64_t a2)
{
  std::locale v4 = (void *)a1[723];
  if (v4 == (void *)a1[724]) {
    uint64_t v5 = (unsigned int *)(a1 + 729);
  }
  else {
    uint64_t v5 = (unsigned int *)(*v4 + 32);
  }
  uint64_t v6 = *v5;
  if (v6)
  {
    uint64_t v7 = *(_DWORD **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    if ((int)v6 >= 1)
    {
      int v8 = (void *)(a2 + 16);
      uint64_t v9 = a1[726];
      do
      {
        char v10 = (_DWORD *)(v9 + 8 * v6 + 4);
        if ((unint64_t)v7 >= *v8)
        {
          float v11 = *(_DWORD **)a2;
          uint64_t v12 = ((uint64_t)v7 - *(void *)a2) >> 2;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = *v8 - (void)v11;
          if (v14 >> 1 > v13) {
            unint64_t v13 = v14 >> 1;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            BOOL v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v15);
            float v11 = *(_DWORD **)a2;
            uint64_t v7 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            BOOL v16 = 0;
          }
          unint64_t v17 = &v16[4 * v12];
          *(_DWORD *)unint64_t v17 = *v10;
          unint64_t v18 = v17 + 4;
          while (v7 != v11)
          {
            int v19 = *--v7;
            *((_DWORD *)v17 - 1) = v19;
            v17 -= 4;
          }
          *(void *)a2 = v17;
          *(void *)(a2 + 8) = v18;
          *(void *)(a2 + 16) = &v16[4 * v15];
          if (v11) {
            operator delete(v11);
          }
          uint64_t v7 = v18;
        }
        else
        {
          *v7++ = *v10;
        }
        *(void *)(a2 + 8) = v7;
        uint64_t v9 = a1[726];
        uint64_t v6 = *(unsigned int *)(v9 + 8 * v6);
      }
      while ((int)v6 > 0);
      unint64_t v20 = *(_DWORD **)a2;
      unsigned __int8 v21 = v7 - 1;
      if (*(_DWORD **)a2 != v7 && v21 > v20)
      {
        unint64_t v23 = (unint64_t)(v20 + 1);
        do
        {
          int v24 = *(_DWORD *)(v23 - 4);
          *(_DWORD *)(v23 - 4) = *v21;
          *v21-- = v24;
          BOOL v25 = v23 >= (unint64_t)v21;
          v23 += 4;
        }
        while (!v25);
      }
    }
  }
}

void quasar::OnlineEmbeddingRetranslationDecoder::reportPartialResult(quasar::QsrTextSymbolTable ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (*(unsigned char *)(a2 + 561))
  {
    uint64_t v6 = *(void *)(*(void *)a3 + 560);
    quasar::OnlineEmbeddingRetranslationDecoder::getBestWords(a1, a5, (uint64_t)v14);
    uint64_t v7 = *(unsigned int *)(*(void *)a4 + 12);
    memset(v13, 0, sizeof(v13));
    memset(v12, 0, sizeof(v12));
    memset(v11, 0, sizeof(v11));
    LOBYTE(v8) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "▁");
    (*(void (**)(uint64_t, unsigned char *, uint64_t, uint64_t, void, void, void *, void *, void *, _WORD, void ***))(*(void *)v6 + 24))(v6, v14, v7, 1, 0, 0, v13, v12, v11, 0, &v8);
    if (v10 < 0) {
      operator delete(__p);
    }
    int v8 = (void **)v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
    int v8 = (void **)v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
    int v8 = (void **)v13;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v8);
    int v8 = (void **)v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
}

void sub_1B2035458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  a13 = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = (char *)(v23 - 80);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = (char *)(v23 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void quasar::OnlineEmbeddingRetranslationDecoder::registerParams(quasar::OnlineEmbeddingRetranslationDecoder *this, quasar::SystemConfig *a2)
{
}

void sub_1B2035524(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1032C40C82A61FELL);
  _Unwind_Resume(a1);
}

double kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v19, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"entered Init with #ActiveHyps: ", 31);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v19);
  }
  *(void *)(a1 + 5712) = a3;
  kaldi::quasar::Encdec::Start(*(void *)(a1 + 136), *(_DWORD *)(a2 + 312), (const std::string *)(a2 + 112));
  (*(void (**)(void))(**(void **)(a1 + 5712) + 224))(*(void *)(a1 + 5712));
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 200))(a3);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 5712) + 176))(*(void *)(a1 + 5712), v7);
  *(_DWORD *)(a1 + 5720) = -1;
  *(int32x2_t *)(a1 + 5728) = vdup_n_s32(0x7F800000u);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 5736), 0, 0, 0);
  int v8 = *(_DWORD *)(a2 + 184);
  *(void *)(a1 + 5760) = 0x3F8000004F000000;
  if (v8 == 1) {
    *(float *)(a1 + 5764) = 1.0 - *(float *)(a2 + 180);
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare::NbestCompare((uint64_t)&v19, *(_DWORD *)(a2 + 216), *(float *)(a2 + 220), *(float *)(a2 + 224));
  *(void *)(a1 + 5768) = v19;
  *(_DWORD *)(a1 + 5776) = v20;
  *(void *)(a1 + 5792) = *(void *)(a1 + 5784);
  std::vector<kaldi::Matrix<float>>::resize((uint64_t *)(a1 + 4952), 1uLL);
  kaldi::Matrix<float>::Resize(*(int32x2_t **)(a1 + 4952), 0, 0, 0, 0);
  uint64_t v9 = *(void **)(a1 + 5136);
  char v10 = *(void **)(a1 + 5128);
  if (v9 != v10)
  {
    float v11 = v9 - 6;
    uint64_t v12 = v9 - 6;
    unint64_t v13 = v9 - 6;
    do
    {
      uint64_t v14 = *v13;
      v13 -= 6;
      (*(void (**)(void *))(v14 + 16))(v12);
      v11 -= 6;
      BOOL v15 = v12 == v10;
      uint64_t v12 = v13;
    }
    while (!v15);
  }
  *(void *)(a1 + 5136) = v10;
  uint64_t v16 = *(void *)(a1 + 5160);
  uint64_t v17 = *(void *)(a1 + 5152);
  while (v16 != v17)
    uint64_t v16 = kaldi::Matrix<float>::~Matrix(v16 - 40);
  *(void *)(a1 + 5160) = v17;
  double result = 0.0;
  *(void *)(a1 + 5832) = 0;
  *(void *)(a1 + 5872) = *(void *)(a1 + 5864);
  return result;
}

void sub_1B20357CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineEmbeddingRetranslationDecoder::prepareShrinkedEmbeddings@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "Provided aedVecBackCount is 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v15, -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3), 512, 1, 0);
  uint64_t v8 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      kaldi::MatrixBase<float>::CopyRowFromVec((uint64_t)v15, v8 + v9, v10++);
      uint64_t v8 = *a2;
      v9 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v10);
  }
  int v11 = kaldi::MatrixBase<float>::NumRows((uint64_t)v15);
  void v14[2] = 0;
  v14[0] = v15[0] + 4 * v16 * (v11 - 1);
  v14[1] = kaldi::MatrixBase<float>::NumCols((uint64_t)v15);
  float v12 = 1.0 / (double)a3;
  kaldi::VectorBase<float>::Scale((uint64_t)v14, v12);
  kaldi::MatrixBase<float>::Scale((uint64_t)v15, *(float *)(*(void *)(a1 + 448) + 224));
  *(_OWORD *)(a4 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  *(void *)a4 = &unk_1F0A51768;
  *(unsigned char *)(a4 + 40) = 0;
  kaldi::CuMatrix<float>::Swap(a4, v15);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v15);
}

void sub_1B2035974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ReadEmbeddings<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int **a4)
{
  uint64_t v8 = *(void *)(a1 + 136);
  int v9 = *(_DWORD *)(a2 + 288);
  int v10 = *(_DWORD *)(a2 + 292);
  std::string __p = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SuppressedIds(a1, a2 + 64, a2 + 88, (uint64_t *)(a2 + 328), (uint64_t)v11);
  kaldi::quasar::Encdec::ConstrainSoftmax(v8, a2 + 264, v9, v10, a4, (int **)&__p, v11);
  std::__tree<int>::destroy((uint64_t)v11, (void *)v11[1]);
  if (__p)
  {
    unint64_t v13 = __p;
    operator delete(__p);
  }
  kaldi::quasar::Encdec::ResetHistoryState(*(kaldi::quasar::Encdec **)(a1 + 136));
  kaldi::quasar::Encdec::StartFeedforward(*(void *)(a1 + 136), a3, 0, 1);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::AddInitialHypToCurrent<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2);
}

void sub_1B2035A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Write<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"entered Write with #ActiveHyps: ", 32);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  uint64_t v290 = 0;
  __src = 0;
  uint64_t v291 = 0;
  unint64_t v287 = 0;
  v286 = 0;
  std::locale v288 = 0;
  unint64_t v284 = 0;
  long long v283 = 0;
  uint64_t v285 = 0;
  std::priority_queue<float>::push((uint64_t)&v283, &kaldi::quasar::kMaxCost);
  if (*(float *)(a2 + 320) != 0.0)
  {
    uint64_t v8 = *(void *)(a1 + 136);
    if (!*(unsigned char *)(v8 + 2164) || !*(unsigned char *)(v8 + 2165))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Decoder repetition detection requires an alignment model with shifted alignments!", 81);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
  }
  BOOL v239 = (*(void *)(a2 + 200) || *(void *)(a2 + 208)) && (*(_DWORD *)(a2 + 184) - 1) < 2;
  if (a3 >= 1)
  {
    uint64_t v231 = 0;
    long long v244 = (unsigned __int8 *)(a1 + 5238);
    int v9 = *(_DWORD *)(a2 + 188);
    uint64_t v10 = *(int *)(a1 + 5836);
    uint64_t v230 = v10 + a3;
    v234 = (int32x2_t *)(a1 + 4976);
    uint64_t v233 = (int32x2_t *)(a1 + 5024);
    int v11 = (int32x2_t *)(a1 + 5072);
    long long v229 = (char *)(a1 + 5784);
    double v12 = 1.0;
    uint64_t v13 = 0x4F0000004F000000;
    float v227 = 2147500000.0;
    uint64_t v14 = 0x4F0000004F000000;
    int v228 = v9;
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 5784);
      uint64_t v16 = *(void *)(a1 + 5792);
      if (v15 == v16) {
        goto LABEL_305;
      }
      if ((v9 != 1) | v231 & 1)
      {
        if (v9 == 2)
        {
          if (*(float *)v283 < v227) {
            goto LABEL_305;
          }
        }
        else if (v9 || SHIDWORD(v231) >= *(_DWORD *)(a2 + 160))
        {
          goto LABEL_305;
        }
      }
      if (*(float *)(a2 + 320) != 0.0 && *(unsigned char *)(*(void *)v15 + 200)) {
        goto LABEL_305;
      }
      uint64_t v17 = v286;
      unint64_t v18 = v287;
      if (v287 != v286)
      {
        do
        {
          std::vector<std::wstring>::pointer end = v18[-2].__end_;
          if (end)
          {
            v18[-2].__end_cap_.__value_ = end;
            operator delete(end);
          }
          unint64_t v18 = (std::vector<int> *)((char *)v18 - 56);
        }
        while (v18 != v17);
        uint64_t v16 = *(void *)(a1 + 5792);
        uint64_t v15 = *(void *)(a1 + 5784);
      }
      unint64_t v287 = v17;
      *(_OWORD *)long long v280 = 0u;
      long long v281 = 0u;
      int v282 = 1065353216;
      uint64_t v238 = v10;
      if (v16 != v15)
      {
        unint64_t v20 = 0;
        do
        {
          LODWORD(v270) = 0;
          LODWORD(v270) = **(_DWORD **)(v15 + 8 * v20);
          *(void *)std::string __p = &v270;
          unsigned __int8 v21 = std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v280, (int *)&v270, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
          uint64_t v22 = v21;
          uint64_t v23 = (unint64_t *)v21[4];
          uint64_t v24 = (uint64_t)(v21 + 5);
          unint64_t v25 = v21[5];
          if ((unint64_t)v23 >= v25)
          {
            unint64_t v27 = (unint64_t *)v21[3];
            uint64_t v28 = v23 - v27;
            if ((unint64_t)(v28 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v29 = v25 - (void)v27;
            unint64_t v30 = (uint64_t)(v25 - (void)v27) >> 2;
            if (v30 <= v28 + 1) {
              unint64_t v30 = v28 + 1;
            }
            if (v29 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v30;
            }
            if (v31)
            {
              unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v24, v31);
              unint64_t v27 = (unint64_t *)v22[3];
              uint64_t v23 = (unint64_t *)v22[4];
            }
            else
            {
              unint64_t v32 = 0;
            }
            uint64_t v33 = (unint64_t *)&v32[8 * v28];
            *uint64_t v33 = v20;
            uint64_t v26 = v33 + 1;
            while (v23 != v27)
            {
              unint64_t v34 = *--v23;
              *--uint64_t v33 = v34;
            }
            void v22[3] = v33;
            v22[4] = v26;
            v22[5] = &v32[8 * v31];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *uint64_t v23 = v20;
            uint64_t v26 = v23 + 1;
          }
          v22[4] = v26;
          ++v20;
          uint64_t v15 = *(void *)(a1 + 5784);
        }
        while (v20 < (*(void *)(a1 + 5792) - v15) >> 3);
        float v35 = (void *)v281;
        if ((void)v281)
        {
LABEL_45:
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"input_batch_idx: ", 17);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
          }
          kaldi::CuMatrix<float>::Resize(v234, (v35[4] - v35[3]) >> 3, 1, 0, 0);
          int v36 = (void *)v35[3];
          int v37 = (void *)v35[4];
          if (v36 != v37)
          {
            int v38 = 0;
            do
            {
              if (kaldi::g_kaldi_verbose_level >= 5)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"hyp_idx: ", 9);
                std::ostream::operator<<();
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
              }
              uint64_t v39 = *(void *)(*(void *)(a1 + 5784) + 8 * *v36);
              if (v10 >= 1 && *(_DWORD *)(v39 + 40) == *(_DWORD *)(a1 + 5180))
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Final word in hyp list", 22);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
              }
              uint64_t v40 = *(void *)(v39 + 56);
              uint64_t v41 = *(void *)(v39 + 64);
              uint64_t v42 = v41 - v40;
              if (v41 != v40)
              {
                uint64_t v43 = 0;
                unint64_t v44 = v42 >> 2;
                if (v44 <= 1) {
                  unint64_t v44 = 1;
                }
                uint64_t v45 = *(void *)(a1 + 4984) + 4 * *(_DWORD *)(a1 + 5000) * v38;
                do
                {
                  *(float *)(v45 + 4 * v43) = (float)*(int *)(v40 + 4 * v43);
                  ++v43;
                }
                while (v44 != v43);
              }
              kaldi::quasar::Encdec::SetHistoryState(*(void *)(a1 + 136), (uint64_t **)(v39 + 8), v38++, (v35[4] - v35[3]) >> 3);
              ++v36;
            }
            while (v36 != v37);
          }
          kaldi::quasar::Encdec::Feedforward(*(void *)(a1 + 136), (uint64_t)v234, v233);
          uint64_t v240 = *(unsigned int *)(a1 + 5040);
          kaldi::Matrix<float>::Resize(v11, (v35[4] - v35[3]) >> 3, v240, 0, 0);
          kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v233, (int *)v11, 111);
          int v46 = (void *)v35[3];
          long long v232 = v35;
          long long v236 = (void *)v35[4];
          if (v46 == v236) {
            goto LABEL_194;
          }
          uint64_t v47 = 0;
          while (1)
          {
            int v48 = *(int **)(*(void *)(a1 + 5784) + 8 * *v46);
            kaldi::quasar::Encdec::GetHistoryState(*(void *)(a1 + 136), (uint64_t)(v48 + 2), v47);
            ++*(_DWORD *)(a1 + 5216);
            v255[0] = 0;
            v255[1] = 0;
            *(void *)&long long v256 = 0;
            int v49 = (uint64_t *)(v48 + 52);
            unint64_t v50 = *((void *)v48 + 27);
            if (v50 >= *((void *)v48 + 28))
            {
              uint64_t v51 = std::vector<kaldi::Vector<float>>::__push_back_slow_path<kaldi::Vector<float> const&>(v49, (uint64_t)v255);
            }
            else
            {
              std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::Vector<float> const&>((uint64_t)v49, (uint64_t)v255);
              uint64_t v51 = v50 + 24;
            }
            *((void *)v48 + 27) = v51;
            long long v278 = 0;
            long long v277 = 0;
            unint64_t v279 = 0;
            long long v52 = *(void **)(a1 + 136);
            uint64_t v53 = v52[271];
            if (v53 == v52[272]) {
              int v54 = -1;
            }
            else {
              int v54 = *(_DWORD *)(v53 + 4 * v47);
            }
            int v242 = v54;
            long long v275 = 0;
            long long v274 = 0;
            uint64_t v276 = 0;
            kaldi::quasar::Encdec::GetAlignmentProbabilities(v52, (uint64_t)&v274, v47);
            if (*(unsigned char *)(*(void *)(a1 + 136) + 1504)) {
              int v242 = kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952) + 40 * *v48) + ~v242;
            }
            if (*(float *)(a2 + 320) != 0.0)
            {
              *(void *)std::string __p = v48 + 10;
              uint64_t v55 = (std::vector<unsigned int> *)std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v48 + 20), v48 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
              int v56 = v55 + 1;
              unint64_t v57 = (unint64_t)((char *)v55[1].__end_ - (char *)v55[1].__begin_) >> 2;
              if (v242 + 1 > (int)v57) {
                LODWORD(v57) = v242 + 1;
              }
              std::vector<int>::resize(v55 + 1, (int)v57);
              if ((int)v56->__begin_[v242] >= 1)
              {
                *(void *)std::string __p = v48 + 10;
                int v58 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v48 + 40), v48 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
                ++*((_DWORD *)v58 + 5);
              }
              *(void *)std::string __p = v48 + 10;
              uint64_t v59 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v48 + 30), v48 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
              ++*((_DWORD *)v59 + 5);
              ++v56->__begin_[v242];
            }
            if (*(unsigned char *)(a1 + 5673))
            {
              long long v271 = 0u;
              long long v272 = 0u;
              long long v270 = &unk_1F0A51768;
              LOBYTE(v273) = 0;
              unint64_t v60 = *(void *)(a1 + 5136);
              uint64_t v61 = *(void *)(a1 + 5128);
              if (v60 >= *(void *)(a1 + 5144))
              {
                uint64_t v62 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>((uint64_t *)(a1 + 5128), (uint64_t)&v270);
              }
              else
              {
                kaldi::CuMatrix<float>::CuMatrix(*(void *)(a1 + 5136), &v270, 111);
                uint64_t v62 = v60 + 48;
                *(void *)(a1 + 5136) = v60 + 48;
              }
              *(void *)(a1 + 5136) = v62;
              double v63 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)v268, a1 + 5072, v47, 1, 0, *(_DWORD *)(a1 + 5080));
              kaldi::Matrix<float>::Matrix(__p, v268, 111, v63);
              unint64_t v64 = *(void *)(a1 + 5160);
              if (v64 >= *(void *)(a1 + 5168))
              {
                uint64_t v65 = std::vector<kaldi::Matrix<float>>::__push_back_slow_path<kaldi::Matrix<float>>((uint64_t *)(a1 + 5152), (uint64_t)__p);
              }
              else
              {
                kaldi::Matrix<float>::Matrix(*(void *)(a1 + 5160), __p);
                uint64_t v65 = v64 + 40;
                *(void *)(a1 + 5160) = v64 + 40;
              }
              *(void *)(a1 + 5160) = v65;
              kaldi::Matrix<float>::~Matrix((uint64_t)__p);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)v268);
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Not implemented", 15);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              }
              int v242 = -1431655765 * ((v60 - v61) >> 4);
              kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v270);
            }
            if (*(_DWORD *)(a2 + 184) != 2) {
              break;
            }
            uint64_t v66 = *(void *)(a2 + 208);
            uint64_t v67 = v48[9];
            *((void *)&v272 + 1) = 0;
            (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v66 + 136))(v66, v67, &v270);
            int v68 = -1;
            while (1)
            {
              if (!v270)
              {
                if (*((void *)&v272 + 1) >= *((void *)&v271 + 1)) {
                  goto LABEL_159;
                }
LABEL_94:
                uint64_t v69 = (*(_DWORD *)(v271 + 16 * *((void *)&v272 + 1)) - 1);
LABEL_95:
                int v68 = *(_DWORD *)(v271 + 16 * *((void *)&v272 + 1) + 12);
                goto LABEL_96;
              }
              if ((*(unsigned int (**)(void *))(*(void *)v270 + 24))(v270)) {
                break;
              }
              if (!v270) {
                goto LABEL_94;
              }
              uint64_t v69 = (*(_DWORD *)(*(uint64_t (**)(void))(*(void *)v270 + 32))() - 1);
              if (!v270) {
                goto LABEL_95;
              }
              int v68 = *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v270 + 32))(v270) + 12);
              if (v270)
              {
                uint64_t v70 = (*(uint64_t (**)(void *))(*(void *)v270 + 32))(v270);
                goto LABEL_97;
              }
LABEL_96:
              uint64_t v70 = v271 + 16 * *((void *)&v272 + 1);
LABEL_97:
              int v71 = *(_DWORD *)(v70 + 8);
              int VocabWordIdx = kaldi::quasar::Encdec::GetVocabWordIdx(*(kaldi::quasar::Encdec **)(a1 + 136), v69);
              *(_DWORD *)std::string __p = *(_DWORD *)(*(void *)(a1 + 5072)
                                         + 4 * *(_DWORD *)(a1 + 5088) * (int)v47
                                         + 4 * (int)v69);
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = VocabWordIdx;
              *(_DWORD *)&__p[36] = v68;
              LODWORD(v293) = v71;
              uint64_t v73 = v278;
              if ((unint64_t)v278 >= v279)
              {
                uint64_t v75 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement const&>((uint64_t *)&v277, (uint64_t)__p);
              }
              else
              {
                *(void *)long long v278 = *(void *)__p;
                *((void *)v73 + 2) = 0;
                *((void *)v73 + 3) = 0;
                *((void *)v73 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v73 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(void *)&__p[16] - *(void *)&__p[8]) >> 2);
                uint64_t v74 = *(void *)&__p[32];
                *((_DWORD *)v73 + 10) = v293;
                *((void *)v73 + 4) = v74;
                uint64_t v75 = (uint64_t *)(v73 + 48);
              }
              long long v278 = (char *)v75;
              if (*(void *)&__p[8])
              {
                *(void *)&__p[16] = *(void *)&__p[8];
                operator delete(*(void **)&__p[8]);
              }
              if (v270) {
                (*(void (**)(void *))(*(void *)v270 + 40))(v270);
              }
              else {
                ++*((void *)&v272 + 1);
              }
            }
            if (v270)
            {
              (*(void (**)(void))(*(void *)v270 + 8))();
              goto LABEL_161;
            }
LABEL_159:
            if ((void)v272) {
              --*(_DWORD *)v272;
            }
LABEL_161:
            *(_DWORD *)std::string __p = (*(float (**)(void, void))(**(void **)(a2 + 208) + 32))(*(void *)(a2 + 208), v48[9]);
            LODWORD(v270) = 2139095040;
            if (*(float *)__p != INFINITY)
            {
              float v106 = (*(float (**)(void, void))(**(void **)(a2 + 208) + 32))(*(void *)(a2 + 208), v48[9]);
              int SoftmaxEosId = kaldi::quasar::Encdec::GetSoftmaxEosId(*(kaldi::quasar::Encdec **)(a1 + 136));
              int v108 = *(_DWORD *)(a1 + 5180);
              *(_DWORD *)std::string __p = *(_DWORD *)(*(void *)(a1 + 5072)
                                         + 4 * *(_DWORD *)(a1 + 5088) * (int)v47
                                         + 4 * SoftmaxEosId);
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = v108;
              *(_DWORD *)&__p[36] = v68;
              *(float *)&long long v293 = v106;
              uint64_t v109 = v278;
              if ((unint64_t)v278 >= v279)
              {
                std::vector<std::wstring>::pointer v111 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement const&>((uint64_t *)&v277, (uint64_t)__p);
              }
              else
              {
                *(void *)long long v278 = *(void *)__p;
                *((void *)v109 + 2) = 0;
                *((void *)v109 + 3) = 0;
                *((void *)v109 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v109 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(void *)&__p[16] - *(void *)&__p[8]) >> 2);
                uint64_t v110 = *(void *)&__p[32];
                *((_DWORD *)v109 + 10) = v293;
                *((void *)v109 + 4) = v110;
                std::vector<std::wstring>::pointer v111 = (uint64_t *)(v109 + 48);
              }
              long long v278 = (char *)v111;
              if (*(void *)&__p[8])
              {
                *(void *)&__p[16] = *(void *)&__p[8];
                operator delete(*(void **)&__p[8]);
              }
            }
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>((uint64_t)v277, (uint64_t)v278, (uint64_t)__p, 0xAAAAAAAAAAAAAAABLL * ((v278 - (char *)v277) >> 4));
LABEL_168:
            uint64_t v112 = v278;
            long long v113 = v277;
            if (!*(unsigned char *)(a1 + 5239))
            {
              unint64_t v114 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v278 - (char *)v277) >> 4));
              if (v278 == (char *)v277) {
                uint64_t v115 = 0;
              }
              else {
                uint64_t v115 = v114;
              }
              std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,false>(v277, (uint64_t *)v278, (uint64_t)__p, v115, 1);
              std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::erase((uint64_t)&v277, (uint64_t)&v277[2 * *(int *)(a2 + 160)], (uint64_t)v278);
              uint64_t v112 = v278;
              long long v113 = v277;
            }
            if (v112 == (char *)v113 && kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Nothing left in heap", 20);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            }
            if (*(_DWORD *)(a2 + 184) != 5)
            {
              std::string::size_type v118 = v277;
              int v119 = v278;
              goto LABEL_190;
            }
            uint64_t v116 = *(void *)(a1 + 5840);
            unint64_t v117 = *(int *)(a1 + 5836);
            std::string::size_type v118 = v277;
            int v119 = v278;
            if (v117 >= (*(void *)(a1 + 5848) - v116) >> 2)
            {
LABEL_190:
              while (v118 != (std::vector<int> *)v119)
              {
                float v120 = *(float *)(a1 + 5764);
                int v121 = *v244;
                float v122 = *(float *)&v118->__begin_;
                float v123 = logf(*(float *)&v118->__begin_);
                if (!v121) {
                  float v123 = v122;
                }
                float v124 = -(float)(v120 * v123);
                float v125 = *(float *)(a2 + 180) * *(float *)&v118[1].__end_cap_.__value_;
                int v126 = (int)v118[1].__end_;
                *(float *)std::string __p = v125 + (float)(v124 + (float)(*((float *)v48 + 11) + *((float *)v48 + 12)));
                *(float *)&__p[4] = v124;
                *(float *)&__p[8] = v125;
                *(_DWORD *)&__p[12] = v242;
                memset(&__p[16], 0, 24);
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], v274, (uint64_t)v275, (v275 - (unsigned char *)v274) >> 2);
                LODWORD(v293) = v126;
                DWORD1(v293) = HIDWORD(v118[1].__end_);
                *((void *)&v293 + 1) = *v46;
                long long v127 = v287;
                if (v287 >= v288)
                {
                  uint64_t v128 = (std::vector<int> *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement const&>((uint64_t *)&v286, (uint64_t)__p);
                }
                else
                {
                  *(_OWORD *)&v287->__begin_ = *(_OWORD *)__p;
                  v127[1].__begin_ = 0;
                  v127[1].__end_ = 0;
                  v127->__end_cap_.__value_ = 0;
                  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v127->__end_cap_.__value_, *(const void **)&__p[16], *(uint64_t *)&__p[24], (uint64_t)(*(void *)&__p[24] - *(void *)&__p[16]) >> 2);
                  *(_OWORD *)&v127[1].__end_cap_.__value_ = v293;
                  uint64_t v128 = (std::vector<int> *)((char *)v127 + 56);
                }
                unint64_t v287 = v128;
                if (*(void *)&__p[16])
                {
                  *(void *)&__p[24] = *(void *)&__p[16];
                  operator delete(*(void **)&__p[16]);
                }
                v118 += 2;
              }
            }
            else if (v278 != (char *)v277)
            {
              if (LODWORD(v277[1].__end_) != *(_DWORD *)(v116 + 4 * v117)) {
                *(void *)(a1 + 5848) = v116;
              }
              goto LABEL_190;
            }
            if (v274)
            {
              long long v275 = v274;
              operator delete(v274);
            }
            *(void *)std::string __p = &v277;
            std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            kaldi::Vector<float>::Destroy((uint64_t)v255);
            uint64_t v10 = v238;
            ++v47;
            if (++v46 == v236)
            {
LABEL_194:
              float v35 = (void *)*v232;
              int v11 = (int32x2_t *)(a1 + 5072);
              if (!*v232) {
                goto LABEL_195;
              }
              goto LABEL_45;
            }
          }
          int v76 = kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952) + 40 * *v48);
          if (!v240) {
            goto LABEL_168;
          }
          uint64_t v77 = 0;
          LODWORD(v78) = (int)(float)(*(float *)(a1 + 5200)
                                    * (float)(v76 - (*(_DWORD *)(a1 + 5204) + *(_DWORD *)(a2 + 236))));
          if ((int)v78 <= 1) {
            uint64_t v78 = 1;
          }
          else {
            uint64_t v78 = v78;
          }
          if (v238 >= v78) {
            char v79 = a4;
          }
          else {
            char v79 = 0;
          }
          while (1)
          {
            float v80 = *(float *)(*(void *)(a1 + 5072) + 4 * (int)v47 * *(_DWORD *)(a1 + 5088) + 4 * v77);
            int v81 = kaldi::quasar::Encdec::GetVocabWordIdx(*(kaldi::quasar::Encdec **)(a1 + 136), v77);
            int v82 = v81;
            int v83 = *(_DWORD *)(a1 + 5180);
            if (v81 == v83) {
              char v84 = v79;
            }
            else {
              char v84 = 1;
            }
            if ((v84 & 1) == 0)
            {
              if (!*v46)
              {
                float v88 = *(float *)(a1 + 5764);
                int v89 = *v244;
                float v90 = logf(v80);
                if (!v89) {
                  float v90 = v80;
                }
                *(float *)(a1 + 5760) = -(float)(v88 * v90);
                *(_DWORD *)(a1 + 5720) = v48[8];
              }
              if (kaldi::g_kaldi_verbose_level >= 5)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Skipping target eos symbol", 26);
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
              }
              goto LABEL_155;
            }
            if (v81 == *(_DWORD *)(a1 + 5184) && *(unsigned char *)(*(void *)(a1 + 136) + 1505)) {
              goto LABEL_155;
            }
            if (v239)
            {
              if (v81 != v83)
              {
                if (((*(uint64_t (**)(void, void, void, unsigned char *))(**(void **)(a2 + 200) + 32))(*(void *)(a2 + 200), v48[9], (v81 + 1), __p) & 1) == 0)
                {
                  int v85 = *(_DWORD *)(a1 + 5184);
                  if (v85 < 0
                    || ((*(uint64_t (**)(void, void, void, unsigned char *))(**(void **)(a2 + 200) + 32))(*(void *)(a2 + 200), v48[9], (v85 + 1), __p) & 1) == 0)
                  {
                    goto LABEL_155;
                  }
                }
                int v86 = *(_DWORD *)&__p[12];
                float v87 = *(float *)&__p[8];
                goto LABEL_132;
              }
              *(_DWORD *)std::string __p = (*(float (**)(void, void))(**(void **)(a2 + 200) + 16))(*(void *)(a2 + 200), v48[9]);
              LODWORD(v270) = 2139095040;
              if (*(float *)__p == INFINITY) {
                goto LABEL_155;
              }
              float v87 = (*(float (**)(void, void))(**(void **)(a2 + 200) + 16))(*(void *)(a2 + 200), v48[9]);
            }
            else
            {
              float v87 = 0.0;
            }
            int v86 = -1;
LABEL_132:
            if (*(_DWORD *)(a2 + 184) == 5)
            {
              uint64_t v91 = *(void *)(a1 + 5840);
              unint64_t v92 = *(int *)(a1 + 5836);
              if (v92 < (*(void *)(a1 + 5848) - v91) >> 2)
              {
                float v93 = *(float *)(a2 + 180);
                float v94 = (v12 - v93) * v80;
                if (*(_DWORD *)(v91 + 4 * v92) != v82) {
                  float v93 = -0.0;
                }
                float v80 = v93 + v94;
              }
            }
            if (*(unsigned char *)(a1 + 5239))
            {
              std::string v95 = v278;
              unint64_t v96 = 0xAAAAAAAAAAAAAAABLL * ((v278 - (char *)v277) >> 4);
              unint64_t v97 = *(int *)(a2 + 160);
              if (v96 == v97 && v80 > *(float *)&v277->__begin_)
              {
                std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>((uint64_t)v277, (uint64_t)v278, (uint64_t)__p, v96);
                int v98 = v278;
                __int16 v99 = (void *)*((void *)v278 - 5);
                if (v99)
                {
                  *((void *)v278 - 4) = v99;
                  operator delete(v99);
                }
                std::string v95 = v98 - 48;
                long long v278 = v95;
                unint64_t v97 = *(int *)(a2 + 160);
                unint64_t v96 = 0xAAAAAAAAAAAAAAABLL * ((v95 - (char *)v277) >> 4);
              }
              if (v96 >= v97) {
                goto LABEL_155;
              }
              *(float *)std::string __p = v80;
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = v82;
              *(_DWORD *)&__p[36] = v86;
              *(float *)&long long v293 = v87;
              if ((unint64_t)v95 >= v279)
              {
                std::string::size_type v101 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement const&>((uint64_t *)&v277, (uint64_t)__p);
              }
              else
              {
                *(void *)std::string v95 = *(void *)__p;
                *((void *)v95 + 2) = 0;
                *((void *)v95 + 3) = 0;
                *((void *)v95 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v95 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(void *)&__p[16] - *(void *)&__p[8]) >> 2);
                uint64_t v100 = *(void *)&__p[32];
                *((_DWORD *)v95 + 10) = v293;
                *((void *)v95 + 4) = v100;
                std::string::size_type v101 = (uint64_t *)(v95 + 48);
              }
              long long v278 = (char *)v101;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>((uint64_t)v277, (uint64_t)v101, (uint64_t)v268, 0xAAAAAAAAAAAAAAABLL * (((char *)v101 - (char *)v277) >> 4));
              std::string::size_type v105 = *(void **)&__p[8];
              if (!*(void *)&__p[8]) {
                goto LABEL_155;
              }
LABEL_154:
              *(void *)&__p[16] = v105;
              operator delete(v105);
              goto LABEL_155;
            }
            *(float *)std::string __p = v80;
            memset(&__p[8], 0, 24);
            *(_DWORD *)&__p[32] = v82;
            *(_DWORD *)&__p[36] = v86;
            *(float *)&long long v293 = v87;
            char v102 = v278;
            if ((unint64_t)v278 >= v279)
            {
              char v104 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>((uint64_t *)&v277, (uint64_t)__p);
              std::string::size_type v105 = *(void **)&__p[8];
              long long v278 = (char *)v104;
              if (!*(void *)&__p[8]) {
                goto LABEL_155;
              }
              goto LABEL_154;
            }
            *(void *)long long v278 = *(void *)__p;
            *((void *)v102 + 1) = 0;
            *((void *)v102 + 2) = 0;
            *((void *)v102 + 3) = 0;
            *(_OWORD *)(v102 + 8) = *(_OWORD *)&__p[8];
            *((void *)v102 + 3) = *(void *)&__p[24];
            memset(&__p[8], 0, 24);
            int v103 = v293;
            *((void *)v102 + 4) = *(void *)&__p[32];
            *((_DWORD *)v102 + 10) = v103;
            long long v278 = v102 + 48;
LABEL_155:
            if (v240 == ++v77) {
              goto LABEL_168;
            }
          }
        }
      }
LABEL_195:
      if (v10 == v230 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Beam decoder hit maximum sequence length", 40);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
      if (v287 == v286)
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Pruned all hyps, nothing left to expand", 39);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        }
      }
      else
      {
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,false>(v286, (unint64_t)v287, (uint64_t)__p, 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v287 - (char *)v286) >> 3)), 1);
        LODWORD(v13) = v286->__begin_;
        int v129 = *(_DWORD *)(a1 + 5768);
        if (v129 == 2)
        {
          float v131 = *(float *)(a1 + 5776);
          float v132 = *(float *)(a1 + 5772);
          float v133 = powf(v131 + (float)(unint64_t)(v10 + 1), v132);
          float v130 = v133 / powf(v131 + 1.0, v132);
        }
        else
        {
          float v130 = (float)(unint64_t)(v10 + 2);
          if (v129 != 1) {
            float v130 = 1.0;
          }
        }
        float v227 = *(float *)&v13 / v130;
      }
      memset(v268, 0, sizeof(v268));
      int v269 = 1065353216;
      BOOL v134 = *(float *)(a2 + 164) < 2147500000.0 || *(float *)(a2 + 168) < 2147500000.0;
      BOOL v243 = v134;
      uint64_t v241 = v10 + 1;
      if (*(int *)(a2 + 160) >= 1) {
        break;
      }
LABEL_292:
      if (kaldi::g_kaldi_verbose_level > 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"At output position ", 19);
        uint64_t v200 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)", # surviving hypotheses: ", 26);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
      std::string v201 = *(uint64_t **)(a1 + 5784);
      uint64_t v202 = *(uint64_t **)(a1 + 5792);
      while (v201 != v202)
      {
        if (*v201)
        {
          uint64_t v203 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Hyp::~Hyp(*v201);
          MEMORY[0x1B3EA8670](v203, 0x10B0C406F3D429DLL);
        }
        ++v201;
      }
      uint64_t v204 = __src;
      if (v229 == (char *)&__src)
      {
        int v9 = v228;
      }
      else
      {
        std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v229, (char *)__src, (uint64_t)v290, ((unsigned char *)v290 - (unsigned char *)__src) >> 3);
        int v9 = v228;
        uint64_t v204 = __src;
      }
      uint64_t v290 = v204;
      ++*(_DWORD *)(a1 + 5836);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v268);
      std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)v280);
      uint64_t v10 = v241;
      if (v241 >= v230) {
        goto LABEL_305;
      }
    }
    unint64_t v135 = 0;
    float v136 = (float)(unint64_t)(v10 + 1);
    float v237 = (float)(unint64_t)(v10 + 2);
    while (1)
    {
      std::string v137 = v286;
      if (0x6DB6DB6DB6DB6DB7 * (((char *)v287 - (char *)v286) >> 3) <= v135) {
        goto LABEL_291;
      }
      char v138 = !v243;
      if (!v135) {
        char v138 = 1;
      }
      if ((v138 & 1) == 0)
      {
        float v139 = *((float *)&v286->__begin_ + 14 * v135);
        if ((float)(*(float *)&v13 + *(float *)(a2 + 164)) < v139
          || (float)(*(float *)&v13 * (float)(*(float *)(a2 + 168) + 1.0)) < v139)
        {
LABEL_291:
          int v11 = (int32x2_t *)(a1 + 5072);
          goto LABEL_292;
        }
      }
      char v140 = (char *)v286 + 56 * v135;
      uint64_t v141 = *(int **)(*(void *)(a1 + 5784) + 8 * *((void *)v140 + 6));
      uint64_t v142 = (int *)(v140 + 40);
      if (*((_DWORD *)v140 + 10) != *(_DWORD *)(a1 + 5180))
      {
        unint64_t v144 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 4960) - *(void *)(a1 + 4952)) >> 3);
        if (v144 > 1)
        {
          int v147 = v141[8];
          BOOL v148 = __OFSUB__(v147, 1);
          unint64_t v149 = (v147 - 1);
          char v145 = (void *)(a1 + 5808);
          if (((v149 & 0x80000000) != 0) != v148) {
            unint64_t v150 = 0;
          }
          else {
            unint64_t v150 = v149 / v144;
          }
          long long v270 = 0;
          long long v270 = (void *)(*v142 + (v150 << 32));
          uint64_t v159 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v268, (unint64_t *)&v270);
          uint64_t v160 = *(void *)(a1 + 4960);
          uint64_t v161 = *(void *)(a1 + 4952);
          if (v159)
          {
            *(void *)std::string __p = &v270;
            std::string v162 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v268, (unint64_t *)&v270, (uint64_t)&std::piecewise_construct, (void **)__p);
          }
          else
          {
            if (v160 == v161)
            {
              unint64_t v165 = 0xCCCCCCCCCCCCCCCDLL * ((v160 - v161) >> 3);
              int v166 = -1;
            }
            else
            {
              unint64_t v163 = 0;
              do
              {
                int v164 = (*(uint64_t (**)(void))(**(void **)(a1 + 5712) + 200))(*(void *)(a1 + 5712));
                ++v163;
                unint64_t v165 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 4960) - *(void *)(a1 + 4952)) >> 3);
              }
              while (v163 < v165);
              int v166 = v164;
              char v145 = (void *)(a1 + 5808);
            }
            float v193 = *(float *)v140;
            *(void *)std::string __p = &v270;
            uint64_t v194 = (float *)std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v268, (unint64_t *)&v270, (uint64_t)&std::piecewise_construct, (void **)__p);
            v194[6] = v193;
            *((_DWORD *)v194 + 7) = (v166 - 1) / v165;
            uint64_t v160 = *(void *)(a1 + 4960);
            uint64_t v161 = *(void *)(a1 + 4952);
            *(void *)std::string __p = &v270;
            std::string v162 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v268, (unint64_t *)&v270, (uint64_t)&std::piecewise_construct, (void **)__p);
          }
          int v146 = *v141 - 858993459 * ((unint64_t)(v160 - v161) >> 3) * *((_DWORD *)v162 + 7) + 1;
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"using lattice state:", 20);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
          }
        }
        else
        {
          char v145 = (void *)(a1 + 5808);
          int v146 = (*(uint64_t (**)(void))(**(void **)(a1 + 5712) + 200))(*(void *)(a1 + 5712));
        }
        uint64_t v253 = 0;
        uint64_t v254 = 0;
        v252 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v252, *((const void **)&v137->__end_cap_.__value_ + 7 * v135), *((void *)&v137[1].__begin_ + 7 * v135), (uint64_t)(*((void *)&v137[1].__begin_ + 7 * v135) - *((void *)&v137->__end_cap_.__value_ + 7 * v135)) >> 2);
        *(_OWORD *)uint64_t v255 = 0u;
        long long v256 = 0u;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v255[1], v252, (uint64_t)v253, (v253 - (unsigned char *)v252) >> 2);
        if (v252)
        {
          uint64_t v253 = v252;
          operator delete(v252);
        }
        v255[0] = (void *)vrev64_s32(*(int32x2_t *)((char *)&v137->__begin_ + 56 * v135 + 4));
        if (*((_DWORD *)&v137->__end_ + 14 * v135 + 1) < (signed int)(kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952) + 40 * *v141)
                                                                     + *(unsigned __int8 *)(*(void *)(a1 + 136)
                                                                                          + 1511)))
        {
          int v195 = *v142 + 1;
          LODWORD(v270) = *((_DWORD *)&v137->__end_ + 14 * v135 + 1);
          HIDWORD(v270) = v195;
          long long v271 = (unint64_t)v255[0];
          long long v272 = 0uLL;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)&v271 + 1, v255[1], v256, (uint64_t)(v256 - (unint64_t)v255[1]) >> 2);
          int v273 = v146;
          (*(void (**)(void, void, void **))(**(void **)(a1 + 5712) + 208))(*(void *)(a1 + 5712), v141[8], &v270);
          std::vector<std::pair<int,int>>::resize((uint64_t)v145, v146 + 1);
          int v196 = *v142;
          uint64_t v197 = (_DWORD *)(*v145 + 8 * v146);
          *uint64_t v197 = v141[8];
          v197[1] = v196;
          if (*(float *)(a2 + 320) != 0.0
            && std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)v141 + 20, v142))
          {
            *(void *)std::string __p = v140 + 40;
            int v198 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v141 + 40), v142, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)+ 5);
            *(void *)std::string __p = v142;
            if ((float)((float)v198
                       / (float)*((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v141 + 30), v142, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)+ 5)) > *(float *)(a2 + 316)&& kaldi::g_kaldi_verbose_level >= 1)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Repeating token in beam: ", 25);
              std::ostream::operator<<();
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
            }
          }
          operator new();
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adding invalid arc ", 19);
        long long v224 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v224, (uint64_t)" ", 1);
        long long v225 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v225, (uint64_t)" ", 1);
        long long v226 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v226, (uint64_t)" ", 1);
        kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952) + 40 * *v141);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      LODWORD(v143) = (int)(float)(*(float *)(a1 + 5200)
                                 * (float)(int)(kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952) + 40 * *v141)
                                              - (*(_DWORD *)(a1 + 5204)
                                               + *(_DWORD *)(a2 + 236))));
      uint64_t v143 = (int)v143 <= 1 ? 1 : v143;
      if (v238 >= v143) {
        break;
      }
      *(int32x2_t *)(a1 + 5728) = vrev64_s32((int32x2_t)vadd_f32(*(float32x2_t *)(v141 + 11), *(float32x2_t *)((char *)&v137->__begin_ + 56 * v135 + 4)));
      *(_DWORD *)(a1 + 5720) = v141[8];
      *(_DWORD *)(a1 + 5760) = *(_DWORD *)v140;
      int v11 = (int32x2_t *)(a1 + 5072);
LABEL_289:
      if ((uint64_t)++v135 >= *(int *)(a2 + 160)) {
        goto LABEL_292;
      }
    }
    uint64_t v151 = v141[8];
    long long v271 = 0uLL;
    *(void *)&long long v272 = 0;
    if (*(unsigned char *)(a1 + 5704))
    {
      v266 = 0;
      uint64_t v267 = 0;
      uint64_t v265 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v265, *((const void **)&v137->__end_cap_.__value_ + 7 * v135), *((void *)&v137[1].__begin_ + 7 * v135), (uint64_t)(*((void *)&v137[1].__begin_ + 7 * v135) - *((void *)&v137->__end_cap_.__value_ + 7 * v135)) >> 2);
      memset(__p, 0, 32);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[8], v265, (uint64_t)v266, (v266 - (unsigned char *)v265) >> 2);
      long long v270 = *(void **)__p;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v271, *(char **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(void *)&__p[16] - *(void *)&__p[8]) >> 2);
      if (*(void *)&__p[8])
      {
        *(void *)&__p[16] = *(void *)&__p[8];
        operator delete(*(void **)&__p[8]);
      }
      if (v265)
      {
        v266 = v265;
        operator delete(v265);
      }
      uint64_t v151 = (*(uint64_t (**)(void))(**(void **)(a1 + 5712) + 200))(*(void *)(a1 + 5712));
      int v152 = *v142 + 1;
      *(_DWORD *)std::string __p = *((_DWORD *)&v137->__end_ + 14 * v135 + 1);
      *(_DWORD *)&__p[4] = v152;
      *(void *)&__p[8] = v270;
      memset(&__p[16], 0, 24);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], (const void *)v271, *((uint64_t *)&v271 + 1), (uint64_t)(*((void *)&v271 + 1) - v271) >> 2);
      LODWORD(v293) = v151;
      (*(void (**)(void, void, unsigned char *))(**(void **)(a1 + 5712) + 208))(*(void *)(a1 + 5712), v141[8], __p);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v271, 0, 0, 0);
      if (*(void *)&__p[16])
      {
        *(void *)&__p[24] = *(void *)&__p[16];
        operator delete(*(void **)&__p[16]);
      }
    }
    uint64_t v153 = (char *)v137 + 56 * v135;
    unsigned int v154 = *((_DWORD *)v153 + 1);
    unsigned int v155 = *((_DWORD *)v153 + 2);
    long long v270 = (void *)__PAIR64__(v154, v155);
    unint64_t v156 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 4960) - *(void *)(a1 + 4952)) >> 3);
    if (v156 > 1)
    {
      unint64_t v158 = ((int)v151 - 1) / v156;
      long long v277 = 0;
      long long v277 = (std::vector<int> *)(*v142 + (v158 << 32));
      int v11 = (int32x2_t *)(a1 + 5072);
      if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v268, (unint64_t *)&v277))
      {
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"dropping worse identical hyp; score-diff: ",
            42);
          v255[0] = &v277;
          std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v268, (unint64_t *)&v277, (uint64_t)&std::piecewise_construct, (void **)v255);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
      }
      else
      {
        uint64_t v167 = *(void *)(a1 + 5712);
        uint64_t v257 = v270;
        uint64_t v259 = 0;
        uint64_t v260 = 0;
        v258 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v258, (const void *)v271, *((uint64_t *)&v271 + 1), (uint64_t)(*((void *)&v271 + 1) - v271) >> 2);
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v167 + 184))(v167, v151, &v257);
        if (v258)
        {
          uint64_t v259 = v258;
          operator delete(v258);
        }
        int v168 = *(_DWORD *)v140;
        *(void *)std::string __p = &v277;
        uint64_t v169 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v268, (unint64_t *)&v277, (uint64_t)&std::piecewise_construct, (void **)__p);
        *((_DWORD *)v169 + 6) = v168;
        *((_DWORD *)v169 + 7) = v158;
      }
    }
    else
    {
      uint64_t v157 = *(void *)(a1 + 5712);
      v261[0] = v155;
      v261[1] = v154;
      uint64_t v263 = 0;
      uint64_t v264 = 0;
      v262 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v262, (const void *)v271, *((uint64_t *)&v271 + 1), (uint64_t)(*((void *)&v271 + 1) - v271) >> 2);
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v157 + 184))(v157, v151, v261);
      int v11 = (int32x2_t *)(a1 + 5072);
      if (v262)
      {
        uint64_t v263 = v262;
        operator delete(v262);
      }
    }
    float v170 = *(float *)v140;
    if (*(float *)v140 <= *(float *)&v14)
    {
      *(_DWORD *)(a1 + 5832) = v151;
      *(float *)&uint64_t v14 = v170;
    }
    int v171 = *(_DWORD *)(a1 + 5768);
    if (v171 == 2)
    {
      float v173 = *(float *)(a1 + 5776);
      float v174 = *(float *)(a1 + 5772);
      uint64_t v175 = v13;
      uint64_t v176 = v14;
      float v177 = v136;
      float v178 = powf(v173 + v136, v174);
      float v172 = v178 / powf(v173 + 1.0, v174);
      float v136 = v177;
      uint64_t v14 = v176;
      uint64_t v13 = v175;
      double v12 = 1.0;
    }
    else
    {
      float v172 = 1.0;
      if (v171 == 1) {
        float v172 = v237;
      }
    }
    *(float *)std::string __p = v170 / v172;
    std::priority_queue<float>::push((uint64_t)&v283, __p);
    std::string v179 = v284;
    long long v180 = v283;
    uint64_t v181 = (v284 - (unsigned char *)v283) >> 2;
    if (v181 <= (unint64_t)*(int *)(a2 + 192))
    {
LABEL_271:
      if ((void)v271)
      {
        *((void *)&v271 + 1) = v271;
        operator delete((void *)v271);
      }
      LOBYTE(v231) = (v135 == 0) | v231;
      ++HIDWORD(v231);
      goto LABEL_289;
    }
    if (v284 - (unsigned char *)v283 >= 5)
    {
      uint64_t v182 = 0;
      float v183 = *(float *)v283;
      v184 = (float *)v283;
      do
      {
        uint64_t v185 = v184;
        v184 += v182 + 1;
        uint64_t v186 = 2 * v182;
        uint64_t v182 = (2 * v182) | 1;
        uint64_t v187 = v186 + 2;
        if (v187 < v181 && *v184 < v184[1])
        {
          ++v184;
          uint64_t v182 = v187;
        }
        *uint64_t v185 = *v184;
      }
      while (v182 <= (uint64_t)((unint64_t)(v181 - 2) >> 1));
      uint64_t v188 = (float *)(v179 - 4);
      if (v184 != (float *)(v179 - 4))
      {
        float *v184 = *v188;
        float *v188 = v183;
        uint64_t v189 = (char *)v184 - v180 + 4;
        if (v189 < 5) {
          goto LABEL_270;
        }
        unint64_t v190 = (((unint64_t)v189 >> 2) - 2) >> 1;
        v191 = (float *)&v180[4 * v190];
        float v192 = *v191;
        float v183 = *v184;
        if (*v191 >= *v184) {
          goto LABEL_270;
        }
        do
        {
          float *v184 = v192;
          v184 = v191;
          if (!v190) {
            break;
          }
          unint64_t v190 = (v190 - 1) >> 1;
          v191 = (float *)&v180[4 * v190];
          float v192 = *v191;
        }
        while (*v191 < v183);
      }
      float *v184 = v183;
    }
LABEL_270:
    unint64_t v284 = v179 - 4;
    goto LABEL_271;
  }
  HIDWORD(v231) = 0;
  LODWORD(v14) = 1325400064;
LABEL_305:
  if (a4)
  {
    int v205 = HIDWORD(v231);
    if (!HIDWORD(v231) && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No hyps finished, setting ", 26);
      uint64_t v206 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v206, (uint64_t)" partial hyps to final", 22);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    v207 = *(uint64_t **)(a1 + 5784);
    v208 = *(uint64_t **)(a1 + 5792);
    if (v207 != v208)
    {
      while (1)
      {
        if (v205)
        {
          uint64_t v209 = *v207;
          if (!*v207) {
            goto LABEL_329;
          }
        }
        else
        {
          uint64_t v210 = (*(uint64_t (**)(void))(**(void **)(a1 + 5712) + 200))(*(void *)(a1 + 5712));
          uint64_t v211 = *v207;
          if (*(unsigned char *)(*v207 + 200))
          {
            float v212 = *(float *)(a2 + 320);
            if (v212 == 0.0) {
              int v213 = -3;
            }
            else {
              int v213 = -4;
            }
            if (v212 != 0.0 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Repetitions detected, beam search aborted.", 42);
              kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
              uint64_t v211 = *v207;
            }
          }
          else
          {
            int v213 = -3;
          }
          uint64_t v214 = *(void *)(a1 + 5712);
          uint64_t v215 = *(unsigned int *)(v211 + 32);
          *(_DWORD *)std::string __p = v213;
          memset(&__p[4], 0, 36);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], 0, 0, 0);
          LODWORD(v293) = v210;
          (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v214 + 208))(v214, v215, __p);
          int v205 = HIDWORD(v231);
          if (*(void *)&__p[16])
          {
            *(void *)&__p[24] = *(void *)&__p[16];
            operator delete(*(void **)&__p[16]);
          }
          uint64_t v216 = *(void *)(a1 + 5712);
          *(_OWORD *)long long v250 = 0u;
          long long v251 = 0u;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v250[1], 0, 0, 0);
          (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v216 + 184))(v216, v210, v250);
          if (v250[1])
          {
            *(void **)&long long v251 = v250[1];
            operator delete(v250[1]);
          }
          uint64_t v209 = *v207;
          float v217 = *(float *)(*v207 + 48);
          if ((float)(*(float *)(*v207 + 44) + v217) < *(float *)&v14) {
            *(float *)&uint64_t v14 = *(float *)(*v207 + 44) + v217;
          }
          ++*(_DWORD *)(a1 + 5212);
        }
        uint64_t v218 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Hyp::~Hyp(v209);
        MEMORY[0x1B3EA8670](v218, 0x10B0C406F3D429DLL);
LABEL_329:
        if (++v207 == v208)
        {
          v207 = *(uint64_t **)(a1 + 5784);
          break;
        }
      }
    }
    *(void *)(a1 + 5792) = v207;
    *(_DWORD *)(a1 + 5836) = 0;
    if (!v205 && *(_DWORD *)(a1 + 5720) != -1)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Setting longest vetoted translation as best ", 44);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
      uint64_t v219 = (*(uint64_t (**)(void))(**(void **)(a1 + 5712) + 200))(*(void *)(a1 + 5712));
      uint64_t v220 = *(void *)(a1 + 5712);
      uint64_t v221 = *(unsigned int *)(a1 + 5720);
      memset(&__p[4], 0, 36);
      *(_DWORD *)std::string __p = -2;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], 0, 0, 0);
      LODWORD(v293) = v219;
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v220 + 208))(v220, v221, __p);
      if (*(void *)&__p[16])
      {
        *(void *)&__p[24] = *(void *)&__p[16];
        operator delete(*(void **)&__p[16]);
      }
      uint64_t v222 = *(void *)(a1 + 5712);
      uint64_t v246 = *(void *)(a1 + 5728);
      long long v248 = 0;
      uint64_t v249 = 0;
      long long v247 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v247, *(const void **)(a1 + 5736), *(void *)(a1 + 5744), (uint64_t)(*(void *)(a1 + 5744) - *(void *)(a1 + 5736)) >> 2);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v222 + 184))(v222, v219, &v246);
      if (v247)
      {
        long long v248 = v247;
        operator delete(v247);
      }
      LODWORD(v14) = *(_DWORD *)(a1 + 5760);
      ++*(_DWORD *)(a1 + 5208);
    }
    kaldi::quasar::Encdec::Finish(*(kaldi::quasar::Encdec **)(a1 + 136), v7);
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# of cached states ", 19);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    if (*(_DWORD *)(a2 + 184) == 5)
    {
      *(void *)(a1 + 5848) = *(void *)(a1 + 5840);
      if (*(float *)(a2 + 180) > 0.0 && !*(unsigned char *)(a2 + 306)) {
        fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst();
      }
    }
  }
  if (v283)
  {
    unint64_t v284 = v283;
    operator delete(v283);
  }
  *(void *)std::string __p = &v286;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (__src)
  {
    uint64_t v290 = __src;
    operator delete(__src);
  }
  return *(float *)&v14;
}

void sub_1B20388D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&STACK[0x300]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x220]);
  int v56 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v56;
    operator delete(v56);
  }
  STACK[0x220] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  kaldi::Vector<float>::Destroy((uint64_t)&a55);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  unint64_t v57 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v57;
    operator delete(v57);
  }
  STACK[0x220] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  int v58 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v58;
    operator delete(v58);
  }
  _Unwind_Resume(a1);
}

void sub_1B2038994()
{
}

void sub_1B203899C()
{
}

void sub_1B20389D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x300]);
  int v56 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v56;
    operator delete(v56);
  }
  STACK[0x220] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  kaldi::Vector<float>::Destroy((uint64_t)&a55);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  unint64_t v57 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v57;
    operator delete(v57);
  }
  STACK[0x220] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  int v58 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v58;
    operator delete(v58);
  }
  _Unwind_Resume(a1);
}

void sub_1B20389E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  int v56 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v56;
    operator delete(v56);
  }
  if (STACK[0x220])
  {
    (*(void (**)(unint64_t))(*(void *)STACK[0x220] + 8))(STACK[0x220]);
  }
  else if (STACK[0x238])
  {
    --*(_DWORD *)STACK[0x238];
  }
  unint64_t v57 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v57;
    operator delete(v57);
  }
  STACK[0x220] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  kaldi::Vector<float>::Destroy((uint64_t)&a55);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  int v58 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v58;
    operator delete(v58);
  }
  STACK[0x220] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  uint64_t v59 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v59;
    operator delete(v59);
  }
  _Unwind_Resume(a1);
}

void sub_1B2038A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (STACK[0x310])
  {
    STACK[0x318] = STACK[0x310];
    JUMPOUT(0x1B2038A28);
  }
  int v56 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v56;
    operator delete(v56);
  }
  STACK[0x220] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x220]);
  kaldi::Vector<float>::Destroy(&a55);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(&STACK[0x280]);
  unint64_t v57 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v57;
    operator delete(v57);
  }
  STACK[0x220] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x220]);
  int v58 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v58;
    operator delete(v58);
  }
  _Unwind_Resume(a1);
}

void sub_1B2038A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  int v56 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v56;
    operator delete(v56);
  }
  STACK[0x220] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  kaldi::Vector<float>::Destroy((uint64_t)&a55);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  unint64_t v57 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v57;
    operator delete(v57);
  }
  STACK[0x220] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  int v58 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v58;
    operator delete(v58);
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineEmbeddingRetranslationDecoder::getWordById(quasar::QsrTextSymbolTable ***this@<X0>, uint64_t a2@<X8>)
{
  quasar::QsrTextSymbolTable::Find(*this[56], (void *)a2);
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (!v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Could not find a word for id: ", 30);
    std::locale v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" in base symbol table", 21);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
}

void sub_1B2038BA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineEmbeddingRetranslationDecoder::getBestWords(quasar::QsrTextSymbolTable ***a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<std::string>::reserve((std::vector<std::string> *)a3, (a2[1] - *a2) >> 2);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      quasar::OnlineEmbeddingRetranslationDecoder::getWordById(a1, (uint64_t)__p);
      unint64_t v9 = *(void *)(a3 + 8);
      unint64_t v8 = *(void *)(a3 + 16);
      if (v9 >= v8)
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *(void *)a3) >> 3);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *(void *)a3) >> 3);
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v12;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v14) {
          uint64_t v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v14);
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = v15 + v11;
        __v.__first_ = v15;
        __v.__begin_ = v16;
        __v.__end_cap_.__value_ = &v15[v14];
        long long v17 = *(_OWORD *)__p;
        v16->__r_.__value_.__r.__words[2] = v21;
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
        __p[1] = 0;
        std::string::size_type v21 = 0;
        __p[0] = 0;
        __v.__end_ = v16 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        uint64_t v18 = *(void *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        int v19 = SHIBYTE(v21);
        *(void *)(a3 + 8) = v18;
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v10 = *(_OWORD *)__p;
        *(void *)(v9 + 16) = v21;
        *(_OWORD *)unint64_t v9 = v10;
        *(void *)(a3 + 8) = v9 + 24;
      }
      v6 += 4;
    }
    while (v6 != v7);
  }
}

void sub_1B2038D58(_Unwind_Exception *__p, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__split_buffer<std::wstring> *a7, ...)
{
  va_start(__pa, a7);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__pa);
  _Unwind_Resume(__p);
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4EEEEJiNS_6vectorIiNS_9allocatorIiEEEES6_NS3_IN5kaldi6quasar15TranslationUtil12NbestElementENS4_ISA_EEEEfEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4EEJiS6_S6_SC_fEJEJEJRiRS6_SG_RSC_RfEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  *(_DWORD *)a1 = *a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 8), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 32), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__init_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*>((void *)(a1 + 56), *a5, a5[1], 0xF0F0F0F0F0F0F0F1 * ((a5[1] - *a5) >> 4));
  *(_DWORD *)(a1 + 80) = *a6;
  return a1;
}

void sub_1B2038E58(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__init_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__vallocate[abi:ne180100](result, a4);
    double result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B2038EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xF0F0F0F0F0F0F1) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[272 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF0F0F0F0F0F0F1) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(272 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(a4 + v7), (const kaldi::quasar::TranslationUtil::NbestElement *)(a2 + v7));
      v7 += 272;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B2039010(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 272;
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(v4 + v2));
      v2 -= 272;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void **std::unique_ptr<quasar::Config>::reset[abi:ne180100](void ***a1, void **a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::Config::~Config(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void quasar::Config::~Config(void **this)
{
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  uint64_t v2 = this[21];
  if (v2)
  {
    this[22] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  uint64_t v3 = this[15];
  if (v3)
  {
    this[16] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[1];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::TranslationBeamSearch(uint64_t a1, int a2, int a3, char a4, int a5, int a6, int a7, char a8, float a9, float a10, float a11, float a12, char a13, int a14, char a15)
{
  v29[0] = a8;
  *(void *)a1 = &unk_1F0A51088;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 112) = 1;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 1++*(void *)(result + 24) = 0x400000003;
  *(unsigned char *)(a1 + 132) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "UNK");
  kaldi::quasar::BPE::BPE(a1 + 152, 1, (long long *)__p);
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  std::allocate_shared[abi:ne180100]<kaldi::quasar::PhraseBook,std::allocator<kaldi::quasar::PhraseBook>,BOOL &,void>(v29, (void *)(a1 + 392));
  kaldi::quasar::NNMTTransliterator::NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 408), a13);
  *(unsigned char *)(a1 + 4880) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 4856), v26);
  *(void *)(a1 + 4888) = 0;
  *(unsigned char *)(a1 + 4896) = 0;
  *(void *)(a1 + 4904) = 0;
  *(void *)(a1 + 4920) = 0;
  *(void *)(a1 + 4912) = 0;
  *(unsigned char *)(a1 + 4929) = 0;
  *(_OWORD *)(a1 + 49--*(_DWORD *)(a9 + 84) = 0u;
  *(_OWORD *)(a1 + 5000) = 0u;
  *(void *)(a1 + 4968) = 0;
  *(_OWORD *)(a1 + 4936) = 0u;
  *(_OWORD *)(a1 + 49--*(_DWORD *)(a9 + 52) = 0u;
  *(void *)(a1 + 4976) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 5016) = 0;
  *(_OWORD *)(a1 + 5032) = 0u;
  *(_OWORD *)(a1 + 5048) = 0u;
  *(void *)(a1 + 50++*(void *)(result + 24) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 5064) = 0;
  kaldi::Matrix<float>::Matrix(a1 + 5072);
  *(_OWORD *)(a1 + 5144) = 0u;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 5128) = 0u;
  *(void *)(a1 + 5176) = -1;
  *(_DWORD *)(a1 + 51--*(_DWORD *)(a9 + 84) = -1;
  *(_DWORD *)(a1 + 5188) = a2;
  *(float *)(a1 + 5192) = a10;
  *(_DWORD *)(a1 + 5196) = a14;
  *(float *)(a1 + 5200) = a9;
  *(_OWORD *)(a1 + 5204) = 0u;
  *(_DWORD *)(a1 + 5220) = a5;
  *(_DWORD *)(a1 + 52++*(void *)(result + 24) = a3;
  *(float *)(a1 + 5228) = a11;
  *(float *)(a1 + 5232) = a12;
  *(unsigned char *)(a1 + 5236) = a4;
  *(unsigned char *)(a1 + 5237) = a15;
  *(_WORD *)(a1 + 5238) = 256;
  *(unsigned char *)(a1 + 5240) = 0;
  *(_DWORD *)(a1 + 5244) = a6;
  *(_DWORD *)(a1 + 5248) = a7;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 5256));
}

void sub_1B2039524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, kaldi::quasar::NNMTTransliterator *a11, kaldi::quasar::BPE *a12, kaldi::quasar::InputHammer *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a20);
  char v28 = *(void **)(v20 + 5864);
  if (v28)
  {
    *(void *)(v20 + 5872) = v28;
    operator delete(v28);
  }
  unint64_t v29 = *(void **)(v20 + 5840);
  if (v29)
  {
    *(void *)(v20 + 5848) = v29;
    operator delete(v29);
  }
  unint64_t v30 = (void **)(v20 + 5736);
  unint64_t v31 = *(void **)(v20 + 5808);
  if (v31)
  {
    *(void *)(v20 + 5816) = v31;
    operator delete(v31);
  }
  unint64_t v32 = *v21;
  if (*v21)
  {
    *(void *)(v20 + 5792) = v32;
    operator delete(v32);
  }
  uint64_t v33 = *v30;
  if (*v30)
  {
    *(void *)(v20 + 5744) = v33;
    operator delete(v33);
  }
  kaldi::Matrix<float>::~Matrix(v26);
  kaldi::nnet1::Nnet::~Nnet(v25);
  a20 = v20 + 5152;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a20 = v20 + 5128;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  unint64_t v34 = *(std::__shared_weak_count **)(v20 + 5120);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  kaldi::Matrix<float>::~Matrix(a10);
  kaldi::CuMatrix<float>::~CuMatrix(v23);
  kaldi::CuMatrix<float>::~CuMatrix(v22);
  a20 = v20 + 4952;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  float v35 = *(std::__shared_weak_count **)(v20 + 4944);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (*(char *)(v24 + 47) < 0) {
    operator delete(*(void **)(v20 + 4904));
  }
  kaldi::quasar::NNMTTransliterator::~NNMTTransliterator(a11);
  int v36 = *(std::__shared_weak_count **)(v20 + 400);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  kaldi::quasar::BPE::~BPE(a12);
  int v37 = *(std::__shared_weak_count **)(v20 + 144);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  kaldi::quasar::InputHammer::~InputHammer(a13);
  _Unwind_Resume(a1);
}

void sub_1B20396A8()
{
}

void sub_1B20396B0()
{
}

void sub_1B20396B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B203968CLL);
}

void sub_1B20396D0()
{
}

void kaldi::quasar::InputHammer::~InputHammer(kaldi::quasar::InputHammer *this)
{
  uint64_t v2 = (void **)((char *)this + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(uint64_t a1)
{
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(a1);
  JUMPOUT(0x1B3EA8670);
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::PhraseBook,std::allocator<kaldi::quasar::PhraseBook>,BOOL &,void>@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x60uLL);
  double result = std::__shared_ptr_emplace<kaldi::quasar::PhraseBook>::__shared_ptr_emplace[abi:ne180100]<BOOL &,std::allocator<kaldi::quasar::PhraseBook>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B20397A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::PhraseBook>::__shared_ptr_emplace[abi:ne180100]<BOOL &,std::allocator<kaldi::quasar::PhraseBook>,0>(void *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F0D0;
  kaldi::quasar::PhraseBook::PhraseBook((kaldi::quasar::PhraseBook *)(a1 + 3), *a2);
  return a1;
}

void sub_1B2039804(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::PhraseBook>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F0D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::PhraseBook>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F0D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::PhraseBook>::__on_zero_shared(uint64_t a1)
{
  return std::allocator<kaldi::quasar::PhraseBook>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

kaldi::quasar::PhraseBook *kaldi::quasar::PhraseBook::PhraseBook(kaldi::quasar::PhraseBook *this, char a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 5, "|||");
  *((_DWORD *)this + 16) = 0;
  *((unsigned char *)this + 68) = a2;
  return this;
}

void sub_1B2039908(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  char v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    char v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      char v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,0>(uint64_t a1)
{
  char v2 = (void **)(a1 + 24);
  std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 119) < 0) {
    operator delete(*(void **)(a2 + 96));
  }
  if (*(char *)(a2 + 95) < 0) {
    operator delete(*(void **)(a2 + 72));
  }
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void kaldi::quasar::PhraseBook::PhraseBookEntry::~PhraseBookEntry(void **this)
{
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t std::allocator<kaldi::quasar::PhraseBook>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::~__hash_table(a2);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A51088;
  char v2 = *(void **)(a1 + 5864);
  if (v2)
  {
    *(void *)(a1 + 5872) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 5840);
  if (v3)
  {
    *(void *)(a1 + 5848) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 5808);
  if (v4)
  {
    *(void *)(a1 + 5816) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 5784);
  if (v5)
  {
    *(void *)(a1 + 5792) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 5736);
  if (v6)
  {
    *(void *)(a1 + 5744) = v6;
    operator delete(v6);
  }
  kaldi::Matrix<float>::~Matrix(a1 + 5632);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a1 + 5256));
  unint64_t v12 = (void **)(a1 + 5152);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  unint64_t v12 = (void **)(a1 + 5128);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 5120);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  kaldi::Matrix<float>::~Matrix(a1 + 5072);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5024);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 4976);
  unint64_t v12 = (void **)(a1 + 4952);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 4944);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*(char *)(a1 + 4927) < 0) {
    operator delete(*(void **)(a1 + 4904));
  }
  kaldi::quasar::NNMTTransliterator::~NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 408));
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 400);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  kaldi::quasar::BPE::~BPE((kaldi::quasar::BPE *)(a1 + 152));
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 144);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  unint64_t v12 = (void **)(a1 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(a1 + 48);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
  return a1;
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ReadMapped(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 5112)) {
    kaldi::ReadMapped<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>(a2);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Already mapped from a file");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void sub_1B2039E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(unsigned __int8 *)(a1 + 4928);
  int v5 = *(unsigned __int8 *)(a1 + 4929);
  uint64_t v6 = *(void *)(a1 + 4936);
  uint64_t v7 = *(void *)(a1 + 4944);
  unint64_t v8 = (long long *)(a1 + 4904);
  v9[0] = v6;
  v9[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  kaldi::quasar::TMTools::GetModel<kaldi::quasar::Encdec>(v8, a2, a3, a4, v4 != 0, v5 != 0, v9);
}

void sub_1B203A250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ReadMapped<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>(uint64_t a1)
{
  void v18[34] = *MEMORY[0x1E4F143B8];
  char v8 = 0;
  kaldi::Input::Input(v7, a1, &v8);
  if (v8)
  {
    uint64_t v2 = kaldi::Input::Stream((kaldi::Input *)v7);
    std::istream::seekg();
    std::istream::tellg();
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    std::istream::seekg();
    fst::MappedFile::Map(v2, a1, (fst::MappedFile *)v18[16]);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Memory mapping failed. Not a valid Kaldi binary file: ", 54);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
}

void sub_1B203A56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::TMTools::GetModel<kaldi::quasar::Encdec>(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, void *a7)
{
  if (*a7) {
    kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::Encdec>();
  }
  long long v9 = (uint64_t **)kaldi::quasar::Encdec::ModelFileMap(0);
  if (a5)
  {
    long long v11 = a1;
    long long v10 = (std::__shared_weak_count *)std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)a1, (uint64_t)&std::piecewise_construct, &v11)[8];
    if (v10) {
      std::__shared_weak_count::lock(v10);
    }
  }
  operator new();
}

void sub_1B203A8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12)
{
  long long v14 = *(std::__shared_weak_count **)(v12 - 104);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::PhraseBook::Read(uint64_t a1, uint64_t *a2, int a3)
{
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Reading phrasebook", 18);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v34);
  }
  kaldi::ExpectToken(a2, a3, "<PhraseBook>");
  uint64_t v6 = (int *)(a1 + 64);
  kaldi::ReadBasicType<int>(a2, a3, a1 + 64);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"num_entries ", 12);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v34);
  }
  int v7 = *v6;
  if ((a3 & 1) == 0)
  {
    if (v7 < 1) {
      goto LABEL_93;
    }
    int v16 = 0;
    uint64_t v17 = (std::locale::id *)MEMORY[0x1E4FBA258];
    while (1)
    {
      memset(&v33, 0, sizeof(v33));
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
      uint64_t v18 = std::locale::use_facet((const std::locale *)&v34, v17);
      unsigned __int8 v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      std::locale::~locale((std::locale *)&v34);
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v33, v19);
      kaldi::Trim(&v33);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v33.__r_.__value_.__l.__size_ != 13) {
          goto LABEL_59;
        }
        uint64_t v20 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) != 13) {
          goto LABEL_59;
        }
        uint64_t v20 = &v33;
      }
      std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
      uint64_t v22 = *(std::string::size_type *)((char *)v20->__r_.__value_.__r.__words + 5);
      if (v21 == 0x6573617268502F3CLL && v22 == 0x3E6B6F6F42657361)
      {
        char v27 = 1;
        if ((*((unsigned char *)&v33.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_91;
        }
        goto LABEL_90;
      }
LABEL_59:
      memset(&v32, 0, sizeof(v32));
      kaldi::SplitStringOnString((uint64_t)&v33, (char *)(a1 + 40), (uint64_t *)&v32);
      if (((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0]) >> 3)) & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        kaldi::Trim((std::string *)v32.__r_.__value_.__l.__data_);
        kaldi::quasar::PhraseBook::PreProcess(a1, (uint64_t)v32.__r_.__value_.__l.__data_, &v31);
        kaldi::Trim((std::string *)(v32.__r_.__value_.__r.__words[0] + 24));
        if (v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0] == 72) {
          kaldi::Trim((std::string *)(v32.__r_.__value_.__r.__words[0] + 48));
        }
        if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)a1, (unsigned __int8 *)&v31))
        {
          memset(&v34, 0, sizeof(v34));
          v44[0] = (long long *)&v31;
          uint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&v31, (uint64_t)&std::piecewise_construct, v44);
          std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__vdeallocate((void **)v24 + 5);
          *(std::string *)(v24 + 40) = v34;
          memset(&v34, 0, sizeof(v34));
          __c.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
          std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__c);
        }
        __c.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
        unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&v31, (uint64_t)&std::piecewise_construct, (long long **)&__c);
        uint64_t v26 = (long long *)v32.__r_.__value_.__r.__words[0];
        if (v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0] == 72)
        {
          if (*(char *)(v32.__r_.__value_.__r.__words[0] + 71) < 0) {
            std::string::__init_copy_ctor_external(&__c, *(const std::string::value_type **)(v32.__r_.__value_.__r.__words[0] + 48), *(void *)(v32.__r_.__value_.__r.__words[0] + 56));
          }
          else {
            std::string __c = *(std::string *)(v32.__r_.__value_.__r.__words[0] + 48);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__c, "");
        }
        kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(&v34, (long long *)&v31, v26, (long long *)((char *)v26 + 24), (long long *)&__c);
        unint64_t v28 = *((void *)v25 + 6);
        if (v28 >= *((void *)v25 + 7))
        {
          uint64_t v29 = std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__push_back_slow_path<kaldi::quasar::PhraseBook::PhraseBookEntry>((uint64_t *)v25 + 5, (const kaldi::quasar::PhraseBook::PhraseBookEntry *)&v34);
        }
        else
        {
          kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(*((std::string **)v25 + 6), (const kaldi::quasar::PhraseBook::PhraseBookEntry *)&v34);
          uint64_t v29 = v28 + 120;
          *((void *)v25 + 6) = v28 + 120;
        }
        *((void *)v25 + 6) = v29;
        if (v42 < 0) {
          operator delete(__p);
        }
        if (v40 < 0) {
          operator delete(v39);
        }
        if (v38 < 0) {
          operator delete(v37);
        }
        if (v36 < 0) {
          operator delete(v35);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__c.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__c.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        --v16;
      }
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      char v27 = 0;
      if ((*((unsigned char *)&v33.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_91;
      }
LABEL_90:
      operator delete(v33.__r_.__value_.__l.__data_);
LABEL_91:
      if ((v27 & 1) == 0 && ++v16 < *v6) {
        continue;
      }
      goto LABEL_93;
    }
  }
  if (v7 >= 1)
  {
    int v8 = 0;
    do
    {
      memset(&v32, 0, sizeof(v32));
      memset(&v31, 0, sizeof(v31));
      memset(&v33, 0, sizeof(v33));
      LODWORD(v34.__r_.__value_.__l.__data_) = 0;
      std::istream::read();
      if (SLODWORD(v34.__r_.__value_.__l.__data_) >= 1)
      {
        int v9 = 0;
        do
        {
          __c.__r_.__value_.__s.__data_[0] = 0;
          std::istream::read();
          std::string::push_back(&v33, __c.__r_.__value_.__s.__data_[0]);
          ++v9;
        }
        while (v9 < SLODWORD(v34.__r_.__value_.__l.__data_));
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        *v32.__r_.__value_.__l.__data_ = 0;
        v32.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v32.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&v32.__r_.__value_.__s + 23) = 0;
      }
      LODWORD(v34.__r_.__value_.__l.__data_) = 0;
      std::istream::read();
      if (SLODWORD(v34.__r_.__value_.__l.__data_) >= 1)
      {
        int v10 = 0;
        do
        {
          __c.__r_.__value_.__s.__data_[0] = 0;
          std::istream::read();
          std::string::push_back(&v32, __c.__r_.__value_.__s.__data_[0]);
          ++v10;
        }
        while (v10 < SLODWORD(v34.__r_.__value_.__l.__data_));
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        *v31.__r_.__value_.__l.__data_ = 0;
        v31.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v31.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&v31.__r_.__value_.__s + 23) = 0;
      }
      LODWORD(v34.__r_.__value_.__l.__data_) = 0;
      std::istream::read();
      if (SLODWORD(v34.__r_.__value_.__l.__data_) >= 1)
      {
        int v11 = 0;
        do
        {
          __c.__r_.__value_.__s.__data_[0] = 0;
          std::istream::read();
          std::string::push_back(&v31, __c.__r_.__value_.__s.__data_[0]);
          ++v11;
        }
        while (v11 < SLODWORD(v34.__r_.__value_.__l.__data_));
      }
      kaldi::quasar::PhraseBook::PreProcess(a1, (uint64_t)&v33, &__c);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)a1, (unsigned __int8 *)&__c))
      {
        memset(&v34, 0, sizeof(v34));
        p_c = &__c;
        uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&__c, (uint64_t)&std::piecewise_construct, (long long **)&p_c);
        std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__vdeallocate((void **)v12 + 5);
        *(std::string *)(v12 + 40) = v34;
        memset(&v34, 0, sizeof(v34));
        v44[0] = (long long *)&v34;
        std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
      }
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&__c;
      long long v13 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&__c, (uint64_t)&std::piecewise_construct, (long long **)&v34);
      kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(&v34, (long long *)&__c, (long long *)&v33, (long long *)&v32, (long long *)&v31);
      unint64_t v14 = *((void *)v13 + 6);
      if (v14 >= *((void *)v13 + 7))
      {
        uint64_t v15 = std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__push_back_slow_path<kaldi::quasar::PhraseBook::PhraseBookEntry>((uint64_t *)v13 + 5, (const kaldi::quasar::PhraseBook::PhraseBookEntry *)&v34);
      }
      else
      {
        kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(*((std::string **)v13 + 6), (const kaldi::quasar::PhraseBook::PhraseBookEntry *)&v34);
        uint64_t v15 = v14 + 120;
        *((void *)v13 + 6) = v14 + 120;
      }
      *((void *)v13 + 6) = v15;
      if (v42 < 0) {
        operator delete(__p);
      }
      if (v40 < 0) {
        operator delete(v39);
      }
      if (v38 < 0) {
        operator delete(v37);
      }
      if (v36 < 0) {
        operator delete(v35);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__c.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__c.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      ++v8;
    }
    while (v8 < *v6);
  }
  kaldi::ExpectToken(a2, 1, "</PhraseBook>");
LABEL_93:
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"# of keys ", 10);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v34);
  }
}

void sub_1B203B0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,std::locale a33)
{
}

void kaldi::quasar::PhraseBook::PreProcess(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 68))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
  }
  else
  {
    kaldi::quasar::PhraseBook::LowerCaseUtf8(a2, a3);
  }
}

void kaldi::quasar::PhraseBook::LowerCaseUtf8(uint64_t a1@<X1>, void *a2@<X8>)
{
  kaldi::quasar::NNMTTransliterator::UnicodeVectorFromString(a1, (uint64_t)src);
  UErrorCode pErrorCode = U_ZERO_ERROR;
  int32_t v3 = u_strToLower(0, 0, src[0], -1, "", &pErrorCode);
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  std::vector<unsigned short>::resize((uint64_t)&__p, v3 + 1);
  UErrorCode pErrorCode = U_ZERO_ERROR;
  u_strToLower((UChar *)__p, (unint64_t)(v5 - (unsigned char *)__p) >> 1, src[0], -1, "", &pErrorCode);
  kaldi::quasar::NNMTTransliterator::StringFromUnicodeVector((const UChar **)&__p, a2);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  if (src[0])
  {
    src[1] = src[0];
    operator delete(src[0]);
  }
}

void sub_1B203B300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  int v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v++*(void *)(result + 24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B203B5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *int v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    _DWORD v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B203B65C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 120;
        std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__push_back_slow_path<kaldi::quasar::PhraseBook::PhraseBookEntry>(uint64_t *a1, const kaldi::quasar::PhraseBook::PhraseBookEntry *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x111111111111111) {
    unint64_t v9 = 0x222222222222222;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  unint64_t v14 = (std::string *)&v10[120 * v4];
  unint64_t v16 = &v10[120 * v9];
  kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(v14, a2);
  uint64_t v15 = v14 + 5;
  std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::~__split_buffer(&v13);
  return v11;
}

void sub_1B203B830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(std::string *this, const kaldi::quasar::PhraseBook::PhraseBookEntry *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  unint64_t v8 = this + 4;
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return this;
}

void sub_1B203B960(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>>((uint64_t)(a1 + 2), a1[1], (const kaldi::quasar::PhraseBook::PhraseBookEntry *)a1[1], *a1, (const kaldi::quasar::PhraseBook::PhraseBookEntry *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>>(uint64_t a1, uint64_t a2, const kaldi::quasar::PhraseBook::PhraseBookEntry *a3, uint64_t a4, const kaldi::quasar::PhraseBook::PhraseBookEntry *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    long long v9 = a3;
    do
    {
      long long v9 = (const kaldi::quasar::PhraseBook::PhraseBookEntry *)((char *)v9 - 120);
      kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry((std::string *)(v7 - 120), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 120;
      *((void *)&v15 + 1) -= 120;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1B203BAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100](v3, v1);
      v1 += 120;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 120;
    std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100](v4, i - 120);
  }
}

std::string *kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(std::string *this, long long *a2, long long *a3, long long *a4, long long *a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v10;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v11 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v11;
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v12 = *a5;
    this[3].__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v12;
  }
  std::string::basic_string[abi:ne180100]<0>(this[4].__r_.__value_.__r.__words, "*");
  return this;
}

void sub_1B203BD00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>((uint64_t)v1, a1);
}

void sub_1B203BEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  fst::AutoQueue<int>::~AutoQueue(&a23);
  a13 = v23 - 104;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1)
{
  memset(v1, 0, sizeof(v1));
  fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a1, (uint64_t)v1, 0);
}

void sub_1B203C0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  a18 = &a22;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    uint64_t v6 = v4 - 16;
    uint64_t v7 = (void (***)(void))(v4 - 16);
    uint64_t v8 = (void (***)(void))(v4 - 16);
    do
    {
      long long v9 = *v8;
      v8 -= 2;
      (*v9)(v7);
      v6 -= 16;
      BOOL v10 = v7 == (void (***)(void))v5;
      uint64_t v7 = v8;
    }
    while (!v10);
  }
  a2[1] = v5;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result == -1) {
    return result;
  }
  uint64_t v12 = result;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, result);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v36, a1, v12);
  LODWORD(v33[0]) = HIDWORD(v36);
  LODWORD(v42[0]) = v36;
  int v50 = 2139095040;
  float v49 = INFINITY;
  BOOL v14 = *(float *)&v36 != INFINITY || *(float *)v33 != v49;
  if (__p)
  {
    char v38 = __p;
    operator delete(__p);
  }
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::reserve(a2, v13 + v14);
  if (v14)
  {
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::resize(a2, ((a2[1] - *a2) >> 4) + 1);
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)(a2[1] - 16) + 200))();
    uint64_t v16 = a2[1];
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v45, a1, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)(v16 - 16) + 184))(v16 - 16, v15, &v45);
    if (v46)
    {
      uint64_t v47 = v46;
      operator delete(v46);
    }
  }
  unint64_t v44 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v12, v42);
  while (1)
  {
    uint64_t result = v42[0];
    if (v42[0]) {
      break;
    }
    if (v44 >= v42[2]) {
      goto LABEL_51;
    }
LABEL_19:
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::resize(a2, ((a2[1] - *a2) >> 4) + 1);
    uint64_t v17 = a2[1];
    if (v42[0]) {
      uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v42[0] + 32))(v42[0]);
    }
    else {
      uint64_t v18 = v42[1] + 48 * v44;
    }
    uint64_t v20 = *(void *)(v17 - 16);
    uint64_t v19 = v17 - 16;
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(v20 + 200))(v19);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 176))(v19, v21);
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 200))(v19);
    uint64_t v23 = *(void **)(v18 + 8);
    uint64_t v36 = *(void *)v18;
    std::string __p = v23;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    char v38 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v38, *(const void **)(v18 + 16), *(void *)(v18 + 24), (uint64_t)(*(void *)(v18 + 24) - *(void *)(v18 + 16)) >> 2);
    int v41 = v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v19 + 208))(v19, v21, &v36);
    if (v38)
    {
      uint64_t v39 = v38;
      operator delete(v38);
    }
    uint64_t v24 = *(unsigned int *)(v18 + 40);
    while ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v24))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v36, a1, v24);
      int v50 = HIDWORD(v36);
      LODWORD(v33[0]) = v36;
      float v49 = INFINITY;
      int v48 = 2139095040;
      v25.n128_u32[0] = v36;
      if (*(float *)&v36 == INFINITY) {
        v25.n128_u32[0] = v48;
      }
      if (__p)
      {
        char v38 = __p;
        operator delete(__p);
      }
      uint64_t v35 = 0;
      (*(void (**)(uint64_t, uint64_t, void *, __n128))(*(void *)a1 + 136))(a1, v24, v33, v25);
      if (v33[0]) {
        uint64_t v26 = (*(uint64_t (**)(void))(*(void *)v33[0] + 32))(v33[0]);
      }
      else {
        uint64_t v26 = v33[1] + 48 * v35;
      }
      uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 200))(v19);
      unint64_t v28 = *(void **)(v26 + 8);
      uint64_t v36 = *(void *)v26;
      std::string __p = v28;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      char v38 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v38, *(const void **)(v26 + 16), *(void *)(v26 + 24), (uint64_t)(*(void *)(v26 + 24) - *(void *)(v26 + 16)) >> 2);
      int v41 = v27;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v19 + 208))(v19, v22, &v36);
      if (v38)
      {
        uint64_t v39 = v38;
        operator delete(v38);
      }
      uint64_t v24 = *(unsigned int *)(v26 + 40);
      if (v33[0])
      {
        (*(void (**)(void))(*(void *)v33[0] + 8))(v33[0]);
      }
      else if (v34)
      {
        --*v34;
      }
      uint64_t v22 = v27;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v36, a1, v24);
    int v50 = HIDWORD(v36);
    LODWORD(v33[0]) = v36;
    float v49 = INFINITY;
    int v48 = 2139095040;
    v29.n128_u32[0] = v36;
    if (*(float *)&v36 == INFINITY) {
      v29.n128_u32[0] = v48;
    }
    if (__p)
    {
      char v38 = __p;
      operator delete(__p);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))(*(void *)a1 + 32))(&v30, a1, v24, v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v19 + 184))(v19, v22, &v30);
    if (v31)
    {
      std::string v32 = v31;
      operator delete(v31);
    }
    if (v42[0]) {
      (*(void (**)(void))(*(void *)v42[0] + 40))(v42[0]);
    }
    else {
      ++v44;
    }
  }
  if (!(*(unsigned int (**)(void))(*(void *)v42[0] + 24))(v42[0])) {
    goto LABEL_19;
  }
  uint64_t result = v42[0];
  if (v42[0]) {
    return (*(uint64_t (**)(void))(*(void *)v42[0] + 8))(v42[0]);
  }
LABEL_51:
  if (v43) {
    --*v43;
  }
  return result;
}

void sub_1B203C8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  __n128 v29 = *(void **)(v27 - 120);
  if (v29)
  {
    *(void *)(v27 - 112) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SuppressedIds(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  kaldi::quasar::MultiLangDecorator::GetTags(a1 + 120, a2, a3, (uint64_t)&v21);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  kaldi::SplitStringToVector(&v21, " ", 1, (uint64_t)&v18);
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)a5 = a5 + 8;
  uint64_t v8 = v18;
  uint64_t v9 = v19;
  while (v8 != v9)
  {
    LODWORD(v17[0]) = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 136) + 560) + 96))(*(void *)(*(void *)(a1 + 136) + 560), v8)- 1;
    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a5, (int *)v17, v17);
    v8 += 24;
  }
  uint64_t v11 = *a4;
  uint64_t v10 = a4[1];
  while (v11 != v10)
  {
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 136) + 560) + 96))(*(void *)(*(void *)(a1 + 136) + 560), v11);
    if (v12 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Token to suppress not found in symbol table: ", 45);
      int v14 = *(char *)(v11 + 23);
      if (v14 >= 0) {
        uint64_t v15 = v11;
      }
      else {
        uint64_t v15 = *(void *)v11;
      }
      if (v14 >= 0) {
        uint64_t v16 = *(unsigned __int8 *)(v11 + 23);
      }
      else {
        uint64_t v16 = *(void *)(v11 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
    }
    LODWORD(v17[0]) = v12 - 1;
    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a5, (int *)v17, v17);
    v11 += 24;
  }
  v17[0] = (void **)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v17);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1B203CBC8()
{
  std::__tree<int>::destroy(v0, *(void **)(v0 + 8));
  JUMPOUT(0x1B203CBE4);
}

BOOL kaldi::quasar::PhraseBook::Find(void *a1, uint64_t a2, uint64_t a3)
{
  kaldi::quasar::PhraseBook::PreProcess((uint64_t)a1, a2, &__p);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    **(unsigned char **)a3 = 0;
    *(void *)(a3 + 8) = 0;
    if (!v5) {
      return v5 != 0;
    }
    goto LABEL_5;
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 23) = 0;
  if (v5) {
LABEL_5:
  }
    std::string::operator=((std::string *)a3, (const std::string *)(*((void *)v5 + 5) + 48));
  return v5 != 0;
}

void sub_1B203CCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 24);
  if (v7 == 1 && *(unsigned char *)(a4 + 35) == 0)
  {
    uint64_t v10 = 0;
    std::string __p = 0;
    uint64_t v12 = 0;
    LODWORD(v13) = 0;
    if (fst::SingleShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, a3, (uint64_t *)a4, &v13, (char **)&v10))fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a1, a2, &v10, v13); {
    else
    }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
    if (v10)
    {
      std::string __p = v10;
      operator delete(v10);
    }
  }
  else if (v7)
  {
    if (*(unsigned char *)(a4 + 33)
      || (fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, a3, a4), a3[1] - *a3 != 32)|| fst::LatticeWeightTpl<float>::Member((float *)*a3))
    {
      fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorFst();
    }
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192);
    v9(a2, 4, 4);
  }
}

void sub_1B203D1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  std::string v31 = *(void **)(v29 - 144);
  if (v31)
  {
    *(void *)(v29 - 136) = v31;
    operator delete(v31);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~ImplToFst((void *)(v29 - 120));
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v6 = 0;
        v5[0] = v3;
        v5[1] = 0;
        void v5[2] = 0;
        void v5[3] = &v6;
        fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a2, (uint64_t)v5);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B203DAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  uint64_t v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  std::string v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v12 = *(void *)(a3 + 8) - *(void *)a3;
  if (v12)
  {
    unint64_t v13 = v12 >> 2;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    bzero(*(void **)a3, 4 * v13);
  }
  unsigned int v30 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v28);
  while (1)
  {
    uint64_t result = v28;
    if (!v28)
    {
      if ((int)v30 >= v29) {
        return result;
      }
LABEL_11:
      uint64_t v16 = v30;
      goto LABEL_12;
    }
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 16))(v28);
    uint64_t result = v28;
    if (v15) {
      break;
    }
    if (!v28) {
      goto LABEL_11;
    }
    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v28 + 24))();
LABEL_12:
    unint64_t v27 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v16, v25);
    while (1)
    {
      if (!v25[0])
      {
        if (v27 >= v25[2]) {
          goto LABEL_44;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v25[0] + 24))(v25[0])) {
        break;
      }
      if (v25[0])
      {
        uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v25[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v18 = v25[1] + 48 * v27;
LABEL_19:
      uint64_t v19 = *(int *)(*a2 + 4 * (int)v16);
      if (v19 == *(_DWORD *)(*a2 + 4 * *(int *)(v18 + 40)))
      {
        uint64_t v20 = *(_DWORD **)a3;
        if (!a4
          || (float v22 = *(float *)(v18 + 8), v21 = *(float *)(v18 + 12), (float)(v22 + v21) < 0.0)
          || v22 < 0.0 && (float)(v22 + v21) <= 0.0)
        {
          int v23 = 1;
          goto LABEL_25;
        }
        if ((v20[v19] | 2) == 2)
        {
          float v34 = *(float *)(v18 + 8);
          float v33 = v21;
          int v32 = 2139095040;
          float v31 = INFINITY;
          if (v22 == INFINITY && v33 == v31 || (v34 = v22, v33 = v21, int v32 = 0, v31 = 0.0, v22 == 0.0) && v33 == v31) {
            int v23 = 2;
          }
          else {
            int v23 = 3;
          }
LABEL_25:
          v20[v19] = v23;
        }
        *a5 = 0;
      }
      float v24 = *(float *)(v18 + 8);
      v17.n128_u32[0] = *(_DWORD *)(v18 + 12);
      float v34 = v24;
      float v33 = v17.n128_f32[0];
      int v32 = 2139095040;
      float v31 = INFINITY;
      if (v24 != INFINITY || v33 != v31)
      {
        float v34 = v24;
        float v33 = v17.n128_f32[0];
        int v32 = 0;
        float v31 = 0.0;
        v17.n128_f32[0] = v24;
        if (v24 != 0.0 || (v17.n128_f32[0] = v33, v33 != v31)) {
          *a6 = 0;
        }
      }
      if (v25[0]) {
        (*(void (**)(void, __n128))(*(void *)v25[0] + 40))(v25[0], v17);
      }
      else {
        ++v27;
      }
    }
    if (v25[0])
    {
      (*(void (**)(void))(*(void *)v25[0] + 8))();
      goto LABEL_46;
    }
LABEL_44:
    if (v26) {
      --*v26;
    }
LABEL_46:
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 32))(v28);
    }
    else {
      ++v30;
    }
  }
  if (v28) {
    return (*(uint64_t (**)(void))(*(void *)v28 + 8))();
  }
  return result;
}

void sub_1B203E088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  uint64_t v2 = &v3;
  fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>();
}

void sub_1B203E25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  float v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  int v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>()
{
}

void sub_1B203EB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void *fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::~ShortestFirstQueue(void *a1)
{
  *a1 = &unk_1F0A3ED60;
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  return a1;
}

void fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::~ShortestFirstQueue(void *a1)
{
  *a1 = &unk_1F0A3ED60;
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Head_(uint64_t a1)
{
  return **(unsigned int **)(a1 + 80);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Enqueue_(uint64_t a1, int a2)
{
  int v3 = a2;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Insert(a1 + 16, &v3);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Dequeue_(uint64_t a1)
{
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Pop(a1 + 16);
}

BOOL fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 0;
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Clear_(uint64_t result)
{
  *(_DWORD *)(result + 104) = 0;
  return result;
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Insert(uint64_t a1, int *a2)
{
  uint64_t v5 = a1 + 64;
  uint64_t v4 = *(int **)(a1 + 64);
  unint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = *(int **)(v5 + 8);
  unint64_t v8 = v7 - v4;
  if (v8 > v6)
  {
    v4[v6] = *a2;
    *(_DWORD *)(*(void *)(a1 + 16) + 4 * *(int *)(*(void *)(a1 + 40) + 4 * *(int *)(a1 + quasar::RomanizerBlock::init((quasar::RomanizerBlock *)((char *)this + *(void *)(*(void *)this - 88))) = *(_DWORD *)(a1 + 88);
    goto LABEL_52;
  }
  unint64_t v9 = *(void *)(a1 + 80);
  if ((unint64_t)v7 >= v9)
  {
    if ((v8 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v9 - (void)v4;
    unint64_t v12 = (uint64_t)(v9 - (void)v4) >> 1;
    if (v12 <= v8 + 1) {
      unint64_t v12 = v8 + 1;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v13);
      uint64_t v4 = *(int **)(a1 + 64);
      uint64_t v7 = *(int **)(a1 + 72);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = (int *)&v14[4 * v8];
    uint64_t v16 = &v14[4 * v13];
    *uint64_t v15 = *a2;
    uint64_t v10 = v15 + 1;
    while (v7 != v4)
    {
      int v17 = *--v7;
      *--uint64_t v15 = v17;
    }
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v16;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    int *v7 = *a2;
    uint64_t v10 = v7 + 1;
  }
  unint64_t v18 = *(void *)(a1 + 32);
  *(void *)(a1 + 72) = v10;
  uint64_t v19 = *(char **)(a1 + 24);
  if ((unint64_t)v19 >= v18)
  {
    float v21 = *(char **)(a1 + 16);
    uint64_t v22 = (v19 - v21) >> 2;
    if ((unint64_t)(v22 + 1) >> 62) {
      goto LABEL_55;
    }
    unint64_t v23 = v18 - (void)v21;
    unint64_t v24 = (uint64_t)(v18 - (void)v21) >> 1;
    if (v24 <= v22 + 1) {
      unint64_t v24 = v22 + 1;
    }
    if (v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 32, v25);
      float v21 = *(char **)(a1 + 16);
      uint64_t v19 = *(char **)(a1 + 24);
    }
    else
    {
      uint64_t v26 = 0;
    }
    unint64_t v27 = &v26[4 * v22];
    uint64_t v28 = &v26[4 * v25];
    *(_DWORD *)unint64_t v27 = *(_DWORD *)(a1 + 88);
    uint64_t v20 = v27 + 4;
    while (v19 != v21)
    {
      int v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    *(void *)(a1 + 16) = v27;
    *(void *)(a1 + ++*(void *)(result + 24) = v20;
    *(void *)(a1 + 32) = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v19 = *(_DWORD *)(a1 + 88);
    uint64_t v20 = v19 + 4;
  }
  unint64_t v30 = *(void *)(a1 + 56);
  *(void *)(a1 + ++*(void *)(result + 24) = v20;
  float v31 = *(char **)(a1 + 48);
  if ((unint64_t)v31 >= v30)
  {
    float v33 = *(char **)(a1 + 40);
    uint64_t v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      unint64_t v35 = v30 - (void)v33;
      unint64_t v36 = (uint64_t)(v30 - (void)v33) >> 1;
      if (v36 <= v34 + 1) {
        unint64_t v36 = v34 + 1;
      }
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37)
      {
        char v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v37);
        float v33 = *(char **)(a1 + 40);
        float v31 = *(char **)(a1 + 48);
      }
      else
      {
        char v38 = 0;
      }
      uint64_t v39 = &v38[4 * v34];
      uint64_t v40 = &v38[4 * v37];
      *(_DWORD *)uint64_t v39 = *(_DWORD *)(a1 + 88);
      int v32 = v39 + 4;
      while (v31 != v33)
      {
        int v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(void *)(a1 + 40) = v39;
      *(void *)(a1 + 48) = v32;
      *(void *)(a1 + 56) = v40;
      if (v33) {
        operator delete(v33);
      }
      goto LABEL_51;
    }
LABEL_55:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)float v31 = *(_DWORD *)(a1 + 88);
  int v32 = v31 + 4;
LABEL_51:
  *(void *)(a1 + 48) = v32;
LABEL_52:
  unsigned int v42 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v42 + 1;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Insert((uint64_t **)a1, a2, v42);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Insert(uint64_t **a1, int *a2, unsigned int a3)
{
  if ((int)a3 >= 1)
  {
    int v3 = a1[8];
    uint64_t v4 = **a1;
    while (1)
    {
      unsigned int v5 = a3 - 1;
      uint64_t v6 = (a3 - 1) >> 1;
      uint64_t v7 = (float *)(v4 + 32 * *((int *)v3 + v6));
      unint64_t v8 = (float *)(v4 + 32 * *a2);
      float v9 = *v7 + v7[1];
      float v10 = *v8 + v8[1];
      if (v9 < v10) {
        break;
      }
      if (*v7 < *v8 && v9 <= v10) {
        break;
      }
      unint64_t v12 = a1[5];
      uint64_t v13 = *((int *)v12 + a3);
      uint64_t v14 = *((int *)v12 + v6);
      *((_DWORD *)v12 + a3) = v14;
      uint64_t v15 = a1[2];
      *((_DWORD *)v15 + v14) = a3;
      *((_DWORD *)v12 + v6) = v13;
      *((_DWORD *)v15 + v13) = v6;
      LODWORD(v12) = *((_DWORD *)v3 + a3);
      *((_DWORD *)v3 + a3) = *((_DWORD *)v3 + v6);
      *((_DWORD *)v3 + v6) = v12;
      a3 = v5 >> 1;
      if (v5 <= 1) {
        return *((unsigned int *)a1[5] + (int)v6);
      }
    }
  }
  LODWORD(v6) = a3;
  return *((unsigned int *)a1[5] + (int)v6);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Pop(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 64);
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(a1 + 88) - 1;
  uint64_t v4 = *(int **)(a1 + 40);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[v3];
  *uint64_t v4 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  *uint64_t v1 = v1[v3];
  v1[v3] = v4;
  --*(_DWORD *)(a1 + 88);
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Heapify((uint64_t **)a1, 0);
  return v2;
}

uint64_t **fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Heapify(uint64_t **result, uint64_t a2)
{
  while (1)
  {
    int v2 = (2 * a2) | 1;
    int v3 = *((_DWORD *)result + 22);
    uint64_t v4 = a2;
    if (v2 < v3)
    {
      uint64_t v5 = result[8];
      uint64_t v6 = **result;
      uint64_t v7 = (float *)(v6 + 32 * *((int *)v5 + v2));
      unint64_t v8 = (float *)(v6 + 32 * *((int *)v5 + (int)a2));
      float v9 = *v7 + v7[1];
      float v10 = *v8 + v8[1];
      if (v9 < v10 || (*v7 < *v8 ? (v11 = v9 <= v10) : (v11 = 0), uint64_t v4 = a2, v11)) {
        uint64_t v4 = (2 * a2) | 1u;
      }
    }
    uint64_t v12 = (2 * a2 + 2);
    if ((int)v12 >= v3
      || (uint64_t v13 = result[8],
          uint64_t v14 = **result,
          uint64_t v15 = (float *)(v14 + 32 * *((int *)v13 + (int)v12)),
          uint64_t v16 = (float *)(v14 + 32 * *((int *)v13 + (int)v4)),
          float v17 = *v15 + v15[1],
          float v18 = *v16 + v16[1],
          v17 >= v18)
      && (v17 > v18 || *v15 >= *v16))
    {
      uint64_t v12 = v4;
    }
    if (v12 == a2) {
      break;
    }
    uint64_t v19 = result[5];
    uint64_t v20 = *((int *)v19 + (int)a2);
    uint64_t v21 = *((int *)v19 + (int)v12);
    *((_DWORD *)v19 + (int)a2) = v21;
    uint64_t v22 = result[2];
    *((_DWORD *)v22 + v21) = a2;
    *((_DWORD *)v19 + (int)v12) = v20;
    *((_DWORD *)v22 + v20) = v12;
    unint64_t v23 = result[8];
    LODWORD(v20) = *((_DWORD *)v23 + (int)a2);
    *((_DWORD *)v23 + (int)a2) = *((_DWORD *)v23 + (int)v12);
    *((_DWORD *)v23 + (int)v12) = v20;
    a2 = v12;
  }
  return result;
}

uint64_t fst::SingleShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4, char **a5)
{
  a5[1] = *a5;
  *a4 = -1;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) == -1) {
    return 1;
  }
  memset(v125, 0, sizeof(v125));
  uint64_t v9 = *a3;
  uint64_t v10 = *((unsigned int *)a3 + 3);
  uint64_t v104 = *a3;
  if (v10 == -1)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    uint64_t v9 = v104;
  }
  float v122 = (void *)vdup_n_s32(0x7F800000u);
  v124[0] = 0;
  v124[1] = 0;
  float v123 = 0;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
  (*(void (**)(void))(**(void **)(v9 + 16) + 56))(*(void *)(v9 + 16));
  if (a3[3] != 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v15 = fst::LogMessage::LogMessage((fst *)&v118, (uint64_t)__p);
    uint64_t v16 = (void *)fst::cerr(v15);
    float v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"SingleShortestPath: for nshortest > 1, use ShortestPath", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" instead", 8);
LABEL_43:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v118);
    if (SBYTE7(v116) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_45;
  }
  __int32 v11 = *((_DWORD *)a3 + 11);
  LODWORD(__p[0]) = *((_DWORD *)a3 + 10);
  v118.i32[0] = v11;
  v111.i32[0] = 2139095040;
  LODWORD(v107) = 2139095040;
  if (*(float *)__p != INFINITY || v118.f32[0] != *(float *)&v107 || *((_DWORD *)a3 + 18) != -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v12 = fst::LogMessage::LogMessage((fst *)&v118, (uint64_t)__p);
    uint64_t v13 = (void *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SingleShortestPath: weight and state thresholds not applicable", 62);
    goto LABEL_43;
  }
  std::string::size_type v101 = a3;
  char v102 = a4;
  unint64_t v17 = a2[1];
  if ((int)v10 > (unint64_t)((uint64_t)(v17 - *a2) >> 5))
  {
    float v18 = (void *)vdup_n_s32(0x7F800000u);
    do
    {
      __p[0] = v18;
      long long v116 = 0uLL;
      __p[1] = 0;
      if (v17 >= a2[2])
      {
        uint64_t v19 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a2, (uint64_t)__p);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)a2, (uint64_t)__p);
        uint64_t v19 = v17 + 32;
      }
      a2[1] = v19;
      if (__p[1])
      {
        *(void **)&long long v116 = __p[1];
        operator delete(__p[1]);
      }
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)v125, __p);
      uint64_t v21 = a5[1];
      unint64_t v20 = (unint64_t)a5[2];
      if ((unint64_t)v21 >= v20)
      {
        unint64_t v23 = *a5;
        uint64_t v24 = (v21 - *a5) >> 4;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = v20 - (void)v23;
        if (v26 >> 3 > v25) {
          unint64_t v25 = v26 >> 3;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v27);
          unint64_t v23 = *a5;
          uint64_t v21 = a5[1];
        }
        else
        {
          uint64_t v28 = 0;
        }
        int v29 = &v28[16 * v24];
        *(_DWORD *)int v29 = -1;
        *((void *)v29 + 1) = -1;
        unint64_t v30 = v29;
        if (v21 != v23)
        {
          do
          {
            *((_OWORD *)v30 - 1) = *((_OWORD *)v21 - 1);
            v30 -= 16;
            v21 -= 16;
          }
          while (v21 != v23);
          unint64_t v23 = *a5;
        }
        uint64_t v22 = v29 + 16;
        *a5 = v30;
        a5[1] = v29 + 16;
        a5[2] = &v28[16 * v27];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v21 = -1;
        *((void *)v21 + 1) = -1;
        uint64_t v22 = v21 + 16;
      }
      a5[1] = v22;
      unint64_t v17 = a2[1];
    }
    while ((int)v10 > (unint64_t)((uint64_t)(v17 - *a2) >> 5));
  }
  *(_OWORD *)std::string __p = 0u;
  long long v116 = 0u;
  if (v17 >= a2[2])
  {
    uint64_t v32 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a2, (uint64_t)__p);
    uint64_t v31 = v104;
  }
  else
  {
    std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)a2, (uint64_t)__p);
    uint64_t v31 = v104;
    uint64_t v32 = v17 + 32;
  }
  a2[1] = v32;
  if (__p[1])
  {
    *(void **)&long long v116 = __p[1];
    operator delete(__p[1]);
  }
  unint64_t v35 = (unint64_t)a5[2];
  unint64_t v36 = a5[1];
  if ((unint64_t)v36 >= v35)
  {
    char v38 = *a5;
    uint64_t v39 = (v36 - *a5) >> 4;
    unint64_t v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v41 = v35 - (void)v38;
    if (v41 >> 3 > v40) {
      unint64_t v40 = v41 >> 3;
    }
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v40;
    }
    if (v42)
    {
      uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v42);
      char v38 = *a5;
      unint64_t v36 = a5[1];
    }
    else
    {
      uint64_t v43 = 0;
    }
    unint64_t v44 = &v43[16 * v39];
    uint64_t v45 = &v43[16 * v42];
    *(_DWORD *)unint64_t v44 = -1;
    *((void *)v44 + 1) = -1;
    unint64_t v37 = v44 + 16;
    if (v36 != v38)
    {
      do
      {
        *((_OWORD *)v44 - 1) = *((_OWORD *)v36 - 1);
        v44 -= 16;
        v36 -= 16;
      }
      while (v36 != v38);
      char v38 = *a5;
    }
    *a5 = v44;
    a5[1] = v37;
    a5[2] = v45;
    if (v38) {
      operator delete(v38);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v36 = -1;
    *((void *)v36 + 1) = -1;
    unint64_t v37 = v36 + 16;
  }
  a5[1] = v37;
  (*(void (**)(void, uint64_t))(**(void **)(v31 + 16) + 24))(*(void *)(v31 + 16), v10);
  LOBYTE(__p[0]) = 1;
  std::vector<BOOL>::push_back((uint64_t)v125, __p);
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(v104 + 16) + 48))(*(void *)(v104 + 16))) {
      goto LABEL_195;
    }
    uint64_t v105 = (*(uint64_t (**)(void))(**(void **)(v104 + 16) + 16))(*(void *)(v104 + 16));
    (*(void (**)(void))(**(void **)(v104 + 16) + 32))(*(void *)(v104 + 16));
    *(void *)((char *)v125[0] + (((unint64_t)(int)v105 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v105);
    uint64_t v46 = *a2 + 32 * (int)v105;
    float32x2_t v118 = *(float32x2_t *)v46;
    float v120 = 0;
    uint64_t v121 = 0;
    int v119 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v119, *(const void **)(v46 + 8), *(void *)(v46 + 16), (uint64_t)(*(void *)(v46 + 16) - *(void *)(v46 + 8)) >> 2);
    (*(void (**)(void **__return_ptr))(*(void *)a1 + 32))(__p);
    uint64_t v47 = (uint64_t)(a5 + 2);
    LODWORD(v107) = HIDWORD(__p[0]);
    v111.i32[0] = (__int32)__p[0];
    float v129 = INFINITY;
    float v128 = INFINITY;
    v48.n128_u32[0] = (unsigned __int32)__p[0];
    if (*(float *)__p == INFINITY)
    {
      v48.n128_u32[0] = v107;
      BOOL v49 = *(float *)&v107 != v128;
    }
    else
    {
      BOOL v49 = 1;
    }
    if (__p[1])
    {
      *(void **)&long long v116 = __p[1];
      operator delete(__p[1]);
    }
    if (!v49) {
      goto LABEL_108;
    }
    (*(void (**)(void **__return_ptr, __n128))(*(void *)a1 + 32))(__p, v48);
    float32x2_t v50 = v118;
    uint64_t v51 = __p[0];
    int32x2_t v111 = 0;
    unint64_t v107 = 0;
    if (__p[1])
    {
      *(void **)&long long v116 = __p[1];
      operator delete(__p[1]);
    }
    float v52 = v50.f32[0] + *(float *)&v51;
    float v53 = *((float *)&v122 + 1);
    LODWORD(v54) = v122;
    float v55 = (float)(v50.f32[0] + *(float *)&v51) + (float)(v50.f32[1] + *((float *)&v51 + 1));
    if ((float)(*(float *)&v122 + *((float *)&v122 + 1)) >= v55)
    {
      if ((float)(*(float *)&v122 + *((float *)&v122 + 1)) > (float)(v52 + (float)(v50.f32[1] + *((float *)&v51 + 1)))) {
        goto LABEL_83;
      }
      if (*(float *)&v122 >= v52)
      {
        int v56 = (int32x2_t *)&v123;
        unint64_t v57 = v124;
        if (*(float *)&v122 <= v52) {
          goto LABEL_84;
        }
LABEL_83:
        unint64_t v57 = (uint64_t *)&v107;
        int v56 = &v111;
        float v53 = v50.f32[1] + *((float *)&v51 + 1);
        float v54 = v50.f32[0] + *(float *)&v51;
        goto LABEL_84;
      }
    }
    int v56 = (int32x2_t *)&v123;
    unint64_t v57 = v124;
LABEL_84:
    __p[0] = (void *)__PAIR64__(LODWORD(v53), LODWORD(v54));
    long long v116 = 0uLL;
    __p[1] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[1], *(const void **)v56, *v57, (*v57 - *(void *)v56) >> 2);
    unint64_t v58 = (unint64_t)v122;
    LODWORD(v128) = HIDWORD(v58);
    v48.n128_u32[0] = v58;
    float v129 = *(float *)&v122;
    float v126 = *((float *)__p + 1);
    int v127 = (int)__p[0];
    BOOL v59 = *(float *)&v122 != *(float *)__p || v128 != v126;
    if (__p[1])
    {
      *(void **)&long long v116 = __p[1];
      operator delete(__p[1]);
      v48.n128_u32[0] = v122;
    }
    if (!v59) {
      goto LABEL_100;
    }
    float v60 = *((float *)&v122 + 1);
    if ((float)(v48.n128_f32[0] + *((float *)&v122 + 1)) >= v55)
    {
      if ((float)(v48.n128_f32[0] + *((float *)&v122 + 1)) > v55) {
        goto LABEL_96;
      }
      if (v48.n128_f32[0] >= v52)
      {
        uint64_t v61 = (int32x2_t *)&v123;
        uint64_t v62 = v124;
        if (v48.n128_f32[0] <= v52) {
          goto LABEL_97;
        }
LABEL_96:
        uint64_t v62 = (uint64_t *)&v107;
        uint64_t v61 = &v111;
        float v60 = v50.f32[1] + *((float *)&v51 + 1);
        v48.n128_f32[0] = v50.f32[0] + *(float *)&v51;
        goto LABEL_97;
      }
    }
    uint64_t v61 = (int32x2_t *)&v123;
    uint64_t v62 = v124;
LABEL_97:
    __p[0] = (void *)__PAIR64__(LODWORD(v60), v48.n128_u32[0]);
    long long v116 = 0uLL;
    __p[1] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[1], *(const void **)v61, *v62, (*v62 - *(void *)v61) >> 2);
    float v122 = __p[0];
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v123, (char *)__p[1], v116, (uint64_t)(v116 - (unint64_t)__p[1]) >> 2);
    if (__p[1])
    {
      *(void **)&long long v116 = __p[1];
      operator delete(__p[1]);
    }
    _DWORD *v102 = v105;
    v48.n128_u32[0] = v122;
LABEL_100:
    if (*((float *)&v122 + 1) == -INFINITY
      || v48.n128_f32[0] == -INFINITY
      || (v48.n128_f32[0] == INFINITY || *((float *)&v122 + 1) == INFINITY)
      && (v48.n128_f32[0] != INFINITY || (v48.n128_u32[0] = 2139095040, *((float *)&v122 + 1) != INFINITY)))
    {
      int v63 = 1;
      goto LABEL_187;
    }
    if (*((unsigned char *)v101 + 34))
    {
      int v63 = 5;
      goto LABEL_187;
    }
LABEL_108:
    unint64_t v117 = 0;
    (*(void (**)(uint64_t, uint64_t, void **, __n128))(*(void *)a1 + 136))(a1, v105, __p, v48);
    while (1)
    {
      if (__p[0])
      {
        if ((*(uint64_t (**)(void *))(*(void *)__p[0] + 24))(__p[0])) {
          goto LABEL_178;
        }
        if (__p[0])
        {
          unint64_t v64 = (float32x2_t *)(*(uint64_t (**)(void *))(*(void *)__p[0] + 32))(__p[0]);
          goto LABEL_137;
        }
      }
      else if (v117 >= (unint64_t)v116)
      {
LABEL_178:
        int v63 = 0;
        goto LABEL_183;
      }
      unint64_t v64 = (float32x2_t *)((char *)__p[1] + 48 * v117);
LABEL_137:
      while (1)
      {
        uint64_t v78 = *a2;
        unint64_t v77 = a2[1];
        unint64_t v79 = v64[5].i32[0];
        if (v79 < (uint64_t)(v77 - *a2) >> 5) {
          break;
        }
        int32x2_t v111 = vdup_n_s32(0x7F800000u);
        long long v113 = 0;
        uint64_t v114 = 0;
        uint64_t v112 = 0;
        if (v77 >= a2[2])
        {
          uint64_t v65 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a2, (uint64_t)&v111);
        }
        else
        {
          std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)a2, (uint64_t)&v111);
          uint64_t v65 = v77 + 32;
        }
        a2[1] = v65;
        if (v112)
        {
          long long v113 = v112;
          operator delete(v112);
        }
        v111.i8[0] = 0;
        std::vector<BOOL>::push_back((uint64_t)v125, &v111);
        uint64_t v67 = a5[1];
        unint64_t v66 = (unint64_t)a5[2];
        if ((unint64_t)v67 >= v66)
        {
          uint64_t v69 = *a5;
          uint64_t v70 = (v67 - *a5) >> 4;
          unint64_t v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v72 = v66 - (void)v69;
          if (v72 >> 3 > v71) {
            unint64_t v71 = v72 >> 3;
          }
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v73 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v71;
          }
          if (v73)
          {
            uint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v47, v73);
            uint64_t v69 = *a5;
            uint64_t v67 = a5[1];
          }
          else
          {
            uint64_t v74 = 0;
          }
          uint64_t v75 = &v74[16 * v70];
          *(_DWORD *)uint64_t v75 = -1;
          *((void *)v75 + 1) = -1;
          int v76 = v75;
          if (v67 != v69)
          {
            do
            {
              *((_OWORD *)v76 - 1) = *((_OWORD *)v67 - 1);
              v76 -= 16;
              v67 -= 16;
            }
            while (v67 != v69);
            uint64_t v69 = *a5;
          }
          int v68 = v75 + 16;
          *a5 = v76;
          a5[1] = v75 + 16;
          a5[2] = &v74[16 * v73];
          if (v69) {
            operator delete(v69);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v67 = -1;
          *((void *)v67 + 1) = -1;
          int v68 = v67 + 16;
        }
        a5[1] = v68;
      }
      float v80 = (float *)(v78 + 32 * v79);
      float32x2_t v81 = vadd_f32(v118, v64[1]);
      int32x2_t v111 = (int32x2_t)v81;
      long long v113 = 0;
      uint64_t v114 = 0;
      uint64_t v112 = 0;
      float v83 = *v80;
      __int32 v82 = *((_DWORD *)v80 + 1);
      float32x2_t v84 = (float32x2_t)vdup_lane_s32((int32x2_t)v81, 0);
      v84.f32[0] = *v80;
      float32x2_t v106 = v81;
      v81.i32[0] = v82;
      float32x2_t v85 = vadd_f32(v84, v81);
      float v86 = v85.f32[1];
      if (v85.f32[0] >= v85.f32[1])
      {
        if (v85.f32[0] > v85.f32[1]
          || (v83 >= v106.f32[0] ? (v88 = v83 <= v106.f32[0]) : (v88 = 1), float v87 = (int32x2_t *)(v78 + 32 * v79), !v88))
        {
          __int32 v82 = v106.i32[1];
          float v83 = v106.f32[0];
          float v87 = &v111;
        }
      }
      else
      {
        float v87 = (int32x2_t *)(v78 + 32 * v79);
      }
      unint64_t v107 = __PAIR64__(v82, LODWORD(v83));
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      int v108 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v108, *(const void **)&v87[1], *(void *)&v87[2], (uint64_t)(*(void *)&v87[2] - *(void *)&v87[1]) >> 2);
      float v89 = v80[1];
      float v129 = *v80;
      float v128 = v89;
      float v126 = *((float *)&v107 + 1);
      int v127 = v107;
      v90.n128_f32[0] = v129;
      if (v129 == *(float *)&v107)
      {
        v90.n128_f32[0] = v128;
        BOOL v91 = v128 != v126;
      }
      else
      {
        BOOL v91 = 1;
      }
      if (v108)
      {
        uint64_t v109 = v108;
        operator delete(v108);
      }
      if (v91) {
        break;
      }
LABEL_173:
      if (v112) {
        operator delete(v112);
      }
      uint64_t v47 = (uint64_t)(a5 + 2);
      if (__p[0]) {
        (*(void (**)(void *, __n128))(*(void *)__p[0] + 40))(__p[0], v90);
      }
      else {
        ++v117;
      }
    }
    float v93 = *v80;
    float v92 = v80[1];
    float v94 = *v80 + v92;
    if (v94 >= v86)
    {
      if (v94 > v86
        || (v93 >= v106.f32[0] ? (v96 = v93 <= v106.f32[0]) : (v96 = 1), std::string v95 = (int32x2_t *)(v78 + 32 * v79), !v96))
      {
        float v92 = v106.f32[1];
        float v93 = v106.f32[0];
        std::string v95 = &v111;
      }
    }
    else
    {
      std::string v95 = (int32x2_t *)(v78 + 32 * v79);
    }
    unint64_t v107 = __PAIR64__(LODWORD(v92), LODWORD(v93));
    uint64_t v109 = 0;
    uint64_t v110 = 0;
    int v108 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v108, *(const void **)&v95[1], *(void *)&v95[2], (uint64_t)(*(void *)&v95[2] - *(void *)&v95[1]) >> 2);
    *(void *)float v80 = v107;
    if (v80 != (float *)&v107) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v78 + 32 * v79 + 8), (char *)v108, (uint64_t)v109, (v109 - (unsigned char *)v108) >> 2);
    }
    if (v108)
    {
      uint64_t v109 = v108;
      operator delete(v108);
    }
    if (fst::LatticeWeightTpl<float>::Member((float *)(v78 + 32 * v79)))
    {
      if (__p[0]) {
        uint64_t v97 = (*(uint64_t (**)(void *))(*(void *)__p[0] + 48))(__p[0]);
      }
      else {
        uint64_t v97 = v117;
      }
      unint64_t v98 = v64[5].i32[0];
      uint64_t v99 = (uint64_t)&(*a5)[16 * v98];
      *(_DWORD *)uint64_t v99 = v105;
      *(void *)(v99 + 8) = v97;
      uint64_t v100 = **(void **)(v104 + 16);
      if ((*(void *)((char *)v125[0] + ((v98 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v98))
      {
        (*(void (**)(void))(v100 + 40))();
      }
      else
      {
        (*(void (**)(void))(v100 + 24))();
        *(void *)((char *)v125[0] + (((unint64_t)v64[5].i32[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v64[5].i32[0];
      }
      goto LABEL_173;
    }
    if (v112) {
      operator delete(v112);
    }
    int v63 = 1;
LABEL_183:
    if (__p[0])
    {
      (*(void (**)(void *))(*(void *)__p[0] + 8))(__p[0]);
    }
    else if (*((void *)&v116 + 1))
    {
      --**((_DWORD **)&v116 + 1);
    }
LABEL_187:
    if (v119)
    {
      float v120 = v119;
      operator delete(v119);
    }
  }
  while (!v63);
  if (v63 != 5)
  {
LABEL_45:
    uint64_t v14 = 0;
    goto LABEL_46;
  }
LABEL_195:
  uint64_t v14 = 1;
LABEL_46:
  if (v123)
  {
    v124[0] = v123;
    operator delete(v123);
  }
  if (v125[0]) {
    operator delete(v125[0]);
  }
  return v14;
}

void sub_1B20400CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,void *a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42)
{
  unint64_t v44 = *(void **)(v42 - 184);
  if (v44)
  {
    *(void *)(v42 - 176) = v44;
    operator delete(v44);
  }
  uint64_t v45 = *(void **)(v42 - 160);
  if (v45) {
    operator delete(v45);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v8);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v9);
  if (a4 != -1)
  {
    int v10 = -1;
    uint64_t v11 = a4;
    LODWORD(v12) = -1;
    while (1)
    {
      int v13 = v12;
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
      if (v10 == -1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v27, a1, a4);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v12, &v27);
        if (__p)
        {
          int v29 = __p;
          operator delete(__p);
        }
        goto LABEL_18;
      }
      uint64_t v26 = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v11, v24);
      uint64_t v14 = *(void *)(*a3 + 16 * v10 + 8);
      if (!v24[0]) {
        break;
      }
      (*(void (**)(void, uint64_t))(*(void *)v24[0] + 64))(v24[0], v14);
      if (!v24[0])
      {
        uint64_t v14 = v26;
        goto LABEL_11;
      }
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v24[0] + 32))(v24[0]);
LABEL_12:
      v19[0] = *(void *)v15;
      v19[1] = *(void *)(v15 + 8);
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      unint64_t v20 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v20, *(const void **)(v15 + 16), *(void *)(v15 + 24), (uint64_t)(*(void *)(v15 + 24) - *(void *)(v15 + 16)) >> 2);
      int v23 = v13;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 208))(a2, v12, v19);
      if (v20)
      {
        uint64_t v21 = v20;
        operator delete(v20);
      }
      if (v24[0])
      {
        (*(void (**)(void))(*(void *)v24[0] + 8))(v24[0]);
      }
      else if (v25)
      {
        --*v25;
      }
LABEL_18:
      int v10 = v11;
      uint64_t v11 = *(unsigned int *)(*a3 + 16 * (int)v11);
      if (v11 == -1) {
        goto LABEL_21;
      }
    }
    uint64_t v26 = *(void *)(*a3 + 16 * v10 + 8);
LABEL_11:
    uint64_t v15 = v24[1] + 48 * v14;
    goto LABEL_12;
  }
  uint64_t v12 = 0xFFFFFFFFLL;
LABEL_21:
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v12);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 4, 0)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
  }
  unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v17 = fst::ShortestPathProperties(v16, 0);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 192))(a2, v17, 0x3FFFFFFF0007);
}

void sub_1B2040710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v10[0] = a1;
  v10[1] = (uint64_t)a2;
  void v10[2] = *(void *)a3;
  int v11 = *(_DWORD *)(a3 + 16);
  char v12 = *(unsigned char *)(a3 + 20);
  char v13 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  memset(v17, 0, 29);
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
  fst::ShortestDistanceState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::ShortestDistance(v10, *(_DWORD *)(a3 + 12));
  if (BYTE12(v17[1]))
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
    int32x2_t v6 = vdup_n_s32(0x7FC00000u);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    std::string __p = 0;
    std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::resize(a2, 1uLL, (uint64_t)&v6);
    if (__p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
  }
  return fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState((uint64_t)v10);
}

void sub_1B2040850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    int v8 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a1);
    (*(void (**)(uint64_t *, void))(*a2 + 248))(a2, (v8 + 1));
  }
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v76 = 0;
  unsigned int v37 = v9;
  if (a3)
  {
LABEL_39:
    uint64_t v10 = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
    int v20 = 1;
    goto LABEL_40;
  }
  LODWORD(v67) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v65);
  uint64_t v10 = 0xFFFFFFFFLL;
  while (1)
  {
    if (v65)
    {
      char v11 = (*(uint64_t (**)(uint64_t))(*(void *)v65 + 16))(v65);
      uint64_t v12 = v65;
      if (v11) {
        goto LABEL_27;
      }
      if (v65)
      {
        uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v65 + 24))(v65);
        goto LABEL_11;
      }
    }
    else if ((int)v67 >= (int)v66)
    {
      goto LABEL_29;
    }
    uint64_t v13 = v67;
LABEL_11:
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&p_p, a1, v13);
    LODWORD(v49) = HIDWORD(p_p);
    LODWORD(__p) = p_p;
    LODWORD(v46) = 2139095040;
    LODWORD(v62) = 2139095040;
    v14.n128_u32[0] = p_p;
    if (*(float *)&p_p == INFINITY)
    {
      v14.n128_u32[0] = v49;
      BOOL v15 = *(float *)&v49 == *(float *)&v62;
    }
    else
    {
      BOOL v15 = 0;
    }
    if (v71)
    {
      uint64_t v72 = v71;
      operator delete(v71);
    }
    int v16 = 2 * (v10 != -1);
    unsigned int v17 = v10 == -1 ? v13 : -1;
    if (v15)
    {
      int v16 = 4;
      uint64_t v10 = v10;
    }
    else
    {
      uint64_t v10 = v17;
    }
    if ((v16 | 4) != 4) {
      break;
    }
    if (v65) {
      (*(void (**)(uint64_t, __n128))(*(void *)v65 + 32))(v65, v14);
    }
    else {
      LODWORD(v67) = v67 + 1;
    }
  }
  uint64_t v12 = v65;
LABEL_27:
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
LABEL_29:
  if (v10 == -1) {
    goto LABEL_39;
  }
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&p_p, a1, v10);
  LODWORD(__p) = HIDWORD(p_p);
  LODWORD(v65) = p_p;
  LODWORD(v49) = 0;
  LODWORD(v46) = 0;
  v18.n128_u32[0] = p_p;
  if (*(float *)&p_p == 0.0)
  {
    v18.n128_u32[0] = __p;
    BOOL v19 = *(float *)&__p != *(float *)&v46;
  }
  else
  {
    BOOL v19 = 1;
  }
  if (v71)
  {
    uint64_t v72 = v71;
    operator delete(v71);
  }
  if (v19)
  {
    std::string __p = 0;
    unint64_t v58 = 0;
    BOOL v59 = 0;
    p_p = &__p;
    unint64_t v71 = 0;
    uint64_t v72 = 0;
    unint64_t v73 = &v76;
    fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, (uint64_t)&p_p);
  }
  int v20 = 0;
LABEL_40:
  unsigned int v64 = 0;
  (*(void (**)(uint64_t, uint64_t *, __n128))(*(void *)a1 + 128))(a1, &v62, v18);
  while (2)
  {
    if (!v62)
    {
      if ((int)v64 >= v63) {
        goto LABEL_98;
      }
      goto LABEL_46;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v62 + 16))(v62))
    {
      if (v62)
      {
        uint64_t v21 = (*(uint64_t (**)(void))(*(void *)v62 + 24))();
LABEL_47:
        int v22 = v21 + v20;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v22)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if (v21 == v37)
        {
          *(_OWORD *)float v60 = 0u;
          long long v61 = 0u;
          (*(void (**)(uint64_t *, void, void **))(*a2 + 184))(a2, (v21 + v20), v60);
          if (v60[1])
          {
            *(void **)&long long v61 = v60[1];
            operator delete(v60[1]);
          }
        }
        (*(void (**)(void **__return_ptr))(*(void *)a1 + 32))(&__p);
        LODWORD(v65) = HIDWORD(__p);
        LODWORD(p_p) = __p;
        LODWORD(v49) = 2139095040;
        LODWORD(v46) = 2139095040;
        BOOL v23 = *(float *)&__p != INFINITY || *(float *)&v65 != *(float *)&v46;
        if ((v20 & v23) == 1)
        {
          float v53 = (uint64_t *)__p;
          float v55 = 0;
          uint64_t v56 = 0;
          float v54 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v54, v58, (uint64_t)v59, (v59 - (unsigned char *)v58) >> 2);
          p_p = 0;
          unint64_t v71 = v53;
          unint64_t v73 = 0;
          uint64_t v74 = 0;
          uint64_t v72 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v72, v54, (uint64_t)v55, (v55 - (unsigned char *)v54) >> 2);
          int v75 = v21 + v20;
          if (v54)
          {
            float v55 = v54;
            operator delete(v54);
          }
          (*(void (**)(uint64_t *, void, void ***))(*a2 + 208))(a2, 0, &p_p);
          if (v72)
          {
            unint64_t v73 = v72;
            operator delete(v72);
          }
        }
        unint64_t v69 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 136))(a1, v21, &v65);
LABEL_62:
        if (v65)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v65 + 24))(v65))
          {
            if (v65)
            {
              (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
              goto LABEL_91;
            }
LABEL_89:
            if (v68) {
              --*v68;
            }
LABEL_91:
            if (v58)
            {
              BOOL v59 = v58;
              operator delete(v58);
            }
            if (v62) {
              (*(void (**)(uint64_t))(*(void *)v62 + 32))(v62);
            }
            else {
              ++v64;
            }
            continue;
          }
          if (v65)
          {
            uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v65 + 32))(v65);
LABEL_68:
            int v25 = *(_DWORD *)(v24 + 40);
            BOOL v49 = *(uint64_t **)(v24 + 8);
            uint64_t v51 = 0;
            uint64_t v52 = 0;
            float32x2_t v50 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v50, *(const void **)(v24 + 16), *(void *)(v24 + 24), (uint64_t)(*(void *)(v24 + 24) - *(void *)(v24 + 16)) >> 2);
            uint64_t v26 = (v25 + v20);
            if (v26 == v10) {
              char v27 = v20;
            }
            else {
              char v27 = 1;
            }
            if ((v27 & 1) == 0)
            {
              (*(void (**)(void ***__return_ptr))(*(void *)a1 + 32))(&v46);
              p_p = v46;
              uint64_t v72 = 0;
              unint64_t v73 = 0;
              unint64_t v71 = 0;
              std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v71, v47, (uint64_t)v48, (v48 - (unsigned char *)v47) >> 2);
              BOOL v49 = (uint64_t *)vadd_f32((float32x2_t)p_p, (float32x2_t)v49);
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v50, 0, 0, 0);
              if (v71)
              {
                uint64_t v72 = v71;
                operator delete(v71);
              }
              if (v47)
              {
                __n128 v48 = v47;
                operator delete(v47);
              }
            }
            uint64_t v28 = *(void ***)v24;
            uint64_t v42 = v49;
            unint64_t v44 = 0;
            uint64_t v45 = 0;
            uint64_t v43 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v43, v50, (uint64_t)v51, (v51 - (unsigned char *)v50) >> 2);
            p_p = v28;
            unint64_t v71 = v42;
            unint64_t v73 = 0;
            uint64_t v74 = 0;
            uint64_t v72 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v72, v43, (uint64_t)v44, (v44 - (unsigned char *)v43) >> 2);
            int v75 = v22;
            if (v43)
            {
              unint64_t v44 = v43;
              operator delete(v43);
            }
            while (1)
            {
              int v29 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              uint64_t v30 = *a2;
              if (v29 > (int)v26) {
                break;
              }
              (*(void (**)(uint64_t *))(v30 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, void ***))(v30 + 208))(a2, v26, &p_p);
            if (v72)
            {
              unint64_t v73 = v72;
              operator delete(v72);
            }
            if (v50)
            {
              uint64_t v51 = v50;
              operator delete(v50);
            }
            if (v65) {
              (*(void (**)(uint64_t))(*(void *)v65 + 40))(v65);
            }
            else {
              ++v69;
            }
            goto LABEL_62;
          }
        }
        else if (v69 >= v67)
        {
          goto LABEL_89;
        }
        uint64_t v24 = v66 + 48 * v69;
        goto LABEL_68;
      }
LABEL_46:
      uint64_t v21 = v64;
      goto LABEL_47;
    }
    break;
  }
  if (v62) {
    (*(void (**)(void))(*(void *)v62 + 8))();
  }
LABEL_98:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, v10);
  if (v10 == v37) {
    char v31 = v20;
  }
  else {
    char v31 = 1;
  }
  if ((v31 & 1) == 0)
  {
    (*(void (**)(void ***__return_ptr, uint64_t, void))(*(void *)a1 + 32))(&p_p, a1, v37);
    char v38 = p_p;
    unint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v39 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v39, v71, (uint64_t)v72, ((char *)v72 - (char *)v71) >> 2);
    (*(void (**)(uint64_t *, void, void ***))(*a2 + 184))(a2, v37, &v38);
    if (v39)
    {
      unint64_t v40 = v39;
      operator delete(v39);
    }
    if (v71)
    {
      uint64_t v72 = v71;
      operator delete(v71);
    }
  }
  uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  unint64_t v33 = v76 | v32;
  uint64_t v34 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v35 = fst::ReverseProperties(v33, v20);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v34 | v35, 0x3FFFFFFF0007);
}

void sub_1B2041700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = ((uint64_t)(v6 - *a1) >> 5) + 1;
    if (v11 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (a2 - v10) >> 5;
    uint64_t v13 = v8 - v10;
    uint64_t v14 = v13 >> 4;
    if (v13 >> 4 <= v11) {
      uint64_t v14 = ((uint64_t)(v6 - *a1) >> 5) + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v22 = v7;
    if (v15) {
      int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v15);
    }
    else {
      int v16 = 0;
    }
    __n128 v18 = v16;
    BOOL v19 = &v16[32 * v12];
    int v20 = v19;
    uint64_t v21 = &v16[32 * v15];
    std::__split_buffer<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::push_back[abi:ne180100](&v18, a3);
    unint64_t v4 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__swap_out_circular_buffer(a1, &v18, v4);
    std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>> const&>((uint64_t)a1, a3);
  }
  else
  {
    std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__move_range((uint64_t)a1, a2, v6, (char *)(a2 + 32));
    if (v4 <= a3) {
      a3 += 32 * (a1[1] > a3);
    }
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v4, a3);
  }
  return v4;
}

void sub_1B2041A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::NShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, int a6, int a7, float a8)
{
  if (!a4) {
    return;
  }
  if ((a7 & 1) != 0
    && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 0x400000000, 1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v16 = fst::LogMessage::LogMessage((fst *)&v147, (uint64_t)__p);
    unsigned int v17 = (void *)fst::cerr(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"NShortestPath: FST has a cycle and include_final_ties was set to true. This is not currently supported.", 103);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v147);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
    return;
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v18);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v19);
  uint64_t v168 = 0;
  unint64_t v169 = 0;
  unint64_t v170 = 0;
  unint64_t v165 = 0;
  int v166 = 0;
  uint64_t v167 = 0;
  std::string v162 = 0;
  unint64_t v163 = 0;
  int v164 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) != -1)
  {
    uint64_t v22 = *a3;
    uint64_t v21 = a3[1];
    if ((*(int (**)(uint64_t))(*(void *)a1 + 24))(a1) < (unint64_t)((v21 - v22) >> 5))
    {
      BOOL v23 = (float *)(*a3 + 32 * (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1));
      float v24 = v23[1];
      *(float *)std::string __p = *v23;
      float v147 = v24;
      LODWORD(v138) = 2139095040;
      LODWORD(v133) = 2139095040;
      if (*(float *)__p != INFINITY || (v20.n128_f32[0] = v147, v147 != *(float *)&v133))
      {
        v20.n128_u32[0] = *(_DWORD *)a5;
        float v25 = *(float *)a5 + *(float *)(a5 + 4);
        if (v25 >= 0.0)
        {
          BOOL v26 = v20.n128_f32[0] < 0.0;
          if (v25 > 0.0) {
            BOOL v26 = 0;
          }
          if (a6 && !v26)
          {
            uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
            (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v27);
            uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
            long long v160 = 0u;
            long long v161 = 0u;
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a2 + 184))(a2, v28, &v160);
            int v126 = a6;
            int v124 = a7;
            if (*((void *)&v160 + 1))
            {
              *(void *)&long long v161 = *((void *)&v160 + 1);
              operator delete(*((void **)&v160 + 1));
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v169 - v168) >> 3) <= (int)v28)
            {
              int v29 = (void *)vdup_n_s32(0x7F800000u);
              do
              {
                LODWORD(__p[0]) = -1;
                __p[1] = v29;
                memset(&__p[2], 0, 24);
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[2], 0, 0, 0);
                unint64_t v30 = v169;
                if (v169 >= v170)
                {
                  uint64_t v31 = std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(&v168, (uint64_t)__p);
                }
                else
                {
                  std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>((uint64_t)&v168, (uint64_t)__p);
                  uint64_t v31 = v30 + 40;
                }
                unint64_t v169 = v31;
                if (__p[2])
                {
                  __p[3] = __p[2];
                  operator delete(__p[2]);
                  uint64_t v31 = v169;
                }
              }
              while (0xCCCCCCCCCCCCCCCDLL * ((v31 - v168) >> 3) <= (int)v28);
            }
            LODWORD(__p[0]) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
            memset(&__p[1], 0, 32);
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[2], 0, 0, 0);
            uint64_t v32 = v168;
            uint64_t v33 = v168 + 40 * (int)v28;
            *(_DWORD *)uint64_t v33 = __p[0];
            *(void **)(v33 + 8) = __p[1];
            if ((void **)(v33 + 8) != &__p[1]) {
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v32 + 40 * (int)v28 + 16), (char *)__p[2], (uint64_t)__p[3], ((char *)__p[3] - (char *)__p[2]) >> 2);
            }
            if (__p[2])
            {
              __p[3] = __p[2];
              operator delete(__p[2]);
            }
            uint64_t v34 = v166;
            if (v166 >= (int *)v167)
            {
              unint64_t v36 = v165;
              uint64_t v37 = v166 - v165;
              unint64_t v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v39 = v167 - (char *)v165;
              if ((v167 - (char *)v165) >> 1 > v38) {
                unint64_t v38 = v39 >> 1;
              }
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v40 = v38;
              }
              if (v40)
              {
                uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v167, v40);
                unint64_t v36 = v165;
                uint64_t v34 = v166;
              }
              else
              {
                uint64_t v41 = 0;
              }
              uint64_t v42 = (int *)&v41[4 * v37];
              uint64_t v43 = &v41[4 * v40];
              *uint64_t v42 = v28;
              unint64_t v35 = v42 + 1;
              while (v34 != v36)
              {
                int v44 = *--v34;
                *--uint64_t v42 = v44;
              }
              unint64_t v165 = v42;
              int v166 = v35;
              uint64_t v167 = v43;
              if (v36) {
                operator delete(v36);
              }
            }
            else
            {
              int *v166 = v28;
              unint64_t v35 = v34 + 1;
            }
            int v166 = v35;
            char v125 = 0;
            uint64_t v45 = (float *)(*a3 + 32 * (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1));
            float v46 = *v45 + *(float *)a5;
            float v47 = v45[1] + *(float *)(a5 + 4);
            memset(v159, 0, sizeof(v159));
            uint64_t v155 = 0;
            unint64_t v156 = 0;
            unint64_t v157 = 0;
            float v48 = v46 + v47;
            BOOL v49 = (void *)vdup_n_s32(0x7F800000u);
LABEL_54:
            float32x2_t v50 = v165;
            uint64_t v51 = v166;
            if (v165 == v166) {
              goto LABEL_212;
            }
            v152[0] = &v168;
            v152[1] = a3;
            int v153 = -1;
            float v154 = a8;
            if ((char *)v166 - (char *)v165 >= 5)
            {
              int v52 = *v165;
              float v53 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>> &,std::__wrap_iter<int *>>(v165, v152, (unint64_t)((char *)v166 - (char *)v165) >> 2);
              float v54 = v51 - 1;
              if (v51 - 1 == v53)
              {
                int *v53 = v52;
              }
              else
              {
                int *v53 = *v54;
                int *v54 = v52;
                std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>> &,std::__wrap_iter<int *>>((BOOL)v50, (uint64_t)(v53 + 1), v152, v53 + 1 - v50);
              }
            }
            int v55 = *(v166 - 1);
            uint64_t v56 = v168 + 40 * v55;
            float v147 = *(float *)v56;
            float32x2_t v148 = *(float32x2_t *)(v56 + 8);
            unint64_t v150 = 0;
            uint64_t v151 = 0;
            unint64_t v149 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v149, *(const void **)(v56 + 16), *(void *)(v56 + 24), (uint64_t)(*(void *)(v56 + 24) - *(void *)(v56 + 16)) >> 2);
            --v166;
            if (v147 == NAN)
            {
              *(_OWORD *)char v145 = 0u;
              long long v146 = 0u;
              float v58 = 0.0;
              float v59 = 0.0;
            }
            else if (SLODWORD(v147) >= (unint64_t)((a3[1] - *a3) >> 5))
            {
              v145[0] = (void *)vdup_n_s32(0x7F800000u);
              long long v146 = 0uLL;
              v145[1] = 0;
              float v58 = INFINITY;
              float v59 = INFINITY;
            }
            else
            {
              uint64_t v57 = *a3 + 32 * SLODWORD(v147);
              v145[0] = *(void **)v57;
              long long v146 = 0uLL;
              v145[1] = 0;
              std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v145[1], *(const void **)(v57 + 8), *(void *)(v57 + 16), (uint64_t)(*(void *)(v57 + 16) - *(void *)(v57 + 8)) >> 2);
              float v58 = *((float *)v145 + 1);
              float v59 = *(float *)v145;
            }
            float v60 = v59 + v148.f32[0];
            float v61 = v60 + (float)(v58 + v148.f32[1]);
            if (v48 < v61
              || v46 < v60 && v48 <= v61
              || v126 != -1 && (*(int (**)(uint64_t))(*(void *)a2 + 160))(a2) >= v126)
            {
              goto LABEL_204;
            }
            uint64_t v62 = v162;
            int v63 = v163;
            unint64_t v64 = (v163 - v162) >> 2;
            for (i = v147; v64 <= SLODWORD(v147) + 1; int v63 = v66)
            {
              if (v63 >= v164)
              {
                unint64_t v67 = v64 + 1;
                if ((v64 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v68 = v164 - v62;
                if ((v164 - v62) >> 1 > v67) {
                  unint64_t v67 = v68 >> 1;
                }
                if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v69 = v67;
                }
                if (v69)
                {
                  uint64_t v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v164, v69);
                  uint64_t v62 = v162;
                  int v63 = v163;
                }
                else
                {
                  uint64_t v70 = 0;
                }
                unint64_t v71 = &v70[4 * v64];
                *(_DWORD *)unint64_t v71 = 0;
                uint64_t v66 = v71 + 4;
                while (v63 != v62)
                {
                  int v72 = *((_DWORD *)v63 - 1);
                  v63 -= 4;
                  *((_DWORD *)v71 - 1) = v72;
                  v71 -= 4;
                }
                std::string v162 = v71;
                unint64_t v163 = v66;
                int v164 = &v70[4 * v69];
                if (v62)
                {
                  operator delete(v62);
                  uint64_t v62 = v162;
                }
                else
                {
                  uint64_t v62 = v71;
                }
              }
              else
              {
                *(_DWORD *)int v63 = 0;
                uint64_t v66 = v63 + 4;
              }
              unint64_t v163 = v66;
              unint64_t v64 = (v66 - v62) >> 2;
              float i = v147;
            }
            if (v124)
            {
              unint64_t v73 = v156;
              unint64_t v74 = LODWORD(i) + 1;
              if (v74 >= ((uint64_t)v156 - v155) >> 5)
              {
                do
                {
                  __p[0] = v49;
                  memset(&__p[1], 0, 24);
                  if ((unint64_t)v73 >= v157)
                  {
                    unint64_t v73 = (void *)std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(&v155, (uint64_t)__p);
                  }
                  else
                  {
                    *unint64_t v73 = v49;
                    v73[2] = 0;
                    uint64_t v73[3] = 0;
                    v73[1] = 0;
                    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v73 + 1, __p[1], (uint64_t)__p[2], ((char *)__p[2] - (char *)__p[1]) >> 2);
                    v73 += 4;
                  }
                  unint64_t v156 = v73;
                  if (__p[1])
                  {
                    __p[2] = __p[1];
                    operator delete(__p[1]);
                    unint64_t v73 = v156;
                  }
                  unint64_t v74 = SLODWORD(v147) + 1;
                }
                while (v74 >= ((uint64_t)v73 - v155) >> 5);
                uint64_t v62 = v162;
              }
            }
            else
            {
              unint64_t v74 = LODWORD(i) + 1;
            }
            ++*(_DWORD *)&v62[4 * v74];
            uint64_t v75 = LODWORD(v147);
            if (v147 == NAN)
            {
              if (v125)
              {
                BOOL v76 = v158.f32[0] == v148.f32[0] && v158.f32[1] == v148.f32[1];
                float v77 = vabds_f32(v158.f32[0] + v158.f32[1], v148.f32[0] + v148.f32[1]);
                if (!v76 && v77 > 0.00097656)
                {
                  BOOL v83 = 1;
                  char v125 = 1;
                  goto LABEL_205;
                }
              }
              uint64_t v79 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
              memset(__p, 0, sizeof(__p));
              std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[2], 0, 0, 0);
              int v144 = v55;
              (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 208))(a2, v79, __p);
              if (__p[2])
              {
                __p[3] = __p[2];
                operator delete(__p[2]);
              }
              uint64_t v75 = LODWORD(v147);
            }
            if ((v125 & 1) == 0)
            {
              if (v75 != -1)
              {
                char v125 = 0;
LABEL_115:
                uint64_t v80 = (int)v75 + 1;
                unint64_t v81 = *(int *)&v162[4 * v80];
                if (v124)
                {
                  if (v81 == a4)
                  {
                    __int32 v82 = (float32x2_t *)(v155 + 32 * v80);
                    *__int32 v82 = v148;
                    if (v82 != &v148)
                    {
                      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v82[1], (char *)v149, (uint64_t)v150, (v150 - (unsigned char *)v149) >> 2);
                      uint64_t v75 = LODWORD(v147);
                    }
                  }
                  else if (v81 > a4)
                  {
                    float32x2_t v85 = (float *)(v155 + 32 * v80);
                    float v86 = v85[1];
                    BOOL v87 = v148.f32[0] == *v85 && v148.f32[1] == v86;
                    float v88 = vabds_f32(v148.f32[0] + v148.f32[1], *v85 + v86);
                    if (!v87 && v88 > 0.00097656) {
                      goto LABEL_204;
                    }
                  }
                }
                else if (v81 > a4)
                {
                  goto LABEL_204;
                }
                unint64_t v142 = 0;
                (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 136))(a1, v75, &v138);
                while (1)
                {
                  if (v138)
                  {
                    if ((*(unsigned int (**)(void *))(*(void *)v138 + 24))(v138))
                    {
                      if (v138)
                      {
                        (*(void (**)(void))(*(void *)v138 + 8))();
                      }
                      else
                      {
LABEL_172:
                        if (v141) {
                          --*v141;
                        }
                      }
                      (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a1 + 32))(__p, a1, LODWORD(v147));
                      char v138 = __p[0];
                      char v140 = 0;
                      uint64_t v141 = 0;
                      float v139 = 0;
                      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v139, __p[1], (uint64_t)__p[2], ((char *)__p[2] - (char *)__p[1]) >> 2);
                      if (__p[1])
                      {
                        __p[2] = __p[1];
                        operator delete(__p[1]);
                      }
                      LODWORD(v133) = HIDWORD(v138);
                      LODWORD(__p[0]) = v138;
                      int v172 = 2139095040;
                      float v171 = INFINITY;
                      v108.n128_u32[0] = v138;
                      if (*(float *)&v138 != INFINITY
                        || (v108.n128_u32[0] = v133, *(float *)&v133 != v171))
                      {
                        float32x2_t v109 = v148;
                        float32x2_t v123 = (float32x2_t)v138;
                        uint64_t v110 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a2 + 200))(a2, v108);
                        LODWORD(__p[0]) = -1;
                        __p[1] = (void *)vadd_f32(v109, v123);
                        memset(&__p[2], 0, 24);
                        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[2], 0, 0, 0);
                        unint64_t v111 = v169;
                        if (v169 >= v170)
                        {
                          uint64_t v112 = std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(&v168, (uint64_t)__p);
                        }
                        else
                        {
                          std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>((uint64_t)&v168, (uint64_t)__p);
                          uint64_t v112 = v111 + 40;
                        }
                        unint64_t v169 = v112;
                        if (__p[2])
                        {
                          __p[3] = __p[2];
                          operator delete(__p[2]);
                        }
                        __p[0] = 0;
                        __p[1] = v138;
                        memset(&__p[2], 0, 24);
                        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[2], v139, (uint64_t)v140, (v140 - (unsigned char *)v139) >> 2);
                        int v144 = v55;
                        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 208))(a2, v110, __p);
                        if (__p[2])
                        {
                          __p[3] = __p[2];
                          operator delete(__p[2]);
                        }
                        long long v113 = v166;
                        if (v166 >= (int *)v167)
                        {
                          uint64_t v115 = v165;
                          uint64_t v116 = v166 - v165;
                          unint64_t v117 = v116 + 1;
                          if ((unint64_t)(v116 + 1) >> 62) {
                            std::vector<int>::__throw_length_error[abi:ne180100]();
                          }
                          uint64_t v118 = v167 - (char *)v165;
                          if ((v167 - (char *)v165) >> 1 > v117) {
                            unint64_t v117 = v118 >> 1;
                          }
                          if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v119 = v117;
                          }
                          if (v119)
                          {
                            float v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v167, v119);
                            uint64_t v115 = v165;
                            long long v113 = v166;
                          }
                          else
                          {
                            float v120 = 0;
                          }
                          uint64_t v121 = (int *)&v120[4 * v116];
                          *uint64_t v121 = v110;
                          uint64_t v114 = (uint64_t)(v121 + 1);
                          while (v113 != v115)
                          {
                            int v122 = *--v113;
                            *--uint64_t v121 = v122;
                          }
                          unint64_t v165 = v121;
                          int v166 = (int *)v114;
                          uint64_t v167 = &v120[4 * v119];
                          if (v115) {
                            operator delete(v115);
                          }
                        }
                        else
                        {
                          int *v166 = v110;
                          uint64_t v114 = (uint64_t)(v113 + 1);
                        }
                        int v166 = (int *)v114;
                        v127[0] = &v168;
                        v127[1] = a3;
                        int v128 = -1;
                        float v129 = a8;
                        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>> &,std::__wrap_iter<int *>>((BOOL)v165, v114, v127, (v114 - (uint64_t)v165) >> 2);
                      }
                      if (v139)
                      {
                        char v140 = v139;
                        operator delete(v139);
                      }
LABEL_204:
                      BOOL v83 = 0;
LABEL_205:
                      if (v145[1])
                      {
                        *(void **)&long long v146 = v145[1];
                        operator delete(v145[1]);
                      }
                      if (v149)
                      {
                        unint64_t v150 = v149;
                        operator delete(v149);
                      }
                      if (v83) {
LABEL_212:
                      }
                        fst::Connect<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a2);
                      goto LABEL_54;
                    }
                    if (v138)
                    {
                      __n128 v90 = (char *)(*(uint64_t (**)(void))(*(void *)v138 + 32))();
                      goto LABEL_142;
                    }
                  }
                  else if (v142 >= (unint64_t)v140)
                  {
                    goto LABEL_172;
                  }
                  __n128 v90 = (char *)v139 + 48 * v142;
LABEL_142:
                  BOOL v91 = *(void **)v90;
                  float v133 = (void *)*((void *)v90 + 1);
                  unint64_t v135 = 0;
                  float v136 = 0;
                  BOOL v134 = 0;
                  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v134, *((const void **)v90 + 2), *((void *)v90 + 3), (uint64_t)(*((void *)v90 + 3) - *((void *)v90 + 2)) >> 2);
                  int v92 = *((_DWORD *)v90 + 10);
                  __p[0] = v91;
                  __p[1] = v133;
                  memset(&__p[2], 0, 24);
                  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[2], v134, (uint64_t)v135, ((unsigned char *)v135 - (unsigned char *)v134) >> 2);
                  int v144 = v92;
                  if (v134)
                  {
                    unint64_t v135 = v134;
                    operator delete(v134);
                  }
                  float32x2_t v93 = v148;
                  float v94 = __p[1];
                  uint64_t v95 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
                  LODWORD(v133) = v144;
                  BOOL v134 = (void *)vadd_f32(v93, (float32x2_t)v94);
                  float v136 = 0;
                  uint64_t v137 = 0;
                  unint64_t v135 = 0;
                  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v135, 0, 0, 0);
                  unint64_t v96 = v169;
                  if (v169 >= v170)
                  {
                    uint64_t v97 = std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(&v168, (uint64_t)&v133);
                  }
                  else
                  {
                    std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>((uint64_t)&v168, (uint64_t)&v133);
                    uint64_t v97 = v96 + 40;
                  }
                  unint64_t v169 = v97;
                  if (v135)
                  {
                    float v136 = v135;
                    operator delete(v135);
                  }
                  int v144 = v55;
                  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 208))(a2, v95, __p);
                  unint64_t v98 = v166;
                  if (v166 >= (int *)v167)
                  {
                    uint64_t v100 = v165;
                    uint64_t v101 = v166 - v165;
                    unint64_t v102 = v101 + 1;
                    if ((unint64_t)(v101 + 1) >> 62) {
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v103 = v167 - (char *)v165;
                    if ((v167 - (char *)v165) >> 1 > v102) {
                      unint64_t v102 = v103 >> 1;
                    }
                    if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v104 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v104 = v102;
                    }
                    if (v104)
                    {
                      uint64_t v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v167, v104);
                      uint64_t v100 = v165;
                      unint64_t v98 = v166;
                    }
                    else
                    {
                      uint64_t v105 = 0;
                    }
                    float32x2_t v106 = (int *)&v105[4 * v101];
                    *float32x2_t v106 = v95;
                    uint64_t v99 = (uint64_t)(v106 + 1);
                    while (v98 != v100)
                    {
                      int v107 = *--v98;
                      *--float32x2_t v106 = v107;
                    }
                    unint64_t v165 = v106;
                    int v166 = (int *)v99;
                    uint64_t v167 = &v105[4 * v104];
                    if (v100) {
                      operator delete(v100);
                    }
                  }
                  else
                  {
                    int *v166 = v95;
                    uint64_t v99 = (uint64_t)(v98 + 1);
                  }
                  int v166 = (int *)v99;
                  v130[0] = &v168;
                  v130[1] = a3;
                  int v131 = -1;
                  float v132 = a8;
                  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>> &,std::__wrap_iter<int *>>((BOOL)v165, v99, v130, (v99 - (uint64_t)v165) >> 2);
                  if (__p[2])
                  {
                    __p[3] = __p[2];
                    operator delete(__p[2]);
                  }
                  if (v138) {
                    (*(void (**)(void *))(*(void *)v138 + 40))(v138);
                  }
                  else {
                    ++v142;
                  }
                }
              }
              BOOL v83 = *(int *)v162 == a4;
              if (*(_DWORD *)v162 != a4 || v124 == 0)
              {
                char v125 = 0;
                goto LABEL_205;
              }
              float32x2_t v158 = v148;
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v159, (char *)v149, (uint64_t)v150, (v150 - (unsigned char *)v149) >> 2);
              uint64_t v75 = LODWORD(v147);
            }
            char v125 = 1;
            if (v75 == -1) {
              goto LABEL_204;
            }
            goto LABEL_115;
          }
        }
      }
    }
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void, __n128))(*(void *)a1 + 64))(a1, 4, 0, v20)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 4, 4);
  }
  __p[0] = &v168;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B2042E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,char *a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  a39 = &a58;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  uint64_t v65 = *(void **)(v63 - 224);
  if (v65)
  {
    *(void *)(v63 - 216) = v65;
    operator delete(v65);
  }
  uint64_t v66 = *(void **)(v63 - 200);
  if (v66)
  {
    *(void *)(v63 - 192) = v66;
    operator delete(v66);
  }
  a39 = (char *)(v63 - 176);
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  _Unwind_Resume(a1);
}

void *std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(a1 + 8);
  *int v3 = *(void *)a2;
  v3[2] = 0;
  void v3[3] = 0;
  v3[1] = 0;
  uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  *(void *)(a1 + 8) = v3 + 4;
  return result;
}

void sub_1B2043134(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unsigned int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  int v16 = &v10[32 * v9];
  *(void *)unint64_t v11 = *(void *)a2;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 1) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)v11 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  v15 += 32;
  std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B2043228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      uint64_t v10 = *(void *)(v9 - 32);
      v9 -= 32;
      *(void *)(v7 - ++*(void *)(result + 24) = 0;
      unint64_t v11 = (void *)(v7 - 24);
      *(v11 - 1) = v10;
      v11[1] = 0;
      void v11[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)(v9 + 8), *(void *)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 2);
      uint64_t v7 = *((void *)&v17 + 1) - 32;
      *((void *)&v17 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

void sub_1B2043370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void fst::ShortestDistanceState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::ShortestDistance(uint64_t *a1, int a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
      return;
    }
    uint64_t v101 = (char *)a1 + 116;
    goto LABEL_178;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100]((uint64_t *)a1[1]);
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a1 + 5);
    a1[9] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  unint64_t v4 = a2;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v6 = v5 + 1;
  uint64_t v7 = *v5;
  if (a2 >= (unint64_t)((v5[1] - *v5) >> 5))
  {
    int32x2_t v8 = vdup_n_s32(0x7F800000u);
    do
    {
      int32x2_t v111 = v8;
      long long v113 = 0;
      uint64_t v114 = 0;
      std::string __p = 0;
      unint64_t v9 = v5[1];
      if (v9 >= v5[2])
      {
        uint64_t v10 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v5, (uint64_t)&v111);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)v5, (uint64_t)&v111);
        uint64_t v10 = v9 + 32;
      }
      *uint64_t v6 = v10;
      if (__p)
      {
        long long v113 = __p;
        operator delete(__p);
      }
      int32x2_t v111 = v8;
      long long v113 = 0;
      uint64_t v114 = 0;
      std::string __p = 0;
      unint64_t v11 = (void *)a1[6];
      if ((unint64_t)v11 >= a1[7])
      {
        uint64_t v12 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a1 + 5, (uint64_t)&v111);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)(a1 + 5), (uint64_t)&v111);
        uint64_t v12 = (uint64_t)(v11 + 4);
      }
      a1[6] = v12;
      if (__p)
      {
        long long v113 = __p;
        operator delete(__p);
      }
      v111.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v111);
      uint64_t v5 = (uint64_t *)a1[1];
      uint64_t v6 = v5 + 1;
      uint64_t v7 = *v5;
    }
    while (a2 >= (unint64_t)((v5[1] - *v5) >> 5));
  }
  if (*((unsigned char *)a1 + 33))
  {
    uint64_t v13 = (char *)a1[11];
    uint64_t v14 = (char *)a1[12];
    unint64_t v15 = (v14 - v13) >> 2;
    if (v15 <= a2)
    {
      long long v16 = a1 + 13;
      do
      {
        if ((unint64_t)v14 >= *v16)
        {
          unint64_t v18 = v15 + 1;
          if ((v15 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = *v16 - (void)v13;
          if (v19 >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v20);
            uint64_t v13 = (char *)a1[11];
            uint64_t v14 = (char *)a1[12];
          }
          else
          {
            uint64_t v21 = 0;
          }
          uint64_t v22 = &v21[4 * v15];
          *(_DWORD *)uint64_t v22 = -1;
          long long v17 = v22 + 4;
          while (v14 != v13)
          {
            int v23 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            v22 -= 4;
          }
          a1[11] = (uint64_t)v22;
          a1[12] = (uint64_t)v17;
          a1[13] = (uint64_t)&v21[4 * v20];
          if (v13)
          {
            operator delete(v13);
            uint64_t v13 = (char *)a1[11];
          }
          else
          {
            uint64_t v13 = v22;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v14 = -1;
          long long v17 = v14 + 4;
        }
        a1[12] = (uint64_t)v17;
        unint64_t v15 = (v17 - v13) >> 2;
        uint64_t v14 = v17;
      }
      while (v15 <= a2);
      uint64_t v7 = *(void *)a1[1];
    }
    *(_DWORD *)&v13[4 * a2] = *((_DWORD *)a1 + 28);
  }
  uint64_t v24 = v7 + 32 * a2;
  *(void *)uint64_t v24 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v24 + 8), 0, 0, 0);
  float v25 = a1 + 5;
  uint64_t v26 = a1[5] + 32 * v4;
  *(void *)uint64_t v26 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v26 + 8), 0, 0, 0);
  uint64_t v27 = a1 + 8;
  uint64_t v28 = *(uint64_t **)(a1[2] + 16);
  uint64_t v29 = *v28;
  *(void *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(uint64_t *, unint64_t))(v29 + 24))(v28, v4);
  unint64_t v30 = (void **)(a1 + 11);
  uint64_t v31 = a1 + 13;
  uint64_t v101 = (char *)a1 + 116;
  int32x2_t v32 = vdup_n_s32(0x7F800000u);
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_174;
    }
    int v33 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    while (1)
    {
      uint64_t v34 = (uint64_t *)a1[1];
      unint64_t v35 = v34 + 1;
      if (v33 < (unint64_t)((v34[1] - *v34) >> 5)) {
        break;
      }
      int32x2_t v111 = v32;
      long long v113 = 0;
      uint64_t v114 = 0;
      std::string __p = 0;
      unint64_t v36 = v34[1];
      if (v36 >= v34[2])
      {
        uint64_t v37 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v34, (uint64_t)&v111);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)v34, (uint64_t)&v111);
        uint64_t v37 = v36 + 32;
      }
      *unint64_t v35 = v37;
      if (__p)
      {
        long long v113 = __p;
        operator delete(__p);
      }
      int32x2_t v111 = v32;
      long long v113 = 0;
      uint64_t v114 = 0;
      std::string __p = 0;
      unint64_t v38 = (void *)a1[6];
      if ((unint64_t)v38 >= a1[7])
      {
        uint64_t v39 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a1 + 5, (uint64_t)&v111);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)(a1 + 5), (uint64_t)&v111);
        uint64_t v39 = (uint64_t)(v38 + 4);
      }
      a1[6] = v39;
      if (__p)
      {
        long long v113 = __p;
        operator delete(__p);
      }
      v111.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v111);
    }
    if (*((unsigned char *)a1 + 32))
    {
      (*(void (**)(int32x2_t *__return_ptr))(*(void *)*a1 + 32))(&v111);
      v107.i32[0] = v111.i32[1];
      v116.i32[0] = v111.i32[0];
      LODWORD(v103) = 2139095040;
      float v120 = INFINITY;
      BOOL v40 = *(float *)v111.i32 != INFINITY || *(float *)v107.i32 != v120;
      if (__p)
      {
        long long v113 = __p;
        operator delete(__p);
      }
      if (v40)
      {
LABEL_174:
        ++*((_DWORD *)a1 + 28);
        if (!(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0)) {
          return;
        }
LABEL_178:
        *uint64_t v101 = 1;
        return;
      }
    }
    *(void *)(*v27 + (((unint64_t)v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v33);
    uint64_t v41 = *v25 + 32 * v33;
    float32x2_t v116 = *(float32x2_t *)v41;
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    unint64_t v117 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v117, *(const void **)(v41 + 8), *(void *)(v41 + 16), (uint64_t)(*(void *)(v41 + 16) - *(void *)(v41 + 8)) >> 2);
    uint64_t v42 = *v25 + 32 * v33;
    *(int32x2_t *)uint64_t v42 = v32;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v42 + 8), 0, 0, 0);
    uint64_t v43 = *a1;
    uint64_t v44 = *(void *)*a1;
    unint64_t v115 = 0;
    (*(void (**)(uint64_t, void, int32x2_t *))(v44 + 136))(v43, v33, &v111);
    while (1)
    {
      if (!*(void *)&v111)
      {
        if (v115 >= (unint64_t)v113)
        {
          int v87 = 10;
          goto LABEL_166;
        }
LABEL_70:
        BOOL v49 = (float32x2_t *)((char *)__p + 48 * v115);
        goto LABEL_71;
      }
      char v45 = (*(uint64_t (**)(int32x2_t))(**(void **)&v111 + 24))(v111);
      int32x2_t v48 = v111;
      if (v45) {
        break;
      }
      if (!*(void *)&v111) {
        goto LABEL_70;
      }
      BOOL v49 = (float32x2_t *)(*(uint64_t (**)(void))(**(void **)&v111 + 32))();
LABEL_71:
      float32x2_t v50 = (uint64_t *)a1[1];
      uint64_t v51 = v50 + 1;
      for (unint64_t i = v49[5].i32[0]; i >= (v50[1] - *v50) >> 5; unint64_t i = v49[5].i32[0])
      {
        int32x2_t v107 = v32;
        float32x2_t v109 = 0;
        uint64_t v110 = 0;
        __n128 v108 = 0;
        unint64_t v53 = v50[1];
        if (v53 >= v50[2])
        {
          uint64_t v54 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v50, (uint64_t)&v107);
        }
        else
        {
          std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)v50, (uint64_t)&v107);
          uint64_t v54 = v53 + 32;
        }
        *uint64_t v51 = v54;
        if (v108)
        {
          float32x2_t v109 = v108;
          operator delete(v108);
        }
        int32x2_t v107 = v32;
        float32x2_t v109 = 0;
        uint64_t v110 = 0;
        __n128 v108 = 0;
        int v55 = (void *)a1[6];
        if ((unint64_t)v55 >= a1[7])
        {
          uint64_t v56 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a1 + 5, (uint64_t)&v107);
        }
        else
        {
          std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)(a1 + 5), (uint64_t)&v107);
          uint64_t v56 = (uint64_t)(v55 + 4);
        }
        a1[6] = v56;
        if (v108)
        {
          float32x2_t v109 = v108;
          operator delete(v108);
        }
        v107.i8[0] = 0;
        std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v107);
        float32x2_t v50 = (uint64_t *)a1[1];
        uint64_t v51 = v50 + 1;
      }
      if (*((unsigned char *)a1 + 33))
      {
        uint64_t v57 = (char *)a1[11];
        float v58 = (char *)a1[12];
        unint64_t v59 = (v58 - v57) >> 2;
        if (v59 <= (int)i)
        {
          do
          {
            if ((unint64_t)v58 >= *v31)
            {
              unint64_t v62 = v59 + 1;
              if ((v59 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v63 = *v31 - (void)v57;
              if (v63 >> 1 > v62) {
                unint64_t v62 = v63 >> 1;
              }
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v62;
              }
              if (v64)
              {
                uint64_t v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v31, v64);
                uint64_t v57 = (char *)a1[11];
                float v58 = (char *)a1[12];
              }
              else
              {
                uint64_t v65 = 0;
              }
              uint64_t v66 = &v65[4 * v59];
              *(_DWORD *)uint64_t v66 = -1;
              float v61 = v66 + 4;
              while (v58 != v57)
              {
                int v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              a1[11] = (uint64_t)v66;
              a1[12] = (uint64_t)v61;
              a1[13] = (uint64_t)&v65[4 * v64];
              if (v57)
              {
                operator delete(v57);
                uint64_t v57 = (char *)*v30;
              }
              else
              {
                uint64_t v57 = v66;
              }
            }
            else
            {
              *(_DWORD *)float v58 = -1;
              float v61 = v58 + 4;
            }
            a1[12] = (uint64_t)v61;
            unint64_t v59 = (v61 - v57) >> 2;
            LODWORD(i) = v49[5].i32[0];
            float v58 = v61;
          }
          while (v59 <= (int)i);
          uint64_t v60 = (int)i;
          float32x2_t v50 = (uint64_t *)a1[1];
        }
        else
        {
          uint64_t v60 = (int)i;
        }
        if (*(_DWORD *)&v57[4 * v60] != *((_DWORD *)a1 + 28))
        {
          uint64_t v68 = *v50 + 32 * v60;
          *(int32x2_t *)uint64_t v68 = v32;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v68 + 8), 0, 0, 0);
          uint64_t v69 = *v25 + 32 * v49[5].i32[0];
          *(int32x2_t *)uint64_t v69 = v32;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v69 + 8), 0, 0, 0);
          float32x2_t v50 = (uint64_t *)a1[1];
          uint64_t v70 = (void *)a1[11];
          LODWORD(i) = *((_DWORD *)a1 + 28);
          unint64_t v71 = v49[5].i32[0];
          *(void *)(a1[8] + ((v71 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v71);
          *((_DWORD *)v70 + v71) = i;
          LODWORD(i) = v49[5].i32[0];
        }
      }
      uint64_t v72 = (int)i;
      uint64_t v73 = *v50;
      uint64_t v74 = *v50 + 32 * (int)i;
      uint64_t v75 = *v25;
      float32x2_t v76 = vadd_f32(v116, v49[1]);
      int32x2_t v107 = (int32x2_t)v76;
      float32x2_t v109 = 0;
      uint64_t v110 = 0;
      __n128 v108 = 0;
      float v78 = *(float *)v74;
      __int32 v77 = *(_DWORD *)(v74 + 4);
      float32x2_t v79 = (float32x2_t)vdup_lane_s32((int32x2_t)v76, 0);
      v79.i32[0] = *(_DWORD *)v74;
      float32x2_t v102 = v76;
      v76.i32[0] = v77;
      float32x2_t v80 = vadd_f32(v79, v76);
      float v81 = v80.f32[1];
      if (v80.f32[0] >= v80.f32[1])
      {
        if (v80.f32[0] > v80.f32[1]
          || (v78 >= v102.f32[0] ? (v83 = v78 <= v102.f32[0]) : (v83 = 1), __int32 v82 = (void *)v74, !v83))
        {
          __int32 v77 = v102.i32[1];
          float v78 = v102.f32[0];
          __int32 v82 = &v107;
        }
      }
      else
      {
        __int32 v82 = (void *)v74;
      }
      unint64_t v103 = __PAIR64__(v77, LODWORD(v78));
      uint64_t v105 = 0;
      uint64_t v106 = 0;
      unint64_t v104 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v104, (const void *)v82[1], v82[2], (uint64_t)(v82[2] - v82[1]) >> 2);
      v46.n128_u32[0] = *(_DWORD *)v74;
      v47.n128_u32[0] = *(_DWORD *)(v74 + 4);
      if (*(float *)v74 == *(float *)&v103 && v47.n128_f32[0] == *((float *)&v103 + 1))
      {
        BOOL v86 = 1;
      }
      else
      {
        float v85 = v46.n128_f32[0] + v47.n128_f32[0];
        v47.n128_f32[0] = *(float *)&v103 + *((float *)&v103 + 1);
        v46.n128_f32[0] = vabds_f32(v85, *(float *)&v103 + *((float *)&v103 + 1));
        BOOL v86 = v46.n128_f32[0] <= *((float *)a1 + 7);
      }
      if (v104)
      {
        uint64_t v105 = v104;
        operator delete(v104);
      }
      if (v86)
      {
        int v87 = 0;
        int v88 = 1;
        unint64_t v30 = (void **)(a1 + 11);
        uint64_t v31 = a1 + 13;
        goto LABEL_152;
      }
      float v90 = *(float *)v74;
      float v89 = *(float *)(v74 + 4);
      float v91 = *(float *)v74 + v89;
      if (v91 >= v81)
      {
        if (v91 > v81 || (v90 >= v102.f32[0] ? (BOOL v93 = v90 <= v102.f32[0]) : (BOOL v93 = 1), v92 = (void *)v74, !v93))
        {
          float v89 = v102.f32[1];
          float v90 = v102.f32[0];
          int v92 = &v107;
        }
      }
      else
      {
        int v92 = (void *)v74;
      }
      unint64_t v103 = __PAIR64__(LODWORD(v89), LODWORD(v90));
      uint64_t v105 = 0;
      uint64_t v106 = 0;
      unint64_t v104 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v104, (const void *)v92[1], v92[2], (uint64_t)(v92[2] - v92[1]) >> 2);
      *(void *)uint64_t v74 = v103;
      if ((unint64_t *)v74 != &v103) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v73 + 32 * v72 + 8), (char *)v104, (uint64_t)v105, (v105 - (unsigned char *)v104) >> 2);
      }
      if (v104)
      {
        uint64_t v105 = v104;
        operator delete(v104);
      }
      float v94 = (float *)(v75 + 32 * v72);
      float v96 = *v94;
      float v95 = v94[1];
      float v97 = *v94 + v95;
      if (v97 >= v81)
      {
        if (v97 > v81) {
          goto LABEL_142;
        }
        if (v96 >= v102.f32[0])
        {
          unint64_t v98 = (int32x2_t *)(v75 + 32 * v72);
          if (v96 <= v102.f32[0]) {
            goto LABEL_143;
          }
LABEL_142:
          float v95 = v102.f32[1];
          float v96 = v102.f32[0];
          unint64_t v98 = &v107;
          goto LABEL_143;
        }
      }
      unint64_t v98 = (int32x2_t *)(v75 + 32 * v72);
LABEL_143:
      unint64_t v103 = __PAIR64__(LODWORD(v95), LODWORD(v96));
      uint64_t v105 = 0;
      uint64_t v106 = 0;
      unint64_t v104 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v104, *(const void **)&v98[1], *(void *)&v98[2], (uint64_t)(*(void *)&v98[2] - *(void *)&v98[1]) >> 2);
      *(void *)float v94 = v103;
      if (v94 != (float *)&v103) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v75 + 32 * v72 + 8), (char *)v104, (uint64_t)v105, (v105 - (unsigned char *)v104) >> 2);
      }
      if (v104)
      {
        uint64_t v105 = v104;
        operator delete(v104);
      }
      uint64_t v31 = a1 + 13;
      if (fst::LatticeWeightTpl<float>::Member((float *)v74) && fst::LatticeWeightTpl<float>::Member(v94))
      {
        uint64_t v99 = **(void **)(a1[2] + 16);
        if ((*(void *)(a1[8] + (((unint64_t)v49[5].i32[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v49[5].i32[0]))
        {
          (*(void (**)(void))(v99 + 40))();
          unint64_t v30 = (void **)(a1 + 11);
          int v87 = 0;
          int v88 = 1;
        }
        else
        {
          (*(void (**)(void))(v99 + 24))();
          unint64_t v30 = (void **)(a1 + 11);
          int v87 = 0;
          unint64_t v100 = v49[5].i32[0];
          int v88 = 1;
          *(void *)(*v27 + ((v100 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v100;
        }
      }
      else
      {
        int v88 = 0;
        int v87 = 1;
        *uint64_t v101 = 1;
        unint64_t v30 = (void **)(a1 + 11);
      }
LABEL_152:
      if (v108) {
        operator delete(v108);
      }
      int32x2_t v48 = v111;
      if (!v88) {
        goto LABEL_163;
      }
      if (v111) {
        (*(void (**)(__n128, __n128))(**(void **)&v111 + 40))(v46, v47);
      }
      else {
        ++v115;
      }
    }
    int v87 = 10;
LABEL_163:
    if (v48)
    {
      (*(void (**)(int32x2_t, __n128, __n128))(**(void **)&v48 + 8))(v48, v46, v47);
      goto LABEL_168;
    }
LABEL_166:
    if (v114) {
      --*v114;
    }
LABEL_168:
    if (v87 == 10) {
      int v87 = 0;
    }
    if (v117)
    {
      uint64_t v118 = v117;
      operator delete(v117);
    }
  }
  while (!v87);
}

void sub_1B204414C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v31 = *(void **)(v29 - 136);
  if (v31)
  {
    *(void *)(v29 - 128) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v7 = *a1 + 32 * a2;
      while (v4 != v7)
      {
        int32x2_t v8 = *(void **)(v4 - 24);
        if (v8)
        {
          *(void *)(v4 - 16) = v8;
          operator delete(v8);
        }
        v4 -= 32;
      }
      a1[1] = v7;
    }
  }
  else
  {
    unint64_t v6 = a2 - v5;
    std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__append(a1, v6, a3);
  }
}

void *std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = a1 + 2;
  uint64_t v7 = v8;
  uint64_t v9 = *(result - 1);
  if (a2 <= (v8 - v9) >> 5)
  {
    if (a2)
    {
      long long v16 = (void *)(v9 + 8);
      uint64_t v17 = 32 * a2;
      uint64_t v18 = v9 + 32 * a2;
      do
      {
        *(v16 - 1) = *(void *)a3;
        v16[1] = 0;
        v16[2] = 0;
        *long long v16 = 0;
        uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v16, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
        v16 += 4;
        v17 -= 32;
      }
      while (v17);
    }
    else
    {
      uint64_t v18 = *(result - 1);
    }
    a1[1] = v18;
  }
  else
  {
    uint64_t v10 = v9 - *a1;
    unint64_t v11 = a2 + (v10 >> 5);
    if (v11 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 5;
    uint64_t v13 = v7 - *a1;
    if (v13 >> 4 > v11) {
      unint64_t v11 = v13 >> 4;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    int v23 = result;
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)result, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v19 = v15;
    unint64_t v20 = &v15[32 * v12];
    uint64_t v21 = v20;
    uint64_t v22 = &v15[32 * v14];
    std::__split_buffer<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_at_end(&v19, a2, a3);
    std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__swap_out_circular_buffer(a1, &v19);
    return (void *)std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)&v19);
  }
  return result;
}

void sub_1B2044404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_at_end(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a2)
  {
    unint64_t v6 = (void *)(v4 + 8);
    uint64_t v7 = 32 * a2;
    v4 += 32 * a2;
    do
    {
      *(v6 - 1) = *(void *)a3;
      v6[1] = 0;
      uint64_t v6[2] = 0;
      *unint64_t v6 = 0;
      uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
      v6 += 4;
      v7 -= 32;
    }
    while (v7);
  }
  v3[2] = v4;
  return result;
}

void sub_1B20444A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2 - 8;
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorFst()
{
}

void sub_1B2044510(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
  *a3 = *(void *)v3;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3 + 1, *(const void **)(v3 + 8), *(void *)(v3 + 16), (uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 2);
}

unint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::NumArcs(uint64_t a1, int a2)
{
  return 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 56)
                  - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 48)) >> 4);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 32);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}